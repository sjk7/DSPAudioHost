/* bypass certain compile time usage checks */
#define JUCE_AMALGAMATED_INCLUDE 1

#include "AppConfig.h"


/*** Start of inlined file: juce_graphics.cpp ***/
#if defined (__JUCE_GRAPHICS_MODULE_JUCEHEADER__) && ! JUCE_AMALGAMATED_INCLUDE
 /* When you add this cpp file to your project, you mustn't include it in a file where you've
	already included any other headers - just put it inside a file on its own, possibly with your config
	flags preceding it, but don't include anything else. That also includes avoiding any automatic prefix
	header files that the compiler may be using.
 */
 #error "Incorrect use of JUCE cpp file"
#endif

// Your project must contain an AppConfig.h file with your project-specific settings in it,
// and your header search path must make it accessible to the module's files.
#include "AppConfig.h"


/*** Start of inlined file: juce_BasicNativeHeaders.h ***/
#ifndef __JUCE_BASICNATIVEHEADERS_JUCEHEADER__
#define __JUCE_BASICNATIVEHEADERS_JUCEHEADER__


/*** Start of inlined file: juce_TargetPlatform.h ***/
#ifndef __JUCE_TARGETPLATFORM_JUCEHEADER__
#define __JUCE_TARGETPLATFORM_JUCEHEADER__

/*  This file figures out which platform is being built, and defines some macros
	that the rest of the code can use for OS-specific compilation.

	Macros that will be set here are:

	- One of JUCE_WINDOWS, JUCE_MAC JUCE_LINUX, JUCE_IOS, JUCE_ANDROID, etc.
	- Either JUCE_32BIT or JUCE_64BIT, depending on the architecture.
	- Either JUCE_LITTLE_ENDIAN or JUCE_BIG_ENDIAN.
	- Either JUCE_INTEL or JUCE_PPC
	- Either JUCE_GCC or JUCE_MSVC
*/

/* This line is here as a sanity-check to catch syntax errors caused by mistakes in 3rd-party
   header files that have been included before this one. If you hit an error at this line, there
   must be some kind of syntax problem in whatever code immediately precedes this header.

   It also causes an error if you attempt to build using a C or obj-C compiler rather than a C++ one.
*/
namespace JuceDummyNamespace {}

#if (defined (_WIN32) || defined (_WIN64))
  #define       JUCE_WIN32 1
  #define       JUCE_WINDOWS 1
#elif defined (JUCE_ANDROID)
  #undef        JUCE_ANDROID
  #define       JUCE_ANDROID 1
#elif defined (LINUX) || defined (__linux__)
  #define     JUCE_LINUX 1
#elif defined (__APPLE_CPP__) || defined(__APPLE_CC__)
  #define Point CarbonDummyPointName // (workaround to avoid definition of "Point" by old Carbon headers)
  #define Component CarbonDummyCompName
  #include <CoreFoundation/CoreFoundation.h> // (needed to find out what platform we're using)
  #undef Point
  #undef Component

  #if TARGET_OS_IPHONE || TARGET_IPHONE_SIMULATOR
	#define     JUCE_IPHONE 1
	#define     JUCE_IOS 1
  #else
	#define     JUCE_MAC 1
  #endif
#else
  #error "Unknown platform!"
#endif

#if JUCE_WINDOWS
  #ifdef _MSC_VER
	#ifdef _WIN64
	  #define JUCE_64BIT 1
	#else
	  #define JUCE_32BIT 1
	#endif
  #endif

  #ifdef _DEBUG
	#define JUCE_DEBUG 1
  #endif

  #ifdef __MINGW32__
	#define JUCE_MINGW 1
  #endif

  /** If defined, this indicates that the processor is little-endian. */
  #define JUCE_LITTLE_ENDIAN 1

  #define JUCE_INTEL 1
#endif

#if JUCE_MAC || JUCE_IOS

  #if defined (DEBUG) || defined (_DEBUG) || ! (defined (NDEBUG) || defined (_NDEBUG))
	#define JUCE_DEBUG 1
  #endif

  #if ! (defined (DEBUG) || defined (_DEBUG) || defined (NDEBUG) || defined (_NDEBUG))
	#warning "Neither NDEBUG or DEBUG has been defined - you should set one of these to make it clear whether this is a release build,"
  #endif

  #ifdef __LITTLE_ENDIAN__
	#define JUCE_LITTLE_ENDIAN 1
  #else
	#define JUCE_BIG_ENDIAN 1
  #endif
#endif

#if JUCE_MAC

  #if defined (__ppc__) || defined (__ppc64__)
	#define JUCE_PPC 1
  #else
	#define JUCE_INTEL 1
  #endif

  #ifdef __LP64__
	#define JUCE_64BIT 1
  #else
	#define JUCE_32BIT 1
  #endif

  #if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_4
	#error "Building for OSX 10.3 is no longer supported!"
  #endif

  #ifndef MAC_OS_X_VERSION_10_5
	#error "To build with 10.4 compatibility, use a 10.5 or 10.6 SDK and set the deployment target to 10.4"
  #endif

#endif

#if JUCE_LINUX || JUCE_ANDROID

  #ifdef _DEBUG
	#define JUCE_DEBUG 1
  #endif

  // Allow override for big-endian Linux platforms
  #if defined (__LITTLE_ENDIAN__) || ! defined (JUCE_BIG_ENDIAN)
	#define JUCE_LITTLE_ENDIAN 1
	#undef JUCE_BIG_ENDIAN
  #else
	#undef JUCE_LITTLE_ENDIAN
	#define JUCE_BIG_ENDIAN 1
  #endif

  #if defined (__LP64__) || defined (_LP64)
	#define JUCE_64BIT 1
  #else
	#define JUCE_32BIT 1
  #endif

  #if __MMX__ || __SSE__ || __amd64__
	#define JUCE_INTEL 1
  #endif
#endif

// Compiler type macros.

#ifdef __GNUC__
  #define JUCE_GCC 1
#elif defined (_MSC_VER)
  #define JUCE_MSVC 1

  #if _MSC_VER < 1500
	#define JUCE_VC8_OR_EARLIER 1

	#if _MSC_VER < 1400
	  #define JUCE_VC7_OR_EARLIER 1

	  #if _MSC_VER < 1300
		#warning "MSVC 6.0 is no longer supported!"
	  #endif
	#endif
  #endif

  #if JUCE_64BIT || ! JUCE_VC7_OR_EARLIER
	#define JUCE_USE_INTRINSICS 1
  #endif
#else
  #error unknown compiler
#endif

#endif   // __JUCE_TARGETPLATFORM_JUCEHEADER__

/*** End of inlined file: juce_TargetPlatform.h ***/

#undef T

#if JUCE_MAC || JUCE_IOS

 #if JUCE_IOS
  #import <Foundation/Foundation.h>
  #import <UIKit/UIKit.h>
  #import <CoreData/CoreData.h>
  #import <MobileCoreServices/MobileCoreServices.h>
  #include <sys/fcntl.h>
 #else
  #define Point CarbonDummyPointName
  #define Component CarbonDummyCompName
  #import <Cocoa/Cocoa.h>
  #import <CoreAudio/HostTime.h>
  #undef Point
  #undef Component
  #include <sys/dir.h>
 #endif

 #include <sys/socket.h>
 #include <sys/sysctl.h>
 #include <sys/stat.h>
 #include <sys/param.h>
 #include <sys/mount.h>
 #include <sys/utsname.h>
 #include <sys/mman.h>
 #include <fnmatch.h>
 #include <utime.h>
 #include <dlfcn.h>
 #include <ifaddrs.h>
 #include <net/if_dl.h>
 #include <mach/mach_time.h>
 #include <mach-o/dyld.h>

#elif JUCE_WINDOWS
 #if JUCE_MSVC
  #ifndef _CPPRTTI
   #error "You're compiling without RTTI enabled! This is needed for a lot of JUCE classes, please update your compiler settings!"
  #endif

  #ifndef _CPPUNWIND
   #error "You're compiling without exceptions enabled! This is needed for a lot of JUCE classes, please update your compiler settings!"
  #endif

  #pragma warning (push)
  #pragma warning (disable : 4100 4201 4514 4312 4995)
 #endif

 #define STRICT 1
 #define WIN32_LEAN_AND_MEAN 1
 #define _WIN32_WINNT 0x0600
 #define _UNICODE 1
 #define UNICODE 1
 #ifndef _WIN32_IE
  #define _WIN32_IE 0x0400
 #endif

 #include <windows.h>
 #include <shellapi.h>
 #include <tchar.h>
 #include <stddef.h>
 #include <ctime>
 #include <wininet.h>
 #include <nb30.h>
 #include <iphlpapi.h>
 #include <mapi.h>
 #include <float.h>
 #include <process.h>
 #include <shlobj.h>
 #include <shlwapi.h>
 #include <mmsystem.h>

 #if ! JUCE_MINGW
  #include <crtdbg.h>
  #include <comutil.h>
 #endif

 #undef PACKED

 #if JUCE_MSVC
  #pragma warning (pop)
  #pragma warning (4: 4511 4512 4100 /*4365*/)  // (enable some warnings that are turned off in VC8)
 #endif

 #if JUCE_MSVC && ! JUCE_DONT_AUTOLINK_TO_WIN32_LIBRARIES
  #pragma comment (lib, "kernel32.lib")
  #pragma comment (lib, "user32.lib")
  #pragma comment (lib, "shell32.lib")
  #pragma comment (lib, "wininet.lib")
  #pragma comment (lib, "advapi32.lib")
  #pragma comment (lib, "ws2_32.lib")
  #pragma comment (lib, "version.lib")
  #pragma comment (lib, "shlwapi.lib")
  #pragma comment (lib, "winmm.lib")

  #ifdef _NATIVE_WCHAR_T_DEFINED
   #ifdef _DEBUG
	#pragma comment (lib, "comsuppwd.lib")
   #else
	#pragma comment (lib, "comsuppw.lib")
   #endif
  #else
   #ifdef _DEBUG
	#pragma comment (lib, "comsuppd.lib")
   #else
	#pragma comment (lib, "comsupp.lib")
   #endif
  #endif
 #endif

 /* Used with DynamicLibrary to simplify importing functions

	functionName: function to import
	localFunctionName: name you want to use to actually call it (must be different)
	returnType: the return type
	object: the DynamicLibrary to use
	params: list of params (bracketed)
 */
 #define JUCE_DLL_FUNCTION(functionName, localFunctionName, returnType, object, params) \
	typedef returnType (WINAPI *type##localFunctionName) params; \
	type##localFunctionName localFunctionName = (type##localFunctionName)object.getFunction (#functionName);

#elif JUCE_LINUX
 #include <sched.h>
 #include <pthread.h>
 #include <sys/time.h>
 #include <errno.h>
 #include <sys/stat.h>
 #include <sys/dir.h>
 #include <sys/ptrace.h>
 #include <sys/vfs.h>
 #include <sys/wait.h>
 #include <sys/mman.h>
 #include <fnmatch.h>
 #include <utime.h>
 #include <pwd.h>
 #include <fcntl.h>
 #include <dlfcn.h>
 #include <netdb.h>
 #include <arpa/inet.h>
 #include <netinet/in.h>
 #include <sys/types.h>
 #include <sys/ioctl.h>
 #include <sys/socket.h>
 #include <net/if.h>
 #include <sys/sysinfo.h>
 #include <sys/file.h>
 #include <sys/prctl.h>
 #include <signal.h>

#elif JUCE_ANDROID
 #include <jni.h>
 #include <pthread.h>
 #include <sched.h>
 #include <sys/time.h>
 #include <utime.h>
 #include <errno.h>
 #include <fcntl.h>
 #include <dlfcn.h>
 #include <sys/stat.h>
 #include <sys/statfs.h>
 #include <sys/ptrace.h>
 #include <sys/sysinfo.h>
 #include <sys/mman.h>
 #include <pwd.h>
 #include <dirent.h>
 #include <fnmatch.h>
 #include <sys/wait.h>
#endif

// Need to clear various moronic redefinitions made by system headers..
#undef max
#undef min
#undef direct
#undef check

#endif   // __JUCE_BASICNATIVEHEADERS_JUCEHEADER__

/*** End of inlined file: juce_BasicNativeHeaders.h ***/


/*** Start of inlined file: juce_graphics.h ***/
#ifndef __JUCE_GRAPHICS_MODULE_JUCEHEADER__ // %%
#define __JUCE_GRAPHICS_MODULE_JUCEHEADER__


/*** Start of inlined file: juce_core.h ***/
#ifndef __JUCE_CORE_JUCEHEADER__
#define __JUCE_CORE_JUCEHEADER__

/** Config: JUCE_FORCE_DEBUG

	Normally, JUCE_DEBUG is set to 1 or 0 based on compiler and project settings,
	but if you define this value, you can override this to force it to be true or false.
*/
#ifndef JUCE_FORCE_DEBUG
 //#define JUCE_FORCE_DEBUG 0
#endif

/** Config: JUCE_LOG_ASSERTIONS

	If this flag is enabled, the the jassert and jassertfalse macros will always use Logger::writeToLog()
	to write a message when an assertion happens.

	Enabling it will also leave this turned on in release builds. When it's disabled,
	however, the jassert and jassertfalse macros will not be compiled in a
	release build.

	@see jassert, jassertfalse, Logger
*/
#ifndef JUCE_LOG_ASSERTIONS
 #define JUCE_LOG_ASSERTIONS 0
#endif

/** Config: JUCE_CHECK_MEMORY_LEAKS

	Enables a memory-leak check for certain objects when the app terminates. See the LeakedObjectDetector
	class and the JUCE_LEAK_DETECTOR macro for more details about enabling leak checking for specific classes.
*/
#if JUCE_DEBUG && ! defined (JUCE_CHECK_MEMORY_LEAKS)
 #define JUCE_CHECK_MEMORY_LEAKS 1
#endif

/** Config: JUCE_DONT_AUTOLINK_TO_WIN32_LIBRARIES

	In a Visual C++  build, this can be used to stop the required system libs being
	automatically added to the link stage.
*/
#ifndef JUCE_DONT_AUTOLINK_TO_WIN32_LIBRARIES
 #define JUCE_DONT_AUTOLINK_TO_WIN32_LIBRARIES 0
#endif

/*  Config: JUCE_INCLUDE_ZLIB_CODE
	This can be used to disable Juce's embedded 3rd-party zlib code.
	You might need to tweak this if you're linking to an external zlib library in your app,
	but for normal apps, this option should be left alone.

	If you disable this, you might also want to set a value for JUCE_ZLIB_INCLUDE_PATH, to
	specify the path where your zlib headers live.
*/
#ifndef JUCE_INCLUDE_ZLIB_CODE
 #define JUCE_INCLUDE_ZLIB_CODE 1
#endif

#ifndef JUCE_ZLIB_INCLUDE_PATH
 #define JUCE_ZLIB_INCLUDE_PATH <zlib.h>
#endif

/*  Config: JUCE_CATCH_UNHANDLED_EXCEPTIONS
	If enabled, this will add some exception-catching code to forward unhandled exceptions
	to your JUCEApplication::unhandledException() callback.
*/
#ifndef JUCE_CATCH_UNHANDLED_EXCEPTIONS
 //#define JUCE_CATCH_UNHANDLED_EXCEPTIONS 1
#endif

#if JUCE_MSVC
 #pragma warning (disable: 4251) // (DLL build warning, must be disabled before pushing the warning state)

 #pragma pack (push, 8) // this is set explicitly in case the app is using a different packing size.
 #pragma warning (push)
 #pragma warning (disable: 4786) // (long class name warning)
 #ifdef __INTEL_COMPILER
  #pragma warning (disable: 1125)
 #endif
#endif


/*** Start of inlined file: juce_StandardHeader.h ***/
#ifndef __JUCE_STANDARDHEADER_JUCEHEADER__
#define __JUCE_STANDARDHEADER_JUCEHEADER__

/** Current JUCE version number.

	See also SystemStats::getJUCEVersion() for a string version.
*/
#define JUCE_MAJOR_VERSION      2
#define JUCE_MINOR_VERSION      0
#define JUCE_BUILDNUMBER        18

/** Current Juce version number.

	Bits 16 to 32 = major version.
	Bits 8 to 16 = minor version.
	Bits 0 to 8 = point release.

	See also SystemStats::getJUCEVersion() for a string version.
*/
#define JUCE_VERSION            ((JUCE_MAJOR_VERSION << 16) + (JUCE_MINOR_VERSION << 8) + JUCE_BUILDNUMBER)

#ifndef DOXYGEN
 // These are old macros that are now deprecated: you should just use the juce namespace directly.
 #define JUCE_NAMESPACE juce
 #define BEGIN_JUCE_NAMESPACE    namespace juce {
 #define END_JUCE_NAMESPACE      }
#endif


/*** Start of inlined file: juce_PlatformDefs.h ***/
#ifndef __JUCE_PLATFORMDEFS_JUCEHEADER__
#define __JUCE_PLATFORMDEFS_JUCEHEADER__

/*  This file defines miscellaneous macros for debugging, assertions, etc.
*/

#ifdef JUCE_FORCE_DEBUG
 #undef JUCE_DEBUG

 #if JUCE_FORCE_DEBUG
  #define JUCE_DEBUG 1
 #endif
#endif

/** This macro defines the C calling convention used as the standard for Juce calls. */
#if JUCE_MSVC
 #define JUCE_CALLTYPE   __stdcall
 #define JUCE_CDECL      __cdecl
#else
 #define JUCE_CALLTYPE
 #define JUCE_CDECL
#endif

// Debugging and assertion macros

#if JUCE_LOG_ASSERTIONS
 #define juce_LogCurrentAssertion    juce_LogAssertion (__FILE__, __LINE__);
#elif JUCE_DEBUG
 #define juce_LogCurrentAssertion    std::cerr << "JUCE Assertion failure in " << __FILE__ << ", line " << __LINE__ << std::endl;
#else
 #define juce_LogCurrentAssertion
#endif

#if JUCE_MAC || JUCE_IOS || JUCE_LINUX || JUCE_ANDROID
  /** This will try to break into the debugger if the app is currently being debugged.
	  If called by an app that's not being debugged, the behaiour isn't defined - it may crash or not, depending
	  on the platform.
	  @see jassert()
  */
  #define juce_breakDebugger        { ::kill (0, SIGTRAP); }
#elif JUCE_USE_INTRINSICS
  #ifndef __INTEL_COMPILER
	#pragma intrinsic (__debugbreak)
  #endif
  #define juce_breakDebugger        { __debugbreak(); }
#elif JUCE_GCC
  #define juce_breakDebugger        { asm("int $3"); }
#else
  #define juce_breakDebugger        { __asm int 3 }
#endif

#if JUCE_DEBUG || DOXYGEN
  /** Writes a string to the standard error stream.
	  This is only compiled in a debug build.
	  @see Logger::outputDebugString
  */
  #define DBG(dbgtext)              { juce::String tempDbgBuf; tempDbgBuf << dbgtext; juce::Logger::outputDebugString (tempDbgBuf); }

  /** This will always cause an assertion failure.
	  It is only compiled in a debug build, (unless JUCE_LOG_ASSERTIONS is enabled for your build).
	  @see jassert
  */
  #define jassertfalse              { juce_LogCurrentAssertion; if (juce::juce_isRunningUnderDebugger()) juce_breakDebugger; }

  /** Platform-independent assertion macro.

	  This macro gets turned into a no-op when you're building with debugging turned off, so be
	  careful that the expression you pass to it doesn't perform any actions that are vital for the
	  correct behaviour of your program!
	  @see jassertfalse
  */
  #define jassert(expression)       { if (! (expression)) jassertfalse; }

#else

  // If debugging is disabled, these dummy debug and assertion macros are used..

  #define DBG(dbgtext)
  #define jassertfalse              { juce_LogCurrentAssertion }

  #if JUCE_LOG_ASSERTIONS
   #define jassert(expression)      { if (! (expression)) jassertfalse; }
  #else
   #define jassert(a)               {}
  #endif

#endif

#ifndef DOXYGEN
namespace juce
{
	template <bool b> struct JuceStaticAssert;
	template <> struct JuceStaticAssert <true> { static void dummy() {} };
}
#endif

/** A compile-time assertion macro.
	If the expression parameter is false, the macro will cause a compile error. (The actual error
	message that the compiler generates may be completely bizarre and seem to have no relation to
	the place where you put the static_assert though!)
*/
#define static_jassert(expression)      juce::JuceStaticAssert<expression>::dummy();

/** This is a shorthand macro for declaring stubs for a class's copy constructor and operator=.

	For example, instead of
	@code
	class MyClass
	{
		etc..

	private:
		MyClass (const MyClass&);
		MyClass& operator= (const MyClass&);
	};@endcode

	..you can just write:

	@code
	class MyClass
	{
		etc..

	private:
		JUCE_DECLARE_NON_COPYABLE (MyClass);
	};@endcode
*/
#define JUCE_DECLARE_NON_COPYABLE(className) \
	className (const className&);\
	className& operator= (const className&)

/** This is a shorthand way of writing both a JUCE_DECLARE_NON_COPYABLE and
	JUCE_LEAK_DETECTOR macro for a class.
*/
#define JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(className) \
	JUCE_DECLARE_NON_COPYABLE(className);\
	JUCE_LEAK_DETECTOR(className)

/** This macro can be added to class definitions to disable the use of new/delete to
	allocate the object on the heap, forcing it to only be used as a stack or member variable.
*/
#define JUCE_PREVENT_HEAP_ALLOCATION \
   private: \
	static void* operator new (size_t); \
	static void operator delete (void*);

#if ! DOXYGEN
 #define JUCE_JOIN_MACRO_HELPER(a, b) a ## b
 #define JUCE_STRINGIFY_MACRO_HELPER(a) #a
#endif

/** A good old-fashioned C macro concatenation helper.
	This combines two items (which may themselves be macros) into a single string,
	avoiding the pitfalls of the ## macro operator.
*/
#define JUCE_JOIN_MACRO(item1, item2)  JUCE_JOIN_MACRO_HELPER (item1, item2)

/** A handy C macro for stringifying any symbol, rather than just a macro parameter.
*/
#define JUCE_STRINGIFY(item)  JUCE_STRINGIFY_MACRO_HELPER (item)

#if JUCE_CATCH_UNHANDLED_EXCEPTIONS

  #define JUCE_TRY try

  #define JUCE_CATCH_ALL            catch (...) {}
  #define JUCE_CATCH_ALL_ASSERT     catch (...) { jassertfalse; }

  #if ! JUCE_MODULE_AVAILABLE_juce_gui_basics
	#define JUCE_CATCH_EXCEPTION    JUCE_CATCH_ALL
  #else
	/** Used in try-catch blocks, this macro will send exceptions to the JUCEApplication
		object so they can be logged by the application if it wants to.
	*/
	#define JUCE_CATCH_EXCEPTION \
	  catch (const std::exception& e)  \
	  { \
		  JUCEApplication::sendUnhandledException (&e, __FILE__, __LINE__); \
	  } \
	  catch (...) \
	  { \
		  JUCEApplication::sendUnhandledException (nullptr, __FILE__, __LINE__); \
	  }
  #endif

#else

  #define JUCE_TRY
  #define JUCE_CATCH_EXCEPTION
  #define JUCE_CATCH_ALL
  #define JUCE_CATCH_ALL_ASSERT

#endif

#if JUCE_DEBUG || DOXYGEN
  /** A platform-independent way of forcing an inline function.
	  Use the syntax: @code
	  forcedinline void myfunction (int x)
	  @endcode
  */
  #define forcedinline  inline
#else
  #if JUCE_MSVC
   #define forcedinline       __forceinline
  #else
   #define forcedinline       inline __attribute__((always_inline))
  #endif
#endif

#if JUCE_MSVC || DOXYGEN
  /** This can be placed before a stack or member variable declaration to tell the compiler
	  to align it to the specified number of bytes. */
  #define JUCE_ALIGN(bytes)   __declspec (align (bytes))
#else
  #define JUCE_ALIGN(bytes)   __attribute__ ((aligned (bytes)))
#endif

// Cross-compiler deprecation macros..
#if DOXYGEN || (JUCE_MSVC && ! JUCE_NO_DEPRECATION_WARNINGS)
 /** This can be used to wrap a function which has been deprecated. */
 #define JUCE_DEPRECATED(functionDef)     __declspec(deprecated) functionDef
#elif JUCE_GCC  && ! JUCE_NO_DEPRECATION_WARNINGS
 #define JUCE_DEPRECATED(functionDef)     functionDef __attribute__ ((deprecated))
#else
 #define JUCE_DEPRECATED(functionDef)     functionDef
#endif

#if JUCE_ANDROID && ! DOXYGEN
 #define JUCE_MODAL_LOOPS_PERMITTED 0
#else
 /** Some operating environments don't provide a modal loop mechanism, so this flag can be
	 used to disable any functions that try to run a modal loop. */
 #define JUCE_MODAL_LOOPS_PERMITTED 1
#endif

// Here, we'll check for C++11 compiler support, and if it's not available, define
// a few workarounds, so that we can still use some of the newer language features.
#if defined (__GXX_EXPERIMENTAL_CXX0X__) && defined (__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5))
 #define JUCE_COMPILER_SUPPORTS_NOEXCEPT 1
 #define JUCE_COMPILER_SUPPORTS_NULLPTR 1
 #define JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS 1
#endif

#if defined (__clang__) && defined (__has_feature)
 #if __has_feature (cxx_nullptr)
  #define JUCE_COMPILER_SUPPORTS_NULLPTR 1
 #endif

 #if __has_feature (cxx_noexcept)
  #define JUCE_COMPILER_SUPPORTS_NOEXCEPT 1
 #endif

 #if __has_feature (cxx_rvalue_references)
  #define JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS 1
 #endif
#endif

#if defined (_MSC_VER) && _MSC_VER >= 1600
 #define JUCE_COMPILER_SUPPORTS_NOEXCEPT 0
 #define JUCE_COMPILER_SUPPORTS_NULLPTR 1
 #define JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS 1
#endif

// Declare some fake versions of nullptr and noexcept, for older compilers:
#if ! (DOXYGEN || JUCE_COMPILER_SUPPORTS_NOEXCEPT)
 #define noexcept  throw()
#endif

#if ! (DOXYGEN || JUCE_COMPILER_SUPPORTS_NULLPTR)
 #define nullptr (0)
#endif

#endif   // __JUCE_PLATFORMDEFS_JUCEHEADER__

/*** End of inlined file: juce_PlatformDefs.h ***/

// Now we'll include any OS headers we need.. (at this point we are outside the Juce namespace).
#if JUCE_MSVC
 #pragma warning (push)
 #pragma warning (disable: 4514 4245 4100)
#endif

#include <cstdlib>
#include <cstdarg>
#include <climits>
#include <limits>
#include <cmath>
#include <cwchar>
#include <stdexcept>
#include <typeinfo>
#include <cstring>
#include <cstdio>
#include <iostream>
#include <vector>

#if JUCE_USE_INTRINSICS
 #include <intrin.h>
#endif

#if JUCE_MAC || JUCE_IOS
 #include <libkern/OSAtomic.h>
#endif

#if JUCE_LINUX
 #include <signal.h>

 #if __INTEL_COMPILER
  #if __ia64__
   #include <ia64intrin.h>
  #else
   #include <ia32intrin.h>
  #endif
 #endif
#endif

#if JUCE_MSVC && JUCE_DEBUG
 #include <crtdbg.h>
#endif

#if JUCE_MSVC
 #include <malloc.h>
 #pragma warning (pop)
#endif

#if JUCE_ANDROID
 #include <sys/atomics.h>
 #include <byteswap.h>
#endif

// DLL building settings on Windows
#if JUCE_MSVC
 #ifdef JUCE_DLL_BUILD
  #define JUCE_API __declspec (dllexport)
  #pragma warning (disable: 4251)
 #elif defined (JUCE_DLL)
  #define JUCE_API __declspec (dllimport)
  #pragma warning (disable: 4251)
 #endif
 #ifdef __INTEL_COMPILER
  #pragma warning (disable: 1125) // (virtual override warning)
 #endif
#elif defined (__GNUC__) && ((__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
 #ifdef JUCE_DLL_BUILD
  #define JUCE_API __attribute__ ((visibility("default")))
 #endif
#endif

#ifndef JUCE_API
 /** This macro is added to all juce public class declarations. */
 #define JUCE_API
#endif

/** This macro is added to all juce public function declarations. */
#define JUCE_PUBLIC_FUNCTION        JUCE_API JUCE_CALLTYPE

/** This turns on some non-essential bits of code that should prevent old code from compiling
	in cases where method signatures have changed, etc.
*/
#if (! defined (JUCE_CATCH_DEPRECATED_CODE_MISUSE)) && JUCE_DEBUG && ! DOXYGEN
 #define JUCE_CATCH_DEPRECATED_CODE_MISUSE 1
#endif

// Now include some basics that are needed by most of the Juce classes...
BEGIN_JUCE_NAMESPACE

extern JUCE_API bool JUCE_CALLTYPE juce_isRunningUnderDebugger();

#if JUCE_LOG_ASSERTIONS
 extern JUCE_API void juce_LogAssertion (const char* filename, int lineNum) noexcept;
#endif


/*** Start of inlined file: juce_Memory.h ***/
#ifndef __JUCE_MEMORY_JUCEHEADER__
#define __JUCE_MEMORY_JUCEHEADER__

#if JUCE_MSVC || DOXYGEN
 /** This is a compiler-independent way of declaring a variable as being thread-local.

	 E.g.
	 @code
	 juce_ThreadLocal int myVariable;
	 @endcode
 */
 #define juce_ThreadLocal    __declspec(thread)
#else
 #define juce_ThreadLocal    __thread
#endif

#if JUCE_MINGW
 /** This allocator is not defined in mingw gcc. */
 #define alloca              __builtin_alloca
#endif

/** Fills a block of memory with zeros. */
inline void zeromem (void* memory, size_t numBytes) noexcept        { memset (memory, 0, numBytes); }

/** Overwrites a structure or object with zeros. */
template <typename Type>
inline void zerostruct (Type& structure) noexcept                   { memset (&structure, 0, sizeof (structure)); }

/** Delete an object pointer, and sets the pointer to null.

	Remember that it's not good c++ practice to use delete directly - always try to use a ScopedPointer
	or other automatic lieftime-management system rather than resorting to deleting raw pointers!
*/
template <typename Type>
inline void deleteAndZero (Type& pointer)                           { delete pointer; pointer = nullptr; }

/** A handy function which adds a number of bytes to any type of pointer and returns the result.
	This can be useful to avoid casting pointers to a char* and back when you want to move them by
	a specific number of bytes,
*/
template <typename Type>
inline Type* addBytesToPointer (Type* pointer, int bytes) noexcept  { return (Type*) (((char*) pointer) + bytes); }

/** A handy function which returns the difference between any two pointers, in bytes.
	The address of the second pointer is subtracted from the first, and the difference in bytes is returned.
*/
template <typename Type1, typename Type2>
inline int getAddressDifference (Type1* pointer1, Type2* pointer2) noexcept  { return (int) (((const char*) pointer1) - (const char*) pointer2); }

/** If a pointer is non-null, this returns a new copy of the object that it points to, or safely returns
	nullptr if the pointer is null.
*/
template <class Type>
inline Type* createCopyIfNotNull (Type* pointer)     { return pointer != nullptr ? new Type (*pointer) : nullptr; }

/* In a Windows DLL build, we'll expose some malloc/free functions that live inside the DLL, and use these for
   allocating all the objects - that way all juce objects in the DLL and in the host will live in the same heap,
   avoiding problems when an object is created in one module and passed across to another where it is deleted.
   By piggy-backing on the JUCE_LEAK_DETECTOR macro, these allocators can be injected into most juce classes.
*/
#if JUCE_MSVC && defined (JUCE_DLL) && ! DOXYGEN
 extern JUCE_API void* juceDLL_malloc (size_t);
 extern JUCE_API void  juceDLL_free (void*);

 #define JUCE_LEAK_DETECTOR(OwnerClass)  public:\
			  static void* operator new (size_t sz)           { return juce::juceDLL_malloc ((int) sz); } \
			  static void* operator new (size_t, void* p)     { return p; } \
			  static void operator delete (void* p)           { juce::juceDLL_free (p); } \
			  static void operator delete (void*, void*)      {}
#endif

/** (Deprecated) This was a Windows-specific way of checking for object leaks - now please
	use the JUCE_LEAK_DETECTOR instead.
*/
#ifndef juce_UseDebuggingNewOperator
 #define juce_UseDebuggingNewOperator
#endif

#endif   // __JUCE_MEMORY_JUCEHEADER__

/*** End of inlined file: juce_Memory.h ***/


/*** Start of inlined file: juce_MathsFunctions.h ***/
#ifndef __JUCE_MATHSFUNCTIONS_JUCEHEADER__
#define __JUCE_MATHSFUNCTIONS_JUCEHEADER__

/*
	This file sets up some handy mathematical typdefs and functions.
*/

// Definitions for the int8, int16, int32, int64 and pointer_sized_int types.

/** A platform-independent 8-bit signed integer type. */
typedef signed char                 int8;
/** A platform-independent 8-bit unsigned integer type. */
typedef unsigned char               uint8;
/** A platform-independent 16-bit signed integer type. */
typedef signed short                int16;
/** A platform-independent 16-bit unsigned integer type. */
typedef unsigned short              uint16;
/** A platform-independent 32-bit signed integer type. */
typedef signed int                  int32;
/** A platform-independent 32-bit unsigned integer type. */
typedef unsigned int                uint32;

#if JUCE_MSVC
  /** A platform-independent 64-bit integer type. */
  typedef __int64                   int64;
  /** A platform-independent 64-bit unsigned integer type. */
  typedef unsigned __int64          uint64;
  /** A platform-independent macro for writing 64-bit literals, needed because
	  different compilers have different syntaxes for this.

	  E.g. writing literal64bit (0x1000000000) will translate to 0x1000000000LL for
	  GCC, or 0x1000000000 for MSVC.
  */
  #define literal64bit(longLiteral)     ((__int64) longLiteral)
#else
  /** A platform-independent 64-bit integer type. */
  typedef long long                 int64;
  /** A platform-independent 64-bit unsigned integer type. */
  typedef unsigned long long        uint64;
  /** A platform-independent macro for writing 64-bit literals, needed because
	  different compilers have different syntaxes for this.

	  E.g. writing literal64bit (0x1000000000) will translate to 0x1000000000LL for
	  GCC, or 0x1000000000 for MSVC.
  */
  #define literal64bit(longLiteral)     (longLiteral##LL)
#endif

#if JUCE_64BIT
  /** A signed integer type that's guaranteed to be large enough to hold a pointer without truncating it. */
  typedef int64                     pointer_sized_int;
  /** An unsigned integer type that's guaranteed to be large enough to hold a pointer without truncating it. */
  typedef uint64                    pointer_sized_uint;
#elif JUCE_MSVC
  /** A signed integer type that's guaranteed to be large enough to hold a pointer without truncating it. */
  typedef _W64 int                  pointer_sized_int;
  /** An unsigned integer type that's guaranteed to be large enough to hold a pointer without truncating it. */
  typedef _W64 unsigned int         pointer_sized_uint;
#else
  /** A signed integer type that's guaranteed to be large enough to hold a pointer without truncating it. */
  typedef int                       pointer_sized_int;
  /** An unsigned integer type that's guaranteed to be large enough to hold a pointer without truncating it. */
  typedef unsigned int              pointer_sized_uint;
#endif

#if JUCE_MSVC
  typedef pointer_sized_int ssize_t;
#endif

// Some indispensible min/max functions

/** Returns the larger of two values. */
template <typename Type>
inline Type jmax (const Type a, const Type b)                                               { return (a < b) ? b : a; }

/** Returns the larger of three values. */
template <typename Type>
inline Type jmax (const Type a, const Type b, const Type c)                                 { return (a < b) ? ((b < c) ? c : b) : ((a < c) ? c : a); }

/** Returns the larger of four values. */
template <typename Type>
inline Type jmax (const Type a, const Type b, const Type c, const Type d)                   { return jmax (a, jmax (b, c, d)); }

/** Returns the smaller of two values. */
template <typename Type>
inline Type jmin (const Type a, const Type b)                                               { return (b < a) ? b : a; }

/** Returns the smaller of three values. */
template <typename Type>
inline Type jmin (const Type a, const Type b, const Type c)                                 { return (b < a) ? ((c < b) ? c : b) : ((c < a) ? c : a); }

/** Returns the smaller of four values. */
template <typename Type>
inline Type jmin (const Type a, const Type b, const Type c, const Type d)                   { return jmin (a, jmin (b, c, d)); }

/** Scans an array of values, returning the minimum value that it contains. */
template <typename Type>
const Type findMinimum (const Type* data, int numValues)
{
	if (numValues <= 0)
		return Type();

	Type result (*data++);

	while (--numValues > 0) // (> 0 rather than >= 0 because we've already taken the first sample)
	{
		const Type& v = *data++;
		if (v < result)  result = v;
	}

	return result;
}

/** Scans an array of values, returning the maximum value that it contains. */
template <typename Type>
const Type findMaximum (const Type* values, int numValues)
{
	if (numValues <= 0)
		return Type();

	Type result (*values++);

	while (--numValues > 0) // (> 0 rather than >= 0 because we've already taken the first sample)
	{
		const Type& v = *values++;
		if (result < v)  result = v;
	}

	return result;
}

/** Scans an array of values, returning the minimum and maximum values that it contains. */
template <typename Type>
void findMinAndMax (const Type* values, int numValues, Type& lowest, Type& highest)
{
	if (numValues <= 0)
	{
		lowest = Type();
		highest = Type();
	}
	else
	{
		Type mn (*values++);
		Type mx (mn);

		while (--numValues > 0) // (> 0 rather than >= 0 because we've already taken the first sample)
		{
			const Type& v = *values++;

			if (mx < v)  mx = v;
			if (v < mn)  mn = v;
		}

		lowest = mn;
		highest = mx;
	}
}

/** Constrains a value to keep it within a given range.

	This will check that the specified value lies between the lower and upper bounds
	specified, and if not, will return the nearest value that would be in-range. Effectively,
	it's like calling jmax (lowerLimit, jmin (upperLimit, value)).

	Note that it expects that lowerLimit <= upperLimit. If this isn't true,
	the results will be unpredictable.

	@param lowerLimit           the minimum value to return
	@param upperLimit           the maximum value to return
	@param valueToConstrain     the value to try to return
	@returns    the closest value to valueToConstrain which lies between lowerLimit
				and upperLimit (inclusive)
	@see jlimit0To, jmin, jmax
*/
template <typename Type>
inline Type jlimit (const Type lowerLimit,
					const Type upperLimit,
					const Type valueToConstrain) noexcept
{
	jassert (lowerLimit <= upperLimit); // if these are in the wrong order, results are unpredictable..

	return (valueToConstrain < lowerLimit) ? lowerLimit
										   : ((upperLimit < valueToConstrain) ? upperLimit
																			  : valueToConstrain);
}

/** Returns true if a value is at least zero, and also below a specified upper limit.
	This is basically a quicker way to write:
	@code valueToTest >= 0 && valueToTest < upperLimit
	@endcode
*/
template <typename Type>
inline bool isPositiveAndBelow (Type valueToTest, Type upperLimit) noexcept
{
	jassert (Type() <= upperLimit); // makes no sense to call this if the upper limit is itself below zero..
	return Type() <= valueToTest && valueToTest < upperLimit;
}

template <>
inline bool isPositiveAndBelow (const int valueToTest, const int upperLimit) noexcept
{
	jassert (upperLimit >= 0); // makes no sense to call this if the upper limit is itself below zero..
	return static_cast <unsigned int> (valueToTest) < static_cast <unsigned int> (upperLimit);
}

/** Returns true if a value is at least zero, and also less than or equal to a specified upper limit.
	This is basically a quicker way to write:
	@code valueToTest >= 0 && valueToTest <= upperLimit
	@endcode
*/
template <typename Type>
inline bool isPositiveAndNotGreaterThan (Type valueToTest, Type upperLimit) noexcept
{
	jassert (Type() <= upperLimit); // makes no sense to call this if the upper limit is itself below zero..
	return Type() <= valueToTest && valueToTest <= upperLimit;
}

template <>
inline bool isPositiveAndNotGreaterThan (const int valueToTest, const int upperLimit) noexcept
{
	jassert (upperLimit >= 0); // makes no sense to call this if the upper limit is itself below zero..
	return static_cast <unsigned int> (valueToTest) <= static_cast <unsigned int> (upperLimit);
}

/** Handy function to swap two values. */
template <typename Type>
inline void swapVariables (Type& variable1, Type& variable2)
{
	std::swap (variable1, variable2);
}

/** Handy function for getting the number of elements in a simple const C array.
	E.g.
	@code
	static int myArray[] = { 1, 2, 3 };

	int numElements = numElementsInArray (myArray) // returns 3
	@endcode
*/
template <typename Type, int N>
inline int numElementsInArray (Type (&array)[N])
{
	(void) array; // (required to avoid a spurious warning in MS compilers)
	(void) sizeof (0[array]); // This line should cause an error if you pass an object with a user-defined subscript operator
	return N;
}

// Some useful maths functions that aren't always present with all compilers and build settings.

/** Using juce_hypot is easier than dealing with the different types of hypot function
	that are provided by the various platforms and compilers. */
template <typename Type>
inline Type juce_hypot (Type a, Type b) noexcept
{
   #if JUCE_WINDOWS
	return static_cast <Type> (_hypot (a, b));
   #else
	return static_cast <Type> (hypot (a, b));
   #endif
}

/** 64-bit abs function. */
inline int64 abs64 (const int64 n) noexcept
{
	return (n >= 0) ? n : -n;
}

/** This templated negate function will negate pointers as well as integers */
template <typename Type>
inline Type juce_negate (Type n) noexcept
{
	return sizeof (Type) == 1 ? (Type) -(signed char) n
		: (sizeof (Type) == 2 ? (Type) -(short) n
		: (sizeof (Type) == 4 ? (Type) -(int) n
		: ((Type) -(int64) n)));
}

/** This templated negate function will negate pointers as well as integers */
template <typename Type>
inline Type* juce_negate (Type* n) noexcept
{
	return (Type*) -(pointer_sized_int) n;
}

/** A predefined value for Pi, at double-precision.

	@see float_Pi
*/
const double  double_Pi  = 3.1415926535897932384626433832795;

/** A predefined value for Pi, at sngle-precision.

	@see double_Pi
*/
const float   float_Pi   = 3.14159265358979323846f;

/** The isfinite() method seems to vary between platforms, so this is a
	platform-independent function for it.
*/
template <typename FloatingPointType>
inline bool juce_isfinite (FloatingPointType value)
{
   #if JUCE_WINDOWS
	return _finite (value);
   #elif JUCE_ANDROID
	return isfinite (value);
   #else
	return std::isfinite (value);
   #endif
}

#if JUCE_MSVC
 #pragma optimize ("t", off)
 #pragma float_control (precise, on, push)
#endif

/** Fast floating-point-to-integer conversion.

	This is faster than using the normal c++ cast to convert a float to an int, and
	it will round the value to the nearest integer, rather than rounding it down
	like the normal cast does.

	Note that this routine gets its speed at the expense of some accuracy, and when
	rounding values whose floating point component is exactly 0.5, odd numbers and
	even numbers will be rounded up or down differently.
*/
template <typename FloatType>
inline int roundToInt (const FloatType value) noexcept
{
	union { int asInt[2]; double asDouble; } n;
	n.asDouble = ((double) value) + 6755399441055744.0;

   #if JUCE_BIG_ENDIAN
	return n.asInt [1];
   #else
	return n.asInt [0];
   #endif
}

#if JUCE_MSVC
 #pragma float_control (pop)
 #pragma optimize ("", on)  // resets optimisations to the project defaults
#endif

/** Fast floating-point-to-integer conversion.

	This is a slightly slower and slightly more accurate version of roundDoubleToInt(). It works
	fine for values above zero, but negative numbers are rounded the wrong way.
*/
inline int roundToIntAccurate (const double value) noexcept
{
	return roundToInt (value + 1.5e-8);
}

/** Fast floating-point-to-integer conversion.

	This is faster than using the normal c++ cast to convert a double to an int, and
	it will round the value to the nearest integer, rather than rounding it down
	like the normal cast does.

	Note that this routine gets its speed at the expense of some accuracy, and when
	rounding values whose floating point component is exactly 0.5, odd numbers and
	even numbers will be rounded up or down differently. For a more accurate conversion,
	see roundDoubleToIntAccurate().
*/
inline int roundDoubleToInt (const double value) noexcept
{
	return roundToInt (value);
}

/** Fast floating-point-to-integer conversion.

	This is faster than using the normal c++ cast to convert a float to an int, and
	it will round the value to the nearest integer, rather than rounding it down
	like the normal cast does.

	Note that this routine gets its speed at the expense of some accuracy, and when
	rounding values whose floating point component is exactly 0.5, odd numbers and
	even numbers will be rounded up or down differently.
*/
inline int roundFloatToInt (const float value) noexcept
{
	return roundToInt (value);
}

/** Returns true if the specified integer is a power-of-two.
*/
template <typename IntegerType>
bool isPowerOfTwo (IntegerType value)
{
   return (value & (value - 1)) == 0;
}

/** Returns the next power-of-two which is equal to or greater than the given integer.
*/
inline int nextPowerOfTwo (int n)
{
	--n;
	n |= (n >> 1);
	n |= (n >> 2);
	n |= (n >> 4);
	n |= (n >> 8);
	n |= (n >> 16);
	return n + 1;
}

/** Performs a modulo operation, but can cope with the dividend being negative.
	The divisor must be greater than zero.
*/
template <typename IntegerType>
int negativeAwareModulo (IntegerType dividend, const IntegerType divisor) noexcept
{
	jassert (divisor > 0);
	dividend %= divisor;
	return (dividend < 0) ? (dividend + divisor) : dividend;
}

#if (JUCE_INTEL && JUCE_32BIT) || defined (DOXYGEN)
 /** This macro can be applied to a float variable to check whether it contains a denormalised
	 value, and to normalise it if necessary.
	 On CPUs that aren't vulnerable to denormalisation problems, this will have no effect.
 */
 #define JUCE_UNDENORMALISE(x)   x += 1.0f; x -= 1.0f;
#else
 #define JUCE_UNDENORMALISE(x)
#endif

/** This namespace contains a few template classes for helping work out class type variations.
*/
namespace TypeHelpers
{
   #if JUCE_VC8_OR_EARLIER
	#define PARAMETER_TYPE(type) const type&
   #else
	/** The ParameterType struct is used to find the best type to use when passing some kind
		of object as a parameter.

		Of course, this is only likely to be useful in certain esoteric template situations.

		Because "typename TypeHelpers::ParameterType<SomeClass>::type" is a bit of a mouthful, there's
		a PARAMETER_TYPE(SomeClass) macro that you can use to get the same effect.

		E.g. "myFunction (PARAMETER_TYPE (int), PARAMETER_TYPE (MyObject))"
		would evaluate to "myfunction (int, const MyObject&)", keeping any primitive types as
		pass-by-value, but passing objects as a const reference, to avoid copying.
	*/
	template <typename Type> struct ParameterType                   { typedef const Type& type; };

   #if ! DOXYGEN
	template <typename Type> struct ParameterType <Type&>           { typedef Type& type; };
	template <typename Type> struct ParameterType <Type*>           { typedef Type* type; };
	template <>              struct ParameterType <char>            { typedef char type; };
	template <>              struct ParameterType <unsigned char>   { typedef unsigned char type; };
	template <>              struct ParameterType <short>           { typedef short type; };
	template <>              struct ParameterType <unsigned short>  { typedef unsigned short type; };
	template <>              struct ParameterType <int>             { typedef int type; };
	template <>              struct ParameterType <unsigned int>    { typedef unsigned int type; };
	template <>              struct ParameterType <long>            { typedef long type; };
	template <>              struct ParameterType <unsigned long>   { typedef unsigned long type; };
	template <>              struct ParameterType <int64>           { typedef int64 type; };
	template <>              struct ParameterType <uint64>          { typedef uint64 type; };
	template <>              struct ParameterType <bool>            { typedef bool type; };
	template <>              struct ParameterType <float>           { typedef float type; };
	template <>              struct ParameterType <double>          { typedef double type; };
   #endif

	/** A helpful macro to simplify the use of the ParameterType template.
		@see ParameterType
	*/
	#define PARAMETER_TYPE(a)    typename TypeHelpers::ParameterType<a>::type
   #endif

	/** These templates are designed to take a type, and if it's a double, they return a double
		type; for anything else, they return a float type.
	*/
	template <typename Type> struct SmallestFloatType             { typedef float  type; };
	template <>              struct SmallestFloatType <double>    { typedef double type; };
}

#endif   // __JUCE_MATHSFUNCTIONS_JUCEHEADER__

/*** End of inlined file: juce_MathsFunctions.h ***/


/*** Start of inlined file: juce_ByteOrder.h ***/
#ifndef __JUCE_BYTEORDER_JUCEHEADER__
#define __JUCE_BYTEORDER_JUCEHEADER__

/** Contains static methods for converting the byte order between different
	endiannesses.
*/
class JUCE_API  ByteOrder
{
public:

	/** Swaps the upper and lower bytes of a 16-bit integer. */
	static uint16 swap (uint16 value);

	/** Reverses the order of the 4 bytes in a 32-bit integer. */
	static uint32 swap (uint32 value);

	/** Reverses the order of the 8 bytes in a 64-bit integer. */
	static uint64 swap (uint64 value);

	/** Swaps the byte order of a 16-bit int if the CPU is big-endian */
	static uint16 swapIfBigEndian (uint16 value);

	/** Swaps the byte order of a 32-bit int if the CPU is big-endian */
	static uint32 swapIfBigEndian (uint32 value);

	/** Swaps the byte order of a 64-bit int if the CPU is big-endian */
	static uint64 swapIfBigEndian (uint64 value);

	/** Swaps the byte order of a 16-bit int if the CPU is little-endian */
	static uint16 swapIfLittleEndian (uint16 value);

	/** Swaps the byte order of a 32-bit int if the CPU is little-endian */
	static uint32 swapIfLittleEndian (uint32 value);

	/** Swaps the byte order of a 64-bit int if the CPU is little-endian */
	static uint64 swapIfLittleEndian (uint64 value);

	/** Turns 4 bytes into a little-endian integer. */
	static uint32 littleEndianInt (const void* bytes);

	/** Turns 2 bytes into a little-endian integer. */
	static uint16 littleEndianShort (const void* bytes);

	/** Turns 4 bytes into a big-endian integer. */
	static uint32 bigEndianInt (const void* bytes);

	/** Turns 2 bytes into a big-endian integer. */
	static uint16 bigEndianShort (const void* bytes);

	/** Converts 3 little-endian bytes into a signed 24-bit value (which is sign-extended to 32 bits). */
	static int littleEndian24Bit (const char* bytes);

	/** Converts 3 big-endian bytes into a signed 24-bit value (which is sign-extended to 32 bits). */
	static int bigEndian24Bit (const char* bytes);

	/** Copies a 24-bit number to 3 little-endian bytes. */
	static void littleEndian24BitToChars (int value, char* destBytes);

	/** Copies a 24-bit number to 3 big-endian bytes. */
	static void bigEndian24BitToChars (int value, char* destBytes);

	/** Returns true if the current CPU is big-endian. */
	static bool isBigEndian();

private:
	ByteOrder();

	JUCE_DECLARE_NON_COPYABLE (ByteOrder);
};

#if JUCE_USE_INTRINSICS && ! defined (__INTEL_COMPILER)
 #pragma intrinsic (_byteswap_ulong)
#endif

inline uint16 ByteOrder::swap (uint16 n)
{
   #if JUCE_USE_INTRINSICSxxx // agh - the MS compiler has an internal error when you try to use this intrinsic!
	return static_cast <uint16> (_byteswap_ushort (n));
   #else
	return static_cast <uint16> ((n << 8) | (n >> 8));
   #endif
}

inline uint32 ByteOrder::swap (uint32 n)
{
   #if JUCE_MAC || JUCE_IOS
	return OSSwapInt32 (n);
   #elif JUCE_GCC && JUCE_INTEL
	asm("bswap %%eax" : "=a"(n) : "a"(n));
	return n;
   #elif JUCE_USE_INTRINSICS
	return _byteswap_ulong (n);
   #elif JUCE_MSVC
	__asm {
		mov eax, n
		bswap eax
		mov n, eax
	}
	return n;
   #elif JUCE_ANDROID
	return bswap_32 (n);
   #else
	return (n << 24) | (n >> 24) | ((n & 0xff00) << 8) | ((n & 0xff0000) >> 8);
   #endif
}

inline uint64 ByteOrder::swap (uint64 value)
{
   #if JUCE_MAC || JUCE_IOS
	return OSSwapInt64 (value);
   #elif JUCE_USE_INTRINSICS
	return _byteswap_uint64 (value);
   #else
	return (((int64) swap ((uint32) value)) << 32) | swap ((uint32) (value >> 32));
   #endif
}

#if JUCE_LITTLE_ENDIAN
 inline uint16 ByteOrder::swapIfBigEndian (const uint16 v)                                  { return v; }
 inline uint32 ByteOrder::swapIfBigEndian (const uint32 v)                                  { return v; }
 inline uint64 ByteOrder::swapIfBigEndian (const uint64 v)                                  { return v; }
 inline uint16 ByteOrder::swapIfLittleEndian (const uint16 v)                               { return swap (v); }
 inline uint32 ByteOrder::swapIfLittleEndian (const uint32 v)                               { return swap (v); }
 inline uint64 ByteOrder::swapIfLittleEndian (const uint64 v)                               { return swap (v); }
 inline uint32 ByteOrder::littleEndianInt (const void* const bytes)                         { return *static_cast <const uint32*> (bytes); }
 inline uint16 ByteOrder::littleEndianShort (const void* const bytes)                       { return *static_cast <const uint16*> (bytes); }
 inline uint32 ByteOrder::bigEndianInt (const void* const bytes)                            { return swap (*static_cast <const uint32*> (bytes)); }
 inline uint16 ByteOrder::bigEndianShort (const void* const bytes)                          { return swap (*static_cast <const uint16*> (bytes)); }
 inline bool ByteOrder::isBigEndian()                                                       { return false; }
#else
 inline uint16 ByteOrder::swapIfBigEndian (const uint16 v)                                  { return swap (v); }
 inline uint32 ByteOrder::swapIfBigEndian (const uint32 v)                                  { return swap (v); }
 inline uint64 ByteOrder::swapIfBigEndian (const uint64 v)                                  { return swap (v); }
 inline uint16 ByteOrder::swapIfLittleEndian (const uint16 v)                               { return v; }
 inline uint32 ByteOrder::swapIfLittleEndian (const uint32 v)                               { return v; }
 inline uint64 ByteOrder::swapIfLittleEndian (const uint64 v)                               { return v; }
 inline uint32 ByteOrder::littleEndianInt (const void* const bytes)                         { return swap (*static_cast <const uint32*> (bytes)); }
 inline uint16 ByteOrder::littleEndianShort (const void* const bytes)                       { return swap (*static_cast <const uint16*> (bytes)); }
 inline uint32 ByteOrder::bigEndianInt (const void* const bytes)                            { return *static_cast <const uint32*> (bytes); }
 inline uint16 ByteOrder::bigEndianShort (const void* const bytes)                          { return *static_cast <const uint16*> (bytes); }
 inline bool ByteOrder::isBigEndian()                                                       { return true; }
#endif

inline int  ByteOrder::littleEndian24Bit (const char* const bytes)                          { return (((int) bytes[2]) << 16) | (((int) (uint8) bytes[1]) << 8) | ((int) (uint8) bytes[0]); }
inline int  ByteOrder::bigEndian24Bit (const char* const bytes)                             { return (((int) bytes[0]) << 16) | (((int) (uint8) bytes[1]) << 8) | ((int) (uint8) bytes[2]); }
inline void ByteOrder::littleEndian24BitToChars (const int value, char* const destBytes)    { destBytes[0] = (char)(value & 0xff); destBytes[1] = (char)((value >> 8) & 0xff); destBytes[2] = (char)((value >> 16) & 0xff); }
inline void ByteOrder::bigEndian24BitToChars (const int value, char* const destBytes)       { destBytes[0] = (char)((value >> 16) & 0xff); destBytes[1] = (char)((value >> 8) & 0xff); destBytes[2] = (char)(value & 0xff); }

#endif   // __JUCE_BYTEORDER_JUCEHEADER__

/*** End of inlined file: juce_ByteOrder.h ***/


/*** Start of inlined file: juce_Logger.h ***/
#ifndef __JUCE_LOGGER_JUCEHEADER__
#define __JUCE_LOGGER_JUCEHEADER__


/*** Start of inlined file: juce_String.h ***/
#ifndef __JUCE_STRING_JUCEHEADER__
#define __JUCE_STRING_JUCEHEADER__


/*** Start of inlined file: juce_CharacterFunctions.h ***/
#ifndef __JUCE_CHARACTERFUNCTIONS_JUCEHEADER__
#define __JUCE_CHARACTERFUNCTIONS_JUCEHEADER__

#if JUCE_WINDOWS && ! DOXYGEN
 #define JUCE_NATIVE_WCHAR_IS_UTF8      0
 #define JUCE_NATIVE_WCHAR_IS_UTF16     1
 #define JUCE_NATIVE_WCHAR_IS_UTF32     0
#else
 /** This macro will be set to 1 if the compiler's native wchar_t is an 8-bit type. */
 #define JUCE_NATIVE_WCHAR_IS_UTF8      0
 /** This macro will be set to 1 if the compiler's native wchar_t is a 16-bit type. */
 #define JUCE_NATIVE_WCHAR_IS_UTF16     0
 /** This macro will be set to 1 if the compiler's native wchar_t is a 32-bit type. */
 #define JUCE_NATIVE_WCHAR_IS_UTF32     1
#endif

#if JUCE_NATIVE_WCHAR_IS_UTF32 || DOXYGEN
 /** A platform-independent 32-bit unicode character type. */
 typedef wchar_t        juce_wchar;
#else
 typedef uint32         juce_wchar;
#endif

/** This macro is deprecated, but preserved for compatibility with old code. */
#define JUCE_T(stringLiteral)   (L##stringLiteral)

#if JUCE_DEFINE_T_MACRO
 /** The 'T' macro is an alternative for using the "L" prefix in front of a string literal.

	 This macro is deprecated, but available for compatibility with old code if you set
	 JUCE_DEFINE_T_MACRO = 1. The fastest, most portable and best way to write your string
	 literals is as standard char strings, using escaped utf-8 character sequences for extended
	 characters, rather than trying to store them as wide-char strings.
 */
 #define T(stringLiteral)   JUCE_T(stringLiteral)
#endif

#undef max
#undef min

/**
	A set of methods for manipulating characters and character strings.

	These are defined as wrappers around the basic C string handlers, to provide
	a clean, cross-platform layer, (because various platforms differ in the
	range of C library calls that they provide).

	@see String
*/
class JUCE_API  CharacterFunctions
{
public:

	static juce_wchar toUpperCase (juce_wchar character) noexcept;
	static juce_wchar toLowerCase (juce_wchar character) noexcept;

	static bool isUpperCase (juce_wchar character) noexcept;
	static bool isLowerCase (juce_wchar character) noexcept;

	static bool isWhitespace (char character) noexcept;
	static bool isWhitespace (juce_wchar character) noexcept;

	static bool isDigit (char character) noexcept;
	static bool isDigit (juce_wchar character) noexcept;

	static bool isLetter (char character) noexcept;
	static bool isLetter (juce_wchar character) noexcept;

	static bool isLetterOrDigit (char character) noexcept;
	static bool isLetterOrDigit (juce_wchar character) noexcept;

	/** Returns 0 to 16 for '0' to 'F", or -1 for characters that aren't a legal hex digit. */
	static int getHexDigitValue (juce_wchar digit) noexcept;

	template <typename CharPointerType>
	static double readDoubleValue (CharPointerType& text) noexcept
	{
		double result[3] = { 0 }, accumulator[2] = { 0 };
		int exponentAdjustment[2] = { 0 }, exponentAccumulator[2] = { -1, -1 };
		int exponent = 0, decPointIndex = 0, digit = 0;
		int lastDigit = 0, numSignificantDigits = 0;
		bool isNegative = false, digitsFound = false;
		const int maxSignificantDigits = 15 + 2;

		text = text.findEndOfWhitespace();
		juce_wchar c = *text;

		switch (c)
		{
			case '-':   isNegative = true; // fall-through..
			case '+':   c = *++text;
		}

		switch (c)
		{
			case 'n':
			case 'N':
				if ((text[1] == 'a' || text[1] == 'A') && (text[2] == 'n' || text[2] == 'N'))
					return std::numeric_limits<double>::quiet_NaN();
				break;

			case 'i':
			case 'I':
				if ((text[1] == 'n' || text[1] == 'N') && (text[2] == 'f' || text[2] == 'F'))
					return std::numeric_limits<double>::infinity();
				break;
		}

		for (;;)
		{
			if (text.isDigit())
			{
				lastDigit = digit;
				digit = (int) text.getAndAdvance() - '0';
				digitsFound = true;

				if (decPointIndex != 0)
					exponentAdjustment[1]++;

				if (numSignificantDigits == 0 && digit == 0)
					continue;

				if (++numSignificantDigits > maxSignificantDigits)
				{
					if (digit > 5)
						++accumulator [decPointIndex];
					else if (digit == 5 && (lastDigit & 1) != 0)
						++accumulator [decPointIndex];

					if (decPointIndex > 0)
						exponentAdjustment[1]--;
					else
						exponentAdjustment[0]++;

					while (text.isDigit())
					{
						++text;
						if (decPointIndex == 0)
							exponentAdjustment[0]++;
					}
				}
				else
				{
					const double maxAccumulatorValue = (double) ((std::numeric_limits<unsigned int>::max() - 9) / 10);
					if (accumulator [decPointIndex] > maxAccumulatorValue)
					{
						result [decPointIndex] = mulexp10 (result [decPointIndex], exponentAccumulator [decPointIndex])
													+ accumulator [decPointIndex];
						accumulator [decPointIndex] = 0;
						exponentAccumulator [decPointIndex] = 0;
					}

					accumulator [decPointIndex] = accumulator[decPointIndex] * 10 + digit;
					exponentAccumulator [decPointIndex]++;
				}
			}
			else if (decPointIndex == 0 && *text == '.')
			{
				++text;
				decPointIndex = 1;

				if (numSignificantDigits > maxSignificantDigits)
				{
					while (text.isDigit())
						++text;
					break;
				}
			}
			else
			{
				break;
			}
		}

		result[0] = mulexp10 (result[0], exponentAccumulator[0]) + accumulator[0];

		if (decPointIndex != 0)
			result[1] = mulexp10 (result[1], exponentAccumulator[1]) + accumulator[1];

		c = *text;
		if ((c == 'e' || c == 'E') && digitsFound)
		{
			bool negativeExponent = false;

			switch (*++text)
			{
				case '-':   negativeExponent = true; // fall-through..
				case '+':   ++text;
			}

			while (text.isDigit())
				exponent = (exponent * 10) + ((int) text.getAndAdvance() - '0');

			if (negativeExponent)
				exponent = -exponent;
		}

		double r = mulexp10 (result[0], exponent + exponentAdjustment[0]);
		if (decPointIndex != 0)
			r += mulexp10 (result[1], exponent - exponentAdjustment[1]);

		return isNegative ? -r : r;
	}

	template <typename CharPointerType>
	static double getDoubleValue (const CharPointerType& text) noexcept
	{
		CharPointerType t (text);
		return readDoubleValue (t);
	}

	template <typename IntType, typename CharPointerType>
	static IntType getIntValue (const CharPointerType& text) noexcept
	{
		IntType v = 0;
		CharPointerType s (text.findEndOfWhitespace());

		const bool isNeg = *s == '-';
		if (isNeg)
			++s;

		for (;;)
		{
			const juce_wchar c = s.getAndAdvance();

			if (c >= '0' && c <= '9')
				v = v * 10 + (IntType) (c - '0');
			else
				break;
		}

		return isNeg ? -v : v;
	}

	template <typename CharPointerType>
	static size_t lengthUpTo (CharPointerType text, const size_t maxCharsToCount) noexcept
	{
		size_t len = 0;

		while (len < maxCharsToCount && text.getAndAdvance() != 0)
			++len;

		return len;
	}

	template <typename CharPointerType>
	static size_t lengthUpTo (CharPointerType start, const CharPointerType& end) noexcept
	{
		size_t len = 0;

		while (start < end && start.getAndAdvance() != 0)
			++len;

		return len;
	}

	template <typename DestCharPointerType, typename SrcCharPointerType>
	static void copyAll (DestCharPointerType& dest, SrcCharPointerType src) noexcept
	{
		for (;;)
		{
			const juce_wchar c = src.getAndAdvance();

			if (c == 0)
				break;

			dest.write (c);
		}

		dest.writeNull();
	}

	template <typename DestCharPointerType, typename SrcCharPointerType>
	static int copyWithDestByteLimit (DestCharPointerType& dest, SrcCharPointerType src, int maxBytes) noexcept
	{
		typename DestCharPointerType::CharType const* const startAddress = dest.getAddress();
		maxBytes -= sizeof (typename DestCharPointerType::CharType); // (allow for a terminating null)

		for (;;)
		{
			const juce_wchar c = src.getAndAdvance();
			const int bytesNeeded = (int) DestCharPointerType::getBytesRequiredFor (c);

			maxBytes -= bytesNeeded;
			if (c == 0 || maxBytes < 0)
				break;

			dest.write (c);
		}

		dest.writeNull();

		return (int) (getAddressDifference (dest.getAddress(), startAddress) + sizeof (typename DestCharPointerType::CharType));
	}

	template <typename DestCharPointerType, typename SrcCharPointerType>
	static void copyWithCharLimit (DestCharPointerType& dest, SrcCharPointerType src, int maxChars) noexcept
	{
		while (--maxChars > 0)
		{
			const juce_wchar c = src.getAndAdvance();
			if (c == 0)
				break;

			dest.write (c);
		}

		dest.writeNull();
	}

	template <typename CharPointerType1, typename CharPointerType2>
	static int compare (CharPointerType1 s1, CharPointerType2 s2) noexcept
	{
		for (;;)
		{
			const int c1 = (int) s1.getAndAdvance();
			const int c2 = (int) s2.getAndAdvance();

			const int diff = c1 - c2;
			if (diff != 0)
				return diff < 0 ? -1 : 1;
			else if (c1 == 0)
				break;
		}

		return 0;
	}

	template <typename CharPointerType1, typename CharPointerType2>
	static int compareUpTo (CharPointerType1 s1, CharPointerType2 s2, int maxChars) noexcept
	{
		while (--maxChars >= 0)
		{
			const int c1 = (int) s1.getAndAdvance();
			const int c2 = (int) s2.getAndAdvance();

			const int diff = c1 - c2;
			if (diff != 0)
				return diff < 0 ? -1 : 1;
			else if (c1 == 0)
				break;
		}

		return 0;
	}

	template <typename CharPointerType1, typename CharPointerType2>
	static int compareIgnoreCase (CharPointerType1 s1, CharPointerType2 s2) noexcept
	{
		for (;;)
		{
			int c1 = (int) s1.toUpperCase();
			int c2 = (int) s2.toUpperCase();
			++s1;
			++s2;

			const int diff = c1 - c2;
			if (diff != 0)
				return diff < 0 ? -1 : 1;
			else if (c1 == 0)
				break;
		}

		return 0;
	}

	template <typename CharPointerType1, typename CharPointerType2>
	static int compareIgnoreCaseUpTo (CharPointerType1 s1, CharPointerType2 s2, int maxChars) noexcept
	{
		while (--maxChars >= 0)
		{
			int c1 = s1.toUpperCase();
			int c2 = s2.toUpperCase();
			++s1;
			++s2;

			const int diff = c1 - c2;
			if (diff != 0)
				return diff < 0 ? -1 : 1;
			else if (c1 == 0)
				break;
		}

		return 0;
	}

	template <typename CharPointerType1, typename CharPointerType2>
	static int indexOf (CharPointerType1 haystack, const CharPointerType2& needle) noexcept
	{
		int index = 0;
		const int needleLength = (int) needle.length();

		for (;;)
		{
			if (haystack.compareUpTo (needle, needleLength) == 0)
				return index;

			if (haystack.getAndAdvance() == 0)
				return -1;

			++index;
		}
	}

	template <typename CharPointerType1, typename CharPointerType2>
	static int indexOfIgnoreCase (CharPointerType1 haystack, const CharPointerType2& needle) noexcept
	{
		int index = 0;
		const int needleLength = (int) needle.length();

		for (;;)
		{
			if (haystack.compareIgnoreCaseUpTo (needle, needleLength) == 0)
				return index;

			if (haystack.getAndAdvance() == 0)
				return -1;

			++index;
		}
	}

	template <typename Type>
	static int indexOfChar (Type text, const juce_wchar charToFind) noexcept
	{
		int i = 0;

		while (! text.isEmpty())
		{
			if (text.getAndAdvance() == charToFind)
				return i;

			++i;
		}

		return -1;
	}

	template <typename Type>
	static int indexOfCharIgnoreCase (Type text, juce_wchar charToFind) noexcept
	{
		charToFind = CharacterFunctions::toLowerCase (charToFind);
		int i = 0;

		while (! text.isEmpty())
		{
			if (text.toLowerCase() == charToFind)
				return i;

			++text;
			++i;
		}

		return -1;
	}

	template <typename Type>
	static Type findEndOfWhitespace (const Type& text) noexcept
	{
		Type p (text);

		while (p.isWhitespace())
			++p;

		return p;
	}

	template <typename Type>
	static Type findEndOfToken (const Type& text, const Type& breakCharacters, const Type& quoteCharacters)
	{
		Type t (text);
		juce_wchar currentQuoteChar = 0;

		while (! t.isEmpty())
		{
			const juce_wchar c = t.getAndAdvance();

			if (currentQuoteChar == 0 && breakCharacters.indexOf (c) >= 0)
			{
				--t;
				break;
			}

			if (quoteCharacters.indexOf (c) >= 0)
			{
				if (currentQuoteChar == 0)
					currentQuoteChar = c;
				else if (currentQuoteChar == c)
					currentQuoteChar = 0;
			}
		}

		return t;
	}

private:
	static double mulexp10 (const double value, int exponent) noexcept;
};

#endif   // __JUCE_CHARACTERFUNCTIONS_JUCEHEADER__

/*** End of inlined file: juce_CharacterFunctions.h ***/

#ifndef JUCE_STRING_UTF_TYPE
 #define JUCE_STRING_UTF_TYPE 8
#endif

#if JUCE_MSVC
 #pragma warning (push)
 #pragma warning (disable: 4514 4996)
#endif


/*** Start of inlined file: juce_Atomic.h ***/
#ifndef __JUCE_ATOMIC_JUCEHEADER__
#define __JUCE_ATOMIC_JUCEHEADER__

/**
	Simple class to hold a primitive value and perform atomic operations on it.

	The type used must be a 32 or 64 bit primitive, like an int, pointer, etc.
	There are methods to perform most of the basic atomic operations.
*/
template <typename Type>
class Atomic
{
public:
	/** Creates a new value, initialised to zero. */
	inline Atomic() noexcept
		: value (0)
	{
	}

	/** Creates a new value, with a given initial value. */
	inline Atomic (const Type initialValue) noexcept
		: value (initialValue)
	{
	}

	/** Copies another value (atomically). */
	inline Atomic (const Atomic& other) noexcept
		: value (other.get())
	{
	}

	/** Destructor. */
	inline ~Atomic() noexcept
	{
		// This class can only be used for types which are 32 or 64 bits in size.
		static_jassert (sizeof (Type) == 4 || sizeof (Type) == 8);
	}

	/** Atomically reads and returns the current value. */
	Type get() const noexcept;

	/** Copies another value onto this one (atomically). */
	inline Atomic& operator= (const Atomic& other) noexcept         { exchange (other.get()); return *this; }

	/** Copies another value onto this one (atomically). */
	inline Atomic& operator= (const Type newValue) noexcept         { exchange (newValue); return *this; }

	/** Atomically sets the current value. */
	void set (Type newValue) noexcept                               { exchange (newValue); }

	/** Atomically sets the current value, returning the value that was replaced. */
	Type exchange (Type value) noexcept;

	/** Atomically adds a number to this value, returning the new value. */
	Type operator+= (Type amountToAdd) noexcept;

	/** Atomically subtracts a number from this value, returning the new value. */
	Type operator-= (Type amountToSubtract) noexcept;

	/** Atomically increments this value, returning the new value. */
	Type operator++() noexcept;

	/** Atomically decrements this value, returning the new value. */
	Type operator--() noexcept;

	/** Atomically compares this value with a target value, and if it is equal, sets
		this to be equal to a new value.

		This operation is the atomic equivalent of doing this:
		@code
		bool compareAndSetBool (Type newValue, Type valueToCompare)
		{
			if (get() == valueToCompare)
			{
				set (newValue);
				return true;
			}

			return false;
		}
		@endcode

		@returns true if the comparison was true and the value was replaced; false if
				 the comparison failed and the value was left unchanged.
		@see compareAndSetValue
	*/
	bool compareAndSetBool (Type newValue, Type valueToCompare) noexcept;

	/** Atomically compares this value with a target value, and if it is equal, sets
		this to be equal to a new value.

		This operation is the atomic equivalent of doing this:
		@code
		Type compareAndSetValue (Type newValue, Type valueToCompare)
		{
			Type oldValue = get();
			if (oldValue == valueToCompare)
				set (newValue);

			return oldValue;
		}
		@endcode

		@returns the old value before it was changed.
		@see compareAndSetBool
	*/
	Type compareAndSetValue (Type newValue, Type valueToCompare) noexcept;

	/** Implements a memory read/write barrier. */
	static void memoryBarrier() noexcept;

   #if JUCE_64BIT
	JUCE_ALIGN (8)
   #else
	JUCE_ALIGN (4)
   #endif

	/** The raw value that this class operates on.
		This is exposed publically in case you need to manipulate it directly
		for performance reasons.
	*/
	volatile Type value;

private:
	static inline Type castFrom32Bit (int32 value) noexcept   { return *(Type*) &value; }
	static inline Type castFrom64Bit (int64 value) noexcept   { return *(Type*) &value; }
	static inline int32 castTo32Bit (Type value) noexcept     { return *(int32*) &value; }
	static inline int64 castTo64Bit (Type value) noexcept     { return *(int64*) &value; }

	Type operator++ (int); // better to just use pre-increment with atomics..
	Type operator-- (int);
};

/*
	The following code is in the header so that the atomics can be inlined where possible...
*/
#if JUCE_IOS || (JUCE_MAC && (JUCE_PPC || defined (__clang__) || __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 2)))
  #define JUCE_ATOMICS_MAC 1        // Older OSX builds using gcc4.1 or earlier

  #if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_5
	#define JUCE_MAC_ATOMICS_VOLATILE
  #else
	#define JUCE_MAC_ATOMICS_VOLATILE volatile
  #endif

  #if JUCE_PPC || JUCE_IOS
	// None of these atomics are available for PPC or for iPhoneOS 3.1 or earlier!!
	template <typename Type> static Type OSAtomicAdd64Barrier (Type b, JUCE_MAC_ATOMICS_VOLATILE Type* a) noexcept  { jassertfalse; return *a += b; }
	template <typename Type> static Type OSAtomicIncrement64Barrier (JUCE_MAC_ATOMICS_VOLATILE Type* a) noexcept    { jassertfalse; return ++*a; }
	template <typename Type> static Type OSAtomicDecrement64Barrier (JUCE_MAC_ATOMICS_VOLATILE Type* a) noexcept    { jassertfalse; return --*a; }
	template <typename Type> static bool OSAtomicCompareAndSwap64Barrier (Type old, Type newValue, JUCE_MAC_ATOMICS_VOLATILE Type* value) noexcept
		{ jassertfalse; if (old == *value) { *value = newValue; return true; } return false; }
	#define JUCE_64BIT_ATOMICS_UNAVAILABLE 1
  #endif

#elif JUCE_GCC
  #define JUCE_ATOMICS_GCC 1        // GCC with intrinsics

  #if JUCE_IOS || JUCE_ANDROID // (64-bit ops will compile but not link on these mobile OSes)
	#define JUCE_64BIT_ATOMICS_UNAVAILABLE 1
  #endif

#else
  #define JUCE_ATOMICS_WINDOWS 1    // Windows with intrinsics

  #if JUCE_USE_INTRINSICS
	#ifndef __INTEL_COMPILER
	 #pragma intrinsic (_InterlockedExchange, _InterlockedIncrement, _InterlockedDecrement, _InterlockedCompareExchange, \
						_InterlockedCompareExchange64, _InterlockedExchangeAdd, _ReadWriteBarrier)
	#endif
	#define juce_InterlockedExchange(a, b)              _InterlockedExchange(a, b)
	#define juce_InterlockedIncrement(a)                _InterlockedIncrement(a)
	#define juce_InterlockedDecrement(a)                _InterlockedDecrement(a)
	#define juce_InterlockedExchangeAdd(a, b)           _InterlockedExchangeAdd(a, b)
	#define juce_InterlockedCompareExchange(a, b, c)    _InterlockedCompareExchange(a, b, c)
	#define juce_InterlockedCompareExchange64(a, b, c)  _InterlockedCompareExchange64(a, b, c)
	#define juce_MemoryBarrier _ReadWriteBarrier
  #else
	long juce_InterlockedExchange (volatile long* a, long b) noexcept;
	long juce_InterlockedIncrement (volatile long* a) noexcept;
	long juce_InterlockedDecrement (volatile long* a) noexcept;
	long juce_InterlockedExchangeAdd (volatile long* a, long b) noexcept;
	long juce_InterlockedCompareExchange (volatile long* a, long b, long c) noexcept;
	__int64 juce_InterlockedCompareExchange64 (volatile __int64* a, __int64 b, __int64 c) noexcept;
	inline void juce_MemoryBarrier() noexcept  { long x = 0; juce_InterlockedIncrement (&x); }
  #endif

  #if JUCE_64BIT
	#ifndef __INTEL_COMPILER
	 #pragma intrinsic (_InterlockedExchangeAdd64, _InterlockedExchange64, _InterlockedIncrement64, _InterlockedDecrement64)
	#endif
	#define juce_InterlockedExchangeAdd64(a, b)     _InterlockedExchangeAdd64(a, b)
	#define juce_InterlockedExchange64(a, b)        _InterlockedExchange64(a, b)
	#define juce_InterlockedIncrement64(a)          _InterlockedIncrement64(a)
	#define juce_InterlockedDecrement64(a)          _InterlockedDecrement64(a)
  #else
	// None of these atomics are available in a 32-bit Windows build!!
	template <typename Type> static Type juce_InterlockedExchangeAdd64 (volatile Type* a, Type b) noexcept  { jassertfalse; Type old = *a; *a += b; return old; }
	template <typename Type> static Type juce_InterlockedExchange64 (volatile Type* a, Type b) noexcept     { jassertfalse; Type old = *a; *a = b; return old; }
	template <typename Type> static Type juce_InterlockedIncrement64 (volatile Type* a) noexcept            { jassertfalse; return ++*a; }
	template <typename Type> static Type juce_InterlockedDecrement64 (volatile Type* a) noexcept            { jassertfalse; return --*a; }
	#define JUCE_64BIT_ATOMICS_UNAVAILABLE 1
  #endif
#endif

#if JUCE_MSVC
  #pragma warning (push)
  #pragma warning (disable: 4311)  // (truncation warning)
#endif

template <typename Type>
inline Type Atomic<Type>::get() const noexcept
{
  #if JUCE_ATOMICS_MAC
	return sizeof (Type) == 4 ? castFrom32Bit ((int32) OSAtomicAdd32Barrier ((int32_t) 0, (JUCE_MAC_ATOMICS_VOLATILE int32_t*) &value))
							  : castFrom64Bit ((int64) OSAtomicAdd64Barrier ((int64_t) 0, (JUCE_MAC_ATOMICS_VOLATILE int64_t*) &value));
  #elif JUCE_ATOMICS_WINDOWS
	return sizeof (Type) == 4 ? castFrom32Bit ((int32) juce_InterlockedExchangeAdd ((volatile long*) &value, (long) 0))
							  : castFrom64Bit ((int64) juce_InterlockedExchangeAdd64 ((volatile __int64*) &value, (__int64) 0));
  #elif JUCE_ATOMICS_GCC
	return sizeof (Type) == 4 ? castFrom32Bit ((int32) __sync_add_and_fetch ((volatile int32*) &value, 0))
							  : castFrom64Bit ((int64) __sync_add_and_fetch ((volatile int64*) &value, 0));
  #endif
}

template <typename Type>
inline Type Atomic<Type>::exchange (const Type newValue) noexcept
{
  #if JUCE_ATOMICS_MAC || JUCE_ATOMICS_GCC
	Type currentVal = value;
	while (! compareAndSetBool (newValue, currentVal)) { currentVal = value; }
	return currentVal;
  #elif JUCE_ATOMICS_WINDOWS
	return sizeof (Type) == 4 ? castFrom32Bit ((int32) juce_InterlockedExchange ((volatile long*) &value, (long) castTo32Bit (newValue)))
							  : castFrom64Bit ((int64) juce_InterlockedExchange64 ((volatile __int64*) &value, (__int64) castTo64Bit (newValue)));
  #endif
}

template <typename Type>
inline Type Atomic<Type>::operator+= (const Type amountToAdd) noexcept
{
  #if JUCE_ATOMICS_MAC
	return sizeof (Type) == 4 ? (Type) OSAtomicAdd32Barrier ((int32_t) castTo32Bit (amountToAdd), (JUCE_MAC_ATOMICS_VOLATILE int32_t*) &value)
							  : (Type) OSAtomicAdd64Barrier ((int64_t) amountToAdd, (JUCE_MAC_ATOMICS_VOLATILE int64_t*) &value);
  #elif JUCE_ATOMICS_WINDOWS
	return sizeof (Type) == 4 ? (Type) (juce_InterlockedExchangeAdd ((volatile long*) &value, (long) amountToAdd) + (long) amountToAdd)
							  : (Type) (juce_InterlockedExchangeAdd64 ((volatile __int64*) &value, (__int64) amountToAdd) + (__int64) amountToAdd);
  #elif JUCE_ATOMICS_GCC
	return (Type) __sync_add_and_fetch (&value, amountToAdd);
  #endif
}

template <typename Type>
inline Type Atomic<Type>::operator-= (const Type amountToSubtract) noexcept
{
	return operator+= (juce_negate (amountToSubtract));
}

template <typename Type>
inline Type Atomic<Type>::operator++() noexcept
{
  #if JUCE_ATOMICS_MAC
	return sizeof (Type) == 4 ? (Type) OSAtomicIncrement32Barrier ((JUCE_MAC_ATOMICS_VOLATILE int32_t*) &value)
							  : (Type) OSAtomicIncrement64Barrier ((JUCE_MAC_ATOMICS_VOLATILE int64_t*) &value);
  #elif JUCE_ATOMICS_WINDOWS
	return sizeof (Type) == 4 ? (Type) juce_InterlockedIncrement ((volatile long*) &value)
							  : (Type) juce_InterlockedIncrement64 ((volatile __int64*) &value);
  #elif JUCE_ATOMICS_GCC
	return (Type) __sync_add_and_fetch (&value, 1);
  #endif
}

template <typename Type>
inline Type Atomic<Type>::operator--() noexcept
{
  #if JUCE_ATOMICS_MAC
	return sizeof (Type) == 4 ? (Type) OSAtomicDecrement32Barrier ((JUCE_MAC_ATOMICS_VOLATILE int32_t*) &value)
							  : (Type) OSAtomicDecrement64Barrier ((JUCE_MAC_ATOMICS_VOLATILE int64_t*) &value);
  #elif JUCE_ATOMICS_WINDOWS
	return sizeof (Type) == 4 ? (Type) juce_InterlockedDecrement ((volatile long*) &value)
							  : (Type) juce_InterlockedDecrement64 ((volatile __int64*) &value);
  #elif JUCE_ATOMICS_GCC
	return (Type) __sync_add_and_fetch (&value, -1);
  #endif
}

template <typename Type>
inline bool Atomic<Type>::compareAndSetBool (const Type newValue, const Type valueToCompare) noexcept
{
  #if JUCE_ATOMICS_MAC
	return sizeof (Type) == 4 ? OSAtomicCompareAndSwap32Barrier ((int32_t) castTo32Bit (valueToCompare), (int32_t) castTo32Bit (newValue), (JUCE_MAC_ATOMICS_VOLATILE int32_t*) &value)
							  : OSAtomicCompareAndSwap64Barrier ((int64_t) castTo64Bit (valueToCompare), (int64_t) castTo64Bit (newValue), (JUCE_MAC_ATOMICS_VOLATILE int64_t*) &value);
  #elif JUCE_ATOMICS_WINDOWS
	return compareAndSetValue (newValue, valueToCompare) == valueToCompare;
  #elif JUCE_ATOMICS_GCC
	return sizeof (Type) == 4 ? __sync_bool_compare_and_swap ((volatile int32*) &value, castTo32Bit (valueToCompare), castTo32Bit (newValue))
							  : __sync_bool_compare_and_swap ((volatile int64*) &value, castTo64Bit (valueToCompare), castTo64Bit (newValue));
  #endif
}

template <typename Type>
inline Type Atomic<Type>::compareAndSetValue (const Type newValue, const Type valueToCompare) noexcept
{
  #if JUCE_ATOMICS_MAC
	for (;;) // Annoying workaround for only having a bool CAS operation..
	{
		if (compareAndSetBool (newValue, valueToCompare))
			return valueToCompare;

		const Type result = value;
		if (result != valueToCompare)
			return result;
	}

  #elif JUCE_ATOMICS_WINDOWS
	return sizeof (Type) == 4 ? castFrom32Bit ((int32) juce_InterlockedCompareExchange ((volatile long*) &value, (long) castTo32Bit (newValue), (long) castTo32Bit (valueToCompare)))
							  : castFrom64Bit ((int64) juce_InterlockedCompareExchange64 ((volatile __int64*) &value, (__int64) castTo64Bit (newValue), (__int64) castTo64Bit (valueToCompare)));
  #elif JUCE_ATOMICS_GCC
	return sizeof (Type) == 4 ? castFrom32Bit ((int32) __sync_val_compare_and_swap ((volatile int32*) &value, castTo32Bit (valueToCompare), castTo32Bit (newValue)))
							  : castFrom64Bit ((int64) __sync_val_compare_and_swap ((volatile int64*) &value, castTo64Bit (valueToCompare), castTo64Bit (newValue)));
  #endif
}

template <typename Type>
inline void Atomic<Type>::memoryBarrier() noexcept
{
  #if JUCE_ATOMICS_MAC
	OSMemoryBarrier();
  #elif JUCE_ATOMICS_GCC
	__sync_synchronize();
  #elif JUCE_ATOMICS_WINDOWS
	juce_MemoryBarrier();
  #endif
}

#if JUCE_MSVC
  #pragma warning (pop)
#endif

#endif   // __JUCE_ATOMIC_JUCEHEADER__

/*** End of inlined file: juce_Atomic.h ***/


/*** Start of inlined file: juce_CharPointer_UTF8.h ***/
#ifndef __JUCE_CHARPOINTER_UTF8_JUCEHEADER__
#define __JUCE_CHARPOINTER_UTF8_JUCEHEADER__

/**
	Wraps a pointer to a null-terminated UTF-8 character string, and provides
	various methods to operate on the data.
	@see CharPointer_UTF16, CharPointer_UTF32
*/
class CharPointer_UTF8
{
public:
	typedef char CharType;

	inline explicit CharPointer_UTF8 (const CharType* const rawPointer) noexcept
		: data (const_cast <CharType*> (rawPointer))
	{
	}

	inline CharPointer_UTF8 (const CharPointer_UTF8& other) noexcept
		: data (other.data)
	{
	}

	inline CharPointer_UTF8& operator= (const CharPointer_UTF8& other) noexcept
	{
		data = other.data;
		return *this;
	}

	inline CharPointer_UTF8& operator= (const CharType* text) noexcept
	{
		data = const_cast <CharType*> (text);
		return *this;
	}

	/** This is a pointer comparison, it doesn't compare the actual text. */
	inline bool operator== (const CharPointer_UTF8& other) const noexcept { return data == other.data; }
	inline bool operator!= (const CharPointer_UTF8& other) const noexcept { return data != other.data; }
	inline bool operator<= (const CharPointer_UTF8& other) const noexcept { return data <= other.data; }
	inline bool operator<  (const CharPointer_UTF8& other) const noexcept { return data <  other.data; }
	inline bool operator>= (const CharPointer_UTF8& other) const noexcept { return data >= other.data; }
	inline bool operator>  (const CharPointer_UTF8& other) const noexcept { return data >  other.data; }

	/** Returns the address that this pointer is pointing to. */
	inline CharType* getAddress() const noexcept        { return data; }

	/** Returns the address that this pointer is pointing to. */
	inline operator const CharType*() const noexcept    { return data; }

	/** Returns true if this pointer is pointing to a null character. */
	inline bool isEmpty() const noexcept                { return *data == 0; }

	/** Returns the unicode character that this pointer is pointing to. */
	juce_wchar operator*() const noexcept
	{
		const signed char byte = (signed char) *data;

		if (byte >= 0)
			return (juce_wchar) (uint8) byte;

		uint32 n = (uint32) (uint8) byte;
		uint32 mask = 0x7f;
		uint32 bit = 0x40;
		size_t numExtraValues = 0;

		while ((n & bit) != 0 && bit > 0x10)
		{
			mask >>= 1;
			++numExtraValues;
			bit >>= 1;
		}

		n &= mask;

		for (size_t i = 1; i <= numExtraValues; ++i)
		{
			const uint8 nextByte = (uint8) data [i];

			if ((nextByte & 0xc0) != 0x80)
				break;

			n <<= 6;
			n |= (nextByte & 0x3f);
		}

		return (juce_wchar) n;
	}

	/** Moves this pointer along to the next character in the string. */
	CharPointer_UTF8& operator++() noexcept
	{
		const signed char n = (signed char) *data++;

		if (n < 0)
		{
			juce_wchar bit = 0x40;

			while ((n & bit) != 0 && bit > 0x8)
			{
				++data;
				bit >>= 1;
			}
		}

		return *this;
	}

	/** Moves this pointer back to the previous character in the string. */
	CharPointer_UTF8& operator--() noexcept
	{
		const char n = *--data;

		if ((n & 0xc0) == 0xc0)
		{
			int count = 3;

			do
			{
				--data;
			}
			while ((*data & 0xc0) == 0xc0 && --count >= 0);
		}

		return *this;
	}

	/** Returns the character that this pointer is currently pointing to, and then
		advances the pointer to point to the next character. */
	juce_wchar getAndAdvance() noexcept
	{
		const signed char byte = (signed char) *data++;

		if (byte >= 0)
			return (juce_wchar) (uint8) byte;

		uint32 n = (uint32) (uint8) byte;
		uint32 mask = 0x7f;
		uint32 bit = 0x40;
		int numExtraValues = 0;

		while ((n & bit) != 0 && bit > 0x8)
		{
			mask >>= 1;
			++numExtraValues;
			bit >>= 1;
		}

		n &= mask;

		while (--numExtraValues >= 0)
		{
			const uint32 nextByte = (uint32) (uint8) *data++;

			if ((nextByte & 0xc0) != 0x80)
				break;

			n <<= 6;
			n |= (nextByte & 0x3f);
		}

		return (juce_wchar) n;
	}

	/** Moves this pointer along to the next character in the string. */
	CharPointer_UTF8 operator++ (int) noexcept
	{
		CharPointer_UTF8 temp (*this);
		++*this;
		return temp;
	}

	/** Moves this pointer forwards by the specified number of characters. */
	void operator+= (int numToSkip) noexcept
	{
		if (numToSkip < 0)
		{
			while (++numToSkip <= 0)
				--*this;
		}
		else
		{
			while (--numToSkip >= 0)
				++*this;
		}
	}

	/** Moves this pointer backwards by the specified number of characters. */
	void operator-= (int numToSkip) noexcept
	{
		operator+= (-numToSkip);
	}

	/** Returns the character at a given character index from the start of the string. */
	juce_wchar operator[] (int characterIndex) const noexcept
	{
		CharPointer_UTF8 p (*this);
		p += characterIndex;
		return *p;
	}

	/** Returns a pointer which is moved forwards from this one by the specified number of characters. */
	CharPointer_UTF8 operator+ (int numToSkip) const noexcept
	{
		CharPointer_UTF8 p (*this);
		p += numToSkip;
		return p;
	}

	/** Returns a pointer which is moved backwards from this one by the specified number of characters. */
	CharPointer_UTF8 operator- (int numToSkip) const noexcept
	{
		CharPointer_UTF8 p (*this);
		p += -numToSkip;
		return p;
	}

	/** Returns the number of characters in this string. */
	size_t length() const noexcept
	{
		const CharType* d = data;
		size_t count = 0;

		for (;;)
		{
			const uint32 n = (uint32) (uint8) *d++;

			if ((n & 0x80) != 0)
			{
				uint32 bit = 0x40;

				while ((n & bit) != 0)
				{
					++d;
					bit >>= 1;

					if (bit == 0)
						break; // illegal utf-8 sequence
				}
			}
			else if (n == 0)
				break;

			++count;
		}

		return count;
	}

	/** Returns the number of characters in this string, or the given value, whichever is lower. */
	size_t lengthUpTo (const size_t maxCharsToCount) const noexcept
	{
		return CharacterFunctions::lengthUpTo (*this, maxCharsToCount);
	}

	/** Returns the number of characters in this string, or up to the given end pointer, whichever is lower. */
	size_t lengthUpTo (const CharPointer_UTF8& end) const noexcept
	{
		return CharacterFunctions::lengthUpTo (*this, end);
	}

	/** Returns the number of bytes that are used to represent this string.
		This includes the terminating null character.
	*/
	size_t sizeInBytes() const noexcept
	{
		jassert (data != nullptr);
		return strlen (data) + 1;
	}

	/** Returns the number of bytes that would be needed to represent the given
		unicode character in this encoding format.
	*/
	static size_t getBytesRequiredFor (const juce_wchar charToWrite) noexcept
	{
		size_t num = 1;
		const uint32 c = (uint32) charToWrite;

		if (c >= 0x80)
		{
			++num;
			if (c >= 0x800)
			{
				++num;
				if (c >= 0x10000)
					++num;
			}
		}

		return num;
	}

	/** Returns the number of bytes that would be needed to represent the given
		string in this encoding format.
		The value returned does NOT include the terminating null character.
	*/
	template <class CharPointer>
	static size_t getBytesRequiredFor (CharPointer text) noexcept
	{
		size_t count = 0;
		juce_wchar n;

		while ((n = text.getAndAdvance()) != 0)
			count += getBytesRequiredFor (n);

		return count;
	}

	/** Returns a pointer to the null character that terminates this string. */
	CharPointer_UTF8 findTerminatingNull() const noexcept
	{
		return CharPointer_UTF8 (data + strlen (data));
	}

	/** Writes a unicode character to this string, and advances this pointer to point to the next position. */
	void write (const juce_wchar charToWrite) noexcept
	{
		const uint32 c = (uint32) charToWrite;

		if (c >= 0x80)
		{
			int numExtraBytes = 1;
			if (c >= 0x800)
			{
				++numExtraBytes;
				if (c >= 0x10000)
					++numExtraBytes;
			}

			*data++ = (CharType) ((0xff << (7 - numExtraBytes)) | (c >> (numExtraBytes * 6)));

			while (--numExtraBytes >= 0)
				*data++ = (CharType) (0x80 | (0x3f & (c >> (numExtraBytes * 6))));
		}
		else
		{
			*data++ = (CharType) c;
		}
	}

	/** Writes a null character to this string (leaving the pointer's position unchanged). */
	inline void writeNull() const noexcept
	{
		*data = 0;
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes. */
	template <typename CharPointer>
	void writeAll (const CharPointer& src) noexcept
	{
		CharacterFunctions::copyAll (*this, src);
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes. */
	void writeAll (const CharPointer_UTF8& src) noexcept
	{
		const CharType* s = src.data;

		while ((*data = *s) != 0)
		{
			++data;
			++s;
		}
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes.
		The maxDestBytes parameter specifies the maximum number of bytes that can be written
		to the destination buffer before stopping.
	*/
	template <typename CharPointer>
	int writeWithDestByteLimit (const CharPointer& src, const int maxDestBytes) noexcept
	{
		return CharacterFunctions::copyWithDestByteLimit (*this, src, maxDestBytes);
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes.
		The maxChars parameter specifies the maximum number of characters that can be
		written to the destination buffer before stopping (including the terminating null).
	*/
	template <typename CharPointer>
	void writeWithCharLimit (const CharPointer& src, const int maxChars) noexcept
	{
		CharacterFunctions::copyWithCharLimit (*this, src, maxChars);
	}

	/** Compares this string with another one. */
	template <typename CharPointer>
	int compare (const CharPointer& other) const noexcept
	{
		return CharacterFunctions::compare (*this, other);
	}

	/** Compares this string with another one, up to a specified number of characters. */
	template <typename CharPointer>
	int compareUpTo (const CharPointer& other, const int maxChars) const noexcept
	{
		return CharacterFunctions::compareUpTo (*this, other, maxChars);
	}

	/** Compares this string with another one. */
	template <typename CharPointer>
	int compareIgnoreCase (const CharPointer& other) const noexcept
	{
		return CharacterFunctions::compareIgnoreCase (*this, other);
	}

	/** Compares this string with another one. */
	int compareIgnoreCase (const CharPointer_UTF8& other) const noexcept
	{
	   #if JUCE_WINDOWS
		return stricmp (data, other.data);
	   #else
		return strcasecmp (data, other.data);
	   #endif
	}

	/** Compares this string with another one, up to a specified number of characters. */
	template <typename CharPointer>
	int compareIgnoreCaseUpTo (const CharPointer& other, const int maxChars) const noexcept
	{
		return CharacterFunctions::compareIgnoreCaseUpTo (*this, other, maxChars);
	}

	/** Returns the character index of a substring, or -1 if it isn't found. */
	template <typename CharPointer>
	int indexOf (const CharPointer& stringToFind) const noexcept
	{
		return CharacterFunctions::indexOf (*this, stringToFind);
	}

	/** Returns the character index of a unicode character, or -1 if it isn't found. */
	int indexOf (const juce_wchar charToFind) const noexcept
	{
		return CharacterFunctions::indexOfChar (*this, charToFind);
	}

	/** Returns the character index of a unicode character, or -1 if it isn't found. */
	int indexOf (const juce_wchar charToFind, const bool ignoreCase) const noexcept
	{
		return ignoreCase ? CharacterFunctions::indexOfCharIgnoreCase (*this, charToFind)
						  : CharacterFunctions::indexOfChar (*this, charToFind);
	}

	/** Returns true if the first character of this string is whitespace. */
	bool isWhitespace() const noexcept      { return *data == ' ' || (*data <= 13 && *data >= 9); }
	/** Returns true if the first character of this string is a digit. */
	bool isDigit() const noexcept           { return *data >= '0' && *data <= '9'; }
	/** Returns true if the first character of this string is a letter. */
	bool isLetter() const noexcept          { return CharacterFunctions::isLetter (operator*()) != 0; }
	/** Returns true if the first character of this string is a letter or digit. */
	bool isLetterOrDigit() const noexcept   { return CharacterFunctions::isLetterOrDigit (operator*()) != 0; }
	/** Returns true if the first character of this string is upper-case. */
	bool isUpperCase() const noexcept       { return CharacterFunctions::isUpperCase (operator*()) != 0; }
	/** Returns true if the first character of this string is lower-case. */
	bool isLowerCase() const noexcept       { return CharacterFunctions::isLowerCase (operator*()) != 0; }

	/** Returns an upper-case version of the first character of this string. */
	juce_wchar toUpperCase() const noexcept { return CharacterFunctions::toUpperCase (operator*()); }
	/** Returns a lower-case version of the first character of this string. */
	juce_wchar toLowerCase() const noexcept { return CharacterFunctions::toLowerCase (operator*()); }

	/** Parses this string as a 32-bit integer. */
	int getIntValue32() const noexcept      { return atoi (data); }

	/** Parses this string as a 64-bit integer. */
	int64 getIntValue64() const noexcept
	{
	   #if JUCE_LINUX || JUCE_ANDROID
		return atoll (data);
	   #elif JUCE_WINDOWS
		return _atoi64 (data);
	   #else
		return CharacterFunctions::getIntValue <int64, CharPointer_UTF8> (*this);
	   #endif
	}

	/** Parses this string as a floating point double. */
	double getDoubleValue() const noexcept  { return CharacterFunctions::getDoubleValue (*this); }

	/** Returns the first non-whitespace character in the string. */
	CharPointer_UTF8 findEndOfWhitespace() const noexcept   { return CharacterFunctions::findEndOfWhitespace (*this); }

	/** Returns true if the given unicode character can be represented in this encoding. */
	static bool canRepresent (juce_wchar character) noexcept
	{
		return ((unsigned int) character) < (unsigned int) 0x10ffff;
	}

	/** Returns true if this data contains a valid string in this encoding. */
	static bool isValidString (const CharType* dataToTest, int maxBytesToRead)
	{
		while (--maxBytesToRead >= 0 && *dataToTest != 0)
		{
			const signed char byte = (signed char) *dataToTest;

			if (byte < 0)
			{
				uint32 n = (uint32) (uint8) byte;
				uint32 mask = 0x7f;
				uint32 bit = 0x40;
				int numExtraValues = 0;

				while ((n & bit) != 0)
				{
					if (bit <= 0x10)
						return false;

					mask >>= 1;
					++numExtraValues;
					bit >>= 1;
				}

				n &= mask;

				while (--numExtraValues >= 0)
				{
					const uint32 nextByte = (uint32) (uint8) *dataToTest++;

					if ((nextByte & 0xc0) != 0x80)
						return false;
				}
			}
		}

		return true;
	}

	/** Atomically swaps this pointer for a new value, returning the previous value. */
	CharPointer_UTF8 atomicSwap (const CharPointer_UTF8& newValue)
	{
		return CharPointer_UTF8 (reinterpret_cast <Atomic<CharType*>&> (data).exchange (newValue.data));
	}

	/** These values are the byte-order-mark (BOM) values for a UTF-8 stream. */
	enum
	{
		byteOrderMark1 = 0xef,
		byteOrderMark2 = 0xbb,
		byteOrderMark3 = 0xbf
	};

private:
	CharType* data;
};

#endif   // __JUCE_CHARPOINTER_UTF8_JUCEHEADER__

/*** End of inlined file: juce_CharPointer_UTF8.h ***/


/*** Start of inlined file: juce_CharPointer_UTF16.h ***/
#ifndef __JUCE_CHARPOINTER_UTF16_JUCEHEADER__
#define __JUCE_CHARPOINTER_UTF16_JUCEHEADER__

/**
	Wraps a pointer to a null-terminated UTF-16 character string, and provides
	various methods to operate on the data.
	@see CharPointer_UTF8, CharPointer_UTF32
*/
class CharPointer_UTF16
{
public:
   #if JUCE_NATIVE_WCHAR_IS_UTF16
	typedef wchar_t CharType;
   #else
	typedef int16 CharType;
   #endif

	inline explicit CharPointer_UTF16 (const CharType* const rawPointer) noexcept
		: data (const_cast <CharType*> (rawPointer))
	{
	}

	inline CharPointer_UTF16 (const CharPointer_UTF16& other) noexcept
		: data (other.data)
	{
	}

	inline CharPointer_UTF16& operator= (const CharPointer_UTF16& other) noexcept
	{
		data = other.data;
		return *this;
	}

	inline CharPointer_UTF16& operator= (const CharType* text) noexcept
	{
		data = const_cast <CharType*> (text);
		return *this;
	}

	/** This is a pointer comparison, it doesn't compare the actual text. */
	inline bool operator== (const CharPointer_UTF16& other) const noexcept { return data == other.data; }
	inline bool operator!= (const CharPointer_UTF16& other) const noexcept { return data != other.data; }
	inline bool operator<= (const CharPointer_UTF16& other) const noexcept { return data <= other.data; }
	inline bool operator<  (const CharPointer_UTF16& other) const noexcept { return data <  other.data; }
	inline bool operator>= (const CharPointer_UTF16& other) const noexcept { return data >= other.data; }
	inline bool operator>  (const CharPointer_UTF16& other) const noexcept { return data >  other.data; }

	/** Returns the address that this pointer is pointing to. */
	inline CharType* getAddress() const noexcept        { return data; }

	/** Returns the address that this pointer is pointing to. */
	inline operator const CharType*() const noexcept    { return data; }

	/** Returns true if this pointer is pointing to a null character. */
	inline bool isEmpty() const noexcept                { return *data == 0; }

	/** Returns the unicode character that this pointer is pointing to. */
	juce_wchar operator*() const noexcept
	{
		uint32 n = (uint32) (uint16) *data;

		if (n >= 0xd800 && n <= 0xdfff && ((uint32) (uint16) data[1]) >= 0xdc00)
			n = 0x10000 + (((n - 0xd800) << 10) | (((uint32) (uint16) data[1]) - 0xdc00));

		return (juce_wchar) n;
	}

	/** Moves this pointer along to the next character in the string. */
	CharPointer_UTF16& operator++() noexcept
	{
		const juce_wchar n = *data++;

		if (n >= 0xd800 && n <= 0xdfff && ((uint32) (uint16) *data) >= 0xdc00)
			++data;

		return *this;
	}

	/** Moves this pointer back to the previous character in the string. */
	CharPointer_UTF16& operator--() noexcept
	{
		const juce_wchar n = *--data;

		if (n >= 0xdc00 && n <= 0xdfff)
			--data;

		return *this;
	}

	/** Returns the character that this pointer is currently pointing to, and then
		advances the pointer to point to the next character. */
	juce_wchar getAndAdvance() noexcept
	{
		uint32 n = (uint32) (uint16) *data++;

		if (n >= 0xd800 && n <= 0xdfff && ((uint32) (uint16) *data) >= 0xdc00)
			n = 0x10000 + ((((n - 0xd800) << 10) | (((uint32) (uint16) *data++) - 0xdc00)));

		return (juce_wchar) n;
	}

	/** Moves this pointer along to the next character in the string. */
	CharPointer_UTF16 operator++ (int) noexcept
	{
		CharPointer_UTF16 temp (*this);
		++*this;
		return temp;
	}

	/** Moves this pointer forwards by the specified number of characters. */
	void operator+= (int numToSkip) noexcept
	{
		if (numToSkip < 0)
		{
			while (++numToSkip <= 0)
				--*this;
		}
		else
		{
			while (--numToSkip >= 0)
				++*this;
		}
	}

	/** Moves this pointer backwards by the specified number of characters. */
	void operator-= (int numToSkip) noexcept
	{
		operator+= (-numToSkip);
	}

	/** Returns the character at a given character index from the start of the string. */
	juce_wchar operator[] (const int characterIndex) const noexcept
	{
		CharPointer_UTF16 p (*this);
		p += characterIndex;
		return *p;
	}

	/** Returns a pointer which is moved forwards from this one by the specified number of characters. */
	CharPointer_UTF16 operator+ (const int numToSkip) const noexcept
	{
		CharPointer_UTF16 p (*this);
		p += numToSkip;
		return p;
	}

	/** Returns a pointer which is moved backwards from this one by the specified number of characters. */
	CharPointer_UTF16 operator- (const int numToSkip) const noexcept
	{
		CharPointer_UTF16 p (*this);
		p += -numToSkip;
		return p;
	}

	/** Writes a unicode character to this string, and advances this pointer to point to the next position. */
	void write (juce_wchar charToWrite) noexcept
	{
		if (charToWrite >= 0x10000)
		{
			charToWrite -= 0x10000;
			*data++ = (CharType) (0xd800 + (charToWrite >> 10));
			*data++ = (CharType) (0xdc00 + (charToWrite & 0x3ff));
		}
		else
		{
			*data++ = (CharType) charToWrite;
		}
	}

	/** Writes a null character to this string (leaving the pointer's position unchanged). */
	inline void writeNull() const noexcept
	{
		*data = 0;
	}

	/** Returns the number of characters in this string. */
	size_t length() const noexcept
	{
		const CharType* d = data;
		size_t count = 0;

		for (;;)
		{
			const int n = *d++;

			if (n >= 0xd800 && n <= 0xdfff)
			{
				if (*d++ == 0)
					break;
			}
			else if (n == 0)
				break;

			++count;
		}

		return count;
	}

	/** Returns the number of characters in this string, or the given value, whichever is lower. */
	size_t lengthUpTo (const size_t maxCharsToCount) const noexcept
	{
		return CharacterFunctions::lengthUpTo (*this, maxCharsToCount);
	}

	/** Returns the number of characters in this string, or up to the given end pointer, whichever is lower. */
	size_t lengthUpTo (const CharPointer_UTF16& end) const noexcept
	{
		return CharacterFunctions::lengthUpTo (*this, end);
	}

	/** Returns the number of bytes that are used to represent this string.
		This includes the terminating null character.
	*/
	size_t sizeInBytes() const noexcept
	{
		return sizeof (CharType) * (findNullIndex (data) + 1);
	}

	/** Returns the number of bytes that would be needed to represent the given
		unicode character in this encoding format.
	*/
	static size_t getBytesRequiredFor (const juce_wchar charToWrite) noexcept
	{
		return (charToWrite >= 0x10000) ? (sizeof (CharType) * 2) : sizeof (CharType);
	}

	/** Returns the number of bytes that would be needed to represent the given
		string in this encoding format.
		The value returned does NOT include the terminating null character.
	*/
	template <class CharPointer>
	static size_t getBytesRequiredFor (CharPointer text) noexcept
	{
		size_t count = 0;
		juce_wchar n;

		while ((n = text.getAndAdvance()) != 0)
			count += getBytesRequiredFor (n);

		return count;
	}

	/** Returns a pointer to the null character that terminates this string. */
	CharPointer_UTF16 findTerminatingNull() const noexcept
	{
		const CharType* t = data;

		while (*t != 0)
			++t;

		return CharPointer_UTF16 (t);
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes. */
	template <typename CharPointer>
	void writeAll (const CharPointer& src) noexcept
	{
		CharacterFunctions::copyAll (*this, src);
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes. */
	void writeAll (const CharPointer_UTF16& src) noexcept
	{
		const CharType* s = src.data;

		while ((*data = *s) != 0)
		{
			++data;
			++s;
		}
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes.
		The maxDestBytes parameter specifies the maximum number of bytes that can be written
		to the destination buffer before stopping.
	*/
	template <typename CharPointer>
	int writeWithDestByteLimit (const CharPointer& src, const int maxDestBytes) noexcept
	{
		return CharacterFunctions::copyWithDestByteLimit (*this, src, maxDestBytes);
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes.
		The maxChars parameter specifies the maximum number of characters that can be
		written to the destination buffer before stopping (including the terminating null).
	*/
	template <typename CharPointer>
	void writeWithCharLimit (const CharPointer& src, const int maxChars) noexcept
	{
		CharacterFunctions::copyWithCharLimit (*this, src, maxChars);
	}

	/** Compares this string with another one. */
	template <typename CharPointer>
	int compare (const CharPointer& other) const noexcept
	{
		return CharacterFunctions::compare (*this, other);
	}

	/** Compares this string with another one, up to a specified number of characters. */
	template <typename CharPointer>
	int compareUpTo (const CharPointer& other, const int maxChars) const noexcept
	{
		return CharacterFunctions::compareUpTo (*this, other, maxChars);
	}

	/** Compares this string with another one. */
	template <typename CharPointer>
	int compareIgnoreCase (const CharPointer& other) const noexcept
	{
		return CharacterFunctions::compareIgnoreCase (*this, other);
	}

	/** Compares this string with another one, up to a specified number of characters. */
	template <typename CharPointer>
	int compareIgnoreCaseUpTo (const CharPointer& other, const int maxChars) const noexcept
	{
		return CharacterFunctions::compareIgnoreCaseUpTo (*this, other, maxChars);
	}

   #if JUCE_WINDOWS && ! DOXYGEN
	int compareIgnoreCase (const CharPointer_UTF16& other) const noexcept
	{
		return _wcsicmp (data, other.data);
	}

	int compareIgnoreCaseUpTo (const CharPointer_UTF16& other, int maxChars) const noexcept
	{
		return _wcsnicmp (data, other.data, (size_t) maxChars);
	}

	int indexOf (const CharPointer_UTF16& stringToFind) const noexcept
	{
		const CharType* const t = wcsstr (data, stringToFind.getAddress());
		return t == nullptr ? -1 : (int) (t - data);
	}
   #endif

	/** Returns the character index of a substring, or -1 if it isn't found. */
	template <typename CharPointer>
	int indexOf (const CharPointer& stringToFind) const noexcept
	{
		return CharacterFunctions::indexOf (*this, stringToFind);
	}

	/** Returns the character index of a unicode character, or -1 if it isn't found. */
	int indexOf (const juce_wchar charToFind) const noexcept
	{
		return CharacterFunctions::indexOfChar (*this, charToFind);
	}

	/** Returns the character index of a unicode character, or -1 if it isn't found. */
	int indexOf (const juce_wchar charToFind, const bool ignoreCase) const noexcept
	{
		return ignoreCase ? CharacterFunctions::indexOfCharIgnoreCase (*this, charToFind)
						  : CharacterFunctions::indexOfChar (*this, charToFind);
	}

	/** Returns true if the first character of this string is whitespace. */
	bool isWhitespace() const noexcept      { return CharacterFunctions::isWhitespace (operator*()) != 0; }
	/** Returns true if the first character of this string is a digit. */
	bool isDigit() const noexcept           { return CharacterFunctions::isDigit (operator*()) != 0; }
	/** Returns true if the first character of this string is a letter. */
	bool isLetter() const noexcept          { return CharacterFunctions::isLetter (operator*()) != 0; }
	/** Returns true if the first character of this string is a letter or digit. */
	bool isLetterOrDigit() const noexcept   { return CharacterFunctions::isLetterOrDigit (operator*()) != 0; }
	/** Returns true if the first character of this string is upper-case. */
	bool isUpperCase() const noexcept       { return CharacterFunctions::isUpperCase (operator*()) != 0; }
	/** Returns true if the first character of this string is lower-case. */
	bool isLowerCase() const noexcept       { return CharacterFunctions::isLowerCase (operator*()) != 0; }

	/** Returns an upper-case version of the first character of this string. */
	juce_wchar toUpperCase() const noexcept { return CharacterFunctions::toUpperCase (operator*()); }
	/** Returns a lower-case version of the first character of this string. */
	juce_wchar toLowerCase() const noexcept { return CharacterFunctions::toLowerCase (operator*()); }

	/** Parses this string as a 32-bit integer. */
	int getIntValue32() const noexcept
	{
	   #if JUCE_WINDOWS
		return _wtoi (data);
	   #else
		return CharacterFunctions::getIntValue <int, CharPointer_UTF16> (*this);
	   #endif
	}

	/** Parses this string as a 64-bit integer. */
	int64 getIntValue64() const noexcept
	{
	   #if JUCE_WINDOWS
		return _wtoi64 (data);
	   #else
		return CharacterFunctions::getIntValue <int64, CharPointer_UTF16> (*this);
	   #endif
	}

	/** Parses this string as a floating point double. */
	double getDoubleValue() const noexcept  { return CharacterFunctions::getDoubleValue (*this); }

	/** Returns the first non-whitespace character in the string. */
	CharPointer_UTF16 findEndOfWhitespace() const noexcept   { return CharacterFunctions::findEndOfWhitespace (*this); }

	/** Returns true if the given unicode character can be represented in this encoding. */
	static bool canRepresent (juce_wchar character) noexcept
	{
		return ((unsigned int) character) < (unsigned int) 0x10ffff
				 && (((unsigned int) character) < 0xd800 || ((unsigned int) character) > 0xdfff);
	}

	/** Returns true if this data contains a valid string in this encoding. */
	static bool isValidString (const CharType* dataToTest, int maxBytesToRead)
	{
		maxBytesToRead /= sizeof (CharType);

		while (--maxBytesToRead >= 0 && *dataToTest != 0)
		{
			const uint32 n = (uint32) (uint16) *dataToTest++;

			if (n >= 0xd800)
			{
				if (n > 0x10ffff)
					return false;

				if (n <= 0xdfff)
				{
					if (n > 0xdc00)
						return false;

					const uint32 nextChar = (uint32) (uint16) *dataToTest++;

					if (nextChar < 0xdc00 || nextChar > 0xdfff)
						return false;
				}
			}
		}

		return true;
	}

	/** Atomically swaps this pointer for a new value, returning the previous value. */
	CharPointer_UTF16 atomicSwap (const CharPointer_UTF16& newValue)
	{
		return CharPointer_UTF16 (reinterpret_cast <Atomic<CharType*>&> (data).exchange (newValue.data));
	}

	/** These values are the byte-order-mark (BOM) values for a UTF-16 stream. */
	enum
	{
		byteOrderMarkBE1 = 0xfe,
		byteOrderMarkBE2 = 0xff,
		byteOrderMarkLE1 = 0xff,
		byteOrderMarkLE2 = 0xfe
	};

private:
	CharType* data;

	static int findNullIndex (const CharType* const t) noexcept
	{
		int n = 0;

		while (t[n] != 0)
			++n;

		return n;
	}
};

#endif   // __JUCE_CHARPOINTER_UTF16_JUCEHEADER__

/*** End of inlined file: juce_CharPointer_UTF16.h ***/


/*** Start of inlined file: juce_CharPointer_UTF32.h ***/
#ifndef __JUCE_CHARPOINTER_UTF32_JUCEHEADER__
#define __JUCE_CHARPOINTER_UTF32_JUCEHEADER__

/**
	Wraps a pointer to a null-terminated UTF-32 character string, and provides
	various methods to operate on the data.
	@see CharPointer_UTF8, CharPointer_UTF16
*/
class CharPointer_UTF32
{
public:
	typedef juce_wchar CharType;

	inline explicit CharPointer_UTF32 (const CharType* const rawPointer) noexcept
		: data (const_cast <CharType*> (rawPointer))
	{
	}

	inline CharPointer_UTF32 (const CharPointer_UTF32& other) noexcept
		: data (other.data)
	{
	}

	inline CharPointer_UTF32& operator= (const CharPointer_UTF32& other) noexcept
	{
		data = other.data;
		return *this;
	}

	inline CharPointer_UTF32& operator= (const CharType* text) noexcept
	{
		data = const_cast <CharType*> (text);
		return *this;
	}

	/** This is a pointer comparison, it doesn't compare the actual text. */
	inline bool operator== (const CharPointer_UTF32& other) const noexcept { return data == other.data; }
	inline bool operator!= (const CharPointer_UTF32& other) const noexcept { return data != other.data; }
	inline bool operator<= (const CharPointer_UTF32& other) const noexcept { return data <= other.data; }
	inline bool operator<  (const CharPointer_UTF32& other) const noexcept { return data <  other.data; }
	inline bool operator>= (const CharPointer_UTF32& other) const noexcept { return data >= other.data; }
	inline bool operator>  (const CharPointer_UTF32& other) const noexcept { return data >  other.data; }

	/** Returns the address that this pointer is pointing to. */
	inline CharType* getAddress() const noexcept        { return data; }

	/** Returns the address that this pointer is pointing to. */
	inline operator const CharType*() const noexcept    { return data; }

	/** Returns true if this pointer is pointing to a null character. */
	inline bool isEmpty() const noexcept                { return *data == 0; }

	/** Returns the unicode character that this pointer is pointing to. */
	inline juce_wchar operator*() const noexcept        { return *data; }

	/** Moves this pointer along to the next character in the string. */
	inline CharPointer_UTF32& operator++() noexcept
	{
		++data;
		return *this;
	}

	/** Moves this pointer to the previous character in the string. */
	inline CharPointer_UTF32& operator--() noexcept
	{
		--data;
		return *this;
	}

	/** Returns the character that this pointer is currently pointing to, and then
		advances the pointer to point to the next character. */
	inline juce_wchar getAndAdvance() noexcept  { return *data++; }

	/** Moves this pointer along to the next character in the string. */
	CharPointer_UTF32 operator++ (int) noexcept
	{
		CharPointer_UTF32 temp (*this);
		++data;
		return temp;
	}

	/** Moves this pointer forwards by the specified number of characters. */
	inline void operator+= (const int numToSkip) noexcept
	{
		data += numToSkip;
	}

	inline void operator-= (const int numToSkip) noexcept
	{
		data -= numToSkip;
	}

	/** Returns the character at a given character index from the start of the string. */
	inline juce_wchar& operator[] (const int characterIndex) const noexcept
	{
		return data [characterIndex];
	}

	/** Returns a pointer which is moved forwards from this one by the specified number of characters. */
	CharPointer_UTF32 operator+ (const int numToSkip) const noexcept
	{
		return CharPointer_UTF32 (data + numToSkip);
	}

	/** Returns a pointer which is moved backwards from this one by the specified number of characters. */
	CharPointer_UTF32 operator- (const int numToSkip) const noexcept
	{
		return CharPointer_UTF32 (data - numToSkip);
	}

	/** Writes a unicode character to this string, and advances this pointer to point to the next position. */
	inline void write (const juce_wchar charToWrite) noexcept
	{
		*data++ = charToWrite;
	}

	inline void replaceChar (const juce_wchar newChar) noexcept
	{
		*data = newChar;
	}

	/** Writes a null character to this string (leaving the pointer's position unchanged). */
	inline void writeNull() const noexcept
	{
		*data = 0;
	}

	/** Returns the number of characters in this string. */
	size_t length() const noexcept
	{
	   #if JUCE_NATIVE_WCHAR_IS_UTF32 && ! JUCE_ANDROID
		return wcslen (data);
	   #else
		size_t n = 0;
		while (data[n] != 0)
			++n;
		return n;
	   #endif
	}

	/** Returns the number of characters in this string, or the given value, whichever is lower. */
	size_t lengthUpTo (const size_t maxCharsToCount) const noexcept
	{
		return CharacterFunctions::lengthUpTo (*this, maxCharsToCount);
	}

	/** Returns the number of characters in this string, or up to the given end pointer, whichever is lower. */
	size_t lengthUpTo (const CharPointer_UTF32& end) const noexcept
	{
		return CharacterFunctions::lengthUpTo (*this, end);
	}

	/** Returns the number of bytes that are used to represent this string.
		This includes the terminating null character.
	*/
	size_t sizeInBytes() const noexcept
	{
		return sizeof (CharType) * (length() + 1);
	}

	/** Returns the number of bytes that would be needed to represent the given
		unicode character in this encoding format.
	*/
	static inline size_t getBytesRequiredFor (const juce_wchar) noexcept
	{
		return sizeof (CharType);
	}

	/** Returns the number of bytes that would be needed to represent the given
		string in this encoding format.
		The value returned does NOT include the terminating null character.
	*/
	template <class CharPointer>
	static size_t getBytesRequiredFor (const CharPointer& text) noexcept
	{
		return sizeof (CharType) * text.length();
	}

	/** Returns a pointer to the null character that terminates this string. */
	CharPointer_UTF32 findTerminatingNull() const noexcept
	{
		return CharPointer_UTF32 (data + length());
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes. */
	template <typename CharPointer>
	void writeAll (const CharPointer& src) noexcept
	{
		CharacterFunctions::copyAll (*this, src);
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes. */
	void writeAll (const CharPointer_UTF32& src) noexcept
	{
		const CharType* s = src.data;

		while ((*data = *s) != 0)
		{
			++data;
			++s;
		}
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes.
		The maxDestBytes parameter specifies the maximum number of bytes that can be written
		to the destination buffer before stopping.
	*/
	template <typename CharPointer>
	int writeWithDestByteLimit (const CharPointer& src, const int maxDestBytes) noexcept
	{
		return CharacterFunctions::copyWithDestByteLimit (*this, src, maxDestBytes);
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes.
		The maxChars parameter specifies the maximum number of characters that can be
		written to the destination buffer before stopping (including the terminating null).
	*/
	template <typename CharPointer>
	void writeWithCharLimit (const CharPointer& src, const int maxChars) noexcept
	{
		CharacterFunctions::copyWithCharLimit (*this, src, maxChars);
	}

	/** Compares this string with another one. */
	template <typename CharPointer>
	int compare (const CharPointer& other) const noexcept
	{
		return CharacterFunctions::compare (*this, other);
	}

   #if JUCE_NATIVE_WCHAR_IS_UTF32 && ! JUCE_ANDROID
	/** Compares this string with another one. */
	int compare (const CharPointer_UTF32& other) const noexcept
	{
		return wcscmp (data, other.data);
	}
   #endif

	/** Compares this string with another one, up to a specified number of characters. */
	template <typename CharPointer>
	int compareUpTo (const CharPointer& other, const int maxChars) const noexcept
	{
		return CharacterFunctions::compareUpTo (*this, other, maxChars);
	}

	/** Compares this string with another one. */
	template <typename CharPointer>
	int compareIgnoreCase (const CharPointer& other) const
	{
		return CharacterFunctions::compareIgnoreCase (*this, other);
	}

	/** Compares this string with another one, up to a specified number of characters. */
	template <typename CharPointer>
	int compareIgnoreCaseUpTo (const CharPointer& other, const int maxChars) const noexcept
	{
		return CharacterFunctions::compareIgnoreCaseUpTo (*this, other, maxChars);
	}

	/** Returns the character index of a substring, or -1 if it isn't found. */
	template <typename CharPointer>
	int indexOf (const CharPointer& stringToFind) const noexcept
	{
		return CharacterFunctions::indexOf (*this, stringToFind);
	}

	/** Returns the character index of a unicode character, or -1 if it isn't found. */
	int indexOf (const juce_wchar charToFind) const noexcept
	{
		int i = 0;

		while (data[i] != 0)
		{
			if (data[i] == charToFind)
				return i;

			++i;
		}

		return -1;
	}

	/** Returns the character index of a unicode character, or -1 if it isn't found. */
	int indexOf (const juce_wchar charToFind, const bool ignoreCase) const noexcept
	{
		return ignoreCase ? CharacterFunctions::indexOfCharIgnoreCase (*this, charToFind)
						  : CharacterFunctions::indexOfChar (*this, charToFind);
	}

	/** Returns true if the first character of this string is whitespace. */
	bool isWhitespace() const               { return CharacterFunctions::isWhitespace (*data) != 0; }
	/** Returns true if the first character of this string is a digit. */
	bool isDigit() const                    { return CharacterFunctions::isDigit (*data) != 0; }
	/** Returns true if the first character of this string is a letter. */
	bool isLetter() const                   { return CharacterFunctions::isLetter (*data) != 0; }
	/** Returns true if the first character of this string is a letter or digit. */
	bool isLetterOrDigit() const            { return CharacterFunctions::isLetterOrDigit (*data) != 0; }
	/** Returns true if the first character of this string is upper-case. */
	bool isUpperCase() const                { return CharacterFunctions::isUpperCase (*data) != 0; }
	/** Returns true if the first character of this string is lower-case. */
	bool isLowerCase() const                { return CharacterFunctions::isLowerCase (*data) != 0; }

	/** Returns an upper-case version of the first character of this string. */
	juce_wchar toUpperCase() const noexcept { return CharacterFunctions::toUpperCase (*data); }
	/** Returns a lower-case version of the first character of this string. */
	juce_wchar toLowerCase() const noexcept { return CharacterFunctions::toLowerCase (*data); }

	/** Parses this string as a 32-bit integer. */
	int getIntValue32() const noexcept      { return CharacterFunctions::getIntValue <int, CharPointer_UTF32> (*this); }
	/** Parses this string as a 64-bit integer. */
	int64 getIntValue64() const noexcept    { return CharacterFunctions::getIntValue <int64, CharPointer_UTF32> (*this); }

	/** Parses this string as a floating point double. */
	double getDoubleValue() const noexcept  { return CharacterFunctions::getDoubleValue (*this); }

	/** Returns the first non-whitespace character in the string. */
	CharPointer_UTF32 findEndOfWhitespace() const noexcept   { return CharacterFunctions::findEndOfWhitespace (*this); }

	/** Returns true if the given unicode character can be represented in this encoding. */
	static bool canRepresent (juce_wchar character) noexcept
	{
		return ((unsigned int) character) < (unsigned int) 0x10ffff;
	}

	/** Returns true if this data contains a valid string in this encoding. */
	static bool isValidString (const CharType* dataToTest, int maxBytesToRead)
	{
		maxBytesToRead /= sizeof (CharType);

		while (--maxBytesToRead >= 0 && *dataToTest != 0)
			if (! canRepresent (*dataToTest++))
				return false;

		return true;
	}

	/** Atomically swaps this pointer for a new value, returning the previous value. */
	CharPointer_UTF32 atomicSwap (const CharPointer_UTF32& newValue)
	{
		return CharPointer_UTF32 (reinterpret_cast <Atomic<CharType*>&> (data).exchange (newValue.data));
	}

private:
	CharType* data;
};

#endif   // __JUCE_CHARPOINTER_UTF32_JUCEHEADER__

/*** End of inlined file: juce_CharPointer_UTF32.h ***/


/*** Start of inlined file: juce_CharPointer_ASCII.h ***/
#ifndef __JUCE_CHARPOINTER_ASCII_JUCEHEADER__
#define __JUCE_CHARPOINTER_ASCII_JUCEHEADER__

/**
	Wraps a pointer to a null-terminated ASCII character string, and provides
	various methods to operate on the data.

	A valid ASCII string is assumed to not contain any characters above 127.

	@see CharPointer_UTF8, CharPointer_UTF16, CharPointer_UTF32
*/
class CharPointer_ASCII
{
public:
	typedef char CharType;

	inline explicit CharPointer_ASCII (const CharType* const rawPointer) noexcept
		: data (const_cast <CharType*> (rawPointer))
	{
	}

	inline CharPointer_ASCII (const CharPointer_ASCII& other) noexcept
		: data (other.data)
	{
	}

	inline CharPointer_ASCII& operator= (const CharPointer_ASCII& other) noexcept
	{
		data = other.data;
		return *this;
	}

	inline CharPointer_ASCII& operator= (const CharType* text) noexcept
	{
		data = const_cast <CharType*> (text);
		return *this;
	}

	/** This is a pointer comparison, it doesn't compare the actual text. */
	inline bool operator== (const CharPointer_ASCII& other) const noexcept { return data == other.data; }
	inline bool operator!= (const CharPointer_ASCII& other) const noexcept { return data != other.data; }
	inline bool operator<= (const CharPointer_ASCII& other) const noexcept { return data <= other.data; }
	inline bool operator<  (const CharPointer_ASCII& other) const noexcept { return data <  other.data; }
	inline bool operator>= (const CharPointer_ASCII& other) const noexcept { return data >= other.data; }
	inline bool operator>  (const CharPointer_ASCII& other) const noexcept { return data >  other.data; }

	/** Returns the address that this pointer is pointing to. */
	inline CharType* getAddress() const noexcept        { return data; }

	/** Returns the address that this pointer is pointing to. */
	inline operator const CharType*() const noexcept    { return data; }

	/** Returns true if this pointer is pointing to a null character. */
	inline bool isEmpty() const noexcept                { return *data == 0; }

	/** Returns the unicode character that this pointer is pointing to. */
	inline juce_wchar operator*() const noexcept        { return (juce_wchar) (uint8) *data; }

	/** Moves this pointer along to the next character in the string. */
	inline CharPointer_ASCII& operator++() noexcept
	{
		++data;
		return *this;
	}

	/** Moves this pointer to the previous character in the string. */
	inline CharPointer_ASCII& operator--() noexcept
	{
		--data;
		return *this;
	}

	/** Returns the character that this pointer is currently pointing to, and then
		advances the pointer to point to the next character. */
	inline juce_wchar getAndAdvance() noexcept  { return (juce_wchar) (uint8) *data++; }

	/** Moves this pointer along to the next character in the string. */
	CharPointer_ASCII operator++ (int) noexcept
	{
		CharPointer_ASCII temp (*this);
		++data;
		return temp;
	}

	/** Moves this pointer forwards by the specified number of characters. */
	inline void operator+= (const int numToSkip) noexcept
	{
		data += numToSkip;
	}

	inline void operator-= (const int numToSkip) noexcept
	{
		data -= numToSkip;
	}

	/** Returns the character at a given character index from the start of the string. */
	inline juce_wchar operator[] (const int characterIndex) const noexcept
	{
		return (juce_wchar) (unsigned char) data [characterIndex];
	}

	/** Returns a pointer which is moved forwards from this one by the specified number of characters. */
	CharPointer_ASCII operator+ (const int numToSkip) const noexcept
	{
		return CharPointer_ASCII (data + numToSkip);
	}

	/** Returns a pointer which is moved backwards from this one by the specified number of characters. */
	CharPointer_ASCII operator- (const int numToSkip) const noexcept
	{
		return CharPointer_ASCII (data - numToSkip);
	}

	/** Writes a unicode character to this string, and advances this pointer to point to the next position. */
	inline void write (const juce_wchar charToWrite) noexcept
	{
		*data++ = (char) charToWrite;
	}

	inline void replaceChar (const juce_wchar newChar) noexcept
	{
		*data = (char) newChar;
	}

	/** Writes a null character to this string (leaving the pointer's position unchanged). */
	inline void writeNull() const noexcept
	{
		*data = 0;
	}

	/** Returns the number of characters in this string. */
	size_t length() const noexcept
	{
		return (size_t) strlen (data);
	}

	/** Returns the number of characters in this string, or the given value, whichever is lower. */
	size_t lengthUpTo (const size_t maxCharsToCount) const noexcept
	{
		return CharacterFunctions::lengthUpTo (*this, maxCharsToCount);
	}

	/** Returns the number of characters in this string, or up to the given end pointer, whichever is lower. */
	size_t lengthUpTo (const CharPointer_ASCII& end) const noexcept
	{
		return CharacterFunctions::lengthUpTo (*this, end);
	}

	/** Returns the number of bytes that are used to represent this string.
		This includes the terminating null character.
	*/
	size_t sizeInBytes() const noexcept
	{
		return length() + 1;
	}

	/** Returns the number of bytes that would be needed to represent the given
		unicode character in this encoding format.
	*/
	static inline size_t getBytesRequiredFor (const juce_wchar) noexcept
	{
		return 1;
	}

	/** Returns the number of bytes that would be needed to represent the given
		string in this encoding format.
		The value returned does NOT include the terminating null character.
	*/
	template <class CharPointer>
	static size_t getBytesRequiredFor (const CharPointer& text) noexcept
	{
		return text.length();
	}

	/** Returns a pointer to the null character that terminates this string. */
	CharPointer_ASCII findTerminatingNull() const noexcept
	{
		return CharPointer_ASCII (data + length());
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes. */
	template <typename CharPointer>
	void writeAll (const CharPointer& src) noexcept
	{
		CharacterFunctions::copyAll (*this, src);
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes. */
	void writeAll (const CharPointer_ASCII& src) noexcept
	{
		strcpy (data, src.data);
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes.
		The maxDestBytes parameter specifies the maximum number of bytes that can be written
		to the destination buffer before stopping.
	*/
	template <typename CharPointer>
	int writeWithDestByteLimit (const CharPointer& src, const int maxDestBytes) noexcept
	{
		return CharacterFunctions::copyWithDestByteLimit (*this, src, maxDestBytes);
	}

	/** Copies a source string to this pointer, advancing this pointer as it goes.
		The maxChars parameter specifies the maximum number of characters that can be
		written to the destination buffer before stopping (including the terminating null).
	*/
	template <typename CharPointer>
	void writeWithCharLimit (const CharPointer& src, const int maxChars) noexcept
	{
		CharacterFunctions::copyWithCharLimit (*this, src, maxChars);
	}

	/** Compares this string with another one. */
	template <typename CharPointer>
	int compare (const CharPointer& other) const noexcept
	{
		return CharacterFunctions::compare (*this, other);
	}

	/** Compares this string with another one. */
	int compare (const CharPointer_ASCII& other) const noexcept
	{
		return strcmp (data, other.data);
	}

	/** Compares this string with another one, up to a specified number of characters. */
	template <typename CharPointer>
	int compareUpTo (const CharPointer& other, const int maxChars) const noexcept
	{
		return CharacterFunctions::compareUpTo (*this, other, maxChars);
	}

	/** Compares this string with another one, up to a specified number of characters. */
	int compareUpTo (const CharPointer_ASCII& other, const int maxChars) const noexcept
	{
		return strncmp (data, other.data, (size_t) maxChars);
	}

	/** Compares this string with another one. */
	template <typename CharPointer>
	int compareIgnoreCase (const CharPointer& other) const
	{
		return CharacterFunctions::compareIgnoreCase (*this, other);
	}

	int compareIgnoreCase (const CharPointer_ASCII& other) const
	{
	   #if JUCE_WINDOWS
		return stricmp (data, other.data);
	   #else
		return strcasecmp (data, other.data);
	   #endif
	}

	/** Compares this string with another one, up to a specified number of characters. */
	template <typename CharPointer>
	int compareIgnoreCaseUpTo (const CharPointer& other, const int maxChars) const noexcept
	{
		return CharacterFunctions::compareIgnoreCaseUpTo (*this, other, maxChars);
	}

	/** Returns the character index of a substring, or -1 if it isn't found. */
	template <typename CharPointer>
	int indexOf (const CharPointer& stringToFind) const noexcept
	{
		return CharacterFunctions::indexOf (*this, stringToFind);
	}

	/** Returns the character index of a unicode character, or -1 if it isn't found. */
	int indexOf (const juce_wchar charToFind) const noexcept
	{
		int i = 0;

		while (data[i] != 0)
		{
			if (data[i] == (char) charToFind)
				return i;

			++i;
		}

		return -1;
	}

	/** Returns the character index of a unicode character, or -1 if it isn't found. */
	int indexOf (const juce_wchar charToFind, const bool ignoreCase) const noexcept
	{
		return ignoreCase ? CharacterFunctions::indexOfCharIgnoreCase (*this, charToFind)
						  : CharacterFunctions::indexOfChar (*this, charToFind);
	}

	/** Returns true if the first character of this string is whitespace. */
	bool isWhitespace() const               { return CharacterFunctions::isWhitespace (*data) != 0; }
	/** Returns true if the first character of this string is a digit. */
	bool isDigit() const                    { return CharacterFunctions::isDigit (*data) != 0; }
	/** Returns true if the first character of this string is a letter. */
	bool isLetter() const                   { return CharacterFunctions::isLetter (*data) != 0; }
	/** Returns true if the first character of this string is a letter or digit. */
	bool isLetterOrDigit() const            { return CharacterFunctions::isLetterOrDigit (*data) != 0; }
	/** Returns true if the first character of this string is upper-case. */
	bool isUpperCase() const                { return CharacterFunctions::isUpperCase ((juce_wchar) (uint8) *data) != 0; }
	/** Returns true if the first character of this string is lower-case. */
	bool isLowerCase() const                { return CharacterFunctions::isLowerCase ((juce_wchar) (uint8) *data) != 0; }

	/** Returns an upper-case version of the first character of this string. */
	juce_wchar toUpperCase() const noexcept { return CharacterFunctions::toUpperCase ((juce_wchar) (uint8) *data); }
	/** Returns a lower-case version of the first character of this string. */
	juce_wchar toLowerCase() const noexcept { return CharacterFunctions::toLowerCase ((juce_wchar) (uint8) *data); }

	/** Parses this string as a 32-bit integer. */
	int getIntValue32() const noexcept      { return atoi (data); }

	/** Parses this string as a 64-bit integer. */
	int64 getIntValue64() const noexcept
	{
	   #if JUCE_LINUX || JUCE_ANDROID
		return atoll (data);
	   #elif JUCE_WINDOWS
		return _atoi64 (data);
	   #else
		return CharacterFunctions::getIntValue <int64, CharPointer_ASCII> (*this);
	   #endif
	}

	/** Parses this string as a floating point double. */
	double getDoubleValue() const noexcept  { return CharacterFunctions::getDoubleValue (*this); }

	/** Returns the first non-whitespace character in the string. */
	CharPointer_ASCII findEndOfWhitespace() const noexcept   { return CharacterFunctions::findEndOfWhitespace (*this); }

	/** Returns true if the given unicode character can be represented in this encoding. */
	static bool canRepresent (juce_wchar character) noexcept
	{
		return ((unsigned int) character) < (unsigned int) 128;
	}

	/** Returns true if this data contains a valid string in this encoding. */
	static bool isValidString (const CharType* dataToTest, int maxBytesToRead)
	{
		while (--maxBytesToRead >= 0)
		{
			if (((signed char) *dataToTest) <= 0)
				return *dataToTest == 0;

			++dataToTest;
		}

		return true;
	}

private:
	CharType* data;
};

#endif   // __JUCE_CHARPOINTER_ASCII_JUCEHEADER__

/*** End of inlined file: juce_CharPointer_ASCII.h ***/

#if JUCE_MSVC
 #pragma warning (pop)
#endif

class OutputStream;

/**
	The JUCE String class!

	Using a reference-counted internal representation, these strings are fast
	and efficient, and there are methods to do just about any operation you'll ever
	dream of.

	@see StringArray, StringPairArray
*/
class JUCE_API  String
{
public:

	/** Creates an empty string.
		@see empty
	*/
	String() noexcept;

	/** Creates a copy of another string. */
	String (const String& other) noexcept;

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	String (String&& other) noexcept;
   #endif

	/** Creates a string from a zero-terminated ascii text string.

		The string passed-in must not contain any characters with a value above 127, because
		these can't be converted to unicode without knowing the original encoding that was
		used to create the string. If you attempt to pass-in values above 127, you'll get an
		assertion.

		To create strings with extended characters from UTF-8, you should explicitly call
		String (CharPointer_UTF8 ("my utf8 string..")). It's *highly* recommended that you
		use UTF-8 with escape characters in your source code to represent extended characters,
		because there's no other way to represent unicode strings in a way that isn't dependent
		on the compiler, source code editor and platform.
	*/
	String (const char* text);

	/** Creates a string from a string of 8-bit ascii characters.

		The string passed-in must not contain any characters with a value above 127, because
		these can't be converted to unicode without knowing the original encoding that was
		used to create the string. If you attempt to pass-in values above 127, you'll get an
		assertion.

		To create strings with extended characters from UTF-8, you should explicitly call
		String (CharPointer_UTF8 ("my utf8 string..")). It's *highly* recommended that you
		use UTF-8 with escape characters in your source code to represent extended characters,
		because there's no other way to represent unicode strings in a way that isn't dependent
		on the compiler, source code editor and platform.

		This will use up the the first maxChars characters of the string (or less if the string
		is actually shorter).
	*/
	String (const char* text, size_t maxChars);

	/** Creates a string from a whcar_t character string.
		Depending on the platform, this may be treated as either UTF-32 or UTF-16.
	*/
	String (const wchar_t* text);

	/** Creates a string from a whcar_t character string.
		Depending on the platform, this may be treated as either UTF-32 or UTF-16.
	*/
	String (const wchar_t* text, size_t maxChars);

	/** Creates a string from a UTF-8 character string */
	String (const CharPointer_UTF8& text);

	/** Creates a string from a UTF-8 character string */
	String (const CharPointer_UTF8& text, size_t maxChars);

	/** Creates a string from a UTF-8 character string */
	String (const CharPointer_UTF8& start, const CharPointer_UTF8& end);

	/** Creates a string from a UTF-16 character string */
	String (const CharPointer_UTF16& text);

	/** Creates a string from a UTF-16 character string */
	String (const CharPointer_UTF16& text, size_t maxChars);

	/** Creates a string from a UTF-16 character string */
	String (const CharPointer_UTF16& start, const CharPointer_UTF16& end);

	/** Creates a string from a UTF-32 character string */
	String (const CharPointer_UTF32& text);

	/** Creates a string from a UTF-32 character string */
	String (const CharPointer_UTF32& text, size_t maxChars);

	/** Creates a string from a UTF-32 character string */
	String (const CharPointer_UTF32& start, const CharPointer_UTF32& end);

	/** Creates a string from an ASCII character string */
	String (const CharPointer_ASCII& text);

	/** Creates a string from a single character. */
	static String charToString (juce_wchar character);

	/** Destructor. */
	~String() noexcept;

	/** This is an empty string that can be used whenever one is needed.

		It's better to use this than String() because it explains what's going on
		and is more efficient.
	*/
	static const String empty;

	/** This is the character encoding type used internally to store the string.

		By setting the value of JUCE_STRING_UTF_TYPE to 8, 16, or 32, you can change the
		internal storage format of the String class. UTF-8 uses the least space (if your strings
		contain few extended characters), but call operator[] involves iterating the string to find
		the required index. UTF-32 provides instant random access to its characters, but uses 4 bytes
		per character to store them. UTF-16 uses more space than UTF-8 and is also slow to index,
		but is the native wchar_t format used in Windows.

		It doesn't matter too much which format you pick, because the toUTF8(), toUTF16() and
		toUTF32() methods let you access the string's content in any of the other formats.
	*/
   #if (JUCE_STRING_UTF_TYPE == 32)
	typedef CharPointer_UTF32 CharPointerType;
   #elif (JUCE_STRING_UTF_TYPE == 16)
	typedef CharPointer_UTF16 CharPointerType;
   #elif (JUCE_STRING_UTF_TYPE == 8)
	typedef CharPointer_UTF8  CharPointerType;
   #else
	#error "You must set the value of JUCE_STRING_UTF_TYPE to be either 8, 16, or 32!"
   #endif

	/** Generates a probably-unique 32-bit hashcode from this string. */
	int hashCode() const noexcept;

	/** Generates a probably-unique 64-bit hashcode from this string. */
	int64 hashCode64() const noexcept;

	/** Returns the number of characters in the string. */
	int length() const noexcept;

	// Assignment and concatenation operators..

	/** Replaces this string's contents with another string. */
	String& operator= (const String& other) noexcept;

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	String& operator= (String&& other) noexcept;
   #endif

	/** Appends another string at the end of this one. */
	String& operator+= (const String& stringToAppend);
	/** Appends another string at the end of this one. */
	String& operator+= (const char* textToAppend);
	/** Appends another string at the end of this one. */
	String& operator+= (const wchar_t* textToAppend);
	/** Appends a decimal number at the end of this string. */
	String& operator+= (int numberToAppend);
	/** Appends a character at the end of this string. */
	String& operator+= (char characterToAppend);
	/** Appends a character at the end of this string. */
	String& operator+= (wchar_t characterToAppend);
   #if ! JUCE_NATIVE_WCHAR_IS_UTF32
	/** Appends a character at the end of this string. */
	String& operator+= (juce_wchar characterToAppend);
   #endif

	/** Appends a string to the end of this one.

		@param textToAppend     the string to add
		@param maxCharsToTake   the maximum number of characters to take from the string passed in
	*/
	void append (const String& textToAppend, size_t maxCharsToTake);

	/** Appends a string to the end of this one.

		@param textToAppend     the string to add
		@param maxCharsToTake   the maximum number of characters to take from the string passed in
	*/
	template <class CharPointer>
	void appendCharPointer (const CharPointer& textToAppend, size_t maxCharsToTake)
	{
		if (textToAppend.getAddress() != nullptr)
		{
			size_t extraBytesNeeded = 0;
			size_t numChars = 0;

			for (CharPointer t (textToAppend); numChars < maxCharsToTake && ! t.isEmpty();)
			{
				extraBytesNeeded += CharPointerType::getBytesRequiredFor (t.getAndAdvance());
				++numChars;
			}

			if (numChars > 0)
			{
				const size_t byteOffsetOfNull = getByteOffsetOfEnd();

				preallocateBytes (byteOffsetOfNull + extraBytesNeeded);
				CharPointerType (addBytesToPointer (text.getAddress(), (int) byteOffsetOfNull)).writeWithCharLimit (textToAppend, (int) (numChars + 1));
			}
		}
	}

	/** Appends a string to the end of this one. */
	template <class CharPointer>
	void appendCharPointer (const CharPointer& textToAppend)
	{
		if (textToAppend.getAddress() != nullptr)
		{
			size_t extraBytesNeeded = 0;

			for (CharPointer t (textToAppend); ! t.isEmpty();)
				extraBytesNeeded += CharPointerType::getBytesRequiredFor (t.getAndAdvance());

			if (extraBytesNeeded > 0)
			{
				const size_t byteOffsetOfNull = getByteOffsetOfEnd();

				preallocateBytes (byteOffsetOfNull + extraBytesNeeded);
				CharPointerType (addBytesToPointer (text.getAddress(), (int) byteOffsetOfNull)).writeAll (textToAppend);
			}
		}
	}

	// Comparison methods..

	/** Returns true if the string contains no characters.
		Note that there's also an isNotEmpty() method to help write readable code.
		@see containsNonWhitespaceChars()
	*/
	inline bool isEmpty() const noexcept                    { return text[0] == 0; }

	/** Returns true if the string contains at least one character.
		Note that there's also an isEmpty() method to help write readable code.
		@see containsNonWhitespaceChars()
	*/
	inline bool isNotEmpty() const noexcept                 { return text[0] != 0; }

	/** Case-insensitive comparison with another string. */
	bool equalsIgnoreCase (const String& other) const noexcept;

	/** Case-insensitive comparison with another string. */
	bool equalsIgnoreCase (const wchar_t* other) const noexcept;

	/** Case-insensitive comparison with another string. */
	bool equalsIgnoreCase (const char* other) const noexcept;

	/** Case-sensitive comparison with another string.
		@returns     0 if the two strings are identical; negative if this string comes before
					 the other one alphabetically, or positive if it comes after it.
	*/
	int compare (const String& other) const noexcept;

	/** Case-sensitive comparison with another string.
		@returns     0 if the two strings are identical; negative if this string comes before
					 the other one alphabetically, or positive if it comes after it.
	*/
	int compare (const char* other) const noexcept;

	/** Case-sensitive comparison with another string.
		@returns     0 if the two strings are identical; negative if this string comes before
					 the other one alphabetically, or positive if it comes after it.
	*/
	int compare (const wchar_t* other) const noexcept;

	/** Case-insensitive comparison with another string.
		@returns     0 if the two strings are identical; negative if this string comes before
					 the other one alphabetically, or positive if it comes after it.
	*/
	int compareIgnoreCase (const String& other) const noexcept;

	/** Lexicographic comparison with another string.

		The comparison used here is case-insensitive and ignores leading non-alphanumeric
		characters, making it good for sorting human-readable strings.

		@returns     0 if the two strings are identical; negative if this string comes before
					 the other one alphabetically, or positive if it comes after it.
	*/
	int compareLexicographically (const String& other) const noexcept;

	/** Tests whether the string begins with another string.
		If the parameter is an empty string, this will always return true.
		Uses a case-sensitive comparison.
	*/
	bool startsWith (const String& text) const noexcept;

	/** Tests whether the string begins with a particular character.
		If the character is 0, this will always return false.
		Uses a case-sensitive comparison.
	*/
	bool startsWithChar (juce_wchar character) const noexcept;

	/** Tests whether the string begins with another string.
		If the parameter is an empty string, this will always return true.
		Uses a case-insensitive comparison.
	*/
	bool startsWithIgnoreCase (const String& text) const noexcept;

	/** Tests whether the string ends with another string.
		If the parameter is an empty string, this will always return true.
		Uses a case-sensitive comparison.
	*/
	bool endsWith (const String& text) const noexcept;

	/** Tests whether the string ends with a particular character.
		If the character is 0, this will always return false.
		Uses a case-sensitive comparison.
	*/
	bool endsWithChar (juce_wchar character) const noexcept;

	/** Tests whether the string ends with another string.
		If the parameter is an empty string, this will always return true.
		Uses a case-insensitive comparison.
	*/
	bool endsWithIgnoreCase (const String& text) const noexcept;

	/** Tests whether the string contains another substring.
		If the parameter is an empty string, this will always return true.
		Uses a case-sensitive comparison.
	*/
	bool contains (const String& text) const noexcept;

	/** Tests whether the string contains a particular character.
		Uses a case-sensitive comparison.
	*/
	bool containsChar (juce_wchar character) const noexcept;

	/** Tests whether the string contains another substring.
		Uses a case-insensitive comparison.
	*/
	bool containsIgnoreCase (const String& text) const noexcept;

	/** Tests whether the string contains another substring as a distict word.

		@returns    true if the string contains this word, surrounded by
					non-alphanumeric characters
		@see indexOfWholeWord, containsWholeWordIgnoreCase
	*/
	bool containsWholeWord (const String& wordToLookFor) const noexcept;

	/** Tests whether the string contains another substring as a distict word.

		@returns    true if the string contains this word, surrounded by
					non-alphanumeric characters
		@see indexOfWholeWordIgnoreCase, containsWholeWord
	*/
	bool containsWholeWordIgnoreCase (const String& wordToLookFor) const noexcept;

	/** Finds an instance of another substring if it exists as a distict word.

		@returns    if the string contains this word, surrounded by non-alphanumeric characters,
					then this will return the index of the start of the substring. If it isn't
					found, then it will return -1
		@see indexOfWholeWordIgnoreCase, containsWholeWord
	*/
	int indexOfWholeWord (const String& wordToLookFor) const noexcept;

	/** Finds an instance of another substring if it exists as a distict word.

		@returns    if the string contains this word, surrounded by non-alphanumeric characters,
					then this will return the index of the start of the substring. If it isn't
					found, then it will return -1
		@see indexOfWholeWord, containsWholeWordIgnoreCase
	*/
	int indexOfWholeWordIgnoreCase (const String& wordToLookFor) const noexcept;

	/** Looks for any of a set of characters in the string.
		Uses a case-sensitive comparison.

		@returns    true if the string contains any of the characters from
					the string that is passed in.
	*/
	bool containsAnyOf (const String& charactersItMightContain) const noexcept;

	/** Looks for a set of characters in the string.
		Uses a case-sensitive comparison.

		@returns    Returns false if any of the characters in this string do not occur in
					the parameter string. If this string is empty, the return value will
					always be true.
	*/
	bool containsOnly (const String& charactersItMightContain) const noexcept;

	/** Returns true if this string contains any non-whitespace characters.

		This will return false if the string contains only whitespace characters, or
		if it's empty.

		It is equivalent to calling "myString.trim().isNotEmpty()".
	*/
	bool containsNonWhitespaceChars() const noexcept;

	/** Returns true if the string matches this simple wildcard expression.

		So for example String ("abcdef").matchesWildcard ("*DEF", true) would return true.

		This isn't a full-blown regex though! The only wildcard characters supported
		are "*" and "?". It's mainly intended for filename pattern matching.
	*/
	bool matchesWildcard (const String& wildcard, bool ignoreCase) const noexcept;

	// Substring location methods..

	/** Searches for a character inside this string.
		Uses a case-sensitive comparison.
		@returns    the index of the first occurrence of the character in this
					string, or -1 if it's not found.
	*/
	int indexOfChar (juce_wchar characterToLookFor) const noexcept;

	/** Searches for a character inside this string.
		Uses a case-sensitive comparison.
		@param startIndex           the index from which the search should proceed
		@param characterToLookFor   the character to look for
		@returns            the index of the first occurrence of the character in this
							string, or -1 if it's not found.
	*/
	int indexOfChar (int startIndex, juce_wchar characterToLookFor) const noexcept;

	/** Returns the index of the first character that matches one of the characters
		passed-in to this method.

		This scans the string, beginning from the startIndex supplied, and if it finds
		a character that appears in the string charactersToLookFor, it returns its index.

		If none of these characters are found, it returns -1.

		If ignoreCase is true, the comparison will be case-insensitive.

		@see indexOfChar, lastIndexOfAnyOf
	*/
	int indexOfAnyOf (const String& charactersToLookFor,
					  int startIndex = 0,
					  bool ignoreCase = false) const noexcept;

	/** Searches for a substring within this string.
		Uses a case-sensitive comparison.
		@returns    the index of the first occurrence of this substring, or -1 if it's not found.
					If textToLookFor is an empty string, this will always return 0.
	*/
	int indexOf (const String& textToLookFor) const noexcept;

	/** Searches for a substring within this string.
		Uses a case-sensitive comparison.
		@param startIndex       the index from which the search should proceed
		@param textToLookFor    the string to search for
		@returns                the index of the first occurrence of this substring, or -1 if it's not found.
								If textToLookFor is an empty string, this will always return -1.
	*/
	int indexOf (int startIndex, const String& textToLookFor) const noexcept;

	/** Searches for a substring within this string.
		Uses a case-insensitive comparison.
		@returns    the index of the first occurrence of this substring, or -1 if it's not found.
					If textToLookFor is an empty string, this will always return 0.
	*/
	int indexOfIgnoreCase (const String& textToLookFor) const noexcept;

	/** Searches for a substring within this string.
		Uses a case-insensitive comparison.
		@param startIndex       the index from which the search should proceed
		@param textToLookFor    the string to search for
		@returns                the index of the first occurrence of this substring, or -1 if it's not found.
								If textToLookFor is an empty string, this will always return -1.
	*/
	int indexOfIgnoreCase (int startIndex, const String& textToLookFor) const noexcept;

	/** Searches for a character inside this string (working backwards from the end of the string).
		Uses a case-sensitive comparison.
		@returns    the index of the last occurrence of the character in this string, or -1 if it's not found.
	*/
	int lastIndexOfChar (juce_wchar character) const noexcept;

	/** Searches for a substring inside this string (working backwards from the end of the string).
		Uses a case-sensitive comparison.
		@returns    the index of the start of the last occurrence of the substring within this string,
					or -1 if it's not found. If textToLookFor is an empty string, this will always return -1.
	*/
	int lastIndexOf (const String& textToLookFor) const noexcept;

	/** Searches for a substring inside this string (working backwards from the end of the string).
		Uses a case-insensitive comparison.
		@returns    the index of the start of the last occurrence of the substring within this string, or -1
					if it's not found. If textToLookFor is an empty string, this will always return -1.
	*/
	int lastIndexOfIgnoreCase (const String& textToLookFor) const noexcept;

	/** Returns the index of the last character in this string that matches one of the
		characters passed-in to this method.

		This scans the string backwards, starting from its end, and if it finds
		a character that appears in the string charactersToLookFor, it returns its index.

		If none of these characters are found, it returns -1.

		If ignoreCase is true, the comparison will be case-insensitive.

		@see lastIndexOf, indexOfAnyOf
	*/
	int lastIndexOfAnyOf (const String& charactersToLookFor,
						  bool ignoreCase = false) const noexcept;

	// Substring extraction and manipulation methods..

	/** Returns the character at this index in the string.
		In a release build, no checks are made to see if the index is within a valid range, so be
		careful! In a debug build, the index is checked and an assertion fires if it's out-of-range.

		Also beware that depending on the encoding format that the string is using internally, this
		method may execute in either O(1) or O(n) time, so be careful when using it in your algorithms.
		If you're scanning through a string to inspect its characters, you should never use this operator
		for random access, it's far more efficient to call getCharPointer() to return a pointer, and
		then to use that to iterate the string.
		@see getCharPointer
	*/
	const juce_wchar operator[] (int index) const noexcept;

	/** Returns the final character of the string.
		If the string is empty this will return 0.
	*/
	juce_wchar getLastCharacter() const noexcept;

	/** Returns a subsection of the string.

		If the range specified is beyond the limits of the string, as much as
		possible is returned.

		@param startIndex   the index of the start of the substring needed
		@param endIndex     all characters from startIndex up to (but not including)
							this index are returned
		@see fromFirstOccurrenceOf, dropLastCharacters, getLastCharacters, upToFirstOccurrenceOf
	*/
	String substring (int startIndex, int endIndex) const;

	/** Returns a section of the string, starting from a given position.

		@param startIndex   the first character to include. If this is beyond the end
							of the string, an empty string is returned. If it is zero or
							less, the whole string is returned.
		@returns            the substring from startIndex up to the end of the string
		@see dropLastCharacters, getLastCharacters, fromFirstOccurrenceOf, upToFirstOccurrenceOf, fromLastOccurrenceOf
	*/
	String substring (int startIndex) const;

	/** Returns a version of this string with a number of characters removed
		from the end.

		@param numberToDrop     the number of characters to drop from the end of the
								string. If this is greater than the length of the string,
								an empty string will be returned. If zero or less, the
								original string will be returned.
		@see substring, fromFirstOccurrenceOf, upToFirstOccurrenceOf, fromLastOccurrenceOf, getLastCharacter
	*/
	String dropLastCharacters (int numberToDrop) const;

	/** Returns a number of characters from the end of the string.

		This returns the last numCharacters characters from the end of the string. If the
		string is shorter than numCharacters, the whole string is returned.

		@see substring, dropLastCharacters, getLastCharacter
	*/
	String getLastCharacters (int numCharacters) const;

	/** Returns a section of the string starting from a given substring.

		This will search for the first occurrence of the given substring, and
		return the section of the string starting from the point where this is
		found (optionally not including the substring itself).

		e.g. for the string "123456", fromFirstOccurrenceOf ("34", true) would return "3456", and
									  fromFirstOccurrenceOf ("34", false) would return "56".

		If the substring isn't found, the method will return an empty string.

		If ignoreCase is true, the comparison will be case-insensitive.

		@see upToFirstOccurrenceOf, fromLastOccurrenceOf
	*/
	String fromFirstOccurrenceOf (const String& substringToStartFrom,
								  bool includeSubStringInResult,
										bool ignoreCase) const;

	/** Returns a section of the string starting from the last occurrence of a given substring.

		Similar to fromFirstOccurrenceOf(), but using the last occurrence of the substring, and
		unlike fromFirstOccurrenceOf(), if the substring isn't found, this method will
		return the whole of the original string.

		@see fromFirstOccurrenceOf, upToLastOccurrenceOf
	*/
	String fromLastOccurrenceOf (const String& substringToFind,
								 bool includeSubStringInResult,
								 bool ignoreCase) const;

	/** Returns the start of this string, up to the first occurrence of a substring.

		This will search for the first occurrence of a given substring, and then
		return a copy of the string, up to the position of this substring,
		optionally including or excluding the substring itself in the result.

		e.g. for the string "123456", upTo ("34", false) would return "12", and
									  upTo ("34", true) would return "1234".

		If the substring isn't found, this will return the whole of the original string.

		@see upToLastOccurrenceOf, fromFirstOccurrenceOf
	*/
	String upToFirstOccurrenceOf (const String& substringToEndWith,
								  bool includeSubStringInResult,
								  bool ignoreCase) const;

	/** Returns the start of this string, up to the last occurrence of a substring.

		Similar to upToFirstOccurrenceOf(), but this finds the last occurrence rather than the first.
		If the substring isn't found, this will return the whole of the original string.

		@see upToFirstOccurrenceOf, fromFirstOccurrenceOf
	*/
	String upToLastOccurrenceOf (const String& substringToFind,
								 bool includeSubStringInResult,
								 bool ignoreCase) const;

	/** Returns a copy of this string with any whitespace characters removed from the start and end. */
	String trim() const;

	/** Returns a copy of this string with any whitespace characters removed from the start. */
	String trimStart() const;

	/** Returns a copy of this string with any whitespace characters removed from the end. */
	String trimEnd() const;

	/** Returns a copy of this string, having removed a specified set of characters from its start.
		Characters are removed from the start of the string until it finds one that is not in the
		specified set, and then it stops.
		@param charactersToTrim     the set of characters to remove.
		@see trim, trimStart, trimCharactersAtEnd
	*/
	String trimCharactersAtStart (const String& charactersToTrim) const;

	/** Returns a copy of this string, having removed a specified set of characters from its end.
		Characters are removed from the end of the string until it finds one that is not in the
		specified set, and then it stops.
		@param charactersToTrim     the set of characters to remove.
		@see trim, trimEnd, trimCharactersAtStart
	*/
	String trimCharactersAtEnd (const String& charactersToTrim) const;

	/** Returns an upper-case version of this string. */
	String toUpperCase() const;

	/** Returns an lower-case version of this string. */
	String toLowerCase() const;

	/** Replaces a sub-section of the string with another string.

		This will return a copy of this string, with a set of characters
		from startIndex to startIndex + numCharsToReplace removed, and with
		a new string inserted in their place.

		Note that this is a const method, and won't alter the string itself.

		@param startIndex               the first character to remove. If this is beyond the bounds of the string,
										it will be constrained to a valid range.
		@param numCharactersToReplace   the number of characters to remove. If zero or less, no
										characters will be taken out.
		@param stringToInsert           the new string to insert at startIndex after the characters have been
										removed.
	*/
	String replaceSection (int startIndex,
						   int numCharactersToReplace,
						   const String& stringToInsert) const;

	/** Replaces all occurrences of a substring with another string.

		Returns a copy of this string, with any occurrences of stringToReplace
		swapped for stringToInsertInstead.

		Note that this is a const method, and won't alter the string itself.
	*/
	String replace (const String& stringToReplace,
					const String& stringToInsertInstead,
					bool ignoreCase = false) const;

	/** Returns a string with all occurrences of a character replaced with a different one. */
	String replaceCharacter (juce_wchar characterToReplace,
							 juce_wchar characterToInsertInstead) const;

	/** Replaces a set of characters with another set.

		Returns a string in which each character from charactersToReplace has been replaced
		by the character at the equivalent position in newCharacters (so the two strings
		passed in must be the same length).

		e.g. replaceCharacters ("abc", "def") replaces 'a' with 'd', 'b' with 'e', etc.

		Note that this is a const method, and won't affect the string itself.
	*/
	String replaceCharacters (const String& charactersToReplace,
							  const String& charactersToInsertInstead) const;

	/** Returns a version of this string that only retains a fixed set of characters.

		This will return a copy of this string, omitting any characters which are not
		found in the string passed-in.

		e.g. for "1122334455", retainCharacters ("432") would return "223344"

		Note that this is a const method, and won't alter the string itself.
	*/
	String retainCharacters (const String& charactersToRetain) const;

	/** Returns a version of this string with a set of characters removed.

		This will return a copy of this string, omitting any characters which are
		found in the string passed-in.

		e.g. for "1122334455", removeCharacters ("432") would return "1155"

		Note that this is a const method, and won't alter the string itself.
	*/
	String removeCharacters (const String& charactersToRemove) const;

	/** Returns a section from the start of the string that only contains a certain set of characters.

		This returns the leftmost section of the string, up to (and not including) the
		first character that doesn't appear in the string passed in.
	*/
	String initialSectionContainingOnly (const String& permittedCharacters) const;

	/** Returns a section from the start of the string that only contains a certain set of characters.

		This returns the leftmost section of the string, up to (and not including) the
		first character that occurs in the string passed in. (If none of the specified
		characters are found in the string, the return value will just be the original string).
	*/
	String initialSectionNotContaining (const String& charactersToStopAt) const;

	/** Checks whether the string might be in quotation marks.

		@returns    true if the string begins with a quote character (either a double or single quote).
					It is also true if there is whitespace before the quote, but it doesn't check the end of the string.
		@see unquoted, quoted
	*/
	bool isQuotedString() const;

	/** Removes quotation marks from around the string, (if there are any).

		Returns a copy of this string with any quotes removed from its ends. Quotes that aren't
		at the ends of the string are not affected. If there aren't any quotes, the original string
		is returned.

		Note that this is a const method, and won't alter the string itself.

		@see isQuotedString, quoted
	*/
	String unquoted() const;

	/** Adds quotation marks around a string.

		This will return a copy of the string with a quote at the start and end, (but won't
		add the quote if there's already one there, so it's safe to call this on strings that
		may already have quotes around them).

		Note that this is a const method, and won't alter the string itself.

		@param quoteCharacter   the character to add at the start and end
		@see isQuotedString, unquoted
	*/
	String quoted (juce_wchar quoteCharacter = '"') const;

	/** Creates a string which is a version of a string repeated and joined together.

		@param stringToRepeat         the string to repeat
		@param numberOfTimesToRepeat  how many times to repeat it
	*/
	static String repeatedString (const String& stringToRepeat,
								  int numberOfTimesToRepeat);

	/** Returns a copy of this string with the specified character repeatedly added to its
		beginning until the total length is at least the minimum length specified.
	*/
	String paddedLeft (juce_wchar padCharacter, int minimumLength) const;

	/** Returns a copy of this string with the specified character repeatedly added to its
		end until the total length is at least the minimum length specified.
	*/
	String paddedRight (juce_wchar padCharacter, int minimumLength) const;

	/** Creates a string from data in an unknown format.

		This looks at some binary data and tries to guess whether it's Unicode
		or 8-bit characters, then returns a string that represents it correctly.

		Should be able to handle Unicode endianness correctly, by looking at
		the first two bytes.
	*/
	static String createStringFromData (const void* data, int size);

	/** Creates a String from a printf-style parameter list.

		I don't like this method. I don't use it myself, and I recommend avoiding it and
		using the operator<< methods or pretty much anything else instead. It's only provided
		here because of the popular unrest that was stirred-up when I tried to remove it...

		If you're really determined to use it, at least make sure that you never, ever,
		pass any String objects to it as parameters. And bear in mind that internally, depending
		on the platform, it may be using wchar_t or char character types, so that even string
		literals can't be safely used as parameters if you're writing portable code.
	*/
	static String formatted (const String formatString, ... );

	// Numeric conversions..

	/** Creates a string containing this signed 32-bit integer as a decimal number.
		@see getIntValue, getFloatValue, getDoubleValue, toHexString
	*/
	explicit String (int decimalInteger);

	/** Creates a string containing this unsigned 32-bit integer as a decimal number.
		@see getIntValue, getFloatValue, getDoubleValue, toHexString
	*/
	explicit String (unsigned int decimalInteger);

	/** Creates a string containing this signed 16-bit integer as a decimal number.
		@see getIntValue, getFloatValue, getDoubleValue, toHexString
	*/
	explicit String (short decimalInteger);

	/** Creates a string containing this unsigned 16-bit integer as a decimal number.
		@see getIntValue, getFloatValue, getDoubleValue, toHexString
	*/
	explicit String (unsigned short decimalInteger);

	/** Creates a string containing this signed 64-bit integer as a decimal number.
		@see getLargeIntValue, getFloatValue, getDoubleValue, toHexString
	*/
	explicit String (int64 largeIntegerValue);

	/** Creates a string containing this unsigned 64-bit integer as a decimal number.
		@see getLargeIntValue, getFloatValue, getDoubleValue, toHexString
	*/
	explicit String (uint64 largeIntegerValue);

	/** Creates a string representing this floating-point number.
		@param floatValue               the value to convert to a string
		@see getDoubleValue, getIntValue
	*/
	explicit String (float floatValue);

	/** Creates a string representing this floating-point number.
		@param doubleValue              the value to convert to a string
		@see getFloatValue, getIntValue
	*/
	explicit String (double doubleValue);

	/** Creates a string representing this floating-point number.
		@param floatValue               the value to convert to a string
		@param numberOfDecimalPlaces    if this is > 0, it will format the number using that many
										decimal places, and will not use exponent notation. If 0 or
										less, it will use exponent notation if necessary.
		@see getDoubleValue, getIntValue
	*/
	String (float floatValue, int numberOfDecimalPlaces);

	/** Creates a string representing this floating-point number.
		@param doubleValue              the value to convert to a string
		@param numberOfDecimalPlaces    if this is > 0, it will format the number using that many
										decimal places, and will not use exponent notation. If 0 or
										less, it will use exponent notation if necessary.
		@see getFloatValue, getIntValue
	*/
	String (double doubleValue, int numberOfDecimalPlaces);

	/** Reads the value of the string as a decimal number (up to 32 bits in size).

		@returns the value of the string as a 32 bit signed base-10 integer.
		@see getTrailingIntValue, getHexValue32, getHexValue64
	*/
	int getIntValue() const noexcept;

	/** Reads the value of the string as a decimal number (up to 64 bits in size).

		@returns the value of the string as a 64 bit signed base-10 integer.
	*/
	int64 getLargeIntValue() const noexcept;

	/** Parses a decimal number from the end of the string.

		This will look for a value at the end of the string.
		e.g. for "321 xyz654" it will return 654; for "2 3 4" it'll return 4.

		Negative numbers are not handled, so "xyz-5" returns 5.

		@see getIntValue
	*/
	int getTrailingIntValue() const noexcept;

	/** Parses this string as a floating point number.

		@returns    the value of the string as a 32-bit floating point value.
		@see getDoubleValue
	*/
	float getFloatValue() const noexcept;

	/** Parses this string as a floating point number.

		@returns    the value of the string as a 64-bit floating point value.
		@see getFloatValue
	*/
	double getDoubleValue() const noexcept;

	/** Parses the string as a hexadecimal number.

		Non-hexadecimal characters in the string are ignored.

		If the string contains too many characters, then the lowest significant
		digits are returned, e.g. "ffff12345678" would produce 0x12345678.

		@returns    a 32-bit number which is the value of the string in hex.
	*/
	int getHexValue32() const noexcept;

	/** Parses the string as a hexadecimal number.

		Non-hexadecimal characters in the string are ignored.

		If the string contains too many characters, then the lowest significant
		digits are returned, e.g. "ffff1234567812345678" would produce 0x1234567812345678.

		@returns    a 64-bit number which is the value of the string in hex.
	*/
	int64 getHexValue64() const noexcept;

	/** Creates a string representing this 32-bit value in hexadecimal. */
	static String toHexString (int number);

	/** Creates a string representing this 64-bit value in hexadecimal. */
	static String toHexString (int64 number);

	/** Creates a string representing this 16-bit value in hexadecimal. */
	static String toHexString (short number);

	/** Creates a string containing a hex dump of a block of binary data.

		@param data         the binary data to use as input
		@param size         how many bytes of data to use
		@param groupSize    how many bytes are grouped together before inserting a
							space into the output. e.g. group size 0 has no spaces,
							group size 1 looks like: "be a1 c2 ff", group size 2 looks
							like "bea1 c2ff".
	*/
	static String toHexString (const void* data, int size, int groupSize = 1);

	/** Returns the character pointer currently being used to store this string.

		Because it returns a reference to the string's internal data, the pointer
		that is returned must not be stored anywhere, as it can be deleted whenever the
		string changes.
	*/
	inline const CharPointerType& getCharPointer() const noexcept    { return text; }

	/** Returns a pointer to a UTF-8 version of this string.

		Because it returns a reference to the string's internal data, the pointer
		that is returned must not be stored anywhere, as it can be deleted whenever the
		string changes.

		To find out how many bytes you need to store this string as UTF-8, you can call
		CharPointer_UTF8::getBytesRequiredFor (myString.getCharPointer())

		@see getCharPointer, toUTF16, toUTF32
	*/
	CharPointer_UTF8 toUTF8() const;

	/** Returns a pointer to a UTF-32 version of this string.

		Because it returns a reference to the string's internal data, the pointer
		that is returned must not be stored anywhere, as it can be deleted whenever the
		string changes.

		To find out how many bytes you need to store this string as UTF-16, you can call
		CharPointer_UTF16::getBytesRequiredFor (myString.getCharPointer())

		@see getCharPointer, toUTF8, toUTF32
	*/
	CharPointer_UTF16 toUTF16() const;

	/** Returns a pointer to a UTF-32 version of this string.

		Because it returns a reference to the string's internal data, the pointer
		that is returned must not be stored anywhere, as it can be deleted whenever the
		string changes.

		@see getCharPointer, toUTF8, toUTF16
	*/
	CharPointer_UTF32 toUTF32() const;

	/** Returns a pointer to a wchar_t version of this string.

		Because it returns a reference to the string's internal data, the pointer
		that is returned must not be stored anywhere, as it can be deleted whenever the
		string changes.

		Bear in mind that the wchar_t type is different on different platforms, so on
		Windows, this will be equivalent to calling toUTF16(), on unix it'll be the same
		as calling toUTF32(), etc.

		@see getCharPointer, toUTF8, toUTF16, toUTF32
	*/
	const wchar_t* toWideCharPointer() const;

	/** Creates a String from a UTF-8 encoded buffer.
		If the size is < 0, it'll keep reading until it hits a zero.
	*/
	static String fromUTF8 (const char* utf8buffer, int bufferSizeBytes = -1);

	/** Returns the number of bytes required to represent this string as UTF8.
		The number returned does NOT include the trailing zero.
		@see toUTF8, copyToUTF8
	*/
	int getNumBytesAsUTF8() const noexcept;

	/** Copies the string to a buffer as UTF-8 characters.

		Returns the number of bytes copied to the buffer, including the terminating null
		character.

		To find out how many bytes you need to store this string as UTF-8, you can call
		CharPointer_UTF8::getBytesRequiredFor (myString.getCharPointer())

		@param destBuffer       the place to copy it to; if this is a null pointer, the method just
								returns the number of bytes required (including the terminating null character).
		@param maxBufferSizeBytes  the size of the destination buffer, in bytes. If the string won't fit, it'll
								put in as many as it can while still allowing for a terminating null char at the
								end, and will return the number of bytes that were actually used.
		@see CharPointer_UTF8::writeWithDestByteLimit
	*/
	int copyToUTF8 (CharPointer_UTF8::CharType* destBuffer, int maxBufferSizeBytes) const noexcept;

	/** Copies the string to a buffer as UTF-16 characters.

		Returns the number of bytes copied to the buffer, including the terminating null
		character.

		To find out how many bytes you need to store this string as UTF-16, you can call
		CharPointer_UTF16::getBytesRequiredFor (myString.getCharPointer())

		@param destBuffer       the place to copy it to; if this is a null pointer, the method just
								returns the number of bytes required (including the terminating null character).
		@param maxBufferSizeBytes  the size of the destination buffer, in bytes. If the string won't fit, it'll
								put in as many as it can while still allowing for a terminating null char at the
								end, and will return the number of bytes that were actually used.
		@see CharPointer_UTF16::writeWithDestByteLimit
	*/
	int copyToUTF16 (CharPointer_UTF16::CharType* destBuffer, int maxBufferSizeBytes) const noexcept;

	/** Copies the string to a buffer as UTF-16 characters.

		Returns the number of bytes copied to the buffer, including the terminating null
		character.

		To find out how many bytes you need to store this string as UTF-32, you can call
		CharPointer_UTF32::getBytesRequiredFor (myString.getCharPointer())

		@param destBuffer       the place to copy it to; if this is a null pointer, the method just
								returns the number of bytes required (including the terminating null character).
		@param maxBufferSizeBytes  the size of the destination buffer, in bytes. If the string won't fit, it'll
								put in as many as it can while still allowing for a terminating null char at the
								end, and will return the number of bytes that were actually used.
		@see CharPointer_UTF32::writeWithDestByteLimit
	*/
	int copyToUTF32 (CharPointer_UTF32::CharType* destBuffer, int maxBufferSizeBytes) const noexcept;

	/** Increases the string's internally allocated storage.

		Although the string's contents won't be affected by this call, it will
		increase the amount of memory allocated internally for the string to grow into.

		If you're about to make a large number of calls to methods such
		as += or <<, it's more efficient to preallocate enough extra space
		beforehand, so that these methods won't have to keep resizing the string
		to append the extra characters.

		@param numBytesNeeded   the number of bytes to allocate storage for. If this
								value is less than the currently allocated size, it will
								have no effect.
	*/
	void preallocateBytes (size_t numBytesNeeded);

	/** Swaps the contents of this string with another one.
		This is a very fast operation, as no allocation or copying needs to be done.
	*/
	void swapWith (String& other) noexcept;

   #if JUCE_MAC || JUCE_IOS || DOXYGEN
	/** MAC ONLY - Creates a String from an OSX CFString. */
	static String fromCFString (CFStringRef cfString);

	/** MAC ONLY - Converts this string to a CFString.
		Remember that you must use CFRelease() to free the returned string when you're
		finished with it.
	*/
	CFStringRef toCFString() const;

	/** MAC ONLY - Returns a copy of this string in which any decomposed unicode characters have
		been converted to their precomposed equivalents. */
	String convertToPrecomposedUnicode() const;
   #endif

private:

	CharPointerType text;

	struct PreallocationBytes
	{
		explicit PreallocationBytes (size_t);
		size_t numBytes;
	};

	explicit String (const PreallocationBytes&); // This constructor preallocates a certain amount of memory
	void appendFixedLength (const char* text, int numExtraChars);
	size_t getByteOffsetOfEnd() const noexcept;
	JUCE_DEPRECATED (String (const String& stringToCopy, size_t charsToAllocate));

	// This private cast operator should prevent strings being accidentally cast
	// to bools (this is possible because the compiler can add an implicit cast
	// via a const char*)
	operator bool() const noexcept  { return false; }
};

/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (const char* string1,     const String& string2);
/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (const wchar_t* string1,  const String& string2);
/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (char string1,            const String& string2);
/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (wchar_t string1,         const String& string2);
#if ! JUCE_NATIVE_WCHAR_IS_UTF32
/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (juce_wchar string1,      const String& string2);
#endif

/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (String string1, const String& string2);
/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (String string1, const char* string2);
/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (String string1, const wchar_t* string2);
/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (String string1, char characterToAppend);
/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (String string1, wchar_t characterToAppend);
#if ! JUCE_NATIVE_WCHAR_IS_UTF32
/** Concatenates two strings. */
JUCE_API String JUCE_CALLTYPE operator+ (String string1, juce_wchar characterToAppend);
#endif

/** Appends a character at the end of a string. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, char characterToAppend);
/** Appends a character at the end of a string. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, wchar_t characterToAppend);
#if ! JUCE_NATIVE_WCHAR_IS_UTF32
/** Appends a character at the end of a string. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, juce_wchar characterToAppend);
#endif

/** Appends a string to the end of the first one. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, const char* string2);
/** Appends a string to the end of the first one. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, const wchar_t* string2);
/** Appends a string to the end of the first one. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, const String& string2);

/** Appends a decimal number at the end of a string. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, short number);
/** Appends a decimal number at the end of a string. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, int number);
/** Appends a decimal number at the end of a string. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, long number);
/** Appends a decimal number at the end of a string. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, float number);
/** Appends a decimal number at the end of a string. */
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, double number);

/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator== (const String& string1, const String& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator== (const String& string1, const char* string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator== (const String& string1, const wchar_t* string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator== (const String& string1, const CharPointer_UTF8& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator== (const String& string1, const CharPointer_UTF16& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator== (const String& string1, const CharPointer_UTF32& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator!= (const String& string1, const String& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator!= (const String& string1, const char* string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator!= (const String& string1, const wchar_t* string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator!= (const String& string1, const CharPointer_UTF8& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator!= (const String& string1, const CharPointer_UTF16& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator!= (const String& string1, const CharPointer_UTF32& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator>  (const String& string1, const String& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator<  (const String& string1, const String& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator>= (const String& string1, const String& string2) noexcept;
/** Case-sensitive comparison of two strings. */
JUCE_API bool JUCE_CALLTYPE operator<= (const String& string1, const String& string2) noexcept;

/** This operator allows you to write a juce String directly to std output streams.
	This is handy for writing strings to std::cout, std::cerr, etc.
*/
template <class traits>
std::basic_ostream <char, traits>& JUCE_CALLTYPE operator<< (std::basic_ostream <char, traits>& stream, const String& stringToWrite)
{
	return stream << stringToWrite.toUTF8().getAddress();
}

/** This operator allows you to write a juce String directly to std output streams.
	This is handy for writing strings to std::wcout, std::wcerr, etc.
*/
template <class traits>
std::basic_ostream <wchar_t, traits>& JUCE_CALLTYPE operator<< (std::basic_ostream <wchar_t, traits>& stream, const String& stringToWrite)
{
	return stream << stringToWrite.toWideCharPointer();
}

/** Writes a string to an OutputStream as UTF8. */
JUCE_API OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, const String& stringToWrite);

#endif   // __JUCE_STRING_JUCEHEADER__

/*** End of inlined file: juce_String.h ***/

/**
	Acts as an application-wide logging class.

	A subclass of Logger can be created and passed into the Logger::setCurrentLogger
	method and this will then be used by all calls to writeToLog.

	The logger class also contains methods for writing messages to the debugger's
	output stream.

	@see FileLogger
*/
class JUCE_API  Logger
{
public:

	/** Destructor. */
	virtual ~Logger();

	/** Sets the current logging class to use.

		Note that the object passed in won't be deleted when no longer needed.
		A null pointer can be passed-in to disable any logging.

		If deleteOldLogger is set to true, the existing logger will be
		deleted (if there is one).
	*/
	static void JUCE_CALLTYPE setCurrentLogger (Logger* newLogger,
												bool deleteOldLogger = false);

	/** Writes a string to the current logger.

		This will pass the string to the logger's logMessage() method if a logger
		has been set.

		@see logMessage
	*/
	static void JUCE_CALLTYPE writeToLog (const String& message);

	/** Writes a message to the standard error stream.

		This can be called directly, or by using the DBG() macro in
		juce_PlatformDefs.h (which will avoid calling the method in non-debug builds).
	*/
	static void JUCE_CALLTYPE outputDebugString (const String& text);

protected:

	Logger();

	/** This is overloaded by subclasses to implement custom logging behaviour.

		@see setCurrentLogger
	*/
	virtual void logMessage (const String& message) = 0;

private:
	static Logger* currentLogger;
};

#endif   // __JUCE_LOGGER_JUCEHEADER__

/*** End of inlined file: juce_Logger.h ***/


/*** Start of inlined file: juce_LeakedObjectDetector.h ***/
#ifndef __JUCE_LEAKEDOBJECTDETECTOR_JUCEHEADER__
#define __JUCE_LEAKEDOBJECTDETECTOR_JUCEHEADER__

/**
	Embedding an instance of this class inside another class can be used as a low-overhead
	way of detecting leaked instances.

	This class keeps an internal static count of the number of instances that are
	active, so that when the app is shutdown and the static destructors are called,
	it can check whether there are any left-over instances that may have been leaked.

	To use it, use the JUCE_LEAK_DETECTOR macro as a simple way to put one in your
	class declaration. Have a look through the juce codebase for examples, it's used
	in most of the classes.
*/
template <class OwnerClass>
class LeakedObjectDetector
{
public:

	LeakedObjectDetector() noexcept                                 { ++(getCounter().numObjects); }
	LeakedObjectDetector (const LeakedObjectDetector&) noexcept     { ++(getCounter().numObjects); }

	~LeakedObjectDetector()
	{
		if (--(getCounter().numObjects) < 0)
		{
			DBG ("*** Dangling pointer deletion! Class: " << getLeakedObjectClassName());

			/** If you hit this, then you've managed to delete more instances of this class than you've
				created.. That indicates that you're deleting some dangling pointers.

				Note that although this assertion will have been triggered during a destructor, it might
				not be this particular deletion that's at fault - the incorrect one may have happened
				at an earlier point in the program, and simply not been detected until now.

				Most errors like this are caused by using old-fashioned, non-RAII techniques for
				your object management. Tut, tut. Always, always use ScopedPointers, OwnedArrays,
				ReferenceCountedObjects, etc, and avoid the 'delete' operator at all costs!
			*/
			jassertfalse;
		}
	}

private:

	class LeakCounter
	{
	public:
		LeakCounter() noexcept {}

		~LeakCounter()
		{
			if (numObjects.value > 0)
			{
				DBG ("*** Leaked objects detected: " << numObjects.value << " instance(s) of class " << getLeakedObjectClassName());

				/** If you hit this, then you've leaked one or more objects of the type specified by
					the 'OwnerClass' template parameter - the name should have been printed by the line above.

					If you're leaking, it's probably because you're using old-fashioned, non-RAII techniques for
					your object management. Tut, tut. Always, always use ScopedPointers, OwnedArrays,
					ReferenceCountedObjects, etc, and avoid the 'delete' operator at all costs!
				*/
				jassertfalse;
			}
		}

		Atomic<int> numObjects;
	};

	static const char* getLeakedObjectClassName()
	{
		return OwnerClass::getLeakedObjectClassName();
	}

	static LeakCounter& getCounter() noexcept
	{
		static LeakCounter counter;
		return counter;
	}
};

#if DOXYGEN || ! defined (JUCE_LEAK_DETECTOR)
 #if (DOXYGEN || JUCE_CHECK_MEMORY_LEAKS)
  /** This macro lets you embed a leak-detecting object inside a class.

	  To use it, simply declare a JUCE_LEAK_DETECTOR(YourClassName) inside a private section
	  of the class declaration. E.g.

	  @code
	  class MyClass
	  {
	  public:
		  MyClass();
		  void blahBlah();

	  private:
		  JUCE_LEAK_DETECTOR (MyClass);
	  };@endcode

	  @see JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR, LeakedObjectDetector
  */
  #define JUCE_LEAK_DETECTOR(OwnerClass) \
		friend class juce::LeakedObjectDetector<OwnerClass>; \
		static const char* getLeakedObjectClassName() noexcept { return #OwnerClass; } \
		juce::LeakedObjectDetector<OwnerClass> JUCE_JOIN_MACRO (leakDetector, __LINE__);
 #else
  #define JUCE_LEAK_DETECTOR(OwnerClass)
 #endif
#endif

#endif   // __JUCE_LEAKEDOBJECTDETECTOR_JUCEHEADER__

/*** End of inlined file: juce_LeakedObjectDetector.h ***/

// unbelievably, some system headers actually use macros to define these symbols:
#undef check
#undef TYPE_BOOL

#if JUCE_MAC || JUCE_IOS || DOXYGEN

 /** A handy C++ wrapper that creates and deletes an NSAutoreleasePool object using RAII.
	 You should use the JUCE_AUTORELEASEPOOL macro to create a local auto-release pool on the stack.
 */
 class JUCE_API  ScopedAutoReleasePool
 {
 public:
	 ScopedAutoReleasePool();
	 ~ScopedAutoReleasePool();

 private:
	 void* pool;

	 JUCE_DECLARE_NON_COPYABLE (ScopedAutoReleasePool);
 };

 /** A macro that can be used to easily declare a local ScopedAutoReleasePool object for RAII-based obj-C autoreleasing. */
 #define JUCE_AUTORELEASEPOOL  const juce::ScopedAutoReleasePool JUCE_JOIN_MACRO (autoReleasePool_, __LINE__);

#else
 #define JUCE_AUTORELEASEPOOL
#endif

END_JUCE_NAMESPACE

#endif   // __JUCE_STANDARDHEADER_JUCEHEADER__

/*** End of inlined file: juce_StandardHeader.h ***/

namespace juce
{

// START_AUTOINCLUDE containers, files, json, logging, maths, memory, misc, network,
// streams, system, text, threads, time, unit_tests, xml, zip
#ifndef __JUCE_ABSTRACTFIFO_JUCEHEADER__

/*** Start of inlined file: juce_AbstractFifo.h ***/
#ifndef __JUCE_ABSTRACTFIFO_JUCEHEADER__
#define __JUCE_ABSTRACTFIFO_JUCEHEADER__

/**
	Encapsulates the logic required to implement a lock-free FIFO.

	This class handles the logic needed when building a single-reader, single-writer FIFO.

	It doesn't actually hold any data itself, but your FIFO class can use one of these to manage
	its position and status when reading or writing to it.

	To use it, you can call prepareToWrite() to determine the position within your own buffer that
	an incoming block of data should be stored, and prepareToRead() to find out when the next
	outgoing block should be read from.

	e.g.
	@code
	class MyFifo
	{
	public:
		MyFifo()  : abstractFifo (1024)
		{
		}

		void addToFifo (const int* someData, int numItems)
		{
			int start1, size1, start2, size2;
			abstractFifo.prepareToWrite (numItems, start1, size1, start2, size2);

			if (size1 > 0)
				copySomeData (myBuffer + start1, someData, size1);

			if (size2 > 0)
				copySomeData (myBuffer + start2, someData + size1, size2);

			abstractFifo.finishedWrite (size1 + size2);
		}

		void readFromFifo (int* someData, int numItems)
		{
			int start1, size1, start2, size2;
			abstractFifo.prepareToRead (numSamples, start1, size1, start2, size2);

			if (size1 > 0)
				copySomeData (someData, myBuffer + start1, size1);

			if (size2 > 0)
				copySomeData (someData + size1, myBuffer + start2, size2);

			abstractFifo.finishedRead (size1 + size2);
		}

	private:
		AbstractFifo abstractFifo;
		int myBuffer [1024];
	};
	@endcode
*/
class JUCE_API  AbstractFifo
{
public:

	/** Creates a FIFO to manage a buffer with the specified capacity. */
	AbstractFifo (int capacity) noexcept;

	/** Destructor */
	~AbstractFifo();

	/** Returns the total size of the buffer being managed. */
	int getTotalSize() const noexcept;

	/** Returns the number of items that can currently be added to the buffer without it overflowing. */
	int getFreeSpace() const noexcept;

	/** Returns the number of items that can currently be read from the buffer. */
	int getNumReady() const noexcept;

	/** Clears the buffer positions, so that it appears empty. */
	void reset() noexcept;

	/** Changes the buffer's total size.
		Note that this isn't thread-safe, so don't call it if there's any danger that it
		might overlap with a call to any other method in this class!
	*/
	void setTotalSize (int newSize) noexcept;

	/** Returns the location within the buffer at which an incoming block of data should be written.

		Because the section of data that you want to add to the buffer may overlap the end
		and wrap around to the start, two blocks within your buffer are returned, and you
		should copy your data into the first one, with any remaining data spilling over into
		the second.

		If the number of items you ask for is too large to fit within the buffer's free space, then
		blockSize1 + blockSize2 may add up to a lower value than numToWrite. If this happens, you
		may decide to keep waiting and re-trying the method until there's enough space available.

		After calling this method, if you choose to write your data into the blocks returned, you
		must call finishedWrite() to tell the FIFO how much data you actually added.

		e.g.
		@code
		void addToFifo (const int* someData, int numItems)
		{
			int start1, size1, start2, size2;
			prepareToWrite (numItems, start1, size1, start2, size2);

			if (size1 > 0)
				copySomeData (myBuffer + start1, someData, size1);

			if (size2 > 0)
				copySomeData (myBuffer + start2, someData + size1, size2);

			finishedWrite (size1 + size2);
		}
		@endcode

		@param numToWrite       indicates how many items you'd like to add to the buffer
		@param startIndex1      on exit, this will contain the start index in your buffer at which your data should be written
		@param blockSize1       on exit, this indicates how many items can be written to the block starting at startIndex1
		@param startIndex2      on exit, this will contain the start index in your buffer at which any data that didn't fit into
								the first block should be written
		@param blockSize2       on exit, this indicates how many items can be written to the block starting at startIndex2
		@see finishedWrite
	*/
	void prepareToWrite (int numToWrite, int& startIndex1, int& blockSize1, int& startIndex2, int& blockSize2) const noexcept;

	/** Called after reading from the FIFO, to indicate that this many items have been added.
		@see prepareToWrite
	*/
	void finishedWrite (int numWritten) noexcept;

	/** Returns the location within the buffer from which the next block of data should be read.

		Because the section of data that you want to read from the buffer may overlap the end
		and wrap around to the start, two blocks within your buffer are returned, and you
		should read from both of them.

		If the number of items you ask for is greater than the amount of data available, then
		blockSize1 + blockSize2 may add up to a lower value than numWanted. If this happens, you
		may decide to keep waiting and re-trying the method until there's enough data available.

		After calling this method, if you choose to read the data, you must call finishedRead() to
		tell the FIFO how much data you have consumed.

		e.g.
		@code
		void readFromFifo (int* someData, int numItems)
		{
			int start1, size1, start2, size2;
			prepareToRead (numSamples, start1, size1, start2, size2);

			if (size1 > 0)
				copySomeData (someData, myBuffer + start1, size1);

			if (size2 > 0)
				copySomeData (someData + size1, myBuffer + start2, size2);

			finishedRead (size1 + size2);
		}
		@endcode

		@param numWanted        indicates how many items you'd like to add to the buffer
		@param startIndex1      on exit, this will contain the start index in your buffer at which your data should be written
		@param blockSize1       on exit, this indicates how many items can be written to the block starting at startIndex1
		@param startIndex2      on exit, this will contain the start index in your buffer at which any data that didn't fit into
								the first block should be written
		@param blockSize2       on exit, this indicates how many items can be written to the block starting at startIndex2
		@see finishedRead
	*/
	void prepareToRead (int numWanted, int& startIndex1, int& blockSize1, int& startIndex2, int& blockSize2) const noexcept;

	/** Called after reading from the FIFO, to indicate that this many items have now been consumed.
		@see prepareToRead
	*/
	void finishedRead (int numRead) noexcept;

private:

	int bufferSize;
	Atomic <int> validStart, validEnd;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AbstractFifo);
};

#endif   // __JUCE_ABSTRACTFIFO_JUCEHEADER__

/*** End of inlined file: juce_AbstractFifo.h ***/


#endif
#ifndef __JUCE_ARRAY_JUCEHEADER__

/*** Start of inlined file: juce_Array.h ***/
#ifndef __JUCE_ARRAY_JUCEHEADER__
#define __JUCE_ARRAY_JUCEHEADER__


/*** Start of inlined file: juce_ArrayAllocationBase.h ***/
#ifndef __JUCE_ARRAYALLOCATIONBASE_JUCEHEADER__
#define __JUCE_ARRAYALLOCATIONBASE_JUCEHEADER__


/*** Start of inlined file: juce_HeapBlock.h ***/
#ifndef __JUCE_HEAPBLOCK_JUCEHEADER__
#define __JUCE_HEAPBLOCK_JUCEHEADER__

#ifndef DOXYGEN
namespace HeapBlockHelper
{
	template <bool shouldThrow>
	struct ThrowOnFail          { static void check (void*) {} };

	template<>
	struct ThrowOnFail <true>   { static void check (void* data) { if (data == nullptr) throw std::bad_alloc(); } };
}
#endif

/**
	Very simple container class to hold a pointer to some data on the heap.

	When you need to allocate some heap storage for something, always try to use
	this class instead of allocating the memory directly using malloc/free.

	A HeapBlock<char> object can be treated in pretty much exactly the same way
	as an char*, but as long as you allocate it on the stack or as a class member,
	it's almost impossible for it to leak memory.

	It also makes your code much more concise and readable than doing the same thing
	using direct allocations,

	E.g. instead of this:
	@code
		int* temp = (int*) malloc (1024 * sizeof (int));
		memcpy (temp, xyz, 1024 * sizeof (int));
		free (temp);
		temp = (int*) calloc (2048 * sizeof (int));
		temp[0] = 1234;
		memcpy (foobar, temp, 2048 * sizeof (int));
		free (temp);
	@endcode

	..you could just write this:
	@code
		HeapBlock <int> temp (1024);
		memcpy (temp, xyz, 1024 * sizeof (int));
		temp.calloc (2048);
		temp[0] = 1234;
		memcpy (foobar, temp, 2048 * sizeof (int));
	@endcode

	The class is extremely lightweight, containing only a pointer to the
	data, and exposes malloc/realloc/calloc/free methods that do the same jobs
	as their less object-oriented counterparts. Despite adding safety, you probably
	won't sacrifice any performance by using this in place of normal pointers.

	The throwOnFailure template parameter can be set to true if you'd like the class
	to throw a std::bad_alloc exception when an allocation fails. If this is false,
	then a failed allocation will just leave the heapblock with a null pointer (assuming
	that the system's malloc() function doesn't throw).

	@see Array, OwnedArray, MemoryBlock
*/
template <class ElementType, bool throwOnFailure = false>
class HeapBlock
{
public:

	/** Creates a HeapBlock which is initially just a null pointer.

		After creation, you can resize the array using the malloc(), calloc(),
		or realloc() methods.
	*/
	HeapBlock() noexcept  : data (nullptr)
	{
	}

	/** Creates a HeapBlock containing a number of elements.

		The contents of the block are undefined, as it will have been created by a
		malloc call.

		If you want an array of zero values, you can use the calloc() method instead.
	*/
	explicit HeapBlock (const size_t numElements)
		: data (static_cast <ElementType*> (::malloc (numElements * sizeof (ElementType))))
	{
		throwOnAllocationFailure();
	}

	/** Destructor.

		This will free the data, if any has been allocated.
	*/
	~HeapBlock()
	{
		::free (data);
	}

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	HeapBlock (HeapBlock&& other) noexcept
		: data (other.data)
	{
		other.data = nullptr;
	}

	HeapBlock& operator= (HeapBlock&& other) noexcept
	{
		std::swap (data, other.data);
		return *this;
	}
   #endif

	/** Returns a raw pointer to the allocated data.
		This may be a null pointer if the data hasn't yet been allocated, or if it has been
		freed by calling the free() method.
	*/
	inline operator ElementType*() const noexcept                           { return data; }

	/** Returns a raw pointer to the allocated data.
		This may be a null pointer if the data hasn't yet been allocated, or if it has been
		freed by calling the free() method.
	*/
	inline ElementType* getData() const noexcept                            { return data; }

	/** Returns a void pointer to the allocated data.
		This may be a null pointer if the data hasn't yet been allocated, or if it has been
		freed by calling the free() method.
	*/
	inline operator void*() const noexcept                                  { return static_cast <void*> (data); }

	/** Returns a void pointer to the allocated data.
		This may be a null pointer if the data hasn't yet been allocated, or if it has been
		freed by calling the free() method.
	*/
	inline operator const void*() const noexcept                            { return static_cast <const void*> (data); }

	/** Lets you use indirect calls to the first element in the array.
		Obviously this will cause problems if the array hasn't been initialised, because it'll
		be referencing a null pointer.
	*/
	inline ElementType* operator->() const  noexcept                        { return data; }

	/** Returns a reference to one of the data elements.
		Obviously there's no bounds-checking here, as this object is just a dumb pointer and
		has no idea of the size it currently has allocated.
	*/
	template <typename IndexType>
	inline ElementType& operator[] (IndexType index) const noexcept         { return data [index]; }

	/** Returns a pointer to a data element at an offset from the start of the array.
		This is the same as doing pointer arithmetic on the raw pointer itself.
	*/
	template <typename IndexType>
	inline ElementType* operator+ (IndexType index) const noexcept          { return data + index; }

	/** Compares the pointer with another pointer.
		This can be handy for checking whether this is a null pointer.
	*/
	inline bool operator== (const ElementType* const otherPointer) const noexcept   { return otherPointer == data; }

	/** Compares the pointer with another pointer.
		This can be handy for checking whether this is a null pointer.
	*/
	inline bool operator!= (const ElementType* const otherPointer) const noexcept   { return otherPointer != data; }

	/** Allocates a specified amount of memory.

		This uses the normal malloc to allocate an amount of memory for this object.
		Any previously allocated memory will be freed by this method.

		The number of bytes allocated will be (newNumElements * elementSize). Normally
		you wouldn't need to specify the second parameter, but it can be handy if you need
		to allocate a size in bytes rather than in terms of the number of elements.

		The data that is allocated will be freed when this object is deleted, or when you
		call free() or any of the allocation methods.
	*/
	void malloc (const size_t newNumElements, const size_t elementSize = sizeof (ElementType))
	{
		::free (data);
		data = static_cast <ElementType*> (::malloc (newNumElements * elementSize));
		throwOnAllocationFailure();
	}

	/** Allocates a specified amount of memory and clears it.
		This does the same job as the malloc() method, but clears the memory that it allocates.
	*/
	void calloc (const size_t newNumElements, const size_t elementSize = sizeof (ElementType))
	{
		::free (data);
		data = static_cast <ElementType*> (::calloc (newNumElements, elementSize));
		throwOnAllocationFailure();
	}

	/** Allocates a specified amount of memory and optionally clears it.
		This does the same job as either malloc() or calloc(), depending on the
		initialiseToZero parameter.
	*/
	void allocate (const size_t newNumElements, const bool initialiseToZero)
	{
		::free (data);

		if (initialiseToZero)
			data = static_cast <ElementType*> (::calloc (newNumElements, sizeof (ElementType)));
		else
			data = static_cast <ElementType*> (::malloc (newNumElements * sizeof (ElementType)));

		throwOnAllocationFailure();
	}

	/** Re-allocates a specified amount of memory.

		The semantics of this method are the same as malloc() and calloc(), but it
		uses realloc() to keep as much of the existing data as possible.
	*/
	void realloc (const size_t newNumElements, const size_t elementSize = sizeof (ElementType))
	{
		if (data == nullptr)
			data = static_cast <ElementType*> (::malloc (newNumElements * elementSize));
		else
			data = static_cast <ElementType*> (::realloc (data, newNumElements * elementSize));

		throwOnAllocationFailure();
	}

	/** Frees any currently-allocated data.
		This will free the data and reset this object to be a null pointer.
	*/
	void free()
	{
		::free (data);
		data = nullptr;
	}

	/** Swaps this object's data with the data of another HeapBlock.
		The two objects simply exchange their data pointers.
	*/
	template <bool otherBlockThrows>
	void swapWith (HeapBlock <ElementType, otherBlockThrows>& other) noexcept
	{
		std::swap (data, other.data);
	}

	/** This fills the block with zeros, up to the number of elements specified.
		Since the block has no way of knowing its own size, you must make sure that the number of
		elements you specify doesn't exceed the allocated size.
	*/
	void clear (size_t numElements) noexcept
	{
		zeromem (data, sizeof (ElementType) * numElements);
	}

private:

	ElementType* data;

	void throwOnAllocationFailure() const
	{
		HeapBlockHelper::ThrowOnFail<throwOnFailure>::check (data);
	}

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (HeapBlock);

	JUCE_PREVENT_HEAP_ALLOCATION; // Creating a 'new HeapBlock' would be missing the point!
};

#endif   // __JUCE_HEAPBLOCK_JUCEHEADER__

/*** End of inlined file: juce_HeapBlock.h ***/

/**
	Implements some basic array storage allocation functions.

	This class isn't really for public use - it's used by the other
	array classes, but might come in handy for some purposes.

	It inherits from a critical section class to allow the arrays to use
	the "empty base class optimisation" pattern to reduce their footprint.

	@see Array, OwnedArray, ReferenceCountedArray
*/
template <class ElementType, class TypeOfCriticalSectionToUse>
class ArrayAllocationBase  : public TypeOfCriticalSectionToUse
{
public:

	/** Creates an empty array. */
	ArrayAllocationBase() noexcept
		: numAllocated (0)
	{
	}

	/** Destructor. */
	~ArrayAllocationBase() noexcept
	{
	}

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	ArrayAllocationBase (ArrayAllocationBase<ElementType, TypeOfCriticalSectionToUse>&& other) noexcept
		: elements (static_cast <HeapBlock <ElementType>&&> (other.elements)),
		  numAllocated (other.numAllocated)
	{
	}

	ArrayAllocationBase& operator= (ArrayAllocationBase<ElementType, TypeOfCriticalSectionToUse>&& other) noexcept
	{
		elements = static_cast <HeapBlock <ElementType>&&> (other.elements);
		numAllocated = other.numAllocated;
		return *this;
	}
   #endif

	/** Changes the amount of storage allocated.

		This will retain any data currently held in the array, and either add or
		remove extra space at the end.

		@param numElements  the number of elements that are needed
	*/
	void setAllocatedSize (const int numElements)
	{
		if (numAllocated != numElements)
		{
			if (numElements > 0)
				elements.realloc ((size_t) numElements);
			else
				elements.free();

			numAllocated = numElements;
		}
	}

	/** Increases the amount of storage allocated if it is less than a given amount.

		This will retain any data currently held in the array, but will add
		extra space at the end to make sure there it's at least as big as the size
		passed in. If it's already bigger, no action is taken.

		@param minNumElements  the minimum number of elements that are needed
	*/
	void ensureAllocatedSize (const int minNumElements)
	{
		if (minNumElements > numAllocated)
			setAllocatedSize ((minNumElements + minNumElements / 2 + 8) & ~7);
	}

	/** Minimises the amount of storage allocated so that it's no more than
		the given number of elements.
	*/
	void shrinkToNoMoreThan (const int maxNumElements)
	{
		if (maxNumElements < numAllocated)
			setAllocatedSize (maxNumElements);
	}

	/** Swap the contents of two objects. */
	void swapWith (ArrayAllocationBase <ElementType, TypeOfCriticalSectionToUse>& other) noexcept
	{
		elements.swapWith (other.elements);
		std::swap (numAllocated, other.numAllocated);
	}

	HeapBlock <ElementType> elements;
	int numAllocated;

private:
	JUCE_DECLARE_NON_COPYABLE (ArrayAllocationBase);
};

#endif   // __JUCE_ARRAYALLOCATIONBASE_JUCEHEADER__

/*** End of inlined file: juce_ArrayAllocationBase.h ***/


/*** Start of inlined file: juce_ElementComparator.h ***/
#ifndef __JUCE_ELEMENTCOMPARATOR_JUCEHEADER__
#define __JUCE_ELEMENTCOMPARATOR_JUCEHEADER__

/**
	Sorts a range of elements in an array.

	The comparator object that is passed-in must define a public method with the following
	signature:
	@code
	int compareElements (ElementType first, ElementType second);
	@endcode

	..and this method must return:
	  - a value of < 0 if the first comes before the second
	  - a value of 0 if the two objects are equivalent
	  - a value of > 0 if the second comes before the first

	To improve performance, the compareElements() method can be declared as static or const.

	@param comparator       an object which defines a compareElements() method
	@param array            the array to sort
	@param firstElement     the index of the first element of the range to be sorted
	@param lastElement      the index of the last element in the range that needs
							sorting (this is inclusive)
	@param retainOrderOfEquivalentItems     if true, the order of items that the
							comparator deems the same will be maintained - this will be
							a slower algorithm than if they are allowed to be moved around.

	@see sortArrayRetainingOrder
*/
template <class ElementType, class ElementComparator>
static void sortArray (ElementComparator& comparator,
					   ElementType* const array,
					   int firstElement,
					   int lastElement,
					   const bool retainOrderOfEquivalentItems)
{
	(void) comparator;  // if you pass in an object with a static compareElements() method, this
						// avoids getting warning messages about the parameter being unused

	if (lastElement > firstElement)
	{
		if (retainOrderOfEquivalentItems)
		{
			for (int i = firstElement; i < lastElement; ++i)
			{
				if (comparator.compareElements (array[i], array [i + 1]) > 0)
				{
					std::swap (array[i], array[i + 1]);

					if (i > firstElement)
						i -= 2;
				}
			}
		}
		else
		{
			int fromStack[30], toStack[30];
			int stackIndex = 0;

			for (;;)
			{
				const int size = (lastElement - firstElement) + 1;

				if (size <= 8)
				{
					int j = lastElement;
					int maxIndex;

					while (j > firstElement)
					{
						maxIndex = firstElement;
						for (int k = firstElement + 1; k <= j; ++k)
							if (comparator.compareElements (array[k], array [maxIndex]) > 0)
								maxIndex = k;

						std::swap (array[j], array[maxIndex]);
						--j;
					}
				}
				else
				{
					const int mid = firstElement + (size >> 1);
					std::swap (array[mid], array[firstElement]);

					int i = firstElement;
					int j = lastElement + 1;

					for (;;)
					{
						while (++i <= lastElement
								&& comparator.compareElements (array[i], array [firstElement]) <= 0)
						{}

						while (--j > firstElement
								&& comparator.compareElements (array[j], array [firstElement]) >= 0)
						{}

						if (j < i)
							break;

						std::swap (array[i], array[j]);
					}

					std::swap (array[j], array[firstElement]);

					if (j - 1 - firstElement >= lastElement - i)
					{
						if (firstElement + 1 < j)
						{
							fromStack [stackIndex] = firstElement;
							toStack [stackIndex] = j - 1;
							++stackIndex;
						}

						if (i < lastElement)
						{
							firstElement = i;
							continue;
						}
					}
					else
					{
						if (i < lastElement)
						{
							fromStack [stackIndex] = i;
							toStack [stackIndex] = lastElement;
							++stackIndex;
						}

						if (firstElement + 1 < j)
						{
							lastElement = j - 1;
							continue;
						}
					}
				}

				if (--stackIndex < 0)
					break;

				jassert (stackIndex < numElementsInArray (fromStack));

				firstElement = fromStack [stackIndex];
				lastElement = toStack [stackIndex];
			}
		}
	}
}

/**
	Searches a sorted array of elements, looking for the index at which a specified value
	should be inserted for it to be in the correct order.

	The comparator object that is passed-in must define a public method with the following
	signature:
	@code
	int compareElements (ElementType first, ElementType second);
	@endcode

	..and this method must return:
	  - a value of < 0 if the first comes before the second
	  - a value of 0 if the two objects are equivalent
	  - a value of > 0 if the second comes before the first

	To improve performance, the compareElements() method can be declared as static or const.

	@param comparator       an object which defines a compareElements() method
	@param array            the array to search
	@param newElement       the value that is going to be inserted
	@param firstElement     the index of the first element to search
	@param lastElement      the index of the last element in the range (this is non-inclusive)
*/
template <class ElementType, class ElementComparator>
static int findInsertIndexInSortedArray (ElementComparator& comparator,
										 ElementType* const array,
										 const ElementType newElement,
										 int firstElement,
										 int lastElement)
{
	jassert (firstElement <= lastElement);

	(void) comparator;  // if you pass in an object with a static compareElements() method, this
						// avoids getting warning messages about the parameter being unused

	while (firstElement < lastElement)
	{
		if (comparator.compareElements (newElement, array [firstElement]) == 0)
		{
			++firstElement;
			break;
		}
		else
		{
			const int halfway = (firstElement + lastElement) >> 1;

			if (halfway == firstElement)
			{
				if (comparator.compareElements (newElement, array [halfway]) >= 0)
					++firstElement;

				break;
			}
			else if (comparator.compareElements (newElement, array [halfway]) >= 0)
			{
				firstElement = halfway;
			}
			else
			{
				lastElement = halfway;
			}
		}
	}

	return firstElement;
}

/**
	A simple ElementComparator class that can be used to sort an array of
	objects that support the '<' operator.

	This will work for primitive types and objects that implement operator<().

	Example: @code
	Array <int> myArray;
	DefaultElementComparator<int> sorter;
	myArray.sort (sorter);
	@endcode

	@see ElementComparator
*/
template <class ElementType>
class DefaultElementComparator
{
private:
	typedef PARAMETER_TYPE (ElementType) ParameterType;

public:
	static int compareElements (ParameterType first, ParameterType second)
	{
		return (first < second) ? -1 : ((second < first) ? 1 : 0);
	}
};

#endif   // __JUCE_ELEMENTCOMPARATOR_JUCEHEADER__

/*** End of inlined file: juce_ElementComparator.h ***/


/*** Start of inlined file: juce_CriticalSection.h ***/
#ifndef __JUCE_CRITICALSECTION_JUCEHEADER__
#define __JUCE_CRITICALSECTION_JUCEHEADER__


/*** Start of inlined file: juce_ScopedLock.h ***/
#ifndef __JUCE_SCOPEDLOCK_JUCEHEADER__
#define __JUCE_SCOPEDLOCK_JUCEHEADER__

/**
	Automatically locks and unlocks a mutex object.

	Use one of these as a local variable to provide RAII-based locking of a mutex.

	The templated class could be a CriticalSection, SpinLock, or anything else that
	provides enter() and exit() methods.

	e.g. @code
	CriticalSection myCriticalSection;

	for (;;)
	{
		const GenericScopedLock<CriticalSection> myScopedLock (myCriticalSection);
		// myCriticalSection is now locked

		...do some stuff...

		// myCriticalSection gets unlocked here.
	}
	@endcode

	@see GenericScopedUnlock, CriticalSection, SpinLock, ScopedLock, ScopedUnlock
*/
template <class LockType>
class GenericScopedLock
{
public:

	/** Creates a GenericScopedLock.

		As soon as it is created, this will acquire the lock, and when the GenericScopedLock
		object is deleted, the lock will be released.

		Make sure this object is created and deleted by the same thread,
		otherwise there are no guarantees what will happen! Best just to use it
		as a local stack object, rather than creating one with the new() operator.
	*/
	inline explicit GenericScopedLock (const LockType& lock) noexcept : lock_ (lock)     { lock.enter(); }

	/** Destructor.
		The lock will be released when the destructor is called.
		Make sure this object is created and deleted by the same thread, otherwise there are
		no guarantees what will happen!
	*/
	inline ~GenericScopedLock() noexcept                                                 { lock_.exit(); }

private:

	const LockType& lock_;

	JUCE_DECLARE_NON_COPYABLE (GenericScopedLock);
};

/**
	Automatically unlocks and re-locks a mutex object.

	This is the reverse of a GenericScopedLock object - instead of locking the mutex
	for the lifetime of this object, it unlocks it.

	Make sure you don't try to unlock mutexes that aren't actually locked!

	e.g. @code

	CriticalSection myCriticalSection;

	for (;;)
	{
		const GenericScopedLock<CriticalSection> myScopedLock (myCriticalSection);
		// myCriticalSection is now locked

		... do some stuff with it locked ..

		while (xyz)
		{
			... do some stuff with it locked ..

			const GenericScopedUnlock<CriticalSection> unlocker (myCriticalSection);

			// myCriticalSection is now unlocked for the remainder of this block,
			// and re-locked at the end.

			...do some stuff with it unlocked ...
		}

		// myCriticalSection gets unlocked here.
	}
	@endcode

	@see GenericScopedLock, CriticalSection, ScopedLock, ScopedUnlock
*/
template <class LockType>
class GenericScopedUnlock
{
public:

	/** Creates a GenericScopedUnlock.

		As soon as it is created, this will unlock the CriticalSection, and
		when the ScopedLock object is deleted, the CriticalSection will
		be re-locked.

		Make sure this object is created and deleted by the same thread,
		otherwise there are no guarantees what will happen! Best just to use it
		as a local stack object, rather than creating one with the new() operator.
	*/
	inline explicit GenericScopedUnlock (const LockType& lock) noexcept : lock_ (lock)   { lock.exit(); }

	/** Destructor.

		The CriticalSection will be unlocked when the destructor is called.

		Make sure this object is created and deleted by the same thread,
		otherwise there are no guarantees what will happen!
	*/
	inline ~GenericScopedUnlock() noexcept                                               { lock_.enter(); }

private:

	const LockType& lock_;

	JUCE_DECLARE_NON_COPYABLE (GenericScopedUnlock);
};

/**
	Automatically locks and unlocks a mutex object.

	Use one of these as a local variable to provide RAII-based locking of a mutex.

	The templated class could be a CriticalSection, SpinLock, or anything else that
	provides enter() and exit() methods.

	e.g. @code

	CriticalSection myCriticalSection;

	for (;;)
	{
		const GenericScopedTryLock<CriticalSection> myScopedTryLock (myCriticalSection);

		// Unlike using a ScopedLock, this may fail to actually get the lock, so you
		// should test this with the isLocked() method before doing your thread-unsafe
		// action..
		if (myScopedTryLock.isLocked())
		{
		   ...do some stuff...
		}
		else
		{
			..our attempt at locking failed because another thread had already locked it..
		}

		// myCriticalSection gets unlocked here (if it was locked)
	}
	@endcode

	@see CriticalSection::tryEnter, GenericScopedLock, GenericScopedUnlock
*/
template <class LockType>
class GenericScopedTryLock
{
public:

	/** Creates a GenericScopedTryLock.

		As soon as it is created, this will attempt to acquire the lock, and when the
		GenericScopedTryLock is deleted, the lock will be released (if the lock was
		successfully acquired).

		Make sure this object is created and deleted by the same thread,
		otherwise there are no guarantees what will happen! Best just to use it
		as a local stack object, rather than creating one with the new() operator.
	*/
	inline explicit GenericScopedTryLock (const LockType& lock) noexcept
		: lock_ (lock), lockWasSuccessful (lock.tryEnter()) {}

	/** Destructor.

		The mutex will be unlocked (if it had been successfully locked) when the
		destructor is called.

		Make sure this object is created and deleted by the same thread,
		otherwise there are no guarantees what will happen!
	*/
	inline ~GenericScopedTryLock() noexcept         { if (lockWasSuccessful) lock_.exit(); }

	/** Returns true if the mutex was successfully locked. */
	bool isLocked() const noexcept                  { return lockWasSuccessful; }

private:

	const LockType& lock_;
	const bool lockWasSuccessful;

	JUCE_DECLARE_NON_COPYABLE (GenericScopedTryLock);
};

#endif   // __JUCE_SCOPEDLOCK_JUCEHEADER__

/*** End of inlined file: juce_ScopedLock.h ***/

/**
	A mutex class.

	A CriticalSection acts as a re-entrant mutex lock. The best way to lock and unlock
	one of these is by using RAII in the form of a local ScopedLock object - have a look
	through the codebase for many examples of how to do this.

	@see ScopedLock, ScopedTryLock, ScopedUnlock, SpinLock, ReadWriteLock, Thread, InterProcessLock
*/
class JUCE_API  CriticalSection
{
public:

	/** Creates a CriticalSection object. */
	CriticalSection() noexcept;

	/** Destructor.
		If the critical section is deleted whilst locked, any subsequent behaviour
		is unpredictable.
	*/
	~CriticalSection() noexcept;

	/** Acquires the lock.

		If the lock is already held by the caller thread, the method returns immediately.
		If the lock is currently held by another thread, this will wait until it becomes free.

		It's strongly recommended that you never call this method directly - instead use the
		ScopedLock class to manage the locking using an RAII pattern instead.

		@see exit, tryEnter, ScopedLock
	*/
	void enter() const noexcept;

	/** Attempts to lock this critical section without blocking.

		This method behaves identically to CriticalSection::enter, except that the caller thread
		does not wait if the lock is currently held by another thread but returns false immediately.

		@returns false if the lock is currently held by another thread, true otherwise.
		@see enter
	*/
	bool tryEnter() const noexcept;

	/** Releases the lock.

		If the caller thread hasn't got the lock, this can have unpredictable results.

		If the enter() method has been called multiple times by the thread, each
		call must be matched by a call to exit() before other threads will be allowed
		to take over the lock.

		@see enter, ScopedLock
	*/
	void exit() const noexcept;

	/** Provides the type of scoped lock to use with a CriticalSection. */
	typedef GenericScopedLock <CriticalSection>       ScopedLockType;

	/** Provides the type of scoped unlocker to use with a CriticalSection. */
	typedef GenericScopedUnlock <CriticalSection>     ScopedUnlockType;

	/** Provides the type of scoped try-locker to use with a CriticalSection. */
	typedef GenericScopedTryLock <CriticalSection>    ScopedTryLockType;

private:

   #if JUCE_WINDOWS
	// To avoid including windows.h in the public JUCE headers, we'll just allocate a
	// block of memory here that's big enough to be used internally as a windows critical
	// section structure.
	#if JUCE_64BIT
	 uint8 internal [44];
	#else
	 uint8 internal [24];
	#endif
   #else
	mutable pthread_mutex_t internal;
   #endif

	JUCE_DECLARE_NON_COPYABLE (CriticalSection);
};

/**
	A class that can be used in place of a real CriticalSection object, but which
	doesn't perform any locking.

	This is currently used by some templated classes, and most compilers should
	manage to optimise it out of existence.

	@see CriticalSection, Array, OwnedArray, ReferenceCountedArray
*/
class JUCE_API  DummyCriticalSection
{
public:
	inline DummyCriticalSection() noexcept      {}
	inline ~DummyCriticalSection() noexcept     {}

	inline void enter() const noexcept          {}
	inline bool tryEnter() const noexcept       { return true; }
	inline void exit() const noexcept           {}

	/** A dummy scoped-lock type to use with a dummy critical section. */
	struct ScopedLockType
	{
		ScopedLockType (const DummyCriticalSection&) noexcept {}
	};

	/** A dummy scoped-unlocker type to use with a dummy critical section. */
	typedef ScopedLockType ScopedUnlockType;

private:
	JUCE_DECLARE_NON_COPYABLE (DummyCriticalSection);
};

/**
	Automatically locks and unlocks a CriticalSection object.

	Use one of these as a local variable to provide RAII-based locking of a CriticalSection.

	e.g. @code

	CriticalSection myCriticalSection;

	for (;;)
	{
		const ScopedLock myScopedLock (myCriticalSection);
		// myCriticalSection is now locked

		...do some stuff...

		// myCriticalSection gets unlocked here.
	}
	@endcode

	@see CriticalSection, ScopedUnlock
*/
typedef CriticalSection::ScopedLockType  ScopedLock;

/**
	Automatically unlocks and re-locks a CriticalSection object.

	This is the reverse of a ScopedLock object - instead of locking the critical
	section for the lifetime of this object, it unlocks it.

	Make sure you don't try to unlock critical sections that aren't actually locked!

	e.g. @code

	CriticalSection myCriticalSection;

	for (;;)
	{
		const ScopedLock myScopedLock (myCriticalSection);
		// myCriticalSection is now locked

		... do some stuff with it locked ..

		while (xyz)
		{
			... do some stuff with it locked ..

			const ScopedUnlock unlocker (myCriticalSection);

			// myCriticalSection is now unlocked for the remainder of this block,
			// and re-locked at the end.

			...do some stuff with it unlocked ...
		}

		// myCriticalSection gets unlocked here.
	}
	@endcode

	@see CriticalSection, ScopedLock
*/
typedef CriticalSection::ScopedUnlockType  ScopedUnlock;

/**
	Automatically tries to lock and unlock a CriticalSection object.

	Use one of these as a local variable to control access to a CriticalSection.

	e.g. @code
	CriticalSection myCriticalSection;

	for (;;)
	{
		const ScopedTryLock myScopedTryLock (myCriticalSection);

		// Unlike using a ScopedLock, this may fail to actually get the lock, so you
		// should test this with the isLocked() method before doing your thread-unsafe
		// action..
		if (myScopedTryLock.isLocked())
		{
		   ...do some stuff...
		}
		else
		{
			..our attempt at locking failed because another thread had already locked it..
		}

		// myCriticalSection gets unlocked here (if it was locked)
	}
	@endcode

	@see CriticalSection::tryEnter, ScopedLock, ScopedUnlock, ScopedReadLock
*/
typedef CriticalSection::ScopedTryLockType  ScopedTryLock;

#endif   // __JUCE_CRITICALSECTION_JUCEHEADER__

/*** End of inlined file: juce_CriticalSection.h ***/

/**
	Holds a resizable array of primitive or copy-by-value objects.

	Examples of arrays are: Array<int>, Array<Rectangle> or Array<MyClass*>

	The Array class can be used to hold simple, non-polymorphic objects as well as primitive types - to
	do so, the class must fulfil these requirements:
	- it must have a copy constructor and assignment operator
	- it must be able to be relocated in memory by a memcpy without this causing any problems - so
	  objects whose functionality relies on external pointers or references to themselves can be used.

	You can of course have an array of pointers to any kind of object, e.g. Array <MyClass*>, but if
	you do this, the array doesn't take any ownership of the objects - see the OwnedArray class or the
	ReferenceCountedArray class for more powerful ways of holding lists of objects.

	For holding lists of strings, you can use Array\<String\>, but it's usually better to use the
	specialised class StringArray, which provides more useful functions.

	To make all the array's methods thread-safe, pass in "CriticalSection" as the templated
	TypeOfCriticalSectionToUse parameter, instead of the default DummyCriticalSection.

	@see OwnedArray, ReferenceCountedArray, StringArray, CriticalSection
*/
template <typename ElementType,
		  typename TypeOfCriticalSectionToUse = DummyCriticalSection>
class Array
{
private:
	typedef PARAMETER_TYPE (ElementType) ParameterType;

public:

	/** Creates an empty array. */
	Array() noexcept
	   : numUsed (0)
	{
	}

	/** Creates a copy of another array.
		@param other    the array to copy
	*/
	Array (const Array<ElementType, TypeOfCriticalSectionToUse>& other)
	{
		const ScopedLockType lock (other.getLock());
		numUsed = other.numUsed;
		data.setAllocatedSize (other.numUsed);

		for (int i = 0; i < numUsed; ++i)
			new (data.elements + i) ElementType (other.data.elements[i]);
	}

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	Array (Array<ElementType, TypeOfCriticalSectionToUse>&& other) noexcept
		: data (static_cast <ArrayAllocationBase<ElementType, TypeOfCriticalSectionToUse>&&> (other.data)),
		  numUsed (other.numUsed)
	{
		other.numUsed = 0;
	}
   #endif

	/** Initalises from a null-terminated C array of values.

		@param values   the array to copy from
	*/
	template <typename TypeToCreateFrom>
	explicit Array (const TypeToCreateFrom* values)
	   : numUsed (0)
	{
		while (*values != TypeToCreateFrom())
			add (*values++);
	}

	/** Initalises from a C array of values.

		@param values       the array to copy from
		@param numValues    the number of values in the array
	*/
	template <typename TypeToCreateFrom>
	Array (const TypeToCreateFrom* values, int numValues)
	   : numUsed (numValues)
	{
		data.setAllocatedSize (numValues);

		for (int i = 0; i < numValues; ++i)
			new (data.elements + i) ElementType (values[i]);
	}

	/** Destructor. */
	~Array()
	{
		deleteAllElements();
	}

	/** Copies another array.
		@param other    the array to copy
	*/
	Array& operator= (const Array& other)
	{
		if (this != &other)
		{
			Array<ElementType, TypeOfCriticalSectionToUse> otherCopy (other);
			swapWithArray (otherCopy);
		}

		return *this;
	}

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	Array& operator= (Array&& other) noexcept
	{
		data = static_cast <ArrayAllocationBase<ElementType, TypeOfCriticalSectionToUse>&&> (other.data);
		numUsed = other.numUsed;
		other.numUsed = 0;
		return *this;
	}
   #endif

	/** Compares this array to another one.
		Two arrays are considered equal if they both contain the same set of
		elements, in the same order.
		@param other    the other array to compare with
	*/
	template <class OtherArrayType>
	bool operator== (const OtherArrayType& other) const
	{
		const ScopedLockType lock (getLock());
		const typename OtherArrayType::ScopedLockType lock2 (other.getLock());

		if (numUsed != other.numUsed)
			return false;

		for (int i = numUsed; --i >= 0;)
			if (! (data.elements [i] == other.data.elements [i]))
				return false;

		return true;
	}

	/** Compares this array to another one.
		Two arrays are considered equal if they both contain the same set of
		elements, in the same order.
		@param other    the other array to compare with
	*/
	template <class OtherArrayType>
	bool operator!= (const OtherArrayType& other) const
	{
		return ! operator== (other);
	}

	/** Removes all elements from the array.
		This will remove all the elements, and free any storage that the array is
		using. To clear the array without freeing the storage, use the clearQuick()
		method instead.

		@see clearQuick
	*/
	void clear()
	{
		const ScopedLockType lock (getLock());
		deleteAllElements();
		data.setAllocatedSize (0);
		numUsed = 0;
	}

	/** Removes all elements from the array without freeing the array's allocated storage.

		@see clear
	*/
	void clearQuick()
	{
		const ScopedLockType lock (getLock());
		deleteAllElements();
		numUsed = 0;
	}

	/** Returns the current number of elements in the array.
	*/
	inline int size() const noexcept
	{
		return numUsed;
	}

	/** Returns one of the elements in the array.
		If the index passed in is beyond the range of valid elements, this
		will return zero.

		If you're certain that the index will always be a valid element, you
		can call getUnchecked() instead, which is faster.

		@param index    the index of the element being requested (0 is the first element in the array)
		@see getUnchecked, getFirst, getLast
	*/
	ElementType operator[] (const int index) const
	{
		const ScopedLockType lock (getLock());
		return isPositiveAndBelow (index, numUsed) ? data.elements [index]
												   : ElementType();
	}

	/** Returns one of the elements in the array, without checking the index passed in.

		Unlike the operator[] method, this will try to return an element without
		checking that the index is within the bounds of the array, so should only
		be used when you're confident that it will always be a valid index.

		@param index    the index of the element being requested (0 is the first element in the array)
		@see operator[], getFirst, getLast
	*/
	inline ElementType getUnchecked (const int index) const
	{
		const ScopedLockType lock (getLock());
		jassert (isPositiveAndBelow (index, numUsed));
		return data.elements [index];
	}

	/** Returns a direct reference to one of the elements in the array, without checking the index passed in.

		This is like getUnchecked, but returns a direct reference to the element, so that
		you can alter it directly. Obviously this can be dangerous, so only use it when
		absolutely necessary.

		@param index    the index of the element being requested (0 is the first element in the array)
		@see operator[], getFirst, getLast
	*/
	inline ElementType& getReference (const int index) const noexcept
	{
		const ScopedLockType lock (getLock());
		jassert (isPositiveAndBelow (index, numUsed));
		return data.elements [index];
	}

	/** Returns the first element in the array, or 0 if the array is empty.

		@see operator[], getUnchecked, getLast
	*/
	inline ElementType getFirst() const
	{
		const ScopedLockType lock (getLock());
		return (numUsed > 0) ? data.elements [0]
							 : ElementType();
	}

	/** Returns the last element in the array, or 0 if the array is empty.

		@see operator[], getUnchecked, getFirst
	*/
	inline ElementType getLast() const
	{
		const ScopedLockType lock (getLock());
		return (numUsed > 0) ? data.elements [numUsed - 1]
							 : ElementType();
	}

	/** Returns a pointer to the actual array data.
		This pointer will only be valid until the next time a non-const method
		is called on the array.
	*/
	inline ElementType* getRawDataPointer() noexcept
	{
		return data.elements;
	}

	/** Returns a pointer to the first element in the array.
		This method is provided for compatibility with standard C++ iteration mechanisms.
	*/
	inline ElementType* begin() const noexcept
	{
		return data.elements;
	}

	/** Returns a pointer to the element which follows the last element in the array.
		This method is provided for compatibility with standard C++ iteration mechanisms.
	*/
	inline ElementType* end() const noexcept
	{
		return data.elements + numUsed;
	}

	/** Finds the index of the first element which matches the value passed in.

		This will search the array for the given object, and return the index
		of its first occurrence. If the object isn't found, the method will return -1.

		@param elementToLookFor   the value or object to look for
		@returns                  the index of the object, or -1 if it's not found
	*/
	int indexOf (ParameterType elementToLookFor) const
	{
		const ScopedLockType lock (getLock());
		const ElementType* e = data.elements.getData();
		const ElementType* const end_ = e + numUsed;

		for (; e != end_; ++e)
			if (elementToLookFor == *e)
				return static_cast <int> (e - data.elements.getData());

		return -1;
	}

	/** Returns true if the array contains at least one occurrence of an object.

		@param elementToLookFor     the value or object to look for
		@returns                    true if the item is found
	*/
	bool contains (ParameterType elementToLookFor) const
	{
		const ScopedLockType lock (getLock());
		const ElementType* e = data.elements.getData();
		const ElementType* const end_ = e + numUsed;

		for (; e != end_; ++e)
			if (elementToLookFor == *e)
				return true;

		return false;
	}

	/** Appends a new element at the end of the array.

		@param newElement       the new object to add to the array
		@see set, insert, addIfNotAlreadyThere, addSorted, addUsingDefaultSort, addArray
	*/
	void add (ParameterType newElement)
	{
		const ScopedLockType lock (getLock());
		data.ensureAllocatedSize (numUsed + 1);
		new (data.elements + numUsed++) ElementType (newElement);
	}

	/** Inserts a new element into the array at a given position.

		If the index is less than 0 or greater than the size of the array, the
		element will be added to the end of the array.
		Otherwise, it will be inserted into the array, moving all the later elements
		along to make room.

		@param indexToInsertAt    the index at which the new element should be
								  inserted (pass in -1 to add it to the end)
		@param newElement         the new object to add to the array
		@see add, addSorted, addUsingDefaultSort, set
	*/
	void insert (int indexToInsertAt, ParameterType newElement)
	{
		const ScopedLockType lock (getLock());
		data.ensureAllocatedSize (numUsed + 1);

		if (isPositiveAndBelow (indexToInsertAt, numUsed))
		{
			ElementType* const insertPos = data.elements + indexToInsertAt;
			const int numberToMove = numUsed - indexToInsertAt;

			if (numberToMove > 0)
				memmove (insertPos + 1, insertPos, numberToMove * sizeof (ElementType));

			new (insertPos) ElementType (newElement);
			++numUsed;
		}
		else
		{
			new (data.elements + numUsed++) ElementType (newElement);
		}
	}

	/** Inserts multiple copies of an element into the array at a given position.

		If the index is less than 0 or greater than the size of the array, the
		element will be added to the end of the array.
		Otherwise, it will be inserted into the array, moving all the later elements
		along to make room.

		@param indexToInsertAt    the index at which the new element should be inserted
		@param newElement         the new object to add to the array
		@param numberOfTimesToInsertIt  how many copies of the value to insert
		@see insert, add, addSorted, set
	*/
	void insertMultiple (int indexToInsertAt, ParameterType newElement,
						 int numberOfTimesToInsertIt)
	{
		if (numberOfTimesToInsertIt > 0)
		{
			const ScopedLockType lock (getLock());
			data.ensureAllocatedSize (numUsed + numberOfTimesToInsertIt);
			ElementType* insertPos;

			if (isPositiveAndBelow (indexToInsertAt, numUsed))
			{
				insertPos = data.elements + indexToInsertAt;
				const int numberToMove = numUsed - indexToInsertAt;
				memmove (insertPos + numberOfTimesToInsertIt, insertPos, numberToMove * sizeof (ElementType));
			}
			else
			{
				insertPos = data.elements + numUsed;
			}

			numUsed += numberOfTimesToInsertIt;

			while (--numberOfTimesToInsertIt >= 0)
				new (insertPos++) ElementType (newElement);
		}
	}

	/** Inserts an array of values into this array at a given position.

		If the index is less than 0 or greater than the size of the array, the
		new elements will be added to the end of the array.
		Otherwise, they will be inserted into the array, moving all the later elements
		along to make room.

		@param indexToInsertAt      the index at which the first new element should be inserted
		@param newElements          the new values to add to the array
		@param numberOfElements     how many items are in the array
		@see insert, add, addSorted, set
	*/
	void insertArray (int indexToInsertAt,
					  const ElementType* newElements,
					  int numberOfElements)
	{
		if (numberOfElements > 0)
		{
			const ScopedLockType lock (getLock());
			data.ensureAllocatedSize (numUsed + numberOfElements);
			ElementType* insertPos;

			if (isPositiveAndBelow (indexToInsertAt, numUsed))
			{
				insertPos = data.elements + indexToInsertAt;
				const int numberToMove = numUsed - indexToInsertAt;
				memmove (insertPos + numberOfElements, insertPos, numberToMove * sizeof (ElementType));
			}
			else
			{
				insertPos = data.elements + numUsed;
			}

			numUsed += numberOfElements;

			while (--numberOfElements >= 0)
				new (insertPos++) ElementType (*newElements++);
		}
	}

	/** Appends a new element at the end of the array as long as the array doesn't
		already contain it.

		If the array already contains an element that matches the one passed in, nothing
		will be done.

		@param newElement   the new object to add to the array
	*/
	void addIfNotAlreadyThere (ParameterType newElement)
	{
		const ScopedLockType lock (getLock());

		if (! contains (newElement))
			add (newElement);
	}

	/** Replaces an element with a new value.

		If the index is less than zero, this method does nothing.
		If the index is beyond the end of the array, the item is added to the end of the array.

		@param indexToChange    the index whose value you want to change
		@param newValue         the new value to set for this index.
		@see add, insert
	*/
	void set (const int indexToChange, ParameterType newValue)
	{
		jassert (indexToChange >= 0);
		const ScopedLockType lock (getLock());

		if (isPositiveAndBelow (indexToChange, numUsed))
		{
			data.elements [indexToChange] = newValue;
		}
		else if (indexToChange >= 0)
		{
			data.ensureAllocatedSize (numUsed + 1);
			new (data.elements + numUsed++) ElementType (newValue);
		}
	}

	/** Replaces an element with a new value without doing any bounds-checking.

		This just sets a value directly in the array's internal storage, so you'd
		better make sure it's in range!

		@param indexToChange    the index whose value you want to change
		@param newValue         the new value to set for this index.
		@see set, getUnchecked
	*/
	void setUnchecked (const int indexToChange, ParameterType newValue)
	{
		const ScopedLockType lock (getLock());
		jassert (isPositiveAndBelow (indexToChange, numUsed));
		data.elements [indexToChange] = newValue;
	}

	/** Adds elements from an array to the end of this array.

		@param elementsToAdd        the array of elements to add
		@param numElementsToAdd     how many elements are in this other array
		@see add
	*/
	void addArray (const ElementType* elementsToAdd, int numElementsToAdd)
	{
		const ScopedLockType lock (getLock());

		if (numElementsToAdd > 0)
		{
			data.ensureAllocatedSize (numUsed + numElementsToAdd);

			while (--numElementsToAdd >= 0)
			{
				new (data.elements + numUsed) ElementType (*elementsToAdd++);
				++numUsed;
			}
		}
	}

	/** This swaps the contents of this array with those of another array.

		If you need to exchange two arrays, this is vastly quicker than using copy-by-value
		because it just swaps their internal pointers.
	*/
	void swapWithArray (Array& otherArray) noexcept
	{
		const ScopedLockType lock1 (getLock());
		const ScopedLockType lock2 (otherArray.getLock());

		data.swapWith (otherArray.data);
		swapVariables (numUsed, otherArray.numUsed);
	}

	/** Adds elements from another array to the end of this array.

		@param arrayToAddFrom       the array from which to copy the elements
		@param startIndex           the first element of the other array to start copying from
		@param numElementsToAdd     how many elements to add from the other array. If this
									value is negative or greater than the number of available elements,
									all available elements will be copied.
		@see add
	*/
	template <class OtherArrayType>
	void addArray (const OtherArrayType& arrayToAddFrom,
				   int startIndex = 0,
				   int numElementsToAdd = -1)
	{
		const typename OtherArrayType::ScopedLockType lock1 (arrayToAddFrom.getLock());

		{
			const ScopedLockType lock2 (getLock());

			if (startIndex < 0)
			{
				jassertfalse;
				startIndex = 0;
			}

			if (numElementsToAdd < 0 || startIndex + numElementsToAdd > arrayToAddFrom.size())
				numElementsToAdd = arrayToAddFrom.size() - startIndex;

			while (--numElementsToAdd >= 0)
				add (arrayToAddFrom.getUnchecked (startIndex++));
		}
	}

	/** This will enlarge or shrink the array to the given number of elements, by adding
		or removing items from its end.

		If the array is smaller than the given target size, empty elements will be appended
		until its size is as specified. If its size is larger than the target, items will be
		removed from its end to shorten it.
	*/
	void resize (const int targetNumItems)
	{
		jassert (targetNumItems >= 0);

		const int numToAdd = targetNumItems - numUsed;
		if (numToAdd > 0)
			insertMultiple (numUsed, ElementType(), numToAdd);
		else if (numToAdd < 0)
			removeRange (targetNumItems, -numToAdd);
	}

	/** Inserts a new element into the array, assuming that the array is sorted.

		This will use a comparator to find the position at which the new element
		should go. If the array isn't sorted, the behaviour of this
		method will be unpredictable.

		@param comparator   the comparator to use to compare the elements - see the sort()
							method for details about the form this object should take
		@param newElement   the new element to insert to the array
		@returns the index at which the new item was added
		@see addUsingDefaultSort, add, sort
	*/
	template <class ElementComparator>
	int addSorted (ElementComparator& comparator, ParameterType newElement)
	{
		const ScopedLockType lock (getLock());
		const int index = findInsertIndexInSortedArray (comparator, data.elements.getData(), newElement, 0, numUsed);
		insert (index, newElement);
		return index;
	}

	/** Inserts a new element into the array, assuming that the array is sorted.

		This will use the DefaultElementComparator class for sorting, so your ElementType
		must be suitable for use with that class. If the array isn't sorted, the behaviour of this
		method will be unpredictable.

		@param newElement   the new element to insert to the array
		@see addSorted, sort
	*/
	void addUsingDefaultSort (ParameterType newElement)
	{
		DefaultElementComparator <ElementType> comparator;
		addSorted (comparator, newElement);
	}

	/** Finds the index of an element in the array, assuming that the array is sorted.

		This will use a comparator to do a binary-chop to find the index of the given
		element, if it exists. If the array isn't sorted, the behaviour of this
		method will be unpredictable.

		@param comparator           the comparator to use to compare the elements - see the sort()
									method for details about the form this object should take
		@param elementToLookFor     the element to search for
		@returns                    the index of the element, or -1 if it's not found
		@see addSorted, sort
	*/
	template <class ElementComparator>
	int indexOfSorted (ElementComparator& comparator, ParameterType elementToLookFor) const
	{
		(void) comparator;  // if you pass in an object with a static compareElements() method, this
							// avoids getting warning messages about the parameter being unused

		const ScopedLockType lock (getLock());
		int start = 0;
		int end_ = numUsed;

		for (;;)
		{
			if (start >= end_)
			{
				return -1;
			}
			else if (comparator.compareElements (elementToLookFor, data.elements [start]) == 0)
			{
				return start;
			}
			else
			{
				const int halfway = (start + end_) >> 1;

				if (halfway == start)
					return -1;
				else if (comparator.compareElements (elementToLookFor, data.elements [halfway]) >= 0)
					start = halfway;
				else
					end_ = halfway;
			}
		}
	}

	/** Removes an element from the array.

		This will remove the element at a given index, and move back
		all the subsequent elements to close the gap.
		If the index passed in is out-of-range, nothing will happen.

		@param indexToRemove    the index of the element to remove
		@returns                the element that has been removed
		@see removeValue, removeRange
	*/
	ElementType remove (const int indexToRemove)
	{
		const ScopedLockType lock (getLock());

		if (isPositiveAndBelow (indexToRemove, numUsed))
		{
			--numUsed;

			ElementType* const e = data.elements + indexToRemove;
			ElementType removed (*e);
			e->~ElementType();
			const int numberToShift = numUsed - indexToRemove;

			if (numberToShift > 0)
				memmove (e, e + 1, numberToShift * sizeof (ElementType));

			if ((numUsed << 1) < data.numAllocated)
				minimiseStorageOverheads();

			return removed;
		}
		else
		{
			return ElementType();
		}
	}

	/** Removes an item from the array.

		This will remove the first occurrence of the given element from the array.
		If the item isn't found, no action is taken.

		@param valueToRemove   the object to try to remove
		@see remove, removeRange
	*/
	void removeValue (ParameterType valueToRemove)
	{
		const ScopedLockType lock (getLock());
		ElementType* const e = data.elements;

		for (int i = 0; i < numUsed; ++i)
		{
			if (valueToRemove == e[i])
			{
				remove (i);
				break;
			}
		}
	}

	/** Removes a range of elements from the array.

		This will remove a set of elements, starting from the given index,
		and move subsequent elements down to close the gap.

		If the range extends beyond the bounds of the array, it will
		be safely clipped to the size of the array.

		@param startIndex       the index of the first element to remove
		@param numberToRemove   how many elements should be removed
		@see remove, removeValue
	*/
	void removeRange (int startIndex, int numberToRemove)
	{
		const ScopedLockType lock (getLock());
		const int endIndex = jlimit (0, numUsed, startIndex + numberToRemove);
		startIndex = jlimit (0, numUsed, startIndex);

		if (endIndex > startIndex)
		{
			ElementType* const e = data.elements + startIndex;

			numberToRemove = endIndex - startIndex;
			for (int i = 0; i < numberToRemove; ++i)
				e[i].~ElementType();

			const int numToShift = numUsed - endIndex;
			if (numToShift > 0)
				memmove (e, e + numberToRemove, numToShift * sizeof (ElementType));

			numUsed -= numberToRemove;

			if ((numUsed << 1) < data.numAllocated)
				minimiseStorageOverheads();
		}
	}

	/** Removes the last n elements from the array.

		@param howManyToRemove   how many elements to remove from the end of the array
		@see remove, removeValue, removeRange
	*/
	void removeLast (int howManyToRemove = 1)
	{
		const ScopedLockType lock (getLock());

		if (howManyToRemove > numUsed)
			howManyToRemove = numUsed;

		for (int i = 1; i <= howManyToRemove; ++i)
			data.elements [numUsed - i].~ElementType();

		numUsed -= howManyToRemove;

		if ((numUsed << 1) < data.numAllocated)
			minimiseStorageOverheads();
	}

	/** Removes any elements which are also in another array.

		@param otherArray   the other array in which to look for elements to remove
		@see removeValuesNotIn, remove, removeValue, removeRange
	*/
	template <class OtherArrayType>
	void removeValuesIn (const OtherArrayType& otherArray)
	{
		const typename OtherArrayType::ScopedLockType lock1 (otherArray.getLock());
		const ScopedLockType lock2 (getLock());

		if (this == &otherArray)
		{
			clear();
		}
		else
		{
			if (otherArray.size() > 0)
			{
				for (int i = numUsed; --i >= 0;)
					if (otherArray.contains (data.elements [i]))
						remove (i);
			}
		}
	}

	/** Removes any elements which are not found in another array.

		Only elements which occur in this other array will be retained.

		@param otherArray    the array in which to look for elements NOT to remove
		@see removeValuesIn, remove, removeValue, removeRange
	*/
	template <class OtherArrayType>
	void removeValuesNotIn (const OtherArrayType& otherArray)
	{
		const typename OtherArrayType::ScopedLockType lock1 (otherArray.getLock());
		const ScopedLockType lock2 (getLock());

		if (this != &otherArray)
		{
			if (otherArray.size() <= 0)
			{
				clear();
			}
			else
			{
				for (int i = numUsed; --i >= 0;)
					if (! otherArray.contains (data.elements [i]))
						remove (i);
			}
		}
	}

	/** Swaps over two elements in the array.

		This swaps over the elements found at the two indexes passed in.
		If either index is out-of-range, this method will do nothing.

		@param index1   index of one of the elements to swap
		@param index2   index of the other element to swap
	*/
	void swap (const int index1,
			   const int index2)
	{
		const ScopedLockType lock (getLock());

		if (isPositiveAndBelow (index1, numUsed)
			 && isPositiveAndBelow (index2, numUsed))
		{
			swapVariables (data.elements [index1],
						   data.elements [index2]);
		}
	}

	/** Moves one of the values to a different position.

		This will move the value to a specified index, shuffling along
		any intervening elements as required.

		So for example, if you have the array { 0, 1, 2, 3, 4, 5 } then calling
		move (2, 4) would result in { 0, 1, 3, 4, 2, 5 }.

		@param currentIndex     the index of the value to be moved. If this isn't a
								valid index, then nothing will be done
		@param newIndex         the index at which you'd like this value to end up. If this
								is less than zero, the value will be moved to the end
								of the array
	*/
	void move (const int currentIndex, int newIndex) noexcept
	{
		if (currentIndex != newIndex)
		{
			const ScopedLockType lock (getLock());

			if (isPositiveAndBelow (currentIndex, numUsed))
			{
				if (! isPositiveAndBelow (newIndex, numUsed))
					newIndex = numUsed - 1;

				char tempCopy [sizeof (ElementType)];
				memcpy (tempCopy, data.elements + currentIndex, sizeof (ElementType));

				if (newIndex > currentIndex)
				{
					memmove (data.elements + currentIndex,
							 data.elements + currentIndex + 1,
							 (newIndex - currentIndex) * sizeof (ElementType));
				}
				else
				{
					memmove (data.elements + newIndex + 1,
							 data.elements + newIndex,
							 (currentIndex - newIndex) * sizeof (ElementType));
				}

				memcpy (data.elements + newIndex, tempCopy, sizeof (ElementType));
			}
		}
	}

	/** Reduces the amount of storage being used by the array.

		Arrays typically allocate slightly more storage than they need, and after
		removing elements, they may have quite a lot of unused space allocated.
		This method will reduce the amount of allocated storage to a minimum.
	*/
	void minimiseStorageOverheads()
	{
		const ScopedLockType lock (getLock());
		data.shrinkToNoMoreThan (numUsed);
	}

	/** Increases the array's internal storage to hold a minimum number of elements.

		Calling this before adding a large known number of elements means that
		the array won't have to keep dynamically resizing itself as the elements
		are added, and it'll therefore be more efficient.
	*/
	void ensureStorageAllocated (const int minNumElements)
	{
		const ScopedLockType lock (getLock());
		data.ensureAllocatedSize (minNumElements);
	}

	/** Sorts the elements in the array.

		This will use a comparator object to sort the elements into order. The object
		passed must have a method of the form:
		@code
		int compareElements (ElementType first, ElementType second);
		@endcode

		..and this method must return:
		  - a value of < 0 if the first comes before the second
		  - a value of 0 if the two objects are equivalent
		  - a value of > 0 if the second comes before the first

		To improve performance, the compareElements() method can be declared as static or const.

		@param comparator   the comparator to use for comparing elements.
		@param retainOrderOfEquivalentItems     if this is true, then items
							which the comparator says are equivalent will be
							kept in the order in which they currently appear
							in the array. This is slower to perform, but may
							be important in some cases. If it's false, a faster
							algorithm is used, but equivalent elements may be
							rearranged.

		@see addSorted, indexOfSorted, sortArray
	*/
	template <class ElementComparator>
	void sort (ElementComparator& comparator,
			   const bool retainOrderOfEquivalentItems = false) const
	{
		const ScopedLockType lock (getLock());
		(void) comparator;  // if you pass in an object with a static compareElements() method, this
							// avoids getting warning messages about the parameter being unused
		sortArray (comparator, data.elements.getData(), 0, size() - 1, retainOrderOfEquivalentItems);
	}

	/** Returns the CriticalSection that locks this array.
		To lock, you can call getLock().enter() and getLock().exit(), or preferably use
		an object of ScopedLockType as an RAII lock for it.
	*/
	inline const TypeOfCriticalSectionToUse& getLock() const noexcept      { return data; }

	/** Returns the type of scoped lock to use for locking this array */
	typedef typename TypeOfCriticalSectionToUse::ScopedLockType ScopedLockType;

private:

	ArrayAllocationBase <ElementType, TypeOfCriticalSectionToUse> data;
	int numUsed;

	inline void deleteAllElements() noexcept
	{
		for (int i = 0; i < numUsed; ++i)
			data.elements[i].~ElementType();
	}
};

#endif   // __JUCE_ARRAY_JUCEHEADER__

/*** End of inlined file: juce_Array.h ***/


#endif
#ifndef __JUCE_ARRAYALLOCATIONBASE_JUCEHEADER__

#endif
#ifndef __JUCE_DYNAMICOBJECT_JUCEHEADER__

/*** Start of inlined file: juce_DynamicObject.h ***/
#ifndef __JUCE_DYNAMICOBJECT_JUCEHEADER__
#define __JUCE_DYNAMICOBJECT_JUCEHEADER__


/*** Start of inlined file: juce_NamedValueSet.h ***/
#ifndef __JUCE_NAMEDVALUESET_JUCEHEADER__
#define __JUCE_NAMEDVALUESET_JUCEHEADER__


/*** Start of inlined file: juce_Variant.h ***/
#ifndef __JUCE_VARIANT_JUCEHEADER__
#define __JUCE_VARIANT_JUCEHEADER__


/*** Start of inlined file: juce_Identifier.h ***/
#ifndef __JUCE_IDENTIFIER_JUCEHEADER__
#define __JUCE_IDENTIFIER_JUCEHEADER__

class StringPool;

/**
	Represents a string identifier, designed for accessing properties by name.

	Identifier objects are very light and fast to copy, but slower to initialise
	from a string, so it's much faster to keep a static identifier object to refer
	to frequently-used names, rather than constructing them each time you need it.

	@see NamedPropertySet, ValueTree
*/
class JUCE_API  Identifier
{
public:
	/** Creates a null identifier. */
	Identifier() noexcept;

	/** Creates an identifier with a specified name.
		Because this name may need to be used in contexts such as script variables or XML
		tags, it must only contain ascii letters and digits, or the underscore character.
	*/
	Identifier (const char* name);

	/** Creates an identifier with a specified name.
		Because this name may need to be used in contexts such as script variables or XML
		tags, it must only contain ascii letters and digits, or the underscore character.
	*/
	Identifier (const String& name);

	/** Creates a copy of another identifier. */
	Identifier (const Identifier& other) noexcept;

	/** Creates a copy of another identifier. */
	Identifier& operator= (const Identifier& other) noexcept;

	/** Destructor */
	~Identifier();

	/** Compares two identifiers. This is a very fast operation. */
	inline bool operator== (const Identifier& other) const noexcept     { return name == other.name; }

	/** Compares two identifiers. This is a very fast operation. */
	inline bool operator!= (const Identifier& other) const noexcept     { return name != other.name; }

	/** Returns this identifier as a string. */
	String toString() const                                             { return name; }

	/** Returns this identifier's raw string pointer. */
	operator const String::CharPointerType() const noexcept             { return name; }

	/** Returns this identifier's raw string pointer. */
	const String::CharPointerType getCharPointer() const noexcept       { return name; }

	/** Checks a given string for characters that might not be valid in an Identifier.
		Since Identifiers are used as a script variables and XML attributes, they should only contain
		alphanumeric characters, underscores, or the '-' and ':' characters.
	*/
	static bool isValidIdentifier (const String& possibleIdentifier) noexcept;

private:

	String::CharPointerType name;

	static StringPool& getPool();
};

#endif   // __JUCE_IDENTIFIER_JUCEHEADER__

/*** End of inlined file: juce_Identifier.h ***/


/*** Start of inlined file: juce_OutputStream.h ***/
#ifndef __JUCE_OUTPUTSTREAM_JUCEHEADER__
#define __JUCE_OUTPUTSTREAM_JUCEHEADER__


/*** Start of inlined file: juce_NewLine.h ***/
#ifndef __JUCE_NEWLINE_JUCEHEADER__
#define __JUCE_NEWLINE_JUCEHEADER__

/** This class is used for represent a new-line character sequence.

	To write a new-line to a stream, you can use the predefined 'newLine' variable, e.g.
	@code
	myOutputStream << "Hello World" << newLine << newLine;
	@endcode

	The exact character sequence that will be used for the new-line can be set and
	retrieved with OutputStream::setNewLineString() and OutputStream::getNewLineString().
*/
class JUCE_API  NewLine
{
public:
	/** Returns the default new-line sequence that the library uses.
		@see OutputStream::setNewLineString()
	*/
	static const char* getDefault() noexcept        { return "\r\n"; }

	/** Returns the default new-line sequence that the library uses.
		@see getDefault()
	*/
	operator String() const                         { return getDefault(); }
};

/** A predefined object representing a new-line, which can be written to a string or stream.

	To write a new-line to a stream, you can use the predefined 'newLine' variable like this:
	@code
	myOutputStream << "Hello World" << newLine << newLine;
	@endcode
*/
extern NewLine newLine;

/** Writes a new-line sequence to a string.
	You can use the predefined object 'newLine' to invoke this, e.g.
	@code
	myString << "Hello World" << newLine << newLine;
	@endcode
*/
JUCE_API String& JUCE_CALLTYPE operator<< (String& string1, const NewLine&);

#endif   // __JUCE_NEWLINE_JUCEHEADER__

/*** End of inlined file: juce_NewLine.h ***/

class InputStream;
class MemoryBlock;
class File;

/**
	The base class for streams that write data to some kind of destination.

	Input and output streams are used throughout the library - subclasses can override
	some or all of the virtual functions to implement their behaviour.

	@see InputStream, MemoryOutputStream, FileOutputStream
*/
class JUCE_API  OutputStream
{
protected:

	OutputStream();

public:
	/** Destructor.

		Some subclasses might want to do things like call flush() during their
		destructors.
	*/
	virtual ~OutputStream();

	/** If the stream is using a buffer, this will ensure it gets written
		out to the destination. */
	virtual void flush() = 0;

	/** Tries to move the stream's output position.

		Not all streams will be able to seek to a new position - this will return
		false if it fails to work.

		@see getPosition
	*/
	virtual bool setPosition (int64 newPosition) = 0;

	/** Returns the stream's current position.

		@see setPosition
	*/
	virtual int64 getPosition() = 0;

	/** Writes a block of data to the stream.

		When creating a subclass of OutputStream, this is the only write method
		that needs to be overloaded - the base class has methods for writing other
		types of data which use this to do the work.

		@param dataToWrite      the target buffer to receive the data. This must not be null.
		@param numberOfBytes    the number of bytes to write. This must not be negative.
		@returns false if the write operation fails for some reason
	*/
	virtual bool write (const void* dataToWrite,
						int numberOfBytes) = 0;

	/** Writes a single byte to the stream.

		@see InputStream::readByte
	*/
	virtual void writeByte (char byte);

	/** Writes a boolean to the stream as a single byte.
		This is encoded as a binary byte (not as text) with a value of 1 or 0.
		@see InputStream::readBool
	*/
	virtual void writeBool (bool boolValue);

	/** Writes a 16-bit integer to the stream in a little-endian byte order.
		This will write two bytes to the stream: (value & 0xff), then (value >> 8).
		@see InputStream::readShort
	*/
	virtual void writeShort (short value);

	/** Writes a 16-bit integer to the stream in a big-endian byte order.
		This will write two bytes to the stream: (value >> 8), then (value & 0xff).
		@see InputStream::readShortBigEndian
	*/
	virtual void writeShortBigEndian (short value);

	/** Writes a 32-bit integer to the stream in a little-endian byte order.
		@see InputStream::readInt
	*/
	virtual void writeInt (int value);

	/** Writes a 32-bit integer to the stream in a big-endian byte order.
		@see InputStream::readIntBigEndian
	*/
	virtual void writeIntBigEndian (int value);

	/** Writes a 64-bit integer to the stream in a little-endian byte order.
		@see InputStream::readInt64
	*/
	virtual void writeInt64 (int64 value);

	/** Writes a 64-bit integer to the stream in a big-endian byte order.
		@see InputStream::readInt64BigEndian
	*/
	virtual void writeInt64BigEndian (int64 value);

	/** Writes a 32-bit floating point value to the stream in a binary format.
		The binary 32-bit encoding of the float is written as a little-endian int.
		@see InputStream::readFloat
	*/
	virtual void writeFloat (float value);

	/** Writes a 32-bit floating point value to the stream in a binary format.
		The binary 32-bit encoding of the float is written as a big-endian int.
		@see InputStream::readFloatBigEndian
	*/
	virtual void writeFloatBigEndian (float value);

	/** Writes a 64-bit floating point value to the stream in a binary format.
		The eight raw bytes of the double value are written out as a little-endian 64-bit int.
		@see InputStream::readDouble
	*/
	virtual void writeDouble (double value);

	/** Writes a 64-bit floating point value to the stream in a binary format.
		The eight raw bytes of the double value are written out as a big-endian 64-bit int.
		@see InputStream::readDoubleBigEndian
	*/
	virtual void writeDoubleBigEndian (double value);

	/** Writes a byte to the output stream a given number of times. */
	virtual void writeRepeatedByte (uint8 byte, int numTimesToRepeat);

	/** Writes a condensed binary encoding of a 32-bit integer.

		If you're storing a lot of integers which are unlikely to have very large values,
		this can save a lot of space, because values under 0xff will only take up 2 bytes,
		under 0xffff only 3 bytes, etc.

		The format used is: number of significant bytes + up to 4 bytes in little-endian order.

		@see InputStream::readCompressedInt
	*/
	virtual void writeCompressedInt (int value);

	/** Stores a string in the stream in a binary format.

		This isn't the method to use if you're trying to append text to the end of a
		text-file! It's intended for storing a string so that it can be retrieved later
		by InputStream::readString().

		It writes the string to the stream as UTF8, including the null termination character.

		For appending text to a file, instead use writeText, or operator<<

		@see InputStream::readString, writeText, operator<<
	*/
	virtual void writeString (const String& text);

	/** Writes a string of text to the stream.

		It can either write the text as UTF-8 or UTF-16, and can also add the UTF-16 byte-order-mark
		bytes (0xff, 0xfe) to indicate the endianness (these should only be used at the start
		of a file).

		The method also replaces '\\n' characters in the text with '\\r\\n'.
	*/
	virtual void writeText (const String& text,
							bool asUTF16,
							bool writeUTF16ByteOrderMark);

	/** Reads data from an input stream and writes it to this stream.

		@param source               the stream to read from
		@param maxNumBytesToWrite   the number of bytes to read from the stream (if this is
									less than zero, it will keep reading until the input
									is exhausted)
	*/
	virtual int writeFromInputStream (InputStream& source, int64 maxNumBytesToWrite);

	/** Sets the string that will be written to the stream when the writeNewLine()
		method is called.
		By default this will be set the the value of NewLine::getDefault().
	*/
	void setNewLineString (const String& newLineString);

	/** Returns the current new-line string that was set by setNewLineString(). */
	const String& getNewLineString() const noexcept         { return newLineString; }

private:

	String newLineString;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (OutputStream);
};

/** Writes a number to a stream as 8-bit characters in the default system encoding. */
OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, int number);

/** Writes a number to a stream as 8-bit characters in the default system encoding. */
OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, double number);

/** Writes a character to a stream. */
OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, char character);

/** Writes a null-terminated text string to a stream. */
OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, const char* text);

/** Writes a block of data from a MemoryBlock to a stream. */
OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, const MemoryBlock& data);

/** Writes the contents of a file to a stream. */
OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, const File& fileToRead);

/** Writes the complete contents of an input stream to an output stream. */
OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, InputStream& streamToRead);

/** Writes a new-line to a stream.
	You can use the predefined symbol 'newLine' to invoke this, e.g.
	@code
	myOutputStream << "Hello World" << newLine << newLine;
	@endcode
	@see OutputStream::setNewLineString
*/
OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, const NewLine&);

#endif   // __JUCE_OUTPUTSTREAM_JUCEHEADER__

/*** End of inlined file: juce_OutputStream.h ***/


/*** Start of inlined file: juce_InputStream.h ***/
#ifndef __JUCE_INPUTSTREAM_JUCEHEADER__
#define __JUCE_INPUTSTREAM_JUCEHEADER__

class MemoryBlock;

/** The base class for streams that read data.

	Input and output streams are used throughout the library - subclasses can override
	some or all of the virtual functions to implement their behaviour.

	@see OutputStream, MemoryInputStream, BufferedInputStream, FileInputStream
*/
class JUCE_API  InputStream
{
public:
	/** Destructor. */
	virtual ~InputStream()  {}

	/** Returns the total number of bytes available for reading in this stream.

		Note that this is the number of bytes available from the start of the
		stream, not from the current position.

		If the size of the stream isn't actually known, this may return -1.
	*/
	virtual int64 getTotalLength() = 0;

	/** Returns true if the stream has no more data to read. */
	virtual bool isExhausted() = 0;

	/** Reads some data from the stream into a memory buffer.

		This is the only read method that subclasses actually need to implement, as the
		InputStream base class implements the other read methods in terms of this one (although
		it's often more efficient for subclasses to implement them directly).

		@param destBuffer       the destination buffer for the data. This must not be null.
		@param maxBytesToRead   the maximum number of bytes to read - make sure the
								memory block passed in is big enough to contain this
								many bytes. This value must not be negative.

		@returns    the actual number of bytes that were read, which may be less than
					maxBytesToRead if the stream is exhausted before it gets that far
	*/
	virtual int read (void* destBuffer, int maxBytesToRead) = 0;

	/** Reads a byte from the stream.

		If the stream is exhausted, this will return zero.

		@see OutputStream::writeByte
	*/
	virtual char readByte();

	/** Reads a boolean from the stream.

		The bool is encoded as a single byte - 1 for true, 0 for false.

		If the stream is exhausted, this will return false.

		@see OutputStream::writeBool
	*/
	virtual bool readBool();

	/** Reads two bytes from the stream as a little-endian 16-bit value.

		If the next two bytes read are byte1 and byte2, this returns
		(byte1 | (byte2 << 8)).

		If the stream is exhausted partway through reading the bytes, this will return zero.

		@see OutputStream::writeShort, readShortBigEndian
	*/
	virtual short readShort();

	/** Reads two bytes from the stream as a little-endian 16-bit value.

		If the next two bytes read are byte1 and byte2, this returns
		(byte2 | (byte1 << 8)).

		If the stream is exhausted partway through reading the bytes, this will return zero.

		@see OutputStream::writeShortBigEndian, readShort
	*/
	virtual short readShortBigEndian();

	/** Reads four bytes from the stream as a little-endian 32-bit value.

		If the next four bytes are byte1 to byte4, this returns
		(byte1 | (byte2 << 8) | (byte3 << 16) | (byte4 << 24)).

		If the stream is exhausted partway through reading the bytes, this will return zero.

		@see OutputStream::writeInt, readIntBigEndian
	*/
	virtual int readInt();

	/** Reads four bytes from the stream as a big-endian 32-bit value.

		If the next four bytes are byte1 to byte4, this returns
		(byte4 | (byte3 << 8) | (byte2 << 16) | (byte1 << 24)).

		If the stream is exhausted partway through reading the bytes, this will return zero.

		@see OutputStream::writeIntBigEndian, readInt
	*/
	virtual int readIntBigEndian();

	/** Reads eight bytes from the stream as a little-endian 64-bit value.

		If the next eight bytes are byte1 to byte8, this returns
		(byte1 | (byte2 << 8) | (byte3 << 16) | (byte4 << 24) | (byte5 << 32) | (byte6 << 40) | (byte7 << 48) | (byte8 << 56)).

		If the stream is exhausted partway through reading the bytes, this will return zero.

		@see OutputStream::writeInt64, readInt64BigEndian
	*/
	virtual int64 readInt64();

	/** Reads eight bytes from the stream as a big-endian 64-bit value.

		If the next eight bytes are byte1 to byte8, this returns
		(byte8 | (byte7 << 8) | (byte6 << 16) | (byte5 << 24) | (byte4 << 32) | (byte3 << 40) | (byte2 << 48) | (byte1 << 56)).

		If the stream is exhausted partway through reading the bytes, this will return zero.

		@see OutputStream::writeInt64BigEndian, readInt64
	*/
	virtual int64 readInt64BigEndian();

	/** Reads four bytes as a 32-bit floating point value.

		The raw 32-bit encoding of the float is read from the stream as a little-endian int.

		If the stream is exhausted partway through reading the bytes, this will return zero.

		@see OutputStream::writeFloat, readDouble
	*/
	virtual float readFloat();

	/** Reads four bytes as a 32-bit floating point value.

		The raw 32-bit encoding of the float is read from the stream as a big-endian int.

		If the stream is exhausted partway through reading the bytes, this will return zero.

		@see OutputStream::writeFloatBigEndian, readDoubleBigEndian
	*/
	virtual float readFloatBigEndian();

	/** Reads eight bytes as a 64-bit floating point value.

		The raw 64-bit encoding of the double is read from the stream as a little-endian int64.

		If the stream is exhausted partway through reading the bytes, this will return zero.

		@see OutputStream::writeDouble, readFloat
	*/
	virtual double readDouble();

	/** Reads eight bytes as a 64-bit floating point value.

		The raw 64-bit encoding of the double is read from the stream as a big-endian int64.

		If the stream is exhausted partway through reading the bytes, this will return zero.

		@see OutputStream::writeDoubleBigEndian, readFloatBigEndian
	*/
	virtual double readDoubleBigEndian();

	/** Reads an encoded 32-bit number from the stream using a space-saving compressed format.

		For small values, this is more space-efficient than using readInt() and OutputStream::writeInt()

		The format used is: number of significant bytes + up to 4 bytes in little-endian order.

		@see OutputStream::writeCompressedInt()
	*/
	virtual int readCompressedInt();

	/** Reads a UTF8 string from the stream, up to the next linefeed or carriage return.

		This will read up to the next "\n" or "\r\n" or end-of-stream.

		After this call, the stream's position will be left pointing to the next character
		following the line-feed, but the linefeeds aren't included in the string that
		is returned.
	*/
	virtual String readNextLine();

	/** Reads a zero-terminated UTF8 string from the stream.

		This will read characters from the stream until it hits a zero character or
		end-of-stream.

		@see OutputStream::writeString, readEntireStreamAsString
	*/
	virtual String readString();

	/** Tries to read the whole stream and turn it into a string.

		This will read from the stream's current position until the end-of-stream, and
		will try to make an educated guess about whether it's unicode or an 8-bit encoding.
	*/
	virtual String readEntireStreamAsString();

	/** Reads from the stream and appends the data to a MemoryBlock.

		@param destBlock            the block to append the data onto
		@param maxNumBytesToRead    if this is a positive value, it sets a limit to the number
									of bytes that will be read - if it's negative, data
									will be read until the stream is exhausted.
		@returns the number of bytes that were added to the memory block
	*/
	virtual int readIntoMemoryBlock (MemoryBlock& destBlock,
									 ssize_t maxNumBytesToRead = -1);

	/** Returns the offset of the next byte that will be read from the stream.

		@see setPosition
	*/
	virtual int64 getPosition() = 0;

	/** Tries to move the current read position of the stream.

		The position is an absolute number of bytes from the stream's start.

		Some streams might not be able to do this, in which case they should do
		nothing and return false. Others might be able to manage it by resetting
		themselves and skipping to the correct position, although this is
		obviously a bit slow.

		@returns  true if the stream manages to reposition itself correctly
		@see getPosition
	*/
	virtual bool setPosition (int64 newPosition) = 0;

	/** Reads and discards a number of bytes from the stream.

		Some input streams might implement this efficiently, but the base
		class will just keep reading data until the requisite number of bytes
		have been done.
	*/
	virtual void skipNextBytes (int64 numBytesToSkip);

protected:

	InputStream() noexcept {}

private:
	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (InputStream);
};

#endif   // __JUCE_INPUTSTREAM_JUCEHEADER__

/*** End of inlined file: juce_InputStream.h ***/

#ifndef DOXYGEN
 class ReferenceCountedObject;
 class DynamicObject;
#endif

/**
	A variant class, that can be used to hold a range of primitive values.

	A var object can hold a range of simple primitive values, strings, or
	any kind of ReferenceCountedObject. The var class is intended to act like
	the kind of values used in dynamic scripting languages.

	You can save/load var objects either in a small, proprietary binary format
	using writeToStream()/readFromStream(), or as JSON by using the JSON class.

	@see JSON, DynamicObject
*/
class JUCE_API  var
{
public:

	typedef const var (DynamicObject::*MethodFunction) (const var* arguments, int numArguments);
	typedef Identifier identifier;

	/** Creates a void variant. */
	var() noexcept;

	/** Destructor. */
	~var() noexcept;

	/** A static var object that can be used where you need an empty variant object. */
	static const var null;

	var (const var& valueToCopy);
	var (int value) noexcept;
	var (int64 value) noexcept;
	var (bool value) noexcept;
	var (double value) noexcept;
	var (const char* value);
	var (const wchar_t* value);
	var (const String& value);
	var (const Array<var>& value);
	var (ReferenceCountedObject* object);
	var (MethodFunction method) noexcept;

	var& operator= (const var& valueToCopy);
	var& operator= (int value);
	var& operator= (int64 value);
	var& operator= (bool value);
	var& operator= (double value);
	var& operator= (const char* value);
	var& operator= (const wchar_t* value);
	var& operator= (const String& value);
	var& operator= (const Array<var>& value);
	var& operator= (ReferenceCountedObject* object);
	var& operator= (MethodFunction method);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	var (var&& other) noexcept;
	var (String&& value);
	var& operator= (var&& other) noexcept;
	var& operator= (String&& value);
   #endif

	void swapWith (var& other) noexcept;

	operator int() const noexcept;
	operator int64() const noexcept;
	operator bool() const noexcept;
	operator float() const noexcept;
	operator double() const noexcept;
	operator String() const;
	String toString() const;
	Array<var>* getArray() const noexcept;
	ReferenceCountedObject* getObject() const noexcept;
	DynamicObject* getDynamicObject() const noexcept;

	bool isVoid() const noexcept;
	bool isInt() const noexcept;
	bool isInt64() const noexcept;
	bool isBool() const noexcept;
	bool isDouble() const noexcept;
	bool isString() const noexcept;
	bool isObject() const noexcept;
	bool isArray() const noexcept;
	bool isMethod() const noexcept;

	/** Returns true if this var has the same value as the one supplied.
		Note that this ignores the type, so a string var "123" and an integer var with the
		value 123 are considered to be equal.
		@see equalsWithSameType
	*/
	bool equals (const var& other) const noexcept;

	/** Returns true if this var has the same value and type as the one supplied.
		This differs from equals() because e.g. "123" and 123 will be considered different.
		@see equals
	*/
	bool equalsWithSameType (const var& other) const noexcept;

	/** If the var is an array, this returns the number of elements.
		If the var isn't actually an array, this will return 0.
	*/
	int size() const;

	/** If the var is an array, this can be used to return one of its elements.
		To call this method, you must make sure that the var is actually an array, and
		that the index is a valid number. If these conditions aren't met, behaviour is
		undefined.
		For more control over the array's contents, you can call getArray() and manipulate
		it directly as an Array\<var\>.
	*/
	const var& operator[] (int arrayIndex) const;

	/** If the var is an array, this can be used to return one of its elements.
		To call this method, you must make sure that the var is actually an array, and
		that the index is a valid number. If these conditions aren't met, behaviour is
		undefined.
		For more control over the array's contents, you can call getArray() and manipulate
		it directly as an Array\<var\>.
	*/
	var& operator[] (int arrayIndex);

	/** Appends an element to the var, converting it to an array if it isn't already one.
		If the var isn't an array, it will be converted to one, and if its value was non-void,
		this value will be kept as the first element of the new array. The parameter value
		will then be appended to it.
		For more control over the array's contents, you can call getArray() and manipulate
		it directly as an Array\<var\>.
	*/
	void append (const var& valueToAppend);

	/** Inserts an element to the var, converting it to an array if it isn't already one.
		If the var isn't an array, it will be converted to one, and if its value was non-void,
		this value will be kept as the first element of the new array. The parameter value
		will then be inserted into it.
		For more control over the array's contents, you can call getArray() and manipulate
		it directly as an Array\<var\>.
	*/
	void insert (int index, const var& value);

	/** If the var is an array, this removes one of its elements.
		If the index is out-of-range or the var isn't an array, nothing will be done.
		For more control over the array's contents, you can call getArray() and manipulate
		it directly as an Array\<var\>.
	*/
	void remove (int index);

	/** Treating the var as an array, this resizes it to contain the specified number of elements.
		If the var isn't an array, it will be converted to one, and if its value was non-void,
		this value will be kept as the first element of the new array before resizing.
		For more control over the array's contents, you can call getArray() and manipulate
		it directly as an Array\<var\>.
	*/
	void resize (int numArrayElementsWanted);

	/** If the var is an array, this searches it for the first occurrence of the specified value,
		and returns its index.
		If the var isn't an array, or if the value isn't found, this returns -1.
	*/
	int indexOf (const var& value) const;

	/** If this variant is an object, this returns one of its properties. */
	var operator[] (const Identifier& propertyName) const;
	/** If this variant is an object, this returns one of its properties. */
	var operator[] (const char* propertyName) const;
	/** If this variant is an object, this returns one of its properties, or a default
		fallback value if the property is not set. */
	var getProperty (const Identifier& propertyName, const var& defaultReturnValue) const;

	/** If this variant is an object, this invokes one of its methods with no arguments. */
	var call (const Identifier& method) const;
	/** If this variant is an object, this invokes one of its methods with one argument. */
	var call (const Identifier& method, const var& arg1) const;
	/** If this variant is an object, this invokes one of its methods with 2 arguments. */
	var call (const Identifier& method, const var& arg1, const var& arg2) const;
	/** If this variant is an object, this invokes one of its methods with 3 arguments. */
	var call (const Identifier& method, const var& arg1, const var& arg2, const var& arg3);
	/** If this variant is an object, this invokes one of its methods with 4 arguments. */
	var call (const Identifier& method, const var& arg1, const var& arg2, const var& arg3, const var& arg4) const;
	/** If this variant is an object, this invokes one of its methods with 5 arguments. */
	var call (const Identifier& method, const var& arg1, const var& arg2, const var& arg3, const var& arg4, const var& arg5) const;
	/** If this variant is an object, this invokes one of its methods with a list of arguments. */
	var invoke (const Identifier& method, const var* arguments, int numArguments) const;

	/** Writes a binary representation of this value to a stream.
		The data can be read back later using readFromStream().
		@see JSON
	*/
	void writeToStream (OutputStream& output) const;

	/** Reads back a stored binary representation of a value.
		The data in the stream must have been written using writeToStream(), or this
		will have unpredictable results.
		@see JSON
	*/
	static var readFromStream (InputStream& input);

private:

	class VariantType;         friend class VariantType;
	class VariantType_Void;    friend class VariantType_Void;
	class VariantType_Int;     friend class VariantType_Int;
	class VariantType_Int64;   friend class VariantType_Int64;
	class VariantType_Double;  friend class VariantType_Double;
	class VariantType_Bool;    friend class VariantType_Bool;
	class VariantType_String;  friend class VariantType_String;
	class VariantType_Object;  friend class VariantType_Object;
	class VariantType_Array;   friend class VariantType_Array;
	class VariantType_Method;  friend class VariantType_Method;

	union ValueUnion
	{
		int intValue;
		int64 int64Value;
		bool boolValue;
		double doubleValue;
		char stringValue [sizeof (String)];
		ReferenceCountedObject* objectValue;
		Array<var>* arrayValue;
		MethodFunction methodValue;
	};

	const VariantType* type;
	ValueUnion value;

	Array<var>* convertToArray();
	friend class DynamicObject;
	var invokeMethod (DynamicObject*, const var*, int) const;
};

/** Compares the values of two var objects, using the var::equals() comparison. */
bool operator== (const var& v1, const var& v2) noexcept;
/** Compares the values of two var objects, using the var::equals() comparison. */
bool operator!= (const var& v1, const var& v2) noexcept;
bool operator== (const var& v1, const String& v2);
bool operator!= (const var& v1, const String& v2);
bool operator== (const var& v1, const char* v2);
bool operator!= (const var& v1, const char* v2);

#endif   // __JUCE_VARIANT_JUCEHEADER__

/*** End of inlined file: juce_Variant.h ***/


/*** Start of inlined file: juce_LinkedListPointer.h ***/
#ifndef __JUCE_LINKEDLISTPOINTER_JUCEHEADER__
#define __JUCE_LINKEDLISTPOINTER_JUCEHEADER__

/**
	Helps to manipulate singly-linked lists of objects.

	For objects that are designed to contain a pointer to the subsequent item in the
	list, this class contains methods to deal with the list. To use it, the ObjectType
	class that it points to must contain a LinkedListPointer called nextListItem, e.g.

	@code
	struct MyObject
	{
		int x, y, z;

		// A linkable object must contain a member with this name and type, which must be
		// accessible by the LinkedListPointer class. (This doesn't mean it has to be public -
		// you could make your class a friend of a LinkedListPointer<MyObject> instead).
		LinkedListPointer<MyObject> nextListItem;
	};

	LinkedListPointer<MyObject> myList;
	myList.append (new MyObject());
	myList.append (new MyObject());

	int numItems = myList.size(); // returns 2
	MyObject* lastInList = myList.getLast();
	@endcode
*/
template <class ObjectType>
class LinkedListPointer
{
public:

	/** Creates a null pointer to an empty list. */
	LinkedListPointer() noexcept
		: item (nullptr)
	{
	}

	/** Creates a pointer to a list whose head is the item provided. */
	explicit LinkedListPointer (ObjectType* const headItem) noexcept
		: item (headItem)
	{
	}

	/** Sets this pointer to point to a new list. */
	LinkedListPointer& operator= (ObjectType* const newItem) noexcept
	{
		item = newItem;
		return *this;
	}

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	LinkedListPointer (LinkedListPointer&& other) noexcept
		: item (other.item)
	{
		other.item = nullptr;
	}

	LinkedListPointer& operator= (LinkedListPointer&& other) noexcept
	{
		jassert (this != &other); // hopefully the compiler should make this situation impossible!

		item = other.item;
		other.item = nullptr;
		return *this;
	}
   #endif

	/** Returns the item which this pointer points to. */
	inline operator ObjectType*() const noexcept
	{
		return item;
	}

	/** Returns the item which this pointer points to. */
	inline ObjectType* get() const noexcept
	{
		return item;
	}

	/** Returns the last item in the list which this pointer points to.
		This will iterate the list and return the last item found. Obviously the speed
		of this operation will be proportional to the size of the list. If the list is
		empty the return value will be this object.
		If you're planning on appending a number of items to your list, it's much more
		efficient to use the Appender class than to repeatedly call getLast() to find the end.
	*/
	LinkedListPointer& getLast() noexcept
	{
		LinkedListPointer* l = this;

		while (l->item != nullptr)
			l = &(l->item->nextListItem);

		return *l;
	}

	/** Returns the number of items in the list.
		Obviously with a simple linked list, getting the size involves iterating the list, so
		this can be a lengthy operation - be careful when using this method in your code.
	*/
	int size() const noexcept
	{
		int total = 0;

		for (ObjectType* i = item; i != nullptr; i = i->nextListItem)
			++total;

		return total;
	}

	/** Returns the item at a given index in the list.
		Since the only way to find an item is to iterate the list, this operation can obviously
		be slow, depending on its size, so you should be careful when using this in algorithms.
	*/
	LinkedListPointer& operator[] (int index) noexcept
	{
		LinkedListPointer* l = this;

		while (--index >= 0 && l->item != nullptr)
			l = &(l->item->nextListItem);

		return *l;
	}

	/** Returns the item at a given index in the list.
		Since the only way to find an item is to iterate the list, this operation can obviously
		be slow, depending on its size, so you should be careful when using this in algorithms.
	*/
	const LinkedListPointer& operator[] (int index) const noexcept
	{
		const LinkedListPointer* l = this;

		while (--index >= 0 && l->item != nullptr)
			l = &(l->item->nextListItem);

		return *l;
	}

	/** Returns true if the list contains the given item. */
	bool contains (const ObjectType* const itemToLookFor) const noexcept
	{
		for (ObjectType* i = item; i != nullptr; i = i->nextListItem)
			if (itemToLookFor == i)
				return true;

		return false;
	}

	/** Inserts an item into the list, placing it before the item that this pointer
		currently points to.
	*/
	void insertNext (ObjectType* const newItem)
	{
		jassert (newItem != nullptr);
		jassert (newItem->nextListItem == nullptr);
		newItem->nextListItem = item;
		item = newItem;
	}

	/** Inserts an item at a numeric index in the list.
		Obviously this will involve iterating the list to find the item at the given index,
		so be careful about the impact this may have on execution time.
	*/
	void insertAtIndex (int index, ObjectType* newItem)
	{
		jassert (newItem != nullptr);
		LinkedListPointer* l = this;

		while (index != 0 && l->item != nullptr)
		{
			l = &(l->item->nextListItem);
			--index;
		}

		l->insertNext (newItem);
	}

	/** Replaces the object that this pointer points to, appending the rest of the list to
		the new object, and returning the old one.
	*/
	ObjectType* replaceNext (ObjectType* const newItem) noexcept
	{
		jassert (newItem != nullptr);
		jassert (newItem->nextListItem == nullptr);

		ObjectType* const oldItem = item;
		item = newItem;
		item->nextListItem = oldItem->nextListItem.item;
		oldItem->nextListItem = (ObjectType*) 0;
		return oldItem;
	}

	/** Adds an item to the end of the list.

		This operation involves iterating the whole list, so can be slow - if you need to
		append a number of items to your list, it's much more efficient to use the Appender
		class than to repeatedly call append().
	*/
	void append (ObjectType* const newItem)
	{
		getLast().item = newItem;
	}

	/** Creates copies of all the items in another list and adds them to this one.
		This will use the ObjectType's copy constructor to try to create copies of each
		item in the other list, and appends them to this list.
	*/
	void addCopyOfList (const LinkedListPointer& other)
	{
		LinkedListPointer* insertPoint = this;

		for (ObjectType* i = other.item; i != nullptr; i = i->nextListItem)
		{
			insertPoint->insertNext (new ObjectType (*i));
			insertPoint = &(insertPoint->item->nextListItem);
		}
	}

	/** Removes the head item from the list.
		This won't delete the object that is removed, but returns it, so the caller can
		delete it if necessary.
	*/
	ObjectType* removeNext() noexcept
	{
		ObjectType* const oldItem = item;

		if (oldItem != nullptr)
		{
			item = oldItem->nextListItem;
			oldItem->nextListItem = (ObjectType*) 0;
		}

		return oldItem;
	}

	/** Removes a specific item from the list.
		Note that this will not delete the item, it simply unlinks it from the list.
	*/
	void remove (ObjectType* const itemToRemove)
	{
		LinkedListPointer* const l = findPointerTo (itemToRemove);

		if (l != nullptr)
			l->removeNext();
	}

	/** Iterates the list, calling the delete operator on all of its elements and
		leaving this pointer empty.
	*/
	void deleteAll()
	{
		while (item != nullptr)
		{
			ObjectType* const oldItem = item;
			item = oldItem->nextListItem;
			delete oldItem;
		}
	}

	/** Finds a pointer to a given item.
		If the item is found in the list, this returns the pointer that points to it. If
		the item isn't found, this returns null.
	*/
	LinkedListPointer* findPointerTo (ObjectType* const itemToLookFor) noexcept
	{
		LinkedListPointer* l = this;

		while (l->item != nullptr)
		{
			if (l->item == itemToLookFor)
				return l;

			l = &(l->item->nextListItem);
		}

		return nullptr;
	}

	/** Copies the items in the list to an array.
		The destArray must contain enough elements to hold the entire list - no checks are
		made for this!
	*/
	void copyToArray (ObjectType** destArray) const noexcept
	{
		jassert (destArray != nullptr);

		for (ObjectType* i = item; i != nullptr; i = i->nextListItem)
			*destArray++ = i;
	}

	/** Swaps this pointer with another one */
	void swapWith (LinkedListPointer& other) noexcept
	{
		std::swap (item, other.item);
	}

	/**
		Allows efficient repeated insertions into a list.

		You can create an Appender object which points to the last element in your
		list, and then repeatedly call Appender::append() to add items to the end
		of the list in O(1) time.
	*/
	class Appender
	{
	public:
		/** Creates an appender which will add items to the given list.
		*/
		Appender (LinkedListPointer& endOfListPointer) noexcept
			: endOfList (&endOfListPointer)
		{
			// This can only be used to add to the end of a list.
			jassert (endOfListPointer.item == nullptr);
		}

		/** Appends an item to the list. */
		void append (ObjectType* const newItem) noexcept
		{
			*endOfList = newItem;
			endOfList = &(newItem->nextListItem);
		}

	private:
		LinkedListPointer* endOfList;

		JUCE_DECLARE_NON_COPYABLE (Appender);
	};

private:

	ObjectType* item;

	JUCE_DECLARE_NON_COPYABLE (LinkedListPointer);
};

#endif   // __JUCE_LINKEDLISTPOINTER_JUCEHEADER__

/*** End of inlined file: juce_LinkedListPointer.h ***/

class XmlElement;
#ifndef DOXYGEN
 class JSONFormatter;
#endif

/** Holds a set of named var objects.

	This can be used as a basic structure to hold a set of var object, which can
	be retrieved by using their identifier.
*/
class JUCE_API  NamedValueSet
{
public:
	/** Creates an empty set. */
	NamedValueSet() noexcept;

	/** Creates a copy of another set. */
	NamedValueSet (const NamedValueSet& other);

	/** Replaces this set with a copy of another set. */
	NamedValueSet& operator= (const NamedValueSet& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	NamedValueSet (NamedValueSet&& other) noexcept;
	NamedValueSet& operator= (NamedValueSet&& other) noexcept;
   #endif

	/** Destructor. */
	~NamedValueSet();

	bool operator== (const NamedValueSet& other) const;
	bool operator!= (const NamedValueSet& other) const;

	/** Returns the total number of values that the set contains. */
	int size() const noexcept;

	/** Returns the value of a named item.
		If the name isn't found, this will return a void variant.
		@see getProperty
	*/
	const var& operator[] (const Identifier& name) const;

	/** Tries to return the named value, but if no such value is found, this will
		instead return the supplied default value.
	*/
	var getWithDefault (const Identifier& name, const var& defaultReturnValue) const;

	/** Changes or adds a named value.
		@returns    true if a value was changed or added; false if the
					value was already set the the value passed-in.
	*/
	bool set (const Identifier& name, const var& newValue);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	/** Changes or adds a named value.
		@returns    true if a value was changed or added; false if the
					value was already set the the value passed-in.
	*/
	bool set (const Identifier& name, var&& newValue);
   #endif

	/** Returns true if the set contains an item with the specified name. */
	bool contains (const Identifier& name) const;

	/** Removes a value from the set.
		@returns    true if a value was removed; false if there was no value
					with the name that was given.
	*/
	bool remove (const Identifier& name);

	/** Returns the name of the value at a given index.
		The index must be between 0 and size() - 1.
	*/
	const Identifier getName (int index) const;

	/** Returns the value of the item at a given index.
		The index must be between 0 and size() - 1.
	*/
	const var& getValueAt (int index) const;

	/** Removes all values. */
	void clear();

	/** Returns a pointer to the var that holds a named value, or null if there is
		no value with this name.

		Do not use this method unless you really need access to the internal var object
		for some reason - for normal reading and writing always prefer operator[]() and set().
	*/
	var* getVarPointer (const Identifier& name) const noexcept;

	/** Sets properties to the values of all of an XML element's attributes. */
	void setFromXmlAttributes (const XmlElement& xml);

	/** Sets attributes in an XML element corresponding to each of this object's
		properties.
	*/
	void copyToXmlAttributes (XmlElement& xml) const;

private:

	class NamedValue
	{
	public:
		NamedValue() noexcept;
		NamedValue (const NamedValue&);
		NamedValue (const Identifier& name, const var& value);
		NamedValue& operator= (const NamedValue&);
	   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
		NamedValue (NamedValue&&) noexcept;
		NamedValue (const Identifier& name, var&& value);
		NamedValue& operator= (NamedValue&&) noexcept;
	   #endif
		bool operator== (const NamedValue& other) const noexcept;

		LinkedListPointer<NamedValue> nextListItem;
		Identifier name;
		var value;

	private:
		JUCE_LEAK_DETECTOR (NamedValue);
	};

	friend class LinkedListPointer<NamedValue>;
	LinkedListPointer<NamedValue> values;

	friend class JSONFormatter;
};

#endif   // __JUCE_NAMEDVALUESET_JUCEHEADER__

/*** End of inlined file: juce_NamedValueSet.h ***/


/*** Start of inlined file: juce_ReferenceCountedObject.h ***/
#ifndef __JUCE_REFERENCECOUNTEDOBJECT_JUCEHEADER__
#define __JUCE_REFERENCECOUNTEDOBJECT_JUCEHEADER__

/**
	Adds reference-counting to an object.

	To add reference-counting to a class, derive it from this class, and
	use the ReferenceCountedObjectPtr class to point to it.

	e.g. @code
	class MyClass : public ReferenceCountedObject
	{
		void foo();

		// This is a neat way of declaring a typedef for a pointer class,
		// rather than typing out the full templated name each time..
		typedef ReferenceCountedObjectPtr<MyClass> Ptr;
	};

	MyClass::Ptr p = new MyClass();
	MyClass::Ptr p2 = p;
	p = nullptr;
	p2->foo();
	@endcode

	Once a new ReferenceCountedObject has been assigned to a pointer, be
	careful not to delete the object manually.

	This class uses an Atomic<int> value to hold the reference count, so that it
	the pointers can be passed between threads safely. For a faster but non-thread-safe
	version, use SingleThreadedReferenceCountedObject instead.

	@see ReferenceCountedObjectPtr, ReferenceCountedArray, SingleThreadedReferenceCountedObject
*/
class JUCE_API  ReferenceCountedObject
{
public:

	/** Increments the object's reference count.

		This is done automatically by the smart pointer, but is public just
		in case it's needed for nefarious purposes.
	*/
	inline void incReferenceCount() noexcept
	{
		++refCount;
	}

	/** Decreases the object's reference count.

		If the count gets to zero, the object will be deleted.
	*/
	inline void decReferenceCount() noexcept
	{
		jassert (getReferenceCount() > 0);

		if (--refCount == 0)
			delete this;
	}

	/** Returns the object's current reference count. */
	inline int getReferenceCount() const noexcept       { return refCount.get(); }

protected:

	/** Creates the reference-counted object (with an initial ref count of zero). */
	ReferenceCountedObject()
	{
	}

	/** Destructor. */
	virtual ~ReferenceCountedObject()
	{
		// it's dangerous to delete an object that's still referenced by something else!
		jassert (getReferenceCount() == 0);
	}

	/** Resets the reference count to zero without deleting the object.
		You should probably never need to use this!
	*/
	void resetReferenceCount() noexcept
	{
		refCount = 0;
	}

private:

	Atomic <int> refCount;
};

/**
	Adds reference-counting to an object.

	This is efectively a version of the ReferenceCountedObject class, but which
	uses a non-atomic counter, and so is not thread-safe (but which will be more
	efficient).
	For more details on how to use it, see the ReferenceCountedObject class notes.

	@see ReferenceCountedObject, ReferenceCountedObjectPtr, ReferenceCountedArray
*/
class JUCE_API  SingleThreadedReferenceCountedObject
{
public:

	/** Increments the object's reference count.

		This is done automatically by the smart pointer, but is public just
		in case it's needed for nefarious purposes.
	*/
	inline void incReferenceCount() noexcept
	{
		++refCount;
	}

	/** Decreases the object's reference count.

		If the count gets to zero, the object will be deleted.
	*/
	inline void decReferenceCount() noexcept
	{
		jassert (getReferenceCount() > 0);

		if (--refCount == 0)
			delete this;
	}

	/** Returns the object's current reference count. */
	inline int getReferenceCount() const noexcept       { return refCount; }

protected:

	/** Creates the reference-counted object (with an initial ref count of zero). */
	SingleThreadedReferenceCountedObject() : refCount (0)  {}

	/** Destructor. */
	virtual ~SingleThreadedReferenceCountedObject()
	{
		// it's dangerous to delete an object that's still referenced by something else!
		jassert (getReferenceCount() == 0);
	}

private:

	int refCount;
};

/**
	A smart-pointer class which points to a reference-counted object.

	The template parameter specifies the class of the object you want to point to - the easiest
	way to make a class reference-countable is to simply make it inherit from ReferenceCountedObject,
	but if you need to, you could roll your own reference-countable class by implementing a pair of
	mathods called incReferenceCount() and decReferenceCount().

	When using this class, you'll probably want to create a typedef to abbreviate the full
	templated name - e.g.
	@code typedef ReferenceCountedObjectPtr<MyClass> MyClassPtr;@endcode

	@see ReferenceCountedObject, ReferenceCountedObjectArray
*/
template <class ReferenceCountedObjectClass>
class ReferenceCountedObjectPtr
{
public:
	/** The class being referenced by this pointer. */
	typedef ReferenceCountedObjectClass ReferencedType;

	/** Creates a pointer to a null object. */
	inline ReferenceCountedObjectPtr() noexcept
		: referencedObject (nullptr)
	{
	}

	/** Creates a pointer to an object.

		This will increment the object's reference-count if it is non-null.
	*/
	inline ReferenceCountedObjectPtr (ReferenceCountedObjectClass* const refCountedObject) noexcept
		: referencedObject (refCountedObject)
	{
		if (refCountedObject != nullptr)
			refCountedObject->incReferenceCount();
	}

	/** Copies another pointer.
		This will increment the object's reference-count (if it is non-null).
	*/
	inline ReferenceCountedObjectPtr (const ReferenceCountedObjectPtr& other) noexcept
		: referencedObject (other.referencedObject)
	{
		if (referencedObject != nullptr)
			referencedObject->incReferenceCount();
	}

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	/** Takes-over the object from another pointer. */
	inline ReferenceCountedObjectPtr (ReferenceCountedObjectPtr&& other) noexcept
		: referencedObject (other.referencedObject)
	{
		other.referencedObject = nullptr;
	}
   #endif

	/** Copies another pointer.
		This will increment the object's reference-count (if it is non-null).
	*/
	template <class DerivedClass>
	inline ReferenceCountedObjectPtr (const ReferenceCountedObjectPtr<DerivedClass>& other) noexcept
		: referencedObject (static_cast <ReferenceCountedObjectClass*> (other.getObject()))
	{
		if (referencedObject != nullptr)
			referencedObject->incReferenceCount();
	}

	/** Changes this pointer to point at a different object.

		The reference count of the old object is decremented, and it might be
		deleted if it hits zero. The new object's count is incremented.
	*/
	ReferenceCountedObjectPtr& operator= (const ReferenceCountedObjectPtr& other)
	{
		return operator= (other.referencedObject);
	}

	/** Changes this pointer to point at a different object.

		The reference count of the old object is decremented, and it might be
		deleted if it hits zero. The new object's count is incremented.
	*/
	template <class DerivedClass>
	ReferenceCountedObjectPtr& operator= (const ReferenceCountedObjectPtr<DerivedClass>& other)
	{
		return operator= (static_cast <ReferenceCountedObjectClass*> (other.getObject()));
	}

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	/** Takes-over the object from another pointer. */
	ReferenceCountedObjectPtr& operator= (ReferenceCountedObjectPtr&& other)
	{
		std::swap (referencedObject, other.referencedObject);
		return *this;
	}
   #endif

	/** Changes this pointer to point at a different object.

		The reference count of the old object is decremented, and it might be
		deleted if it hits zero. The new object's count is incremented.
	*/
	ReferenceCountedObjectPtr& operator= (ReferenceCountedObjectClass* const newObject)
	{
		if (referencedObject != newObject)
		{
			if (newObject != nullptr)
				newObject->incReferenceCount();

			ReferenceCountedObjectClass* const oldObject = referencedObject;
			referencedObject = newObject;

			if (oldObject != nullptr)
				oldObject->decReferenceCount();
		}

		return *this;
	}

	/** Destructor.

		This will decrement the object's reference-count, and may delete it if it
		gets to zero.
	*/
	inline ~ReferenceCountedObjectPtr()
	{
		if (referencedObject != nullptr)
			referencedObject->decReferenceCount();
	}

	/** Returns the object that this pointer references.
		The pointer returned may be zero, of course.
	*/
	inline operator ReferenceCountedObjectClass*() const noexcept
	{
		return referencedObject;
	}

	// the -> operator is called on the referenced object
	inline ReferenceCountedObjectClass* operator->() const noexcept
	{
		return referencedObject;
	}

	/** Returns the object that this pointer references.
		The pointer returned may be zero, of course.
	*/
	inline ReferenceCountedObjectClass* getObject() const noexcept
	{
		return referencedObject;
	}

private:

	ReferenceCountedObjectClass* referencedObject;
};

/** Compares two ReferenceCountedObjectPointers. */
template <class ReferenceCountedObjectClass>
bool operator== (const ReferenceCountedObjectPtr<ReferenceCountedObjectClass>& object1, ReferenceCountedObjectClass* const object2) noexcept
{
	return object1.getObject() == object2;
}

/** Compares two ReferenceCountedObjectPointers. */
template <class ReferenceCountedObjectClass>
bool operator== (const ReferenceCountedObjectPtr<ReferenceCountedObjectClass>& object1, const ReferenceCountedObjectPtr<ReferenceCountedObjectClass>& object2) noexcept
{
	return object1.getObject() == object2.getObject();
}

/** Compares two ReferenceCountedObjectPointers. */
template <class ReferenceCountedObjectClass>
bool operator== (ReferenceCountedObjectClass* object1, ReferenceCountedObjectPtr<ReferenceCountedObjectClass>& object2) noexcept
{
	return object1 == object2.getObject();
}

/** Compares two ReferenceCountedObjectPointers. */
template <class ReferenceCountedObjectClass>
bool operator!= (const ReferenceCountedObjectPtr<ReferenceCountedObjectClass>& object1, const ReferenceCountedObjectClass* object2) noexcept
{
	return object1.getObject() != object2;
}

/** Compares two ReferenceCountedObjectPointers. */
template <class ReferenceCountedObjectClass>
bool operator!= (const ReferenceCountedObjectPtr<ReferenceCountedObjectClass>& object1, ReferenceCountedObjectPtr<ReferenceCountedObjectClass>& object2) noexcept
{
	return object1.getObject() != object2.getObject();
}

/** Compares two ReferenceCountedObjectPointers. */
template <class ReferenceCountedObjectClass>
bool operator!= (ReferenceCountedObjectClass* object1, ReferenceCountedObjectPtr<ReferenceCountedObjectClass>& object2) noexcept
{
	return object1 != object2.getObject();
}

#endif   // __JUCE_REFERENCECOUNTEDOBJECT_JUCEHEADER__

/*** End of inlined file: juce_ReferenceCountedObject.h ***/

/**
	Represents a dynamically implemented object.

	This class is primarily intended for wrapping scripting language objects,
	but could be used for other purposes.

	An instance of a DynamicObject can be used to store named properties, and
	by subclassing hasMethod() and invokeMethod(), you can give your object
	methods.
*/
class JUCE_API  DynamicObject  : public ReferenceCountedObject
{
public:

	DynamicObject();

	/** Destructor. */
	virtual ~DynamicObject();

	/** Returns true if the object has a property with this name.
		Note that if the property is actually a method, this will return false.
	*/
	virtual bool hasProperty (const Identifier& propertyName) const;

	/** Returns a named property.

		This returns a void if no such property exists.
	*/
	virtual var getProperty (const Identifier& propertyName) const;

	/** Sets a named property. */
	virtual void setProperty (const Identifier& propertyName, const var& newValue);

	/** Removes a named property. */
	virtual void removeProperty (const Identifier& propertyName);

	/** Checks whether this object has the specified method.

		The default implementation of this just checks whether there's a property
		with this name that's actually a method, but this can be overridden for
		building objects with dynamic invocation.
	*/
	virtual bool hasMethod (const Identifier& methodName) const;

	/** Invokes a named method on this object.

		The default implementation looks up the named property, and if it's a method
		call, then it invokes it.

		This method is virtual to allow more dynamic invocation to used for objects
		where the methods may not already be set as properies.
	*/
	virtual var invokeMethod (const Identifier& methodName,
							  const var* parameters,
							  int numParameters);

	/** Sets up a method.

		This is basically the same as calling setProperty (methodName, (var::MethodFunction) myFunction), but
		helps to avoid accidentally invoking the wrong type of var constructor. It also makes
		the code easier to read,

		The compiler will probably force you to use an explicit cast your method to a (var::MethodFunction), e.g.
		@code
		setMethod ("doSomething", (var::MethodFunction) &MyClass::doSomething);
		@endcode
	*/
	void setMethod (const Identifier& methodName,
					var::MethodFunction methodFunction);

	/** Removes all properties and methods from the object. */
	void clear();

	/** Returns the NamedValueSet that holds the object's properties. */
	NamedValueSet& getProperties() noexcept     { return properties; }

private:

	NamedValueSet properties;

	JUCE_LEAK_DETECTOR (DynamicObject);
};

#endif   // __JUCE_DYNAMICOBJECT_JUCEHEADER__

/*** End of inlined file: juce_DynamicObject.h ***/


#endif
#ifndef __JUCE_ELEMENTCOMPARATOR_JUCEHEADER__

#endif
#ifndef __JUCE_HASHMAP_JUCEHEADER__

/*** Start of inlined file: juce_HashMap.h ***/
#ifndef __JUCE_HASHMAP_JUCEHEADER__
#define __JUCE_HASHMAP_JUCEHEADER__


/*** Start of inlined file: juce_OwnedArray.h ***/
#ifndef __JUCE_OWNEDARRAY_JUCEHEADER__
#define __JUCE_OWNEDARRAY_JUCEHEADER__

/** An array designed for holding objects.

	This holds a list of pointers to objects, and will automatically
	delete the objects when they are removed from the array, or when the
	array is itself deleted.

	Declare it in the form:  OwnedArray<MyObjectClass>

	..and then add new objects, e.g.   myOwnedArray.add (new MyObjectClass());

	After adding objects, they are 'owned' by the array and will be deleted when
	removed or replaced.

	To make all the array's methods thread-safe, pass in "CriticalSection" as the templated
	TypeOfCriticalSectionToUse parameter, instead of the default DummyCriticalSection.

	@see Array, ReferenceCountedArray, StringArray, CriticalSection
*/
template <class ObjectClass,
		  class TypeOfCriticalSectionToUse = DummyCriticalSection>

class OwnedArray
{
public:

	/** Creates an empty array. */
	OwnedArray() noexcept
		: numUsed (0)
	{
	}

	/** Deletes the array and also deletes any objects inside it.

		To get rid of the array without deleting its objects, use its
		clear (false) method before deleting it.
	*/
	~OwnedArray()
	{
		clear (true);
	}

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	OwnedArray (OwnedArray&& other) noexcept
		: data (static_cast <ArrayAllocationBase <ObjectClass*, TypeOfCriticalSectionToUse>&&> (other.data)),
		  numUsed (other.numUsed)
	{
		other.numUsed = 0;
	}

	OwnedArray& operator= (OwnedArray&& other) noexcept
	{
		data = static_cast <ArrayAllocationBase <ObjectClass*, TypeOfCriticalSectionToUse>&&> (other.data);
		numUsed = other.numUsed;
		other.numUsed = 0;
		return *this;
	}
   #endif

	/** Clears the array, optionally deleting the objects inside it first. */
	void clear (const bool deleteObjects = true)
	{
		const ScopedLockType lock (getLock());

		if (deleteObjects)
		{
			while (numUsed > 0)
				delete data.elements [--numUsed];
		}

		data.setAllocatedSize (0);
		numUsed = 0;
	}

	/** Returns the number of items currently in the array.
		@see operator[]
	*/
	inline int size() const noexcept
	{
		return numUsed;
	}

	/** Returns a pointer to the object at this index in the array.

		If the index is out-of-range, this will return a null pointer, (and
		it could be null anyway, because it's ok for the array to hold null
		pointers as well as objects).

		@see getUnchecked
	*/
	inline ObjectClass* operator[] (const int index) const noexcept
	{
		const ScopedLockType lock (getLock());
		return isPositiveAndBelow (index, numUsed) ? data.elements [index]
												   : static_cast <ObjectClass*> (nullptr);
	}

	/** Returns a pointer to the object at this index in the array, without checking whether the index is in-range.

		This is a faster and less safe version of operator[] which doesn't check the index passed in, so
		it can be used when you're sure the index if always going to be legal.
	*/
	inline ObjectClass* getUnchecked (const int index) const noexcept
	{
		const ScopedLockType lock (getLock());
		jassert (isPositiveAndBelow (index, numUsed));
		return data.elements [index];
	}

	/** Returns a pointer to the first object in the array.

		This will return a null pointer if the array's empty.
		@see getLast
	*/
	inline ObjectClass* getFirst() const noexcept
	{
		const ScopedLockType lock (getLock());
		return numUsed > 0 ? data.elements [0]
						   : static_cast <ObjectClass*> (nullptr);
	}

	/** Returns a pointer to the last object in the array.

		This will return a null pointer if the array's empty.
		@see getFirst
	*/
	inline ObjectClass* getLast() const noexcept
	{
		const ScopedLockType lock (getLock());
		return numUsed > 0 ? data.elements [numUsed - 1]
						   : static_cast <ObjectClass*> (nullptr);
	}

	/** Returns a pointer to the actual array data.
		This pointer will only be valid until the next time a non-const method
		is called on the array.
	*/
	inline ObjectClass** getRawDataPointer() noexcept
	{
		return data.elements;
	}

	/** Returns a pointer to the first element in the array.
		This method is provided for compatibility with standard C++ iteration mechanisms.
	*/
	inline ObjectClass** begin() const noexcept
	{
		return data.elements;
	}

	/** Returns a pointer to the element which follows the last element in the array.
		This method is provided for compatibility with standard C++ iteration mechanisms.
	*/
	inline ObjectClass** end() const noexcept
	{
		return data.elements + numUsed;
	}

	/** Finds the index of an object which might be in the array.

		@param objectToLookFor    the object to look for
		@returns                  the index at which the object was found, or -1 if it's not found
	*/
	int indexOf (const ObjectClass* const objectToLookFor) const noexcept
	{
		const ScopedLockType lock (getLock());
		ObjectClass* const* e = data.elements.getData();
		ObjectClass* const* const end_ = e + numUsed;

		for (; e != end_; ++e)
			if (objectToLookFor == *e)
				return static_cast <int> (e - data.elements.getData());

		return -1;
	}

	/** Returns true if the array contains a specified object.

		@param objectToLookFor      the object to look for
		@returns                    true if the object is in the array
	*/
	bool contains (const ObjectClass* const objectToLookFor) const noexcept
	{
		const ScopedLockType lock (getLock());
		ObjectClass* const* e = data.elements.getData();
		ObjectClass* const* const end_ = e + numUsed;

		for (; e != end_; ++e)
			if (objectToLookFor == *e)
				return true;

		return false;
	}

	/** Appends a new object to the end of the array.

		Note that the this object will be deleted by the OwnedArray when it
		is removed, so be careful not to delete it somewhere else.

		Also be careful not to add the same object to the array more than once,
		as this will obviously cause deletion of dangling pointers.

		@param newObject       the new object to add to the array
		@see set, insert, addIfNotAlreadyThere, addSorted
	*/
	void add (const ObjectClass* const newObject) noexcept
	{
		const ScopedLockType lock (getLock());
		data.ensureAllocatedSize (numUsed + 1);
		data.elements [numUsed++] = const_cast <ObjectClass*> (newObject);
	}

	/** Inserts a new object into the array at the given index.

		Note that the this object will be deleted by the OwnedArray when it
		is removed, so be careful not to delete it somewhere else.

		If the index is less than 0 or greater than the size of the array, the
		element will be added to the end of the array.
		Otherwise, it will be inserted into the array, moving all the later elements
		along to make room.

		Be careful not to add the same object to the array more than once,
		as this will obviously cause deletion of dangling pointers.

		@param indexToInsertAt      the index at which the new element should be inserted
		@param newObject            the new object to add to the array
		@see add, addSorted, addIfNotAlreadyThere, set
	*/
	void insert (int indexToInsertAt,
				 const ObjectClass* const newObject) noexcept
	{
		if (indexToInsertAt >= 0)
		{
			const ScopedLockType lock (getLock());

			if (indexToInsertAt > numUsed)
				indexToInsertAt = numUsed;

			data.ensureAllocatedSize (numUsed + 1);

			ObjectClass** const e = data.elements + indexToInsertAt;
			const int numToMove = numUsed - indexToInsertAt;

			if (numToMove > 0)
				memmove (e + 1, e, numToMove * sizeof (ObjectClass*));

			*e = const_cast <ObjectClass*> (newObject);
			++numUsed;
		}
		else
		{
			add (newObject);
		}
	}

	/** Appends a new object at the end of the array as long as the array doesn't
		already contain it.

		If the array already contains a matching object, nothing will be done.

		@param newObject   the new object to add to the array
	*/
	void addIfNotAlreadyThere (const ObjectClass* const newObject) noexcept
	{
		const ScopedLockType lock (getLock());

		if (! contains (newObject))
			add (newObject);
	}

	/** Replaces an object in the array with a different one.

		If the index is less than zero, this method does nothing.
		If the index is beyond the end of the array, the new object is added to the end of the array.

		Be careful not to add the same object to the array more than once,
		as this will obviously cause deletion of dangling pointers.

		@param indexToChange        the index whose value you want to change
		@param newObject            the new value to set for this index.
		@param deleteOldElement     whether to delete the object that's being replaced with the new one
		@see add, insert, remove
	*/
	void set (const int indexToChange,
			  const ObjectClass* const newObject,
			  const bool deleteOldElement = true)
	{
		if (indexToChange >= 0)
		{
			ObjectClass* toDelete = nullptr;

			{
				const ScopedLockType lock (getLock());

				if (indexToChange < numUsed)
				{
					if (deleteOldElement)
					{
						toDelete = data.elements [indexToChange];

						if (toDelete == newObject)
							toDelete = nullptr;
					}

					data.elements [indexToChange] = const_cast <ObjectClass*> (newObject);
				}
				else
				{
					data.ensureAllocatedSize (numUsed + 1);
					data.elements [numUsed++] = const_cast <ObjectClass*> (newObject);
				}
			}

			delete toDelete; // don't want to use a ScopedPointer here because if the
							 // object has a private destructor, both OwnedArray and
							 // ScopedPointer would need to be friend classes..
		}
		else
		{
			jassertfalse; // you're trying to set an object at a negative index, which doesn't have
						  // any effect - but since the object is not being added, it may be leaking..
		}
	}

	/** Adds elements from another array to the end of this array.

		@param arrayToAddFrom       the array from which to copy the elements
		@param startIndex           the first element of the other array to start copying from
		@param numElementsToAdd     how many elements to add from the other array. If this
									value is negative or greater than the number of available elements,
									all available elements will be copied.
		@see add
	*/
	template <class OtherArrayType>
	void addArray (const OtherArrayType& arrayToAddFrom,
				   int startIndex = 0,
				   int numElementsToAdd = -1)
	{
		const typename OtherArrayType::ScopedLockType lock1 (arrayToAddFrom.getLock());
		const ScopedLockType lock2 (getLock());

		if (startIndex < 0)
		{
			jassertfalse;
			startIndex = 0;
		}

		if (numElementsToAdd < 0 || startIndex + numElementsToAdd > arrayToAddFrom.size())
			numElementsToAdd = arrayToAddFrom.size() - startIndex;

		data.ensureAllocatedSize (numUsed + numElementsToAdd);

		while (--numElementsToAdd >= 0)
		{
			data.elements [numUsed] = arrayToAddFrom.getUnchecked (startIndex++);
			++numUsed;
		}
	}

	/** Adds copies of the elements in another array to the end of this array.

		The other array must be either an OwnedArray of a compatible type of object, or an Array
		containing pointers to the same kind of object. The objects involved must provide
		a copy constructor, and this will be used to create new copies of each element, and
		add them to this array.

		@param arrayToAddFrom       the array from which to copy the elements
		@param startIndex           the first element of the other array to start copying from
		@param numElementsToAdd     how many elements to add from the other array. If this
									value is negative or greater than the number of available elements,
									all available elements will be copied.
		@see add
	*/
	template <class OtherArrayType>
	void addCopiesOf (const OtherArrayType& arrayToAddFrom,
					  int startIndex = 0,
					  int numElementsToAdd = -1)
	{
		const typename OtherArrayType::ScopedLockType lock1 (arrayToAddFrom.getLock());
		const ScopedLockType lock2 (getLock());

		if (startIndex < 0)
		{
			jassertfalse;
			startIndex = 0;
		}

		if (numElementsToAdd < 0 || startIndex + numElementsToAdd > arrayToAddFrom.size())
			numElementsToAdd = arrayToAddFrom.size() - startIndex;

		data.ensureAllocatedSize (numUsed + numElementsToAdd);

		while (--numElementsToAdd >= 0)
		{
			data.elements [numUsed] = new ObjectClass (*arrayToAddFrom.getUnchecked (startIndex++));
			++numUsed;
		}
	}

	/** Inserts a new object into the array assuming that the array is sorted.

		This will use a comparator to find the position at which the new object
		should go. If the array isn't sorted, the behaviour of this
		method will be unpredictable.

		@param comparator   the comparator to use to compare the elements - see the sort method
							for details about this object's structure
		@param newObject    the new object to insert to the array
		@returns the index at which the new object was added
		@see add, sort, indexOfSorted
	*/
	template <class ElementComparator>
	int addSorted (ElementComparator& comparator, ObjectClass* const newObject) noexcept
	{
		(void) comparator;  // if you pass in an object with a static compareElements() method, this
							// avoids getting warning messages about the parameter being unused
		const ScopedLockType lock (getLock());
		const int index = findInsertIndexInSortedArray (comparator, data.elements.getData(), newObject, 0, numUsed);
		insert (index, newObject);
		return index;
	}

	/** Finds the index of an object in the array, assuming that the array is sorted.

		This will use a comparator to do a binary-chop to find the index of the given
		element, if it exists. If the array isn't sorted, the behaviour of this
		method will be unpredictable.

		@param comparator           the comparator to use to compare the elements - see the sort()
									method for details about the form this object should take
		@param objectToLookFor      the object to search for
		@returns                    the index of the element, or -1 if it's not found
		@see addSorted, sort
	*/
	template <class ElementComparator>
	int indexOfSorted (ElementComparator& comparator,
					   const ObjectClass* const objectToLookFor) const noexcept
	{
		(void) comparator;  // if you pass in an object with a static compareElements() method, this
							// avoids getting warning messages about the parameter being unused
		const ScopedLockType lock (getLock());

		int start = 0;
		int end_ = numUsed;

		for (;;)
		{
			if (start >= end_)
			{
				return -1;
			}
			else if (comparator.compareElements (objectToLookFor, data.elements [start]) == 0)
			{
				return start;
			}
			else
			{
				const int halfway = (start + end_) >> 1;

				if (halfway == start)
					return -1;
				else if (comparator.compareElements (objectToLookFor, data.elements [halfway]) >= 0)
					start = halfway;
				else
					end_ = halfway;
			}
		}
	}

	/** Removes an object from the array.

		This will remove the object at a given index (optionally also
		deleting it) and move back all the subsequent objects to close the gap.
		If the index passed in is out-of-range, nothing will happen.

		@param indexToRemove    the index of the element to remove
		@param deleteObject     whether to delete the object that is removed
		@see removeObject, removeRange
	*/
	void remove (const int indexToRemove,
				 const bool deleteObject = true)
	{
		ObjectClass* toDelete = nullptr;

		{
			const ScopedLockType lock (getLock());

			if (isPositiveAndBelow (indexToRemove, numUsed))
			{
				ObjectClass** const e = data.elements + indexToRemove;

				if (deleteObject)
					toDelete = *e;

				--numUsed;
				const int numToShift = numUsed - indexToRemove;

				if (numToShift > 0)
					memmove (e, e + 1, numToShift * sizeof (ObjectClass*));
			}
		}

		delete toDelete; // don't want to use a ScopedPointer here because if the
						 // object has a private destructor, both OwnedArray and
						 // ScopedPointer would need to be friend classes..

		if ((numUsed << 1) < data.numAllocated)
			minimiseStorageOverheads();
	}

	/** Removes and returns an object from the array without deleting it.

		This will remove the object at a given index and return it, moving back all
		the subsequent objects to close the gap. If the index passed in is out-of-range,
		nothing will happen.

		@param indexToRemove    the index of the element to remove
		@see remove, removeObject, removeRange
	*/
	ObjectClass* removeAndReturn (const int indexToRemove)
	{
		ObjectClass* removedItem = nullptr;
		const ScopedLockType lock (getLock());

		if (isPositiveAndBelow (indexToRemove, numUsed))
		{
			ObjectClass** const e = data.elements + indexToRemove;
			removedItem = *e;

			--numUsed;
			const int numToShift = numUsed - indexToRemove;

			if (numToShift > 0)
				memmove (e, e + 1, numToShift * sizeof (ObjectClass*));

			if ((numUsed << 1) < data.numAllocated)
				minimiseStorageOverheads();
		}

		return removedItem;
	}

	/** Removes a specified object from the array.

		If the item isn't found, no action is taken.

		@param objectToRemove   the object to try to remove
		@param deleteObject     whether to delete the object (if it's found)
		@see remove, removeRange
	*/
	void removeObject (const ObjectClass* const objectToRemove,
					   const bool deleteObject = true)
	{
		const ScopedLockType lock (getLock());
		ObjectClass** const e = data.elements.getData();

		for (int i = 0; i < numUsed; ++i)
		{
			if (objectToRemove == e[i])
			{
				remove (i, deleteObject);
				break;
			}
		}
	}

	/** Removes a range of objects from the array.

		This will remove a set of objects, starting from the given index,
		and move any subsequent elements down to close the gap.

		If the range extends beyond the bounds of the array, it will
		be safely clipped to the size of the array.

		@param startIndex       the index of the first object to remove
		@param numberToRemove   how many objects should be removed
		@param deleteObjects    whether to delete the objects that get removed
		@see remove, removeObject
	*/
	void removeRange (int startIndex,
					  const int numberToRemove,
					  const bool deleteObjects = true)
	{
		const ScopedLockType lock (getLock());
		const int endIndex = jlimit (0, numUsed, startIndex + numberToRemove);
		startIndex = jlimit (0, numUsed, startIndex);

		if (endIndex > startIndex)
		{
			if (deleteObjects)
			{
				for (int i = startIndex; i < endIndex; ++i)
				{
					delete data.elements [i];
					data.elements [i] = nullptr; // (in case one of the destructors accesses this array and hits a dangling pointer)
				}
			}

			const int rangeSize = endIndex - startIndex;
			ObjectClass** e = data.elements + startIndex;
			int numToShift = numUsed - endIndex;
			numUsed -= rangeSize;

			while (--numToShift >= 0)
			{
				*e = e [rangeSize];
				++e;
			}

			if ((numUsed << 1) < data.numAllocated)
				minimiseStorageOverheads();
		}
	}

	/** Removes the last n objects from the array.

		@param howManyToRemove   how many objects to remove from the end of the array
		@param deleteObjects     whether to also delete the objects that are removed
		@see remove, removeObject, removeRange
	*/
	void removeLast (int howManyToRemove = 1,
					 const bool deleteObjects = true)
	{
		const ScopedLockType lock (getLock());

		if (howManyToRemove >= numUsed)
			clear (deleteObjects);
		else
			removeRange (numUsed - howManyToRemove, howManyToRemove, deleteObjects);
	}

	/** Swaps a pair of objects in the array.

		If either of the indexes passed in is out-of-range, nothing will happen,
		otherwise the two objects at these positions will be exchanged.
	*/
	void swap (const int index1,
			   const int index2) noexcept
	{
		const ScopedLockType lock (getLock());

		if (isPositiveAndBelow (index1, numUsed)
			 && isPositiveAndBelow (index2, numUsed))
		{
			swapVariables (data.elements [index1],
						   data.elements [index2]);
		}
	}

	/** Moves one of the objects to a different position.

		This will move the object to a specified index, shuffling along
		any intervening elements as required.

		So for example, if you have the array { 0, 1, 2, 3, 4, 5 } then calling
		move (2, 4) would result in { 0, 1, 3, 4, 2, 5 }.

		@param currentIndex     the index of the object to be moved. If this isn't a
								valid index, then nothing will be done
		@param newIndex         the index at which you'd like this object to end up. If this
								is less than zero, it will be moved to the end of the array
	*/
	void move (const int currentIndex,
			   int newIndex) noexcept
	{
		if (currentIndex != newIndex)
		{
			const ScopedLockType lock (getLock());

			if (isPositiveAndBelow (currentIndex, numUsed))
			{
				if (! isPositiveAndBelow (newIndex, numUsed))
					newIndex = numUsed - 1;

				ObjectClass* const value = data.elements [currentIndex];

				if (newIndex > currentIndex)
				{
					memmove (data.elements + currentIndex,
							 data.elements + currentIndex + 1,
							 (newIndex - currentIndex) * sizeof (ObjectClass*));
				}
				else
				{
					memmove (data.elements + newIndex + 1,
							 data.elements + newIndex,
							 (currentIndex - newIndex) * sizeof (ObjectClass*));
				}

				data.elements [newIndex] = value;
			}
		}
	}

	/** This swaps the contents of this array with those of another array.

		If you need to exchange two arrays, this is vastly quicker than using copy-by-value
		because it just swaps their internal pointers.
	*/
	void swapWithArray (OwnedArray& otherArray) noexcept
	{
		const ScopedLockType lock1 (getLock());
		const ScopedLockType lock2 (otherArray.getLock());

		data.swapWith (otherArray.data);
		swapVariables (numUsed, otherArray.numUsed);
	}

	/** Reduces the amount of storage being used by the array.

		Arrays typically allocate slightly more storage than they need, and after
		removing elements, they may have quite a lot of unused space allocated.
		This method will reduce the amount of allocated storage to a minimum.
	*/
	void minimiseStorageOverheads() noexcept
	{
		const ScopedLockType lock (getLock());
		data.shrinkToNoMoreThan (numUsed);
	}

	/** Increases the array's internal storage to hold a minimum number of elements.

		Calling this before adding a large known number of elements means that
		the array won't have to keep dynamically resizing itself as the elements
		are added, and it'll therefore be more efficient.
	*/
	void ensureStorageAllocated (const int minNumElements) noexcept
	{
		const ScopedLockType lock (getLock());
		data.ensureAllocatedSize (minNumElements);
	}

	/** Sorts the elements in the array.

		This will use a comparator object to sort the elements into order. The object
		passed must have a method of the form:
		@code
		int compareElements (ElementType first, ElementType second);
		@endcode

		..and this method must return:
		  - a value of < 0 if the first comes before the second
		  - a value of 0 if the two objects are equivalent
		  - a value of > 0 if the second comes before the first

		To improve performance, the compareElements() method can be declared as static or const.

		@param comparator   the comparator to use for comparing elements.
		@param retainOrderOfEquivalentItems     if this is true, then items
							which the comparator says are equivalent will be
							kept in the order in which they currently appear
							in the array. This is slower to perform, but may
							be important in some cases. If it's false, a faster
							algorithm is used, but equivalent elements may be
							rearranged.
		@see sortArray, indexOfSorted
	*/
	template <class ElementComparator>
	void sort (ElementComparator& comparator,
			   const bool retainOrderOfEquivalentItems = false) const noexcept
	{
		(void) comparator;  // if you pass in an object with a static compareElements() method, this
							// avoids getting warning messages about the parameter being unused

		const ScopedLockType lock (getLock());
		sortArray (comparator, data.elements.getData(), 0, size() - 1, retainOrderOfEquivalentItems);
	}

	/** Returns the CriticalSection that locks this array.
		To lock, you can call getLock().enter() and getLock().exit(), or preferably use
		an object of ScopedLockType as an RAII lock for it.
	*/
	inline const TypeOfCriticalSectionToUse& getLock() const noexcept      { return data; }

	/** Returns the type of scoped lock to use for locking this array */
	typedef typename TypeOfCriticalSectionToUse::ScopedLockType ScopedLockType;

private:

	ArrayAllocationBase <ObjectClass*, TypeOfCriticalSectionToUse> data;
	int numUsed;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (OwnedArray);
};

#endif   // __JUCE_OWNEDARRAY_JUCEHEADER__

/*** End of inlined file: juce_OwnedArray.h ***/


/*** Start of inlined file: juce_ScopedPointer.h ***/
#ifndef __JUCE_SCOPEDPOINTER_JUCEHEADER__
#define __JUCE_SCOPEDPOINTER_JUCEHEADER__

/**
	This class holds a pointer which is automatically deleted when this object goes
	out of scope.

	Once a pointer has been passed to a ScopedPointer, it will make sure that the pointer
	gets deleted when the ScopedPointer is deleted. Using the ScopedPointer on the stack or
	as member variables is a good way to use RAII to avoid accidentally leaking dynamically
	created objects.

	A ScopedPointer can be used in pretty much the same way that you'd use a normal pointer
	to an object. If you use the assignment operator to assign a different object to a
	ScopedPointer, the old one will be automatically deleted.

	A const ScopedPointer is guaranteed not to lose ownership of its object or change the
	object to which it points during its lifetime. This means that making a copy of a const
	ScopedPointer is impossible, as that would involve the new copy taking ownership from the
	old one.

	If you need to get a pointer out of a ScopedPointer without it being deleted, you
	can use the release() method.

	Something to note is the main difference between this class and the std::auto_ptr class,
	which is that ScopedPointer provides a cast-to-object operator, wheras std::auto_ptr
	requires that you always call get() to retrieve the pointer. The advantages of providing
	the cast is that you don't need to call get(), so can use the ScopedPointer in pretty much
	exactly the same way as a raw pointer. The disadvantage is that the compiler is free to
	use the cast in unexpected and sometimes dangerous ways - in particular, it becomes difficult
	to return a ScopedPointer as the result of a function. To avoid this causing errors,
	ScopedPointer contains an overloaded constructor that should cause a syntax error in these
	circumstances, but it does mean that instead of returning a ScopedPointer from a function,
	you'd need to return a raw pointer (or use a std::auto_ptr instead).
*/
template <class ObjectType>
class ScopedPointer
{
public:

	/** Creates a ScopedPointer containing a null pointer. */
	inline ScopedPointer() noexcept   : object (nullptr)
	{
	}

	/** Creates a ScopedPointer that owns the specified object. */
	inline ScopedPointer (ObjectType* const objectToTakePossessionOf) noexcept
		: object (objectToTakePossessionOf)
	{
	}

	/** Creates a ScopedPointer that takes its pointer from another ScopedPointer.

		Because a pointer can only belong to one ScopedPointer, this transfers
		the pointer from the other object to this one, and the other object is reset to
		be a null pointer.
	*/
	ScopedPointer (ScopedPointer& objectToTransferFrom) noexcept
		: object (objectToTransferFrom.object)
	{
		objectToTransferFrom.object = nullptr;
	}

	/** Destructor.
		This will delete the object that this ScopedPointer currently refers to.
	*/
	inline ~ScopedPointer()                                                         { delete object; }

	/** Changes this ScopedPointer to point to a new object.

		Because a pointer can only belong to one ScopedPointer, this transfers
		the pointer from the other object to this one, and the other object is reset to
		be a null pointer.

		If this ScopedPointer already points to an object, that object
		will first be deleted.
	*/
	ScopedPointer& operator= (ScopedPointer& objectToTransferFrom)
	{
		if (this != objectToTransferFrom.getAddress())
		{
			// Two ScopedPointers should never be able to refer to the same object - if
			// this happens, you must have done something dodgy!
			jassert (object == nullptr || object != objectToTransferFrom.object);

			ObjectType* const oldObject = object;
			object = objectToTransferFrom.object;
			objectToTransferFrom.object = nullptr;
			delete oldObject;
		}

		return *this;
	}

	/** Changes this ScopedPointer to point to a new object.

		If this ScopedPointer already points to an object, that object
		will first be deleted.

		The pointer that you pass is may be null.
	*/
	ScopedPointer& operator= (ObjectType* const newObjectToTakePossessionOf)
	{
		if (object != newObjectToTakePossessionOf)
		{
			ObjectType* const oldObject = object;
			object = newObjectToTakePossessionOf;
			delete oldObject;
		}

		return *this;
	}

	/** Returns the object that this ScopedPointer refers to. */
	inline operator ObjectType*() const noexcept                                    { return object; }

	/** Returns the object that this ScopedPointer refers to. */
	inline ObjectType* get() const noexcept                                         { return object; }

	/** Returns the object that this ScopedPointer refers to. */
	inline ObjectType& operator*() const noexcept                                   { return *object; }

	/** Lets you access methods and properties of the object that this ScopedPointer refers to. */
	inline ObjectType* operator->() const noexcept                                  { return object; }

	/** Removes the current object from this ScopedPointer without deleting it.
		This will return the current object, and set the ScopedPointer to a null pointer.
	*/
	ObjectType* release() noexcept                                                  { ObjectType* const o = object; object = nullptr; return o; }

	/** Swaps this object with that of another ScopedPointer.
		The two objects simply exchange their pointers.
	*/
	void swapWith (ScopedPointer <ObjectType>& other) noexcept
	{
		// Two ScopedPointers should never be able to refer to the same object - if
		// this happens, you must have done something dodgy!
		jassert (object != other.object);

		std::swap (object, other.object);
	}

	/** If the pointer is non-null, this will attempt to return a new copy of the object that is pointed to.
		If the pointer is null, this will safely return a nullptr.
	*/
	inline ObjectType* createCopy() const                                           { return createCopyIfNotNull (object); }

private:

	ObjectType* object;

	// (Required as an alternative to the overloaded & operator).
	const ScopedPointer* getAddress() const noexcept                                { return this; }

  #if ! JUCE_MSVC  // (MSVC can't deal with multiple copy constructors)
	/* These are private to stop people accidentally copying a const ScopedPointer (the compiler
	   would let you do so by implicitly casting the source to its raw object pointer).

	   A side effect of this is that you may hit a puzzling compiler error when you write something
	   like this:

		  ScopedPointer<MyClass> m = new MyClass();  // Compile error: copy constructor is private.

	   Even though the compiler would normally ignore the assignment here, it can't do so when the
	   copy constructor is private. It's very easy to fis though - just write it like this:

		  ScopedPointer<MyClass> m (new MyClass());  // Compiles OK

	   It's good practice to always use the latter form when writing your object declarations anyway,
	   rather than writing them as assignments and assuming (or hoping) that the compiler will be
	   smart enough to replace your construction + assignment with a single constructor.
	*/
	ScopedPointer (const ScopedPointer&);
	ScopedPointer& operator= (const ScopedPointer&);
  #endif
};

/** Compares a ScopedPointer with another pointer.
	This can be handy for checking whether this is a null pointer.
*/
template <class ObjectType>
bool operator== (const ScopedPointer<ObjectType>& pointer1, ObjectType* const pointer2) noexcept
{
	return static_cast <ObjectType*> (pointer1) == pointer2;
}

/** Compares a ScopedPointer with another pointer.
	This can be handy for checking whether this is a null pointer.
*/
template <class ObjectType>
bool operator!= (const ScopedPointer<ObjectType>& pointer1, ObjectType* const pointer2) noexcept
{
	return static_cast <ObjectType*> (pointer1) != pointer2;
}

#endif   // __JUCE_SCOPEDPOINTER_JUCEHEADER__

/*** End of inlined file: juce_ScopedPointer.h ***/

/**
	A simple class to generate hash functions for some primitive types, intended for
	use with the HashMap class.
	@see HashMap
*/
class DefaultHashFunctions
{
public:
	/** Generates a simple hash from an integer. */
	static int generateHash (const int key, const int upperLimit) noexcept        { return std::abs (key) % upperLimit; }
	/** Generates a simple hash from a string. */
	static int generateHash (const String& key, const int upperLimit) noexcept    { return (int) (((uint32) key.hashCode()) % upperLimit); }
	/** Generates a simple hash from a variant. */
	static int generateHash (const var& key, const int upperLimit) noexcept       { return generateHash (key.toString(), upperLimit); }
};

/**
	Holds a set of mappings between some key/value pairs.

	The types of the key and value objects are set as template parameters.
	You can also specify a class to supply a hash function that converts a key value
	into an hashed integer. This class must have the form:

	@code
	struct MyHashGenerator
	{
		static int generateHash (MyKeyType key, int upperLimit)
		{
			// The function must return a value 0 <= x < upperLimit
			return someFunctionOfMyKeyType (key) % upperLimit;
		}
	};
	@endcode

	Like the Array class, the key and value types are expected to be copy-by-value types, so
	if you define them to be pointer types, this class won't delete the objects that they
	point to.

	If you don't supply a class for the HashFunctionToUse template parameter, the
	default one provides some simple mappings for strings and ints.

	@code
	HashMap<int, String> hash;
	hash.set (1, "item1");
	hash.set (2, "item2");

	DBG (hash [1]); // prints "item1"
	DBG (hash [2]); // prints "item2"

	// This iterates the map, printing all of its key -> value pairs..
	for (HashMap<int, String>::Iterator i (hash); i.next();)
		DBG (i.getKey() << " -> " << i.getValue());
	@endcode

	@see CriticalSection, DefaultHashFunctions, NamedValueSet, SortedSet
*/
template <typename KeyType,
		  typename ValueType,
		  class HashFunctionToUse = DefaultHashFunctions,
		  class TypeOfCriticalSectionToUse = DummyCriticalSection>
class HashMap
{
private:
	typedef PARAMETER_TYPE (KeyType)   KeyTypeParameter;
	typedef PARAMETER_TYPE (ValueType) ValueTypeParameter;

public:

	/** Creates an empty hash-map.

		The numberOfSlots parameter specifies the number of hash entries the map will use. This
		will be the "upperLimit" parameter that is passed to your generateHash() function. The number
		of hash slots will grow automatically if necessary, or it can be remapped manually using remapTable().
	*/
	explicit HashMap (const int numberOfSlots = defaultHashTableSize)
	   : totalNumItems (0)
	{
		slots.insertMultiple (0, nullptr, numberOfSlots);
	}

	/** Destructor. */
	~HashMap()
	{
		clear();
	}

	/** Removes all values from the map.
		Note that this will clear the content, but won't affect the number of slots (see
		remapTable and getNumSlots).
	*/
	void clear()
	{
		const ScopedLockType sl (getLock());

		for (int i = slots.size(); --i >= 0;)
		{
			HashEntry* h = slots.getUnchecked(i);

			while (h != nullptr)
			{
				const ScopedPointer<HashEntry> deleter (h);
				h = h->nextEntry;
			}

			slots.set (i, nullptr);
		}

		totalNumItems = 0;
	}

	/** Returns the current number of items in the map. */
	inline int size() const noexcept
	{
		return totalNumItems;
	}

	/** Returns the value corresponding to a given key.
		If the map doesn't contain the key, a default instance of the value type is returned.
		@param keyToLookFor    the key of the item being requested
	*/
	inline const ValueType operator[] (KeyTypeParameter keyToLookFor) const
	{
		const ScopedLockType sl (getLock());

		for (const HashEntry* entry = slots.getUnchecked (generateHashFor (keyToLookFor)); entry != nullptr; entry = entry->nextEntry)
			if (entry->key == keyToLookFor)
				return entry->value;

		return ValueType();
	}

	/** Returns true if the map contains an item with the specied key. */
	bool contains (KeyTypeParameter keyToLookFor) const
	{
		const ScopedLockType sl (getLock());

		for (const HashEntry* entry = slots.getUnchecked (generateHashFor (keyToLookFor)); entry != nullptr; entry = entry->nextEntry)
			if (entry->key == keyToLookFor)
				return true;

		return false;
	}

	/** Returns true if the hash contains at least one occurrence of a given value. */
	bool containsValue (ValueTypeParameter valueToLookFor) const
	{
		const ScopedLockType sl (getLock());

		for (int i = getNumSlots(); --i >= 0;)
			for (const HashEntry* entry = slots.getUnchecked(i); entry != nullptr; entry = entry->nextEntry)
				if (entry->value == valueToLookFor)
					return true;

		return false;
	}

	/** Adds or replaces an element in the hash-map.
		If there's already an item with the given key, this will replace its value. Otherwise, a new item
		will be added to the map.
	*/
	void set (KeyTypeParameter newKey, ValueTypeParameter newValue)
	{
		const ScopedLockType sl (getLock());
		const int hashIndex = generateHashFor (newKey);

		HashEntry* const firstEntry = slots.getUnchecked (hashIndex);

		for (HashEntry* entry = firstEntry; entry != nullptr; entry = entry->nextEntry)
		{
			if (entry->key == newKey)
			{
				entry->value = newValue;
				return;
			}
		}

		slots.set (hashIndex, new HashEntry (newKey, newValue, firstEntry));
		++totalNumItems;

		if (totalNumItems > (getNumSlots() * 3) / 2)
			remapTable (getNumSlots() * 2);
	}

	/** Removes an item with the given key. */
	void remove (KeyTypeParameter keyToRemove)
	{
		const ScopedLockType sl (getLock());
		const int hashIndex = generateHashFor (keyToRemove);
		HashEntry* entry = slots.getUnchecked (hashIndex);
		HashEntry* previous = nullptr;

		while (entry != nullptr)
		{
			if (entry->key == keyToRemove)
			{
				const ScopedPointer<HashEntry> deleter (entry);

				entry = entry->nextEntry;

				if (previous != nullptr)
					previous->nextEntry = entry;
				else
					slots.set (hashIndex, entry);

				--totalNumItems;
			}
			else
			{
				previous = entry;
				entry = entry->nextEntry;
			}
		}
	}

	/** Removes all items with the given value. */
	void removeValue (ValueTypeParameter valueToRemove)
	{
		const ScopedLockType sl (getLock());

		for (int i = getNumSlots(); --i >= 0;)
		{
			HashEntry* entry = slots.getUnchecked(i);
			HashEntry* previous = nullptr;

			while (entry != nullptr)
			{
				if (entry->value == valueToRemove)
				{
					const ScopedPointer<HashEntry> deleter (entry);

					entry = entry->nextEntry;

					if (previous != nullptr)
						previous->nextEntry = entry;
					else
						slots.set (i, entry);

					--totalNumItems;
				}
				else
				{
					previous = entry;
					entry = entry->nextEntry;
				}
			}
		}
	}

	/** Remaps the hash-map to use a different number of slots for its hash function.
		Each slot corresponds to a single hash-code, and each one can contain multiple items.
		@see getNumSlots()
	*/
	void remapTable (int newNumberOfSlots)
	{
		HashMap newTable (newNumberOfSlots);

		for (int i = getNumSlots(); --i >= 0;)
			for (const HashEntry* entry = slots.getUnchecked(i); entry != nullptr; entry = entry->nextEntry)
				newTable.set (entry->key, entry->value);

		swapWith (newTable);
	}

	/** Returns the number of slots which are available for hashing.
		Each slot corresponds to a single hash-code, and each one can contain multiple items.
		@see getNumSlots()
	*/
	inline int getNumSlots() const noexcept
	{
		return slots.size();
	}

	/** Efficiently swaps the contents of two hash-maps. */
	void swapWith (HashMap& otherHashMap) noexcept
	{
		const ScopedLockType lock1 (getLock());
		const ScopedLockType lock2 (otherHashMap.getLock());

		slots.swapWithArray (otherHashMap.slots);
		std::swap (totalNumItems, otherHashMap.totalNumItems);
	}

	/** Returns the CriticalSection that locks this structure.
		To lock, you can call getLock().enter() and getLock().exit(), or preferably use
		an object of ScopedLockType as an RAII lock for it.
	*/
	inline const TypeOfCriticalSectionToUse& getLock() const noexcept      { return lock; }

	/** Returns the type of scoped lock to use for locking this array */
	typedef typename TypeOfCriticalSectionToUse::ScopedLockType ScopedLockType;

private:

	class HashEntry
	{
	public:
		HashEntry (KeyTypeParameter key_, ValueTypeParameter value_, HashEntry* const nextEntry_)
			: key (key_), value (value_), nextEntry (nextEntry_)
		{}

		const KeyType key;
		ValueType value;
		HashEntry* nextEntry;

		JUCE_DECLARE_NON_COPYABLE (HashEntry);
	};

public:

	/** Iterates over the items in a HashMap.

		To use it, repeatedly call next() until it returns false, e.g.
		@code
		HashMap <String, String> myMap;

		HashMap<String, String>::Iterator i (myMap);

		while (i.next())
		{
			DBG (i.getKey() << " -> " << i.getValue());
		}
		@endcode

		The order in which items are iterated bears no resemblence to the order in which
		they were originally added!

		Obviously as soon as you call any non-const methods on the original hash-map, any
		iterators that were created beforehand will cease to be valid, and should not be used.

		@see HashMap
	*/
	class Iterator
	{
	public:

		Iterator (const HashMap& hashMapToIterate)
			: hashMap (hashMapToIterate), entry (nullptr), index (0)
		{}

		/** Moves to the next item, if one is available.
			When this returns true, you can get the item's key and value using getKey() and
			getValue(). If it returns false, the iteration has finished and you should stop.
		*/
		bool next()
		{
			if (entry != nullptr)
				entry = entry->nextEntry;

			while (entry == nullptr)
			{
				if (index >= hashMap.getNumSlots())
					return false;

				entry = hashMap.slots.getUnchecked (index++);
			}

			return true;
		}

		/** Returns the current item's key.
			This should only be called when a call to next() has just returned true.
		*/
		KeyType getKey() const
		{
			return entry != nullptr ? entry->key : KeyType();
		}

		/** Returns the current item's value.
			This should only be called when a call to next() has just returned true.
		*/
		ValueType getValue() const
		{
			return entry != nullptr ? entry->value : ValueType();
		}

	private:

		const HashMap& hashMap;
		HashEntry* entry;
		int index;

		JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Iterator);
	};

private:

	enum { defaultHashTableSize = 101 };
	friend class Iterator;

	Array <HashEntry*> slots;
	int totalNumItems;
	TypeOfCriticalSectionToUse lock;

	int generateHashFor (KeyTypeParameter key) const
	{
		const int hash = HashFunctionToUse::generateHash (key, getNumSlots());
		jassert (isPositiveAndBelow (hash, getNumSlots())); // your hash function is generating out-of-range numbers!
		return hash;
	}

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (HashMap);
};

#endif   // __JUCE_HASHMAP_JUCEHEADER__

/*** End of inlined file: juce_HashMap.h ***/


#endif
#ifndef __JUCE_LINKEDLISTPOINTER_JUCEHEADER__

#endif
#ifndef __JUCE_NAMEDVALUESET_JUCEHEADER__

#endif
#ifndef __JUCE_OWNEDARRAY_JUCEHEADER__

#endif
#ifndef __JUCE_PROPERTYSET_JUCEHEADER__

/*** Start of inlined file: juce_PropertySet.h ***/
#ifndef __JUCE_PROPERTYSET_JUCEHEADER__
#define __JUCE_PROPERTYSET_JUCEHEADER__


/*** Start of inlined file: juce_StringPairArray.h ***/
#ifndef __JUCE_STRINGPAIRARRAY_JUCEHEADER__
#define __JUCE_STRINGPAIRARRAY_JUCEHEADER__


/*** Start of inlined file: juce_StringArray.h ***/
#ifndef __JUCE_STRINGARRAY_JUCEHEADER__
#define __JUCE_STRINGARRAY_JUCEHEADER__

/**
	A special array for holding a list of strings.

	@see String, StringPairArray
*/
class JUCE_API  StringArray
{
public:

	/** Creates an empty string array */
	StringArray() noexcept;

	/** Creates a copy of another string array */
	StringArray (const StringArray& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	StringArray (StringArray&& other) noexcept;
   #endif

	/** Creates an array containing a single string. */
	explicit StringArray (const String& firstValue);

	/** Creates a copy of an array of string literals.
		@param strings          an array of strings to add. Null pointers in the array will be
								treated as empty strings
		@param numberOfStrings  how many items there are in the array
	*/
	StringArray (const char* const* strings, int numberOfStrings);

	/** Creates a copy of a null-terminated array of string literals.

		Each item from the array passed-in is added, until it encounters a null pointer,
		at which point it stops.
	*/
	explicit StringArray (const char* const* strings);

	/** Creates a copy of a null-terminated array of string literals.
		Each item from the array passed-in is added, until it encounters a null pointer,
		at which point it stops.
	*/
	explicit StringArray (const wchar_t* const* strings);

	/** Creates a copy of an array of string literals.
		@param strings          an array of strings to add. Null pointers in the array will be
								treated as empty strings
		@param numberOfStrings  how many items there are in the array
	*/
	StringArray (const wchar_t* const* strings, int numberOfStrings);

	/** Destructor. */
	~StringArray();

	/** Copies the contents of another string array into this one */
	StringArray& operator= (const StringArray& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	StringArray& operator= (StringArray&& other) noexcept;
   #endif

	/** Compares two arrays.
		Comparisons are case-sensitive.
		@returns    true only if the other array contains exactly the same strings in the same order
	*/
	bool operator== (const StringArray& other) const noexcept;

	/** Compares two arrays.
		Comparisons are case-sensitive.
		@returns    false if the other array contains exactly the same strings in the same order
	*/
	bool operator!= (const StringArray& other) const noexcept;

	/** Returns the number of strings in the array */
	inline int size() const noexcept                                    { return strings.size(); };

	/** Returns one of the strings from the array.

		If the index is out-of-range, an empty string is returned.

		Obviously the reference returned shouldn't be stored for later use, as the
		string it refers to may disappear when the array changes.
	*/
	const String& operator[] (int index) const noexcept;

	/** Returns a reference to one of the strings in the array.
		This lets you modify a string in-place in the array, but you must be sure that
		the index is in-range.
	*/
	String& getReference (int index) noexcept;

	/** Searches for a string in the array.

		The comparison will be case-insensitive if the ignoreCase parameter is true.

		@returns    true if the string is found inside the array
	*/
	bool contains (const String& stringToLookFor,
				   bool ignoreCase = false) const;

	/** Searches for a string in the array.

		The comparison will be case-insensitive if the ignoreCase parameter is true.

		@param stringToLookFor  the string to try to find
		@param ignoreCase       whether the comparison should be case-insensitive
		@param startIndex       the first index to start searching from
		@returns                the index of the first occurrence of the string in this array,
								or -1 if it isn't found.
	*/
	int indexOf (const String& stringToLookFor,
				 bool ignoreCase = false,
				 int startIndex = 0) const;

	/** Appends a string at the end of the array. */
	void add (const String& stringToAdd);

	/** Inserts a string into the array.

		This will insert a string into the array at the given index, moving
		up the other elements to make room for it.
		If the index is less than zero or greater than the size of the array,
		the new string will be added to the end of the array.
	*/
	void insert (int index, const String& stringToAdd);

	/** Adds a string to the array as long as it's not already in there.

		The search can optionally be case-insensitive.
	*/
	void addIfNotAlreadyThere (const String& stringToAdd, bool ignoreCase = false);

	/** Replaces one of the strings in the array with another one.

		If the index is higher than the array's size, the new string will be
		added to the end of the array; if it's less than zero nothing happens.
	*/
	void set (int index, const String& newString);

	/** Appends some strings from another array to the end of this one.

		@param other                the array to add
		@param startIndex           the first element of the other array to add
		@param numElementsToAdd     the maximum number of elements to add (if this is
									less than zero, they are all added)
	*/
	void addArray (const StringArray& other,
				   int startIndex = 0,
				   int numElementsToAdd = -1);

	/** Breaks up a string into tokens and adds them to this array.

		This will tokenise the given string using whitespace characters as the
		token delimiters, and will add these tokens to the end of the array.

		@returns    the number of tokens added
	*/
	int addTokens (const String& stringToTokenise,
				   bool preserveQuotedStrings);

	/** Breaks up a string into tokens and adds them to this array.

		This will tokenise the given string (using the string passed in to define the
		token delimiters), and will add these tokens to the end of the array.

		@param stringToTokenise     the string to tokenise
		@param breakCharacters      a string of characters, any of which will be considered
									to be a token delimiter.
		@param quoteCharacters      if this string isn't empty, it defines a set of characters
									which are treated as quotes. Any text occurring
									between quotes is not broken up into tokens.
		@returns    the number of tokens added
	*/
	int addTokens (const String& stringToTokenise,
				   const String& breakCharacters,
				   const String& quoteCharacters);

	/** Breaks up a string into lines and adds them to this array.

		This breaks a string down into lines separated by \\n or \\r\\n, and adds each line
		to the array. Line-break characters are omitted from the strings that are added to
		the array.
	*/
	int addLines (const String& stringToBreakUp);

	/** Removes all elements from the array. */
	void clear();

	/** Removes a string from the array.

		If the index is out-of-range, no action will be taken.
	*/
	void remove (int index);

	/** Finds a string in the array and removes it.

		This will remove the first occurrence of the given string from the array. The
		comparison may be case-insensitive depending on the ignoreCase parameter.
	*/
	void removeString (const String& stringToRemove,
					   bool ignoreCase = false);

	/** Removes a range of elements from the array.

		This will remove a set of elements, starting from the given index,
		and move subsequent elements down to close the gap.

		If the range extends beyond the bounds of the array, it will
		be safely clipped to the size of the array.

		@param startIndex       the index of the first element to remove
		@param numberToRemove   how many elements should be removed
	*/
	void removeRange (int startIndex, int numberToRemove);

	/** Removes any duplicated elements from the array.

		If any string appears in the array more than once, only the first occurrence of
		it will be retained.

		@param ignoreCase   whether to use a case-insensitive comparison
	*/
	void removeDuplicates (bool ignoreCase);

	/** Removes empty strings from the array.

		@param removeWhitespaceStrings  if true, strings that only contain whitespace
										characters will also be removed
	*/
	void removeEmptyStrings (bool removeWhitespaceStrings = true);

	/** Moves one of the strings to a different position.

		This will move the string to a specified index, shuffling along
		any intervening elements as required.

		So for example, if you have the array { 0, 1, 2, 3, 4, 5 } then calling
		move (2, 4) would result in { 0, 1, 3, 4, 2, 5 }.

		@param currentIndex     the index of the value to be moved. If this isn't a
								valid index, then nothing will be done
		@param newIndex         the index at which you'd like this value to end up. If this
								is less than zero, the value will be moved to the end
								of the array
	*/
	void move (int currentIndex, int newIndex) noexcept;

	/** Deletes any whitespace characters from the starts and ends of all the strings. */
	void trim();

	/** Adds numbers to the strings in the array, to make each string unique.

		This will add numbers to the ends of groups of similar strings.
		e.g. if there are two "moose" strings, they will become "moose (1)" and "moose (2)"

		@param ignoreCaseWhenComparing      whether the comparison used is case-insensitive
		@param appendNumberToFirstInstance  whether the first of a group of similar strings
											also has a number appended to it.
		@param preNumberString              when adding a number, this string is added before the number.
											If you pass 0, a default string will be used, which adds
											brackets around the number.
		@param postNumberString             this string is appended after any numbers that are added.
											If you pass 0, a default string will be used, which adds
											brackets around the number.
	*/
	void appendNumbersToDuplicates (bool ignoreCaseWhenComparing,
									bool appendNumberToFirstInstance,
									CharPointer_UTF8 preNumberString = CharPointer_UTF8 (nullptr),
									CharPointer_UTF8 postNumberString = CharPointer_UTF8 (nullptr));

	/** Joins the strings in the array together into one string.

		This will join a range of elements from the array into a string, separating
		them with a given string.

		e.g. joinIntoString (",") will turn an array of "a" "b" and "c" into "a,b,c".

		@param separatorString      the string to insert between all the strings
		@param startIndex           the first element to join
		@param numberOfElements     how many elements to join together. If this is less
									than zero, all available elements will be used.
	*/
	String joinIntoString (const String& separatorString,
						   int startIndex = 0,
						   int numberOfElements = -1) const;

	/** Sorts the array into alphabetical order.

		@param ignoreCase       if true, the comparisons used will be case-sensitive.
	*/
	void sort (bool ignoreCase);

	/** Reduces the amount of storage being used by the array.

		Arrays typically allocate slightly more storage than they need, and after
		removing elements, they may have quite a lot of unused space allocated.
		This method will reduce the amount of allocated storage to a minimum.
	*/
	void minimiseStorageOverheads();

private:

	Array <String> strings;

	JUCE_LEAK_DETECTOR (StringArray);
};

#endif   // __JUCE_STRINGARRAY_JUCEHEADER__

/*** End of inlined file: juce_StringArray.h ***/

/**
	A container for holding a set of strings which are keyed by another string.

	@see StringArray
*/
class JUCE_API  StringPairArray
{
public:

	/** Creates an empty array */
	StringPairArray (bool ignoreCaseWhenComparingKeys = true);

	/** Creates a copy of another array */
	StringPairArray (const StringPairArray& other);

	/** Destructor. */
	~StringPairArray();

	/** Copies the contents of another string array into this one */
	StringPairArray& operator= (const StringPairArray& other);

	/** Compares two arrays.
		Comparisons are case-sensitive.
		@returns    true only if the other array contains exactly the same strings with the same keys
	*/
	bool operator== (const StringPairArray& other) const;

	/** Compares two arrays.
		Comparisons are case-sensitive.
		@returns    false if the other array contains exactly the same strings with the same keys
	*/
	bool operator!= (const StringPairArray& other) const;

	/** Finds the value corresponding to a key string.

		If no such key is found, this will just return an empty string. To check whether
		a given key actually exists (because it might actually be paired with an empty string), use
		the getAllKeys() method to obtain a list.

		Obviously the reference returned shouldn't be stored for later use, as the
		string it refers to may disappear when the array changes.

		@see getValue
	*/
	const String& operator[] (const String& key) const;

	/** Finds the value corresponding to a key string.

		If no such key is found, this will just return the value provided as a default.

		@see operator[]
	*/
	String getValue (const String& key, const String& defaultReturnValue) const;

	/** Returns a list of all keys in the array. */
	const StringArray& getAllKeys() const noexcept          { return keys; }

	/** Returns a list of all values in the array. */
	const StringArray& getAllValues() const noexcept        { return values; }

	/** Returns the number of strings in the array */
	inline int size() const noexcept                        { return keys.size(); };

	/** Adds or amends a key/value pair.

		If a value already exists with this key, its value will be overwritten,
		otherwise the key/value pair will be added to the array.
	*/
	void set (const String& key, const String& value);

	/** Adds the items from another array to this one.

		This is equivalent to using set() to add each of the pairs from the other array.
	*/
	void addArray (const StringPairArray& other);

	/** Removes all elements from the array. */
	void clear();

	/** Removes a string from the array based on its key.

		If the key isn't found, nothing will happen.
	*/
	void remove (const String& key);

	/** Removes a string from the array based on its index.

		If the index is out-of-range, no action will be taken.
	*/
	void remove (int index);

	/** Indicates whether to use a case-insensitive search when looking up a key string.
	*/
	void setIgnoresCase (bool shouldIgnoreCase);

	/** Returns a descriptive string containing the items.
		This is handy for dumping the contents of an array.
	*/
	String getDescription() const;

	/** Reduces the amount of storage being used by the array.

		Arrays typically allocate slightly more storage than they need, and after
		removing elements, they may have quite a lot of unused space allocated.
		This method will reduce the amount of allocated storage to a minimum.
	*/
	void minimiseStorageOverheads();

private:

	StringArray keys, values;
	bool ignoreCase;

	JUCE_LEAK_DETECTOR (StringPairArray);
};

#endif   // __JUCE_STRINGPAIRARRAY_JUCEHEADER__

/*** End of inlined file: juce_StringPairArray.h ***/


/*** Start of inlined file: juce_XmlElement.h ***/
#ifndef __JUCE_XMLELEMENT_JUCEHEADER__
#define __JUCE_XMLELEMENT_JUCEHEADER__


/*** Start of inlined file: juce_File.h ***/
#ifndef __JUCE_FILE_JUCEHEADER__
#define __JUCE_FILE_JUCEHEADER__


/*** Start of inlined file: juce_Time.h ***/
#ifndef __JUCE_TIME_JUCEHEADER__
#define __JUCE_TIME_JUCEHEADER__


/*** Start of inlined file: juce_RelativeTime.h ***/
#ifndef __JUCE_RELATIVETIME_JUCEHEADER__
#define __JUCE_RELATIVETIME_JUCEHEADER__

/** A relative measure of time.

	The time is stored as a number of seconds, at double-precision floating
	point accuracy, and may be positive or negative.

	If you need an absolute time, (i.e. a date + time), see the Time class.
*/
class JUCE_API  RelativeTime
{
public:

	/** Creates a RelativeTime.

		@param seconds  the number of seconds, which may be +ve or -ve.
		@see milliseconds, minutes, hours, days, weeks
	*/
	explicit RelativeTime (double seconds = 0.0) noexcept;

	/** Copies another relative time. */
	RelativeTime (const RelativeTime& other) noexcept;

	/** Copies another relative time. */
	RelativeTime& operator= (const RelativeTime& other) noexcept;

	/** Destructor. */
	~RelativeTime() noexcept;

	/** Creates a new RelativeTime object representing a number of milliseconds.
		@see minutes, hours, days, weeks
	*/
	static const RelativeTime milliseconds (int milliseconds) noexcept;

	/** Creates a new RelativeTime object representing a number of milliseconds.
		@see minutes, hours, days, weeks
	*/
	static const RelativeTime milliseconds (int64 milliseconds) noexcept;

	/** Creates a new RelativeTime object representing a number of minutes.
		@see milliseconds, hours, days, weeks
	*/
	static const RelativeTime minutes (double numberOfMinutes) noexcept;

	/** Creates a new RelativeTime object representing a number of hours.
		@see milliseconds, minutes, days, weeks
	*/
	static const RelativeTime hours (double numberOfHours) noexcept;

	/** Creates a new RelativeTime object representing a number of days.
		@see milliseconds, minutes, hours, weeks
	*/
	static const RelativeTime days (double numberOfDays) noexcept;

	/** Creates a new RelativeTime object representing a number of weeks.
		@see milliseconds, minutes, hours, days
	*/
	static const RelativeTime weeks (double numberOfWeeks) noexcept;

	/** Returns the number of milliseconds this time represents.
		@see milliseconds, inSeconds, inMinutes, inHours, inDays, inWeeks
	*/
	int64 inMilliseconds() const noexcept;

	/** Returns the number of seconds this time represents.
		@see inMilliseconds, inMinutes, inHours, inDays, inWeeks
	*/
	double inSeconds() const noexcept       { return seconds; }

	/** Returns the number of minutes this time represents.
		@see inMilliseconds, inSeconds, inHours, inDays, inWeeks
	*/
	double inMinutes() const noexcept;

	/** Returns the number of hours this time represents.
		@see inMilliseconds, inSeconds, inMinutes, inDays, inWeeks
	*/
	double inHours() const noexcept;

	/** Returns the number of days this time represents.
		@see inMilliseconds, inSeconds, inMinutes, inHours, inWeeks
	*/
	double inDays() const noexcept;

	/** Returns the number of weeks this time represents.
		@see inMilliseconds, inSeconds, inMinutes, inHours, inDays
	*/
	double inWeeks() const noexcept;

	/** Returns a readable textual description of the time.

		The exact format of the string returned will depend on
		the magnitude of the time - e.g.

		"1 min 4 secs", "1 hr 45 mins", "2 weeks 5 days", "140 ms"

		so that only the two most significant units are printed.

		The returnValueForZeroTime value is the result that is returned if the
		length is zero. Depending on your application you might want to use this
		to return something more relevant like "empty" or "0 secs", etc.

		@see inMilliseconds, inSeconds, inMinutes, inHours, inDays, inWeeks
	*/
	String getDescription (const String& returnValueForZeroTime = "0") const;

	/** Adds another RelativeTime to this one. */
	const RelativeTime& operator+= (const RelativeTime& timeToAdd) noexcept;
	/** Subtracts another RelativeTime from this one. */
	const RelativeTime& operator-= (const RelativeTime& timeToSubtract) noexcept;

	/** Adds a number of seconds to this time. */
	const RelativeTime& operator+= (double secondsToAdd) noexcept;
	/** Subtracts a number of seconds from this time. */
	const RelativeTime& operator-= (double secondsToSubtract) noexcept;

private:

	double seconds;
};

/** Compares two RelativeTimes. */
bool operator== (const RelativeTime& t1, const RelativeTime& t2) noexcept;
/** Compares two RelativeTimes. */
bool operator!= (const RelativeTime& t1, const RelativeTime& t2) noexcept;
/** Compares two RelativeTimes. */
bool operator>  (const RelativeTime& t1, const RelativeTime& t2) noexcept;
/** Compares two RelativeTimes. */
bool operator<  (const RelativeTime& t1, const RelativeTime& t2) noexcept;
/** Compares two RelativeTimes. */
bool operator>= (const RelativeTime& t1, const RelativeTime& t2) noexcept;
/** Compares two RelativeTimes. */
bool operator<= (const RelativeTime& t1, const RelativeTime& t2) noexcept;

/** Adds two RelativeTimes together. */
RelativeTime  operator+  (const RelativeTime&  t1, const RelativeTime& t2) noexcept;
/** Subtracts two RelativeTimes. */
RelativeTime  operator-  (const RelativeTime&  t1, const RelativeTime& t2) noexcept;

#endif   // __JUCE_RELATIVETIME_JUCEHEADER__

/*** End of inlined file: juce_RelativeTime.h ***/

/**
	Holds an absolute date and time.

	Internally, the time is stored at millisecond precision.

	@see RelativeTime
*/
class JUCE_API  Time
{
public:

	/** Creates a Time object.

		This default constructor creates a time of 1st January 1970, (which is
		represented internally as 0ms).

		To create a time object representing the current time, use getCurrentTime().

		@see getCurrentTime
	*/
	Time() noexcept;

	/** Creates a time based on a number of milliseconds.

		The internal millisecond count is set to 0 (1st January 1970). To create a
		time object set to the current time, use getCurrentTime().

		@param millisecondsSinceEpoch   the number of milliseconds since the unix
										'epoch' (midnight Jan 1st 1970).
		@see getCurrentTime, currentTimeMillis
	*/
	explicit Time (int64 millisecondsSinceEpoch) noexcept;

	/** Creates a time from a set of date components.

		The timezone is assumed to be whatever the system is using as its locale.

		@param year             the year, in 4-digit format, e.g. 2004
		@param month            the month, in the range 0 to 11
		@param day              the day of the month, in the range 1 to 31
		@param hours            hours in 24-hour clock format, 0 to 23
		@param minutes          minutes 0 to 59
		@param seconds          seconds 0 to 59
		@param milliseconds     milliseconds 0 to 999
		@param useLocalTime     if true, encode using the current machine's local time; if
								false, it will always work in GMT.
	*/
	Time (int year,
		  int month,
		  int day,
		  int hours,
		  int minutes,
		  int seconds = 0,
		  int milliseconds = 0,
		  bool useLocalTime = true) noexcept;

	/** Creates a copy of another Time object. */
	Time (const Time& other) noexcept;

	/** Destructor. */
	~Time() noexcept;

	/** Copies this time from another one. */
	Time& operator= (const Time& other) noexcept;

	/** Returns a Time object that is set to the current system time.

		@see currentTimeMillis
	*/
	static Time JUCE_CALLTYPE getCurrentTime() noexcept;

	/** Returns the time as a number of milliseconds.

		@returns    the number of milliseconds this Time object represents, since
					midnight jan 1st 1970.
		@see getMilliseconds
	*/
	int64 toMilliseconds() const noexcept                           { return millisSinceEpoch; }

	/** Returns the year.

		A 4-digit format is used, e.g. 2004.
	*/
	int getYear() const noexcept;

	/** Returns the number of the month.

		The value returned is in the range 0 to 11.
		@see getMonthName
	*/
	int getMonth() const noexcept;

	/** Returns the name of the month.

		@param threeLetterVersion   if true, it'll be a 3-letter abbreviation, e.g. "Jan"; if false
									it'll return the long form, e.g. "January"
		@see getMonth
	*/
	String getMonthName (bool threeLetterVersion) const;

	/** Returns the day of the month.
		The value returned is in the range 1 to 31.
	*/
	int getDayOfMonth() const noexcept;

	/** Returns the number of the day of the week.
		The value returned is in the range 0 to 6 (0 = sunday, 1 = monday, etc).
	*/
	int getDayOfWeek() const noexcept;

	/** Returns the number of the day of the year.
		The value returned is in the range 0 to 365.
	*/
	int getDayOfYear() const noexcept;

	/** Returns the name of the weekday.

		@param threeLetterVersion   if true, it'll return a 3-letter abbreviation, e.g. "Tue"; if
									false, it'll return the full version, e.g. "Tuesday".
	*/
	String getWeekdayName (bool threeLetterVersion) const;

	/** Returns the number of hours since midnight.

		This is in 24-hour clock format, in the range 0 to 23.

		@see getHoursInAmPmFormat, isAfternoon
	*/
	int getHours() const noexcept;

	/** Returns true if the time is in the afternoon.

		So it returns true for "PM", false for "AM".

		@see getHoursInAmPmFormat, getHours
	*/
	bool isAfternoon() const noexcept;

	/** Returns the hours in 12-hour clock format.

		This will return a value 1 to 12 - use isAfternoon() to find out
		whether this is in the afternoon or morning.

		@see getHours, isAfternoon
	*/
	int getHoursInAmPmFormat() const noexcept;

	/** Returns the number of minutes, 0 to 59. */
	int getMinutes() const noexcept;

	/** Returns the number of seconds, 0 to 59. */
	int getSeconds() const noexcept;

	/** Returns the number of milliseconds, 0 to 999.

		Unlike toMilliseconds(), this just returns the position within the
		current second rather than the total number since the epoch.

		@see toMilliseconds
	*/
	int getMilliseconds() const noexcept;

	/** Returns true if the local timezone uses a daylight saving correction. */
	bool isDaylightSavingTime() const noexcept;

	/** Returns a 3-character string to indicate the local timezone. */
	String getTimeZone() const noexcept;

	/** Quick way of getting a string version of a date and time.

		For a more powerful way of formatting the date and time, see the formatted() method.

		@param includeDate      whether to include the date in the string
		@param includeTime      whether to include the time in the string
		@param includeSeconds   if the time is being included, this provides an option not to include
								the seconds in it
		@param use24HourClock   if the time is being included, sets whether to use am/pm or 24
								hour notation.
		@see formatted
	*/
	String toString (bool includeDate,
					 bool includeTime,
					 bool includeSeconds = true,
					 bool use24HourClock = false) const noexcept;

	/** Converts this date/time to a string with a user-defined format.

		This uses the C strftime() function to format this time as a string. To save you
		looking it up, these are the escape codes that strftime uses (other codes might
		work on some platforms and not others, but these are the common ones):

		%a  is replaced by the locale's abbreviated weekday name.
		%A  is replaced by the locale's full weekday name.
		%b  is replaced by the locale's abbreviated month name.
		%B  is replaced by the locale's full month name.
		%c  is replaced by the locale's appropriate date and time representation.
		%d  is replaced by the day of the month as a decimal number [01,31].
		%H  is replaced by the hour (24-hour clock) as a decimal number [00,23].
		%I  is replaced by the hour (12-hour clock) as a decimal number [01,12].
		%j  is replaced by the day of the year as a decimal number [001,366].
		%m  is replaced by the month as a decimal number [01,12].
		%M  is replaced by the minute as a decimal number [00,59].
		%p  is replaced by the locale's equivalent of either a.m. or p.m.
		%S  is replaced by the second as a decimal number [00,61].
		%U  is replaced by the week number of the year (Sunday as the first day of the week) as a decimal number [00,53].
		%w  is replaced by the weekday as a decimal number [0,6], with 0 representing Sunday.
		%W  is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.
		%x  is replaced by the locale's appropriate date representation.
		%X  is replaced by the locale's appropriate time representation.
		%y  is replaced by the year without century as a decimal number [00,99].
		%Y  is replaced by the year with century as a decimal number.
		%Z  is replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists.
		%%  is replaced by %.

		@see toString
	*/
	String formatted (const String& format) const;

	/** Adds a RelativeTime to this time. */
	Time& operator+= (const RelativeTime& delta);
	/** Subtracts a RelativeTime from this time. */
	Time& operator-= (const RelativeTime& delta);

	/** Tries to set the computer's clock.

		@returns    true if this succeeds, although depending on the system, the
					application might not have sufficient privileges to do this.
	*/
	bool setSystemTimeToThisTime() const;

	/** Returns the name of a day of the week.

		@param dayNumber            the day, 0 to 6 (0 = sunday, 1 = monday, etc)
		@param threeLetterVersion   if true, it'll return a 3-letter abbreviation, e.g. "Tue"; if
									false, it'll return the full version, e.g. "Tuesday".
	*/
	static String getWeekdayName (int dayNumber,
								  bool threeLetterVersion);

	/** Returns the name of one of the months.

		@param monthNumber  the month, 0 to 11
		@param threeLetterVersion   if true, it'll be a 3-letter abbreviation, e.g. "Jan"; if false
									it'll return the long form, e.g. "January"
	*/
	static String getMonthName (int monthNumber,
								bool threeLetterVersion);

	// Static methods for getting system timers directly..

	/** Returns the current system time.

		Returns the number of milliseconds since midnight jan 1st 1970.

		Should be accurate to within a few millisecs, depending on platform,
		hardware, etc.
	*/
	static int64 currentTimeMillis() noexcept;

	/** Returns the number of millisecs since a fixed event (usually system startup).

		This returns a monotonically increasing value which it unaffected by changes to the
		system clock. It should be accurate to within a few millisecs, depending on platform,
		hardware, etc.

		Being a 32-bit return value, it will of course wrap back to 0 after 2^32 seconds of
		uptime, so be careful to take that into account. If you need a 64-bit time, you can
		use currentTimeMillis() instead.

		@see getApproximateMillisecondCounter
	*/
	static uint32 getMillisecondCounter() noexcept;

	/** Returns the number of millisecs since a fixed event (usually system startup).

		This has the same function as getMillisecondCounter(), but returns a more accurate
		value, using a higher-resolution timer if one is available.

		@see getMillisecondCounter
	*/
	static double getMillisecondCounterHiRes() noexcept;

	/** Waits until the getMillisecondCounter() reaches a given value.

		This will make the thread sleep as efficiently as it can while it's waiting.
	*/
	static void waitForMillisecondCounter (uint32 targetTime) noexcept;

	/** Less-accurate but faster version of getMillisecondCounter().

		This will return the last value that getMillisecondCounter() returned, so doesn't
		need to make a system call, but is less accurate - it shouldn't be more than
		100ms away from the correct time, though, so is still accurate enough for a
		lot of purposes.

		@see getMillisecondCounter
	*/
	static uint32 getApproximateMillisecondCounter() noexcept;

	// High-resolution timers..

	/** Returns the current high-resolution counter's tick-count.

		This is a similar idea to getMillisecondCounter(), but with a higher
		resolution.

		@see getHighResolutionTicksPerSecond, highResolutionTicksToSeconds,
			 secondsToHighResolutionTicks
	*/
	static int64 getHighResolutionTicks() noexcept;

	/** Returns the resolution of the high-resolution counter in ticks per second.

		@see getHighResolutionTicks, highResolutionTicksToSeconds,
			 secondsToHighResolutionTicks
	*/
	static int64 getHighResolutionTicksPerSecond() noexcept;

	/** Converts a number of high-resolution ticks into seconds.

		@see getHighResolutionTicks, getHighResolutionTicksPerSecond,
			 secondsToHighResolutionTicks
	*/
	static double highResolutionTicksToSeconds (int64 ticks) noexcept;

	/** Converts a number seconds into high-resolution ticks.

		@see getHighResolutionTicks, getHighResolutionTicksPerSecond,
			 highResolutionTicksToSeconds
	*/
	static int64 secondsToHighResolutionTicks (double seconds) noexcept;

private:

	int64 millisSinceEpoch;
};

/** Adds a RelativeTime to a Time. */
JUCE_API Time operator+ (const Time& time, const RelativeTime& delta);
/** Adds a RelativeTime to a Time. */
JUCE_API Time operator+ (const RelativeTime& delta, const Time& time);

/** Subtracts a RelativeTime from a Time. */
JUCE_API Time operator- (const Time& time, const RelativeTime& delta);
/** Returns the relative time difference between two times. */
JUCE_API const RelativeTime operator- (const Time& time1, const Time& time2);

/** Compares two Time objects. */
JUCE_API bool operator== (const Time& time1, const Time& time2);
/** Compares two Time objects. */
JUCE_API bool operator!= (const Time& time1, const Time& time2);
/** Compares two Time objects. */
JUCE_API bool operator<  (const Time& time1, const Time& time2);
/** Compares two Time objects. */
JUCE_API bool operator<= (const Time& time1, const Time& time2);
/** Compares two Time objects. */
JUCE_API bool operator>  (const Time& time1, const Time& time2);
/** Compares two Time objects. */
JUCE_API bool operator>= (const Time& time1, const Time& time2);

#endif   // __JUCE_TIME_JUCEHEADER__

/*** End of inlined file: juce_Time.h ***/


/*** Start of inlined file: juce_MemoryBlock.h ***/
#ifndef __JUCE_MEMORYBLOCK_JUCEHEADER__
#define __JUCE_MEMORYBLOCK_JUCEHEADER__

/**
	A class to hold a resizable block of raw data.

*/
class JUCE_API  MemoryBlock
{
public:

	/** Create an uninitialised block with 0 size. */
	MemoryBlock() noexcept;

	/** Creates a memory block with a given initial size.

		@param initialSize          the size of block to create
		@param initialiseToZero     whether to clear the memory or just leave it uninitialised
	*/
	MemoryBlock (const size_t initialSize,
				 bool initialiseToZero = false);

	/** Creates a copy of another memory block. */
	MemoryBlock (const MemoryBlock& other);

	/** Creates a memory block using a copy of a block of data.

		@param dataToInitialiseFrom     some data to copy into this block
		@param sizeInBytes              how much space to use
	*/
	MemoryBlock (const void* dataToInitialiseFrom, size_t sizeInBytes);

	/** Destructor. */
	~MemoryBlock() noexcept;

	/** Copies another memory block onto this one.

		This block will be resized and copied to exactly match the other one.
	*/
	MemoryBlock& operator= (const MemoryBlock& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	MemoryBlock (MemoryBlock&& other) noexcept;
	MemoryBlock& operator= (MemoryBlock&& other) noexcept;
   #endif

	/** Compares two memory blocks.

		@returns true only if the two blocks are the same size and have identical contents.
	*/
	bool operator== (const MemoryBlock& other) const noexcept;

	/** Compares two memory blocks.

		@returns true if the two blocks are different sizes or have different contents.
	*/
	bool operator!= (const MemoryBlock& other) const noexcept;

	/** Returns true if the data in this MemoryBlock matches the raw bytes passed-in.
	*/
	bool matches (const void* data, size_t dataSize) const noexcept;

	/** Returns a void pointer to the data.

		Note that the pointer returned will probably become invalid when the
		block is resized.
	*/
	void* getData() const noexcept                                  { return data; }

	/** Returns a byte from the memory block.

		This returns a reference, so you can also use it to set a byte.
	*/
	template <typename Type>
	char& operator[] (const Type offset) const noexcept             { return data [offset]; }

	/** Returns the block's current allocated size, in bytes. */
	size_t getSize() const noexcept                                 { return size; }

	/** Resizes the memory block.

		This will try to keep as much of the block's current content as it can,
		and can optionally be made to clear any new space that gets allocated at
		the end of the block.

		@param newSize                      the new desired size for the block
		@param initialiseNewSpaceToZero     if the block gets enlarged, this determines
											whether to clear the new section or just leave it
											uninitialised
		@see ensureSize
	*/
	void setSize (const size_t newSize,
				  bool initialiseNewSpaceToZero = false);

	/** Increases the block's size only if it's smaller than a given size.

		@param minimumSize                  if the block is already bigger than this size, no action
											will be taken; otherwise it will be increased to this size
		@param initialiseNewSpaceToZero     if the block gets enlarged, this determines
											whether to clear the new section or just leave it
											uninitialised
		@see setSize
	*/
	void ensureSize (const size_t minimumSize,
					 bool initialiseNewSpaceToZero = false);

	/** Fills the entire memory block with a repeated byte value.

		This is handy for clearing a block of memory to zero.
	*/
	void fillWith (uint8 valueToUse) noexcept;

	/** Adds another block of data to the end of this one.
		The data pointer must not be null. This block's size will be increased accordingly.
	*/
	void append (const void* data, size_t numBytes);

	/** Inserts some data into the block.
		The dataToInsert pointer must not be null. This block's size will be increased accordingly.
		If the insert position lies outside the valid range of the block, it will be clipped to
		within the range before being used.
	*/
	void insert (const void* dataToInsert, size_t numBytesToInsert, size_t insertPosition);

	/** Chops out a section  of the block.

		This will remove a section of the memory block and close the gap around it,
		shifting any subsequent data downwards and reducing the size of the block.

		If the range specified goes beyond the size of the block, it will be clipped.
	*/
	void removeSection (size_t startByte, size_t numBytesToRemove);

	/** Copies data into this MemoryBlock from a memory address.

		@param srcData              the memory location of the data to copy into this block
		@param destinationOffset    the offset in this block at which the data being copied should begin
		@param numBytes             how much to copy in (if this goes beyond the size of the memory block,
									it will be clipped so not to do anything nasty)
	*/
	void copyFrom (const void* srcData,
				   int destinationOffset,
				   size_t numBytes) noexcept;

	/** Copies data from this MemoryBlock to a memory address.

		@param destData         the memory location to write to
		@param sourceOffset     the offset within this block from which the copied data will be read
		@param numBytes         how much to copy (if this extends beyond the limits of the memory block,
								zeros will be used for that portion of the data)
	*/
	void copyTo (void* destData,
				 int sourceOffset,
				 size_t numBytes) const noexcept;

	/** Exchanges the contents of this and another memory block.
		No actual copying is required for this, so it's very fast.
	*/
	void swapWith (MemoryBlock& other) noexcept;

	/** Attempts to parse the contents of the block as a zero-terminated UTF8 string. */
	String toString() const;

	/** Parses a string of hexadecimal numbers and writes this data into the memory block.

		The block will be resized to the number of valid bytes read from the string.
		Non-hex characters in the string will be ignored.

		@see String::toHexString()
	*/
	void loadFromHexString (const String& sourceHexString);

	/** Sets a number of bits in the memory block, treating it as a long binary sequence. */
	void setBitRange (size_t bitRangeStart,
					  size_t numBits,
					  int binaryNumberToApply) noexcept;

	/** Reads a number of bits from the memory block, treating it as one long binary sequence */
	int getBitRange (size_t bitRangeStart,
					 size_t numBitsToRead) const noexcept;

	/** Returns a string of characters that represent the binary contents of this block.

		Uses a 64-bit encoding system to allow binary data to be turned into a string
		of simple non-extended characters, e.g. for storage in XML.

		@see fromBase64Encoding
	*/
	String toBase64Encoding() const;

	/** Takes a string of encoded characters and turns it into binary data.

		The string passed in must have been created by to64BitEncoding(), and this
		block will be resized to recreate the original data block.

		@see toBase64Encoding
	*/
	bool fromBase64Encoding  (const String& encodedString);

private:

	HeapBlock <char> data;
	size_t size;
	static const char* const encodingTable;

	JUCE_LEAK_DETECTOR (MemoryBlock);
};

#endif   // __JUCE_MEMORYBLOCK_JUCEHEADER__

/*** End of inlined file: juce_MemoryBlock.h ***/


/*** Start of inlined file: juce_Result.h ***/
#ifndef __JUCE_RESULT_JUCEHEADER__
#define __JUCE_RESULT_JUCEHEADER__

/**
	Represents the 'success' or 'failure' of an operation, and holds an associated
	error message to describe the error when there's a failure.

	E.g.
	@code
	Result myOperation()
	{
		if (doSomeKindOfFoobar())
			return Result::ok();
		else
			return Result::fail ("foobar didn't work!");
	}

	const Result result (myOperation());

	if (result.wasOk())
	{
		...it's all good...
	}
	else
	{
		warnUserAboutFailure ("The foobar operation failed! Error message was: "
								+ result.getErrorMessage());
	}
	@endcode
*/
class JUCE_API  Result
{
public:

	/** Creates and returns a 'successful' result. */
	static Result ok() noexcept;

	/** Creates a 'failure' result.
		If you pass a blank error message in here, a default "Unknown Error" message
		will be used instead.
	*/
	static Result fail (const String& errorMessage) noexcept;

	/** Returns true if this result indicates a success. */
	bool wasOk() const noexcept;

	/** Returns true if this result indicates a failure.
		You can use getErrorMessage() to retrieve the error message associated
		with the failure.
	*/
	bool failed() const noexcept;

	/** Returns true if this result indicates a success.
		This is equivalent to calling wasOk().
	*/
	operator bool() const noexcept;

	/** Returns true if this result indicates a failure.
		This is equivalent to calling failed().
	*/
	bool operator!() const noexcept;

	/** Returns the error message that was set when this result was created.
		For a successful result, this will be an empty string;
	*/
	const String& getErrorMessage() const noexcept;

	Result (const Result& other);
	Result& operator= (const Result& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	Result (Result&& other) noexcept;
	Result& operator= (Result&& other) noexcept;
   #endif

	bool operator== (const Result& other) const noexcept;
	bool operator!= (const Result& other) const noexcept;

private:
	String errorMessage;

	explicit Result (const String& errorMessage) noexcept;

	// These casts are private to prevent people trying to use the Result object in numeric contexts
	operator int() const;
	operator void*() const;
};

#endif   // __JUCE_RESULT_JUCEHEADER__

/*** End of inlined file: juce_Result.h ***/

class FileInputStream;
class FileOutputStream;

/**
	Represents a local file or directory.

	This class encapsulates the absolute pathname of a file or directory, and
	has methods for finding out about the file and changing its properties.

	To read or write to the file, there are methods for returning an input or
	output stream.

	@see FileInputStream, FileOutputStream
*/
class JUCE_API  File
{
public:

	/** Creates an (invalid) file object.

		The file is initially set to an empty path, so getFullPath() will return
		an empty string, and comparing the file to File::nonexistent will return
		true.

		You can use its operator= method to point it at a proper file.
	*/
	File()   {}

	/** Creates a file from an absolute path.

		If the path supplied is a relative path, it is taken to be relative
		to the current working directory (see File::getCurrentWorkingDirectory()),
		but this isn't a recommended way of creating a file, because you
		never know what the CWD is going to be.

		On the Mac/Linux, the path can include "~" notation for referring to
		user home directories.
	*/
	File (const String& path);

	/** Creates a copy of another file object. */
	File (const File& other);

	/** Destructor. */
	~File()  {}

	/** Sets the file based on an absolute pathname.

		If the path supplied is a relative path, it is taken to be relative
		to the current working directory (see File::getCurrentWorkingDirectory()),
		but this isn't a recommended way of creating a file, because you
		never know what the CWD is going to be.

		On the Mac/Linux, the path can include "~" notation for referring to
		user home directories.
	*/
	File& operator= (const String& newFilePath);

	/** Copies from another file object. */
	File& operator= (const File& otherFile);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	File (File&& otherFile) noexcept;
	File& operator= (File&& otherFile) noexcept;
   #endif

	/** This static constant is used for referring to an 'invalid' file. */
	static const File nonexistent;

	/** Checks whether the file actually exists.

		@returns    true if the file exists, either as a file or a directory.
		@see existsAsFile, isDirectory
	*/
	bool exists() const;

	/** Checks whether the file exists and is a file rather than a directory.

		@returns    true only if this is a real file, false if it's a directory
					or doesn't exist
		@see exists, isDirectory
	*/
	bool existsAsFile() const;

	/** Checks whether the file is a directory that exists.

		@returns    true only if the file is a directory which actually exists, so
					false if it's a file or doesn't exist at all
		@see exists, existsAsFile
	*/
	bool isDirectory() const;

	/** Returns the size of the file in bytes.

		@returns    the number of bytes in the file, or 0 if it doesn't exist.
	*/
	int64 getSize() const;

	/** Utility function to convert a file size in bytes to a neat string description.

		So for example 100 would return "100 bytes", 2000 would return "2 KB",
		2000000 would produce "2 MB", etc.
	*/
	static String descriptionOfSizeInBytes (int64 bytes);

	/** Returns the complete, absolute path of this file.

		This includes the filename and all its parent folders. On Windows it'll
		also include the drive letter prefix; on Mac or Linux it'll be a complete
		path starting from the root folder.

		If you just want the file's name, you should use getFileName() or
		getFileNameWithoutExtension().

		@see getFileName, getRelativePathFrom
	*/
	const String& getFullPathName() const noexcept          { return fullPath; }

	/** Returns the last section of the pathname.

		Returns just the final part of the path - e.g. if the whole path
		is "/moose/fish/foo.txt" this will return "foo.txt".

		For a directory, it returns the final part of the path - e.g. for the
		directory "/moose/fish" it'll return "fish".

		If the filename begins with a dot, it'll return the whole filename, e.g. for
		"/moose/.fish", it'll return ".fish"

		@see getFullPathName, getFileNameWithoutExtension
	*/
	String getFileName() const;

	/** Creates a relative path that refers to a file relatively to a given directory.

		e.g. File ("/moose/foo.txt").getRelativePathFrom (File ("/moose/fish/haddock"))
			 would return "../../foo.txt".

		If it's not possible to navigate from one file to the other, an absolute
		path is returned. If the paths are invalid, an empty string may also be
		returned.

		@param directoryToBeRelativeTo  the directory which the resultant string will
										be relative to. If this is actually a file rather than
										a directory, its parent directory will be used instead.
										If it doesn't exist, it's assumed to be a directory.
		@see getChildFile, isAbsolutePath
	*/
	String getRelativePathFrom (const File& directoryToBeRelativeTo) const;

	/** Returns the file's extension.

		Returns the file extension of this file, also including the dot.

		e.g. "/moose/fish/foo.txt" would return ".txt"

		@see hasFileExtension, withFileExtension, getFileNameWithoutExtension
	*/
	String getFileExtension() const;

	/** Checks whether the file has a given extension.

		@param extensionToTest  the extension to look for - it doesn't matter whether or
								not this string has a dot at the start, so ".wav" and "wav"
								will have the same effect. The comparison used is
								case-insensitve. To compare with multiple extensions, this
								parameter can contain multiple strings, separated by semi-colons -
								so, for example: hasFileExtension (".jpeg;png;gif") would return
								true if the file has any of those three extensions.

		@see getFileExtension, withFileExtension, getFileNameWithoutExtension
	*/
	bool hasFileExtension (const String& extensionToTest) const;

	/** Returns a version of this file with a different file extension.

		e.g. File ("/moose/fish/foo.txt").withFileExtension ("html") returns "/moose/fish/foo.html"

		@param newExtension     the new extension, either with or without a dot at the start (this
								doesn't make any difference). To get remove a file's extension altogether,
								pass an empty string into this function.

		@see getFileName, getFileExtension, hasFileExtension, getFileNameWithoutExtension
	*/
	File withFileExtension (const String& newExtension) const;

	/** Returns the last part of the filename, without its file extension.

		e.g. for "/moose/fish/foo.txt" this will return "foo".

		@see getFileName, getFileExtension, hasFileExtension, withFileExtension
	*/
	String getFileNameWithoutExtension() const;

	/** Returns a 32-bit hash-code that identifies this file.

		This is based on the filename. Obviously it's possible, although unlikely, that
		two files will have the same hash-code.
	*/
	int hashCode() const;

	/** Returns a 64-bit hash-code that identifies this file.

		This is based on the filename. Obviously it's possible, although unlikely, that
		two files will have the same hash-code.
	*/
	int64 hashCode64() const;

	/** Returns a file based on a relative path.

		This will find a child file or directory of the current object.

		e.g.
			File ("/moose/fish").getChildFile ("foo.txt") will produce "/moose/fish/foo.txt".
			File ("/moose/fish").getChildFile ("../foo.txt") will produce "/moose/foo.txt".

		If the string is actually an absolute path, it will be treated as such, e.g.
			File ("/moose/fish").getChildFile ("/foo.txt") will produce "/foo.txt"

		@see getSiblingFile, getParentDirectory, getRelativePathFrom, isAChildOf
	*/
	File getChildFile (String relativePath) const;

	/** Returns a file which is in the same directory as this one.

		This is equivalent to getParentDirectory().getChildFile (name).

		@see getChildFile, getParentDirectory
	*/
	File getSiblingFile (const String& siblingFileName) const;

	/** Returns the directory that contains this file or directory.

		e.g. for "/moose/fish/foo.txt" this will return "/moose/fish".
	*/
	File getParentDirectory() const;

	/** Checks whether a file is somewhere inside a directory.

		Returns true if this file is somewhere inside a subdirectory of the directory
		that is passed in. Neither file actually has to exist, because the function
		just checks the paths for similarities.

		e.g. File ("/moose/fish/foo.txt").isAChildOf ("/moose") is true.
			 File ("/moose/fish/foo.txt").isAChildOf ("/moose/fish") is also true.
	*/
	bool isAChildOf (const File& potentialParentDirectory) const;

	/** Chooses a filename relative to this one that doesn't already exist.

		If this file is a directory, this will return a child file of this
		directory that doesn't exist, by adding numbers to a prefix and suffix until
		it finds one that isn't already there.

		If the prefix + the suffix doesn't exist, it won't bother adding a number.

		e.g. File ("/moose/fish").getNonexistentChildFile ("foo", ".txt", true) might
			 return "/moose/fish/foo(2).txt" if there's already a file called "foo.txt".

		@param prefix                   the string to use for the filename before the number
		@param suffix                   the string to add to the filename after the number
		@param putNumbersInBrackets     if true, this will create filenames in the
										format "prefix(number)suffix", if false, it will leave the
										brackets out.
	*/
	File getNonexistentChildFile (const String& prefix,
								  const String& suffix,
								  bool putNumbersInBrackets = true) const;

	/** Chooses a filename for a sibling file to this one that doesn't already exist.

		If this file doesn't exist, this will just return itself, otherwise it
		will return an appropriate sibling that doesn't exist, e.g. if a file
		"/moose/fish/foo.txt" exists, this might return "/moose/fish/foo(2).txt".

		@param putNumbersInBrackets     whether to add brackets around the numbers that
										get appended to the new filename.
	*/
	File getNonexistentSibling (bool putNumbersInBrackets = true) const;

	/** Compares the pathnames for two files. */
	bool operator== (const File& otherFile) const;
	/** Compares the pathnames for two files. */
	bool operator!= (const File& otherFile) const;
	/** Compares the pathnames for two files. */
	bool operator< (const File& otherFile) const;
	/** Compares the pathnames for two files. */
	bool operator> (const File& otherFile) const;

	/** Checks whether a file can be created or written to.

		@returns    true if it's possible to create and write to this file. If the file
					doesn't already exist, this will check its parent directory to
					see if writing is allowed.
		@see setReadOnly
	*/
	bool hasWriteAccess() const;

	/** Changes the write-permission of a file or directory.

		@param shouldBeReadOnly     whether to add or remove write-permission
		@param applyRecursively     if the file is a directory and this is true, it will
									recurse through all the subfolders changing the permissions
									of all files
		@returns    true if it manages to change the file's permissions.
		@see hasWriteAccess
	*/
	bool setReadOnly (bool shouldBeReadOnly,
					  bool applyRecursively = false) const;

	/** Returns true if this file is a hidden or system file.

		The criteria for deciding whether a file is hidden are platform-dependent.
	*/
	bool isHidden() const;

	/** If this file is a link, this returns the file that it points to.

		If this file isn't actually link, it'll just return itself.
	*/
	File getLinkedTarget() const;

	/** Returns the last modification time of this file.

		@returns    the time, or an invalid time if the file doesn't exist.
		@see setLastModificationTime, getLastAccessTime, getCreationTime
	*/
	Time getLastModificationTime() const;

	/** Returns the last time this file was accessed.

		@returns    the time, or an invalid time if the file doesn't exist.
		@see setLastAccessTime, getLastModificationTime, getCreationTime
	*/
	Time getLastAccessTime() const;

	/** Returns the time that this file was created.

		@returns    the time, or an invalid time if the file doesn't exist.
		@see getLastModificationTime, getLastAccessTime
	*/
	Time getCreationTime() const;

	/** Changes the modification time for this file.

		@param newTime  the time to apply to the file
		@returns true if it manages to change the file's time.
		@see getLastModificationTime, setLastAccessTime, setCreationTime
	*/
	bool setLastModificationTime (const Time& newTime) const;

	/** Changes the last-access time for this file.

		@param newTime  the time to apply to the file
		@returns true if it manages to change the file's time.
		@see getLastAccessTime, setLastModificationTime, setCreationTime
	*/
	bool setLastAccessTime (const Time& newTime) const;

	/** Changes the creation date for this file.

		@param newTime  the time to apply to the file
		@returns true if it manages to change the file's time.
		@see getCreationTime, setLastModificationTime, setLastAccessTime
	*/
	bool setCreationTime (const Time& newTime) const;

	/** If possible, this will try to create a version string for the given file.

		The OS may be able to look at the file and give a version for it - e.g. with
		executables, bundles, dlls, etc. If no version is available, this will
		return an empty string.
	*/
	String getVersion() const;

	/** Creates an empty file if it doesn't already exist.

		If the file that this object refers to doesn't exist, this will create a file
		of zero size.

		If it already exists or is a directory, this method will do nothing.

		@returns    true if the file has been created (or if it already existed).
		@see createDirectory
	*/
	Result create() const;

	/** Creates a new directory for this filename.

		This will try to create the file as a directory, and fill also create
		any parent directories it needs in order to complete the operation.

		@returns    a result to indicate whether the directory was created successfully, or
					an error message if it failed.
		@see create
	*/
	Result createDirectory() const;

	/** Deletes a file.

		If this file is actually a directory, it may not be deleted correctly if it
		contains files. See deleteRecursively() as a better way of deleting directories.

		@returns    true if the file has been successfully deleted (or if it didn't exist to
					begin with).
		@see deleteRecursively
	*/
	bool deleteFile() const;

	/** Deletes a file or directory and all its subdirectories.

		If this file is a directory, this will try to delete it and all its subfolders. If
		it's just a file, it will just try to delete the file.

		@returns    true if the file and all its subfolders have been successfully deleted
					(or if it didn't exist to begin with).
		@see deleteFile
	*/
	bool deleteRecursively() const;

	/** Moves this file or folder to the trash.

		@returns true if the operation succeeded. It could fail if the trash is full, or
				 if the file is write-protected, so you should check the return value
				 and act appropriately.
	*/
	bool moveToTrash() const;

	/** Moves or renames a file.

		Tries to move a file to a different location.
		If the target file already exists, this will attempt to delete it first, and
		will fail if this can't be done.

		Note that the destination file isn't the directory to put it in, it's the actual
		filename that you want the new file to have.

		@returns    true if the operation succeeds
	*/
	bool moveFileTo (const File& targetLocation) const;

	/** Copies a file.

		Tries to copy a file to a different location.
		If the target file already exists, this will attempt to delete it first, and
		will fail if this can't be done.

		@returns    true if the operation succeeds
	*/
	bool copyFileTo (const File& targetLocation) const;

	/** Copies a directory.

		Tries to copy an entire directory, recursively.

		If this file isn't a directory or if any target files can't be created, this
		will return false.

		@param newDirectory    the directory that this one should be copied to. Note that this
							   is the name of the actual directory to create, not the directory
							   into which the new one should be placed, so there must be enough
							   write privileges to create it if it doesn't exist. Any files inside
							   it will be overwritten by similarly named ones that are copied.
	*/
	bool copyDirectoryTo (const File& newDirectory) const;

	/** Used in file searching, to specify whether to return files, directories, or both.
	*/
	enum TypesOfFileToFind
	{
		findDirectories             = 1,    /**< Use this flag to indicate that you want to find directories. */
		findFiles                   = 2,    /**< Use this flag to indicate that you want to find files. */
		findFilesAndDirectories     = 3,    /**< Use this flag to indicate that you want to find both files and directories. */
		ignoreHiddenFiles           = 4     /**< Add this flag to avoid returning any hidden files in the results. */
	};

	/** Searches inside a directory for files matching a wildcard pattern.

		Assuming that this file is a directory, this method will search it
		for either files or subdirectories whose names match a filename pattern.

		@param results                  an array to which File objects will be added for the
										files that the search comes up with
		@param whatToLookFor            a value from the TypesOfFileToFind enum, specifying whether to
										return files, directories, or both. If the ignoreHiddenFiles flag
										is also added to this value, hidden files won't be returned
		@param searchRecursively        if true, all subdirectories will be recursed into to do
										an exhaustive search
		@param wildCardPattern          the filename pattern to search for, e.g. "*.txt"
		@returns                        the number of results that have been found

		@see getNumberOfChildFiles, DirectoryIterator
	*/
	int findChildFiles (Array<File>& results,
						int whatToLookFor,
						bool searchRecursively,
						const String& wildCardPattern = "*") const;

	/** Searches inside a directory and counts how many files match a wildcard pattern.

		Assuming that this file is a directory, this method will search it
		for either files or subdirectories whose names match a filename pattern,
		and will return the number of matches found.

		This isn't a recursive call, and will only search this directory, not
		its children.

		@param whatToLookFor    a value from the TypesOfFileToFind enum, specifying whether to
								count files, directories, or both. If the ignoreHiddenFiles flag
								is also added to this value, hidden files won't be counted
		@param wildCardPattern  the filename pattern to search for, e.g. "*.txt"
		@returns                the number of matches found
		@see findChildFiles, DirectoryIterator
	*/
	int getNumberOfChildFiles (int whatToLookFor,
							   const String& wildCardPattern = "*") const;

	/** Returns true if this file is a directory that contains one or more subdirectories.
		@see isDirectory, findChildFiles
	*/
	bool containsSubDirectories() const;

	/** Creates a stream to read from this file.

		@returns    a stream that will read from this file (initially positioned at the
					start of the file), or 0 if the file can't be opened for some reason
		@see createOutputStream, loadFileAsData
	*/
	FileInputStream* createInputStream() const;

	/** Creates a stream to write to this file.

		If the file exists, the stream that is returned will be positioned ready for
		writing at the end of the file, so you might want to use deleteFile() first
		to write to an empty file.

		@returns    a stream that will write to this file (initially positioned at the
					end of the file), or 0 if the file can't be opened for some reason
		@see createInputStream, appendData, appendText
	*/
	FileOutputStream* createOutputStream (int bufferSize = 0x8000) const;

	/** Loads a file's contents into memory as a block of binary data.

		Of course, trying to load a very large file into memory will blow up, so
		it's better to check first.

		@param result   the data block to which the file's contents should be appended - note
						that if the memory block might already contain some data, you
						might want to clear it first
		@returns        true if the file could all be read into memory
	*/
	bool loadFileAsData (MemoryBlock& result) const;

	/** Reads a file into memory as a string.

		Attempts to load the entire file as a zero-terminated string.

		This makes use of InputStream::readEntireStreamAsString, which should
		automatically cope with unicode/acsii file formats.
	*/
	String loadFileAsString() const;

	/** Reads the contents of this file as text and splits it into lines, which are
		appended to the given StringArray.
	*/
	void readLines (StringArray& destLines) const;

	/** Appends a block of binary data to the end of the file.

		This will try to write the given buffer to the end of the file.

		@returns false if it can't write to the file for some reason
	*/
	bool appendData (const void* dataToAppend,
					 int numberOfBytes) const;

	/** Replaces this file's contents with a given block of data.

		This will delete the file and replace it with the given data.

		A nice feature of this method is that it's safe - instead of deleting
		the file first and then re-writing it, it creates a new temporary file,
		writes the data to that, and then moves the new file to replace the existing
		file. This means that if the power gets pulled out or something crashes,
		you're a lot less likely to end up with a corrupted or unfinished file..

		Returns true if the operation succeeds, or false if it fails.

		@see appendText
	*/
	bool replaceWithData (const void* dataToWrite,
						  int numberOfBytes) const;

	/** Appends a string to the end of the file.

		This will try to append a text string to the file, as either 16-bit unicode
		or 8-bit characters in the default system encoding.

		It can also write the 'ff fe' unicode header bytes before the text to indicate
		the endianness of the file.

		Any single \\n characters in the string are replaced with \\r\\n before it is written.

		@see replaceWithText
	*/
	bool appendText (const String& textToAppend,
					 bool asUnicode = false,
					 bool writeUnicodeHeaderBytes = false) const;

	/** Replaces this file's contents with a given text string.

		This will delete the file and replace it with the given text.

		A nice feature of this method is that it's safe - instead of deleting
		the file first and then re-writing it, it creates a new temporary file,
		writes the text to that, and then moves the new file to replace the existing
		file. This means that if the power gets pulled out or something crashes,
		you're a lot less likely to end up with an empty file..

		For an explanation of the parameters here, see the appendText() method.

		Returns true if the operation succeeds, or false if it fails.

		@see appendText
	*/
	bool replaceWithText (const String& textToWrite,
						  bool asUnicode = false,
						  bool writeUnicodeHeaderBytes = false) const;

	/** Attempts to scan the contents of this file and compare it to another file, returning
		true if this is possible and they match byte-for-byte.
	*/
	bool hasIdenticalContentTo (const File& other) const;

	/** Creates a set of files to represent each file root.

		e.g. on Windows this will create files for "c:\", "d:\" etc according
		to which ones are available. On the Mac/Linux, this will probably
		just add a single entry for "/".
	*/
	static void findFileSystemRoots (Array<File>& results);

	/** Finds the name of the drive on which this file lives.

		@returns the volume label of the drive, or an empty string if this isn't possible
	*/
	String getVolumeLabel() const;

	/** Returns the serial number of the volume on which this file lives.

		@returns the serial number, or zero if there's a problem doing this
	*/
	int getVolumeSerialNumber() const;

	/** Returns the number of bytes free on the drive that this file lives on.

		@returns the number of bytes free, or 0 if there's a problem finding this out
		@see getVolumeTotalSize
	*/
	int64 getBytesFreeOnVolume() const;

	/** Returns the total size of the drive that contains this file.

		@returns the total number of bytes that the volume can hold
		@see getBytesFreeOnVolume
	*/
	int64 getVolumeTotalSize() const;

	/** Returns true if this file is on a CD or DVD drive. */
	bool isOnCDRomDrive() const;

	/** Returns true if this file is on a hard disk.

		This will fail if it's a network drive, but will still be true for
		removable hard-disks.
	*/
	bool isOnHardDisk() const;

	/** Returns true if this file is on a removable disk drive.

		This might be a usb-drive, a CD-rom, or maybe a network drive.
	*/
	bool isOnRemovableDrive() const;

	/** Launches the file as a process.

		- if the file is executable, this will run it.

		- if it's a document of some kind, it will launch the document with its
		default viewer application.

		- if it's a folder, it will be opened in Explorer, Finder, or equivalent.

		@see revealToUser
	*/
	bool startAsProcess (const String& parameters = String::empty) const;

	/** Opens Finder, Explorer, or whatever the OS uses, to show the user this file's location.
		@see startAsProcess
	*/
	void revealToUser() const;

	/** A set of types of location that can be passed to the getSpecialLocation() method.
	*/
	enum SpecialLocationType
	{
		/** The user's home folder. This is the same as using File ("~"). */
		userHomeDirectory,

		/** The user's default documents folder. On Windows, this might be the user's
			"My Documents" folder. On the Mac it'll be their "Documents" folder. Linux
			doesn't tend to have one of these, so it might just return their home folder.
		*/
		userDocumentsDirectory,

		/** The folder that contains the user's desktop objects. */
		userDesktopDirectory,

		/** The folder in which applications store their persistent user-specific settings.
			On Windows, this might be "\Documents and Settings\username\Application Data".
			On the Mac, it might be "~/Library". If you're going to store your settings in here,
			always create your own sub-folder to put them in, to avoid making a mess.
		*/
		userApplicationDataDirectory,

		/** An equivalent of the userApplicationDataDirectory folder that is shared by all users
			of the computer, rather than just the current user.

			On the Mac it'll be "/Library", on Windows, it could be something like
			"\Documents and Settings\All Users\Application Data".

			Depending on the setup, this folder may be read-only.
		*/
		commonApplicationDataDirectory,

		/** The folder that should be used for temporary files.

			Always delete them when you're finished, to keep the user's computer tidy!
		*/
		tempDirectory,

		/** Returns this application's executable file.

			If running as a plug-in or DLL, this will (where possible) be the DLL rather than the
			host app.

			On the mac this will return the unix binary, not the package folder - see
			currentApplicationFile for that.

			See also invokedExecutableFile, which is similar, but if the exe was launched from a
			file link, invokedExecutableFile will return the name of the link.
		*/
		currentExecutableFile,

		/** Returns this application's location.

			If running as a plug-in or DLL, this will (where possible) be the DLL rather than the
			host app.

			On the mac this will return the package folder (if it's in one), not the unix binary
			that's inside it - compare with currentExecutableFile.
		*/
		currentApplicationFile,

		/** Returns the file that was invoked to launch this executable.
			This may differ from currentExecutableFile if the app was started from e.g. a link - this
			will return the name of the link that was used, whereas currentExecutableFile will return
			the actual location of the target executable.
		*/
		invokedExecutableFile,

		/** In a plugin, this will return the path of the host executable. */
		hostApplicationPath,

		/** The directory in which applications normally get installed.

			So on windows, this would be something like "c:\program files", on the
			Mac "/Applications", or "/usr" on linux.
		*/
		globalApplicationsDirectory,

		/** The most likely place where a user might store their music files.
		*/
		userMusicDirectory,

		/** The most likely place where a user might store their movie files.
		*/
		userMoviesDirectory,
	};

	/** Finds the location of a special type of file or directory, such as a home folder or
		documents folder.

		@see SpecialLocationType
	*/
	static File JUCE_CALLTYPE getSpecialLocation (const SpecialLocationType type);

	/** Returns a temporary file in the system's temp directory.

		This will try to return the name of a non-existent temp file.

		To get the temp folder, you can use getSpecialLocation (File::tempDirectory).
	*/
	static File createTempFile (const String& fileNameEnding);

	/** Returns the current working directory.

		@see setAsCurrentWorkingDirectory
	*/
	static File getCurrentWorkingDirectory();

	/** Sets the current working directory to be this file.

		For this to work the file must point to a valid directory.

		@returns true if the current directory has been changed.
		@see getCurrentWorkingDirectory
	*/
	bool setAsCurrentWorkingDirectory() const;

	/** The system-specific file separator character.

		On Windows, this will be '\', on Mac/Linux, it'll be '/'
	*/
	static const juce_wchar separator;

	/** The system-specific file separator character, as a string.

		On Windows, this will be '\', on Mac/Linux, it'll be '/'
	*/
	static const String separatorString;

	/** Removes illegal characters from a filename.

		This will return a copy of the given string after removing characters
		that are not allowed in a legal filename, and possibly shortening the
		string if it's too long.

		Because this will remove slashes, don't use it on an absolute pathname.

		@see createLegalPathName
	*/
	static String createLegalFileName (const String& fileNameToFix);

	/** Removes illegal characters from a pathname.

		Similar to createLegalFileName(), but this won't remove slashes, so can
		be used on a complete pathname.

		@see createLegalFileName
	*/
	static String createLegalPathName (const String& pathNameToFix);

	/** Indicates whether filenames are case-sensitive on the current operating system.
	*/
	static bool areFileNamesCaseSensitive();

	/** Returns true if the string seems to be a fully-specified absolute path.
	*/
	static bool isAbsolutePath (const String& path);

	/** Creates a file that simply contains this string, without doing the sanity-checking
		that the normal constructors do.

		Best to avoid this unless you really know what you're doing.
	*/
	static File createFileWithoutCheckingPath (const String& path);

	/** Adds a separator character to the end of a path if it doesn't already have one. */
	static String addTrailingSeparator (const String& path);

   #if JUCE_MAC || JUCE_IOS || DOXYGEN

	/** OSX ONLY - Finds the OSType of a file from the its resources. */
	OSType getMacOSType() const;

	/** OSX ONLY - Returns true if this file is actually a bundle. */
	bool isBundle() const;
   #endif

   #if JUCE_MAC || DOXYGEN
	/** OSX ONLY - Adds this file to the OSX dock */
	void addToDock() const;
   #endif

private:

	String fullPath;

	static String parseAbsolutePath (const String&);
	String getPathUpToLastSlash() const;

	Result createDirectoryInternal (const String&) const;
	bool copyInternal (const File&) const;
	bool moveInternal (const File&) const;
	bool setFileTimesInternal (int64 modificationTime, int64 accessTime, int64 creationTime) const;
	void getFileTimesInternal (int64& modificationTime, int64& accessTime, int64& creationTime) const;
	bool setFileReadOnlyInternal (bool shouldBeReadOnly) const;

	JUCE_LEAK_DETECTOR (File);
};

#endif   // __JUCE_FILE_JUCEHEADER__

/*** End of inlined file: juce_File.h ***/

/** A handy macro to make it easy to iterate all the child elements in an XmlElement.

	The parentXmlElement should be a reference to the parent XML, and the childElementVariableName
	will be the name of a pointer to each child element.

	E.g. @code
	XmlElement* myParentXml = createSomeKindOfXmlDocument();

	forEachXmlChildElement (*myParentXml, child)
	{
		if (child->hasTagName ("FOO"))
			doSomethingWithXmlElement (child);
	}

	@endcode

	@see forEachXmlChildElementWithTagName
*/
#define forEachXmlChildElement(parentXmlElement, childElementVariableName) \
\
	for (juce::XmlElement* childElementVariableName = (parentXmlElement).getFirstChildElement(); \
		 childElementVariableName != nullptr; \
		 childElementVariableName = childElementVariableName->getNextElement())

/** A macro that makes it easy to iterate all the child elements of an XmlElement
	which have a specified tag.

	This does the same job as the forEachXmlChildElement macro, but only for those
	elements that have a particular tag name.

	The parentXmlElement should be a reference to the parent XML, and the childElementVariableName
	will be the name of a pointer to each child element. The requiredTagName is the
	tag name to match.

	E.g. @code
	XmlElement* myParentXml = createSomeKindOfXmlDocument();

	forEachXmlChildElementWithTagName (*myParentXml, child, "MYTAG")
	{
		// the child object is now guaranteed to be a <MYTAG> element..
		doSomethingWithMYTAGElement (child);
	}

	@endcode

	@see forEachXmlChildElement
*/
#define forEachXmlChildElementWithTagName(parentXmlElement, childElementVariableName, requiredTagName) \
\
	for (juce::XmlElement* childElementVariableName = (parentXmlElement).getChildByName (requiredTagName); \
		 childElementVariableName != nullptr; \
		 childElementVariableName = childElementVariableName->getNextElementWithTagName (requiredTagName))

/** Used to build a tree of elements representing an XML document.

	An XML document can be parsed into a tree of XmlElements, each of which
	represents an XML tag structure, and which may itself contain other
	nested elements.

	An XmlElement can also be converted back into a text document, and has
	lots of useful methods for manipulating its attributes and sub-elements,
	so XmlElements can actually be used as a handy general-purpose data
	structure.

	Here's an example of parsing some elements: @code
	// check we're looking at the right kind of document..
	if (myElement->hasTagName ("ANIMALS"))
	{
		// now we'll iterate its sub-elements looking for 'giraffe' elements..
		forEachXmlChildElement (*myElement, e)
		{
			if (e->hasTagName ("GIRAFFE"))
			{
				// found a giraffe, so use some of its attributes..

				String giraffeName  = e->getStringAttribute ("name");
				int giraffeAge      = e->getIntAttribute ("age");
				bool isFriendly     = e->getBoolAttribute ("friendly");
			}
		}
	}
	@endcode

	And here's an example of how to create an XML document from scratch: @code
	// create an outer node called "ANIMALS"
	XmlElement animalsList ("ANIMALS");

	for (int i = 0; i < numAnimals; ++i)
	{
		// create an inner element..
		XmlElement* giraffe = new XmlElement ("GIRAFFE");

		giraffe->setAttribute ("name", "nigel");
		giraffe->setAttribute ("age", 10);
		giraffe->setAttribute ("friendly", true);

		// ..and add our new element to the parent node
		animalsList.addChildElement (giraffe);
	}

	// now we can turn the whole thing into a text document..
	String myXmlDoc = animalsList.createDocument (String::empty);
	@endcode

	@see XmlDocument
*/
class JUCE_API  XmlElement
{
public:

	/** Creates an XmlElement with this tag name. */
	explicit XmlElement (const String& tagName) noexcept;

	/** Creates a (deep) copy of another element. */
	XmlElement (const XmlElement& other);

	/** Creates a (deep) copy of another element. */
	XmlElement& operator= (const XmlElement& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	XmlElement (XmlElement&& other) noexcept;
	XmlElement& operator= (XmlElement&& other) noexcept;
   #endif

	/** Deleting an XmlElement will also delete all its child elements. */
	~XmlElement() noexcept;

	/** Compares two XmlElements to see if they contain the same text and attiributes.

		The elements are only considered equivalent if they contain the same attiributes
		with the same values, and have the same sub-nodes.

		@param other                    the other element to compare to
		@param ignoreOrderOfAttributes  if true, this means that two elements with the
										same attributes in a different order will be
										considered the same; if false, the attributes must
										be in the same order as well
	*/
	bool isEquivalentTo (const XmlElement* other,
						 bool ignoreOrderOfAttributes) const noexcept;

	/** Returns an XML text document that represents this element.

		The string returned can be parsed to recreate the same XmlElement that
		was used to create it.

		@param dtdToUse         the DTD to add to the document
		@param allOnOneLine     if true, this means that the document will not contain any
								linefeeds, so it'll be smaller but not very easy to read.
		@param includeXmlHeader whether to add the "<?xml version..etc" line at the start of the
								document
		@param encodingType     the character encoding format string to put into the xml
								header
		@param lineWrapLength   the line length that will be used before items get placed on
								a new line. This isn't an absolute maximum length, it just
								determines how lists of attributes get broken up
		@see writeToStream, writeToFile
	*/
	String createDocument (const String& dtdToUse,
						   bool allOnOneLine = false,
						   bool includeXmlHeader = true,
						   const String& encodingType = "UTF-8",
						   int lineWrapLength = 60) const;

	/** Writes the document to a stream as UTF-8.

		@param output           the stream to write to
		@param dtdToUse         the DTD to add to the document
		@param allOnOneLine     if true, this means that the document will not contain any
								linefeeds, so it'll be smaller but not very easy to read.
		@param includeXmlHeader whether to add the "<?xml version..etc" line at the start of the
								document
		@param encodingType     the character encoding format string to put into the xml
								header
		@param lineWrapLength   the line length that will be used before items get placed on
								a new line. This isn't an absolute maximum length, it just
								determines how lists of attributes get broken up
		@see writeToFile, createDocument
	*/
	void writeToStream (OutputStream& output,
						const String& dtdToUse,
						bool allOnOneLine = false,
						bool includeXmlHeader = true,
						const String& encodingType = "UTF-8",
						int lineWrapLength = 60) const;

	/** Writes the element to a file as an XML document.

		To improve safety in case something goes wrong while writing the file, this
		will actually write the document to a new temporary file in the same
		directory as the destination file, and if this succeeds, it will rename this
		new file as the destination file (overwriting any existing file that was there).

		@param destinationFile  the file to write to. If this already exists, it will be
								overwritten.
		@param dtdToUse         the DTD to add to the document
		@param encodingType     the character encoding format string to put into the xml
								header
		@param lineWrapLength   the line length that will be used before items get placed on
								a new line. This isn't an absolute maximum length, it just
								determines how lists of attributes get broken up
		@returns    true if the file is written successfully; false if something goes wrong
					in the process
		@see createDocument
	*/
	bool writeToFile (const File& destinationFile,
					  const String& dtdToUse,
					  const String& encodingType = "UTF-8",
					  int lineWrapLength = 60) const;

	/** Returns this element's tag type name.

		E.g. for an element such as \<MOOSE legs="4" antlers="2">, this would return
		"MOOSE".

		@see hasTagName
	*/
	inline const String& getTagName() const noexcept            { return tagName; }

	/** Tests whether this element has a particular tag name.

		@param possibleTagName  the tag name you're comparing it with

		@see getTagName
	*/
	bool hasTagName (const String& possibleTagName) const noexcept;

	/** Returns the number of XML attributes this element contains.

		E.g. for an element such as \<MOOSE legs="4" antlers="2">, this would
		return 2.
	*/
	int getNumAttributes() const noexcept;

	/** Returns the name of one of the elements attributes.

		E.g. for an element such as \<MOOSE legs="4" antlers="2">, then
		getAttributeName(1) would return "antlers".

		@see getAttributeValue, getStringAttribute
	*/
	const String& getAttributeName (int attributeIndex) const noexcept;

	/** Returns the value of one of the elements attributes.

		E.g. for an element such as \<MOOSE legs="4" antlers="2">, then
		getAttributeName(1) would return "2".

		@see getAttributeName, getStringAttribute
	*/
	const String& getAttributeValue (int attributeIndex) const noexcept;

	// Attribute-handling methods..

	/** Checks whether the element contains an attribute with a certain name. */
	bool hasAttribute (const String& attributeName) const noexcept;

	/** Returns the value of a named attribute.

		@param attributeName        the name of the attribute to look up
	*/
	const String& getStringAttribute (const String& attributeName) const noexcept;

	/** Returns the value of a named attribute.

		@param attributeName        the name of the attribute to look up
		@param defaultReturnValue   a value to return if the element doesn't have an attribute
									with this name
	*/
	String getStringAttribute (const String& attributeName,
							   const String& defaultReturnValue) const;

	/** Compares the value of a named attribute with a value passed-in.

		@param attributeName            the name of the attribute to look up
		@param stringToCompareAgainst   the value to compare it with
		@param ignoreCase               whether the comparison should be case-insensitive
		@returns    true if the value of the attribute is the same as the string passed-in;
					false if it's different (or if no such attribute exists)
	*/
	bool compareAttribute (const String& attributeName,
						   const String& stringToCompareAgainst,
						   bool ignoreCase = false) const noexcept;

	/** Returns the value of a named attribute as an integer.

		This will try to find the attribute and convert it to an integer (using
		the String::getIntValue() method).

		@param attributeName        the name of the attribute to look up
		@param defaultReturnValue   a value to return if the element doesn't have an attribute
									with this name
		@see setAttribute
	*/
	int getIntAttribute (const String& attributeName,
						 int defaultReturnValue = 0) const;

	/** Returns the value of a named attribute as floating-point.

		This will try to find the attribute and convert it to an integer (using
		the String::getDoubleValue() method).

		@param attributeName        the name of the attribute to look up
		@param defaultReturnValue   a value to return if the element doesn't have an attribute
									with this name
		@see setAttribute
	*/
	double getDoubleAttribute (const String& attributeName,
							   double defaultReturnValue = 0.0) const;

	/** Returns the value of a named attribute as a boolean.

		This will try to find the attribute and interpret it as a boolean. To do this,
		it'll return true if the value is "1", "true", "y", etc, or false for other
		values.

		@param attributeName        the name of the attribute to look up
		@param defaultReturnValue   a value to return if the element doesn't have an attribute
									with this name
	*/
	bool getBoolAttribute (const String& attributeName,
						   bool defaultReturnValue = false) const;

	/** Adds a named attribute to the element.

		If the element already contains an attribute with this name, it's value will
		be updated to the new value. If there's no such attribute yet, a new one will
		be added.

		Note that there are other setAttribute() methods that take integers,
		doubles, etc. to make it easy to store numbers.

		@param attributeName        the name of the attribute to set
		@param newValue             the value to set it to
		@see removeAttribute
	*/
	void setAttribute (const String& attributeName,
					   const String& newValue);

	/** Adds a named attribute to the element, setting it to an integer value.

		If the element already contains an attribute with this name, it's value will
		be updated to the new value. If there's no such attribute yet, a new one will
		be added.

		Note that there are other setAttribute() methods that take integers,
		doubles, etc. to make it easy to store numbers.

		@param attributeName        the name of the attribute to set
		@param newValue             the value to set it to
	*/
	void setAttribute (const String& attributeName,
					   int newValue);

	/** Adds a named attribute to the element, setting it to a floating-point value.

		If the element already contains an attribute with this name, it's value will
		be updated to the new value. If there's no such attribute yet, a new one will
		be added.

		Note that there are other setAttribute() methods that take integers,
		doubles, etc. to make it easy to store numbers.

		@param attributeName        the name of the attribute to set
		@param newValue             the value to set it to
	*/
	void setAttribute (const String& attributeName,
					   double newValue);

	/** Removes a named attribute from the element.

		@param attributeName    the name of the attribute to remove
		@see removeAllAttributes
	*/
	void removeAttribute (const String& attributeName) noexcept;

	/** Removes all attributes from this element.
	*/
	void removeAllAttributes() noexcept;

	// Child element methods..

	/** Returns the first of this element's sub-elements.

		see getNextElement() for an example of how to iterate the sub-elements.

		@see forEachXmlChildElement
	*/
	XmlElement* getFirstChildElement() const noexcept       { return firstChildElement; }

	/** Returns the next of this element's siblings.

		This can be used for iterating an element's sub-elements, e.g.
		@code
		XmlElement* child = myXmlDocument->getFirstChildElement();

		while (child != nullptr)
		{
			...do stuff with this child..

			child = child->getNextElement();
		}
		@endcode

		Note that when iterating the child elements, some of them might be
		text elements as well as XML tags - use isTextElement() to work this
		out.

		Also, it's much easier and neater to use this method indirectly via the
		forEachXmlChildElement macro.

		@returns    the sibling element that follows this one, or zero if this is the last
					element in its parent

		@see getNextElement, isTextElement, forEachXmlChildElement
	*/
	inline XmlElement* getNextElement() const noexcept          { return nextListItem; }

	/** Returns the next of this element's siblings which has the specified tag
		name.

		This is like getNextElement(), but will scan through the list until it
		finds an element with the given tag name.

		@see getNextElement, forEachXmlChildElementWithTagName
	*/
	XmlElement* getNextElementWithTagName (const String& requiredTagName) const;

	/** Returns the number of sub-elements in this element.

		@see getChildElement
	*/
	int getNumChildElements() const noexcept;

	/** Returns the sub-element at a certain index.

		It's not very efficient to iterate the sub-elements by index - see
		getNextElement() for an example of how best to iterate.

		@returns the n'th child of this element, or 0 if the index is out-of-range
		@see getNextElement, isTextElement, getChildByName
	*/
	XmlElement* getChildElement (int index) const noexcept;

	/** Returns the first sub-element with a given tag-name.

		@param tagNameToLookFor     the tag name of the element you want to find
		@returns the first element with this tag name, or 0 if none is found
		@see getNextElement, isTextElement, getChildElement
	*/
	XmlElement* getChildByName (const String& tagNameToLookFor) const noexcept;

	/** Appends an element to this element's list of children.

		Child elements are deleted automatically when their parent is deleted, so
		make sure the object that you pass in will not be deleted by anything else,
		and make sure it's not already the child of another element.

		@see getFirstChildElement, getNextElement, getNumChildElements,
			 getChildElement, removeChildElement
	*/
	void addChildElement (XmlElement* newChildElement) noexcept;

	/** Inserts an element into this element's list of children.

		Child elements are deleted automatically when their parent is deleted, so
		make sure the object that you pass in will not be deleted by anything else,
		and make sure it's not already the child of another element.

		@param newChildNode     the element to add
		@param indexToInsertAt  the index at which to insert the new element - if this is
								below zero, it will be added to the end of the list
		@see addChildElement, insertChildElement
	*/
	void insertChildElement (XmlElement* newChildNode,
							 int indexToInsertAt) noexcept;

	/** Creates a new element with the given name and returns it, after adding it
		as a child element.

		This is a handy method that means that instead of writing this:
		@code
		XmlElement* newElement = new XmlElement ("foobar");
		myParentElement->addChildElement (newElement);
		@endcode

		..you could just write this:
		@code
		XmlElement* newElement = myParentElement->createNewChildElement ("foobar");
		@endcode
	*/
	XmlElement* createNewChildElement (const String& tagName);

	/** Replaces one of this element's children with another node.

		If the current element passed-in isn't actually a child of this element,
		this will return false and the new one won't be added. Otherwise, the
		existing element will be deleted, replaced with the new one, and it
		will return true.
	*/
	bool replaceChildElement (XmlElement* currentChildElement,
							  XmlElement* newChildNode) noexcept;

	/** Removes a child element.

		@param childToRemove            the child to look for and remove
		@param shouldDeleteTheChild     if true, the child will be deleted, if false it'll
										just remove it
	*/
	void removeChildElement (XmlElement* childToRemove,
							 bool shouldDeleteTheChild) noexcept;

	/** Deletes all the child elements in the element.

		@see removeChildElement, deleteAllChildElementsWithTagName
	*/
	void deleteAllChildElements() noexcept;

	/** Deletes all the child elements with a given tag name.

		@see removeChildElement
	*/
	void deleteAllChildElementsWithTagName (const String& tagName) noexcept;

	/** Returns true if the given element is a child of this one. */
	bool containsChildElement (const XmlElement* possibleChild) const noexcept;

	/** Recursively searches all sub-elements to find one that contains the specified
		child element.
	*/
	XmlElement* findParentElementOf (const XmlElement* elementToLookFor) noexcept;

	/** Sorts the child elements using a comparator.

		This will use a comparator object to sort the elements into order. The object
		passed must have a method of the form:
		@code
		int compareElements (const XmlElement* first, const XmlElement* second);
		@endcode

		..and this method must return:
		  - a value of < 0 if the first comes before the second
		  - a value of 0 if the two objects are equivalent
		  - a value of > 0 if the second comes before the first

		To improve performance, the compareElements() method can be declared as static or const.

		@param comparator   the comparator to use for comparing elements.
		@param retainOrderOfEquivalentItems     if this is true, then items which the comparator
							says are equivalent will be kept in the order in which they
							currently appear in the array. This is slower to perform, but
							may be important in some cases. If it's false, a faster algorithm
							is used, but equivalent elements may be rearranged.
	*/
	template <class ElementComparator>
	void sortChildElements (ElementComparator& comparator,
							bool retainOrderOfEquivalentItems = false)
	{
		const int num = getNumChildElements();

		if (num > 1)
		{
			HeapBlock <XmlElement*> elems (num);
			getChildElementsAsArray (elems);
			sortArray (comparator, (XmlElement**) elems, 0, num - 1, retainOrderOfEquivalentItems);
			reorderChildElements (elems, num);
		}
	}

	/** Returns true if this element is a section of text.

		Elements can either be an XML tag element or a secton of text, so this
		is used to find out what kind of element this one is.

		@see getAllText, addTextElement, deleteAllTextElements
	*/
	bool isTextElement() const noexcept;

	/** Returns the text for a text element.

		Note that if you have an element like this:

		@code<xyz>hello</xyz>@endcode

		then calling getText on the "xyz" element won't return "hello", because that is
		actually stored in a special text sub-element inside the xyz element. To get the
		"hello" string, you could either call getText on the (unnamed) sub-element, or
		use getAllSubText() to do this automatically.

		Note that leading and trailing whitespace will be included in the string - to remove
		if, just call String::trim() on the result.

		@see isTextElement, getAllSubText, getChildElementAllSubText
	*/
	const String& getText() const noexcept;

	/** Sets the text in a text element.

		Note that this is only a valid call if this element is a text element. If it's
		not, then no action will be performed. If you're trying to add text inside a normal
		element, you probably want to use addTextElement() instead.
	*/
	void setText (const String& newText);

	/** Returns all the text from this element's child nodes.

		This iterates all the child elements and when it finds text elements,
		it concatenates their text into a big string which it returns.

		E.g. @code<xyz>hello <x>there</x> world</xyz>@endcode
		if you called getAllSubText on the "xyz" element, it'd return "hello there world".

		Note that leading and trailing whitespace will be included in the string - to remove
		if, just call String::trim() on the result.

		@see isTextElement, getChildElementAllSubText, getText, addTextElement
	*/
	String getAllSubText() const;

	/** Returns all the sub-text of a named child element.

		If there is a child element with the given tag name, this will return
		all of its sub-text (by calling getAllSubText() on it). If there is
		no such child element, this will return the default string passed-in.

		@see getAllSubText
	*/
	String getChildElementAllSubText (const String& childTagName,
									  const String& defaultReturnValue) const;

	/** Appends a section of text to this element.

		@see isTextElement, getText, getAllSubText
	*/
	void addTextElement (const String& text);

	/** Removes all the text elements from this element.

		@see isTextElement, getText, getAllSubText, addTextElement
	*/
	void deleteAllTextElements() noexcept;

	/** Creates a text element that can be added to a parent element.
	*/
	static XmlElement* createTextElement (const String& text);

private:
	struct XmlAttributeNode
	{
		XmlAttributeNode (const XmlAttributeNode&) noexcept;
		XmlAttributeNode (const String& name, const String& value) noexcept;

		LinkedListPointer<XmlAttributeNode> nextListItem;
		String name, value;

		bool hasName (const String&) const noexcept;

	private:
		XmlAttributeNode& operator= (const XmlAttributeNode&);
	};

	friend class XmlDocument;
	friend class LinkedListPointer <XmlAttributeNode>;
	friend class LinkedListPointer <XmlElement>;
	friend class LinkedListPointer <XmlElement>::Appender;

	LinkedListPointer <XmlElement> nextListItem;
	LinkedListPointer <XmlElement> firstChildElement;
	LinkedListPointer <XmlAttributeNode> attributes;
	String tagName;

	XmlElement (int) noexcept;
	void copyChildrenAndAttributesFrom (const XmlElement&);
	void writeElementAsText (OutputStream&, int indentationLevel, int lineWrapLength) const;
	void getChildElementsAsArray (XmlElement**) const noexcept;
	void reorderChildElements (XmlElement**, int) noexcept;

	JUCE_LEAK_DETECTOR (XmlElement);
};

#endif   // __JUCE_XMLELEMENT_JUCEHEADER__

/*** End of inlined file: juce_XmlElement.h ***/

/**
	A set of named property values, which can be strings, integers, floating point, etc.

	Effectively, this just wraps a StringPairArray in an interface that makes it easier
	to load and save types other than strings.

	See the PropertiesFile class for a subclass of this, which automatically broadcasts change
	messages and saves/loads the list from a file.
*/
class JUCE_API  PropertySet
{
public:

	/** Creates an empty PropertySet.

		@param ignoreCaseOfKeyNames         if true, the names of properties are compared in a
											case-insensitive way
	*/
	PropertySet (bool ignoreCaseOfKeyNames = false);

	/** Creates a copy of another PropertySet.
	*/
	PropertySet (const PropertySet& other);

	/** Copies another PropertySet over this one.
	*/
	PropertySet& operator= (const PropertySet& other);

	/** Destructor. */
	virtual ~PropertySet();

	/** Returns one of the properties as a string.

		If the value isn't found in this set, then this will look for it in a fallback
		property set (if you've specified one with the setFallbackPropertySet() method),
		and if it can't find one there, it'll return the default value passed-in.

		@param keyName              the name of the property to retrieve
		@param defaultReturnValue   a value to return if the named property doesn't actually exist
	*/
	String getValue (const String& keyName,
					 const String& defaultReturnValue = String::empty) const noexcept;

	/** Returns one of the properties as an integer.

		If the value isn't found in this set, then this will look for it in a fallback
		property set (if you've specified one with the setFallbackPropertySet() method),
		and if it can't find one there, it'll return the default value passed-in.

		@param keyName              the name of the property to retrieve
		@param defaultReturnValue   a value to return if the named property doesn't actually exist
	*/
	int getIntValue (const String& keyName,
					 const int defaultReturnValue = 0) const noexcept;

	/** Returns one of the properties as an double.

		If the value isn't found in this set, then this will look for it in a fallback
		property set (if you've specified one with the setFallbackPropertySet() method),
		and if it can't find one there, it'll return the default value passed-in.

		@param keyName              the name of the property to retrieve
		@param defaultReturnValue   a value to return if the named property doesn't actually exist
	*/
	double getDoubleValue (const String& keyName,
						   const double defaultReturnValue = 0.0) const noexcept;

	/** Returns one of the properties as an boolean.

		The result will be true if the string found for this key name can be parsed as a non-zero
		integer.

		If the value isn't found in this set, then this will look for it in a fallback
		property set (if you've specified one with the setFallbackPropertySet() method),
		and if it can't find one there, it'll return the default value passed-in.

		@param keyName              the name of the property to retrieve
		@param defaultReturnValue   a value to return if the named property doesn't actually exist
	*/
	bool getBoolValue (const String& keyName,
					   const bool defaultReturnValue = false) const noexcept;

	/** Returns one of the properties as an XML element.

		The result will a new XMLElement object that the caller must delete. If may return 0 if the
		key isn't found, or if the entry contains an string that isn't valid XML.

		If the value isn't found in this set, then this will look for it in a fallback
		property set (if you've specified one with the setFallbackPropertySet() method),
		and if it can't find one there, it'll return the default value passed-in.

		@param keyName              the name of the property to retrieve
	*/
	XmlElement* getXmlValue (const String& keyName) const;

	/** Sets a named property.

		@param keyName      the name of the property to set. (This mustn't be an empty string)
		@param value        the new value to set it to
	*/
	void setValue (const String& keyName, const var& value);

	/** Sets a named property to an XML element.

		@param keyName      the name of the property to set. (This mustn't be an empty string)
		@param xml          the new element to set it to. If this is zero, the value will be set to
							an empty string
		@see getXmlValue
	*/
	void setValue (const String& keyName, const XmlElement* xml);

	/** This copies all the values from a source PropertySet to this one.
		This won't remove any existing settings, it just adds any that it finds in the source set.
	*/
	void addAllPropertiesFrom (const PropertySet& source);

	/** Deletes a property.

		@param keyName      the name of the property to delete. (This mustn't be an empty string)
	*/
	void removeValue (const String& keyName);

	/** Returns true if the properies include the given key. */
	bool containsKey (const String& keyName) const noexcept;

	/** Removes all values. */
	void clear();

	/** Returns the keys/value pair array containing all the properties. */
	StringPairArray& getAllProperties() noexcept                        { return properties; }

	/** Returns the lock used when reading or writing to this set */
	const CriticalSection& getLock() const noexcept                     { return lock; }

	/** Returns an XML element which encapsulates all the items in this property set.

		The string parameter is the tag name that should be used for the node.

		@see restoreFromXml
	*/
	XmlElement* createXml (const String& nodeName) const;

	/** Reloads a set of properties that were previously stored as XML.

		The node passed in must have been created by the createXml() method.

		@see createXml
	*/
	void restoreFromXml (const XmlElement& xml);

	/** Sets up a second PopertySet that will be used to look up any values that aren't
		set in this one.

		If you set this up to be a pointer to a second property set, then whenever one
		of the getValue() methods fails to find an entry in this set, it will look up that
		value in the fallback set, and if it finds it, it will return that.

		Make sure that you don't delete the fallback set while it's still being used by
		another set! To remove the fallback set, just call this method with a null pointer.

		@see getFallbackPropertySet
	*/
	void setFallbackPropertySet (PropertySet* fallbackProperties) noexcept;

	/** Returns the fallback property set.
		@see setFallbackPropertySet
	*/
	PropertySet* getFallbackPropertySet() const noexcept                { return fallbackProperties; }

protected:

	/** Subclasses can override this to be told when one of the properies has been changed. */
	virtual void propertyChanged();

private:

	StringPairArray properties;
	PropertySet* fallbackProperties;
	CriticalSection lock;
	bool ignoreCaseOfKeys;

	JUCE_LEAK_DETECTOR (PropertySet);
};

#endif   // __JUCE_PROPERTYSET_JUCEHEADER__

/*** End of inlined file: juce_PropertySet.h ***/


#endif
#ifndef __JUCE_REFERENCECOUNTEDARRAY_JUCEHEADER__

/*** Start of inlined file: juce_ReferenceCountedArray.h ***/
#ifndef __JUCE_REFERENCECOUNTEDARRAY_JUCEHEADER__
#define __JUCE_REFERENCECOUNTEDARRAY_JUCEHEADER__

/**
	Holds a list of objects derived from ReferenceCountedObject.

	A ReferenceCountedArray holds objects derived from ReferenceCountedObject,
	and takes care of incrementing and decrementing their ref counts when they
	are added and removed from the array.

	To make all the array's methods thread-safe, pass in "CriticalSection" as the templated
	TypeOfCriticalSectionToUse parameter, instead of the default DummyCriticalSection.

	@see Array, OwnedArray, StringArray
*/
template <class ObjectClass, class TypeOfCriticalSectionToUse = DummyCriticalSection>
class ReferenceCountedArray
{
public:
	typedef ReferenceCountedObjectPtr<ObjectClass> ObjectClassPtr;

	/** Creates an empty array.
		@see ReferenceCountedObject, Array, OwnedArray
	*/
	ReferenceCountedArray() noexcept
		: numUsed (0)
	{
	}

	/** Creates a copy of another array */
	template <class OtherObjectClass>
	ReferenceCountedArray (const ReferenceCountedArray<OtherObjectClass, TypeOfCriticalSectionToUse>& other) noexcept
	{
		const ScopedLockType lock (other.getLock());
		numUsed = other.size();
		data.setAllocatedSize (numUsed);
		memcpy (data.elements, other.getRawDataPointer(), numUsed * sizeof (ObjectClass*));

		for (int i = numUsed; --i >= 0;)
			if (data.elements[i] != nullptr)
				data.elements[i]->incReferenceCount();
	}

	/** Copies another array into this one.

		Any existing objects in this array will first be released.
	*/
	template <class OtherObjectClass>
	ReferenceCountedArray<ObjectClass, TypeOfCriticalSectionToUse>& operator= (const ReferenceCountedArray<OtherObjectClass, TypeOfCriticalSectionToUse>& other) noexcept
	{
		ReferenceCountedArray<ObjectClass, TypeOfCriticalSectionToUse> otherCopy (other);
		swapWithArray (otherCopy);
		return *this;
	}

	/** Destructor.
		Any objects in the array will be released, and may be deleted if not referenced from elsewhere.
	*/
	~ReferenceCountedArray()
	{
		clear();
	}

	/** Removes all objects from the array.

		Any objects in the array that are not referenced from elsewhere will be deleted.
	*/
	void clear()
	{
		const ScopedLockType lock (getLock());

		while (numUsed > 0)
			if (data.elements [--numUsed] != nullptr)
				data.elements [numUsed]->decReferenceCount();

		jassert (numUsed == 0);
		data.setAllocatedSize (0);
	}

	/** Returns the current number of objects in the array. */
	inline int size() const noexcept
	{
		return numUsed;
	}

	/** Returns a pointer to the object at this index in the array.

		If the index is out-of-range, this will return a null pointer, (and
		it could be null anyway, because it's ok for the array to hold null
		pointers as well as objects).

		@see getUnchecked
	*/
	inline ObjectClassPtr operator[] (const int index) const noexcept
	{
		return getObjectPointer (index);
	}

	/** Returns a pointer to the object at this index in the array, without checking
		whether the index is in-range.

		This is a faster and less safe version of operator[] which doesn't check the index passed in, so
		it can be used when you're sure the index if always going to be legal.
	*/
	inline ObjectClassPtr getUnchecked (const int index) const noexcept
	{
		return getObjectPointerUnchecked (index);
	}

	/** Returns a raw pointer to the object at this index in the array.

		If the index is out-of-range, this will return a null pointer, (and
		it could be null anyway, because it's ok for the array to hold null
		pointers as well as objects).

		@see getUnchecked
	*/
	inline ObjectClass* getObjectPointer (const int index) const noexcept
	{
		const ScopedLockType lock (getLock());
		return isPositiveAndBelow (index, numUsed) ? data.elements [index]
												   : nullptr;
	}

	/** Returns a raw pointer to the object at this index in the array, without checking
		whether the index is in-range.
	*/
	inline ObjectClass* getObjectPointerUnchecked (const int index) const noexcept
	{
		const ScopedLockType lock (getLock());
		jassert (isPositiveAndBelow (index, numUsed));
		return data.elements [index];
	}

	/** Returns a pointer to the first object in the array.

		This will return a null pointer if the array's empty.
		@see getLast
	*/
	inline ObjectClassPtr getFirst() const noexcept
	{
		const ScopedLockType lock (getLock());
		return numUsed > 0 ? data.elements [0]
						   : static_cast <ObjectClass*> (nullptr);
	}

	/** Returns a pointer to the last object in the array.

		This will return a null pointer if the array's empty.
		@see getFirst
	*/
	inline ObjectClassPtr getLast() const noexcept
	{
		const ScopedLockType lock (getLock());
		return numUsed > 0 ? data.elements [numUsed - 1]
						   : static_cast <ObjectClass*> (nullptr);
	}

	/** Returns a pointer to the actual array data.
		This pointer will only be valid until the next time a non-const method
		is called on the array.
	*/
	inline ObjectClass** getRawDataPointer() const noexcept
	{
		return data.elements;
	}

	/** Returns a pointer to the first element in the array.
		This method is provided for compatibility with standard C++ iteration mechanisms.
	*/
	inline ObjectClass** begin() const noexcept
	{
		return data.elements;
	}

	/** Returns a pointer to the element which follows the last element in the array.
		This method is provided for compatibility with standard C++ iteration mechanisms.
	*/
	inline ObjectClass** end() const noexcept
	{
		return data.elements + numUsed;
	}

	/** Finds the index of the first occurrence of an object in the array.

		@param objectToLookFor    the object to look for
		@returns                  the index at which the object was found, or -1 if it's not found
	*/
	int indexOf (const ObjectClass* const objectToLookFor) const noexcept
	{
		const ScopedLockType lock (getLock());
		ObjectClass** e = data.elements.getData();
		ObjectClass** const end_ = e + numUsed;

		while (e != end_)
		{
			if (objectToLookFor == *e)
				return static_cast <int> (e - data.elements.getData());

			++e;
		}

		return -1;
	}

	/** Returns true if the array contains a specified object.

		@param objectToLookFor      the object to look for
		@returns                    true if the object is in the array
	*/
	bool contains (const ObjectClass* const objectToLookFor) const noexcept
	{
		const ScopedLockType lock (getLock());
		ObjectClass** e = data.elements.getData();
		ObjectClass** const end_ = e + numUsed;

		while (e != end_)
		{
			if (objectToLookFor == *e)
				return true;

			++e;
		}

		return false;
	}

	/** Appends a new object to the end of the array.

		This will increase the new object's reference count.

		@param newObject       the new object to add to the array
		@see set, insert, addIfNotAlreadyThere, addSorted, addArray
	*/
	void add (ObjectClass* const newObject) noexcept
	{
		const ScopedLockType lock (getLock());
		data.ensureAllocatedSize (numUsed + 1);
		data.elements [numUsed++] = newObject;

		if (newObject != nullptr)
			newObject->incReferenceCount();
	}

	/** Inserts a new object into the array at the given index.

		If the index is less than 0 or greater than the size of the array, the
		element will be added to the end of the array.
		Otherwise, it will be inserted into the array, moving all the later elements
		along to make room.

		This will increase the new object's reference count.

		@param indexToInsertAt      the index at which the new element should be inserted
		@param newObject            the new object to add to the array
		@see add, addSorted, addIfNotAlreadyThere, set
	*/
	void insert (int indexToInsertAt,
				 ObjectClass* const newObject) noexcept
	{
		if (indexToInsertAt >= 0)
		{
			const ScopedLockType lock (getLock());

			if (indexToInsertAt > numUsed)
				indexToInsertAt = numUsed;

			data.ensureAllocatedSize (numUsed + 1);

			ObjectClass** const e = data.elements + indexToInsertAt;
			const int numToMove = numUsed - indexToInsertAt;

			if (numToMove > 0)
				memmove (e + 1, e, numToMove * sizeof (ObjectClass*));

			*e = newObject;

			if (newObject != nullptr)
				newObject->incReferenceCount();

			++numUsed;
		}
		else
		{
			add (newObject);
		}
	}

	/** Appends a new object at the end of the array as long as the array doesn't
		already contain it.

		If the array already contains a matching object, nothing will be done.

		@param newObject   the new object to add to the array
	*/
	void addIfNotAlreadyThere (ObjectClass* const newObject) noexcept
	{
		const ScopedLockType lock (getLock());
		if (! contains (newObject))
			add (newObject);
	}

	/** Replaces an object in the array with a different one.

		If the index is less than zero, this method does nothing.
		If the index is beyond the end of the array, the new object is added to the end of the array.

		The object being added has its reference count increased, and if it's replacing
		another object, then that one has its reference count decreased, and may be deleted.

		@param indexToChange        the index whose value you want to change
		@param newObject            the new value to set for this index.
		@see add, insert, remove
	*/
	void set (const int indexToChange,
			  ObjectClass* const newObject)
	{
		if (indexToChange >= 0)
		{
			const ScopedLockType lock (getLock());

			if (newObject != nullptr)
				newObject->incReferenceCount();

			if (indexToChange < numUsed)
			{
				if (data.elements [indexToChange] != nullptr)
					data.elements [indexToChange]->decReferenceCount();

				data.elements [indexToChange] = newObject;
			}
			else
			{
				data.ensureAllocatedSize (numUsed + 1);
				data.elements [numUsed++] = newObject;
			}
		}
	}

	/** Adds elements from another array to the end of this array.

		@param arrayToAddFrom       the array from which to copy the elements
		@param startIndex           the first element of the other array to start copying from
		@param numElementsToAdd     how many elements to add from the other array. If this
									value is negative or greater than the number of available elements,
									all available elements will be copied.
		@see add
	*/
	void addArray (const ReferenceCountedArray<ObjectClass, TypeOfCriticalSectionToUse>& arrayToAddFrom,
				   int startIndex = 0,
				   int numElementsToAdd = -1) noexcept
	{
		const ScopedLockType lock1 (arrayToAddFrom.getLock());

		{
			const ScopedLockType lock2 (getLock());

			if (startIndex < 0)
			{
				jassertfalse;
				startIndex = 0;
			}

			if (numElementsToAdd < 0 || startIndex + numElementsToAdd > arrayToAddFrom.size())
				numElementsToAdd = arrayToAddFrom.size() - startIndex;

			if (numElementsToAdd > 0)
			{
				data.ensureAllocatedSize (numUsed + numElementsToAdd);

				while (--numElementsToAdd >= 0)
					add (arrayToAddFrom.getUnchecked (startIndex++));
			}
		}
	}

	/** Inserts a new object into the array assuming that the array is sorted.

		This will use a comparator to find the position at which the new object
		should go. If the array isn't sorted, the behaviour of this
		method will be unpredictable.

		@param comparator   the comparator object to use to compare the elements - see the
							sort() method for details about this object's form
		@param newObject    the new object to insert to the array
		@returns the index at which the new object was added
		@see add, sort
	*/
	template <class ElementComparator>
	int addSorted (ElementComparator& comparator, ObjectClass* newObject) noexcept
	{
		const ScopedLockType lock (getLock());
		const int index = findInsertIndexInSortedArray (comparator, data.elements.getData(), newObject, 0, numUsed);
		insert (index, newObject);
		return index;
	}

	/** Inserts or replaces an object in the array, assuming it is sorted.

		This is similar to addSorted, but if a matching element already exists, then it will be
		replaced by the new one, rather than the new one being added as well.
	*/
	template <class ElementComparator>
	void addOrReplaceSorted (ElementComparator& comparator,
							 ObjectClass* newObject) noexcept
	{
		const ScopedLockType lock (getLock());
		const int index = findInsertIndexInSortedArray (comparator, data.elements.getData(), newObject, 0, numUsed);

		if (index > 0 && comparator.compareElements (newObject, data.elements [index - 1]) == 0)
			set (index - 1, newObject); // replace an existing object that matches
		else
			insert (index, newObject);  // no match, so insert the new one
	}

	/** Removes an object from the array.

		This will remove the object at a given index and move back all the
		subsequent objects to close the gap.

		If the index passed in is out-of-range, nothing will happen.

		The object that is removed will have its reference count decreased,
		and may be deleted if not referenced from elsewhere.

		@param indexToRemove    the index of the element to remove
		@see removeObject, removeRange
	*/
	void remove (const int indexToRemove)
	{
		const ScopedLockType lock (getLock());

		if (isPositiveAndBelow (indexToRemove, numUsed))
		{
			ObjectClass** const e = data.elements + indexToRemove;

			if (*e != nullptr)
				(*e)->decReferenceCount();

			--numUsed;
			const int numberToShift = numUsed - indexToRemove;

			if (numberToShift > 0)
				memmove (e, e + 1, numberToShift * sizeof (ObjectClass*));

			if ((numUsed << 1) < data.numAllocated)
				minimiseStorageOverheads();
		}
	}

	/** Removes and returns an object from the array.

		This will remove the object at a given index and return it, moving back all
		the subsequent objects to close the gap. If the index passed in is out-of-range,
		nothing will happen and a null pointer will be returned.

		@param indexToRemove    the index of the element to remove
		@see remove, removeObject, removeRange
	*/
	ObjectClassPtr removeAndReturn (const int indexToRemove)
	{
		ObjectClassPtr removedItem;
		const ScopedLockType lock (getLock());

		if (isPositiveAndBelow (indexToRemove, numUsed))
		{
			ObjectClass** const e = data.elements + indexToRemove;

			if (*e != nullptr)
			{
				removedItem = *e;
				(*e)->decReferenceCount();
			}

			--numUsed;
			const int numberToShift = numUsed - indexToRemove;

			if (numberToShift > 0)
				memmove (e, e + 1, numberToShift * sizeof (ObjectClass*));

			if ((numUsed << 1) < data.numAllocated)
				minimiseStorageOverheads();
		}

		return removedItem;
	}

	/** Removes the first occurrence of a specified object from the array.

		If the item isn't found, no action is taken. If it is found, it is
		removed and has its reference count decreased.

		@param objectToRemove   the object to try to remove
		@see remove, removeRange
	*/
	void removeObject (ObjectClass* const objectToRemove)
	{
		const ScopedLockType lock (getLock());
		remove (indexOf (objectToRemove));
	}

	/** Removes a range of objects from the array.

		This will remove a set of objects, starting from the given index,
		and move any subsequent elements down to close the gap.

		If the range extends beyond the bounds of the array, it will
		be safely clipped to the size of the array.

		The objects that are removed will have their reference counts decreased,
		and may be deleted if not referenced from elsewhere.

		@param startIndex       the index of the first object to remove
		@param numberToRemove   how many objects should be removed
		@see remove, removeObject
	*/
	void removeRange (const int startIndex,
					  const int numberToRemove)
	{
		const ScopedLockType lock (getLock());

		const int start = jlimit (0, numUsed, startIndex);
		const int end_   = jlimit (0, numUsed, startIndex + numberToRemove);

		if (end_ > start)
		{
			int i;
			for (i = start; i < end_; ++i)
			{
				if (data.elements[i] != nullptr)
				{
					data.elements[i]->decReferenceCount();
					data.elements[i] = nullptr; // (in case one of the destructors accesses this array and hits a dangling pointer)
				}
			}

			const int rangeSize = end_ - start;
			ObjectClass** e = data.elements + start;
			i = numUsed - end_;
			numUsed -= rangeSize;

			while (--i >= 0)
			{
				*e = e [rangeSize];
				++e;
			}

			if ((numUsed << 1) < data.numAllocated)
				minimiseStorageOverheads();
		}
	}

	/** Removes the last n objects from the array.

		The objects that are removed will have their reference counts decreased,
		and may be deleted if not referenced from elsewhere.

		@param howManyToRemove   how many objects to remove from the end of the array
		@see remove, removeObject, removeRange
	*/
	void removeLast (int howManyToRemove = 1)
	{
		const ScopedLockType lock (getLock());

		if (howManyToRemove > numUsed)
			howManyToRemove = numUsed;

		while (--howManyToRemove >= 0)
			remove (numUsed - 1);
	}

	/** Swaps a pair of objects in the array.

		If either of the indexes passed in is out-of-range, nothing will happen,
		otherwise the two objects at these positions will be exchanged.
	*/
	void swap (const int index1,
			   const int index2) noexcept
	{
		const ScopedLockType lock (getLock());

		if (isPositiveAndBelow (index1, numUsed)
			 && isPositiveAndBelow (index2, numUsed))
		{
			std::swap (data.elements [index1],
					   data.elements [index2]);
		}
	}

	/** Moves one of the objects to a different position.

		This will move the object to a specified index, shuffling along
		any intervening elements as required.

		So for example, if you have the array { 0, 1, 2, 3, 4, 5 } then calling
		move (2, 4) would result in { 0, 1, 3, 4, 2, 5 }.

		@param currentIndex     the index of the object to be moved. If this isn't a
								valid index, then nothing will be done
		@param newIndex         the index at which you'd like this object to end up. If this
								is less than zero, it will be moved to the end of the array
	*/
	void move (const int currentIndex,
			   int newIndex) noexcept
	{
		if (currentIndex != newIndex)
		{
			const ScopedLockType lock (getLock());

			if (isPositiveAndBelow (currentIndex, numUsed))
			{
				if (! isPositiveAndBelow (newIndex, numUsed))
					newIndex = numUsed - 1;

				ObjectClass* const value = data.elements [currentIndex];

				if (newIndex > currentIndex)
				{
					memmove (data.elements + currentIndex,
							 data.elements + currentIndex + 1,
							 (newIndex - currentIndex) * sizeof (ObjectClass*));
				}
				else
				{
					memmove (data.elements + newIndex + 1,
							 data.elements + newIndex,
							 (currentIndex - newIndex) * sizeof (ObjectClass*));
				}

				data.elements [newIndex] = value;
			}
		}
	}

	/** This swaps the contents of this array with those of another array.

		If you need to exchange two arrays, this is vastly quicker than using copy-by-value
		because it just swaps their internal pointers.
	*/
	void swapWithArray (ReferenceCountedArray& otherArray) noexcept
	{
		const ScopedLockType lock1 (getLock());
		const ScopedLockType lock2 (otherArray.getLock());

		data.swapWith (otherArray.data);
		std::swap (numUsed, otherArray.numUsed);
	}

	/** Compares this array to another one.

		@returns true only if the other array contains the same objects in the same order
	*/
	bool operator== (const ReferenceCountedArray& other) const noexcept
	{
		const ScopedLockType lock2 (other.getLock());
		const ScopedLockType lock1 (getLock());

		if (numUsed != other.numUsed)
			return false;

		for (int i = numUsed; --i >= 0;)
			if (data.elements [i] != other.data.elements [i])
				return false;

		return true;
	}

	/** Compares this array to another one.

		@see operator==
	*/
	bool operator!= (const ReferenceCountedArray<ObjectClass, TypeOfCriticalSectionToUse>& other) const noexcept
	{
		return ! operator== (other);
	}

	/** Sorts the elements in the array.

		This will use a comparator object to sort the elements into order. The object
		passed must have a method of the form:
		@code
		int compareElements (ElementType first, ElementType second);
		@endcode

		..and this method must return:
		  - a value of < 0 if the first comes before the second
		  - a value of 0 if the two objects are equivalent
		  - a value of > 0 if the second comes before the first

		To improve performance, the compareElements() method can be declared as static or const.

		@param comparator   the comparator to use for comparing elements.
		@param retainOrderOfEquivalentItems     if this is true, then items
							which the comparator says are equivalent will be
							kept in the order in which they currently appear
							in the array. This is slower to perform, but may
							be important in some cases. If it's false, a faster
							algorithm is used, but equivalent elements may be
							rearranged.

		@see sortArray
	*/
	template <class ElementComparator>
	void sort (ElementComparator& comparator,
			   const bool retainOrderOfEquivalentItems = false) const noexcept
	{
		(void) comparator;  // if you pass in an object with a static compareElements() method, this
							// avoids getting warning messages about the parameter being unused

		const ScopedLockType lock (getLock());
		sortArray (comparator, data.elements.getData(), 0, size() - 1, retainOrderOfEquivalentItems);
	}

	/** Reduces the amount of storage being used by the array.

		Arrays typically allocate slightly more storage than they need, and after
		removing elements, they may have quite a lot of unused space allocated.
		This method will reduce the amount of allocated storage to a minimum.
	*/
	void minimiseStorageOverheads() noexcept
	{
		const ScopedLockType lock (getLock());
		data.shrinkToNoMoreThan (numUsed);
	}

	/** Increases the array's internal storage to hold a minimum number of elements.

		Calling this before adding a large known number of elements means that
		the array won't have to keep dynamically resizing itself as the elements
		are added, and it'll therefore be more efficient.
	*/
	void ensureStorageAllocated (const int minNumElements)
	{
		const ScopedLockType lock (getLock());
		data.ensureAllocatedSize (minNumElements);
	}

	/** Returns the CriticalSection that locks this array.
		To lock, you can call getLock().enter() and getLock().exit(), or preferably use
		an object of ScopedLockType as an RAII lock for it.
	*/
	inline const TypeOfCriticalSectionToUse& getLock() const noexcept      { return data; }

	/** Returns the type of scoped lock to use for locking this array */
	typedef typename TypeOfCriticalSectionToUse::ScopedLockType ScopedLockType;

private:

	ArrayAllocationBase <ObjectClass*, TypeOfCriticalSectionToUse> data;
	int numUsed;
};

#endif   // __JUCE_REFERENCECOUNTEDARRAY_JUCEHEADER__

/*** End of inlined file: juce_ReferenceCountedArray.h ***/


#endif
#ifndef __JUCE_SCOPEDVALUESETTER_JUCEHEADER__

/*** Start of inlined file: juce_ScopedValueSetter.h ***/
#ifndef __JUCE_SCOPEDVALUESETTER_JUCEHEADER__
#define __JUCE_SCOPEDVALUESETTER_JUCEHEADER__

/**
	Helper class providing an RAII-based mechanism for temporarily setting and
	then re-setting a value.

	E.g. @code
	int x = 1;

	{
		ScopedValueSetter setter (x, 2);

		// x is now 2
	}

	// x is now 1 again

	{
		ScopedValueSetter setter (x, 3, 4);

		// x is now 3
	}

	// x is now 4
	@endcode

*/
template <typename ValueType>
class ScopedValueSetter
{
public:
	/** Creates a ScopedValueSetter that will immediately change the specified value to the
		given new value, and will then reset it to its original value when this object is deleted.
	*/
	ScopedValueSetter (ValueType& valueToSet,
					   const ValueType& newValue)
		: value (valueToSet),
		  originalValue (valueToSet)
	{
		valueToSet = newValue;
	}

	/** Creates a ScopedValueSetter that will immediately change the specified value to the
		given new value, and will then reset it to be valueWhenDeleted when this object is deleted.
	*/
	ScopedValueSetter (ValueType& valueToSet,
					   const ValueType& newValue,
					   const ValueType& valueWhenDeleted)
		: value (valueToSet),
		  originalValue (valueWhenDeleted)
	{
		valueToSet = newValue;
	}

	~ScopedValueSetter()
	{
		value = originalValue;
	}

private:

	ValueType& value;
	const ValueType originalValue;

	JUCE_DECLARE_NON_COPYABLE (ScopedValueSetter);
};

#endif   // __JUCE_SCOPEDVALUESETTER_JUCEHEADER__

/*** End of inlined file: juce_ScopedValueSetter.h ***/


#endif
#ifndef __JUCE_SORTEDSET_JUCEHEADER__

/*** Start of inlined file: juce_SortedSet.h ***/
#ifndef __JUCE_SORTEDSET_JUCEHEADER__
#define __JUCE_SORTEDSET_JUCEHEADER__

#if JUCE_MSVC
  #pragma warning (push)
  #pragma warning (disable: 4512)
#endif

/**
	Holds a set of unique primitive objects, such as ints or doubles.

	A set can only hold one item with a given value, so if for example it's a
	set of integers, attempting to add the same integer twice will do nothing
	the second time.

	Internally, the list of items is kept sorted (which means that whatever
	kind of primitive type is used must support the ==, <, >, <= and >= operators
	to determine the order), and searching the set for known values is very fast
	because it uses a binary-chop method.

	Note that if you're using a class or struct as the element type, it must be
	capable of being copied or moved with a straightforward memcpy, rather than
	needing construction and destruction code.

	To make all the set's methods thread-safe, pass in "CriticalSection" as the templated
	TypeOfCriticalSectionToUse parameter, instead of the default DummyCriticalSection.

	@see Array, OwnedArray, ReferenceCountedArray, StringArray, CriticalSection
*/
template <class ElementType, class TypeOfCriticalSectionToUse = DummyCriticalSection>
class SortedSet
{
public:

	/** Creates an empty set. */
	SortedSet() noexcept
	   : numUsed (0)
	{
	}

	/** Creates a copy of another set.
		@param other    the set to copy
	*/
	SortedSet (const SortedSet& other) noexcept
	{
		const ScopedLockType lock (other.getLock());
		numUsed = other.numUsed;
		data.setAllocatedSize (other.numUsed);
		memcpy (data.elements, other.data.elements, numUsed * sizeof (ElementType));
	}

	/** Destructor. */
	~SortedSet() noexcept
	{
	}

	/** Copies another set over this one.
		@param other    the set to copy
	*/
	SortedSet& operator= (const SortedSet& other) noexcept
	{
		if (this != &other)
		{
			const ScopedLockType lock1 (other.getLock());
			const ScopedLockType lock2 (getLock());

			data.ensureAllocatedSize (other.size());
			numUsed = other.numUsed;
			memcpy (data.elements, other.data.elements, numUsed * sizeof (ElementType));
			minimiseStorageOverheads();
		}

		return *this;
	}

	/** Compares this set to another one.

		Two sets are considered equal if they both contain the same set of
		elements.

		@param other    the other set to compare with
	*/
	bool operator== (const SortedSet<ElementType>& other) const noexcept
	{
		const ScopedLockType lock (getLock());

		if (numUsed != other.numUsed)
			return false;

		for (int i = numUsed; --i >= 0;)
			if (! (data.elements[i] == other.data.elements[i]))
				return false;

		return true;
	}

	/** Compares this set to another one.

		Two sets are considered equal if they both contain the same set of
		elements.

		@param other    the other set to compare with
	*/
	bool operator!= (const SortedSet<ElementType>& other) const noexcept
	{
		return ! operator== (other);
	}

	/** Removes all elements from the set.

		This will remove all the elements, and free any storage that the set is
		using. To clear it without freeing the storage, use the clearQuick()
		method instead.

		@see clearQuick
	*/
	void clear() noexcept
	{
		const ScopedLockType lock (getLock());
		data.setAllocatedSize (0);
		numUsed = 0;
	}

	/** Removes all elements from the set without freeing the array's allocated storage.

		@see clear
	*/
	void clearQuick() noexcept
	{
		const ScopedLockType lock (getLock());
		numUsed = 0;
	}

	/** Returns the current number of elements in the set.
	*/
	inline int size() const noexcept
	{
		return numUsed;
	}

	/** Returns one of the elements in the set.

		If the index passed in is beyond the range of valid elements, this
		will return zero.

		If you're certain that the index will always be a valid element, you
		can call getUnchecked() instead, which is faster.

		@param index    the index of the element being requested (0 is the first element in the set)
		@see getUnchecked, getFirst, getLast
	*/
	inline ElementType operator[] (const int index) const noexcept
	{
		const ScopedLockType lock (getLock());
		return isPositiveAndBelow (index, numUsed) ? data.elements [index]
												   : ElementType();
	}

	/** Returns one of the elements in the set, without checking the index passed in.
		Unlike the operator[] method, this will try to return an element without
		checking that the index is within the bounds of the set, so should only
		be used when you're confident that it will always be a valid index.

		@param index    the index of the element being requested (0 is the first element in the set)
		@see operator[], getFirst, getLast
	*/
	inline ElementType getUnchecked (const int index) const noexcept
	{
		const ScopedLockType lock (getLock());
		jassert (isPositiveAndBelow (index, numUsed));
		return data.elements [index];
	}

	/** Returns a direct reference to one of the elements in the set, without checking the index passed in.

		This is like getUnchecked, but returns a direct reference to the element, so that
		you can alter it directly. Obviously this can be dangerous, so only use it when
		absolutely necessary.

		@param index    the index of the element being requested (0 is the first element in the array)
	*/
	inline ElementType& getReference (const int index) const noexcept
	{
		const ScopedLockType lock (getLock());
		jassert (isPositiveAndBelow (index, numUsed));
		return data.elements [index];
	}

	/** Returns the first element in the set, or 0 if the set is empty.

		@see operator[], getUnchecked, getLast
	*/
	inline ElementType getFirst() const noexcept
	{
		const ScopedLockType lock (getLock());
		return numUsed > 0 ? data.elements [0] : ElementType();
	}

	/** Returns the last element in the set, or 0 if the set is empty.

		@see operator[], getUnchecked, getFirst
	*/
	inline ElementType getLast() const noexcept
	{
		const ScopedLockType lock (getLock());
		return numUsed > 0 ? data.elements [numUsed - 1] : ElementType();
	}

	/** Returns a pointer to the first element in the set.
		This method is provided for compatibility with standard C++ iteration mechanisms.
	*/
	inline ElementType* begin() const noexcept
	{
		return data.elements;
	}

	/** Returns a pointer to the element which follows the last element in the set.
		This method is provided for compatibility with standard C++ iteration mechanisms.
	*/
	inline ElementType* end() const noexcept
	{
		return data.elements + numUsed;
	}

	/** Finds the index of the first element which matches the value passed in.

		This will search the set for the given object, and return the index
		of its first occurrence. If the object isn't found, the method will return -1.

		@param elementToLookFor   the value or object to look for
		@returns                  the index of the object, or -1 if it's not found
	*/
	int indexOf (const ElementType elementToLookFor) const noexcept
	{
		const ScopedLockType lock (getLock());

		int start = 0;
		int end_ = numUsed;

		for (;;)
		{
			if (start >= end_)
			{
				return -1;
			}
			else if (elementToLookFor == data.elements [start])
			{
				return start;
			}
			else
			{
				const int halfway = (start + end_) >> 1;

				if (halfway == start)
					return -1;
				else if (elementToLookFor < data.elements [halfway])
					end_ = halfway;
				else
					start = halfway;
			}
		}
	}

	/** Returns true if the set contains at least one occurrence of an object.

		@param elementToLookFor     the value or object to look for
		@returns                    true if the item is found
	*/
	bool contains (const ElementType elementToLookFor) const noexcept
	{
		const ScopedLockType lock (getLock());

		int start = 0;
		int end_ = numUsed;

		for (;;)
		{
			if (start >= end_)
			{
				return false;
			}
			else if (elementToLookFor == data.elements [start])
			{
				return true;
			}
			else
			{
				const int halfway = (start + end_) >> 1;

				if (halfway == start)
					return false;
				else if (elementToLookFor < data.elements [halfway])
					end_ = halfway;
				else
					start = halfway;
			}
		}
	}

	/** Adds a new element to the set, (as long as it's not already in there).

		@param newElement       the new object to add to the set
		@see set, insert, addIfNotAlreadyThere, addSorted, addSet, addArray
	*/
	void add (const ElementType newElement) noexcept
	{
		const ScopedLockType lock (getLock());

		int start = 0;
		int end_ = numUsed;

		for (;;)
		{
			if (start >= end_)
			{
				jassert (start <= end_);
				insertInternal (start, newElement);
				break;
			}
			else if (newElement == data.elements [start])
			{
				break;
			}
			else
			{
				const int halfway = (start + end_) >> 1;

				if (halfway == start)
				{
					if (newElement < data.elements [halfway])
						insertInternal (start, newElement);
					else
						insertInternal (start + 1, newElement);

					break;
				}
				else if (newElement < data.elements [halfway])
					end_ = halfway;
				else
					start = halfway;
			}
		}
	}

	/** Adds elements from an array to this set.

		@param elementsToAdd        the array of elements to add
		@param numElementsToAdd     how many elements are in this other array
		@see add
	*/
	void addArray (const ElementType* elementsToAdd,
				   int numElementsToAdd) noexcept
	{
		const ScopedLockType lock (getLock());

		while (--numElementsToAdd >= 0)
			add (*elementsToAdd++);
	}

	/** Adds elements from another set to this one.

		@param setToAddFrom         the set from which to copy the elements
		@param startIndex           the first element of the other set to start copying from
		@param numElementsToAdd     how many elements to add from the other set. If this
									value is negative or greater than the number of available elements,
									all available elements will be copied.
		@see add
	*/
	template <class OtherSetType>
	void addSet (const OtherSetType& setToAddFrom,
				 int startIndex = 0,
				 int numElementsToAdd = -1) noexcept
	{
		const typename OtherSetType::ScopedLockType lock1 (setToAddFrom.getLock());

		{
			const ScopedLockType lock2 (getLock());
			jassert (this != &setToAddFrom);

			if (this != &setToAddFrom)
			{
				if (startIndex < 0)
				{
					jassertfalse;
					startIndex = 0;
				}

				if (numElementsToAdd < 0 || startIndex + numElementsToAdd > setToAddFrom.size())
					numElementsToAdd = setToAddFrom.size() - startIndex;

				addArray (setToAddFrom.elements + startIndex, numElementsToAdd);
			}
		}
	}

	/** Removes an element from the set.

		This will remove the element at a given index.
		If the index passed in is out-of-range, nothing will happen.

		@param indexToRemove    the index of the element to remove
		@returns                the element that has been removed
		@see removeValue, removeRange
	*/
	ElementType remove (const int indexToRemove) noexcept
	{
		const ScopedLockType lock (getLock());

		if (isPositiveAndBelow (indexToRemove, numUsed))
		{
			--numUsed;

			ElementType* const e = data.elements + indexToRemove;
			ElementType const removed = *e;
			const int numberToShift = numUsed - indexToRemove;

			if (numberToShift > 0)
				memmove (e, e + 1, numberToShift * sizeof (ElementType));

			if ((numUsed << 1) < data.numAllocated)
				minimiseStorageOverheads();

			return removed;
		}

		return ElementType();
	}

	/** Removes an item from the set.

		This will remove the given element from the set, if it's there.

		@param valueToRemove   the object to try to remove
		@see remove, removeRange
	*/
	void removeValue (const ElementType valueToRemove) noexcept
	{
		const ScopedLockType lock (getLock());
		remove (indexOf (valueToRemove));
	}

	/** Removes any elements which are also in another set.

		@param otherSet   the other set in which to look for elements to remove
		@see removeValuesNotIn, remove, removeValue, removeRange
	*/
	template <class OtherSetType>
	void removeValuesIn (const OtherSetType& otherSet) noexcept
	{
		const typename OtherSetType::ScopedLockType lock1 (otherSet.getLock());
		const ScopedLockType lock2 (getLock());

		if (this == &otherSet)
		{
			clear();
		}
		else
		{
			if (otherSet.size() > 0)
			{
				for (int i = numUsed; --i >= 0;)
					if (otherSet.contains (data.elements [i]))
						remove (i);
			}
		}
	}

	/** Removes any elements which are not found in another set.

		Only elements which occur in this other set will be retained.

		@param otherSet    the set in which to look for elements NOT to remove
		@see removeValuesIn, remove, removeValue, removeRange
	*/
	template <class OtherSetType>
	void removeValuesNotIn (const OtherSetType& otherSet) noexcept
	{
		const typename OtherSetType::ScopedLockType lock1 (otherSet.getLock());
		const ScopedLockType lock2 (getLock());

		if (this != &otherSet)
		{
			if (otherSet.size() <= 0)
			{
				clear();
			}
			else
			{
				for (int i = numUsed; --i >= 0;)
					if (! otherSet.contains (data.elements [i]))
						remove (i);
			}
		}
	}

	/** Reduces the amount of storage being used by the set.

		Sets typically allocate slightly more storage than they need, and after
		removing elements, they may have quite a lot of unused space allocated.
		This method will reduce the amount of allocated storage to a minimum.
	*/
	void minimiseStorageOverheads() noexcept
	{
		const ScopedLockType lock (getLock());
		data.shrinkToNoMoreThan (numUsed);
	}

	/** Increases the set's internal storage to hold a minimum number of elements.

		Calling this before adding a large known number of elements means that
		the set won't have to keep dynamically resizing itself as the elements
		are added, and it'll therefore be more efficient.
	*/
	void ensureStorageAllocated (const int minNumElements)
	{
		const ScopedLockType lock (getLock());
		data.ensureAllocatedSize (minNumElements);
	}

	/** Returns the CriticalSection that locks this array.
		To lock, you can call getLock().enter() and getLock().exit(), or preferably use
		an object of ScopedLockType as an RAII lock for it.
	*/
	inline const TypeOfCriticalSectionToUse& getLock() const noexcept      { return data; }

	/** Returns the type of scoped lock to use for locking this array */
	typedef typename TypeOfCriticalSectionToUse::ScopedLockType ScopedLockType;

private:

	ArrayAllocationBase <ElementType, TypeOfCriticalSectionToUse> data;
	int numUsed;

	void insertInternal (const int indexToInsertAt, const ElementType newElement) noexcept
	{
		data.ensureAllocatedSize (numUsed + 1);

		ElementType* const insertPos = data.elements + indexToInsertAt;
		const int numberToMove = numUsed - indexToInsertAt;

		if (numberToMove > 0)
			memmove (insertPos + 1, insertPos, numberToMove * sizeof (ElementType));

		*insertPos = newElement;
		++numUsed;
	}
};

#if JUCE_MSVC
  #pragma warning (pop)
#endif

#endif   // __JUCE_SORTEDSET_JUCEHEADER__

/*** End of inlined file: juce_SortedSet.h ***/


#endif
#ifndef __JUCE_SPARSESET_JUCEHEADER__

/*** Start of inlined file: juce_SparseSet.h ***/
#ifndef __JUCE_SPARSESET_JUCEHEADER__
#define __JUCE_SPARSESET_JUCEHEADER__


/*** Start of inlined file: juce_Range.h ***/
#ifndef __JUCE_RANGE_JUCEHEADER__
#define __JUCE_RANGE_JUCEHEADER__

/** A general-purpose range object, that simply represents any linear range with
	a start and end point.

	The templated parameter is expected to be a primitive integer or floating point
	type, though class types could also be used if they behave in a number-like way.
*/
template <typename ValueType>
class Range
{
public:

	/** Constructs an empty range. */
	Range() noexcept
		: start (ValueType()), end (ValueType())
	{
	}

	/** Constructs a range with given start and end values. */
	Range (const ValueType start_, const ValueType end_) noexcept
		: start (start_), end (jmax (start_, end_))
	{
	}

	/** Constructs a copy of another range. */
	Range (const Range& other) noexcept
		: start (other.start), end (other.end)
	{
	}

	/** Copies another range object. */
	Range& operator= (const Range& other) noexcept
	{
		start = other.start;
		end = other.end;
		return *this;
	}

	/** Destructor. */
	~Range() noexcept
	{
	}

	/** Returns the range that lies between two positions (in either order). */
	static Range between (const ValueType position1, const ValueType position2) noexcept
	{
		return (position1 < position2) ? Range (position1, position2)
									   : Range (position2, position1);
	}

	/** Returns a range with the specified start position and a length of zero. */
	static Range emptyRange (const ValueType start) noexcept
	{
		return Range (start, start);
	}

	/** Returns the start of the range. */
	inline ValueType getStart() const noexcept          { return start; }

	/** Returns the length of the range. */
	inline ValueType getLength() const noexcept         { return end - start; }

	/** Returns the end of the range. */
	inline ValueType getEnd() const noexcept            { return end; }

	/** Returns true if the range has a length of zero. */
	inline bool isEmpty() const noexcept                { return start == end; }

	/** Changes the start position of the range, leaving the end position unchanged.
		If the new start position is higher than the current end of the range, the end point
		will be pushed along to equal it, leaving an empty range at the new position.
	*/
	void setStart (const ValueType newStart) noexcept
	{
		start = newStart;
		if (end < newStart)
			end = newStart;
	}

	/** Returns a range with the same end as this one, but a different start.
		If the new start position is higher than the current end of the range, the end point
		will be pushed along to equal it, returning an empty range at the new position.
	*/
	Range withStart (const ValueType newStart) const noexcept
	{
		return Range (newStart, jmax (newStart, end));
	}

	/** Returns a range with the same length as this one, but moved to have the given start position. */
	Range movedToStartAt (const ValueType newStart) const noexcept
	{
		return Range (newStart, end + (newStart - start));
	}

	/** Changes the end position of the range, leaving the start unchanged.
		If the new end position is below the current start of the range, the start point
		will be pushed back to equal the new end point.
	*/
	void setEnd (const ValueType newEnd) noexcept
	{
		end = newEnd;
		if (newEnd < start)
			start = newEnd;
	}

	/** Returns a range with the same start position as this one, but a different end.
		If the new end position is below the current start of the range, the start point
		will be pushed back to equal the new end point.
	*/
	Range withEnd (const ValueType newEnd) const noexcept
	{
		return Range (jmin (start, newEnd), newEnd);
	}

	/** Returns a range with the same length as this one, but moved to have the given start position. */
	Range movedToEndAt (const ValueType newEnd) const noexcept
	{
		return Range (start + (newEnd - end), newEnd);
	}

	/** Changes the length of the range.
		Lengths less than zero are treated as zero.
	*/
	void setLength (const ValueType newLength) noexcept
	{
		end = start + jmax (ValueType(), newLength);
	}

	/** Returns a range with the same start as this one, but a different length.
		Lengths less than zero are treated as zero.
	*/
	Range withLength (const ValueType newLength) const noexcept
	{
		return Range (start, start + newLength);
	}

	/** Adds an amount to the start and end of the range. */
	inline const Range& operator+= (const ValueType amountToAdd) noexcept
	{
		start += amountToAdd;
		end += amountToAdd;
		return *this;
	}

	/** Subtracts an amount from the start and end of the range. */
	inline const Range& operator-= (const ValueType amountToSubtract) noexcept
	{
		start -= amountToSubtract;
		end -= amountToSubtract;
		return *this;
	}

	/** Returns a range that is equal to this one with an amount added to its
		start and end.
	*/
	Range operator+ (const ValueType amountToAdd) const noexcept
	{
		return Range (start + amountToAdd, end + amountToAdd);
	}

	/** Returns a range that is equal to this one with the specified amount
		subtracted from its start and end. */
	Range operator- (const ValueType amountToSubtract) const noexcept
	{
		return Range (start - amountToSubtract, end - amountToSubtract);
	}

	bool operator== (const Range& other) const noexcept     { return start == other.start && end == other.end; }
	bool operator!= (const Range& other) const noexcept     { return start != other.start || end != other.end; }

	/** Returns true if the given position lies inside this range. */
	bool contains (const ValueType position) const noexcept
	{
		return start <= position && position < end;
	}

	/** Returns the nearest value to the one supplied, which lies within the range. */
	ValueType clipValue (const ValueType value) const noexcept
	{
		return jlimit (start, end, value);
	}

	/** Returns true if the given range lies entirely inside this range. */
	bool contains (const Range& other) const noexcept
	{
		return start <= other.start && end >= other.end;
	}

	/** Returns true if the given range intersects this one. */
	bool intersects (const Range& other) const noexcept
	{
		return other.start < end && start < other.end;
	}

	/** Returns the range that is the intersection of the two ranges, or an empty range
		with an undefined start position if they don't overlap. */
	Range getIntersectionWith (const Range& other) const noexcept
	{
		return Range (jmax (start, other.start),
					  jmin (end, other.end));
	}

	/** Returns the smallest range that contains both this one and the other one. */
	Range getUnionWith (const Range& other) const noexcept
	{
		return Range (jmin (start, other.start),
					  jmax (end, other.end));
	}

	/** Returns a given range, after moving it forwards or backwards to fit it
		within this range.

		If the supplied range has a greater length than this one, the return value
		will be this range.

		Otherwise, if the supplied range is smaller than this one, the return value
		will be the new range, shifted forwards or backwards so that it doesn't extend
		beyond this one, but keeping its original length.
	*/
	Range constrainRange (const Range& rangeToConstrain) const noexcept
	{
		const ValueType otherLen = rangeToConstrain.getLength();
		return getLength() <= otherLen
				? *this
				: rangeToConstrain.movedToStartAt (jlimit (start, end - otherLen, rangeToConstrain.getStart()));
	}

private:

	ValueType start, end;
};

#endif   // __JUCE_RANGE_JUCEHEADER__

/*** End of inlined file: juce_Range.h ***/

/**
	Holds a set of primitive values, storing them as a set of ranges.

	This container acts like an array, but can efficiently hold large continguous
	ranges of values. It's quite a specialised class, mostly useful for things
	like keeping the set of selected rows in a listbox.

	The type used as a template paramter must be an integer type, such as int, short,
	int64, etc.
*/
template <class Type>
class SparseSet
{
public:

	/** Creates a new empty set. */
	SparseSet()
	{
	}

	/** Creates a copy of another SparseSet. */
	SparseSet (const SparseSet<Type>& other)
		: values (other.values)
	{
	}

	/** Clears the set. */
	void clear()
	{
		values.clear();
	}

	/** Checks whether the set is empty.

		This is much quicker than using (size() == 0).
	*/
	bool isEmpty() const noexcept
	{
		return values.size() == 0;
	}

	/** Returns the number of values in the set.

		Because of the way the data is stored, this method can take longer if there
		are a lot of items in the set. Use isEmpty() for a quick test of whether there
		are any items.
	*/
	Type size() const
	{
		Type total (0);

		for (int i = 0; i < values.size(); i += 2)
			total += values.getUnchecked (i + 1) - values.getUnchecked (i);

		return total;
	}

	/** Returns one of the values in the set.

		@param index    the index of the value to retrieve, in the range 0 to (size() - 1).
		@returns        the value at this index, or 0 if it's out-of-range
	*/
	Type operator[] (Type index) const
	{
		for (int i = 0; i < values.size(); i += 2)
		{
			const Type start (values.getUnchecked (i));
			const Type len (values.getUnchecked (i + 1) - start);

			if (index < len)
				return start + index;

			index -= len;
		}

		return Type();
	}

	/** Checks whether a particular value is in the set. */
	bool contains (const Type valueToLookFor) const
	{
		for (int i = 0; i < values.size(); ++i)
			if (valueToLookFor < values.getUnchecked(i))
				return (i & 1) != 0;

		return false;
	}

	/** Returns the number of contiguous blocks of values.
		@see getRange
	*/
	int getNumRanges() const noexcept
	{
		return values.size() >> 1;
	}

	/** Returns one of the contiguous ranges of values stored.
		@param rangeIndex   the index of the range to look up, between 0
							and (getNumRanges() - 1)
		@see getTotalRange
	*/
	const Range<Type> getRange (const int rangeIndex) const
	{
		if (isPositiveAndBelow (rangeIndex, getNumRanges()))
			return Range<Type> (values.getUnchecked (rangeIndex << 1),
								values.getUnchecked ((rangeIndex << 1) + 1));
		else
			return Range<Type>();
	}

	/** Returns the range between the lowest and highest values in the set.
		@see getRange
	*/
	Range<Type> getTotalRange() const
	{
		if (values.size() > 0)
		{
			jassert ((values.size() & 1) == 0);
			return Range<Type> (values.getUnchecked (0),
								values.getUnchecked (values.size() - 1));
		}

		return Range<Type>();
	}

	/** Adds a range of contiguous values to the set.
		e.g. addRange (Range \<int\> (10, 14)) will add (10, 11, 12, 13) to the set.
	*/
	void addRange (const Range<Type>& range)
	{
		jassert (range.getLength() >= 0);
		if (range.getLength() > 0)
		{
			removeRange (range);

			values.addUsingDefaultSort (range.getStart());
			values.addUsingDefaultSort (range.getEnd());

			simplify();
		}
	}

	/** Removes a range of values from the set.
		e.g. removeRange (Range\<int\> (10, 14)) will remove (10, 11, 12, 13) from the set.
	*/
	void removeRange (const Range<Type>& rangeToRemove)
	{
		jassert (rangeToRemove.getLength() >= 0);

		if (rangeToRemove.getLength() > 0
			 && values.size() > 0
			 && rangeToRemove.getStart() < values.getUnchecked (values.size() - 1)
			 && values.getUnchecked(0) < rangeToRemove.getEnd())
		{
			const bool onAtStart = contains (rangeToRemove.getStart() - 1);
			const Type lastValue (jmin (rangeToRemove.getEnd(), values.getLast()));
			const bool onAtEnd = contains (lastValue);

			for (int i = values.size(); --i >= 0;)
			{
				if (values.getUnchecked(i) <= lastValue)
				{
					while (values.getUnchecked(i) >= rangeToRemove.getStart())
					{
						values.remove (i);

						if (--i < 0)
							break;
					}

					break;
				}
			}

			if (onAtStart)   values.addUsingDefaultSort (rangeToRemove.getStart());
			if (onAtEnd)     values.addUsingDefaultSort (lastValue);

			simplify();
		}
	}

	/** Does an XOR of the values in a given range. */
	void invertRange (const Range<Type>& range)
	{
		SparseSet newItems;
		newItems.addRange (range);

		int i;
		for (i = getNumRanges(); --i >= 0;)
			newItems.removeRange (getRange (i));

		removeRange (range);

		for (i = newItems.getNumRanges(); --i >= 0;)
			addRange (newItems.getRange(i));
	}

	/** Checks whether any part of a given range overlaps any part of this set. */
	bool overlapsRange (const Range<Type>& range)
	{
		if (range.getLength() > 0)
		{
			for (int i = getNumRanges(); --i >= 0;)
			{
				if (values.getUnchecked ((i << 1) + 1) <= range.getStart())
					return false;

				if (values.getUnchecked (i << 1) < range.getEnd())
					return true;
			}
		}

		return false;
	}

	/** Checks whether the whole of a given range is contained within this one. */
	bool containsRange (const Range<Type>& range)
	{
		if (range.getLength() > 0)
		{
			for (int i = getNumRanges(); --i >= 0;)
			{
				if (values.getUnchecked ((i << 1) + 1) <= range.getStart())
					return false;

				if (values.getUnchecked (i << 1) <= range.getStart()
					 && range.getEnd() <= values.getUnchecked ((i << 1) + 1))
					return true;
			}
		}

		return false;
	}

	bool operator== (const SparseSet<Type>& other) noexcept
	{
		return values == other.values;
	}

	bool operator!= (const SparseSet<Type>& other) noexcept
	{
		return values != other.values;
	}

private:

	// alternating start/end values of ranges of values that are present.
	Array<Type, DummyCriticalSection> values;

	void simplify()
	{
		jassert ((values.size() & 1) == 0);

		for (int i = values.size(); --i > 0;)
			if (values.getUnchecked(i) == values.getUnchecked (i - 1))
				values.removeRange (--i, 2);
	}
};

#endif   // __JUCE_SPARSESET_JUCEHEADER__

/*** End of inlined file: juce_SparseSet.h ***/


#endif
#ifndef __JUCE_VARIANT_JUCEHEADER__

#endif
#ifndef __JUCE_DIRECTORYITERATOR_JUCEHEADER__

/*** Start of inlined file: juce_DirectoryIterator.h ***/
#ifndef __JUCE_DIRECTORYITERATOR_JUCEHEADER__
#define __JUCE_DIRECTORYITERATOR_JUCEHEADER__

/**
	Searches through a the files in a directory, returning each file that is found.

	A DirectoryIterator will search through a directory and its subdirectories using
	a wildcard filepattern match.

	If you may be finding a large number of files, this is better than
	using File::findChildFiles() because it doesn't block while it finds them
	all, and this is more memory-efficient.

	It can also guess how far it's got using a wildly inaccurate algorithm.
*/
class JUCE_API  DirectoryIterator
{
public:

	/** Creates a DirectoryIterator for a given directory.

		After creating one of these, call its next() method to get the
		first file - e.g. @code

		DirectoryIterator iter (File ("/animals/mooses"), true, "*.moose");

		while (iter.next())
		{
			File theFileItFound (iter.getFile());

			... etc
		}
		@endcode

		@param directory    the directory to search in
		@param isRecursive  whether all the subdirectories should also be searched
		@param wildCard     the file pattern to match
		@param whatToLookFor    a value from the File::TypesOfFileToFind enum, specifying
								whether to look for files, directories, or both.
	*/
	DirectoryIterator (const File& directory,
					   bool isRecursive,
					   const String& wildCard = "*",
					   int whatToLookFor = File::findFiles);

	/** Destructor. */
	~DirectoryIterator();

	/** Moves the iterator along to the next file.

		@returns    true if a file was found (you can then use getFile() to see what it was) - or
					false if there are no more matching files.
	*/
	bool next();

	/** Moves the iterator along to the next file, and returns various properties of that file.

		If you need to find out details about the file, it's more efficient to call this method than
		to call the normal next() method and then find out the details afterwards.

		All the parameters are optional, so pass null pointers for any items that you're not
		interested in.

		@returns    true if a file was found (you can then use getFile() to see what it was) - or
					false if there are no more matching files. If it returns false, then none of the
					parameters will be filled-in.
	*/
	bool next (bool* isDirectory,
			   bool* isHidden,
			   int64* fileSize,
			   Time* modTime,
			   Time* creationTime,
			   bool* isReadOnly);

	/** Returns the file that the iterator is currently pointing at.

		The result of this call is only valid after a call to next() has returned true.
	*/
	const File& getFile() const;

	/** Returns a guess of how far through the search the iterator has got.

		@returns    a value 0.0 to 1.0 to show the progress, although this won't be
					very accurate.
	*/
	float getEstimatedProgress() const;

private:

	class NativeIterator
	{
	public:
		NativeIterator (const File& directory, const String& wildCard);
		~NativeIterator();

		bool next (String& filenameFound,
				   bool* isDirectory, bool* isHidden, int64* fileSize,
				   Time* modTime, Time* creationTime, bool* isReadOnly);

		class Pimpl;

	private:
		friend class DirectoryIterator;
		friend class ScopedPointer<Pimpl>;
		ScopedPointer<Pimpl> pimpl;

		JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (NativeIterator);
	};

	friend class ScopedPointer<NativeIterator::Pimpl>;
	NativeIterator fileFinder;
	String wildCard, path;
	int index;
	mutable int totalNumFiles;
	const int whatToLookFor;
	const bool isRecursive;
	bool hasBeenAdvanced;
	ScopedPointer <DirectoryIterator> subIterator;
	File currentFile;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (DirectoryIterator);
};

#endif   // __JUCE_DIRECTORYITERATOR_JUCEHEADER__

/*** End of inlined file: juce_DirectoryIterator.h ***/


#endif
#ifndef __JUCE_FILE_JUCEHEADER__

#endif
#ifndef __JUCE_FILEINPUTSTREAM_JUCEHEADER__

/*** Start of inlined file: juce_FileInputStream.h ***/
#ifndef __JUCE_FILEINPUTSTREAM_JUCEHEADER__
#define __JUCE_FILEINPUTSTREAM_JUCEHEADER__

/**
	An input stream that reads from a local file.

	@see InputStream, FileOutputStream, File::createInputStream
*/
class JUCE_API  FileInputStream  : public InputStream
{
public:

	/** Creates a FileInputStream.

		@param fileToRead   the file to read from - if the file can't be accessed for some
							reason, then the stream will just contain no data
	*/
	explicit FileInputStream (const File& fileToRead);

	/** Destructor. */
	~FileInputStream();

	/** Returns the file that this stream is reading from. */
	const File& getFile() const noexcept                { return file; }

	/** Returns the status of the file stream.
		The result will be ok if the file opened successfully. If an error occurs while
		opening or reading from the file, this will contain an error message.
	*/
	const Result& getStatus() const noexcept            { return status; }

	/** Returns true if the stream couldn't be opened for some reason.
		@see getResult()
	*/
	bool failedToOpen() const noexcept                  { return status.failed(); }

	/** Returns true if the stream opened without problems.
		@see getResult()
	*/
	bool openedOk() const noexcept                      { return status.wasOk(); }

	int64 getTotalLength();
	int read (void* destBuffer, int maxBytesToRead);
	bool isExhausted();
	int64 getPosition();
	bool setPosition (int64 pos);

private:

	File file;
	void* fileHandle;
	int64 currentPosition, totalSize;
	Result status;
	bool needToSeek;

	void openHandle();
	void closeHandle();
	size_t readInternal (void* buffer, size_t numBytes);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FileInputStream);
};

#endif   // __JUCE_FILEINPUTSTREAM_JUCEHEADER__

/*** End of inlined file: juce_FileInputStream.h ***/


#endif
#ifndef __JUCE_FILEOUTPUTSTREAM_JUCEHEADER__

/*** Start of inlined file: juce_FileOutputStream.h ***/
#ifndef __JUCE_FILEOUTPUTSTREAM_JUCEHEADER__
#define __JUCE_FILEOUTPUTSTREAM_JUCEHEADER__

/**
	An output stream that writes into a local file.

	@see OutputStream, FileInputStream, File::createOutputStream
*/
class JUCE_API  FileOutputStream  : public OutputStream
{
public:

	/** Creates a FileOutputStream.

		If the file doesn't exist, it will first be created. If the file can't be
		created or opened, the failedToOpen() method will return
		true.

		If the file already exists when opened, the stream's write-postion will
		be set to the end of the file. To overwrite an existing file,
		use File::deleteFile() before opening the stream, or use setPosition(0)
		after it's opened (although this won't truncate the file).

		@see TemporaryFile
	*/
	FileOutputStream (const File& fileToWriteTo,
					  int bufferSizeToUse = 16384);

	/** Destructor. */
	~FileOutputStream();

	/** Returns the file that this stream is writing to.
	*/
	const File& getFile() const                         { return file; }

	/** Returns the status of the file stream.
		The result will be ok if the file opened successfully. If an error occurs while
		opening or writing to the file, this will contain an error message.
	*/
	const Result& getStatus() const noexcept            { return status; }

	/** Returns true if the stream couldn't be opened for some reason.
		@see getResult()
	*/
	bool failedToOpen() const noexcept                  { return status.failed(); }

	/** Returns true if the stream opened without problems.
		@see getResult()
	*/
	bool openedOk() const noexcept                      { return status.wasOk(); }

	/** Attempts to truncate the file to the current write position.
		To truncate a file to a specific size, first use setPosition() to seek to the
		appropriate location, and then call this method.
	*/
	Result truncate();

	void flush();
	int64 getPosition();
	bool setPosition (int64 pos);
	bool write (const void* data, int numBytes);
	void writeRepeatedByte (uint8 byte, int numTimesToRepeat);

private:

	File file;
	void* fileHandle;
	Result status;
	int64 currentPosition;
	int bufferSize, bytesInBuffer;
	HeapBlock <char> buffer;

	void openHandle();
	void closeHandle();
	void flushInternal();
	bool flushBuffer();
	int64 setPositionInternal (int64 newPosition);
	int writeInternal (const void* data, int numBytes);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FileOutputStream);
};

#endif   // __JUCE_FILEOUTPUTSTREAM_JUCEHEADER__

/*** End of inlined file: juce_FileOutputStream.h ***/


#endif
#ifndef __JUCE_FILESEARCHPATH_JUCEHEADER__

/*** Start of inlined file: juce_FileSearchPath.h ***/
#ifndef __JUCE_FILESEARCHPATH_JUCEHEADER__
#define __JUCE_FILESEARCHPATH_JUCEHEADER__

/**
	Encapsulates a set of folders that make up a search path.

	@see File
*/
class JUCE_API  FileSearchPath
{
public:

	/** Creates an empty search path. */
	FileSearchPath();

	/** Creates a search path from a string of pathnames.

		The path can be semicolon- or comma-separated, e.g.
		"/foo/bar;/foo/moose;/fish/moose"

		The separate folders are tokenised and added to the search path.
	*/
	FileSearchPath (const String& path);

	/** Creates a copy of another search path. */
	FileSearchPath (const FileSearchPath& other);

	/** Destructor. */
	~FileSearchPath();

	/** Uses a string containing a list of pathnames to re-initialise this list.

		This search path is cleared and the semicolon- or comma-separated folders
		in this string are added instead. e.g. "/foo/bar;/foo/moose;/fish/moose"
	*/
	FileSearchPath& operator= (const String& path);

	/** Returns the number of folders in this search path.

		@see operator[]
	*/
	int getNumPaths() const;

	/** Returns one of the folders in this search path.

		The file returned isn't guaranteed to actually be a valid directory.

		@see getNumPaths
	*/
	File operator[] (int index) const;

	/** Returns the search path as a semicolon-separated list of directories. */
	String toString() const;

	/** Adds a new directory to the search path.

		The new directory is added to the end of the list if the insertIndex parameter is
		less than zero, otherwise it is inserted at the given index.
	*/
	void add (const File& directoryToAdd,
			  int insertIndex = -1);

	/** Adds a new directory to the search path if it's not already in there. */
	void addIfNotAlreadyThere (const File& directoryToAdd);

	/** Removes a directory from the search path. */
	void remove (int indexToRemove);

	/** Merges another search path into this one.

		This will remove any duplicate directories.
	*/
	void addPath (const FileSearchPath& other);

	/** Removes any directories that are actually subdirectories of one of the other directories in the search path.

		If the search is intended to be recursive, there's no point having nested folders in the search
		path, because they'll just get searched twice and you'll get duplicate results.

		e.g. if the path is "c:\abc\de;c:\abc", this method will simplify it to "c:\abc"
	*/
	void removeRedundantPaths();

	/** Removes any directories that don't actually exist. */
	void removeNonExistentPaths();

	/** Searches the path for a wildcard.

		This will search all the directories in the search path in order, adding any
		matching files to the results array.

		@param results                  an array to append the results to
		@param whatToLookFor            a value from the File::TypesOfFileToFind enum, specifying whether to
										return files, directories, or both.
		@param searchRecursively        whether to recursively search the subdirectories too
		@param wildCardPattern          a pattern to match against the filenames
		@returns the number of files added to the array
		@see File::findChildFiles
	*/
	int findChildFiles (Array<File>& results,
						int whatToLookFor,
						bool searchRecursively,
						const String& wildCardPattern = "*") const;

	/** Finds out whether a file is inside one of the path's directories.

		This will return true if the specified file is a child of one of the
		directories specified by this path. Note that this doesn't actually do any
		searching or check that the files exist - it just looks at the pathnames
		to work out whether the file would be inside a directory.

		@param fileToCheck      the file to look for
		@param checkRecursively if true, then this will return true if the file is inside a
								subfolder of one of the path's directories (at any depth). If false
								it will only return true if the file is actually a direct child
								of one of the directories.
		@see File::isAChildOf

	*/
	bool isFileInPath (const File& fileToCheck,
					   bool checkRecursively) const;

private:

	StringArray directories;

	void init (const String& path);

	JUCE_LEAK_DETECTOR (FileSearchPath);
};

#endif   // __JUCE_FILESEARCHPATH_JUCEHEADER__

/*** End of inlined file: juce_FileSearchPath.h ***/


#endif
#ifndef __JUCE_MEMORYMAPPEDFILE_JUCEHEADER__

/*** Start of inlined file: juce_MemoryMappedFile.h ***/
#ifndef __JUCE_MEMORYMAPPEDFILE_JUCEHEADER__
#define __JUCE_MEMORYMAPPEDFILE_JUCEHEADER__

/**
	Maps a file into virtual memory for easy reading and/or writing.
*/
class JUCE_API  MemoryMappedFile
{
public:
	/** The read/write flags used when opening a memory mapped file. */
	enum AccessMode
	{
		readOnly,   /**< Indicates that the memory can only be read. */
		readWrite   /**< Indicates that the memory can be read and written to - changes that are
						 made will be flushed back to disk at the whim of the OS. */
	};

	/** Opens a file and maps it to an area of virtual memory.

		The file should already exist, and should already be the size that you want to work with
		when you call this. If the file is resized after being opened, the behaviour is undefined.

		If the file exists and the operation succeeds, the getData() and getSize() methods will
		return the location and size of the data that can be read or written. Note that the entire
		file is not read into memory immediately - the OS simply creates a virtual mapping, which
		will lazily pull the data into memory when blocks are accessed.

		If the file can't be opened for some reason, the getData() method will return a null pointer.
	*/
	MemoryMappedFile (const File& file, AccessMode mode);

	/** Destructor. */
	~MemoryMappedFile();

	/** Returns the address at which this file has been mapped, or a null pointer if
		the file couldn't be successfully mapped.
	*/
	void* getData() const noexcept              { return address; }

	/** Returns the number of bytes of data that are available for reading or writing.
		This will normally be the size of the file.
	*/
	size_t getSize() const noexcept             { return length; }

private:

	void* address;
	size_t length;

   #if JUCE_WINDOWS
	void* fileHandle;
   #else
	int fileHandle;
   #endif

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MemoryMappedFile);
};

#endif   // __JUCE_MEMORYMAPPEDFILE_JUCEHEADER__

/*** End of inlined file: juce_MemoryMappedFile.h ***/


#endif
#ifndef __JUCE_TEMPORARYFILE_JUCEHEADER__

/*** Start of inlined file: juce_TemporaryFile.h ***/
#ifndef __JUCE_TEMPORARYFILE_JUCEHEADER__
#define __JUCE_TEMPORARYFILE_JUCEHEADER__

/**
	Manages a temporary file, which will be deleted when this object is deleted.

	This object is intended to be used as a stack based object, using its scope
	to make sure the temporary file isn't left lying around.

	For example:

	@code
	{
		File myTargetFile ("~/myfile.txt");

		// this will choose a file called something like "~/myfile_temp239348.txt"
		// which definitely doesn't exist at the time the constructor is called.
		TemporaryFile temp (myTargetFile);

		// create a stream to the temporary file, and write some data to it...
		ScopedPointer <FileOutputStream> out (temp.getFile().createOutputStream());

		if (out != nullptr)
		{
			out->write ( ...etc )
			out = nullptr; // (deletes the stream)

			// ..now we've finished writing, this will rename the temp file to
			// make it replace the target file we specified above.
			bool succeeded = temp.overwriteTargetFileWithTemporary();
		}

		// ..and even if something went wrong and our overwrite failed,
		// as the TemporaryFile object goes out of scope here, it'll make sure
		// that the temp file gets deleted.
	}
	@endcode

	@see File, FileOutputStream
*/
class JUCE_API  TemporaryFile
{
public:

	enum OptionFlags
	{
		useHiddenFile = 1,          /**< Indicates that the temporary file should be hidden -
										 i.e. its name should start with a dot. */
		putNumbersInBrackets = 2    /**< Indicates that when numbers are appended to make sure
										 the file is unique, they should go in brackets rather
										 than just being appended (see File::getNonexistentSibling() )*/
	};

	/** Creates a randomly-named temporary file in the default temp directory.

		@param suffix       a file suffix to use for the file
		@param optionFlags  a combination of the values listed in the OptionFlags enum
		The file will not be created until you write to it. And remember that when
		this object is deleted, the file will also be deleted!
	*/
	TemporaryFile (const String& suffix = String::empty,
				   int optionFlags = 0);

	/** Creates a temporary file in the same directory as a specified file.

		This is useful if you have a file that you want to overwrite, but don't
		want to harm the original file if the write operation fails. You can
		use this to create a temporary file next to the target file, then
		write to the temporary file, and finally use overwriteTargetFileWithTemporary()
		to replace the target file with the one you've just written.

		This class won't create any files until you actually write to them. And remember
		that when this object is deleted, the temporary file will also be deleted!

		@param targetFile   the file that you intend to overwrite - the temporary
							file will be created in the same directory as this
		@param optionFlags  a combination of the values listed in the OptionFlags enum
	*/
	TemporaryFile (const File& targetFile,
				   int optionFlags = 0);

	/** Destructor.

		When this object is deleted it will make sure that its temporary file is
		also deleted! If the operation fails, it'll throw an assertion in debug
		mode.
	*/
	~TemporaryFile();

	/** Returns the temporary file. */
	const File& getFile() const                 { return temporaryFile; }

	/** Returns the target file that was specified in the constructor. */
	const File& getTargetFile() const           { return targetFile; }

	/** Tries to move the temporary file to overwrite the target file that was
		specified in the constructor.

		If you used the constructor that specified a target file, this will attempt
		to replace that file with the temporary one.

		Before calling this, make sure:
		- that you've actually written to the temporary file
		- that you've closed any open streams that you were using to write to it
		- and that you don't have any streams open to the target file, which would
		  prevent it being overwritten

		If the file move succeeds, this returns false, and the temporary file will
		have disappeared. If it fails, the temporary file will probably still exist,
		but will be deleted when this object is destroyed.
	*/
	bool overwriteTargetFileWithTemporary() const;

	/** Attempts to delete the temporary file, if it exists.
		@returns true if the file is successfully deleted (or if it didn't exist).
	*/
	bool deleteTemporaryFile() const;

private:

	File temporaryFile, targetFile;

	void createTempFile (const File& parentDirectory, String name, const String& suffix, int optionFlags);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (TemporaryFile);
};

#endif   // __JUCE_TEMPORARYFILE_JUCEHEADER__

/*** End of inlined file: juce_TemporaryFile.h ***/


#endif
#ifndef __JUCE_JSON_JUCEHEADER__

/*** Start of inlined file: juce_JSON.h ***/
#ifndef __JUCE_JSON_JUCEHEADER__
#define __JUCE_JSON_JUCEHEADER__

class InputStream;
class OutputStream;
class File;

/**
	Contains static methods for converting JSON-formatted text to and from var objects.

	The var class is structurally compatible with JSON-formatted data, so these
	functions allow you to parse JSON into a var object, and to convert a var
	object to JSON-formatted text.

	@see var
*/
class JSON
{
public:

	/** Parses a string of JSON-formatted text, and returns a result code containing
		any parse errors.

		This will return the parsed structure in the parsedResult parameter, and will
		return a Result object to indicate whether parsing was successful, and if not,
		it will contain an error message.

		If you're not interested in the error message, you can use one of the other
		shortcut parse methods, which simply return a var::null if the parsing fails.
	*/
	static Result parse (const String& text, var& parsedResult);

	/** Attempts to parse some JSON-formatted text, and returns the result as a var object.

		If the parsing fails, this simply returns var::null - if you need to find out more
		detail about the parse error, use the alternative parse() method which returns a Result.
	*/
	static var parse (const String& text);

	/** Attempts to parse some JSON-formatted text from a file, and returns the result
		as a var object.

		Note that this is just a short-cut for reading the entire file into a string and
		parsing the result.

		If the parsing fails, this simply returns var::null - if you need to find out more
		detail about the parse error, use the alternative parse() method which returns a Result.
	*/
	static var parse (const File& file);

	/** Attempts to parse some JSON-formatted text from a stream, and returns the result
		as a var object.

		Note that this is just a short-cut for reading the entire stream into a string and
		parsing the result.

		If the parsing fails, this simply returns var::null - if you need to find out more
		detail about the parse error, use the alternative parse() method which returns a Result.
	*/
	static var parse (InputStream& input);

	/** Returns a string which contains a JSON-formatted representation of the var object.
		If allOnOneLine is true, the result will be compacted into a single line of text
		with no carriage-returns. If false, it will be laid-out in a more human-readable format.
		@see writeToStream
	*/
	static String toString (const var& objectToFormat,
							bool allOnOneLine = false);

	/** Writes a JSON-formatted representation of the var object to the given stream.
		If allOnOneLine is true, the result will be compacted into a single line of text
		with no carriage-returns. If false, it will be laid-out in a more human-readable format.
		@see toString
	*/
	static void writeToStream (OutputStream& output,
							   const var& objectToFormat,
							   bool allOnOneLine = false);

private:

	JSON(); // This class can't be instantiated - just use its static methods.
};

#endif   // __JUCE_JSON_JUCEHEADER__

/*** End of inlined file: juce_JSON.h ***/


#endif
#ifndef __JUCE_FILELOGGER_JUCEHEADER__

/*** Start of inlined file: juce_FileLogger.h ***/
#ifndef __JUCE_FILELOGGER_JUCEHEADER__
#define __JUCE_FILELOGGER_JUCEHEADER__

/**
	A simple implemenation of a Logger that writes to a file.

	@see Logger
*/
class JUCE_API  FileLogger  : public Logger
{
public:

	/** Creates a FileLogger for a given file.

		@param fileToWriteTo    the file that to use - new messages will be appended
								to the file. If the file doesn't exist, it will be created,
								along with any parent directories that are needed.
		@param welcomeMessage   when opened, the logger will write a header to the log, along
								with the current date and time, and this welcome message
		@param maxInitialFileSizeBytes  if this is zero or greater, then if the file already exists
								but is larger than this number of bytes, then the start of the
								file will be truncated to keep the size down. This prevents a log
								file getting ridiculously large over time. The file will be truncated
								at a new-line boundary. If this value is less than zero, no size limit
								will be imposed; if it's zero, the file will always be deleted. Note that
								the size is only checked once when this object is created - any logging
								that is done later will be appended without any checking
	*/
	FileLogger (const File& fileToWriteTo,
				const String& welcomeMessage,
				const int maxInitialFileSizeBytes = 128 * 1024);

	/** Destructor. */
	~FileLogger();

	void logMessage (const String& message);

	File getLogFile() const               { return logFile; }

	/** Helper function to create a log file in the correct place for this platform.

		On Windows this will return a logger with a path such as:
		c:\\Documents and Settings\\username\\Application Data\\[logFileSubDirectoryName]\\[logFileName]

		On the Mac it'll create something like:
		~/Library/Logs/[logFileName]

		The method might return 0 if the file can't be created for some reason.

		@param logFileSubDirectoryName      if a subdirectory is needed, this is what it will be called -
											it's best to use the something like the name of your application here.
		@param logFileName                  the name of the file to create, e.g. "MyAppLog.txt". Don't just
											call it "log.txt" because if it goes in a directory with logs
											from other applications (as it will do on the Mac) then no-one
											will know which one is yours!
		@param welcomeMessage               a message that will be written to the log when it's opened.
		@param maxInitialFileSizeBytes      (see the FileLogger constructor for more info on this)
	*/
	static FileLogger* createDefaultAppLogger (const String& logFileSubDirectoryName,
											   const String& logFileName,
											   const String& welcomeMessage,
											   const int maxInitialFileSizeBytes = 128 * 1024);

private:

	File logFile;
	CriticalSection logLock;

	void trimFileSize (int maxFileSizeBytes) const;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FileLogger);
};

#endif   // __JUCE_FILELOGGER_JUCEHEADER__

/*** End of inlined file: juce_FileLogger.h ***/


#endif
#ifndef __JUCE_LOGGER_JUCEHEADER__

#endif
#ifndef __JUCE_BIGINTEGER_JUCEHEADER__

/*** Start of inlined file: juce_BigInteger.h ***/
#ifndef __JUCE_BIGINTEGER_JUCEHEADER__
#define __JUCE_BIGINTEGER_JUCEHEADER__

class MemoryBlock;

/**
	An arbitrarily large integer class.

	A BigInteger can be used in a similar way to a normal integer, but has no size
	limit (except for memory and performance constraints).

	Negative values are possible, but the value isn't stored as 2s-complement, so
	be careful if you use negative values and look at the values of individual bits.
*/
class JUCE_API  BigInteger
{
public:

	/** Creates an empty BigInteger */
	BigInteger();

	/** Creates a BigInteger containing an integer value in its low bits.

		The low 32 bits of the number are initialised with this value.
	*/
	BigInteger (uint32 value);

	/** Creates a BigInteger containing an integer value in its low bits.

		The low 32 bits of the number are initialised with the absolute value
		passed in, and its sign is set to reflect the sign of the number.
	*/
	BigInteger (int32 value);

	/** Creates a BigInteger containing an integer value in its low bits.

		The low 64 bits of the number are initialised with the absolute value
		passed in, and its sign is set to reflect the sign of the number.
	*/
	BigInteger (int64 value);

	/** Creates a copy of another BigInteger. */
	BigInteger (const BigInteger& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	BigInteger (BigInteger&& other) noexcept;
	BigInteger& operator= (BigInteger&& other) noexcept;
   #endif

	/** Destructor. */
	~BigInteger();

	/** Copies another BigInteger onto this one. */
	BigInteger& operator= (const BigInteger& other);

	/** Swaps the internal contents of this with another object. */
	void swapWith (BigInteger& other) noexcept;

	/** Returns the value of a specified bit in the number.
		If the index is out-of-range, the result will be false.
	*/
	bool operator[] (int bit) const noexcept;

	/** Returns true if no bits are set. */
	bool isZero() const noexcept;

	/** Returns true if the value is 1. */
	bool isOne() const noexcept;

	/** Attempts to get the lowest bits of the value as an integer.
		If the value is bigger than the integer limits, this will return only the lower bits.
	*/
	int toInteger() const noexcept;

	/** Resets the value to 0. */
	void clear();

	/** Clears a particular bit in the number. */
	void clearBit (int bitNumber) noexcept;

	/** Sets a specified bit to 1. */
	void setBit (int bitNumber);

	/** Sets or clears a specified bit. */
	void setBit (int bitNumber, bool shouldBeSet);

	/** Sets a range of bits to be either on or off.

		@param startBit     the first bit to change
		@param numBits      the number of bits to change
		@param shouldBeSet  whether to turn these bits on or off
	*/
	void setRange (int startBit, int numBits, bool shouldBeSet);

	/** Inserts a bit an a given position, shifting up any bits above it. */
	void insertBit (int bitNumber, bool shouldBeSet);

	/** Returns a range of bits as a new BigInteger.

		e.g. getBitRangeAsInt (0, 64) would return the lowest 64 bits.
		@see getBitRangeAsInt
	*/
	BigInteger getBitRange (int startBit, int numBits) const;

	/** Returns a range of bits as an integer value.

		e.g. getBitRangeAsInt (0, 32) would return the lowest 32 bits.

		Asking for more than 32 bits isn't allowed (obviously) - for that, use
		getBitRange().
	*/
	uint32 getBitRangeAsInt (int startBit, int numBits) const noexcept;

	/** Sets a range of bits to an integer value.

		Copies the given integer onto a range of bits, starting at startBit,
		and using up to numBits of the available bits.
	*/
	void setBitRangeAsInt (int startBit, int numBits, uint32 valueToSet);

	/** Shifts a section of bits left or right.

		@param howManyBitsLeft  how far to move the bits (+ve numbers shift it left, -ve numbers shift it right).
		@param startBit         the first bit to affect - if this is > 0, only bits above that index will be affected.
	*/
	void shiftBits (int howManyBitsLeft, int startBit);

	/** Returns the total number of set bits in the value. */
	int countNumberOfSetBits() const noexcept;

	/** Looks for the index of the next set bit after a given starting point.

		This searches from startIndex (inclusive) upwards for the first set bit,
		and returns its index. If no set bits are found, it returns -1.
	*/
	int findNextSetBit (int startIndex = 0) const noexcept;

	/** Looks for the index of the next clear bit after a given starting point.

		This searches from startIndex (inclusive) upwards for the first clear bit,
		and returns its index.
	*/
	int findNextClearBit (int startIndex = 0) const noexcept;

	/** Returns the index of the highest set bit in the number.
		If the value is zero, this will return -1.
	*/
	int getHighestBit() const noexcept;

	// All the standard arithmetic ops...

	BigInteger& operator+= (const BigInteger& other);
	BigInteger& operator-= (const BigInteger& other);
	BigInteger& operator*= (const BigInteger& other);
	BigInteger& operator/= (const BigInteger& other);
	BigInteger& operator|= (const BigInteger& other);
	BigInteger& operator&= (const BigInteger& other);
	BigInteger& operator^= (const BigInteger& other);
	BigInteger& operator%= (const BigInteger& other);
	BigInteger& operator<<= (int numBitsToShift);
	BigInteger& operator>>= (int numBitsToShift);
	BigInteger& operator++();
	BigInteger& operator--();
	BigInteger operator++ (int);
	BigInteger operator-- (int);

	BigInteger operator-() const;
	BigInteger operator+ (const BigInteger& other) const;
	BigInteger operator- (const BigInteger& other) const;
	BigInteger operator* (const BigInteger& other) const;
	BigInteger operator/ (const BigInteger& other) const;
	BigInteger operator| (const BigInteger& other) const;
	BigInteger operator& (const BigInteger& other) const;
	BigInteger operator^ (const BigInteger& other) const;
	BigInteger operator% (const BigInteger& other) const;
	BigInteger operator<< (int numBitsToShift) const;
	BigInteger operator>> (int numBitsToShift) const;

	bool operator== (const BigInteger& other) const noexcept;
	bool operator!= (const BigInteger& other) const noexcept;
	bool operator<  (const BigInteger& other) const noexcept;
	bool operator<= (const BigInteger& other) const noexcept;
	bool operator>  (const BigInteger& other) const noexcept;
	bool operator>= (const BigInteger& other) const noexcept;

	/** Does a signed comparison of two BigIntegers.

		Return values are:
			- 0 if the numbers are the same
			- < 0 if this number is smaller than the other
			- > 0 if this number is bigger than the other
	*/
	int compare (const BigInteger& other) const noexcept;

	/** Compares the magnitudes of two BigIntegers, ignoring their signs.

		Return values are:
			- 0 if the numbers are the same
			- < 0 if this number is smaller than the other
			- > 0 if this number is bigger than the other
	*/
	int compareAbsolute (const BigInteger& other) const noexcept;

	/** Divides this value by another one and returns the remainder.

		This number is divided by other, leaving the quotient in this number,
		with the remainder being copied to the other BigInteger passed in.
	*/
	void divideBy (const BigInteger& divisor, BigInteger& remainder);

	/** Returns the largest value that will divide both this value and the one passed-in.
	*/
	BigInteger findGreatestCommonDivisor (BigInteger other) const;

	/** Performs a combined exponent and modulo operation.

		This BigInteger's value becomes (this ^ exponent) % modulus.
	*/
	void exponentModulo (const BigInteger& exponent, const BigInteger& modulus);

	/** Performs an inverse modulo on the value.

		i.e. the result is (this ^ -1) mod (modulus).
	*/
	void inverseModulo (const BigInteger& modulus);

	/** Returns true if the value is less than zero.
		@see setNegative, negate
	*/
	bool isNegative() const noexcept;

	/** Changes the sign of the number to be positive or negative.
		@see isNegative, negate
	*/
	void setNegative (bool shouldBeNegative) noexcept;

	/** Inverts the sign of the number.
		@see isNegative, setNegative
	*/
	void negate() noexcept;

	/** Converts the number to a string.

		Specify a base such as 2 (binary), 8 (octal), 10 (decimal), 16 (hex).
		If minimumNumCharacters is greater than 0, the returned string will be
		padded with leading zeros to reach at least that length.
	*/
	String toString (int base, int minimumNumCharacters = 1) const;

	/** Reads the numeric value from a string.

		Specify a base such as 2 (binary), 8 (octal), 10 (decimal), 16 (hex).
		Any invalid characters will be ignored.
	*/
	void parseString (const String& text, int base);

	/** Turns the number into a block of binary data.

		The data is arranged as little-endian, so the first byte of data is the low 8 bits
		of the number, and so on.

		@see loadFromMemoryBlock
	*/
	MemoryBlock toMemoryBlock() const;

	/** Converts a block of raw data into a number.

		The data is arranged as little-endian, so the first byte of data is the low 8 bits
		of the number, and so on.

		@see toMemoryBlock
	*/
	void loadFromMemoryBlock (const MemoryBlock& data);

private:

	HeapBlock <uint32> values;
	size_t numValues;
	int highestBit;
	bool negative;

	void ensureSize (size_t numVals);
	void shiftLeft (int bits, int startBit);
	void shiftRight (int bits, int startBit);

	JUCE_LEAK_DETECTOR (BigInteger);
};

/** Writes a BigInteger to an OutputStream as a UTF8 decimal string. */
OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, const BigInteger& value);

#ifndef DOXYGEN
 // For backwards compatibility, BitArray is defined as an alias for BigInteger.
 typedef BigInteger BitArray;
#endif

#endif   // __JUCE_BIGINTEGER_JUCEHEADER__

/*** End of inlined file: juce_BigInteger.h ***/


#endif
#ifndef __JUCE_EXPRESSION_JUCEHEADER__

/*** Start of inlined file: juce_Expression.h ***/
#ifndef __JUCE_EXPRESSION_JUCEHEADER__
#define __JUCE_EXPRESSION_JUCEHEADER__

/**
	A class for dynamically evaluating simple numeric expressions.

	This class can parse a simple C-style string expression involving floating point
	numbers, named symbols and functions. The basic arithmetic operations of +, -, *, /
	are supported, as well as parentheses, and any alphanumeric identifiers are
	assumed to be named symbols which will be resolved when the expression is
	evaluated.

	Expressions which use identifiers and functions require a subclass of
	Expression::Scope to be supplied when evaluating them, and this object
	is expected to be able to resolve the symbol names and perform the functions that
	are used.
*/
class JUCE_API  Expression
{
public:

	/** Creates a simple expression with a value of 0. */
	Expression();

	/** Destructor. */
	~Expression();

	/** Creates a simple expression with a specified constant value. */
	explicit Expression (double constant);

	/** Creates a copy of an expression. */
	Expression (const Expression& other);

	/** Copies another expression. */
	Expression& operator= (const Expression& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	Expression (Expression&& other) noexcept;
	Expression& operator= (Expression&& other) noexcept;
   #endif

	/** Creates an expression by parsing a string.
		If there's a syntax error in the string, this will throw a ParseError exception.
		@throws ParseError
	*/
	explicit Expression (const String& stringToParse);

	/** Returns a string version of the expression. */
	String toString() const;

	/** Returns an expression which is an addtion operation of two existing expressions. */
	Expression operator+ (const Expression& other) const;
	/** Returns an expression which is a subtraction operation of two existing expressions. */
	Expression operator- (const Expression& other) const;
	/** Returns an expression which is a multiplication operation of two existing expressions. */
	Expression operator* (const Expression& other) const;
	/** Returns an expression which is a division operation of two existing expressions. */
	Expression operator/ (const Expression& other) const;
	/** Returns an expression which performs a negation operation on an existing expression. */
	Expression operator-() const;

	/** Returns an Expression which is an identifier reference. */
	static Expression symbol (const String& symbol);

	/** Returns an Expression which is a function call. */
	static Expression function (const String& functionName, const Array<Expression>& parameters);

	/** Returns an Expression which parses a string from a character pointer, and updates the pointer
		to indicate where it finished.

		The pointer is incremented so that on return, it indicates the character that follows
		the end of the expression that was parsed.

		If there's a syntax error in the string, this will throw a ParseError exception.
		@throws ParseError
	*/
	static Expression parse (String::CharPointerType& stringToParse);

	/** When evaluating an Expression object, this class is used to resolve symbols and
		perform functions that the expression uses.
	*/
	class JUCE_API  Scope
	{
	public:
		Scope();
		virtual ~Scope();

		/** Returns some kind of globally unique ID that identifies this scope. */
		virtual String getScopeUID() const;

		/** Returns the value of a symbol.
			If the symbol is unknown, this can throw an Expression::EvaluationError exception.
			The member value is set to the part of the symbol that followed the dot, if there is
			one, e.g. for "foo.bar", symbol = "foo" and member = "bar".
			@throws Expression::EvaluationError
		*/
		virtual Expression getSymbolValue (const String& symbol) const;

		/** Executes a named function.
			If the function name is unknown, this can throw an Expression::EvaluationError exception.
			@throws Expression::EvaluationError
		*/
		virtual double evaluateFunction (const String& functionName,
										 const double* parameters, int numParameters) const;

		/** Used as a callback by the Scope::visitRelativeScope() method.
			You should never create an instance of this class yourself, it's used by the
			expression evaluation code.
		*/
		class Visitor
		{
		public:
			virtual ~Visitor() {}
			virtual void visit (const Scope&) = 0;
		};

		/** Creates a Scope object for a named scope, and then calls a visitor
			to do some kind of processing with this new scope.

			If the name is valid, this method must create a suitable (temporary) Scope
			object to represent it, and must call the Visitor::visit() method with this
			new scope.
		*/
		virtual void visitRelativeScope (const String& scopeName, Visitor& visitor) const;
	};

	/** Evaluates this expression, without using a Scope.
		Without a Scope, no symbols can be used, and only basic functions such as sin, cos, tan,
		min, max are available.
		To find out about any errors during evaluation, use the other version of this method which
		takes a String parameter.
	*/
	double evaluate() const;

	/** Evaluates this expression, providing a scope that should be able to evaluate any symbols
		or functions that it uses.
		To find out about any errors during evaluation, use the other version of this method which
		takes a String parameter.
	*/
	double evaluate (const Scope& scope) const;

	/** Evaluates this expression, providing a scope that should be able to evaluate any symbols
		or functions that it uses.
	*/
	double evaluate (const Scope& scope, String& evaluationError) const;

	/** Attempts to return an expression which is a copy of this one, but with a constant adjusted
		to make the expression resolve to a target value.

		E.g. if the expression is "x + 10" and x is 5, then asking for a target value of 8 will return
		the expression "x + 3". Obviously some expressions can't be reversed in this way, in which
		case they might just be adjusted by adding a constant to the original expression.

		@throws Expression::EvaluationError
	*/
	Expression adjustedToGiveNewResult (double targetValue, const Scope& scope) const;

	/** Represents a symbol that is used in an Expression. */
	struct Symbol
	{
		Symbol (const String& scopeUID, const String& symbolName);
		bool operator== (const Symbol&) const noexcept;
		bool operator!= (const Symbol&) const noexcept;

		String scopeUID;    /**< The unique ID of the Scope that contains this symbol. */
		String symbolName;  /**< The name of the symbol. */
	};

	/** Returns a copy of this expression in which all instances of a given symbol have been renamed. */
	Expression withRenamedSymbol (const Symbol& oldSymbol, const String& newName, const Scope& scope) const;

	/** Returns true if this expression makes use of the specified symbol.
		If a suitable scope is supplied, the search will dereference and recursively check
		all symbols, so that it can be determined whether this expression relies on the given
		symbol at any level in its evaluation. If the scope parameter is null, this just checks
		whether the expression contains any direct references to the symbol.

		@throws Expression::EvaluationError
	*/
	bool referencesSymbol (const Symbol& symbol, const Scope& scope) const;

	/** Returns true if this expression contains any symbols. */
	bool usesAnySymbols() const;

	/** Returns a list of all symbols that may be needed to resolve this expression in the given scope. */
	void findReferencedSymbols (Array<Symbol>& results, const Scope& scope) const;

	/** An exception that can be thrown by Expression::parse(). */
	class ParseError  : public std::exception
	{
	public:
		ParseError (const String& message);

		String description;
	};

	/** Expression type.
		@see Expression::getType()
	*/
	enum Type
	{
		constantType,
		functionType,
		operatorType,
		symbolType
	};

	/** Returns the type of this expression. */
	Type getType() const noexcept;

	/** If this expression is a symbol, function or operator, this returns its identifier. */
	String getSymbolOrFunction() const;

	/** Returns the number of inputs to this expression.
		@see getInput
	*/
	int getNumInputs() const;

	/** Retrieves one of the inputs to this expression.
		@see getNumInputs
	*/
	Expression getInput (int index) const;

private:

	class Term;
	struct Helpers;
	friend class Term;
	friend struct Helpers;
	friend class ScopedPointer<Term>;
	friend class ReferenceCountedObjectPtr<Term>;
	ReferenceCountedObjectPtr<Term> term;

	explicit Expression (Term*);
};

#endif   // __JUCE_EXPRESSION_JUCEHEADER__

/*** End of inlined file: juce_Expression.h ***/


#endif
#ifndef __JUCE_MATHSFUNCTIONS_JUCEHEADER__

#endif
#ifndef __JUCE_RANDOM_JUCEHEADER__

/*** Start of inlined file: juce_Random.h ***/
#ifndef __JUCE_RANDOM_JUCEHEADER__
#define __JUCE_RANDOM_JUCEHEADER__

/**
	A random number generator.

	You can create a Random object and use it to generate a sequence of random numbers.
*/
class JUCE_API  Random
{
public:

	/** Creates a Random object based on a seed value.

		For a given seed value, the subsequent numbers generated by this object
		will be predictable, so a good idea is to set this value based
		on the time, e.g.

		new Random (Time::currentTimeMillis())
	*/
	explicit Random (int64 seedValue) noexcept;

	/** Creates a Random object using a random seed value.
		Internally, this calls setSeedRandomly() to randomise the seed.
	*/
	Random();

	/** Destructor. */
	~Random() noexcept;

	/** Returns the next random 32 bit integer.

		@returns a random integer from the full range 0x80000000 to 0x7fffffff
	*/
	int nextInt() noexcept;

	/** Returns the next random number, limited to a given range.
		The maxValue parameter may not be negative, or zero.
		@returns a random integer between 0 (inclusive) and maxValue (exclusive).
	*/
	int nextInt (int maxValue) noexcept;

	/** Returns the next 64-bit random number.

		@returns a random integer from the full range 0x8000000000000000 to 0x7fffffffffffffff
	*/
	int64 nextInt64() noexcept;

	/** Returns the next random floating-point number.

		@returns a random value in the range 0 to 1.0
	*/
	float nextFloat() noexcept;

	/** Returns the next random floating-point number.

		@returns a random value in the range 0 to 1.0
	*/
	double nextDouble() noexcept;

	/** Returns the next random boolean value.
	*/
	bool nextBool() noexcept;

	/** Returns a BigInteger containing a random number.

		@returns a random value in the range 0 to (maximumValue - 1).
	*/
	BigInteger nextLargeNumber (const BigInteger& maximumValue);

	/** Sets a range of bits in a BigInteger to random values. */
	void fillBitsRandomly (BigInteger& arrayToChange, int startBit, int numBits);

	/** Resets this Random object to a given seed value. */
	void setSeed (int64 newSeed) noexcept;

	/** Merges this object's seed with another value.
		This sets the seed to be a value created by combining the current seed and this
		new value.
	*/
	void combineSeed (int64 seedValue) noexcept;

	/** Reseeds this generator using a value generated from various semi-random system
		properties like the current time, etc.

		Because this function convolves the time with the last seed value, calling
		it repeatedly will increase the randomness of the final result.
	*/
	void setSeedRandomly();

	/** The overhead of creating a new Random object is fairly small, but if you want to avoid
		it, you can call this method to get a global shared Random object.

		It's not thread-safe though, so threads should use their own Random object, otherwise
		you run the risk of your random numbers becoming.. erm.. randomly corrupted..
	*/
	static Random& getSystemRandom() noexcept;

private:

	int64 seed;

	JUCE_LEAK_DETECTOR (Random);
};

#endif   // __JUCE_RANDOM_JUCEHEADER__

/*** End of inlined file: juce_Random.h ***/


#endif
#ifndef __JUCE_RANGE_JUCEHEADER__

#endif
#ifndef __JUCE_ATOMIC_JUCEHEADER__

#endif
#ifndef __JUCE_BYTEORDER_JUCEHEADER__

#endif
#ifndef __JUCE_HEAPBLOCK_JUCEHEADER__

#endif
#ifndef __JUCE_LEAKEDOBJECTDETECTOR_JUCEHEADER__

#endif
#ifndef __JUCE_MEMORY_JUCEHEADER__

#endif
#ifndef __JUCE_MEMORYBLOCK_JUCEHEADER__

#endif
#ifndef __JUCE_OPTIONALSCOPEDPOINTER_JUCEHEADER__

/*** Start of inlined file: juce_OptionalScopedPointer.h ***/
#ifndef __JUCE_OPTIONALSCOPEDPOINTER_JUCEHEADER__
#define __JUCE_OPTIONALSCOPEDPOINTER_JUCEHEADER__

/**
	Holds a pointer to an object which can optionally be deleted when this pointer
	goes out of scope.

	This acts in many ways like a ScopedPointer, but allows you to specify whether or
	not the object is deleted.

	@see ScopedPointer
*/
template <class ObjectType>
class OptionalScopedPointer
{
public:

	/** Creates an empty OptionalScopedPointer. */
	OptionalScopedPointer() : shouldDelete (false) {}

	/** Creates an OptionalScopedPointer to point to a given object, and specifying whether
		the OptionalScopedPointer will delete it.

		If takeOwnership is true, then the OptionalScopedPointer will act like a ScopedPointer,
		deleting the object when it is itself deleted. If this parameter is false, then the
		OptionalScopedPointer just holds a normal pointer to the object, and won't delete it.
	*/
	OptionalScopedPointer (ObjectType* objectToHold, bool takeOwnership)
		: object (objectToHold), shouldDelete (takeOwnership)
	{
	}

	/** Takes ownership of the object that another OptionalScopedPointer holds.

		Like a normal ScopedPointer, the objectToTransferFrom object will become null,
		as ownership of the managed object is transferred to this object.

		The flag to indicate whether or not to delete the managed object is also
		copied from the source object.
	*/
	OptionalScopedPointer (OptionalScopedPointer& objectToTransferFrom)
		: object (objectToTransferFrom.release()),
		  shouldDelete (objectToTransferFrom.shouldDelete)
	{
	}

	/** Takes ownership of the object that another OptionalScopedPointer holds.

		Like a normal ScopedPointer, the objectToTransferFrom object will become null,
		as ownership of the managed object is transferred to this object.

		The ownership flag that says whether or not to delete the managed object is also
		copied from the source object.
	*/
	OptionalScopedPointer& operator= (OptionalScopedPointer& objectToTransferFrom)
	{
		if (object != objectToTransferFrom.object)
		{
			clear();
			object = objectToTransferFrom.object;
		}

		shouldDelete = objectToTransferFrom.shouldDelete;
		return *this;
	}

	/** The destructor may or may not delete the object that is being held, depending on the
		takeOwnership flag that was specified when the object was first passed into an
		OptionalScopedPointer constructor.
	*/
	~OptionalScopedPointer()
	{
		clear();
	}

	/** Returns the object that this pointer is managing. */
	inline operator ObjectType*() const noexcept                    { return object; }

	/** Returns the object that this pointer is managing. */
	inline ObjectType& operator*() const noexcept                   { return *object; }

	/** Lets you access methods and properties of the object that this pointer is holding. */
	inline ObjectType* operator->() const noexcept                  { return object; }

	/** Removes the current object from this OptionalScopedPointer without deleting it.
		This will return the current object, and set this OptionalScopedPointer to a null pointer.
	*/
	ObjectType* release() noexcept                                  { return object.release(); }

	/** Resets this pointer to null, possibly deleting the object that it holds, if it has
		ownership of it.
	*/
	void clear()
	{
		if (! shouldDelete)
			object.release();
	}

	/** Swaps this object with another OptionalScopedPointer.
		The two objects simply exchange their states.
	*/
	void swapWith (OptionalScopedPointer<ObjectType>& other) noexcept
	{
		object.swapWith (other.object);
		std::swap (shouldDelete, other.shouldDelete);
	}

private:

	ScopedPointer<ObjectType> object;
	bool shouldDelete;
};

#endif   // __JUCE_OPTIONALSCOPEDPOINTER_JUCEHEADER__

/*** End of inlined file: juce_OptionalScopedPointer.h ***/


#endif
#ifndef __JUCE_REFERENCECOUNTEDOBJECT_JUCEHEADER__

#endif
#ifndef __JUCE_SCOPEDPOINTER_JUCEHEADER__

#endif
#ifndef __JUCE_SINGLETON_JUCEHEADER__

/*** Start of inlined file: juce_Singleton.h ***/
#ifndef __JUCE_SINGLETON_JUCEHEADER__
#define __JUCE_SINGLETON_JUCEHEADER__

/**
	Macro to declare member variables and methods for a singleton class.

	To use this, add the line juce_DeclareSingleton (MyClass, doNotRecreateAfterDeletion)
	to the class's definition.

	Then put a macro juce_ImplementSingleton (MyClass) along with the class's
	implementation code.

	It's also a very good idea to also add the call clearSingletonInstance() in your class's
	destructor, in case it is deleted by other means than deleteInstance()

	Clients can then call the static method MyClass::getInstance() to get a pointer
	to the singleton, or MyClass::getInstanceWithoutCreating() which will return 0 if
	no instance currently exists.

	e.g. @code

		class MySingleton
		{
		public:
			MySingleton()
			{
			}

			~MySingleton()
			{
				// this ensures that no dangling pointers are left when the
				// singleton is deleted.
				clearSingletonInstance();
			}

			juce_DeclareSingleton (MySingleton, false)
		};

		juce_ImplementSingleton (MySingleton)

		// example of usage:
		MySingleton* m = MySingleton::getInstance(); // creates the singleton if there isn't already one.

		...

		MySingleton::deleteInstance(); // safely deletes the singleton (if it's been created).

	@endcode

	If doNotRecreateAfterDeletion = true, it won't allow the object to be created more
	than once during the process's lifetime - i.e. after you've created and deleted the
	object, getInstance() will refuse to create another one. This can be useful to stop
	objects being accidentally re-created during your app's shutdown code.

	If you know that your object will only be created and deleted by a single thread, you
	can use the slightly more efficient juce_DeclareSingleton_SingleThreaded() macro instead
	of this one.

	@see juce_ImplementSingleton, juce_DeclareSingleton_SingleThreaded
*/
#define juce_DeclareSingleton(classname, doNotRecreateAfterDeletion) \
\
	static classname* _singletonInstance;  \
	static juce::CriticalSection _singletonLock; \
\
	static classname* JUCE_CALLTYPE getInstance() \
	{ \
		if (_singletonInstance == nullptr) \
		{\
			const juce::ScopedLock sl (_singletonLock); \
\
			if (_singletonInstance == nullptr) \
			{ \
				static bool alreadyInside = false; \
				static bool createdOnceAlready = false; \
\
				const bool problem = alreadyInside || ((doNotRecreateAfterDeletion) && createdOnceAlready); \
				jassert (! problem); \
				if (! problem) \
				{ \
					createdOnceAlready = true; \
					alreadyInside = true; \
					classname* newObject = new classname();  /* (use a stack variable to avoid setting the newObject value before the class has finished its constructor) */ \
					alreadyInside = false; \
\
					_singletonInstance = newObject; \
				} \
			} \
		} \
\
		return _singletonInstance; \
	} \
\
	static inline classname* JUCE_CALLTYPE getInstanceWithoutCreating() noexcept\
	{ \
		return _singletonInstance; \
	} \
\
	static void JUCE_CALLTYPE deleteInstance() \
	{ \
		const juce::ScopedLock sl (_singletonLock); \
		if (_singletonInstance != nullptr) \
		{ \
			classname* const old = _singletonInstance; \
			_singletonInstance = nullptr; \
			delete old; \
		} \
	} \
\
	void clearSingletonInstance() noexcept\
	{ \
		if (_singletonInstance == this) \
			_singletonInstance = nullptr; \
	}

/** This is a counterpart to the juce_DeclareSingleton macro.

	After adding the juce_DeclareSingleton to the class definition, this macro has
	to be used in the cpp file.
*/
#define juce_ImplementSingleton(classname) \
\
	classname* classname::_singletonInstance = nullptr; \
	juce::CriticalSection classname::_singletonLock;

/**
	Macro to declare member variables and methods for a singleton class.

	This is exactly the same as juce_DeclareSingleton, but doesn't use a critical
	section to make access to it thread-safe. If you know that your object will
	only ever be created or deleted by a single thread, then this is a
	more efficient version to use.

	If doNotRecreateAfterDeletion = true, it won't allow the object to be created more
	than once during the process's lifetime - i.e. after you've created and deleted the
	object, getInstance() will refuse to create another one. This can be useful to stop
	objects being accidentally re-created during your app's shutdown code.

	See the documentation for juce_DeclareSingleton for more information about
	how to use it, the only difference being that you have to use
	juce_ImplementSingleton_SingleThreaded instead of juce_ImplementSingleton.

	@see juce_ImplementSingleton_SingleThreaded, juce_DeclareSingleton, juce_DeclareSingleton_SingleThreaded_Minimal
*/
#define juce_DeclareSingleton_SingleThreaded(classname, doNotRecreateAfterDeletion) \
\
	static classname* _singletonInstance;  \
\
	static classname* getInstance() \
	{ \
		if (_singletonInstance == nullptr) \
		{ \
			static bool alreadyInside = false; \
			static bool createdOnceAlready = false; \
\
			const bool problem = alreadyInside || ((doNotRecreateAfterDeletion) && createdOnceAlready); \
			jassert (! problem); \
			if (! problem) \
			{ \
				createdOnceAlready = true; \
				alreadyInside = true; \
				classname* newObject = new classname();  /* (use a stack variable to avoid setting the newObject value before the class has finished its constructor) */ \
				alreadyInside = false; \
\
				_singletonInstance = newObject; \
			} \
		} \
\
		return _singletonInstance; \
	} \
\
	static inline classname* getInstanceWithoutCreating() noexcept\
	{ \
		return _singletonInstance; \
	} \
\
	static void deleteInstance() \
	{ \
		if (_singletonInstance != nullptr) \
		{ \
			classname* const old = _singletonInstance; \
			_singletonInstance = nullptr; \
			delete old; \
		} \
	} \
\
	void clearSingletonInstance() noexcept\
	{ \
		if (_singletonInstance == this) \
			_singletonInstance = nullptr; \
	}

/**
	Macro to declare member variables and methods for a singleton class.

	This is like juce_DeclareSingleton_SingleThreaded, but doesn't do any checking
	for recursion or repeated instantiation. It's intended for use as a lightweight
	version of a singleton, where you're using it in very straightforward
	circumstances and don't need the extra checking.

	Juce use the normal juce_ImplementSingleton_SingleThreaded as the counterpart
	to this declaration, as you would with juce_DeclareSingleton_SingleThreaded.

	See the documentation for juce_DeclareSingleton for more information about
	how to use it, the only difference being that you have to use
	juce_ImplementSingleton_SingleThreaded instead of juce_ImplementSingleton.

	@see juce_ImplementSingleton_SingleThreaded, juce_DeclareSingleton
*/
#define juce_DeclareSingleton_SingleThreaded_Minimal(classname) \
\
	static classname* _singletonInstance;  \
\
	static classname* getInstance() \
	{ \
		if (_singletonInstance == nullptr) \
			_singletonInstance = new classname(); \
\
		return _singletonInstance; \
	} \
\
	static inline classname* getInstanceWithoutCreating() noexcept\
	{ \
		return _singletonInstance; \
	} \
\
	static void deleteInstance() \
	{ \
		if (_singletonInstance != nullptr) \
		{ \
			classname* const old = _singletonInstance; \
			_singletonInstance = nullptr; \
			delete old; \
		} \
	} \
\
	void clearSingletonInstance() noexcept\
	{ \
		if (_singletonInstance == this) \
			_singletonInstance = nullptr; \
	}

/** This is a counterpart to the juce_DeclareSingleton_SingleThreaded macro.

	After adding juce_DeclareSingleton_SingleThreaded or juce_DeclareSingleton_SingleThreaded_Minimal
	to the class definition, this macro has to be used somewhere in the cpp file.
*/
#define juce_ImplementSingleton_SingleThreaded(classname) \
\
	classname* classname::_singletonInstance = nullptr;

#endif   // __JUCE_SINGLETON_JUCEHEADER__

/*** End of inlined file: juce_Singleton.h ***/


#endif
#ifndef __JUCE_WEAKREFERENCE_JUCEHEADER__

/*** Start of inlined file: juce_WeakReference.h ***/
#ifndef __JUCE_WEAKREFERENCE_JUCEHEADER__
#define __JUCE_WEAKREFERENCE_JUCEHEADER__

/**
	This class acts as a pointer which will automatically become null if the object
	to which it points is deleted.

	To accomplish this, the source object needs to cooperate by performing a couple of simple tasks.
	It must embed a WeakReference::Master object, which stores a shared pointer object, and must clear
	this master pointer in its destructor.

	E.g.
	@code
	class MyObject
	{
	public:
		MyObject()
		{
			// If you're planning on using your WeakReferences in a multi-threaded situation, you may choose
			// to create a WeakReference to the object here in the constructor, which will pre-initialise the
			// embedded object, avoiding an (extremely unlikely) race condition that could occur if multiple
			// threads overlap while creating the first WeakReference to it.
		}

		~MyObject()
		{
			// This will zero all the references - you need to call this in your destructor.
			masterReference.clear();
		}

	private:
		// You need to embed a variable of this type, with the name "masterReference" inside your object. If the
		// variable is not public, you should make your class a friend of WeakReference<MyObject> so that the
		// WeakReference class can access it.
		WeakReference<MyObject>::Master masterReference;
		friend class WeakReference<MyObject>;
	};

	// Here's an example of using a pointer..

	MyObject* n = new MyObject();
	WeakReference<MyObject> myObjectRef = n;

	MyObject* pointer1 = myObjectRef;  // returns a valid pointer to 'n'
	delete n;
	MyObject* pointer2 = myObjectRef;  // returns a null pointer
	@endcode

	@see WeakReference::Master
*/
template <class ObjectType, class ReferenceCountingType = ReferenceCountedObject>
class WeakReference
{
public:
	/** Creates a null SafePointer. */
	inline WeakReference() noexcept {}

	/** Creates a WeakReference that points at the given object. */
	WeakReference (ObjectType* const object)  : holder (getRef (object)) {}

	/** Creates a copy of another WeakReference. */
	WeakReference (const WeakReference& other) noexcept         : holder (other.holder) {}

	/** Copies another pointer to this one. */
	WeakReference& operator= (const WeakReference& other)       { holder = other.holder; return *this; }

	/** Copies another pointer to this one. */
	WeakReference& operator= (ObjectType* const newObject)      { holder = getRef (newObject); return *this; }

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	WeakReference (WeakReference&& other) noexcept              : holder (static_cast <SharedRef&&> (other.holder)) {}
	WeakReference& operator= (WeakReference&& other) noexcept   { holder = static_cast <SharedRef&&> (other.holder); return *this; }
   #endif

	/** Returns the object that this pointer refers to, or null if the object no longer exists. */
	ObjectType* get() const noexcept                            { return holder != nullptr ? holder->get() : nullptr; }

	/** Returns the object that this pointer refers to, or null if the object no longer exists. */
	operator ObjectType*() const noexcept                       { return get(); }

	/** Returns the object that this pointer refers to, or null if the object no longer exists. */
	ObjectType* operator->() noexcept                           { return get(); }

	/** Returns the object that this pointer refers to, or null if the object no longer exists. */
	const ObjectType* operator->() const noexcept               { return get(); }

	/** This returns true if this reference has been pointing at an object, but that object has
		since been deleted.

		If this reference was only ever pointing at a null pointer, this will return false. Using
		operator=() to make this refer to a different object will reset this flag to match the status
		of the reference from which you're copying.
	*/
	bool wasObjectDeleted() const noexcept                      { return holder != nullptr && holder->get() == nullptr; }

	bool operator== (ObjectType* const object) const noexcept   { return get() == object; }
	bool operator!= (ObjectType* const object) const noexcept   { return get() != object; }

	/** This class is used internally by the WeakReference class - don't use it directly
		in your code!
		@see WeakReference
	*/
	class SharedPointer   : public ReferenceCountingType
	{
	public:
		explicit SharedPointer (ObjectType* const owner_) noexcept : owner (owner_) {}

		inline ObjectType* get() const noexcept     { return owner; }
		void clearPointer() noexcept                { owner = nullptr; }

	private:
		ObjectType* volatile owner;

		JUCE_DECLARE_NON_COPYABLE (SharedPointer);
	};

	typedef ReferenceCountedObjectPtr<SharedPointer> SharedRef;

	/**
		This class is embedded inside an object to which you want to attach WeakReference pointers.
		See the WeakReference class notes for an example of how to use this class.
		@see WeakReference
	*/
	class Master
	{
	public:
		Master() noexcept {}

		~Master()
		{
			// You must remember to call clear() in your source object's destructor! See the notes
			// for the WeakReference class for an example of how to do this.
			jassert (sharedPointer == nullptr || sharedPointer->get() == nullptr);
		}

		/** The first call to this method will create an internal object that is shared by all weak
			references to the object.
		*/
		SharedPointer* getSharedPointer (ObjectType* const object)
		{
			if (sharedPointer == nullptr)
			{
				sharedPointer = new SharedPointer (object);
			}
			else
			{
				// You're trying to create a weak reference to an object that has already been deleted!!
				jassert (sharedPointer->get() != nullptr);
			}

			return sharedPointer;
		}

		/** The object that owns this master pointer should call this before it gets destroyed,
			to zero all the references to this object that may be out there. See the WeakReference
			class notes for an example of how to do this.
		*/
		void clear()
		{
			if (sharedPointer != nullptr)
				sharedPointer->clearPointer();
		}

	private:
		SharedRef sharedPointer;

		JUCE_DECLARE_NON_COPYABLE (Master);
	};

private:
	SharedRef holder;

	static inline SharedPointer* getRef (ObjectType* const o)
	{
		return (o != nullptr) ? o->masterReference.getSharedPointer (o) : nullptr;
	}
};

#endif   // __JUCE_WEAKREFERENCE_JUCEHEADER__

/*** End of inlined file: juce_WeakReference.h ***/


#endif
#ifndef __JUCE_RESULT_JUCEHEADER__

#endif
#ifndef __JUCE_UUID_JUCEHEADER__

/*** Start of inlined file: juce_Uuid.h ***/
#ifndef __JUCE_UUID_JUCEHEADER__
#define __JUCE_UUID_JUCEHEADER__

/**
	A universally unique 128-bit identifier.

	This class generates very random unique numbers based on the system time
	and MAC addresses if any are available. It's extremely unlikely that two identical
	UUIDs would ever be created by chance.

	The class includes methods for saving the ID as a string or as raw binary data.
*/
class JUCE_API  Uuid
{
public:

	/** Creates a new unique ID. */
	Uuid();

	/** Destructor. */
	~Uuid() noexcept;

	/** Creates a copy of another UUID. */
	Uuid (const Uuid& other);

	/** Copies another UUID. */
	Uuid& operator= (const Uuid& other);

	/** Returns true if the ID is zero. */
	bool isNull() const noexcept;

	/** Compares two UUIDs. */
	bool operator== (const Uuid& other) const;

	/** Compares two UUIDs. */
	bool operator!= (const Uuid& other) const;

	/** Returns a stringified version of this UUID.

		A Uuid object can later be reconstructed from this string using operator= or
		the constructor that takes a string parameter.

		@returns a 32 character hex string.
	*/
	String toString() const;

	/** Creates an ID from an encoded string version.

		@see toString
	*/
	Uuid (const String& uuidString);

	/** Copies from a stringified UUID.

		The string passed in should be one that was created with the toString() method.
	*/
	Uuid& operator= (const String& uuidString);

	/** Returns a pointer to the internal binary representation of the ID.

		This is an array of 16 bytes. To reconstruct a Uuid from its data, use
		the constructor or operator= method that takes an array of uint8s.
	*/
	const uint8* getRawData() const noexcept                { return value.asBytes; }

	/** Creates a UUID from a 16-byte array.

		@see getRawData
	*/
	Uuid (const uint8* rawData);

	/** Sets this UUID from 16-bytes of raw data. */
	Uuid& operator= (const uint8* rawData);

private:

   #ifndef DOXYGEN
	union
	{
		uint8 asBytes [16];
		int asInt[4];
		int64 asInt64[2];

	} value;
   #endif

	JUCE_LEAK_DETECTOR (Uuid);
};

#endif   // __JUCE_UUID_JUCEHEADER__

/*** End of inlined file: juce_Uuid.h ***/


#endif
#ifndef __JUCE_WINDOWSREGISTRY_JUCEHEADER__

/*** Start of inlined file: juce_WindowsRegistry.h ***/
#ifndef __JUCE_WINDOWSREGISTRY_JUCEHEADER__
#define __JUCE_WINDOWSREGISTRY_JUCEHEADER__

#if JUCE_WINDOWS || DOXYGEN

/**
	Contains some static helper functions for manipulating the MS Windows registry
	(Only available on Windows, of course!)
*/
class WindowsRegistry
{
public:

	/** Returns a string from the registry.

		The path is a string for the entire path of a value in the registry,
		e.g. "HKEY_CURRENT_USER\Software\foo\bar"
	*/
	static String getValue (const String& regValuePath,
							const String& defaultValue = String::empty);

	/** Sets a registry value as a string.

		This will take care of creating any groups needed to get to the given
		registry value.
	*/
	static void setValue (const String& regValuePath,
						  const String& value);

	/** Returns true if the given value exists in the registry. */
	static bool valueExists (const String& regValuePath);

	/** Deletes a registry value. */
	static void deleteValue (const String& regValuePath);

	/** Deletes a registry key (which is registry-talk for 'folder'). */
	static void deleteKey (const String& regKeyPath);

	/** Creates a file association in the registry.

		This lets you set the executable that should be launched by a given file extension.
		@param fileExtension        the file extension to associate, including the
									initial dot, e.g. ".txt"
		@param symbolicDescription  a space-free short token to identify the file type
		@param fullDescription      a human-readable description of the file type
		@param targetExecutable     the executable that should be launched
		@param iconResourceNumber   the icon that gets displayed for the file type will be
									found by looking up this resource number in the
									executable. Pass 0 here to not use an icon
	*/
	static void registerFileAssociation (const String& fileExtension,
										 const String& symbolicDescription,
										 const String& fullDescription,
										 const File& targetExecutable,
										 int iconResourceNumber);

private:
	WindowsRegistry();
	JUCE_DECLARE_NON_COPYABLE (WindowsRegistry);
};

#endif
#endif   // __JUCE_WINDOWSREGISTRY_JUCEHEADER__

/*** End of inlined file: juce_WindowsRegistry.h ***/


#endif
#ifndef __JUCE_MACADDRESS_JUCEHEADER__

/*** Start of inlined file: juce_MACAddress.h ***/
#ifndef __JUCE_MACADDRESS_JUCEHEADER__
#define __JUCE_MACADDRESS_JUCEHEADER__

/**
	A wrapper for a streaming (TCP) socket.

	This allows low-level use of sockets; for an easier-to-use messaging layer on top of
	sockets, you could also try the InterprocessConnection class.

	@see DatagramSocket, InterprocessConnection, InterprocessConnectionServer
*/
class JUCE_API  MACAddress
{
public:

	/** Populates a list of the MAC addresses of all the available network cards. */
	static void findAllAddresses (Array<MACAddress>& results);

	/** Creates a null address (00-00-00-00-00-00). */
	MACAddress();

	/** Creates a copy of another address. */
	MACAddress (const MACAddress& other);

	/** Creates a copy of another address. */
	MACAddress& operator= (const MACAddress& other);

	/** Creates an address from 6 bytes. */
	explicit MACAddress (const uint8 bytes[6]);

	/** Returns a pointer to the 6 bytes that make up this address. */
	const uint8* getBytes() const noexcept        { return asBytes; }

	/** Returns a dash-separated string in the form "11-22-33-44-55-66" */
	String toString() const;

	/** Returns the address in the lower 6 bytes of an int64.

		This uses a little-endian arrangement, with the first byte of the address being
		stored in the least-significant byte of the result value.
	*/
	int64 toInt64() const noexcept;

	/** Returns true if this address is null (00-00-00-00-00-00). */
	bool isNull() const noexcept;

	bool operator== (const MACAddress& other) const noexcept;
	bool operator!= (const MACAddress& other) const noexcept;

private:
   #ifndef DOXYGEN
	union
	{
		uint64 asInt64;
		uint8 asBytes[6];
	};
   #endif
};

#endif   // __JUCE_MACADDRESS_JUCEHEADER__

/*** End of inlined file: juce_MACAddress.h ***/


#endif
#ifndef __JUCE_NAMEDPIPE_JUCEHEADER__

/*** Start of inlined file: juce_NamedPipe.h ***/
#ifndef __JUCE_NAMEDPIPE_JUCEHEADER__
#define __JUCE_NAMEDPIPE_JUCEHEADER__

/**
	A cross-process pipe that can have data written to and read from it.

	Two or more processes can use these for inter-process communication.

	@see InterprocessConnection
*/
class JUCE_API  NamedPipe
{
public:

	/** Creates a NamedPipe. */
	NamedPipe();

	/** Destructor. */
	~NamedPipe();

	/** Tries to open a pipe that already exists.

		Returns true if it succeeds.
	*/
	bool openExisting (const String& pipeName);

	/** Tries to create a new pipe.

		Returns true if it succeeds.
	*/
	bool createNewPipe (const String& pipeName);

	/** Closes the pipe, if it's open. */
	void close();

	/** True if the pipe is currently open. */
	bool isOpen() const;

	/** Returns the last name that was used to try to open this pipe. */
	String getName() const;

	/** Reads data from the pipe.

		This will block until another thread has written enough data into the pipe to fill
		the number of bytes specified, or until another thread calls the cancelPendingReads()
		method.

		If the operation fails, it returns -1, otherwise, it will return the number of
		bytes read.

		If timeOutMilliseconds is less than zero, it will wait indefinitely, otherwise
		this is a maximum timeout for reading from the pipe.
	*/
	int read (void* destBuffer, int maxBytesToRead, int timeOutMilliseconds = 5000);

	/** Writes some data to the pipe.

		If the operation fails, it returns -1, otherwise, it will return the number of
		bytes written.
	*/
	int write (const void* sourceBuffer, int numBytesToWrite,
			   int timeOutMilliseconds = 2000);

	/** If any threads are currently blocked on a read operation, this tells them to abort.
	*/
	void cancelPendingReads();

private:

	class Pimpl;
	ScopedPointer<Pimpl> pimpl;
	String currentPipeName;
	CriticalSection lock;

	bool openInternal (const String& pipeName, const bool createPipe);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (NamedPipe);
};

#endif   // __JUCE_NAMEDPIPE_JUCEHEADER__

/*** End of inlined file: juce_NamedPipe.h ***/


#endif
#ifndef __JUCE_SOCKET_JUCEHEADER__

/*** Start of inlined file: juce_Socket.h ***/
#ifndef __JUCE_SOCKET_JUCEHEADER__
#define __JUCE_SOCKET_JUCEHEADER__

/**
	A wrapper for a streaming (TCP) socket.

	This allows low-level use of sockets; for an easier-to-use messaging layer on top of
	sockets, you could also try the InterprocessConnection class.

	@see DatagramSocket, InterprocessConnection, InterprocessConnectionServer
*/
class JUCE_API  StreamingSocket
{
public:

	/** Creates an uninitialised socket.

		To connect it, use the connect() method, after which you can read() or write()
		to it.

		To wait for other sockets to connect to this one, the createListener() method
		enters "listener" mode, and can be used to spawn new sockets for each connection
		that comes along.
	*/
	StreamingSocket();

	/** Destructor. */
	~StreamingSocket();

	/** Binds the socket to the specified local port.

		@returns    true on success; false may indicate that another socket is already bound
					on the same port
	*/
	bool bindToPort (int localPortNumber);

	/** Tries to connect the socket to hostname:port.

		If timeOutMillisecs is 0, then this method will block until the operating system
		rejects the connection (which could take a long time).

		@returns true if it succeeds.
		@see isConnected
	*/
	bool connect (const String& remoteHostname,
				  int remotePortNumber,
				  int timeOutMillisecs = 3000);

	/** True if the socket is currently connected. */
	bool isConnected() const noexcept                           { return connected; }

	/** Closes the connection. */
	void close();

	/** Returns the name of the currently connected host. */
	const String& getHostName() const noexcept                  { return hostName; }

	/** Returns the port number that's currently open. */
	int getPort() const noexcept                                { return portNumber; }

	/** True if the socket is connected to this machine rather than over the network. */
	bool isLocal() const noexcept;

	/** Waits until the socket is ready for reading or writing.

		If readyForReading is true, it will wait until the socket is ready for
		reading; if false, it will wait until it's ready for writing.

		If the timeout is < 0, it will wait forever, or else will give up after
		the specified time.

		If the socket is ready on return, this returns 1. If it times-out before
		the socket becomes ready, it returns 0. If an error occurs, it returns -1.
	*/
	int waitUntilReady (bool readyForReading,
						int timeoutMsecs) const;

	/** Reads bytes from the socket.

		If blockUntilSpecifiedAmountHasArrived is true, the method will block until
		maxBytesToRead bytes have been read, (or until an error occurs). If this
		flag is false, the method will return as much data as is currently available
		without blocking.

		@returns the number of bytes read, or -1 if there was an error.
		@see waitUntilReady
	*/
	int read (void* destBuffer, int maxBytesToRead,
			  bool blockUntilSpecifiedAmountHasArrived);

	/** Writes bytes to the socket from a buffer.

		Note that this method will block unless you have checked the socket is ready
		for writing before calling it (see the waitUntilReady() method).

		@returns the number of bytes written, or -1 if there was an error.
	*/
	int write (const void* sourceBuffer, int numBytesToWrite);

	/** Puts this socket into "listener" mode.

		When in this mode, your thread can call waitForNextConnection() repeatedly,
		which will spawn new sockets for each new connection, so that these can
		be handled in parallel by other threads.

		@param portNumber       the port number to listen on
		@param localHostName    the interface address to listen on - pass an empty
								string to listen on all addresses
		@returns    true if it manages to open the socket successfully.

		@see waitForNextConnection
	*/
	bool createListener (int portNumber, const String& localHostName = String::empty);

	/** When in "listener" mode, this waits for a connection and spawns it as a new
		socket.

		The object that gets returned will be owned by the caller.

		This method can only be called after using createListener().

		@see createListener
	*/
	StreamingSocket* waitForNextConnection() const;

private:

	String hostName;
	int volatile portNumber, handle;
	bool connected, isListener;

	StreamingSocket (const String& hostname, int portNumber, int handle);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (StreamingSocket);
};

/**
	A wrapper for a datagram (UDP) socket.

	This allows low-level use of sockets; for an easier-to-use messaging layer on top of
	sockets, you could also try the InterprocessConnection class.

	@see StreamingSocket, InterprocessConnection, InterprocessConnectionServer
*/
class JUCE_API  DatagramSocket
{
public:

	/**
		Creates an (uninitialised) datagram socket.

		The localPortNumber is the port on which to bind this socket. If this value is 0,
		the port number is assigned by the operating system.

		To use the socket for sending, call the connect() method. This will not immediately
		make a connection, but will save the destination you've provided. After this, you can
		call read() or write().

		If enableBroadcasting is true, the socket will be allowed to send broadcast messages
		(may require extra privileges on linux)

		To wait for other sockets to connect to this one, call waitForNextConnection().
	*/
	DatagramSocket (int localPortNumber,
					bool enableBroadcasting = false);

	/** Destructor. */
	~DatagramSocket();

	/** Binds the socket to the specified local port.

		@returns    true on success; false may indicate that another socket is already bound
					on the same port
	*/
	bool bindToPort (int localPortNumber);

	/** Tries to connect the socket to hostname:port.

		If timeOutMillisecs is 0, then this method will block until the operating system
		rejects the connection (which could take a long time).

		@returns true if it succeeds.
		@see isConnected
	*/
	bool connect (const String& remoteHostname,
				  int remotePortNumber,
				  int timeOutMillisecs = 3000);

	/** True if the socket is currently connected. */
	bool isConnected() const noexcept                           { return connected; }

	/** Closes the connection. */
	void close();

	/** Returns the name of the currently connected host. */
	const String& getHostName() const noexcept                  { return hostName; }

	/** Returns the port number that's currently open. */
	int getPort() const noexcept                                { return portNumber; }

	/** True if the socket is connected to this machine rather than over the network. */
	bool isLocal() const noexcept;

	/** Waits until the socket is ready for reading or writing.

		If readyForReading is true, it will wait until the socket is ready for
		reading; if false, it will wait until it's ready for writing.

		If the timeout is < 0, it will wait forever, or else will give up after
		the specified time.

		If the socket is ready on return, this returns 1. If it times-out before
		the socket becomes ready, it returns 0. If an error occurs, it returns -1.
	*/
	int waitUntilReady (bool readyForReading,
						int timeoutMsecs) const;

	/** Reads bytes from the socket.

		If blockUntilSpecifiedAmountHasArrived is true, the method will block until
		maxBytesToRead bytes have been read, (or until an error occurs). If this
		flag is false, the method will return as much data as is currently available
		without blocking.

		@returns the number of bytes read, or -1 if there was an error.
		@see waitUntilReady
	*/
	int read (void* destBuffer, int maxBytesToRead,
			  bool blockUntilSpecifiedAmountHasArrived);

	/** Writes bytes to the socket from a buffer.

		Note that this method will block unless you have checked the socket is ready
		for writing before calling it (see the waitUntilReady() method).

		@returns the number of bytes written, or -1 if there was an error.
	*/
	int write (const void* sourceBuffer, int numBytesToWrite);

	/** This waits for incoming data to be sent, and returns a socket that can be used
		to read it.

		The object that gets returned is owned by the caller, and can't be used for
		sending, but can be used to read the data.
	*/
	DatagramSocket* waitForNextConnection() const;

private:

	String hostName;
	int volatile portNumber, handle;
	bool connected, allowBroadcast;
	void* serverAddress;

	DatagramSocket (const String& hostname, int portNumber, int handle, int localPortNumber);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (DatagramSocket);
};

#endif   // __JUCE_SOCKET_JUCEHEADER__

/*** End of inlined file: juce_Socket.h ***/


#endif
#ifndef __JUCE_URL_JUCEHEADER__

/*** Start of inlined file: juce_URL.h ***/
#ifndef __JUCE_URL_JUCEHEADER__
#define __JUCE_URL_JUCEHEADER__

class InputStream;
class XmlElement;

/**
	Represents a URL and has a bunch of useful functions to manipulate it.

	This class can be used to launch URLs in browsers, and also to create
	InputStreams that can read from remote http or ftp sources.
*/
class JUCE_API  URL
{
public:

	/** Creates an empty URL. */
	URL();

	/** Creates a URL from a string. */
	URL (const String& url);

	/** Creates a copy of another URL. */
	URL (const URL& other);

	/** Destructor. */
	~URL();

	/** Copies this URL from another one. */
	URL& operator= (const URL& other);

	/** Compares two URLs.
		All aspects of the URLs must be identical for them to match, including any parameters,
		upload files, etc.
	*/
	bool operator== (const URL&) const;
	bool operator!= (const URL&) const;

	/** Returns a string version of the URL.

		If includeGetParameters is true and any parameters have been set with the
		withParameter() method, then the string will have these appended on the
		end and url-encoded.
	*/
	String toString (bool includeGetParameters) const;

	/** True if it seems to be valid. */
	bool isWellFormed() const;

	/** Returns just the domain part of the URL.

		E.g. for "http://www.xyz.com/foobar", this will return "www.xyz.com".
	*/
	String getDomain() const;

	/** Returns the path part of the URL.

		E.g. for "http://www.xyz.com/foo/bar?x=1", this will return "foo/bar".
	*/
	String getSubPath() const;

	/** Returns the scheme of the URL.

		E.g. for "http://www.xyz.com/foobar", this will return "http". (It won't
		include the colon).
	*/
	String getScheme() const;

	/** Attempts to read a port number from the URL.
		@returns the port number, or 0 if none is explicitly specified.
	*/
	int getPort() const;

	/** Returns a new version of this URL that uses a different sub-path.

		E.g. if the URL is "http://www.xyz.com/foo?x=1" and you call this with
		"bar", it'll return "http://www.xyz.com/bar?x=1".
	*/
	URL withNewSubPath (const String& newPath) const;

	/** Returns a new URL that refers to a sub-path relative to this one.

		E.g. if the URL is "http://www.xyz.com/foo" and you call this with
		"bar", it'll return "http://www.xyz.com/foo/bar". Note that there's no way for
		this method to know whether the original URL is a file or directory, so it's
		up to you to make sure it's a directory. It also won't attempt to be smart about
		the content of the childPath string, so if this string is an absolute URL, it'll
		still just get bolted onto the end of the path.

		@see File::getChildFile
	*/
	URL getChildURL (const String& subPath) const;

	/** Returns a copy of this URL, with a GET or POST parameter added to the end.

		Any control characters in the value will be encoded.

		e.g. calling "withParameter ("amount", "some fish") for the url "www.fish.com"
		would produce a new url whose toString(true) method would return
		"www.fish.com?amount=some+fish".

		@see getParameterNames, getParameterValues
	*/
	URL withParameter (const String& parameterName,
					   const String& parameterValue) const;

	/** Returns a copy of this URl, with a file-upload type parameter added to it.

		When performing a POST where one of your parameters is a binary file, this
		lets you specify the file.

		Note that the filename is stored, but the file itself won't actually be read
		until this URL is later used to create a network input stream.
	*/
	URL withFileToUpload (const String& parameterName,
						  const File& fileToUpload,
						  const String& mimeType) const;

	/** Returns an array of the names of all the URL's parameters.

		E.g. for the url "www.fish.com?type=haddock&amount=some+fish", this array would
		contain two items: "type" and "haddock".

		You can call getParameterValues() to get the corresponding value of each
		parameter. Note that the list can contain multiple parameters with the same name.

		@see getParameterValues, withParameter
	*/
	const StringArray& getParameterNames() const noexcept       { return parameterNames; }

	/** Returns an array of the values of all the URL's parameters.

		E.g. for the url "www.fish.com?type=haddock&amount=some+fish", this array would
		contain two items: "haddock" and "some fish".

		The values returned will have been cleaned up to remove any escape characters.

		You can call getParameterNames() to get the corresponding name of each
		parameter. Note that the list can contain multiple parameters with the same name.

		@see getParameterNames, withParameter
	*/
	const StringArray& getParameterValues() const noexcept      { return parameterValues; }

	/** Returns the set of files that should be uploaded as part of a POST operation.

		This is the set of files that were added to the URL with the withFileToUpload()
		method.
	*/
	const StringPairArray& getFilesToUpload() const;

	/** Returns the set of mime types associated with each of the upload files.
	*/
	const StringPairArray& getMimeTypesOfUploadFiles() const;

	/** Returns a copy of this URL, with a block of data to send as the POST data.

		If you're setting the POST data, be careful not to have any parameters set
		as well, otherwise it'll all get thrown in together, and might not have the
		desired effect.

		If the URL already contains some POST data, this will replace it, rather
		than being appended to it.

		This data will only be used if you specify a post operation when you call
		createInputStream().
	*/
	URL withPOSTData (const String& postData) const;

	/** Returns the data that was set using withPOSTData(). */
	const String& getPostData() const noexcept                  { return postData; }

	/** Tries to launch the system's default browser to open the URL.

		Returns true if this seems to have worked.
	*/
	bool launchInDefaultBrowser() const;

	/** Takes a guess as to whether a string might be a valid website address.

		This isn't foolproof!
	*/
	static bool isProbablyAWebsiteURL (const String& possibleURL);

	/** Takes a guess as to whether a string might be a valid email address.

		This isn't foolproof!
	*/
	static bool isProbablyAnEmailAddress (const String& possibleEmailAddress);

	/** This callback function can be used by the createInputStream() method.

		It allows your app to receive progress updates during a lengthy POST operation. If you
		want to continue the operation, this should return true, or false to abort.
	*/
	typedef bool (OpenStreamProgressCallback) (void* context, int bytesSent, int totalBytes);

	/** Attempts to open a stream that can read from this URL.

		@param usePostCommand   if true, it will try to do use a http 'POST' to pass
								the paramters, otherwise it'll encode them into the
								URL and do a 'GET'.
		@param progressCallback if this is non-zero, it lets you supply a callback function
								to keep track of the operation's progress. This can be useful
								for lengthy POST operations, so that you can provide user feedback.
		@param progressCallbackContext  if a callback is specified, this value will be passed to
								the function
		@param extraHeaders     if not empty, this string is appended onto the headers that
								are used for the request. It must therefore be a valid set of HTML
								header directives, separated by newlines.
		@param connectionTimeOutMs  if 0, this will use whatever default setting the OS chooses. If
								a negative number, it will be infinite. Otherwise it specifies a
								time in milliseconds.
		@param responseHeaders  if this is non-zero, all the (key, value) pairs received as headers
								in the response will be stored in this array
		@returns    an input stream that the caller must delete, or a null pointer if there was an
					error trying to open it.
	 */
	InputStream* createInputStream (bool usePostCommand,
									OpenStreamProgressCallback* progressCallback = nullptr,
									void* progressCallbackContext = nullptr,
									const String& extraHeaders = String::empty,
									int connectionTimeOutMs = 0,
									StringPairArray* responseHeaders = nullptr) const;

	/** Tries to download the entire contents of this URL into a binary data block.

		If it succeeds, this will return true and append the data it read onto the end
		of the memory block.

		@param destData         the memory block to append the new data to
		@param usePostCommand   whether to use a POST command to get the data (uses
								a GET command if this is false)
		@see readEntireTextStream, readEntireXmlStream
	*/
	bool readEntireBinaryStream (MemoryBlock& destData,
								 bool usePostCommand = false) const;

	/** Tries to download the entire contents of this URL as a string.

		If it fails, this will return an empty string, otherwise it will return the
		contents of the downloaded file. If you need to distinguish between a read
		operation that fails and one that returns an empty string, you'll need to use
		a different method, such as readEntireBinaryStream().

		@param usePostCommand   whether to use a POST command to get the data (uses
								a GET command if this is false)
		@see readEntireBinaryStream, readEntireXmlStream
	*/
	String readEntireTextStream (bool usePostCommand = false) const;

	/** Tries to download the entire contents of this URL and parse it as XML.

		If it fails, or if the text that it reads can't be parsed as XML, this will
		return 0.

		When it returns a valid XmlElement object, the caller is responsibile for deleting
		this object when no longer needed.

		@param usePostCommand   whether to use a POST command to get the data (uses
								a GET command if this is false)

		@see readEntireBinaryStream, readEntireTextStream
	*/
	XmlElement* readEntireXmlStream (bool usePostCommand = false) const;

	/** Adds escape sequences to a string to encode any characters that aren't
		legal in a URL.

		E.g. any spaces will be replaced with "%20".

		This is the opposite of removeEscapeChars().

		If isParameter is true, it means that the string is going to be used
		as a parameter, so it also encodes '$' and ',' (which would otherwise
		be legal in a URL.

		@see removeEscapeChars
	*/
	static String addEscapeChars (const String& stringToAddEscapeCharsTo,
								  bool isParameter);

	/** Replaces any escape character sequences in a string with their original
		character codes.

		E.g. any instances of "%20" will be replaced by a space.

		This is the opposite of addEscapeChars().

		@see addEscapeChars
	*/
	static String removeEscapeChars (const String& stringToRemoveEscapeCharsFrom);

private:

	String url, postData;
	StringArray parameterNames, parameterValues;
	StringPairArray filesToUpload, mimeTypes;

	void addParameter (const String&, const String&);

	static InputStream* createNativeStream (const String& address, bool isPost, const MemoryBlock& postData,
											OpenStreamProgressCallback* progressCallback,
											void* progressCallbackContext, const String& headers,
											const int timeOutMs, StringPairArray* responseHeaders);
	JUCE_LEAK_DETECTOR (URL);
};

#endif   // __JUCE_URL_JUCEHEADER__

/*** End of inlined file: juce_URL.h ***/


#endif
#ifndef __JUCE_BUFFEREDINPUTSTREAM_JUCEHEADER__

/*** Start of inlined file: juce_BufferedInputStream.h ***/
#ifndef __JUCE_BUFFEREDINPUTSTREAM_JUCEHEADER__
#define __JUCE_BUFFEREDINPUTSTREAM_JUCEHEADER__

/** Wraps another input stream, and reads from it using an intermediate buffer

	If you're using an input stream such as a file input stream, and making lots of
	small read accesses to it, it's probably sensible to wrap it in one of these,
	so that the source stream gets accessed in larger chunk sizes, meaning less
	work for the underlying stream.
*/
class JUCE_API  BufferedInputStream  : public InputStream
{
public:

	/** Creates a BufferedInputStream from an input source.

		@param sourceStream                 the source stream to read from
		@param bufferSize                   the size of reservoir to use to buffer the source
		@param deleteSourceWhenDestroyed    whether the sourceStream that is passed in should be
											deleted by this object when it is itself deleted.
	*/
	BufferedInputStream (InputStream* sourceStream,
						 int bufferSize,
						 bool deleteSourceWhenDestroyed);

	/** Creates a BufferedInputStream from an input source.

		@param sourceStream     the source stream to read from - the source stream  must not
								be deleted until this object has been destroyed.
		@param bufferSize       the size of reservoir to use to buffer the source
	*/
	BufferedInputStream (InputStream& sourceStream, int bufferSize);

	/** Destructor.

		This may also delete the source stream, if that option was chosen when the
		buffered stream was created.
	*/
	~BufferedInputStream();

	int64 getTotalLength();
	int64 getPosition();
	bool setPosition (int64 newPosition);
	int read (void* destBuffer, int maxBytesToRead);
	String readString();
	bool isExhausted();

private:

	OptionalScopedPointer<InputStream> source;
	int bufferSize;
	int64 position, lastReadPos, bufferStart, bufferOverlap;
	HeapBlock <char> buffer;
	void ensureBuffered();

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (BufferedInputStream);
};

#endif   // __JUCE_BUFFEREDINPUTSTREAM_JUCEHEADER__

/*** End of inlined file: juce_BufferedInputStream.h ***/


#endif
#ifndef __JUCE_FILEINPUTSOURCE_JUCEHEADER__

/*** Start of inlined file: juce_FileInputSource.h ***/
#ifndef __JUCE_FILEINPUTSOURCE_JUCEHEADER__
#define __JUCE_FILEINPUTSOURCE_JUCEHEADER__


/*** Start of inlined file: juce_InputSource.h ***/
#ifndef __JUCE_INPUTSOURCE_JUCEHEADER__
#define __JUCE_INPUTSOURCE_JUCEHEADER__

/**
	A lightweight object that can create a stream to read some kind of resource.

	This may be used to refer to a file, or some other kind of source, allowing a
	caller to create an input stream that can read from it when required.

	@see FileInputSource
*/
class JUCE_API  InputSource
{
public:

	InputSource() noexcept      {}

	/** Destructor. */
	virtual ~InputSource()      {}

	/** Returns a new InputStream to read this item.

		@returns            an inputstream that the caller will delete, or 0 if
							the filename isn't found.
	*/
	virtual InputStream* createInputStream() = 0;

	/** Returns a new InputStream to read an item, relative.

		@param relatedItemPath  the relative pathname of the resource that is required
		@returns            an inputstream that the caller will delete, or 0 if
							the item isn't found.
	*/
	virtual InputStream* createInputStreamFor (const String& relatedItemPath) = 0;

	/** Returns a hash code that uniquely represents this item.
	*/
	virtual int64 hashCode() const = 0;

private:

	JUCE_LEAK_DETECTOR (InputSource);
};

#endif   // __JUCE_INPUTSOURCE_JUCEHEADER__

/*** End of inlined file: juce_InputSource.h ***/

/**
	A type of InputSource that represents a normal file.

	@see InputSource
*/
class JUCE_API  FileInputSource     : public InputSource
{
public:

	FileInputSource (const File& file, bool useFileTimeInHashGeneration = false);
	~FileInputSource();

	InputStream* createInputStream();
	InputStream* createInputStreamFor (const String& relatedItemPath);
	int64 hashCode() const;

private:

	const File file;
	bool useFileTimeInHashGeneration;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FileInputSource);
};

#endif   // __JUCE_FILEINPUTSOURCE_JUCEHEADER__

/*** End of inlined file: juce_FileInputSource.h ***/


#endif
#ifndef __JUCE_INPUTSOURCE_JUCEHEADER__

#endif
#ifndef __JUCE_INPUTSTREAM_JUCEHEADER__

#endif
#ifndef __JUCE_MEMORYINPUTSTREAM_JUCEHEADER__

/*** Start of inlined file: juce_MemoryInputStream.h ***/
#ifndef __JUCE_MEMORYINPUTSTREAM_JUCEHEADER__
#define __JUCE_MEMORYINPUTSTREAM_JUCEHEADER__

/**
	Allows a block of data and to be accessed as a stream.

	This can either be used to refer to a shared block of memory, or can make its
	own internal copy of the data when the MemoryInputStream is created.
*/
class JUCE_API  MemoryInputStream  : public InputStream
{
public:

	/** Creates a MemoryInputStream.

		@param sourceData               the block of data to use as the stream's source
		@param sourceDataSize           the number of bytes in the source data block
		@param keepInternalCopyOfData   if false, the stream will just keep a pointer to
										the source data, so this data shouldn't be changed
										for the lifetime of the stream; if this parameter is
										true, the stream will make its own copy of the
										data and use that.
	*/
	MemoryInputStream (const void* sourceData,
					   size_t sourceDataSize,
					   bool keepInternalCopyOfData);

	/** Creates a MemoryInputStream.

		@param data                     a block of data to use as the stream's source
		@param keepInternalCopyOfData   if false, the stream will just keep a reference to
										the source data, so this data shouldn't be changed
										for the lifetime of the stream; if this parameter is
										true, the stream will make its own copy of the
										data and use that.
	*/
	MemoryInputStream (const MemoryBlock& data,
					   bool keepInternalCopyOfData);

	/** Destructor. */
	~MemoryInputStream();

	int64 getPosition();
	bool setPosition (int64 pos);
	int64 getTotalLength();
	bool isExhausted();
	int read (void* destBuffer, int maxBytesToRead);

private:

	const char* data;
	size_t dataSize, position;
	HeapBlock<char> internalCopy;

	void createInternalCopy();

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MemoryInputStream);
};

#endif   // __JUCE_MEMORYINPUTSTREAM_JUCEHEADER__

/*** End of inlined file: juce_MemoryInputStream.h ***/


#endif
#ifndef __JUCE_MEMORYOUTPUTSTREAM_JUCEHEADER__

/*** Start of inlined file: juce_MemoryOutputStream.h ***/
#ifndef __JUCE_MEMORYOUTPUTSTREAM_JUCEHEADER__
#define __JUCE_MEMORYOUTPUTSTREAM_JUCEHEADER__

/**
	Writes data to an internal memory buffer, which grows as required.

	The data that was written into the stream can then be accessed later as
	a contiguous block of memory.
*/
class JUCE_API  MemoryOutputStream  : public OutputStream
{
public:

	/** Creates an empty memory stream ready for writing into.

		@param initialSize  the intial amount of capacity to allocate for writing into
	*/
	MemoryOutputStream (size_t initialSize = 256);

	/** Creates a memory stream for writing into into a pre-existing MemoryBlock object.

		Note that the destination block will always be larger than the amount of data
		that has been written to the stream, because the MemoryOutputStream keeps some
		spare capactity at its end. To trim the block's size down to fit the actual
		data, call flush(), or delete the MemoryOutputStream.

		@param memoryBlockToWriteTo             the block into which new data will be written.
		@param appendToExistingBlockContent     if this is true, the contents of the block will be
												kept, and new data will be appended to it. If false,
												the block will be cleared before use
	*/
	MemoryOutputStream (MemoryBlock& memoryBlockToWriteTo,
						bool appendToExistingBlockContent);

	/** Destructor.
		This will free any data that was written to it.
	*/
	~MemoryOutputStream();

	/** Returns a pointer to the data that has been written to the stream.

		@see getDataSize
	*/
	const void* getData() const noexcept;

	/** Returns the number of bytes of data that have been written to the stream.

		@see getData
	*/
	size_t getDataSize() const noexcept                 { return size; }

	/** Resets the stream, clearing any data that has been written to it so far. */
	void reset() noexcept;

	/** Increases the internal storage capacity to be able to contain at least the specified
		amount of data without needing to be resized.
	*/
	void preallocate (size_t bytesToPreallocate);

	/** Returns a String created from the (UTF8) data that has been written to the stream. */
	String toUTF8() const;

	/** Attempts to detect the encoding of the data and convert it to a string.
		@see String::createStringFromData
	*/
	String toString() const;

	/** Returns a copy of the stream's data as a memory block. */
	MemoryBlock getMemoryBlock() const;

	/** If the stream is writing to a user-supplied MemoryBlock, this will trim any excess
		capacity off the block, so that its length matches the amount of actual data that
		has been written so far.
	*/
	void flush();

	bool write (const void* buffer, int howMany);
	int64 getPosition()                                 { return position; }
	bool setPosition (int64 newPosition);
	int writeFromInputStream (InputStream& source, int64 maxNumBytesToWrite);
	void writeRepeatedByte (uint8 byte, int numTimesToRepeat);

private:

	MemoryBlock& data;
	MemoryBlock internalBlock;
	size_t position, size;

	void trimExternalBlockSize();
	void prepareToWrite (int numBytes);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MemoryOutputStream);
};

/** Copies all the data that has been written to a MemoryOutputStream into another stream. */
OutputStream& JUCE_CALLTYPE operator<< (OutputStream& stream, const MemoryOutputStream& streamToRead);

#endif   // __JUCE_MEMORYOUTPUTSTREAM_JUCEHEADER__

/*** End of inlined file: juce_MemoryOutputStream.h ***/


#endif
#ifndef __JUCE_OUTPUTSTREAM_JUCEHEADER__

#endif
#ifndef __JUCE_SUBREGIONSTREAM_JUCEHEADER__

/*** Start of inlined file: juce_SubregionStream.h ***/
#ifndef __JUCE_SUBREGIONSTREAM_JUCEHEADER__
#define __JUCE_SUBREGIONSTREAM_JUCEHEADER__

/** Wraps another input stream, and reads from a specific part of it.

	This lets you take a subsection of a stream and present it as an entire
	stream in its own right.
*/
class JUCE_API  SubregionStream  : public InputStream
{
public:

	/** Creates a SubregionStream from an input source.

		@param sourceStream                 the source stream to read from
		@param startPositionInSourceStream  this is the position in the source stream that
											corresponds to position 0 in this stream
		@param lengthOfSourceStream         this specifies the maximum number of bytes
											from the source stream that will be passed through
											by this stream. When the position of this stream
											exceeds lengthOfSourceStream, it will cause an end-of-stream.
											If the length passed in here is greater than the length
											of the source stream (as returned by getTotalLength()),
											then the smaller value will be used.
											Passing a negative value for this parameter means it
											will keep reading until the source's end-of-stream.
		@param deleteSourceWhenDestroyed    whether the sourceStream that is passed in should be
											deleted by this object when it is itself deleted.
	*/
	SubregionStream (InputStream* sourceStream,
					 int64 startPositionInSourceStream,
					 int64 lengthOfSourceStream,
					 bool deleteSourceWhenDestroyed);

	/** Destructor.

		This may also delete the source stream, if that option was chosen when the
		buffered stream was created.
	*/
	~SubregionStream();

	int64 getTotalLength();
	int64 getPosition();
	bool setPosition (int64 newPosition);
	int read (void* destBuffer, int maxBytesToRead);
	bool isExhausted();

private:
	OptionalScopedPointer<InputStream> source;
	const int64 startPositionInSourceStream, lengthOfSourceStream;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SubregionStream);
};

#endif   // __JUCE_SUBREGIONSTREAM_JUCEHEADER__

/*** End of inlined file: juce_SubregionStream.h ***/


#endif
#ifndef __JUCE_PLATFORMDEFS_JUCEHEADER__

#endif
#ifndef __JUCE_STANDARDHEADER_JUCEHEADER__

#endif
#ifndef __JUCE_SYSTEMSTATS_JUCEHEADER__

/*** Start of inlined file: juce_SystemStats.h ***/
#ifndef __JUCE_SYSTEMSTATS_JUCEHEADER__
#define __JUCE_SYSTEMSTATS_JUCEHEADER__

/**
	Contains methods for finding out about the current hardware and OS configuration.
*/
class JUCE_API  SystemStats
{
public:

	/** Returns the current version of JUCE,

		See also the JUCE_VERSION, JUCE_MAJOR_VERSION and JUCE_MINOR_VERSION macros.
	*/
	static String getJUCEVersion();

	/** The set of possible results of the getOperatingSystemType() method.
	*/
	enum OperatingSystemType
	{
		UnknownOS   = 0,

		MacOSX      = 0x1000,
		Linux       = 0x2000,
		Android     = 0x3000,

		Win95       = 0x4001,
		Win98       = 0x4002,
		WinNT351    = 0x4103,
		WinNT40     = 0x4104,
		Win2000     = 0x4105,
		WinXP       = 0x4106,
		WinVista    = 0x4107,
		Windows7    = 0x4108,

		Windows     = 0x4000,   /**< To test whether any version of Windows is running,
									 you can use the expression ((getOperatingSystemType() & Windows) != 0). */
		WindowsNT   = 0x0100,   /**< To test whether the platform is Windows NT or later (i.e. not Win95 or 98),
									 you can use the expression ((getOperatingSystemType() & WindowsNT) != 0). */
	};

	/** Returns the type of operating system we're running on.

		@returns one of the values from the OperatingSystemType enum.
		@see getOperatingSystemName
	*/
	static OperatingSystemType getOperatingSystemType();

	/** Returns the name of the type of operating system we're running on.

		@returns a string describing the OS type.
		@see getOperatingSystemType
	*/
	static String getOperatingSystemName();

	/** Returns true if the OS is 64-bit, or false for a 32-bit OS.
	*/
	static bool isOperatingSystem64Bit();

   #if JUCE_MAC || DOXYGEN
	/** OSX ONLY - Returns the current OS version number.
		E.g. if it's running on 10.4, this will be 4, 10.5 will return 5, etc.
	*/
	static int getOSXMinorVersionNumber();
   #endif

	/** Returns the current user's name, if available.
		@see getFullUserName()
	*/
	static String getLogonName();

	/** Returns the current user's full name, if available.
		On some OSes, this may just return the same value as getLogonName().
		@see getLogonName()
	*/
	static String getFullUserName();

	/** Returns the host-name of the computer. */
	static String getComputerName();

	// CPU and memory information..

	/** Returns the approximate CPU speed.

		@returns    the speed in megahertz, e.g. 1500, 2500, 32000 (depending on
					what year you're reading this...)
	*/
	static int getCpuSpeedInMegaherz();

	/** Returns a string to indicate the CPU vendor.

		Might not be known on some systems.
	*/
	static String getCpuVendor();

	/** Checks whether Intel MMX instructions are available. */
	static bool hasMMX() noexcept               { return getCPUFlags().hasMMX; }

	/** Checks whether Intel SSE instructions are available. */
	static bool hasSSE() noexcept               { return getCPUFlags().hasSSE; }

	/** Checks whether Intel SSE2 instructions are available. */
	static bool hasSSE2() noexcept              { return getCPUFlags().hasSSE2; }

	/** Checks whether AMD 3DNOW instructions are available. */
	static bool has3DNow() noexcept             { return getCPUFlags().has3DNow; }

	/** Returns the number of CPUs. */
	static int getNumCpus() noexcept            { return getCPUFlags().numCpus; }

	/** Finds out how much RAM is in the machine.

		@returns    the approximate number of megabytes of memory, or zero if
					something goes wrong when finding out.
	*/
	static int getMemorySizeInMegabytes();

	/** Returns the system page-size.

		This is only used by programmers with beards.
	*/
	static int getPageSize();

private:

	struct CPUFlags
	{
		CPUFlags();

		int numCpus;
		bool hasMMX : 1;
		bool hasSSE : 1;
		bool hasSSE2 : 1;
		bool has3DNow : 1;
	};

	SystemStats();
	static const CPUFlags& getCPUFlags();

	JUCE_DECLARE_NON_COPYABLE (SystemStats);
};

#endif   // __JUCE_SYSTEMSTATS_JUCEHEADER__

/*** End of inlined file: juce_SystemStats.h ***/


#endif
#ifndef __JUCE_TARGETPLATFORM_JUCEHEADER__

#endif
#ifndef __JUCE_CHARACTERFUNCTIONS_JUCEHEADER__

#endif
#ifndef __JUCE_CHARPOINTER_ASCII_JUCEHEADER__

#endif
#ifndef __JUCE_CHARPOINTER_UTF16_JUCEHEADER__

#endif
#ifndef __JUCE_CHARPOINTER_UTF32_JUCEHEADER__

#endif
#ifndef __JUCE_CHARPOINTER_UTF8_JUCEHEADER__

#endif
#ifndef __JUCE_IDENTIFIER_JUCEHEADER__

#endif
#ifndef __JUCE_LOCALISEDSTRINGS_JUCEHEADER__

/*** Start of inlined file: juce_LocalisedStrings.h ***/
#ifndef __JUCE_LOCALISEDSTRINGS_JUCEHEADER__
#define __JUCE_LOCALISEDSTRINGS_JUCEHEADER__

/**
	Used to convert strings to localised foreign-language versions.

	This is basically a look-up table of strings and their translated equivalents.
	It can be loaded from a text file, so that you can supply a set of localised
	versions of strings that you use in your app.

	To use it in your code, simply call the translate() method on each string that
	might have foreign versions, and if none is found, the method will just return
	the original string.

	The translation file should start with some lines specifying a description of
	the language it contains, and also a list of ISO country codes where it might
	be appropriate to use the file. After that, each line of the file should contain
	a pair of quoted strings with an '=' sign.

	E.g. for a french translation, the file might be:

	@code
	language: French
	countries: fr be mc ch lu

	"hello" = "bonjour"
	"goodbye" = "au revoir"
	@endcode

	If the strings need to contain a quote character, they can use '\"' instead, and
	if the first non-whitespace character on a line isn't a quote, then it's ignored,
	(you can use this to add comments).

	Note that this is a singleton class, so don't create or destroy the object directly.
	There's also a TRANS(text) macro defined to make it easy to use the this.

	E.g. @code
	printSomething (TRANS("hello"));
	@endcode

	This macro is used in the Juce classes themselves, so your application has a chance to
	intercept and translate any internal Juce text strings that might be shown. (You can easily
	get a list of all the messages by searching for the TRANS() macro in the Juce source
	code).
*/
class JUCE_API  LocalisedStrings
{
public:

	/** Creates a set of translations from the text of a translation file.

		When you create one of these, you can call setCurrentMappings() to make it
		the set of mappings that the system's using.
	*/
	LocalisedStrings (const String& fileContents);

	/** Creates a set of translations from a file.

		When you create one of these, you can call setCurrentMappings() to make it
		the set of mappings that the system's using.
	*/
	LocalisedStrings (const File& fileToLoad);

	/** Destructor. */
	~LocalisedStrings();

	/** Selects the current set of mappings to be used by the system.

		The object you pass in will be automatically deleted when no longer needed, so
		don't keep a pointer to it. You can also pass in zero to remove the current
		mappings.

		See also the TRANS() macro, which uses the current set to do its translation.

		@see translateWithCurrentMappings
	*/
	static void setCurrentMappings (LocalisedStrings* newTranslations);

	/** Returns the currently selected set of mappings.

		This is the object that was last passed to setCurrentMappings(). It may
		be 0 if none has been created.
	*/
	static LocalisedStrings* getCurrentMappings();

	/** Tries to translate a string using the currently selected set of mappings.

		If no mapping has been set, or if the mapping doesn't contain a translation
		for the string, this will just return the original string.

		See also the TRANS() macro, which uses this method to do its translation.

		@see setCurrentMappings, getCurrentMappings
	*/
	static String translateWithCurrentMappings (const String& text);

	/** Tries to translate a string using the currently selected set of mappings.

		If no mapping has been set, or if the mapping doesn't contain a translation
		for the string, this will just return the original string.

		See also the TRANS() macro, which uses this method to do its translation.

		@see setCurrentMappings, getCurrentMappings
	*/
	static String translateWithCurrentMappings (const char* text);

	/** Attempts to look up a string and return its localised version.
		If the string isn't found in the list, the original string will be returned.
	*/
	String translate (const String& text) const;

	/** Attempts to look up a string and return its localised version.
		If the string isn't found in the list, the resultIfNotFound string will be returned.
	*/
	String translate (const String& text, const String& resultIfNotFound) const;

	/** Returns the name of the language specified in the translation file.

		This is specified in the file using a line starting with "language:", e.g.
		@code
		language: german
		@endcode
	*/
	String getLanguageName() const                        { return languageName; }

	/** Returns the list of suitable country codes listed in the translation file.

		These is specified in the file using a line starting with "countries:", e.g.
		@code
		countries: fr be mc ch lu
		@endcode

		The country codes are supposed to be 2-character ISO complient codes.
	*/
	const StringArray& getCountryCodes() const            { return countryCodes; }

	/** Indicates whether to use a case-insensitive search when looking up a string.
		This defaults to true.
	*/
	void setIgnoresCase (bool shouldIgnoreCase);

private:

	String languageName;
	StringArray countryCodes;
	StringPairArray translations;

	void loadFromText (const String& fileContents);

	JUCE_LEAK_DETECTOR (LocalisedStrings);
};

#ifndef TRANS
 /** Uses the LocalisedStrings class to translate the given string literal.
	 This macro is provided for backwards-compatibility, and just calls the translate()
	 function. In new code, it's recommended that you just call translate() directly
	 instead, and avoid using macros.
	 @see translate(), LocalisedStrings
 */
 #define TRANS(stringLiteral) juce::translate (stringLiteral)
#endif

/** Uses the LocalisedStrings class to translate the given string literal.
	@see LocalisedStrings
*/
String translate (const String& stringLiteral);

/** Uses the LocalisedStrings class to translate the given string literal.
	@see LocalisedStrings
*/
String translate (const char* stringLiteral);

/** Uses the LocalisedStrings class to translate the given string literal.
	@see LocalisedStrings
*/
String translate (const String& stringLiteral, const String& resultIfNotFound);

#endif   // __JUCE_LOCALISEDSTRINGS_JUCEHEADER__

/*** End of inlined file: juce_LocalisedStrings.h ***/


#endif
#ifndef __JUCE_NEWLINE_JUCEHEADER__

#endif
#ifndef __JUCE_STRING_JUCEHEADER__

#endif
#ifndef __JUCE_STRINGARRAY_JUCEHEADER__

#endif
#ifndef __JUCE_STRINGPAIRARRAY_JUCEHEADER__

#endif
#ifndef __JUCE_STRINGPOOL_JUCEHEADER__

/*** Start of inlined file: juce_StringPool.h ***/
#ifndef __JUCE_STRINGPOOL_JUCEHEADER__
#define __JUCE_STRINGPOOL_JUCEHEADER__

/**
	A StringPool holds a set of shared strings, which reduces storage overheads and improves
	comparison speed when dealing with many duplicate strings.

	When you add a string to a pool using getPooledString, it'll return a character
	array containing the same string. This array is owned by the pool, and the same array
	is returned every time a matching string is asked for. This means that it's trivial to
	compare two pooled strings for equality, as you can simply compare their pointers. It
	also cuts down on storage if you're using many copies of the same string.
*/
class JUCE_API  StringPool
{
public:

	/** Creates an empty pool. */
	StringPool() noexcept;

	/** Destructor */
	~StringPool();

	/** Returns a pointer to a copy of the string that is passed in.

		The pool will always return the same pointer when asked for a string that matches it.
		The pool will own all the pointers that it returns, deleting them when the pool itself
		is deleted.
	*/
	String::CharPointerType getPooledString (const String& original);

	/** Returns a pointer to a copy of the string that is passed in.

		The pool will always return the same pointer when asked for a string that matches it.
		The pool will own all the pointers that it returns, deleting them when the pool itself
		is deleted.
	*/
	String::CharPointerType getPooledString (const char* original);

	/** Returns a pointer to a copy of the string that is passed in.

		The pool will always return the same pointer when asked for a string that matches it.
		The pool will own all the pointers that it returns, deleting them when the pool itself
		is deleted.
	*/
	String::CharPointerType getPooledString (const wchar_t* original);

	/** Returns the number of strings in the pool. */
	int size() const noexcept;

	/** Returns one of the strings in the pool, by index. */
	String::CharPointerType operator[] (int index) const noexcept;

private:
	Array <String> strings;
	CriticalSection lock;
};

#endif   // __JUCE_STRINGPOOL_JUCEHEADER__

/*** End of inlined file: juce_StringPool.h ***/


#endif
#ifndef __JUCE_CHILDPROCESS_JUCEHEADER__

/*** Start of inlined file: juce_ChildProcess.h ***/
#ifndef __JUCE_CHILDPROCESS_JUCEHEADER__
#define __JUCE_CHILDPROCESS_JUCEHEADER__

/**
	Launches and monitors a child process.

	This class lets you launch an executable, and read its output. You can also
	use it to check whether the child process has finished.
*/
class JUCE_API  ChildProcess
{
public:

	/** Creates a process object.
		To actually launch the process, use start().
	*/
	ChildProcess();

	/** Destructor.
		Note that deleting this object won't terminate the child process.
	*/
	~ChildProcess();

	/** Attempts to launch a child process command.

		The command should be the name of the executable file, followed by any arguments
		that are required.
		If the process has already been launched, this will launch it again. If a problem
		occurs, the method will return false.
	*/
	bool start (const String& command);

	/** Returns true if the child process is alive. */
	bool isRunning() const;

	/** Attempts to read some output from the child process.
		This will attempt to read up to the given number of bytes of data from the
		process. It returns the number of bytes that were actually read.
	*/
	int readProcessOutput (void* destBuffer, int numBytesToRead);

	/** Blocks until the process has finished, and then returns its complete output
		as a string.
	*/
	String readAllProcessOutput();

	/** Blocks until the process is no longer running. */
	bool waitForProcessToFinish (int timeoutMs) const;

	/** Attempts to kill the child process.
		Returns true if it succeeded. Trying to read from the process after calling this may
		result in undefined behaviour.
	*/
	bool kill();

private:

	class ActiveProcess;
	friend class ScopedPointer<ActiveProcess>;
	ScopedPointer<ActiveProcess> activeProcess;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ChildProcess);
};

#endif   // __JUCE_CHILDPROCESS_JUCEHEADER__

/*** End of inlined file: juce_ChildProcess.h ***/


#endif
#ifndef __JUCE_CRITICALSECTION_JUCEHEADER__

#endif
#ifndef __JUCE_DYNAMICLIBRARY_JUCEHEADER__

/*** Start of inlined file: juce_DynamicLibrary.h ***/
#ifndef __JUCE_DYNAMICLIBRARY_JUCEHEADER__
#define __JUCE_DYNAMICLIBRARY_JUCEHEADER__

/**
	Handles the opening and closing of DLLs.

	This class can be used to open a DLL and get some function pointers from it.
	Since the DLL is freed when this object is deleted, it's handy for managing
	library lifetimes using RAII.
*/
class JUCE_API  DynamicLibrary
{
public:
	/** Creates an unopened DynamicLibrary object.
		Call open() to actually open one.
	*/
	DynamicLibrary() noexcept : handle (nullptr) {}

	/**
	*/
	DynamicLibrary (const String& name) : handle (nullptr) { open (name); }

	/** Destructor.
		If a library is currently open, it will be closed when this object is destroyed.
	*/
	~DynamicLibrary()   { close(); }

	/** Opens a DLL.
		The name and the method by which it gets found is of course platform-specific, and
		may or may not include a path, depending on the OS.
		If a library is already open when this method is called, it will first close the library
		before attempting to load the new one.
		@returns true if the library was successfully found and opened.
	*/
	bool open (const String& name);

	/** Releases the currently-open DLL, or has no effect if none was open. */
	void close();

	/** Tries to find a named function in the currently-open DLL, and returns a pointer to it.
		If no library is open, or if the function isn't found, this will return a null pointer.
	*/
	void* getFunction (const String& functionName) noexcept;

	/** Returns the platform-specific native library handle.
		You'll need to cast this to whatever is appropriate for the OS that's in use.
	*/
	void* getNativeHandle() const noexcept     { return handle; }

private:
	void* handle;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (DynamicLibrary);
};

#endif   // __JUCE_DYNAMICLIBRARY_JUCEHEADER__

/*** End of inlined file: juce_DynamicLibrary.h ***/


#endif
#ifndef __JUCE_INTERPROCESSLOCK_JUCEHEADER__

/*** Start of inlined file: juce_InterProcessLock.h ***/
#ifndef __JUCE_INTERPROCESSLOCK_JUCEHEADER__
#define __JUCE_INTERPROCESSLOCK_JUCEHEADER__

/**
	Acts as a critical section which processes can use to block each other.

	@see CriticalSection
*/
class JUCE_API  InterProcessLock
{
public:

	/** Creates a lock object.

		@param name     a name that processes will use to identify this lock object
	*/
	explicit InterProcessLock (const String& name);

	/** Destructor.

		This will also release the lock if it's currently held by this process.
	*/
	~InterProcessLock();

	/** Attempts to lock the critical section.

		@param timeOutMillisecs     how many milliseconds to wait if the lock
									is already held by another process - a value of
									0 will return immediately, negative values will wait
									forever
		@returns    true if the lock could be gained within the timeout period, or
					false if the timeout expired.
	*/
	bool enter (int timeOutMillisecs = -1);

	/** Releases the lock if it's currently held by this process.
	*/
	void exit();

	/**
		Automatically locks and unlocks an InterProcessLock object.

		This works like a ScopedLock, but using an InterprocessLock rather than
		a CriticalSection.

		@see ScopedLock
	*/
	class ScopedLockType
	{
	public:

		/** Creates a scoped lock.

			As soon as it is created, this will lock the InterProcessLock, and
			when the ScopedLockType object is deleted, the InterProcessLock will
			be unlocked.

			Note that since an InterprocessLock can fail due to errors, you should check
			isLocked() to make sure that the lock was successful before using it.

			Make sure this object is created and deleted by the same thread,
			otherwise there are no guarantees what will happen! Best just to use it
			as a local stack object, rather than creating one with the new() operator.
		*/
		explicit ScopedLockType (InterProcessLock& lock)                    : lock_ (lock) { lockWasSuccessful = lock.enter(); }

		/** Destructor.

			The InterProcessLock will be unlocked when the destructor is called.

			Make sure this object is created and deleted by the same thread,
			otherwise there are no guarantees what will happen!
		*/
		inline ~ScopedLockType()                                            { lock_.exit(); }

		/** Returns true if the InterProcessLock was successfully locked. */
		bool isLocked() const noexcept                                      { return lockWasSuccessful; }

	private:

		InterProcessLock& lock_;
		bool lockWasSuccessful;

		JUCE_DECLARE_NON_COPYABLE (ScopedLockType);
	};

private:

	class Pimpl;
	friend class ScopedPointer <Pimpl>;
	ScopedPointer <Pimpl> pimpl;

	CriticalSection lock;
	String name;

	JUCE_DECLARE_NON_COPYABLE (InterProcessLock);
};

#endif   // __JUCE_INTERPROCESSLOCK_JUCEHEADER__

/*** End of inlined file: juce_InterProcessLock.h ***/


#endif
#ifndef __JUCE_PROCESS_JUCEHEADER__

/*** Start of inlined file: juce_Process.h ***/
#ifndef __JUCE_PROCESS_JUCEHEADER__
#define __JUCE_PROCESS_JUCEHEADER__

/** Represents the current executable's process.

	This contains methods for controlling the current application at the
	process-level.

	@see Thread, JUCEApplication
*/
class JUCE_API  Process
{
public:

	enum ProcessPriority
	{
		LowPriority         = 0,
		NormalPriority      = 1,
		HighPriority        = 2,
		RealtimePriority    = 3
	};

	/** Changes the current process's priority.

		@param priority     the process priority, where
							0=low, 1=normal, 2=high, 3=realtime
	*/
	static void setPriority (const ProcessPriority priority);

	/** Kills the current process immediately.

		This is an emergency process terminator that kills the application
		immediately - it's intended only for use only when something goes
		horribly wrong.

		@see JUCEApplication::quit
	*/
	static void terminate();

	/** Returns true if this application process is the one that the user is
		currently using.
	*/
	static bool isForegroundProcess();

	/** Raises the current process's privilege level.

		Does nothing if this isn't supported by the current OS, or if process
		privilege level is fixed.
	*/
	static void raisePrivilege();

	/** Lowers the current process's privilege level.

		Does nothing if this isn't supported by the current OS, or if process
		privilege level is fixed.
	*/
	static void lowerPrivilege();

	/** Returns true if this process is being hosted by a debugger.
	*/
	static bool JUCE_CALLTYPE isRunningUnderDebugger();

	/** Tries to launch the OS's default reader application for a given file or URL. */
	static bool openDocument (const String& documentURL, const String& parameters);

	/** Tries to launch the OS's default email application to let the user create a message. */
	static bool openEmailWithAttachments (const String& targetEmailAddress,
										  const String& emailSubject,
										  const String& bodyText,
										  const StringArray& filesToAttach);

   #if JUCE_WINDOWS || DOXYGEN

	/** WINDOWS ONLY - This returns the HINSTANCE of the current module.

		The return type is a void* to avoid being dependent on windows.h - just cast
		it to a HINSTANCE to use it.

		In a normal JUCE application, this will be automatically set to the module
		handle of the executable.

		If you've built a DLL and plan to use any JUCE messaging or windowing classes,
		you'll need to make sure you call the setCurrentModuleInstanceHandle()
		to provide the correct module handle in your DllMain() function, because
		the system relies on the correct instance handle when opening windows.
	*/
	static void* JUCE_CALLTYPE getCurrentModuleInstanceHandle() noexcept;

	/** WINDOWS ONLY - Sets a new module handle to be used by the library.

		The parameter type is a void* to avoid being dependent on windows.h, but it actually
		expects a HINSTANCE value.

		@see getCurrentModuleInstanceHandle()
	*/
	static void JUCE_CALLTYPE setCurrentModuleInstanceHandle (void* newHandle) noexcept;

	/** WINDOWS ONLY - Gets the command-line params as a string.
		This is needed to avoid unicode problems with the argc type params.
	*/
	static String JUCE_CALLTYPE getCurrentCommandLineParams();
   #endif

private:
	Process();
	JUCE_DECLARE_NON_COPYABLE (Process);
};

#endif   // __JUCE_PROCESS_JUCEHEADER__

/*** End of inlined file: juce_Process.h ***/


#endif
#ifndef __JUCE_READWRITELOCK_JUCEHEADER__

/*** Start of inlined file: juce_ReadWriteLock.h ***/
#ifndef __JUCE_READWRITELOCK_JUCEHEADER__
#define __JUCE_READWRITELOCK_JUCEHEADER__


/*** Start of inlined file: juce_SpinLock.h ***/
#ifndef __JUCE_SPINLOCK_JUCEHEADER__
#define __JUCE_SPINLOCK_JUCEHEADER__

/**
	A simple spin-lock class that can be used as a simple, low-overhead mutex for
	uncontended situations.

	Note that unlike a CriticalSection, this type of lock is not re-entrant, and may
	be less efficient when used it a highly contended situation, but it's very small and
	requires almost no initialisation.
	It's most appropriate for simple situations where you're only going to hold the
	lock for a very brief time.

	@see CriticalSection
*/
class JUCE_API  SpinLock
{
public:
	inline SpinLock() noexcept {}
	inline ~SpinLock() noexcept {}

	/** Acquires the lock.
		This will block until the lock has been successfully acquired by this thread.
		Note that a SpinLock is NOT re-entrant, and is not smart enough to know whether the
		caller thread already has the lock - so if a thread tries to acquire a lock that it
		already holds, this method will never return!

		It's strongly recommended that you never call this method directly - instead use the
		ScopedLockType class to manage the locking using an RAII pattern instead.
	*/
	void enter() const noexcept;

	/** Attempts to acquire the lock, returning true if this was successful. */
	inline bool tryEnter() const noexcept
	{
		return lock.compareAndSetBool (1, 0);
	}

	/** Releases the lock. */
	inline void exit() const noexcept
	{
		jassert (lock.value == 1); // Agh! Releasing a lock that isn't currently held!
		lock = 0;
	}

	/** Provides the type of scoped lock to use for locking a SpinLock. */
	typedef GenericScopedLock <SpinLock>       ScopedLockType;

	/** Provides the type of scoped unlocker to use with a SpinLock. */
	typedef GenericScopedUnlock <SpinLock>     ScopedUnlockType;

private:

	mutable Atomic<int> lock;

	JUCE_DECLARE_NON_COPYABLE (SpinLock);
};

#endif   // __JUCE_SPINLOCK_JUCEHEADER__

/*** End of inlined file: juce_SpinLock.h ***/


/*** Start of inlined file: juce_WaitableEvent.h ***/
#ifndef __JUCE_WAITABLEEVENT_JUCEHEADER__
#define __JUCE_WAITABLEEVENT_JUCEHEADER__

/**
	Allows threads to wait for events triggered by other threads.

	A thread can call wait() on a WaitableObject, and this will suspend the
	calling thread until another thread wakes it up by calling the signal()
	method.
*/
class JUCE_API  WaitableEvent
{
public:

	/** Creates a WaitableEvent object.

		@param manualReset  If this is false, the event will be reset automatically when the wait()
							method is called. If manualReset is true, then once the event is signalled,
							the only way to reset it will be by calling the reset() method.
	*/
	WaitableEvent (bool manualReset = false) noexcept;

	/** Destructor.

		If other threads are waiting on this object when it gets deleted, this
		can cause nasty errors, so be careful!
	*/
	~WaitableEvent() noexcept;

	/** Suspends the calling thread until the event has been signalled.

		This will wait until the object's signal() method is called by another thread,
		or until the timeout expires.

		After the event has been signalled, this method will return true and if manualReset
		was set to false in the WaitableEvent's constructor, then the event will be reset.

		@param timeOutMilliseconds  the maximum time to wait, in milliseconds. A negative
									value will cause it to wait forever.

		@returns    true if the object has been signalled, false if the timeout expires first.
		@see signal, reset
	*/
	bool wait (int timeOutMilliseconds = -1) const noexcept;

	/** Wakes up any threads that are currently waiting on this object.

		If signal() is called when nothing is waiting, the next thread to call wait()
		will return immediately and reset the signal.

		If the WaitableEvent is manual reset, all current and future threads that wait upon this
		object will be woken, until reset() is explicitly called.

		If the WaitableEvent is automatic reset, and one or more threads is waiting upon the object,
		then one of them will be woken up. If no threads are currently waiting, then the next thread
		to call wait() will be woken up. As soon as a thread is woken, the signal is automatically
		reset.

		@see wait, reset
	*/
	void signal() const noexcept;

	/** Resets the event to an unsignalled state.

		If it's not already signalled, this does nothing.
	*/
	void reset() const noexcept;

private:

	void* internal;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (WaitableEvent);
};

#endif   // __JUCE_WAITABLEEVENT_JUCEHEADER__

/*** End of inlined file: juce_WaitableEvent.h ***/


/*** Start of inlined file: juce_Thread.h ***/
#ifndef __JUCE_THREAD_JUCEHEADER__
#define __JUCE_THREAD_JUCEHEADER__

/**
	Encapsulates a thread.

	Subclasses derive from Thread and implement the run() method, in which they
	do their business. The thread can then be started with the startThread() method
	and controlled with various other methods.

	This class also contains some thread-related static methods, such
	as sleep(), yield(), getCurrentThreadId() etc.

	@see CriticalSection, WaitableEvent, Process, ThreadWithProgressWindow,
		 MessageManagerLock
*/
class JUCE_API  Thread
{
public:

	/**
		Creates a thread.

		When first created, the thread is not running. Use the startThread()
		method to start it.
	*/
	explicit Thread (const String& threadName);

	/** Destructor.

		Deleting a Thread object that is running will only give the thread a
		brief opportunity to stop itself cleanly, so it's recommended that you
		should always call stopThread() with a decent timeout before deleting,
		to avoid the thread being forcibly killed (which is a Bad Thing).
	*/
	virtual ~Thread();

	/** Must be implemented to perform the thread's actual code.

		Remember that the thread must regularly check the threadShouldExit()
		method whilst running, and if this returns true it should return from
		the run() method as soon as possible to avoid being forcibly killed.

		@see threadShouldExit, startThread
	*/
	virtual void run() = 0;

	// Thread control functions..

	/** Starts the thread running.

		This will start the thread's run() method.
		(if it's already started, startThread() won't do anything).

		@see stopThread
	*/
	void startThread();

	/** Starts the thread with a given priority.

		Launches the thread with a given priority, where 0 = lowest, 10 = highest.
		If the thread is already running, its priority will be changed.

		@see startThread, setPriority
	*/
	void startThread (int priority);

	/** Attempts to stop the thread running.

		This method will cause the threadShouldExit() method to return true
		and call notify() in case the thread is currently waiting.

		Hopefully the thread will then respond to this by exiting cleanly, and
		the stopThread method will wait for a given time-period for this to
		happen.

		If the thread is stuck and fails to respond after the time-out, it gets
		forcibly killed, which is a very bad thing to happen, as it could still
		be holding locks, etc. which are needed by other parts of your program.

		@param timeOutMilliseconds  The number of milliseconds to wait for the
									thread to finish before killing it by force. A negative
									value in here will wait forever.
		@see signalThreadShouldExit, threadShouldExit, waitForThreadToExit, isThreadRunning
	*/
	void stopThread (int timeOutMilliseconds);

	/** Returns true if the thread is currently active */
	bool isThreadRunning() const;

	/** Sets a flag to tell the thread it should stop.

		Calling this means that the threadShouldExit() method will then return true.
		The thread should be regularly checking this to see whether it should exit.

		If your thread makes use of wait(), you might want to call notify() after calling
		this method, to interrupt any waits that might be in progress, and allow it
		to reach a point where it can exit.

		@see threadShouldExit
		@see waitForThreadToExit
	*/
	void signalThreadShouldExit();

	/** Checks whether the thread has been told to stop running.

		Threads need to check this regularly, and if it returns true, they should
		return from their run() method at the first possible opportunity.

		@see signalThreadShouldExit
	*/
	inline bool threadShouldExit() const                { return threadShouldExit_; }

	/** Waits for the thread to stop.

		This will waits until isThreadRunning() is false or until a timeout expires.

		@param timeOutMilliseconds  the time to wait, in milliseconds. If this value
									is less than zero, it will wait forever.
		@returns    true if the thread exits, or false if the timeout expires first.
	*/
	bool waitForThreadToExit (int timeOutMilliseconds) const;

	/** Changes the thread's priority.
		May return false if for some reason the priority can't be changed.

		@param priority     the new priority, in the range 0 (lowest) to 10 (highest). A priority
							of 5 is normal.
	*/
	bool setPriority (int priority);

	/** Changes the priority of the caller thread.

		Similar to setPriority(), but this static method acts on the caller thread.
		May return false if for some reason the priority can't be changed.

		@see setPriority
	*/
	static bool setCurrentThreadPriority (int priority);

	/** Sets the affinity mask for the thread.

		This will only have an effect next time the thread is started - i.e. if the
		thread is already running when called, it'll have no effect.

		@see setCurrentThreadAffinityMask
	*/
	void setAffinityMask (uint32 affinityMask);

	/** Changes the affinity mask for the caller thread.

		This will change the affinity mask for the thread that calls this static method.

		@see setAffinityMask
	*/
	static void setCurrentThreadAffinityMask (uint32 affinityMask);

	// this can be called from any thread that needs to pause..
	static void JUCE_CALLTYPE sleep (int milliseconds);

	/** Yields the calling thread's current time-slot. */
	static void JUCE_CALLTYPE yield();

	/** Makes the thread wait for a notification.

		This puts the thread to sleep until either the timeout period expires, or
		another thread calls the notify() method to wake it up.

		A negative time-out value means that the method will wait indefinitely.

		@returns    true if the event has been signalled, false if the timeout expires.
	*/
	bool wait (int timeOutMilliseconds) const;

	/** Wakes up the thread.

		If the thread has called the wait() method, this will wake it up.

		@see wait
	*/
	void notify() const;

	/** A value type used for thread IDs.
		@see getCurrentThreadId(), getThreadId()
	*/
	typedef void* ThreadID;

	/** Returns an id that identifies the caller thread.

		To find the ID of a particular thread object, use getThreadId().

		@returns    a unique identifier that identifies the calling thread.
		@see getThreadId
	*/
	static ThreadID getCurrentThreadId();

	/** Finds the thread object that is currently running.

		Note that the main UI thread (or other non-Juce threads) don't have a Thread
		object associated with them, so this will return 0.
	*/
	static Thread* getCurrentThread();

	/** Returns the ID of this thread.

		That means the ID of this thread object - not of the thread that's calling the method.

		This can change when the thread is started and stopped, and will be invalid if the
		thread's not actually running.

		@see getCurrentThreadId
	*/
	ThreadID getThreadId() const noexcept                           { return threadId_; }

	/** Returns the name of the thread.

		This is the name that gets set in the constructor.
	*/
	const String& getThreadName() const                             { return threadName_; }

	/** Changes the name of the caller thread.
		Different OSes may place different length or content limits on this name.
	*/
	static void setCurrentThreadName (const String& newThreadName);

	/** Returns the number of currently-running threads.

		@returns  the number of Thread objects known to be currently running.
		@see stopAllThreads
	*/
	static int getNumRunningThreads();

	/** Tries to stop all currently-running threads.

		This will attempt to stop all the threads known to be running at the moment.
	*/
	static void stopAllThreads (int timeoutInMillisecs);

private:

	const String threadName_;
	void* volatile threadHandle_;
	ThreadID threadId_;
	CriticalSection startStopLock;
	WaitableEvent startSuspensionEvent_, defaultEvent_;
	int threadPriority_;
	uint32 affinityMask_;
	bool volatile threadShouldExit_;

   #ifndef DOXYGEN
	friend void JUCE_API juce_threadEntryPoint (void*);
   #endif

	void launchThread();
	void closeThreadHandle();
	void killThread();
	void threadEntryPoint();
	static bool setThreadPriority (void*, int priority);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Thread);
};

#endif   // __JUCE_THREAD_JUCEHEADER__

/*** End of inlined file: juce_Thread.h ***/

/**
	A critical section that allows multiple simultaneous readers.

	Features of this type of lock are:

	- Multiple readers can hold the lock at the same time, but only one writer
	  can hold it at once.
	- Writers trying to gain the lock will be blocked until all readers and writers
	  have released it
	- Readers trying to gain the lock while a writer is waiting to acquire it will be
	  blocked until the writer has obtained and released it
	- If a thread already has a read lock and tries to obtain a write lock, it will succeed if
	  there are no other readers
	- If a thread already has the write lock and tries to obtain a read lock, this will succeed.
	- Recursive locking is supported.

	@see ScopedReadLock, ScopedWriteLock, CriticalSection
*/
class JUCE_API  ReadWriteLock
{
public:

	/**
		Creates a ReadWriteLock object.
	*/
	ReadWriteLock() noexcept;

	/** Destructor.

		If the object is deleted whilst locked, any subsequent behaviour
		is unpredictable.
	*/
	~ReadWriteLock() noexcept;

	/** Locks this object for reading.

		Multiple threads can simulaneously lock the object for reading, but if another
		thread has it locked for writing, then this will block until it releases the
		lock.

		@see exitRead, ScopedReadLock
	*/
	void enterRead() const noexcept;

	/** Releases the read-lock.

		If the caller thread hasn't got the lock, this can have unpredictable results.

		If the enterRead() method has been called multiple times by the thread, each
		call must be matched by a call to exitRead() before other threads will be allowed
		to take over the lock.

		@see enterRead, ScopedReadLock
	*/
	void exitRead() const noexcept;

	/** Locks this object for writing.

		This will block until any other threads that have it locked for reading or
		writing have released their lock.

		@see exitWrite, ScopedWriteLock
	*/
	void enterWrite() const noexcept;

	/** Tries to lock this object for writing.

		This is like enterWrite(), but doesn't block - it returns true if it manages
		to obtain the lock.

		@see enterWrite
	*/
	bool tryEnterWrite() const noexcept;

	/** Releases the write-lock.

		If the caller thread hasn't got the lock, this can have unpredictable results.

		If the enterWrite() method has been called multiple times by the thread, each
		call must be matched by a call to exit() before other threads will be allowed
		to take over the lock.

		@see enterWrite, ScopedWriteLock
	*/
	void exitWrite() const noexcept;

private:

	SpinLock accessLock;
	WaitableEvent waitEvent;
	mutable int numWaitingWriters, numWriters;
	mutable Thread::ThreadID writerThreadId;
	mutable Array <Thread::ThreadID> readerThreads;

	JUCE_DECLARE_NON_COPYABLE (ReadWriteLock);
};

#endif   // __JUCE_READWRITELOCK_JUCEHEADER__

/*** End of inlined file: juce_ReadWriteLock.h ***/


#endif
#ifndef __JUCE_SCOPEDLOCK_JUCEHEADER__

#endif
#ifndef __JUCE_SCOPEDREADLOCK_JUCEHEADER__

/*** Start of inlined file: juce_ScopedReadLock.h ***/
#ifndef __JUCE_SCOPEDREADLOCK_JUCEHEADER__
#define __JUCE_SCOPEDREADLOCK_JUCEHEADER__

/**
	Automatically locks and unlocks a ReadWriteLock object.

	Use one of these as a local variable to control access to a ReadWriteLock.

	e.g. @code

	ReadWriteLock myLock;

	for (;;)
	{
		const ScopedReadLock myScopedLock (myLock);
		// myLock is now locked

		...do some stuff...

		// myLock gets unlocked here.
	}
	@endcode

	@see ReadWriteLock, ScopedWriteLock
*/
class JUCE_API  ScopedReadLock
{
public:

	/** Creates a ScopedReadLock.

		As soon as it is created, this will call ReadWriteLock::enterRead(), and
		when the ScopedReadLock object is deleted, the ReadWriteLock will
		be unlocked.

		Make sure this object is created and deleted by the same thread,
		otherwise there are no guarantees what will happen! Best just to use it
		as a local stack object, rather than creating one with the new() operator.
	*/
	inline explicit ScopedReadLock (const ReadWriteLock& lock) noexcept   : lock_ (lock) { lock.enterRead(); }

	/** Destructor.

		The ReadWriteLock's exitRead() method will be called when the destructor is called.

		Make sure this object is created and deleted by the same thread,
		otherwise there are no guarantees what will happen!
	*/
	inline ~ScopedReadLock() noexcept                                     { lock_.exitRead(); }

private:

	const ReadWriteLock& lock_;

	JUCE_DECLARE_NON_COPYABLE (ScopedReadLock);
};

#endif   // __JUCE_SCOPEDREADLOCK_JUCEHEADER__

/*** End of inlined file: juce_ScopedReadLock.h ***/


#endif
#ifndef __JUCE_SCOPEDWRITELOCK_JUCEHEADER__

/*** Start of inlined file: juce_ScopedWriteLock.h ***/
#ifndef __JUCE_SCOPEDWRITELOCK_JUCEHEADER__
#define __JUCE_SCOPEDWRITELOCK_JUCEHEADER__

/**
	Automatically locks and unlocks a ReadWriteLock object.

	Use one of these as a local variable to control access to a ReadWriteLock.

	e.g. @code

	ReadWriteLock myLock;

	for (;;)
	{
		const ScopedWriteLock myScopedLock (myLock);
		// myLock is now locked

		...do some stuff...

		// myLock gets unlocked here.
	}
	@endcode

	@see ReadWriteLock, ScopedReadLock
*/
class JUCE_API  ScopedWriteLock
{
public:

	/** Creates a ScopedWriteLock.

		As soon as it is created, this will call ReadWriteLock::enterWrite(), and
		when the ScopedWriteLock object is deleted, the ReadWriteLock will
		be unlocked.

		Make sure this object is created and deleted by the same thread,
		otherwise there are no guarantees what will happen! Best just to use it
		as a local stack object, rather than creating one with the new() operator.
	*/
	inline explicit ScopedWriteLock (const ReadWriteLock& lock) noexcept : lock_ (lock) { lock.enterWrite(); }

	/** Destructor.

		The ReadWriteLock's exitWrite() method will be called when the destructor is called.

		Make sure this object is created and deleted by the same thread,
		otherwise there are no guarantees what will happen!
	*/
	inline ~ScopedWriteLock() noexcept                                   { lock_.exitWrite(); }

private:

	const ReadWriteLock& lock_;

	JUCE_DECLARE_NON_COPYABLE (ScopedWriteLock);
};

#endif   // __JUCE_SCOPEDWRITELOCK_JUCEHEADER__

/*** End of inlined file: juce_ScopedWriteLock.h ***/


#endif
#ifndef __JUCE_SPINLOCK_JUCEHEADER__

#endif
#ifndef __JUCE_THREAD_JUCEHEADER__

#endif
#ifndef __JUCE_THREADLOCALVALUE_JUCEHEADER__

/*** Start of inlined file: juce_ThreadLocalValue.h ***/
#ifndef __JUCE_THREADLOCALVALUE_JUCEHEADER__
#define __JUCE_THREADLOCALVALUE_JUCEHEADER__

/**
	Provides cross-platform support for thread-local objects.

	This class holds an internal list of objects of the templated type, keeping
	an instance for each thread that requests one. The first time a thread attempts
	to access its value, an object is created and added to the list for that thread.

	The templated class for your value could be a primitive type, or any class that
	has a default constructor.

	Once a thread has accessed its object, that object will not be deleted until the
	ThreadLocalValue object itself is deleted, even if its thread exits before that.
	But, because thread ID numbers are used to identify threads, and OSes often re-use
	these ID numbers, value objects will often be implicitly re-used by new threads whose
	ID number is the same as one that was used by an earlier thread.
*/
template <typename Type>
class ThreadLocalValue
{
public:
	/** */
	ThreadLocalValue() noexcept
	{
	}

	/** Destructor.
		When this object is deleted, all the value objects for all threads will be deleted.
	*/
	~ThreadLocalValue()
	{
		for (ObjectHolder* o = first.value; o != nullptr;)
		{
			ObjectHolder* const next = o->next;
			delete o;
			o = next;
		}
	}

	/** Returns a reference to this thread's instance of the value.
		Note that the first time a thread tries to access the value, an instance of the
		value object will be created - so if your value's class has a non-trivial
		constructor, be aware that this method could invoke it.
	*/
	Type& operator*() const noexcept    { return get(); }

	/** Returns a pointer to this thread's instance of the value.
		Note that the first time a thread tries to access the value, an instance of the
		value object will be created - so if your value's class has a non-trivial
		constructor, be aware that this method could invoke it.
	*/
	operator Type*() const noexcept     { return &get(); }

	/** Accesses a method or field of the value object.
		Note that the first time a thread tries to access the value, an instance of the
		value object will be created - so if your value's class has a non-trivial
		constructor, be aware that this method could invoke it.
	*/
	Type* operator->() const noexcept   { return &get(); }

	/** Returns a reference to this thread's instance of the value.
		Note that the first time a thread tries to access the value, an instance of the
		value object will be created - so if your value's class has a non-trivial
		constructor, be aware that this method could invoke it.
	*/
	Type& get() const noexcept
	{
		const Thread::ThreadID threadId = Thread::getCurrentThreadId();

		for (ObjectHolder* o = first.get(); o != nullptr; o = o->next)
			if (o->threadId == threadId)
				return o->object;

		ObjectHolder* const newObject = new ObjectHolder (threadId);

		do
		{
			newObject->next = first.get();
		}
		while (! first.compareAndSetBool (newObject, newObject->next));

		return newObject->object;
	}

private:

	struct ObjectHolder
	{
		ObjectHolder (const Thread::ThreadID& threadId_)
			: threadId (threadId_), object()
		{}

		const Thread::ThreadID threadId;
		ObjectHolder* next;
		Type object;

		JUCE_DECLARE_NON_COPYABLE (ObjectHolder);
	};

	mutable Atomic<ObjectHolder*> first;

	JUCE_DECLARE_NON_COPYABLE (ThreadLocalValue);
};

#endif   // __JUCE_THREADLOCALVALUE_JUCEHEADER__

/*** End of inlined file: juce_ThreadLocalValue.h ***/


#endif
#ifndef __JUCE_THREADPOOL_JUCEHEADER__

/*** Start of inlined file: juce_ThreadPool.h ***/
#ifndef __JUCE_THREADPOOL_JUCEHEADER__
#define __JUCE_THREADPOOL_JUCEHEADER__

class ThreadPool;
class ThreadPoolThread;

/**
	A task that is executed by a ThreadPool object.

	A ThreadPool keeps a list of ThreadPoolJob objects which are executed by
	its threads.

	The runJob() method needs to be implemented to do the task, and if the code that
	does the work takes a significant time to run, it must keep checking the shouldExit()
	method to see if something is trying to interrupt the job. If shouldExit() returns
	true, the runJob() method must return immediately.

	@see ThreadPool, Thread
*/
class JUCE_API  ThreadPoolJob
{
public:

	/** Creates a thread pool job object.

		After creating your job, add it to a thread pool with ThreadPool::addJob().
	*/
	explicit ThreadPoolJob (const String& name);

	/** Destructor. */
	virtual ~ThreadPoolJob();

	/** Returns the name of this job.
		@see setJobName
	*/
	String getJobName() const;

	/** Changes the job's name.
		@see getJobName
	*/
	void setJobName (const String& newName);

	/** These are the values that can be returned by the runJob() method.
	*/
	enum JobStatus
	{
		jobHasFinished = 0,     /**< indicates that the job has finished and can be
									 removed from the pool. */

		jobHasFinishedAndShouldBeDeleted,  /**< indicates that the job has finished and that it
												should be automatically deleted by the pool. */

		jobNeedsRunningAgain    /**< indicates that the job would like to be called
									 again when a thread is free. */
	};

	/** Peforms the actual work that this job needs to do.

		Your subclass must implement this method, in which is does its work.

		If the code in this method takes a significant time to run, it must repeatedly check
		the shouldExit() method to see if something is trying to interrupt the job.
		If shouldExit() ever returns true, the runJob() method must return immediately.

		If this method returns jobHasFinished, then the job will be removed from the pool
		immediately. If it returns jobNeedsRunningAgain, then the job will be left in the
		pool and will get a chance to run again as soon as a thread is free.

		@see shouldExit()
	*/
	virtual JobStatus runJob() = 0;

	/** Returns true if this job is currently running its runJob() method. */
	bool isRunning() const                  { return isActive; }

	/** Returns true if something is trying to interrupt this job and make it stop.

		Your runJob() method must call this whenever it gets a chance, and if it ever
		returns true, the runJob() method must return immediately.

		@see signalJobShouldExit()
	*/
	bool shouldExit() const                 { return shouldStop; }

	/** Calling this will cause the shouldExit() method to return true, and the job
		should (if it's been implemented correctly) stop as soon as possible.

		@see shouldExit()
	*/
	void signalJobShouldExit();

private:
	friend class ThreadPool;
	friend class ThreadPoolThread;
	String jobName;
	ThreadPool* pool;
	bool shouldStop, isActive, shouldBeDeleted;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ThreadPoolJob);
};

/**
	A set of threads that will run a list of jobs.

	When a ThreadPoolJob object is added to the ThreadPool's list, its run() method
	will be called by the next pooled thread that becomes free.

	@see ThreadPoolJob, Thread
*/
class JUCE_API  ThreadPool
{
public:

	/** Creates a thread pool.

		Once you've created a pool, you can give it some things to do with the addJob()
		method.

		@param numberOfThreads              the maximum number of actual threads to run.
		@param startThreadsOnlyWhenNeeded   if this is true, then no threads will be started
											until there are some jobs to run. If false, then
											all the threads will be fired-up immediately so that
											they're ready for action
		@param stopThreadsWhenNotUsedTimeoutMs  if this timeout is > 0, then if any threads have been
											inactive for this length of time, they will automatically
											be stopped until more jobs come along and they're needed
	*/
	ThreadPool (int numberOfThreads,
				bool startThreadsOnlyWhenNeeded = true,
				int stopThreadsWhenNotUsedTimeoutMs = 5000);

	/** Destructor.

		This will attempt to remove all the jobs before deleting, but if you want to
		specify a timeout, you should call removeAllJobs() explicitly before deleting
		the pool.
	*/
	~ThreadPool();

	/** A callback class used when you need to select which ThreadPoolJob objects are suitable
		for some kind of operation.
		@see ThreadPool::removeAllJobs
	*/
	class JUCE_API  JobSelector
	{
	public:
		virtual ~JobSelector() {}

		/** Should return true if the specified thread matches your criteria for whatever
			operation that this object is being used for.

			Any implementation of this method must be extremely fast and thread-safe!
		*/
		virtual bool isJobSuitable (ThreadPoolJob* job) = 0;
	};

	/** Adds a job to the queue.

		Once a job has been added, then the next time a thread is free, it will run
		the job's ThreadPoolJob::runJob() method. Depending on the return value of the
		runJob() method, the pool will either remove the job from the pool or add it to
		the back of the queue to be run again.
	*/
	void addJob (ThreadPoolJob* job);

	/** Tries to remove a job from the pool.

		If the job isn't yet running, this will simply remove it. If it is running, it
		will wait for it to finish.

		If the timeout period expires before the job finishes running, then the job will be
		left in the pool and this will return false. It returns true if the job is sucessfully
		stopped and removed.

		@param job                  the job to remove
		@param interruptIfRunning   if true, then if the job is currently busy, its
									ThreadPoolJob::signalJobShouldExit() method will be called to try
									to interrupt it. If false, then if the job will be allowed to run
									until it stops normally (or the timeout expires)
		@param timeOutMilliseconds  the length of time this method should wait for the job to finish
									before giving up and returning false
	*/
	bool removeJob (ThreadPoolJob* job,
					bool interruptIfRunning,
					int timeOutMilliseconds);

	/** Tries to remove all jobs from the pool.

		@param interruptRunningJobs if true, then all running jobs will have their ThreadPoolJob::signalJobShouldExit()
									methods called to try to interrupt them
		@param timeOutMilliseconds  the length of time this method should wait for all the jobs to finish
									before giving up and returning false
		@param deleteInactiveJobs   if true, any jobs that aren't currently running will be deleted. If false,
									they will simply be removed from the pool. Jobs that are already running when
									this method is called can choose whether they should be deleted by
									returning jobHasFinishedAndShouldBeDeleted from their runJob() method.
		@param selectedJobsToRemove if this is non-zero, the JobSelector object is asked to decide which
									jobs should be removed. If it is zero, all jobs are removed
		@returns    true if all jobs are successfully stopped and removed; false if the timeout period
					expires while waiting for one or more jobs to stop
	*/
	bool removeAllJobs (bool interruptRunningJobs,
						int timeOutMilliseconds,
						bool deleteInactiveJobs = false,
						JobSelector* selectedJobsToRemove = nullptr);

	/** Returns the number of jobs currently running or queued.
	*/
	int getNumJobs() const;

	/** Returns one of the jobs in the queue.

		Note that this can be a very volatile list as jobs might be continuously getting shifted
		around in the list, and this method may return 0 if the index is currently out-of-range.
	*/
	ThreadPoolJob* getJob (int index) const;

	/** Returns true if the given job is currently queued or running.

		@see isJobRunning()
	*/
	bool contains (const ThreadPoolJob* job) const;

	/** Returns true if the given job is currently being run by a thread.
	*/
	bool isJobRunning (const ThreadPoolJob* job) const;

	/** Waits until a job has finished running and has been removed from the pool.

		This will wait until the job is no longer in the pool - i.e. until its
		runJob() method returns ThreadPoolJob::jobHasFinished.

		If the timeout period expires before the job finishes, this will return false;
		it returns true if the job has finished successfully.
	*/
	bool waitForJobToFinish (const ThreadPoolJob* job,
							 int timeOutMilliseconds) const;

	/** Returns a list of the names of all the jobs currently running or queued.

		If onlyReturnActiveJobs is true, only the ones currently running are returned.
	*/
	StringArray getNamesOfAllJobs (bool onlyReturnActiveJobs) const;

	/** Changes the priority of all the threads.

		This will call Thread::setPriority() for each thread in the pool.
		May return false if for some reason the priority can't be changed.
	*/
	bool setThreadPriorities (int newPriority);

private:

	const int threadStopTimeout;
	int priority;
	class ThreadPoolThread;
	friend class OwnedArray <ThreadPoolThread>;
	OwnedArray <ThreadPoolThread> threads;
	Array <ThreadPoolJob*> jobs;

	CriticalSection lock;
	uint32 lastJobEndTime;
	WaitableEvent jobFinishedSignal;

	friend class ThreadPoolThread;
	bool runNextJob();

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ThreadPool);
};

#endif   // __JUCE_THREADPOOL_JUCEHEADER__

/*** End of inlined file: juce_ThreadPool.h ***/


#endif
#ifndef __JUCE_TIMESLICETHREAD_JUCEHEADER__

/*** Start of inlined file: juce_TimeSliceThread.h ***/
#ifndef __JUCE_TIMESLICETHREAD_JUCEHEADER__
#define __JUCE_TIMESLICETHREAD_JUCEHEADER__

class TimeSliceThread;

/**
	Used by the TimeSliceThread class.

	To register your class with a TimeSliceThread, derive from this class and
	use the TimeSliceThread::addTimeSliceClient() method to add it to the list.

	Make sure you always call TimeSliceThread::removeTimeSliceClient() before
	deleting your client!

	@see TimeSliceThread
*/
class JUCE_API  TimeSliceClient
{
public:
	/** Destructor. */
	virtual ~TimeSliceClient()   {}

	/** Called back by a TimeSliceThread.

		When you register this class with it, a TimeSliceThread will repeatedly call
		this method.

		The implementation of this method should use its time-slice to do something that's
		quick - never block for longer than absolutely necessary.

		@returns    Your method should return the number of milliseconds which it would like to wait before being called
					again. Returning 0 will make the thread call again as soon as possible (after possibly servicing
					other busy clients). If you return a value below zero, your client will be removed from the list of clients,
					and won't be called again. The value you specify isn't a guaranteee, and is only used as a hint by the
					thread - the actual time before the next callback may be more or less than specified.
					You can force the TimeSliceThread to wake up and poll again immediately by calling its notify() method.
	*/
	virtual int useTimeSlice() = 0;

private:
	friend class TimeSliceThread;
	Time nextCallTime;
};

/**
	A thread that keeps a list of clients, and calls each one in turn, giving them
	all a chance to run some sort of short task.

	@see TimeSliceClient, Thread
*/
class JUCE_API  TimeSliceThread   : public Thread
{
public:

	/**
		Creates a TimeSliceThread.

		When first created, the thread is not running. Use the startThread()
		method to start it.
	*/
	explicit TimeSliceThread (const String& threadName);

	/** Destructor.

		Deleting a Thread object that is running will only give the thread a
		brief opportunity to stop itself cleanly, so it's recommended that you
		should always call stopThread() with a decent timeout before deleting,
		to avoid the thread being forcibly killed (which is a Bad Thing).
	*/
	~TimeSliceThread();

	/** Adds a client to the list.

		The client's callbacks will start after the number of milliseconds specified
		by millisecondsBeforeStarting (and this may happen before this method has returned).
	*/
	void addTimeSliceClient (TimeSliceClient* client, int millisecondsBeforeStarting = 0);

	/** Removes a client from the list.

		This method will make sure that all callbacks to the client have completely
		finished before the method returns.
	*/
	void removeTimeSliceClient (TimeSliceClient* client);

	/** If the given client is waiting in the queue, it will be moved to the front
		and given a time-slice as soon as possible.
		If the specified client has not been added, nothing will happen.
	*/
	void moveToFrontOfQueue (TimeSliceClient* client);

	/** Returns the number of registered clients. */
	int getNumClients() const;

	/** Returns one of the registered clients. */
	TimeSliceClient* getClient (int index) const;

   #ifndef DOXYGEN
	void run();
   #endif

private:
	CriticalSection callbackLock, listLock;
	Array <TimeSliceClient*> clients;
	TimeSliceClient* clientBeingCalled;

	TimeSliceClient* getNextClient (int index) const;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (TimeSliceThread);
};

#endif   // __JUCE_TIMESLICETHREAD_JUCEHEADER__

/*** End of inlined file: juce_TimeSliceThread.h ***/


#endif
#ifndef __JUCE_WAITABLEEVENT_JUCEHEADER__

#endif
#ifndef __JUCE_PERFORMANCECOUNTER_JUCEHEADER__

/*** Start of inlined file: juce_PerformanceCounter.h ***/
#ifndef __JUCE_PERFORMANCECOUNTER_JUCEHEADER__
#define __JUCE_PERFORMANCECOUNTER_JUCEHEADER__

/** A timer for measuring performance of code and dumping the results to a file.

	e.g. @code

		PerformanceCounter pc ("fish", 50, "/temp/myfishlog.txt");

		for (;;)
		{
			pc.start();

			doSomethingFishy();

			pc.stop();
		}
	@endcode

	In this example, the time of each period between calling start/stop will be
	measured and averaged over 50 runs, and the results printed to a file
	every 50 times round the loop.
*/
class JUCE_API  PerformanceCounter
{
public:

	/** Creates a PerformanceCounter object.

		@param counterName      the name used when printing out the statistics
		@param runsPerPrintout  the number of start/stop iterations before calling
								printStatistics()
		@param loggingFile      a file to dump the results to - if this is File::nonexistent,
								the results are just written to the debugger output
	*/
	PerformanceCounter (const String& counterName,
						int runsPerPrintout = 100,
						const File& loggingFile = File::nonexistent);

	/** Destructor. */
	~PerformanceCounter();

	/** Starts timing.

		@see stop
	*/
	void start();

	/** Stops timing and prints out the results.

		The number of iterations before doing a printout of the
		results is set in the constructor.

		@see start
	*/
	void stop();

	/** Dumps the current metrics to the debugger output and to a file.

		As well as using Logger::outputDebugString to print the results,
		this will write then to the file specified in the constructor (if
		this was valid).
	*/
	void printStatistics();

private:

	String name;
	int numRuns, runsPerPrint;
	double totalTime;
	int64 started;
	File outputFile;
};

#endif   // __JUCE_PERFORMANCECOUNTER_JUCEHEADER__

/*** End of inlined file: juce_PerformanceCounter.h ***/


#endif
#ifndef __JUCE_RELATIVETIME_JUCEHEADER__

#endif
#ifndef __JUCE_TIME_JUCEHEADER__

#endif
#ifndef __JUCE_UNITTEST_JUCEHEADER__

/*** Start of inlined file: juce_UnitTest.h ***/
#ifndef __JUCE_UNITTEST_JUCEHEADER__
#define __JUCE_UNITTEST_JUCEHEADER__

class UnitTestRunner;

/**
	This is a base class for classes that perform a unit test.

	To write a test using this class, your code should look something like this:

	@code
	class MyTest  : public UnitTest
	{
	public:
		MyTest()  : UnitTest ("Foobar testing") {}

		void runTest()
		{
			beginTest ("Part 1");

			expect (myFoobar.doesSomething());
			expect (myFoobar.doesSomethingElse());

			beginTest ("Part 2");

			expect (myOtherFoobar.doesSomething());
			expect (myOtherFoobar.doesSomethingElse());

			...etc..
		}
	};

	// Creating a static instance will automatically add the instance to the array
	// returned by UnitTest::getAllTests(), so the test will be included when you call
	// UnitTestRunner::runAllTests()
	static MyTest test;
	@endcode

	To run a test, use the UnitTestRunner class.

	@see UnitTestRunner
*/
class JUCE_API  UnitTest
{
public:

	/** Creates a test with the given name. */
	explicit UnitTest (const String& name);

	/** Destructor. */
	virtual ~UnitTest();

	/** Returns the name of the test. */
	const String& getName() const noexcept       { return name; }

	/** Runs the test, using the specified UnitTestRunner.
		You shouldn't need to call this method directly - use
		UnitTestRunner::runTests() instead.
	*/
	void performTest (UnitTestRunner* runner);

	/** Returns the set of all UnitTest objects that currently exist. */
	static Array<UnitTest*>& getAllTests();

	/** You can optionally implement this method to set up your test.
		This method will be called before runTest().
	*/
	virtual void initialise();

	/** You can optionally implement this method to clear up after your test has been run.
		This method will be called after runTest() has returned.
	*/
	virtual void shutdown();

	/** Implement this method in your subclass to actually run your tests.

		The content of your implementation should call beginTest() and expect()
		to perform the tests.
	*/
	virtual void runTest() = 0;

	/** Tells the system that a new subsection of tests is beginning.
		This should be called from your runTest() method, and may be called
		as many times as you like, to demarcate different sets of tests.
	*/
	void beginTest (const String& testName);

	/** Checks that the result of a test is true, and logs this result.

		In your runTest() method, you should call this method for each condition that
		you want to check, e.g.

		@code
		void runTest()
		{
			beginTest ("basic tests");
			expect (x + y == 2);
			expect (getThing() == someThing);
			...etc...
		}
		@endcode

		If testResult is true, a pass is logged; if it's false, a failure is logged.
		If the failure message is specified, it will be written to the log if the test fails.
	*/
	void expect (bool testResult, const String& failureMessage = String::empty);

	/** Compares two values, and if they don't match, prints out a message containing the
		expected and actual result values.
	*/
	template <class ValueType>
	void expectEquals (ValueType actual, ValueType expected, String failureMessage = String::empty)
	{
		const bool result = (actual == expected);

		if (! result)
		{
			if (failureMessage.isNotEmpty())
				failureMessage << " -- ";

			failureMessage << "Expected value: " << expected << ", Actual value: " << actual;
		}

		expect (result, failureMessage);
	}

	/** Writes a message to the test log.
		This can only be called from within your runTest() method.
	*/
	void logMessage (const String& message);

private:

	const String name;
	UnitTestRunner* runner;

	JUCE_DECLARE_NON_COPYABLE (UnitTest);
};

/**
	Runs a set of unit tests.

	You can instantiate one of these objects and use it to invoke tests on a set of
	UnitTest objects.

	By using a subclass of UnitTestRunner, you can intercept logging messages and
	perform custom behaviour when each test completes.

	@see UnitTest
*/
class JUCE_API  UnitTestRunner
{
public:

	/** */
	UnitTestRunner();

	/** Destructor. */
	virtual ~UnitTestRunner();

	/** Runs a set of tests.

		The tests are performed in order, and the results are logged. To run all the
		registered UnitTest objects that exist, use runAllTests().
	*/
	void runTests (const Array<UnitTest*>& tests);

	/** Runs all the UnitTest objects that currently exist.
		This calls runTests() for all the objects listed in UnitTest::getAllTests().
	*/
	void runAllTests();

	/** Sets a flag to indicate whether an assertion should be triggered if a test fails.
		This is true by default.
	*/
	void setAssertOnFailure (bool shouldAssert) noexcept;

	/** Sets a flag to indicate whether successful tests should be logged.
		By default, this is set to false, so that only failures will be displayed in the log.
	*/
	void setPassesAreLogged (bool shouldDisplayPasses) noexcept;

	/** Contains the results of a test.

		One of these objects is instantiated each time UnitTest::beginTest() is called, and
		it contains details of the number of subsequent UnitTest::expect() calls that are
		made.
	*/
	struct TestResult
	{
		/** The main name of this test (i.e. the name of the UnitTest object being run). */
		String unitTestName;
		/** The name of the current subcategory (i.e. the name that was set when UnitTest::beginTest() was called). */
		String subcategoryName;

		/** The number of UnitTest::expect() calls that succeeded. */
		int passes;
		/** The number of UnitTest::expect() calls that failed. */
		int failures;

		/** A list of messages describing the failed tests. */
		StringArray messages;
	};

	/** Returns the number of TestResult objects that have been performed.
		@see getResult
	*/
	int getNumResults() const noexcept;

	/** Returns one of the TestResult objects that describes a test that has been run.
		@see getNumResults
	*/
	const TestResult* getResult (int index) const noexcept;

protected:
	/** Called when the list of results changes.
		You can override this to perform some sort of behaviour when results are added.
	*/
	virtual void resultsUpdated();

	/** Logs a message about the current test progress.
		By default this just writes the message to the Logger class, but you could override
		this to do something else with the data.
	*/
	virtual void logMessage (const String& message);

	/** This can be overridden to let the runner know that it should abort the tests
		as soon as possible, e.g. because the thread needs to stop.
	*/
	virtual bool shouldAbortTests();

private:

	friend class UnitTest;

	UnitTest* currentTest;
	String currentSubCategory;
	OwnedArray <TestResult, CriticalSection> results;
	bool assertOnFailure, logPasses;

	void beginNewTest (UnitTest* test, const String& subCategory);
	void endTest();

	void addPass();
	void addFail (const String& failureMessage);

	JUCE_DECLARE_NON_COPYABLE (UnitTestRunner);
};

#endif   // __JUCE_UNITTEST_JUCEHEADER__

/*** End of inlined file: juce_UnitTest.h ***/


#endif
#ifndef __JUCE_XMLDOCUMENT_JUCEHEADER__

/*** Start of inlined file: juce_XmlDocument.h ***/
#ifndef __JUCE_XMLDOCUMENT_JUCEHEADER__
#define __JUCE_XMLDOCUMENT_JUCEHEADER__

class InputSource;

/**
	Parses a text-based XML document and creates an XmlElement object from it.

	The parser will parse DTDs to load external entities but won't
	check the document for validity against the DTD.

	e.g.
	@code

	XmlDocument myDocument (File ("myfile.xml"));
	XmlElement* mainElement = myDocument.getDocumentElement();

	if (mainElement == nullptr)
	{
		String error = myDocument.getLastParseError();
	}
	else
	{
		..use the element
	}

	@endcode

	Or you can use the static helper methods for quick parsing..

	@code
	XmlElement* xml = XmlDocument::parse (myXmlFile);

	if (xml != nullptr && xml->hasTagName ("foobar"))
	{
		...etc
	@endcode

	@see XmlElement
*/
class JUCE_API  XmlDocument
{
public:

	/** Creates an XmlDocument from the xml text.
		The text doesn't actually get parsed until the getDocumentElement() method is called.
	*/
	XmlDocument (const String& documentText);

	/** Creates an XmlDocument from a file.
		The text doesn't actually get parsed until the getDocumentElement() method is called.
	*/
	XmlDocument (const File& file);

	/** Destructor. */
	~XmlDocument();

	/** Creates an XmlElement object to represent the main document node.

		This method will do the actual parsing of the text, and if there's a
		parse error, it may returns 0 (and you can find out the error using
		the getLastParseError() method).

		See also the parse() methods, which provide a shorthand way to quickly
		parse a file or string.

		@param onlyReadOuterDocumentElement     if true, the parser will only read the
												first section of the file, and will only
												return the outer document element - this
												allows quick checking of large files to
												see if they contain the correct type of
												tag, without having to parse the entire file
		@returns    a new XmlElement which the caller will need to delete, or null if
					there was an error.
		@see getLastParseError
	*/
	XmlElement* getDocumentElement (bool onlyReadOuterDocumentElement = false);

	/** Returns the parsing error that occurred the last time getDocumentElement was called.

		@returns the error, or an empty string if there was no error.
	*/
	const String& getLastParseError() const noexcept;

	/** Sets an input source object to use for parsing documents that reference external entities.

		If the document has been created from a file, this probably won't be needed, but
		if you're parsing some text and there might be a DTD that references external
		files, you may need to create a custom input source that can retrieve the
		other files it needs.

		The object that is passed-in will be deleted automatically when no longer needed.

		@see InputSource
	*/
	void setInputSource (InputSource* newSource) noexcept;

	/** Sets a flag to change the treatment of empty text elements.

		If this is true (the default state), then any text elements that contain only
		whitespace characters will be ingored during parsing. If you need to catch
		whitespace-only text, then you should set this to false before calling the
		getDocumentElement() method.
	*/
	void setEmptyTextElementsIgnored (bool shouldBeIgnored) noexcept;

	/** A handy static method that parses a file.
		This is a shortcut for creating an XmlDocument object and calling getDocumentElement() on it.
		@returns    a new XmlElement which the caller will need to delete, or null if there was an error.
	*/
	static XmlElement* parse (const File& file);

	/** A handy static method that parses some XML data.
		This is a shortcut for creating an XmlDocument object and calling getDocumentElement() on it.
		@returns    a new XmlElement which the caller will need to delete, or null if there was an error.
	*/
	static XmlElement* parse (const String& xmlData);

private:
	String originalText;
	String::CharPointerType input;
	bool outOfData, errorOccurred;

	String lastError, dtdText;
	StringArray tokenisedDTD;
	bool needToLoadDTD, ignoreEmptyTextElements;
	ScopedPointer <InputSource> inputSource;

	void setLastError (const String& desc, bool carryOn);
	void skipHeader();
	void skipNextWhiteSpace();
	juce_wchar readNextChar() noexcept;
	XmlElement* readNextElement (bool alsoParseSubElements);
	void readChildElements (XmlElement* parent);
	int findNextTokenLength() noexcept;
	void readQuotedString (String& result);
	void readEntity (String& result);

	String getFileContents (const String& filename) const;
	String expandEntity (const String& entity);
	String expandExternalEntity (const String& entity);
	String getParameterEntity (const String& entity);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (XmlDocument);
};

#endif   // __JUCE_XMLDOCUMENT_JUCEHEADER__

/*** End of inlined file: juce_XmlDocument.h ***/


#endif
#ifndef __JUCE_XMLELEMENT_JUCEHEADER__

#endif
#ifndef __JUCE_GZIPCOMPRESSOROUTPUTSTREAM_JUCEHEADER__

/*** Start of inlined file: juce_GZIPCompressorOutputStream.h ***/
#ifndef __JUCE_GZIPCOMPRESSOROUTPUTSTREAM_JUCEHEADER__
#define __JUCE_GZIPCOMPRESSOROUTPUTSTREAM_JUCEHEADER__

/**
	A stream which uses zlib to compress the data written into it.

	Important note: When you call flush() on a GZIPCompressorOutputStream,
	the gzip data is closed - this means that no more data can be written to
	it, and any subsequent attempts to call write() will cause an assertion.

	@see GZIPDecompressorInputStream
*/
class JUCE_API  GZIPCompressorOutputStream  : public OutputStream
{
public:

	/** Creates a compression stream.

		@param destStream                       the stream into which the compressed data should
												be written
		@param compressionLevel                 how much to compress the data, between 1 and 9, where
												1 is the fastest/lowest compression, and 9 is the
												slowest/highest compression. Any value outside this range
												indicates that a default compression level should be used.
		@param deleteDestStreamWhenDestroyed    whether or not to delete the destStream object when
												this stream is destroyed
		@param windowBits                       this is used internally to change the window size used
												by zlib - leave it as 0 unless you specifically need to set
												its value for some reason
	*/
	GZIPCompressorOutputStream (OutputStream* destStream,
								int compressionLevel = 0,
								bool deleteDestStreamWhenDestroyed = false,
								int windowBits = 0);

	/** Destructor. */
	~GZIPCompressorOutputStream();

	/** Flushes and closes the stream.
		Note that unlike most streams, when you call flush() on a GZIPCompressorOutputStream,
		the stream is closed - this means that no more data can be written to it, and any
		subsequent attempts to call write() will cause an assertion.
	*/
	void flush();

	int64 getPosition();
	bool setPosition (int64 newPosition);
	bool write (const void* destBuffer, int howMany);

	/** These are preset values that can be used for the constructor's windowBits paramter.
		For more info about this, see the zlib documentation for its windowBits parameter.
	*/
	enum WindowBitsValues
	{
		windowBitsRaw = -15,
		windowBitsGZIP = 15 + 16
	};

private:

	OptionalScopedPointer<OutputStream> destStream;

	class GZIPCompressorHelper;
	friend class ScopedPointer <GZIPCompressorHelper>;
	ScopedPointer <GZIPCompressorHelper> helper;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (GZIPCompressorOutputStream);
};

#endif   // __JUCE_GZIPCOMPRESSOROUTPUTSTREAM_JUCEHEADER__

/*** End of inlined file: juce_GZIPCompressorOutputStream.h ***/


#endif
#ifndef __JUCE_GZIPDECOMPRESSORINPUTSTREAM_JUCEHEADER__

/*** Start of inlined file: juce_GZIPDecompressorInputStream.h ***/
#ifndef __JUCE_GZIPDECOMPRESSORINPUTSTREAM_JUCEHEADER__
#define __JUCE_GZIPDECOMPRESSORINPUTSTREAM_JUCEHEADER__

/**
	This stream will decompress a source-stream using zlib.

	Tip: if you're reading lots of small items from one of these streams, you
		 can increase the performance enormously by passing it through a
		 BufferedInputStream, so that it has to read larger blocks less often.

	@see GZIPCompressorOutputStream
*/
class JUCE_API  GZIPDecompressorInputStream  : public InputStream
{
public:

	/** Creates a decompressor stream.

		@param sourceStream                 the stream to read from
		@param deleteSourceWhenDestroyed    whether or not to delete the source stream
											when this object is destroyed
		@param noWrap                       this is used internally by the ZipFile class
											and should be ignored by user applications
		@param uncompressedStreamLength     if the creator knows the length that the
											uncompressed stream will be, then it can supply this
											value, which will be returned by getTotalLength()
	*/
	GZIPDecompressorInputStream (InputStream* sourceStream,
								 bool deleteSourceWhenDestroyed,
								 bool noWrap = false,
								 int64 uncompressedStreamLength = -1);

	/** Creates a decompressor stream.

		@param sourceStream     the stream to read from - the source stream must not be
								deleted until this object has been destroyed
	*/
	GZIPDecompressorInputStream (InputStream& sourceStream);

	/** Destructor. */
	~GZIPDecompressorInputStream();

	int64 getPosition();
	bool setPosition (int64 pos);
	int64 getTotalLength();
	bool isExhausted();
	int read (void* destBuffer, int maxBytesToRead);

private:
	OptionalScopedPointer<InputStream> sourceStream;
	const int64 uncompressedStreamLength;
	const bool noWrap;
	bool isEof;
	int activeBufferSize;
	int64 originalSourcePos, currentPos;
	HeapBlock <uint8> buffer;

	class GZIPDecompressHelper;
	friend class ScopedPointer <GZIPDecompressHelper>;
	ScopedPointer <GZIPDecompressHelper> helper;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (GZIPDecompressorInputStream);
};

#endif   // __JUCE_GZIPDECOMPRESSORINPUTSTREAM_JUCEHEADER__

/*** End of inlined file: juce_GZIPDecompressorInputStream.h ***/


#endif
#ifndef __JUCE_ZIPFILE_JUCEHEADER__

/*** Start of inlined file: juce_ZipFile.h ***/
#ifndef __JUCE_ZIPFILE_JUCEHEADER__
#define __JUCE_ZIPFILE_JUCEHEADER__

/**
	Decodes a ZIP file from a stream.

	This can enumerate the items in a ZIP file and can create suitable stream objects
	to read each one.
*/
class JUCE_API  ZipFile
{
public:
	/** Creates a ZipFile based for a file. */
	ZipFile (const File& file);

	/** Creates a ZipFile for a given stream.

		@param inputStream                  the stream to read from
		@param deleteStreamWhenDestroyed    if set to true, the object passed-in
											will be deleted when this ZipFile object is deleted
	*/
	ZipFile (InputStream* inputStream, bool deleteStreamWhenDestroyed);

	/** Creates a ZipFile for a given stream.
		The stream will not be owned or deleted by this class - if you want the ZipFile to
		manage the stream's lifetime, use the other constructor.
	*/
	ZipFile (InputStream& inputStream);

	/** Creates a ZipFile for an input source.

		The inputSource object will be owned by the zip file, which will delete
		it later when not needed.
	*/
	ZipFile (InputSource* inputSource);

	/** Destructor. */
	~ZipFile();

	/**
		Contains information about one of the entries in a ZipFile.

		@see ZipFile::getEntry
	*/
	struct ZipEntry
	{
		/** The name of the file, which may also include a partial pathname. */
		String filename;

		/** The file's original size. */
		unsigned int uncompressedSize;

		/** The last time the file was modified. */
		Time fileTime;
	};

	/** Returns the number of items in the zip file. */
	int getNumEntries() const noexcept;

	/** Returns a structure that describes one of the entries in the zip file.

		This may return zero if the index is out of range.

		@see ZipFile::ZipEntry
	*/
	const ZipEntry* getEntry (int index) const noexcept;

	/** Returns the index of the first entry with a given filename.

		This uses a case-sensitive comparison to look for a filename in the
		list of entries. It might return -1 if no match is found.

		@see ZipFile::ZipEntry
	*/
	int getIndexOfFileName (const String& fileName) const noexcept;

	/** Returns a structure that describes one of the entries in the zip file.

		This uses a case-sensitive comparison to look for a filename in the
		list of entries. It might return 0 if no match is found.

		@see ZipFile::ZipEntry
	*/
	const ZipEntry* getEntry (const String& fileName) const noexcept;

	/** Sorts the list of entries, based on the filename.
	*/
	void sortEntriesByFilename();

	/** Creates a stream that can read from one of the zip file's entries.

		The stream that is returned must be deleted by the caller (and
		zero might be returned if a stream can't be opened for some reason).

		The stream must not be used after the ZipFile object that created
		has been deleted.
	*/
	InputStream* createStreamForEntry (int index);

	/** Creates a stream that can read from one of the zip file's entries.

		The stream that is returned must be deleted by the caller (and
		zero might be returned if a stream can't be opened for some reason).

		The stream must not be used after the ZipFile object that created
		has been deleted.
	*/
	InputStream* createStreamForEntry (ZipEntry& entry);

	/** Uncompresses all of the files in the zip file.

		This will expand all the entries into a target directory. The relative
		paths of the entries are used.

		@param targetDirectory      the root folder to uncompress to
		@param shouldOverwriteFiles whether to overwrite existing files with similarly-named ones
		@returns success if the file is successfully unzipped
	*/
	Result uncompressTo (const File& targetDirectory,
						 bool shouldOverwriteFiles = true);

	/** Uncompresses one of the entries from the zip file.

		This will expand the entry and write it in a target directory. The entry's path is used to
		determine which subfolder of the target should contain the new file.

		@param index                the index of the entry to uncompress - this must be a valid index
									between 0 and (getNumEntries() - 1).
		@param targetDirectory      the root folder to uncompress into
		@param shouldOverwriteFiles whether to overwrite existing files with similarly-named ones
		@returns success if all the files are successfully unzipped
	*/
	Result uncompressEntry (int index,
							const File& targetDirectory,
							bool shouldOverwriteFiles = true);

	/** Used to create a new zip file.

		Create a ZipFile::Builder object, and call its addFile() method to add some files,
		then you can write it to a stream with write().

		Currently this just stores the files with no compression.. That will be added
		soon!
	*/
	class Builder
	{
	public:
		Builder();
		~Builder();

		/** Adds a file while should be added to the archive.
			The file isn't read immediately, all the files will be read later when the writeToStream()
			method is called.

			The compressionLevel can be between 0 (no compression), and 9 (maximum compression).
			If the storedPathName parameter is specified, you can customise the partial pathname that
			will be stored for this file.
		*/
		void addFile (const File& fileToAdd, int compressionLevel,
					  const String& storedPathName = String::empty);

		/** Generates the zip file, writing it to the specified stream. */
		bool writeToStream (OutputStream& target) const;

	private:
		class Item;
		friend class OwnedArray<Item>;
		OwnedArray<Item> items;

		JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Builder);
	};

private:

	class ZipInputStream;
	class ZipEntryHolder;
	friend class ZipInputStream;
	friend class ZipEntryHolder;

	OwnedArray <ZipEntryHolder> entries;
	CriticalSection lock;
	InputStream* inputStream;
	ScopedPointer <InputStream> streamToDelete;
	ScopedPointer <InputSource> inputSource;

   #if JUCE_DEBUG
	struct OpenStreamCounter
	{
		OpenStreamCounter() : numOpenStreams (0) {}
		~OpenStreamCounter();

		int numOpenStreams;
	};

	OpenStreamCounter streamCounter;
   #endif

	void init();

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ZipFile);
};

#endif   // __JUCE_ZIPFILE_JUCEHEADER__

/*** End of inlined file: juce_ZipFile.h ***/


#endif
// END_AUTOINCLUDE

}

#if JUCE_MSVC
 #pragma warning (pop)
 #pragma pack (pop)
#endif

#endif   // __JUCE_CORE_JUCEHEADER__

/*** End of inlined file: juce_core.h ***/


/*** Start of inlined file: juce_events.h ***/
#ifndef __JUCE_EVENTS_JUCEHEADER__
#define __JUCE_EVENTS_JUCEHEADER__

namespace juce
{

// START_AUTOINCLUDE messages, broadcasters, timers,
// interprocess, native/juce_ScopedXLock*
#ifndef __JUCE_APPLICATIONBASE_JUCEHEADER__

/*** Start of inlined file: juce_ApplicationBase.h ***/
#ifndef __JUCE_APPLICATIONBASE_JUCEHEADER__
#define __JUCE_APPLICATIONBASE_JUCEHEADER__

/**
	Abstract base class for application classes.

	This class shouldn't be used directly - you'll normally use JUCEApplication as
	the base for your app, and that inherits from this, adding some more functionality
	to it.

	@see JUCEApplication
*/
class JUCE_API  JUCEApplicationBase
{
protected:

	JUCEApplicationBase();

public:
	/** Destructor. */
	virtual ~JUCEApplicationBase();

	/** Returns the global instance of the application object that's running. */
	static JUCEApplicationBase* getInstance() noexcept          { return appInstance; }

	/** Returns the application's name.
		An application must implement this to name itself.
	*/
	virtual const String getApplicationName() = 0;

	/** Returns the application's version number.
	*/
	virtual const String getApplicationVersion() = 0;

	/** Checks whether multiple instances of the app are allowed.

		If you application class returns true for this, more than one instance is
		permitted to run (except on the Mac where this isn't possible).

		If it's false, the second instance won't start, but it you will still get a
		callback to anotherInstanceStarted() to tell you about this - which
		gives you a chance to react to what the user was trying to do.
	*/
	virtual bool moreThanOneInstanceAllowed() = 0;

	/** Called when the application starts.

		This will be called once to let the application do whatever initialisation
		it needs, create its windows, etc.

		After the method returns, the normal event-dispatch loop will be run,
		until the quit() method is called, at which point the shutdown()
		method will be called to let the application clear up anything it needs
		to delete.

		If during the initialise() method, the application decides not to start-up
		after all, it can just call the quit() method and the event loop won't be run.

		@param commandLineParameters    the line passed in does not include the
										name of the executable, just the parameter list.
		@see shutdown, quit
	*/
	virtual void initialise (const String& commandLineParameters) = 0;

	/* Called to allow the application to clear up before exiting.

	   After JUCEApplication::quit() has been called, the event-dispatch loop will
	   terminate, and this method will get called to allow the app to sort itself
	   out.

	   Be careful that nothing happens in this method that might rely on messages
	   being sent, or any kind of window activity, because the message loop is no
	   longer running at this point.

		@see DeletedAtShutdown
	*/
	virtual void shutdown() = 0;

	/** Indicates that the user has tried to start up another instance of the app.

		This will get called even if moreThanOneInstanceAllowed() is false.
	*/
	virtual void anotherInstanceStarted (const String& commandLine) = 0;

	/** Called when the operating system is trying to close the application.

		The default implementation of this method is to call quit(), but it may
		be overloaded to ignore the request or do some other special behaviour
		instead. For example, you might want to offer the user the chance to save
		their changes before quitting, and give them the chance to cancel.

		If you want to send a quit signal to your app, this is the correct method
		to call, because it means that requests that come from the system get handled
		in the same way as those from your own application code. So e.g. you'd
		call this method from a "quit" item on a menu bar.
	*/
	virtual void systemRequestedQuit() = 0;

	/** If any unhandled exceptions make it through to the message dispatch loop, this
		callback will be triggered, in case you want to log them or do some other
		type of error-handling.

		If the type of exception is derived from the std::exception class, the pointer
		passed-in will be valid. If the exception is of unknown type, this pointer
		will be null.
	*/
	virtual void unhandledException (const std::exception* e,
									 const String& sourceFilename,
									 int lineNumber) = 0;

	/** Returns true if this executable is running as an app (as opposed to being a plugin
		or other kind of shared library. */
	static inline bool isStandaloneApp() noexcept                   { return createInstance != 0; }

   #ifndef DOXYGEN
	static void appWillTerminateByForce();
	typedef JUCEApplicationBase* (*CreateInstanceFunction)();
	static CreateInstanceFunction createInstance;

protected:
	virtual int shutdownApp() = 0;
   #endif

private:

	static JUCEApplicationBase* appInstance;

	JUCE_DECLARE_NON_COPYABLE (JUCEApplicationBase);
};

#endif   // __JUCE_APPLICATIONBASE_JUCEHEADER__

/*** End of inlined file: juce_ApplicationBase.h ***/


#endif
#ifndef __JUCE_CALLBACKMESSAGE_JUCEHEADER__

/*** Start of inlined file: juce_CallbackMessage.h ***/
#ifndef __JUCE_CALLBACKMESSAGE_JUCEHEADER__
#define __JUCE_CALLBACKMESSAGE_JUCEHEADER__


/*** Start of inlined file: juce_Message.h ***/
#ifndef __JUCE_MESSAGE_JUCEHEADER__
#define __JUCE_MESSAGE_JUCEHEADER__

class MessageListener;
class MessageManager;

/** The base class for objects that can be delivered to a MessageListener.

	If you want to send a message that carries some kind of custom data, just
	create a subclass of Message with some appropriate member variables to hold
	your data.

	@see MessageListener, MessageManager, ActionListener, ChangeListener
*/
class JUCE_API  Message  : public ReferenceCountedObject
{
public:

	/** Creates an uninitialised message.

		The class's variables will also be left uninitialised.
	*/
	Message() noexcept;

	/** Destructor. */
	virtual ~Message();

	/** A typedef for pointers to messages. */
	typedef ReferenceCountedObjectPtr <Message> Ptr;

private:
	friend class MessageListener;
	friend class MessageManager;
	MessageListener* messageRecipient;

	// Avoid the leak-detector because for plugins, the host can unload our DLL with undelivered
	// messages still in the system event queue. These aren't harmful, but can cause annoying assertions.
	JUCE_DECLARE_NON_COPYABLE (Message);
};

#endif   // __JUCE_MESSAGE_JUCEHEADER__

/*** End of inlined file: juce_Message.h ***/

/**
	A message that calls a custom function when it gets delivered.

	You can use this class to fire off actions that you want to be performed later
	on the message thread.

	Unlike other Message objects, these don't get sent to a MessageListener, you
	just call the post() method to send them, and when they arrive, your
	messageCallback() method will automatically be invoked.

	Always create an instance of a CallbackMessage on the heap, as it will be
	deleted automatically after the message has been delivered.

	@see MessageListener, MessageManager, ActionListener, ChangeListener
*/
class JUCE_API  CallbackMessage   : public Message
{
public:

	CallbackMessage() noexcept;

	/** Destructor. */
	~CallbackMessage();

	/** Called when the message is delivered.

		You should implement this method and make it do whatever action you want
		to perform.

		Note that like all other messages, this object will be deleted immediately
		after this method has been invoked.
	*/
	virtual void messageCallback() = 0;

	/** Instead of sending this message to a MessageListener, just call this method
		to post it to the event queue.

		After you've called this, this object will belong to the MessageManager,
		which will delete it later. So make sure you don't delete the object yourself,
		call post() more than once, or call post() on a stack-based obect!
	*/
	void post();

private:

	// Avoid the leak-detector because for plugins, the host can unload our DLL with undelivered
	// messages still in the system event queue. These aren't harmful, but can cause annoying assertions.
	JUCE_DECLARE_NON_COPYABLE (CallbackMessage);
};

#endif   // __JUCE_CALLBACKMESSAGE_JUCEHEADER__

/*** End of inlined file: juce_CallbackMessage.h ***/


#endif
#ifndef __JUCE_DELETEDATSHUTDOWN_JUCEHEADER__

/*** Start of inlined file: juce_DeletedAtShutdown.h ***/
#ifndef __JUCE_DELETEDATSHUTDOWN_JUCEHEADER__
#define __JUCE_DELETEDATSHUTDOWN_JUCEHEADER__

/**
	Classes derived from this will be automatically deleted when the application exits.

	After JUCEApplication::shutdown() has been called, any objects derived from
	DeletedAtShutdown which are still in existence will be deleted in the reverse
	order to that in which they were created.

	So if you've got a singleton and don't want to have to explicitly delete it, just
	inherit from this and it'll be taken care of.
*/
class JUCE_API  DeletedAtShutdown
{
protected:
	/** Creates a DeletedAtShutdown object. */
	DeletedAtShutdown();

	/** Destructor.

		It's ok to delete these objects explicitly - it's only the ones left
		dangling at the end that will be deleted automatically.
	*/
	virtual ~DeletedAtShutdown();

public:
	/** Deletes all extant objects.

		This shouldn't be used by applications, as it's called automatically
		in the shutdown code of the JUCEApplication class.
	*/
	static void deleteAll();

private:
	static Array <DeletedAtShutdown*>& getObjects();

	JUCE_DECLARE_NON_COPYABLE (DeletedAtShutdown);
};

#endif   // __JUCE_DELETEDATSHUTDOWN_JUCEHEADER__

/*** End of inlined file: juce_DeletedAtShutdown.h ***/


#endif
#ifndef __JUCE_MESSAGE_JUCEHEADER__

#endif
#ifndef __JUCE_MESSAGELISTENER_JUCEHEADER__

/*** Start of inlined file: juce_MessageListener.h ***/
#ifndef __JUCE_MESSAGELISTENER_JUCEHEADER__
#define __JUCE_MESSAGELISTENER_JUCEHEADER__

/**
	MessageListener subclasses can post and receive Message objects.

	@see Message, MessageManager, ActionListener, ChangeListener
*/
class JUCE_API  MessageListener
{
protected:

	/** Creates a MessageListener. */
	MessageListener() noexcept;

public:

	/** Destructor.

		When a MessageListener is deleted, it removes itself from a global list
		of registered listeners, so that the isValidMessageListener() method
		will no longer return true.
	*/
	virtual ~MessageListener();

	/** This is the callback method that receives incoming messages.

		This is called by the MessageManager from its dispatch loop.

		@see postMessage
	*/
	virtual void handleMessage (const Message& message) = 0;

	/** Sends a message to the message queue, for asynchronous delivery to this listener
		later on.

		This method can be called safely by any thread.

		@param message      the message object to send - this will be deleted
							automatically by the message queue, so don't keep any
							references to it after calling this method.
		@see handleMessage
	*/
	void postMessage (Message* message) const;

	/** Checks whether this MessageListener has been deleted.

		Although not foolproof, this method is safe to call on dangling or null
		pointers. A list of active MessageListeners is kept internally, so this
		checks whether the object is on this list or not.

		Note that it's possible to get a false-positive here, if an object is
		deleted and another is subsequently created that happens to be at the
		exact same memory location, but I can't think of a good way of avoiding
		this.
	*/
	bool isValidMessageListener() const noexcept;
};

#endif   // __JUCE_MESSAGELISTENER_JUCEHEADER__

/*** End of inlined file: juce_MessageListener.h ***/


#endif
#ifndef __JUCE_MESSAGEMANAGER_JUCEHEADER__

/*** Start of inlined file: juce_MessageManager.h ***/
#ifndef __JUCE_MESSAGEMANAGER_JUCEHEADER__
#define __JUCE_MESSAGEMANAGER_JUCEHEADER__

class MessageManagerLock;
class ThreadPoolJob;
class ActionListener;
class ActionBroadcaster;

/** See MessageManager::callFunctionOnMessageThread() for use of this function type
*/
typedef void* (MessageCallbackFunction) (void* userData);

/** Delivers Message objects to MessageListeners, and handles the event-dispatch loop.

	@see Message, MessageListener, MessageManagerLock, JUCEApplication
*/
class JUCE_API  MessageManager
{
public:

	/** Returns the global instance of the MessageManager. */
	static MessageManager* getInstance();

	/** Deletes the global MessageManager instance.
		Does nothing if no instance had been created.
	*/
	static void deleteInstance();

	/** Runs the event dispatch loop until a stop message is posted.

		This method is only intended to be run by the application's startup routine,
		as it blocks, and will only return after the stopDispatchLoop() method has been used.

		@see stopDispatchLoop
	*/
	void runDispatchLoop();

	/** Sends a signal that the dispatch loop should terminate.

		After this is called, the runDispatchLoop() or runDispatchLoopUntil() methods
		will be interrupted and will return.

		@see runDispatchLoop
	*/
	void stopDispatchLoop();

	/** Returns true if the stopDispatchLoop() method has been called.
	*/
	bool hasStopMessageBeenSent() const noexcept        { return quitMessagePosted; }

   #if JUCE_MODAL_LOOPS_PERMITTED
	/** Synchronously dispatches messages until a given time has elapsed.

		Returns false if a quit message has been posted by a call to stopDispatchLoop(),
		otherwise returns true.
	*/
	bool runDispatchLoopUntil (int millisecondsToRunFor);
   #endif

	/** Calls a function using the message-thread.

		This can be used by any thread to cause this function to be called-back
		by the message thread. If it's the message-thread that's calling this method,
		then the function will just be called; if another thread is calling, a message
		will be posted to the queue, and this method will block until that message
		is delivered, the function is called, and the result is returned.

		Be careful not to cause any deadlocks with this! It's easy to do - e.g. if the caller
		thread has a critical section locked, which an unrelated message callback then tries to lock
		before the message thread gets round to processing this callback.

		@param callback     the function to call - its signature must be @code
							void* myCallbackFunction (void*) @endcode
		@param userData     a user-defined pointer that will be passed to the function that gets called
		@returns            the value that the callback function returns.
		@see MessageManagerLock
	*/
	void* callFunctionOnMessageThread (MessageCallbackFunction* callback, void* userData);

	/** Returns true if the caller-thread is the message thread. */
	bool isThisTheMessageThread() const noexcept;

	/** Called to tell the manager that the current thread is the one that's running the dispatch loop.

		(Best to ignore this method unless you really know what you're doing..)
		@see getCurrentMessageThread
	*/
	void setCurrentThreadAsMessageThread();

	/** Returns the ID of the current message thread, as set by setCurrentMessageThread().

		(Best to ignore this method unless you really know what you're doing..)
		@see setCurrentMessageThread
	*/
	Thread::ThreadID getCurrentMessageThread() const noexcept            { return messageThreadId; }

	/** Returns true if the caller thread has currenltly got the message manager locked.

		see the MessageManagerLock class for more info about this.

		This will be true if the caller is the message thread, because that automatically
		gains a lock while a message is being dispatched.
	*/
	bool currentThreadHasLockedMessageManager() const noexcept;

	/** Sends a message to all other JUCE applications that are running.

		@param messageText      the string that will be passed to the actionListenerCallback()
								method of the broadcast listeners in the other app.
		@see registerBroadcastListener, ActionListener
	*/
	static void broadcastMessage (const String& messageText);

	/** Registers a listener to get told about broadcast messages.

		The actionListenerCallback() callback's string parameter
		is the message passed into broadcastMessage().

		@see broadcastMessage
	*/
	void registerBroadcastListener (ActionListener* listener);

	/** Deregisters a broadcast listener. */
	void deregisterBroadcastListener (ActionListener* listener);

   #ifndef DOXYGEN
	// Internal methods - do not use!
	void deliverMessage (Message*);
	void deliverBroadcastMessage (const String&);
	~MessageManager() noexcept;
   #endif

private:

	MessageManager() noexcept;

	friend class MessageListener;
	friend class ChangeBroadcaster;
	friend class ActionBroadcaster;
	friend class CallbackMessage;
	static MessageManager* instance;

	SortedSet <const MessageListener*> messageListeners;
	ScopedPointer <ActionBroadcaster> broadcaster;

	friend class JUCEApplication;
	bool quitMessagePosted, quitMessageReceived;
	Thread::ThreadID messageThreadId;

	friend class MessageManagerLock;
	Thread::ThreadID volatile threadWithLock;
	CriticalSection lockingLock;

	void postMessageToQueue (Message* message);
	static bool postMessageToSystemQueue (Message*);
	static void* exitModalLoopCallback (void*);
	static void doPlatformSpecificInitialisation();
	static void doPlatformSpecificShutdown();
	static bool dispatchNextMessageOnSystemQueue (bool returnIfNoPendingMessages);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (MessageManager);
};

/** Used to make sure that the calling thread has exclusive access to the message loop.

	Because it's not thread-safe to call any of the Component or other UI classes
	from threads other than the message thread, one of these objects can be used to
	lock the message loop and allow this to be done. The message thread will be
	suspended for the lifetime of the MessageManagerLock object, so create one on
	the stack like this: @code
	void MyThread::run()
	{
		someData = 1234;

		const MessageManagerLock mmLock;
		// the event loop will now be locked so it's safe to make a few calls..

		myComponent->setBounds (newBounds);
		myComponent->repaint();

		// ..the event loop will now be unlocked as the MessageManagerLock goes out of scope
	}
	@endcode

	Obviously be careful not to create one of these and leave it lying around, or
	your app will grind to a halt!

	Another caveat is that using this in conjunction with other CriticalSections
	can create lots of interesting ways of producing a deadlock! In particular, if
	your message thread calls stopThread() for a thread that uses these locks,
	you'll get an (occasional) deadlock..

	@see MessageManager, MessageManager::currentThreadHasLockedMessageManager
*/
class JUCE_API MessageManagerLock
{
public:

	/** Tries to acquire a lock on the message manager.

		The constructor attempts to gain a lock on the message loop, and the lock will be
		kept for the lifetime of this object.

		Optionally, you can pass a thread object here, and while waiting to obtain the lock,
		this method will keep checking whether the thread has been given the
		Thread::signalThreadShouldExit() signal. If this happens, then it will return
		without gaining the lock. If you pass a thread, you must check whether the lock was
		successful by calling lockWasGained(). If this is false, your thread is being told to
		die, so you should take evasive action.

		If you pass nullptr for the thread object, it will wait indefinitely for the lock - be
		careful when doing this, because it's very easy to deadlock if your message thread
		attempts to call stopThread() on a thread just as that thread attempts to get the
		message lock.

		If the calling thread already has the lock, nothing will be done, so it's safe and
		quick to use these locks recursively.

		E.g.
		@code
		void run()
		{
			...

			while (! threadShouldExit())
			{
				MessageManagerLock mml (Thread::getCurrentThread());

				if (! mml.lockWasGained())
					return; // another thread is trying to kill us!

				..do some locked stuff here..
			}

			..and now the MM is now unlocked..
		}
		@endcode

	*/
	MessageManagerLock (Thread* threadToCheckForExitSignal = nullptr);

	/** This has the same behaviour as the other constructor, but takes a ThreadPoolJob
		instead of a thread.

		See the MessageManagerLock (Thread*) constructor for details on how this works.
	*/
	MessageManagerLock (ThreadPoolJob* jobToCheckForExitSignal);

	/** Releases the current thread's lock on the message manager.

		Make sure this object is created and deleted by the same thread,
		otherwise there are no guarantees what will happen!
   */
	~MessageManagerLock() noexcept;

	/** Returns true if the lock was successfully acquired.
		(See the constructor that takes a Thread for more info).
	*/
	bool lockWasGained() const noexcept                     { return locked; }

private:
	class BlockingMessage;
	friend class ReferenceCountedObjectPtr<BlockingMessage>;
	ReferenceCountedObjectPtr<BlockingMessage> blockingMessage;
	bool locked;

	bool attemptLock (Thread*, ThreadPoolJob*);

	JUCE_DECLARE_NON_COPYABLE (MessageManagerLock);
};

#endif   // __JUCE_MESSAGEMANAGER_JUCEHEADER__

/*** End of inlined file: juce_MessageManager.h ***/


#endif
#ifndef __JUCE_ACTIONBROADCASTER_JUCEHEADER__

/*** Start of inlined file: juce_ActionBroadcaster.h ***/
#ifndef __JUCE_ACTIONBROADCASTER_JUCEHEADER__
#define __JUCE_ACTIONBROADCASTER_JUCEHEADER__


/*** Start of inlined file: juce_ActionListener.h ***/
#ifndef __JUCE_ACTIONLISTENER_JUCEHEADER__
#define __JUCE_ACTIONLISTENER_JUCEHEADER__

/**
	Receives callbacks to indicate that some kind of event has occurred.

	Used by various classes, e.g. buttons when they are pressed, to tell listeners
	about something that's happened.

	@see ActionBroadcaster, ChangeListener
*/
class JUCE_API  ActionListener
{
public:
	/** Destructor. */
	virtual ~ActionListener()  {}

	/** Overridden by your subclass to receive the callback.

		@param message  the string that was specified when the event was triggered
						by a call to ActionBroadcaster::sendActionMessage()
	*/
	virtual void actionListenerCallback (const String& message) = 0;
};

#endif   // __JUCE_ACTIONLISTENER_JUCEHEADER__

/*** End of inlined file: juce_ActionListener.h ***/

/** Manages a list of ActionListeners, and can send them messages.

	To quickly add methods to your class that can add/remove action
	listeners and broadcast to them, you can derive from this.

	@see ActionListener, ChangeListener
*/
class JUCE_API  ActionBroadcaster
{
public:

	/** Creates an ActionBroadcaster. */
	ActionBroadcaster();

	/** Destructor. */
	virtual ~ActionBroadcaster();

	/** Adds a listener to the list.
		Trying to add a listener that's already on the list will have no effect.
	*/
	void addActionListener (ActionListener* listener);

	/** Removes a listener from the list.
		If the listener isn't on the list, this won't have any effect.
	*/
	void removeActionListener (ActionListener* listener);

	/** Removes all listeners from the list. */
	void removeAllActionListeners();

	/** Broadcasts a message to all the registered listeners.
		@see ActionListener::actionListenerCallback
	*/
	void sendActionMessage (const String& message) const;

private:

	class CallbackReceiver  : public MessageListener
	{
	public:
		CallbackReceiver();
		void handleMessage (const Message&);

		ActionBroadcaster* owner;
	};

	friend class CallbackReceiver;
	CallbackReceiver callback;
	SortedSet <ActionListener*> actionListeners;
	CriticalSection actionListenerLock;

	JUCE_DECLARE_NON_COPYABLE (ActionBroadcaster);
};

#endif   // __JUCE_ACTIONBROADCASTER_JUCEHEADER__

/*** End of inlined file: juce_ActionBroadcaster.h ***/


#endif
#ifndef __JUCE_ACTIONLISTENER_JUCEHEADER__

#endif
#ifndef __JUCE_ASYNCUPDATER_JUCEHEADER__

/*** Start of inlined file: juce_AsyncUpdater.h ***/
#ifndef __JUCE_ASYNCUPDATER_JUCEHEADER__
#define __JUCE_ASYNCUPDATER_JUCEHEADER__

/**
	Has a callback method that is triggered asynchronously.

	This object allows an asynchronous callback function to be triggered, for
	tasks such as coalescing multiple updates into a single callback later on.

	Basically, one or more calls to the triggerAsyncUpdate() will result in the
	message thread calling handleAsyncUpdate() as soon as it can.
*/
class JUCE_API  AsyncUpdater
{
public:

	/** Creates an AsyncUpdater object. */
	AsyncUpdater();

	/** Destructor.

		If there are any pending callbacks when the object is deleted, these are lost.
	*/
	virtual ~AsyncUpdater();

	/** Causes the callback to be triggered at a later time.

		This method returns immediately, having made sure that a callback
		to the handleAsyncUpdate() method will occur as soon as possible.

		If an update callback is already pending but hasn't happened yet, calls
		to this method will be ignored.

		It's thread-safe to call this method from any number of threads without
		needing to worry about locking.
	*/
	void triggerAsyncUpdate();

	/** This will stop any pending updates from happening.

		If called after triggerAsyncUpdate() and before the handleAsyncUpdate()
		callback happens, this will cancel the handleAsyncUpdate() callback.

		Note that this method simply cancels the next callback - if a callback is already
		in progress on a different thread, this won't block until it finishes, so there's
		no guarantee that the callback isn't still running when you return from
	*/
	void cancelPendingUpdate() noexcept;

	/** If an update has been triggered and is pending, this will invoke it
		synchronously.

		Use this as a kind of "flush" operation - if an update is pending, the
		handleAsyncUpdate() method will be called immediately; if no update is
		pending, then nothing will be done.

		Because this may invoke the callback, this method must only be called on
		the main event thread.
	*/
	void handleUpdateNowIfNeeded();

	/** Returns true if there's an update callback in the pipeline. */
	bool isUpdatePending() const noexcept;

	/** Called back to do whatever your class needs to do.

		This method is called by the message thread at the next convenient time
		after the triggerAsyncUpdate() method has been called.
	*/
	virtual void handleAsyncUpdate() = 0;

private:

	class AsyncUpdaterMessage;
	friend class ReferenceCountedObjectPtr<AsyncUpdaterMessage>;
	ReferenceCountedObjectPtr<AsyncUpdaterMessage> message;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AsyncUpdater);
};

#endif   // __JUCE_ASYNCUPDATER_JUCEHEADER__

/*** End of inlined file: juce_AsyncUpdater.h ***/


#endif
#ifndef __JUCE_CHANGEBROADCASTER_JUCEHEADER__

/*** Start of inlined file: juce_ChangeBroadcaster.h ***/
#ifndef __JUCE_CHANGEBROADCASTER_JUCEHEADER__
#define __JUCE_CHANGEBROADCASTER_JUCEHEADER__


/*** Start of inlined file: juce_ChangeListener.h ***/
#ifndef __JUCE_CHANGELISTENER_JUCEHEADER__
#define __JUCE_CHANGELISTENER_JUCEHEADER__

class ChangeBroadcaster;

/**
	Receives change event callbacks that are sent out by a ChangeBroadcaster.

	A ChangeBroadcaster keeps a set of listeners to which it broadcasts a message when
	the ChangeBroadcaster::sendChangeMessage() method is called. A subclass of
	ChangeListener is used to receive these callbacks.

	Note that the major difference between an ActionListener and a ChangeListener
	is that for a ChangeListener, multiple changes will be coalesced into fewer
	callbacks, but ActionListeners perform one callback for every event posted.

	@see ChangeBroadcaster, ActionListener
*/
class JUCE_API  ChangeListener
{
public:
	/** Destructor. */
	virtual ~ChangeListener()  {}

	/** Your subclass should implement this method to receive the callback.
		@param source the ChangeBroadcaster that triggered the callback.
	*/
	virtual void changeListenerCallback (ChangeBroadcaster* source) = 0;

   #if JUCE_CATCH_DEPRECATED_CODE_MISUSE
	// This method's signature has changed to take a ChangeBroadcaster parameter - please update your code!
	private: virtual int changeListenerCallback (void*) { return 0; }
   #endif
};

#endif   // __JUCE_CHANGELISTENER_JUCEHEADER__

/*** End of inlined file: juce_ChangeListener.h ***/


/*** Start of inlined file: juce_ListenerList.h ***/
#ifndef __JUCE_LISTENERLIST_JUCEHEADER__
#define __JUCE_LISTENERLIST_JUCEHEADER__

/**
	Holds a set of objects and can invoke a member function callback on each object
	in the set with a single call.

	Use a ListenerList to manage a set of objects which need a callback, and you
	can invoke a member function by simply calling call() or callChecked().

	E.g.
	@code
	class MyListenerType
	{
	public:
		void myCallbackMethod (int foo, bool bar);
	};

	ListenerList <MyListenerType> listeners;
	listeners.add (someCallbackObjects...);

	// This will invoke myCallbackMethod (1234, true) on each of the objects
	// in the list...
	listeners.call (&MyListenerType::myCallbackMethod, 1234, true);
	@endcode

	If you add or remove listeners from the list during one of the callbacks - i.e. while
	it's in the middle of iterating the listeners, then it's guaranteed that no listeners
	will be mistakenly called after they've been removed, but it may mean that some of the
	listeners could be called more than once, or not at all, depending on the list's order.

	Sometimes, there's a chance that invoking one of the callbacks might result in the
	list itself being deleted while it's still iterating - to survive this situation, you can
	use callChecked() instead of call(), passing it a local object to act as a "BailOutChecker".
	The BailOutChecker must implement a method of the form "bool shouldBailOut()", and
	the list will check this after each callback to determine whether it should abort the
	operation. For an example of a bail-out checker, see the Component::BailOutChecker class,
	which can be used to check when a Component has been deleted. See also
	ListenerList::DummyBailOutChecker, which is a dummy checker that always returns false.
*/
template <class ListenerClass,
		  class ArrayType = Array <ListenerClass*> >
class ListenerList
{
	// Horrible macros required to support VC7..
	#ifndef DOXYGEN
	 #if JUCE_VC8_OR_EARLIER
	   #define LL_TEMPLATE(a)   typename P##a, typename Q##a
	   #define LL_PARAM(a)      Q##a& param##a
	 #else
	   #define LL_TEMPLATE(a)   typename P##a
	   #define LL_PARAM(a)      PARAMETER_TYPE(P##a) param##a
	 #endif
	#endif

public:

	/** Creates an empty list. */
	ListenerList()
	{
	}

	/** Destructor. */
	~ListenerList()
	{
	}

	/** Adds a listener to the list.
		A listener can only be added once, so if the listener is already in the list,
		this method has no effect.
		@see remove
	*/
	void add (ListenerClass* const listenerToAdd)
	{
		// Listeners can't be null pointers!
		jassert (listenerToAdd != nullptr);

		if (listenerToAdd != nullptr)
			listeners.addIfNotAlreadyThere (listenerToAdd);
	}

	/** Removes a listener from the list.
		If the listener wasn't in the list, this has no effect.
	*/
	void remove (ListenerClass* const listenerToRemove)
	{
		// Listeners can't be null pointers!
		jassert (listenerToRemove != nullptr);

		listeners.removeValue (listenerToRemove);
	}

	/** Returns the number of registered listeners. */
	int size() const noexcept
	{
		return listeners.size();
	}

	/** Returns true if any listeners are registered. */
	bool isEmpty() const noexcept
	{
		return listeners.size() == 0;
	}

	/** Clears the list. */
	void clear()
	{
		listeners.clear();
	}

	/** Returns true if the specified listener has been added to the list. */
	bool contains (ListenerClass* const listener) const noexcept
	{
		return listeners.contains (listener);
	}

	/** Calls a member function on each listener in the list, with no parameters. */
	void call (void (ListenerClass::*callbackFunction) ())
	{
		callChecked (static_cast <const DummyBailOutChecker&> (DummyBailOutChecker()), callbackFunction);
	}

	/** Calls a member function on each listener in the list, with no parameters and a bail-out-checker.
		See the class description for info about writing a bail-out checker. */
	template <class BailOutCheckerType>
	void callChecked (const BailOutCheckerType& bailOutChecker,
					  void (ListenerClass::*callbackFunction) ())
	{
		for (Iterator<BailOutCheckerType, ThisType> iter (*this); iter.next (bailOutChecker);)
			(iter.getListener()->*callbackFunction) ();
	}

	/** Calls a member function on each listener in the list, with 1 parameter. */
	template <LL_TEMPLATE(1)>
	void call (void (ListenerClass::*callbackFunction) (P1), LL_PARAM(1))
	{
		for (Iterator<DummyBailOutChecker, ThisType> iter (*this); iter.next();)
			(iter.getListener()->*callbackFunction) (param1);
	}

	/** Calls a member function on each listener in the list, with one parameter and a bail-out-checker.
		See the class description for info about writing a bail-out checker. */
	template <class BailOutCheckerType, LL_TEMPLATE(1)>
	void callChecked (const BailOutCheckerType& bailOutChecker,
					  void (ListenerClass::*callbackFunction) (P1),
					  LL_PARAM(1))
	{
		for (Iterator<BailOutCheckerType, ThisType> iter (*this); iter.next (bailOutChecker);)
			(iter.getListener()->*callbackFunction) (param1);
	}

	/** Calls a member function on each listener in the list, with 2 parameters. */
	template <LL_TEMPLATE(1), LL_TEMPLATE(2)>
	void call (void (ListenerClass::*callbackFunction) (P1, P2),
			   LL_PARAM(1), LL_PARAM(2))
	{
		for (Iterator<DummyBailOutChecker, ThisType> iter (*this); iter.next();)
			(iter.getListener()->*callbackFunction) (param1, param2);
	}

	/** Calls a member function on each listener in the list, with 2 parameters and a bail-out-checker.
		See the class description for info about writing a bail-out checker. */
	template <class BailOutCheckerType, LL_TEMPLATE(1), LL_TEMPLATE(2)>
	void callChecked (const BailOutCheckerType& bailOutChecker,
					  void (ListenerClass::*callbackFunction) (P1, P2),
					  LL_PARAM(1), LL_PARAM(2))
	{
		for (Iterator<BailOutCheckerType, ThisType> iter (*this); iter.next (bailOutChecker);)
			(iter.getListener()->*callbackFunction) (param1, param2);
	}

	/** Calls a member function on each listener in the list, with 3 parameters. */
	template <LL_TEMPLATE(1), LL_TEMPLATE(2), LL_TEMPLATE(3)>
	void call (void (ListenerClass::*callbackFunction) (P1, P2, P3),
			   LL_PARAM(1), LL_PARAM(2), LL_PARAM(3))
	{
		for (Iterator<DummyBailOutChecker, ThisType> iter (*this); iter.next();)
			(iter.getListener()->*callbackFunction) (param1, param2, param3);
	}

	/** Calls a member function on each listener in the list, with 3 parameters and a bail-out-checker.
		See the class description for info about writing a bail-out checker. */
	template <class BailOutCheckerType, LL_TEMPLATE(1), LL_TEMPLATE(2), LL_TEMPLATE(3)>
	void callChecked (const BailOutCheckerType& bailOutChecker,
					  void (ListenerClass::*callbackFunction) (P1, P2, P3),
					  LL_PARAM(1), LL_PARAM(2), LL_PARAM(3))
	{
		for (Iterator<BailOutCheckerType, ThisType> iter (*this); iter.next (bailOutChecker);)
			(iter.getListener()->*callbackFunction) (param1, param2, param3);
	}

	/** Calls a member function on each listener in the list, with 4 parameters. */
	template <LL_TEMPLATE(1), LL_TEMPLATE(2), LL_TEMPLATE(3), LL_TEMPLATE(4)>
	void call (void (ListenerClass::*callbackFunction) (P1, P2, P3, P4),
			   LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4))
	{
		for (Iterator<DummyBailOutChecker, ThisType> iter (*this); iter.next();)
			(iter.getListener()->*callbackFunction) (param1, param2, param3, param4);
	}

	/** Calls a member function on each listener in the list, with 4 parameters and a bail-out-checker.
		See the class description for info about writing a bail-out checker. */
	template <class BailOutCheckerType, LL_TEMPLATE(1), LL_TEMPLATE(2), LL_TEMPLATE(3), LL_TEMPLATE(4)>
	void callChecked (const BailOutCheckerType& bailOutChecker,
					  void (ListenerClass::*callbackFunction) (P1, P2, P3, P4),
					  LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4))
	{
		for (Iterator<BailOutCheckerType, ThisType> iter (*this); iter.next (bailOutChecker);)
			(iter.getListener()->*callbackFunction) (param1, param2, param3, param4);
	}

	/** Calls a member function on each listener in the list, with 5 parameters. */
	template <LL_TEMPLATE(1), LL_TEMPLATE(2), LL_TEMPLATE(3), LL_TEMPLATE(4), LL_TEMPLATE(5)>
	void call (void (ListenerClass::*callbackFunction) (P1, P2, P3, P4, P5),
			   LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5))
	{
		for (Iterator<DummyBailOutChecker, ThisType> iter (*this); iter.next();)
			(iter.getListener()->*callbackFunction) (param1, param2, param3, param4, param5);
	}

	/** Calls a member function on each listener in the list, with 5 parameters and a bail-out-checker.
		See the class description for info about writing a bail-out checker. */
	template <class BailOutCheckerType, LL_TEMPLATE(1), LL_TEMPLATE(2), LL_TEMPLATE(3), LL_TEMPLATE(4), LL_TEMPLATE(5)>
	void callChecked (const BailOutCheckerType& bailOutChecker,
					  void (ListenerClass::*callbackFunction) (P1, P2, P3, P4, P5),
					  LL_PARAM(1), LL_PARAM(2), LL_PARAM(3), LL_PARAM(4), LL_PARAM(5))
	{
		for (Iterator<BailOutCheckerType, ThisType> iter (*this); iter.next (bailOutChecker);)
			(iter.getListener()->*callbackFunction) (param1, param2, param3, param4, param5);
	}

	/** A dummy bail-out checker that always returns false.
		See the ListenerList notes for more info about bail-out checkers.
	*/
	class DummyBailOutChecker
	{
	public:
		inline bool shouldBailOut() const noexcept     { return false; }
	};

	/** Iterates the listeners in a ListenerList. */
	template <class BailOutCheckerType, class ListType>
	class Iterator
	{
	public:

		Iterator (const ListType& list_) noexcept
			: list (list_), index (list_.size())
		{}

		~Iterator() noexcept {}

		bool next() noexcept
		{
			if (index <= 0)
				return false;

			const int listSize = list.size();

			if (--index < listSize)
				return true;

			index = listSize - 1;
			return index >= 0;
		}

		bool next (const BailOutCheckerType& bailOutChecker) noexcept
		{
			return (! bailOutChecker.shouldBailOut()) && next();
		}

		typename ListType::ListenerType* getListener() const noexcept
		{
			return list.getListeners().getUnchecked (index);
		}

	private:
		const ListType& list;
		int index;

		JUCE_DECLARE_NON_COPYABLE (Iterator);
	};

	typedef ListenerList<ListenerClass, ArrayType> ThisType;
	typedef ListenerClass ListenerType;

	const ArrayType& getListeners() const noexcept          { return listeners; }

private:

	ArrayType listeners;

	JUCE_DECLARE_NON_COPYABLE (ListenerList);

	#undef LL_TEMPLATE
	#undef LL_PARAM
};

#endif   // __JUCE_LISTENERLIST_JUCEHEADER__

/*** End of inlined file: juce_ListenerList.h ***/

/**
	Holds a list of ChangeListeners, and sends messages to them when instructed.

	@see ChangeListener
*/
class JUCE_API  ChangeBroadcaster
{
public:

	/** Creates an ChangeBroadcaster. */
	ChangeBroadcaster() noexcept;

	/** Destructor. */
	virtual ~ChangeBroadcaster();

	/** Registers a listener to receive change callbacks from this broadcaster.
		Trying to add a listener that's already on the list will have no effect.
	*/
	void addChangeListener (ChangeListener* listener);

	/** Unregisters a listener from the list.
		If the listener isn't on the list, this won't have any effect.
	*/
	void removeChangeListener (ChangeListener* listener);

	/** Removes all listeners from the list. */
	void removeAllChangeListeners();

	/** Causes an asynchronous change message to be sent to all the registered listeners.

		The message will be delivered asynchronously by the main message thread, so this
		method will return immediately. To call the listeners synchronously use
		sendSynchronousChangeMessage().
	*/
	void sendChangeMessage();

	/** Sends a synchronous change message to all the registered listeners.

		This will immediately call all the listeners that are registered. For thread-safety
		reasons, you must only call this method on the main message thread.

		@see dispatchPendingMessages
	*/
	void sendSynchronousChangeMessage();

	/** If a change message has been sent but not yet dispatched, this will call
		sendSynchronousChangeMessage() to make the callback immediately.

		For thread-safety reasons, you must only call this method on the main message thread.
	*/
	void dispatchPendingMessages();

private:

	class ChangeBroadcasterCallback  : public AsyncUpdater
	{
	public:
		ChangeBroadcasterCallback();
		void handleAsyncUpdate();

		ChangeBroadcaster* owner;
	};

	friend class ChangeBroadcasterCallback;
	ChangeBroadcasterCallback callback;
	ListenerList <ChangeListener> changeListeners;

	void callListeners();

	JUCE_DECLARE_NON_COPYABLE (ChangeBroadcaster);
};

#endif   // __JUCE_CHANGEBROADCASTER_JUCEHEADER__

/*** End of inlined file: juce_ChangeBroadcaster.h ***/


#endif
#ifndef __JUCE_CHANGELISTENER_JUCEHEADER__

#endif
#ifndef __JUCE_LISTENERLIST_JUCEHEADER__

#endif
#ifndef __JUCE_MULTITIMER_JUCEHEADER__

/*** Start of inlined file: juce_MultiTimer.h ***/
#ifndef __JUCE_MULTITIMER_JUCEHEADER__
#define __JUCE_MULTITIMER_JUCEHEADER__


/*** Start of inlined file: juce_Timer.h ***/
#ifndef __JUCE_TIMER_JUCEHEADER__
#define __JUCE_TIMER_JUCEHEADER__

/**
	Makes repeated callbacks to a virtual method at a specified time interval.

	A Timer's timerCallback() method will be repeatedly called at a given
	interval. When you create a Timer object, it will do nothing until the
	startTimer() method is called, which will cause the message thread to
	start making callbacks at the specified interval, until stopTimer() is called
	or the object is deleted.

	The time interval isn't guaranteed to be precise to any more than maybe
	10-20ms, and the intervals may end up being much longer than requested if the
	system is busy. Because the callbacks are made by the main message thread,
	anything that blocks the message queue for a period of time will also prevent
	any timers from running until it can carry on.

	If you need to have a single callback that is shared by multiple timers with
	different frequencies, then the MultiTimer class allows you to do that - its
	structure is very similar to the Timer class, but contains multiple timers
	internally, each one identified by an ID number.

	@see MultiTimer
*/
class JUCE_API  Timer
{
protected:

	/** Creates a Timer.

		When created, the timer is stopped, so use startTimer() to get it going.
	*/
	Timer() noexcept;

	/** Creates a copy of another timer.

		Note that this timer won't be started, even if the one you're copying
		is running.
	*/
	Timer (const Timer& other) noexcept;

public:

	/** Destructor. */
	virtual ~Timer();

	/** The user-defined callback routine that actually gets called periodically.

		It's perfectly ok to call startTimer() or stopTimer() from within this
		callback to change the subsequent intervals.
	*/
	virtual void timerCallback() = 0;

	/** Starts the timer and sets the length of interval required.

		If the timer is already started, this will reset it, so the
		time between calling this method and the next timer callback
		will not be less than the interval length passed in.

		@param  intervalInMilliseconds  the interval to use (any values less than 1 will be
										rounded up to 1)
	*/
	void startTimer (int intervalInMilliseconds) noexcept;

	/** Stops the timer.

		No more callbacks will be made after this method returns.

		If this is called from a different thread, any callbacks that may
		be currently executing may be allowed to finish before the method
		returns.
	*/
	void stopTimer() noexcept;

	/** Checks if the timer has been started.

		@returns true if the timer is running.
	*/
	bool isTimerRunning() const noexcept                    { return periodMs > 0; }

	/** Returns the timer's interval.

		@returns the timer's interval in milliseconds if it's running, or 0 if it's not.
	*/
	int getTimerInterval() const noexcept                   { return periodMs; }

	/** For internal use only: invokes any timers that need callbacks.
		Don't call this unless you really know what you're doing!
	*/
	static void JUCE_CALLTYPE callPendingTimersSynchronously();

private:
	class TimerThread;
	friend class TimerThread;
	int countdownMs, periodMs;
	Timer* previous;
	Timer* next;

	Timer& operator= (const Timer&);
};

#endif   // __JUCE_TIMER_JUCEHEADER__

/*** End of inlined file: juce_Timer.h ***/

/**
	A type of timer class that can run multiple timers with different frequencies,
	all of which share a single callback.

	This class is very similar to the Timer class, but allows you run multiple
	separate timers, where each one has a unique ID number. The methods in this
	class are exactly equivalent to those in Timer, but with the addition of
	this ID number.

	To use it, you need to create a subclass of MultiTimer, implementing the
	timerCallback() method. Then you can start timers with startTimer(), and
	each time the callback is triggered, it passes in the ID of the timer that
	caused it.

	@see Timer
*/
class JUCE_API  MultiTimer
{
protected:

	/** Creates a MultiTimer.

		When created, no timers are running, so use startTimer() to start things off.
	*/
	MultiTimer() noexcept;

	/** Creates a copy of another timer.

		Note that this timer will not contain any running timers, even if the one you're
		copying from was running.
	*/
	MultiTimer (const MultiTimer& other) noexcept;

public:

	/** Destructor. */
	virtual ~MultiTimer();

	/** The user-defined callback routine that actually gets called by each of the
		timers that are running.

		It's perfectly ok to call startTimer() or stopTimer() from within this
		callback to change the subsequent intervals.
	*/
	virtual void timerCallback (int timerId) = 0;

	/** Starts a timer and sets the length of interval required.

		If the timer is already started, this will reset it, so the
		time between calling this method and the next timer callback
		will not be less than the interval length passed in.

		@param timerId                  a unique Id number that identifies the timer to
										start. This is the id that will be passed back
										to the timerCallback() method when this timer is
										triggered
		@param  intervalInMilliseconds  the interval to use (any values less than 1 will be
										rounded up to 1)
	*/
	void startTimer (int timerId, int intervalInMilliseconds) noexcept;

	/** Stops a timer.

		If a timer has been started with the given ID number, it will be cancelled.
		No more callbacks will be made for the specified timer after this method returns.

		If this is called from a different thread, any callbacks that may
		be currently executing may be allowed to finish before the method
		returns.
	*/
	void stopTimer (int timerId) noexcept;

	/** Checks whether a timer has been started for a specified ID.

		@returns true if a timer with the given ID is running.
	*/
	bool isTimerRunning (int timerId) const noexcept;

	/** Returns the interval for a specified timer ID.

		@returns    the timer's interval in milliseconds if it's running, or 0 if it's no timer
					is running for the ID number specified.
	*/
	int getTimerInterval (int timerId) const noexcept;

private:
	class MultiTimerCallback;
	SpinLock timerListLock;
	OwnedArray <MultiTimerCallback> timers;

	MultiTimer& operator= (const MultiTimer&);
};

#endif   // __JUCE_MULTITIMER_JUCEHEADER__

/*** End of inlined file: juce_MultiTimer.h ***/


#endif
#ifndef __JUCE_TIMER_JUCEHEADER__

#endif
#ifndef __JUCE_INTERPROCESSCONNECTION_JUCEHEADER__

/*** Start of inlined file: juce_InterprocessConnection.h ***/
#ifndef __JUCE_INTERPROCESSCONNECTION_JUCEHEADER__
#define __JUCE_INTERPROCESSCONNECTION_JUCEHEADER__

class InterprocessConnectionServer;
class MemoryBlock;

/**
	Manages a simple two-way messaging connection to another process, using either
	a socket or a named pipe as the transport medium.

	To connect to a waiting socket or an open pipe, use the connectToSocket() or
	connectToPipe() methods. If this succeeds, messages can be sent to the other end,
	and incoming messages will result in a callback via the messageReceived()
	method.

	To open a pipe and wait for another client to connect to it, use the createPipe()
	method.

	To act as a socket server and create connections for one or more client, see the
	InterprocessConnectionServer class.

	@see InterprocessConnectionServer, Socket, NamedPipe
*/
class JUCE_API  InterprocessConnection    : public Thread,
											private MessageListener
{
public:

	/** Creates a connection.

		Connections are created manually, connecting them with the connectToSocket()
		or connectToPipe() methods, or they are created automatically by a InterprocessConnectionServer
		when a client wants to connect.

		@param callbacksOnMessageThread     if true, callbacks to the connectionMade(),
											connectionLost() and messageReceived() methods will
											always be made using the message thread; if false,
											these will be called immediately on the connection's
											own thread.
		@param magicMessageHeaderNumber     a magic number to use in the header to check the
											validity of the data blocks being sent and received. This
											can be any number, but the sender and receiver must obviously
											use matching values or they won't recognise each other.
	*/
	InterprocessConnection (bool callbacksOnMessageThread = true,
							uint32 magicMessageHeaderNumber = 0xf2b49e2c);

	/** Destructor. */
	~InterprocessConnection();

	/** Tries to connect this object to a socket.

		For this to work, the machine on the other end needs to have a InterprocessConnectionServer
		object waiting to receive client connections on this port number.

		@param hostName             the host computer, either a network address or name
		@param portNumber           the socket port number to try to connect to
		@param timeOutMillisecs     how long to keep trying before giving up
		@returns true if the connection is established successfully
		@see Socket
	*/
	bool connectToSocket (const String& hostName,
						  int portNumber,
						  int timeOutMillisecs);

	/** Tries to connect the object to an existing named pipe.

		For this to work, another process on the same computer must already have opened
		an InterprocessConnection object and used createPipe() to create a pipe for this
		to connect to.

		You can optionally specify a timeout length to be passed to the NamedPipe::read() method.

		@returns true if it connects successfully.
		@see createPipe, NamedPipe
	*/
	bool connectToPipe (const String& pipeName,
						int pipeReceiveMessageTimeoutMs = -1);

	/** Tries to create a new pipe for other processes to connect to.

		This creates a pipe with the given name, so that other processes can use
		connectToPipe() to connect to the other end.

		You can optionally specify a timeout length to be passed to the NamedPipe::read() method.

		If another process is already using this pipe, this will fail and return false.
	*/
	bool createPipe (const String& pipeName,
					 int pipeReceiveMessageTimeoutMs = -1);

	/** Disconnects and closes any currently-open sockets or pipes. */
	void disconnect();

	/** True if a socket or pipe is currently active. */
	bool isConnected() const;

	/** Returns the socket that this connection is using (or null if it uses a pipe). */
	StreamingSocket* getSocket() const noexcept                 { return socket; }

	/** Returns the pipe that this connection is using (or null if it uses a socket). */
	NamedPipe* getPipe() const noexcept                         { return pipe; }

	/** Returns the name of the machine at the other end of this connection.

		This will return an empty string if the other machine isn't known for
		some reason.
	*/
	String getConnectedHostName() const;

	/** Tries to send a message to the other end of this connection.

		This will fail if it's not connected, or if there's some kind of write error. If
		it succeeds, the connection object at the other end will receive the message by
		a callback to its messageReceived() method.

		@see messageReceived
	*/
	bool sendMessage (const MemoryBlock& message);

	/** Called when the connection is first connected.

		If the connection was created with the callbacksOnMessageThread flag set, then
		this will be called on the message thread; otherwise it will be called on a server
		thread.
	*/
	virtual void connectionMade() = 0;

	/** Called when the connection is broken.

		If the connection was created with the callbacksOnMessageThread flag set, then
		this will be called on the message thread; otherwise it will be called on a server
		thread.
	*/
	virtual void connectionLost() = 0;

	/** Called when a message arrives.

		When the object at the other end of this connection sends us a message with sendMessage(),
		this callback is used to deliver it to us.

		If the connection was created with the callbacksOnMessageThread flag set, then
		this will be called on the message thread; otherwise it will be called on a server
		thread.

		@see sendMessage
	*/
	virtual void messageReceived (const MemoryBlock& message) = 0;

private:

	CriticalSection pipeAndSocketLock;
	ScopedPointer <StreamingSocket> socket;
	ScopedPointer <NamedPipe> pipe;
	bool callbackConnectionState;
	const bool useMessageThread;
	const uint32 magicMessageHeader;
	int pipeReceiveMessageTimeout;

	friend class InterprocessConnectionServer;

	void initialiseWithSocket (StreamingSocket* socket_);
	void initialiseWithPipe (NamedPipe* pipe_);

	void handleMessage (const Message& message);

	void connectionMadeInt();
	void connectionLostInt();
	void deliverDataInt (const MemoryBlock& data);

	bool readNextMessageInt();
	void run();

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (InterprocessConnection);
};

#endif   // __JUCE_INTERPROCESSCONNECTION_JUCEHEADER__

/*** End of inlined file: juce_InterprocessConnection.h ***/


#endif
#ifndef __JUCE_INTERPROCESSCONNECTIONSERVER_JUCEHEADER__

/*** Start of inlined file: juce_InterprocessConnectionServer.h ***/
#ifndef __JUCE_INTERPROCESSCONNECTIONSERVER_JUCEHEADER__
#define __JUCE_INTERPROCESSCONNECTIONSERVER_JUCEHEADER__

/**
	An object that waits for client sockets to connect to a port on this host, and
	creates InterprocessConnection objects for each one.

	To use this, create a class derived from it which implements the createConnectionObject()
	method, so that it creates suitable connection objects for each client that tries
	to connect.

	@see InterprocessConnection
*/
class JUCE_API  InterprocessConnectionServer    : private Thread
{
public:

	/** Creates an uninitialised server object.
	*/
	InterprocessConnectionServer();

	/** Destructor. */
	~InterprocessConnectionServer();

	/** Starts an internal thread which listens on the given port number.

		While this is running, in another process tries to connect with the
		InterprocessConnection::connectToSocket() method, this object will call
		createConnectionObject() to create a connection to that client.

		Use stop() to stop the thread running.

		@see createConnectionObject, stop
	*/
	bool beginWaitingForSocket (int portNumber);

	/** Terminates the listener thread, if it's active.

		@see beginWaitingForSocket
	*/
	void stop();

protected:
	/** Creates a suitable connection object for a client process that wants to
		connect to this one.

		This will be called by the listener thread when a client process tries
		to connect, and must return a new InterprocessConnection object that will
		then run as this end of the connection.

		@see InterprocessConnection
	*/
	virtual InterprocessConnection* createConnectionObject() = 0;

private:

	ScopedPointer <StreamingSocket> socket;

	void run();

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (InterprocessConnectionServer);
};

#endif   // __JUCE_INTERPROCESSCONNECTIONSERVER_JUCEHEADER__

/*** End of inlined file: juce_InterprocessConnectionServer.h ***/


#endif
#ifndef __JUCE_SCOPEDXLOCK_JUCEHEADER__

/*** Start of inlined file: juce_ScopedXLock.h ***/
#ifndef __JUCE_SCOPEDXLOCK_JUCEHEADER__
#define __JUCE_SCOPEDXLOCK_JUCEHEADER__

#if JUCE_LINUX || DOXYGEN

/** A handy class that uses XLockDisplay and XUnlockDisplay to lock the X server
	using RAII (Only available in Linux!).
*/
class ScopedXLock
{
public:
	/** Creating a ScopedXLock object locks the X display.
		This uses XLockDisplay() to grab the display that Juce is using.
	*/
	ScopedXLock();

	/** Deleting a ScopedXLock object unlocks the X display.
		This calls XUnlockDisplay() to release the lock.
	*/
	~ScopedXLock();
};

#endif
#endif   // __JUCE_SCOPEDXLOCK_JUCEHEADER__

/*** End of inlined file: juce_ScopedXLock.h ***/


#endif
// END_AUTOINCLUDE

}

#endif   // __JUCE_EVENTS_JUCEHEADER__

/*** End of inlined file: juce_events.h ***/

/** Config: JUCE_USE_COREIMAGE_LOADER

	On OSX, enabling this flag means that the CoreImage codecs will be used to load
	PNG/JPEG/GIF files. It is enabled by default, but you may want to disable it if
	you'd rather use libpng, libjpeg, etc.
*/
#ifndef JUCE_USE_COREIMAGE_LOADER
 #define JUCE_USE_COREIMAGE_LOADER 1
#endif

/** Config: JUCE_USE_DIRECTWRITE

	Enabling this flag means that DirectWrite will be used when available for font
	management and layout.
*/
#ifndef JUCE_USE_DIRECTWRITE
 #define JUCE_USE_DIRECTWRITE 1
#endif

#ifndef JUCE_INCLUDE_PNGLIB_CODE
 #define JUCE_INCLUDE_PNGLIB_CODE 1
#endif

#ifndef JUCE_INCLUDE_JPEGLIB_CODE
 #define JUCE_INCLUDE_JPEGLIB_CODE 1
#endif

#ifndef USE_COREGRAPHICS_RENDERING
 #define USE_COREGRAPHICS_RENDERING 1
#endif

namespace juce
{

// START_AUTOINCLUDE colour, geometry, placement, contexts, images,
// image_formats, fonts, effects
#ifndef __JUCE_COLOUR_JUCEHEADER__

/*** Start of inlined file: juce_Colour.h ***/
#ifndef __JUCE_COLOUR_JUCEHEADER__
#define __JUCE_COLOUR_JUCEHEADER__


/*** Start of inlined file: juce_PixelFormats.h ***/
#ifndef __JUCE_PIXELFORMATS_JUCEHEADER__
#define __JUCE_PIXELFORMATS_JUCEHEADER__

#ifndef DOXYGEN
 #if JUCE_MSVC
  #pragma pack (push, 1)
  #define PACKED
 #elif JUCE_GCC
  #define PACKED __attribute__((packed))
 #else
  #define PACKED
 #endif
#endif

class PixelRGB;
class PixelAlpha;

/**
	Represents a 32-bit ARGB pixel with premultiplied alpha, and can perform compositing
	operations with it.

	This is used internally by the imaging classes.

	@see PixelRGB
*/
class JUCE_API  PixelARGB
{
public:
	/** Creates a pixel without defining its colour. */
	PixelARGB() noexcept {}
	~PixelARGB() noexcept {}

	/** Creates a pixel from a 32-bit argb value.
	*/
	PixelARGB (const uint32 argb_) noexcept
		: argb (argb_)
	{
	}

	PixelARGB (const uint8 a, const uint8 r, const uint8 g, const uint8 b) noexcept
	{
		components.b = b;
		components.g = g;
		components.r = r;
		components.a = a;
	}

	forcedinline uint32 getARGB() const noexcept                { return argb; }
	forcedinline uint32 getUnpremultipliedARGB() const noexcept { PixelARGB p (argb); p.unpremultiply(); return p.getARGB(); }

	forcedinline uint32 getRB() const noexcept      { return 0x00ff00ff & argb; }
	forcedinline uint32 getAG() const noexcept      { return 0x00ff00ff & (argb >> 8); }

	forcedinline uint8 getAlpha() const noexcept    { return components.a; }
	forcedinline uint8 getRed() const noexcept      { return components.r; }
	forcedinline uint8 getGreen() const noexcept    { return components.g; }
	forcedinline uint8 getBlue() const noexcept     { return components.b; }

	/** Blends another pixel onto this one.

		This takes into account the opacity of the pixel being overlaid, and blends
		it accordingly.
	*/
	template <class Pixel>
	forcedinline void blend (const Pixel& src) noexcept
	{
		uint32 sargb = src.getARGB();
		const uint32 alpha = 0x100 - (sargb >> 24);

		sargb += 0x00ff00ff & ((getRB() * alpha) >> 8);
		sargb += 0xff00ff00 & (getAG() * alpha);

		argb = sargb;
	}

	/** Blends another pixel onto this one.

		This takes into account the opacity of the pixel being overlaid, and blends
		it accordingly.
	*/
	forcedinline void blend (const PixelRGB& src) noexcept;

	/** Blends another pixel onto this one, applying an extra multiplier to its opacity.

		The opacity of the pixel being overlaid is scaled by the extraAlpha factor before
		being used, so this can blend semi-transparently from a PixelRGB argument.
	*/
	template <class Pixel>
	forcedinline void blend (const Pixel& src, uint32 extraAlpha) noexcept
	{
		++extraAlpha;

		uint32 sargb = ((extraAlpha * src.getAG()) & 0xff00ff00)
						 | (((extraAlpha * src.getRB()) >> 8) & 0x00ff00ff);

		const uint32 alpha = 0x100 - (sargb >> 24);

		sargb += 0x00ff00ff & ((getRB() * alpha) >> 8);
		sargb += 0xff00ff00 & (getAG() * alpha);

		argb = sargb;
	}

	/** Blends another pixel with this one, creating a colour that is somewhere
		between the two, as specified by the amount.
	*/
	template <class Pixel>
	forcedinline void tween (const Pixel& src, const uint32 amount) noexcept
	{
		uint32 drb = getRB();
		drb += (((src.getRB() - drb) * amount) >> 8);
		drb &= 0x00ff00ff;

		uint32 dag = getAG();
		dag += (((src.getAG() - dag) * amount) >> 8);
		dag &= 0x00ff00ff;
		dag <<= 8;

		dag |= drb;
		argb = dag;
	}

	/** Copies another pixel colour over this one.

		This doesn't blend it - this colour is simply replaced by the other one.
	*/
	template <class Pixel>
	forcedinline void set (const Pixel& src) noexcept
	{
		argb = src.getARGB();
	}

	/** Replaces the colour's alpha value with another one. */
	forcedinline void setAlpha (const uint8 newAlpha) noexcept
	{
		components.a = newAlpha;
	}

	/** Multiplies the colour's alpha value with another one. */
	forcedinline void multiplyAlpha (int multiplier) noexcept
	{
		++multiplier;

		argb = ((multiplier * getAG()) & 0xff00ff00)
				| (((multiplier * getRB()) >> 8) & 0x00ff00ff);
	}

	forcedinline void multiplyAlpha (const float multiplier) noexcept
	{
		multiplyAlpha ((int) (multiplier * 255.0f));
	}

	/** Sets the pixel's colour from individual components. */
	void setARGB (const uint8 a, const uint8 r, const uint8 g, const uint8 b) noexcept
	{
		components.b = b;
		components.g = g;
		components.r = r;
		components.a = a;
	}

	/** Premultiplies the pixel's RGB values by its alpha. */
	forcedinline void premultiply() noexcept
	{
		const uint32 alpha = components.a;

		if (alpha < 0xff)
		{
			if (alpha == 0)
			{
				components.b = 0;
				components.g = 0;
				components.r = 0;
			}
			else
			{
				components.b = (uint8) ((components.b * alpha + 0x7f) >> 8);
				components.g = (uint8) ((components.g * alpha + 0x7f) >> 8);
				components.r = (uint8) ((components.r * alpha + 0x7f) >> 8);
			}
		}
	}

	/** Unpremultiplies the pixel's RGB values. */
	forcedinline void unpremultiply() noexcept
	{
		const uint32 alpha = components.a;

		if (alpha < 0xff)
		{
			if (alpha == 0)
			{
				components.b = 0;
				components.g = 0;
				components.r = 0;
			}
			else
			{
				components.b = (uint8) jmin ((uint32) 0xff, (components.b * 0xff) / alpha);
				components.g = (uint8) jmin ((uint32) 0xff, (components.g * 0xff) / alpha);
				components.r = (uint8) jmin ((uint32) 0xff, (components.r * 0xff) / alpha);
			}
		}
	}

	forcedinline void desaturate() noexcept
	{
		if (components.a < 0xff && components.a > 0)
		{
			const int newUnpremultipliedLevel = (0xff * ((int) components.r + (int) components.g + (int) components.b) / (3 * components.a));

			components.r = components.g = components.b
				= (uint8) ((newUnpremultipliedLevel * components.a + 0x7f) >> 8);
		}
		else
		{
			components.r = components.g = components.b
				= (uint8) (((int) components.r + (int) components.g + (int) components.b) / 3);
		}
	}

	/** Returns a uint32 which when written to memory, will be in the order r, g, b, a. */
	inline uint32 getInRGBAMemoryOrder() const noexcept
	{
	   #if JUCE_BIG_ENDIAN
		return (((uint32) components.r) << 24) | (((uint32) components.g) << 16) | (((uint32) components.b) << 8) | components.a;
	   #else
		return (((uint32) components.a) << 24) | (((uint32) components.b) << 16) | (((uint32) components.g) << 8) | components.r;
	   #endif
	}

	/** The indexes of the different components in the byte layout of this type of colour. */
   #if JUCE_BIG_ENDIAN
	enum { indexA = 0, indexR = 1, indexG = 2, indexB = 3 };
   #else
	enum { indexA = 3, indexR = 2, indexG = 1, indexB = 0 };
   #endif

private:

	struct Components
	{
	   #if JUCE_BIG_ENDIAN
		uint8 a : 8, r : 8, g : 8, b : 8;
	   #else
		uint8 b, g, r, a;
	   #endif
	} PACKED;

	union
	{
		uint32 argb;
		Components components;
	};
}
#ifndef DOXYGEN
 PACKED
#endif
;

/**
	Represents a 24-bit RGB pixel, and can perform compositing operations on it.

	This is used internally by the imaging classes.

	@see PixelARGB
*/
class JUCE_API  PixelRGB
{
public:
	/** Creates a pixel without defining its colour. */
	PixelRGB() noexcept {}
	~PixelRGB() noexcept {}

	/** Creates a pixel from a 32-bit argb value.

		(The argb format is that used by PixelARGB)
	*/
	PixelRGB (const uint32 argb) noexcept
	{
		r = (uint8) (argb >> 16);
		g = (uint8) (argb >> 8);
		b = (uint8) (argb);
	}

	forcedinline uint32 getARGB() const noexcept                { return 0xff000000 | b | (g << 8) | (r << 16); }
	forcedinline uint32 getUnpremultipliedARGB() const noexcept { return getARGB(); }

	forcedinline uint32 getRB() const noexcept      { return b | (uint32) (r << 16); }
	forcedinline uint32 getAG() const noexcept      { return (uint32) (0xff0000 | g); }

	forcedinline uint8 getAlpha() const noexcept    { return 0xff; }
	forcedinline uint8 getRed() const noexcept      { return r; }
	forcedinline uint8 getGreen() const noexcept    { return g; }
	forcedinline uint8 getBlue() const noexcept     { return b; }

	/** Blends another pixel onto this one.

		This takes into account the opacity of the pixel being overlaid, and blends
		it accordingly.
	*/
	template <class Pixel>
	forcedinline void blend (const Pixel& src) noexcept
	{
		uint32 sargb = src.getARGB();
		const uint32 alpha = 0x100 - (sargb >> 24);

		sargb += 0x00ff00ff & ((getRB() * alpha) >> 8);
		sargb += 0x0000ff00 & (g * alpha);

		r = (uint8) (sargb >> 16);
		g = (uint8) (sargb >> 8);
		b = (uint8) sargb;
	}

	forcedinline void blend (const PixelRGB& src) noexcept
	{
		set (src);
	}

	/** Blends another pixel onto this one, applying an extra multiplier to its opacity.

		The opacity of the pixel being overlaid is scaled by the extraAlpha factor before
		being used, so this can blend semi-transparently from a PixelRGB argument.
	*/
	template <class Pixel>
	forcedinline void blend (const Pixel& src, uint32 extraAlpha) noexcept
	{
		++extraAlpha;
		const uint32 srb = (extraAlpha * src.getRB()) >> 8;
		const uint32 sag = extraAlpha * src.getAG();
		uint32 sargb = (sag & 0xff00ff00) | (srb & 0x00ff00ff);

		const uint32 alpha = 0x100 - (sargb >> 24);

		sargb += 0x00ff00ff & ((getRB() * alpha) >> 8);
		sargb += 0x0000ff00 & (g * alpha);

		b = (uint8) sargb;
		g = (uint8) (sargb >> 8);
		r = (uint8) (sargb >> 16);
	}

	/** Blends another pixel with this one, creating a colour that is somewhere
		between the two, as specified by the amount.
	*/
	template <class Pixel>
	forcedinline void tween (const Pixel& src, const uint32 amount) noexcept
	{
		uint32 drb = getRB();
		drb += (((src.getRB() - drb) * amount) >> 8);

		uint32 dag = getAG();
		dag += (((src.getAG() - dag) * amount) >> 8);

		b = (uint8) drb;
		g = (uint8) dag;
		r = (uint8) (drb >> 16);
	}

	/** Copies another pixel colour over this one.

		This doesn't blend it - this colour is simply replaced by the other one.
		Because PixelRGB has no alpha channel, any alpha value in the source pixel
		is thrown away.
	*/
	template <class Pixel>
	forcedinline void set (const Pixel& src) noexcept
	{
		b = src.getBlue();
		g = src.getGreen();
		r = src.getRed();
	}

	/** This method is included for compatibility with the PixelARGB class. */
	forcedinline void setAlpha (const uint8) noexcept {}

	/** Multiplies the colour's alpha value with another one. */
	forcedinline void multiplyAlpha (int) noexcept {}

	/** Multiplies the colour's alpha value with another one. */
	forcedinline void multiplyAlpha (float) noexcept {}

	/** Sets the pixel's colour from individual components. */
	void setARGB (const uint8, const uint8 r_, const uint8 g_, const uint8 b_) noexcept
	{
		r = r_;
		g = g_;
		b = b_;
	}

	/** Premultiplies the pixel's RGB values by its alpha. */
	forcedinline void premultiply() noexcept {}

	/** Unpremultiplies the pixel's RGB values. */
	forcedinline void unpremultiply() noexcept {}

	forcedinline void desaturate() noexcept
	{
		r = g = b = (uint8) (((int) r + (int) g + (int) b) / 3);
	}

	/** The indexes of the different components in the byte layout of this type of colour. */
   #if JUCE_MAC
	enum { indexR = 0, indexG = 1, indexB = 2 };
   #else
	enum { indexR = 2, indexG = 1, indexB = 0 };
   #endif

private:

   #if JUCE_MAC
	uint8 r, g, b;
   #else
	uint8 b, g, r;
   #endif

}
#ifndef DOXYGEN
 PACKED
#endif
;

forcedinline void PixelARGB::blend (const PixelRGB& src) noexcept
{
	set (src);
}

/**
	Represents an 8-bit single-channel pixel, and can perform compositing operations on it.

	This is used internally by the imaging classes.

	@see PixelARGB, PixelRGB
*/
class JUCE_API  PixelAlpha
{
public:
	/** Creates a pixel without defining its colour. */
	PixelAlpha() noexcept {}
	~PixelAlpha() noexcept {}

	/** Creates a pixel from a 32-bit argb value.

		(The argb format is that used by PixelARGB)
	*/
	PixelAlpha (const uint32 argb) noexcept
	{
		a = (uint8) (argb >> 24);
	}

	forcedinline uint32 getARGB() const noexcept                { return (((uint32) a) << 24) | (((uint32) a) << 16) | (((uint32) a) << 8) | a; }
	forcedinline uint32 getUnpremultipliedARGB() const noexcept { return (((uint32) a) << 24) | 0xffffff; }

	forcedinline uint32 getRB() const noexcept      { return (((uint32) a) << 16) | a; }
	forcedinline uint32 getAG() const noexcept      { return (((uint32) a) << 16) | a; }

	forcedinline uint8 getAlpha() const noexcept    { return a; }
	forcedinline uint8 getRed() const noexcept      { return 0; }
	forcedinline uint8 getGreen() const noexcept    { return 0; }
	forcedinline uint8 getBlue() const noexcept     { return 0; }

	/** Blends another pixel onto this one.

		This takes into account the opacity of the pixel being overlaid, and blends
		it accordingly.
	*/
	template <class Pixel>
	forcedinline void blend (const Pixel& src) noexcept
	{
		const int srcA = src.getAlpha();
		a = (uint8) ((a * (0x100 - srcA) >> 8) + srcA);
	}

	/** Blends another pixel onto this one, applying an extra multiplier to its opacity.

		The opacity of the pixel being overlaid is scaled by the extraAlpha factor before
		being used, so this can blend semi-transparently from a PixelRGB argument.
	*/
	template <class Pixel>
	forcedinline void blend (const Pixel& src, uint32 extraAlpha) noexcept
	{
		++extraAlpha;
		const int srcAlpha = (int) ((extraAlpha * src.getAlpha()) >> 8);
		a = (uint8) ((a * (0x100 - srcAlpha) >> 8) + srcAlpha);
	}

	/** Blends another pixel with this one, creating a colour that is somewhere
		between the two, as specified by the amount.
	*/
	template <class Pixel>
	forcedinline void tween (const Pixel& src, const uint32 amount) noexcept
	{
		a += ((src.getAlpha() - a) * amount) >> 8;
	}

	/** Copies another pixel colour over this one.

		This doesn't blend it - this colour is simply replaced by the other one.
	*/
	template <class Pixel>
	forcedinline void set (const Pixel& src) noexcept
	{
		a = src.getAlpha();
	}

	/** Replaces the colour's alpha value with another one. */
	forcedinline void setAlpha (const uint8 newAlpha) noexcept
	{
		a = newAlpha;
	}

	/** Multiplies the colour's alpha value with another one. */
	forcedinline void multiplyAlpha (int multiplier) noexcept
	{
		++multiplier;
		a = (uint8) ((a * multiplier) >> 8);
	}

	forcedinline void multiplyAlpha (const float multiplier) noexcept
	{
		a = (uint8) (a * multiplier);
	}

	/** Sets the pixel's colour from individual components. */
	forcedinline void setARGB (const uint8 a_, const uint8 /*r*/, const uint8 /*g*/, const uint8 /*b*/) noexcept
	{
		a = a_;
	}

	/** Premultiplies the pixel's RGB values by its alpha. */
	forcedinline void premultiply() noexcept {}

	/** Unpremultiplies the pixel's RGB values. */
	forcedinline void unpremultiply() noexcept {}

	forcedinline void desaturate() noexcept {}

	/** The indexes of the different components in the byte layout of this type of colour. */
	enum { indexA = 0 };

private:

	uint8 a : 8;
}
#ifndef DOXYGEN
 PACKED
#endif
;

#if JUCE_MSVC
 #pragma pack (pop)
#endif

#undef PACKED

#endif   // __JUCE_PIXELFORMATS_JUCEHEADER__

/*** End of inlined file: juce_PixelFormats.h ***/

/**
	Represents a colour, also including a transparency value.

	The colour is stored internally as unsigned 8-bit red, green, blue and alpha values.
*/
class JUCE_API  Colour
{
public:

	/** Creates a transparent black colour. */
	Colour() noexcept;

	/** Creates a copy of another Colour object. */
	Colour (const Colour& other) noexcept;

	/** Creates a colour from a 32-bit ARGB value.

		The format of this number is:
			((alpha << 24) | (red << 16) | (green << 8) | blue).

		All components in the range 0x00 to 0xff.
		An alpha of 0x00 is completely transparent, alpha of 0xff is opaque.

		@see getPixelARGB
	*/
	explicit Colour (uint32 argb) noexcept;

	/** Creates an opaque colour using 8-bit red, green and blue values */
	Colour (uint8 red,
			uint8 green,
			uint8 blue) noexcept;

	/** Creates an opaque colour using 8-bit red, green and blue values */
	static Colour fromRGB (uint8 red,
						   uint8 green,
						   uint8 blue) noexcept;

	/** Creates a colour using 8-bit red, green, blue and alpha values. */
	Colour (uint8 red,
			uint8 green,
			uint8 blue,
			uint8 alpha) noexcept;

	/** Creates a colour using 8-bit red, green, blue and alpha values. */
	static Colour fromRGBA (uint8 red,
							uint8 green,
							uint8 blue,
							uint8 alpha) noexcept;

	/** Creates a colour from 8-bit red, green, and blue values, and a floating-point alpha.

		Alpha of 0.0 is transparent, alpha of 1.0f is opaque.
		Values outside the valid range will be clipped.
	*/
	Colour (uint8 red,
			uint8 green,
			uint8 blue,
			float alpha) noexcept;

	/** Creates a colour using floating point red, green, blue and alpha values.
		Numbers outside the range 0..1 will be clipped.
	*/
	static Colour fromFloatRGBA (float red,
								 float green,
								 float blue,
								 float alpha) noexcept;

	/** Creates a colour using floating point hue, saturation and brightness values, and an 8-bit alpha.

		The floating point values must be between 0.0 and 1.0.
		An alpha of 0x00 is completely transparent, alpha of 0xff is opaque.
		Values outside the valid range will be clipped.
	*/
	Colour (float hue,
			float saturation,
			float brightness,
			uint8 alpha) noexcept;

	/** Creates a colour using floating point hue, saturation, brightness and alpha values.

		All values must be between 0.0 and 1.0.
		Numbers outside the valid range will be clipped.
	*/
	Colour (float hue,
			float saturation,
			float brightness,
			float alpha) noexcept;

	/** Creates a colour using floating point hue, saturation and brightness values, and an 8-bit alpha.

		The floating point values must be between 0.0 and 1.0.
		An alpha of 0x00 is completely transparent, alpha of 0xff is opaque.
		Values outside the valid range will be clipped.
	*/
	static Colour fromHSV (float hue,
						   float saturation,
						   float brightness,
						   float alpha) noexcept;

	/** Destructor. */
	~Colour() noexcept;

	/** Copies another Colour object. */
	Colour& operator= (const Colour& other) noexcept;

	/** Compares two colours. */
	bool operator== (const Colour& other) const noexcept;
	/** Compares two colours. */
	bool operator!= (const Colour& other) const noexcept;

	/** Returns the red component of this colour.

		@returns a value between 0x00 and 0xff.
	*/
	uint8 getRed() const noexcept                       { return argb.getRed(); }

	/** Returns the green component of this colour.

		@returns a value between 0x00 and 0xff.
	*/
	uint8 getGreen() const noexcept                     { return argb.getGreen(); }

	/** Returns the blue component of this colour.

		@returns a value between 0x00 and 0xff.
	*/
	uint8 getBlue() const noexcept                      { return argb.getBlue(); }

	/** Returns the red component of this colour as a floating point value.

		@returns a value between 0.0 and 1.0
	*/
	float getFloatRed() const noexcept;

	/** Returns the green component of this colour as a floating point value.

		@returns a value between 0.0 and 1.0
	*/
	float getFloatGreen() const noexcept;

	/** Returns the blue component of this colour as a floating point value.

		@returns a value between 0.0 and 1.0
	*/
	float getFloatBlue() const noexcept;

	/** Returns a premultiplied ARGB pixel object that represents this colour.
	*/
	const PixelARGB getPixelARGB() const noexcept;

	/** Returns a 32-bit integer that represents this colour.

		The format of this number is:
			((alpha << 24) | (red << 16) | (green << 16) | blue).
	*/
	uint32 getARGB() const noexcept;

	/** Returns the colour's alpha (opacity).

		Alpha of 0x00 is completely transparent, 0xff is completely opaque.
	*/
	uint8 getAlpha() const noexcept                     { return argb.getAlpha(); }

	/** Returns the colour's alpha (opacity) as a floating point value.

		Alpha of 0.0 is completely transparent, 1.0 is completely opaque.
	*/
	float getFloatAlpha() const noexcept;

	/** Returns true if this colour is completely opaque.

		Equivalent to (getAlpha() == 0xff).
	*/
	bool isOpaque() const noexcept;

	/** Returns true if this colour is completely transparent.

		Equivalent to (getAlpha() == 0x00).
	*/
	bool isTransparent() const noexcept;

	/** Returns a colour that's the same colour as this one, but with a new alpha value. */
	Colour withAlpha (uint8 newAlpha) const noexcept;

	/** Returns a colour that's the same colour as this one, but with a new alpha value. */
	Colour withAlpha (float newAlpha) const noexcept;

	/** Returns a colour that's the same colour as this one, but with a modified alpha value.

		The new colour's alpha will be this object's alpha multiplied by the value passed-in.
	*/
	Colour withMultipliedAlpha (float alphaMultiplier) const noexcept;

	/** Returns a colour that is the result of alpha-compositing a new colour over this one.

		If the foreground colour is semi-transparent, it is blended onto this colour
		accordingly.
	*/
	Colour overlaidWith (const Colour& foregroundColour) const noexcept;

	/** Returns a colour that lies somewhere between this one and another.

		If amountOfOther is zero, the result is 100% this colour, if amountOfOther
		is 1.0, the result is 100% of the other colour.
	*/
	Colour interpolatedWith (const Colour& other, float proportionOfOther) const noexcept;

	/** Returns the colour's hue component.
		The value returned is in the range 0.0 to 1.0
	*/
	float getHue() const noexcept;

	/** Returns the colour's saturation component.
		The value returned is in the range 0.0 to 1.0
	*/
	float getSaturation() const noexcept;

	/** Returns the colour's brightness component.
		The value returned is in the range 0.0 to 1.0
	*/
	float getBrightness() const noexcept;

	/** Returns the colour's hue, saturation and brightness components all at once.
		The values returned are in the range 0.0 to 1.0
	*/
	void getHSB (float& hue,
				 float& saturation,
				 float& brightness) const noexcept;

	/** Returns a copy of this colour with a different hue. */
	Colour withHue (float newHue) const noexcept;

	/** Returns a copy of this colour with a different saturation. */
	Colour withSaturation (float newSaturation) const noexcept;

	/** Returns a copy of this colour with a different brightness.
		@see brighter, darker, withMultipliedBrightness
	*/
	Colour withBrightness (float newBrightness) const noexcept;

	/** Returns a copy of this colour with it hue rotated.

		The new colour's hue is ((this->getHue() + amountToRotate) % 1.0)

		@see brighter, darker, withMultipliedBrightness
	*/
	Colour withRotatedHue (float amountToRotate) const noexcept;

	/** Returns a copy of this colour with its saturation multiplied by the given value.

		The new colour's saturation is (this->getSaturation() * multiplier)
		(the result is clipped to legal limits).
	*/
	Colour withMultipliedSaturation (float multiplier) const noexcept;

	/** Returns a copy of this colour with its brightness multiplied by the given value.

		The new colour's saturation is (this->getBrightness() * multiplier)
		(the result is clipped to legal limits).
	*/
	Colour withMultipliedBrightness (float amount) const noexcept;

	/** Returns a brighter version of this colour.

		@param amountBrighter   how much brighter to make it - a value from 0 to 1.0 where 0 is
								unchanged, and higher values make it brighter
		@see withMultipliedBrightness
	*/
	Colour brighter (float amountBrighter = 0.4f) const noexcept;

	/** Returns a darker version of this colour.

		@param amountDarker     how much darker to make it - a value from 0 to 1.0 where 0 is
								unchanged, and higher values make it darker
		@see withMultipliedBrightness
	*/
	Colour darker (float amountDarker = 0.4f) const noexcept;

	/** Returns a colour that will be clearly visible against this colour.

		The amount parameter indicates how contrasting the new colour should
		be, so e.g. Colours::black.contrasting (0.1f) will return a colour
		that's just a little bit lighter; Colours::black.contrasting (1.0f) will
		return white; Colours::white.contrasting (1.0f) will return black, etc.
	*/
	Colour contrasting (float amount = 1.0f) const noexcept;

	/** Returns a colour that contrasts against two colours.

		Looks for a colour that contrasts with both of the colours passed-in.

		Handy for things like choosing a highlight colour in text editors, etc.
	*/
	static Colour contrasting (const Colour& colour1,
							   const Colour& colour2) noexcept;

	/** Returns an opaque shade of grey.

		@param brightness the level of grey to return - 0 is black, 1.0 is white
	*/
	static Colour greyLevel (float brightness) noexcept;

	/** Returns a stringified version of this colour.

		The string can be turned back into a colour using the fromString() method.
	*/
	String toString() const;

	/** Reads the colour from a string that was created with toString().
	*/
	static Colour fromString (const String& encodedColourString);

	/** Returns the colour as a hex string in the form RRGGBB or AARRGGBB. */
	String toDisplayString (bool includeAlphaValue) const;

private:

	PixelARGB argb;
};

#endif   // __JUCE_COLOUR_JUCEHEADER__

/*** End of inlined file: juce_Colour.h ***/


#endif
#ifndef __JUCE_COLOURGRADIENT_JUCEHEADER__

/*** Start of inlined file: juce_ColourGradient.h ***/
#ifndef __JUCE_COLOURGRADIENT_JUCEHEADER__
#define __JUCE_COLOURGRADIENT_JUCEHEADER__


/*** Start of inlined file: juce_Point.h ***/
#ifndef __JUCE_POINT_JUCEHEADER__
#define __JUCE_POINT_JUCEHEADER__


/*** Start of inlined file: juce_AffineTransform.h ***/
#ifndef __JUCE_AFFINETRANSFORM_JUCEHEADER__
#define __JUCE_AFFINETRANSFORM_JUCEHEADER__

/**
	Represents a 2D affine-transformation matrix.

	An affine transformation is a transformation such as a rotation, scale, shear,
	resize or translation.

	These are used for various 2D transformation tasks, e.g. with Path objects.

	@see Path, Point, Line
*/
class JUCE_API  AffineTransform
{
public:

	/** Creates an identity transform. */
	AffineTransform() noexcept;

	/** Creates a copy of another transform. */
	AffineTransform (const AffineTransform& other) noexcept;

	/** Creates a transform from a set of raw matrix values.

		The resulting matrix is:

			(mat00 mat01 mat02)
			(mat10 mat11 mat12)
			(  0     0     1  )
	*/
	AffineTransform (float mat00, float mat01, float mat02,
					 float mat10, float mat11, float mat12) noexcept;

	/** Copies from another AffineTransform object */
	AffineTransform& operator= (const AffineTransform& other) noexcept;

	/** Compares two transforms. */
	bool operator== (const AffineTransform& other) const noexcept;

	/** Compares two transforms. */
	bool operator!= (const AffineTransform& other) const noexcept;

	/** A ready-to-use identity transform, which you can use to append other
		transformations to.

		e.g. @code
		AffineTransform myTransform = AffineTransform::identity.rotated (.5f)
															   .scaled (2.0f);

		@endcode
	*/
	static const AffineTransform identity;

	/** Transforms a 2D co-ordinate using this matrix. */
	template <typename ValueType>
	void transformPoint (ValueType& x, ValueType& y) const noexcept
	{
		const ValueType oldX = x;
		x = static_cast <ValueType> (mat00 * oldX + mat01 * y + mat02);
		y = static_cast <ValueType> (mat10 * oldX + mat11 * y + mat12);
	}

	/** Transforms two 2D co-ordinates using this matrix.
		This is just a shortcut for calling transformPoint() on each of these pairs of
		coordinates in turn. (And putting all the calculations into one function hopefully
		also gives the compiler a bit more scope for pipelining it).
	*/
	template <typename ValueType>
	void transformPoints (ValueType& x1, ValueType& y1,
						  ValueType& x2, ValueType& y2) const noexcept
	{
		const ValueType oldX1 = x1, oldX2 = x2;
		x1 = static_cast <ValueType> (mat00 * oldX1 + mat01 * y1 + mat02);
		y1 = static_cast <ValueType> (mat10 * oldX1 + mat11 * y1 + mat12);
		x2 = static_cast <ValueType> (mat00 * oldX2 + mat01 * y2 + mat02);
		y2 = static_cast <ValueType> (mat10 * oldX2 + mat11 * y2 + mat12);
	}

	/** Transforms three 2D co-ordinates using this matrix.
		This is just a shortcut for calling transformPoint() on each of these pairs of
		coordinates in turn. (And putting all the calculations into one function hopefully
		also gives the compiler a bit more scope for pipelining it).
	*/
	template <typename ValueType>
	void transformPoints (ValueType& x1, ValueType& y1,
						  ValueType& x2, ValueType& y2,
						  ValueType& x3, ValueType& y3) const noexcept
	{
		const ValueType oldX1 = x1, oldX2 = x2, oldX3 = x3;
		x1 = static_cast <ValueType> (mat00 * oldX1 + mat01 * y1 + mat02);
		y1 = static_cast <ValueType> (mat10 * oldX1 + mat11 * y1 + mat12);
		x2 = static_cast <ValueType> (mat00 * oldX2 + mat01 * y2 + mat02);
		y2 = static_cast <ValueType> (mat10 * oldX2 + mat11 * y2 + mat12);
		x3 = static_cast <ValueType> (mat00 * oldX3 + mat01 * y3 + mat02);
		y3 = static_cast <ValueType> (mat10 * oldX3 + mat11 * y3 + mat12);
	}

	/** Returns a new transform which is the same as this one followed by a translation. */
	AffineTransform translated (float deltaX,
								float deltaY) const noexcept;

	/** Returns a new transform which is a translation. */
	static AffineTransform translation (float deltaX,
										float deltaY) noexcept;

	/** Returns a transform which is the same as this one followed by a rotation.

		The rotation is specified by a number of radians to rotate clockwise, centred around
		the origin (0, 0).
	*/
	AffineTransform rotated (float angleInRadians) const noexcept;

	/** Returns a transform which is the same as this one followed by a rotation about a given point.

		The rotation is specified by a number of radians to rotate clockwise, centred around
		the co-ordinates passed in.
	*/
	AffineTransform rotated (float angleInRadians,
							 float pivotX,
							 float pivotY) const noexcept;

	/** Returns a new transform which is a rotation about (0, 0). */
	static AffineTransform rotation (float angleInRadians) noexcept;

	/** Returns a new transform which is a rotation about a given point. */
	static AffineTransform rotation (float angleInRadians,
									 float pivotX,
									 float pivotY) noexcept;

	/** Returns a transform which is the same as this one followed by a re-scaling.
		The scaling is centred around the origin (0, 0).
	*/
	AffineTransform scaled (float factorX,
							float factorY) const noexcept;

	/** Returns a transform which is the same as this one followed by a re-scaling.
		The scaling is centred around the origin provided.
	*/
	AffineTransform scaled (float factorX, float factorY,
							float pivotX, float pivotY) const noexcept;

	/** Returns a new transform which is a re-scale about the origin. */
	static AffineTransform scale (float factorX,
								  float factorY) noexcept;

	/** Returns a new transform which is a re-scale centred around the point provided. */
	static AffineTransform scale (float factorX, float factorY,
								  float pivotX, float pivotY) noexcept;

	/** Returns a transform which is the same as this one followed by a shear.
		The shear is centred around the origin (0, 0).
	*/
	AffineTransform sheared (float shearX, float shearY) const noexcept;

	/** Returns a shear transform, centred around the origin (0, 0). */
	static AffineTransform shear (float shearX, float shearY) noexcept;

	/** Returns a transform that will flip co-ordinates vertically within a window of the given height.
		This is handy for converting between upside-down coordinate systems such as OpenGL or CoreGraphics.
	*/
	static AffineTransform verticalFlip (float height) noexcept;

	/** Returns a matrix which is the inverse operation of this one.

		Some matrices don't have an inverse - in this case, the method will just return
		an identity transform.
	*/
	AffineTransform inverted() const noexcept;

	/** Returns the transform that will map three known points onto three coordinates
		that are supplied.

		This returns the transform that will transform (0, 0) into (x00, y00),
		(1, 0) to (x10, y10), and (0, 1) to (x01, y01).
	*/
	static AffineTransform fromTargetPoints (float x00, float y00,
											 float x10, float y10,
											 float x01, float y01) noexcept;

	/** Returns the transform that will map three specified points onto three target points.
	*/
	static AffineTransform fromTargetPoints (float sourceX1, float sourceY1, float targetX1, float targetY1,
											 float sourceX2, float sourceY2, float targetX2, float targetY2,
											 float sourceX3, float sourceY3, float targetX3, float targetY3) noexcept;

	/** Returns the result of concatenating another transformation after this one. */
	AffineTransform followedBy (const AffineTransform& other) const noexcept;

	/** Returns true if this transform has no effect on points. */
	bool isIdentity() const noexcept;

	/** Returns true if this transform maps to a singularity - i.e. if it has no inverse. */
	bool isSingularity() const noexcept;

	/** Returns true if the transform only translates, and doesn't scale or rotate the
		points. */
	bool isOnlyTranslation() const noexcept;

	/** If this transform is only a translation, this returns the X offset.
		@see isOnlyTranslation
	*/
	float getTranslationX() const noexcept                  { return mat02; }

	/** If this transform is only a translation, this returns the X offset.
		@see isOnlyTranslation
	*/
	float getTranslationY() const noexcept                  { return mat12; }

	/** Returns the approximate scale factor by which lengths will be transformed.
		Obviously a length may be scaled by entirely different amounts depending on its
		direction, so this is only appropriate as a rough guide.
	*/
	float getScaleFactor() const noexcept;

	/* The transform matrix is:

		(mat00 mat01 mat02)
		(mat10 mat11 mat12)
		(  0     0     1  )
	*/
	float mat00, mat01, mat02;
	float mat10, mat11, mat12;

private:

	JUCE_LEAK_DETECTOR (AffineTransform);
};

#endif   // __JUCE_AFFINETRANSFORM_JUCEHEADER__

/*** End of inlined file: juce_AffineTransform.h ***/

/**
	A pair of (x, y) co-ordinates.

	The ValueType template should be a primitive type such as int, float, double,
	rather than a class.

	@see Line, Path, AffineTransform
*/
template <typename ValueType>
class Point
{
public:

	/** Creates a point with co-ordinates (0, 0). */
	Point() noexcept : x(), y() {}

	/** Creates a copy of another point. */
	Point (const Point& other) noexcept : x (other.x), y (other.y)  {}

	/** Creates a point from an (x, y) position. */
	Point (const ValueType initialX, const ValueType initialY) noexcept : x (initialX), y (initialY) {}

	/** Destructor. */
	~Point() noexcept {}

	/** Copies this point from another one. */
	Point& operator= (const Point& other) noexcept                      { x = other.x; y = other.y; return *this; }

	inline bool operator== (const Point& other) const noexcept          { return x == other.x && y == other.y; }
	inline bool operator!= (const Point& other) const noexcept          { return x != other.x || y != other.y; }

	/** Returns true if the point is (0, 0). */
	bool isOrigin() const noexcept                                      { return x == ValueType() && y == ValueType(); }

	/** Returns the point's x co-ordinate. */
	inline ValueType getX() const noexcept                              { return x; }

	/** Returns the point's y co-ordinate. */
	inline ValueType getY() const noexcept                              { return y; }

	/** Sets the point's x co-ordinate. */
	inline void setX (const ValueType newX) noexcept                    { x = newX; }

	/** Sets the point's y co-ordinate. */
	inline void setY (const ValueType newY) noexcept                    { y = newY; }

	/** Returns a point which has the same Y position as this one, but a new X. */
	Point withX (const ValueType newX) const noexcept                   { return Point (newX, y); }

	/** Returns a point which has the same X position as this one, but a new Y. */
	Point withY (const ValueType newY) const noexcept                   { return Point (x, newY); }

	/** Changes the point's x and y co-ordinates. */
	void setXY (const ValueType newX, const ValueType newY) noexcept    { x = newX; y = newY; }

	/** Adds a pair of co-ordinates to this value. */
	void addXY (const ValueType xToAdd, const ValueType yToAdd) noexcept { x += xToAdd; y += yToAdd; }

	/** Returns a point with a given offset from this one. */
	Point translated (const ValueType xDelta, const ValueType yDelta) const noexcept  { return Point (x + xDelta, y + yDelta); }

	/** Adds two points together. */
	Point operator+ (const Point& other) const noexcept                 { return Point (x + other.x, y + other.y); }

	/** Adds another point's co-ordinates to this one. */
	Point& operator+= (const Point& other) noexcept                     { x += other.x; y += other.y; return *this; }

	/** Subtracts one points from another. */
	Point operator- (const Point& other) const noexcept                 { return Point (x - other.x, y - other.y); }

	/** Subtracts another point's co-ordinates to this one. */
	Point& operator-= (const Point& other) noexcept                     { x -= other.x; y -= other.y; return *this; }

	/** Returns a point whose coordinates are multiplied by a given value. */
	Point operator* (const ValueType multiplier) const noexcept         { return Point (x * multiplier, y * multiplier); }

	/** Multiplies the point's co-ordinates by a value. */
	Point& operator*= (const ValueType multiplier) noexcept             { x *= multiplier; y *= multiplier; return *this; }

	/** Returns a point whose coordinates are divided by a given value. */
	Point operator/ (const ValueType divisor) const noexcept            { return Point (x / divisor, y / divisor); }

	/** Divides the point's co-ordinates by a value. */
	Point& operator/= (const ValueType divisor) noexcept                { x /= divisor; y /= divisor; return *this; }

	/** Returns the inverse of this point. */
	Point operator-() const noexcept                                    { return Point (-x, -y); }

	/** Returns the straight-line distance between this point and the origin. */
	ValueType getDistanceFromOrigin() const noexcept                    { return juce_hypot (x, y); }

	/** Returns the straight-line distance between this point and another one. */
	ValueType getDistanceFrom (const Point& other) const noexcept       { return juce_hypot (x - other.x, y - other.y); }

	/** This type will be double if the Point's type is double, otherwise it will be float. */
	typedef typename TypeHelpers::SmallestFloatType<ValueType>::type FloatType;

	/** Returns the angle from this point to another one.

		The return value is the number of radians clockwise from the 12 o'clock direction,
		where this point is the centre and the other point is on the circumference.
	*/
	FloatType getAngleToPoint (const Point& other) const noexcept
		{ return static_cast<FloatType> (std::atan2 (other.x - x, y - other.y)); }

	/** Taking this point to be the centre of a circle, this returns a point on its circumference.
		@param radius   the radius of the circle.
		@param angle    the angle of the point, in radians clockwise from the 12 o'clock position.
	*/
	Point<FloatType> getPointOnCircumference (const float radius, const float angle) const noexcept
		{ return Point<FloatType> (static_cast <FloatType> (x + radius * std::sin (angle)),
								   static_cast <FloatType> (y - radius * std::cos (angle))); }

	/** Taking this point to be the centre of an ellipse, this returns a point on its circumference.
		@param radiusX  the horizontal radius of the circle.
		@param radiusY  the vertical radius of the circle.
		@param angle    the angle of the point, in radians clockwise from the 12 o'clock position.
	*/
	Point<FloatType> getPointOnCircumference (const float radiusX, const float radiusY, const float angle) const noexcept
		{ return Point<FloatType> (static_cast <FloatType> (x + radiusX * std::sin (angle)),
								   static_cast <FloatType> (y - radiusY * std::cos (angle))); }

	/** Uses a transform to change the point's co-ordinates.
		This will only compile if ValueType = float!
		@see AffineTransform::transformPoint
	*/
	void applyTransform (const AffineTransform& transform) noexcept     { transform.transformPoint (x, y); }

	/** Returns the position of this point, if it is transformed by a given AffineTransform. */
	Point transformedBy (const AffineTransform& transform) const noexcept
		{ return Point (transform.mat00 * x + transform.mat01 * y + transform.mat02,
						transform.mat10 * x + transform.mat11 * y + transform.mat12); }

	/** Casts this point to a Point<int> object. */
	Point<int> toInt() const noexcept                             { return Point<int> (static_cast <int> (x), static_cast<int> (y)); }

	/** Casts this point to a Point<float> object. */
	Point<float> toFloat() const noexcept                         { return Point<float> (static_cast <float> (x), static_cast<float> (y)); }

	/** Casts this point to a Point<double> object. */
	Point<double> toDouble() const noexcept                       { return Point<double> (static_cast <double> (x), static_cast<double> (y)); }

	/** Returns the point as a string in the form "x, y". */
	String toString() const                                       { return String (x) + ", " + String (y); }

	ValueType x; /**< The point's X coordinate. */
	ValueType y; /**< The point's Y coordinate. */
};

#endif   // __JUCE_POINT_JUCEHEADER__

/*** End of inlined file: juce_Point.h ***/

/**
	Describes the layout and colours that should be used to paint a colour gradient.

	@see Graphics::setGradientFill
*/
class JUCE_API  ColourGradient
{
public:

	/** Creates a gradient object.

		(x1, y1) is the location to draw with colour1. Likewise (x2, y2) is where
		colour2 should be. In between them there's a gradient.

		If isRadial is true, the colours form a circular gradient with (x1, y1) at
		its centre.

		The alpha transparencies of the colours are used, so note that
		if you blend from transparent to a solid colour, the RGB of the transparent
		colour will become visible in parts of the gradient. e.g. blending
		from Colour::transparentBlack to Colours::white will produce a
		muddy grey colour midway, but Colour::transparentWhite to Colours::white
		will be white all the way across.

		@see ColourGradient
	*/
	ColourGradient (const Colour& colour1, float x1, float y1,
					const Colour& colour2, float x2, float y2,
					bool isRadial);

	/** Creates an uninitialised gradient.

		If you use this constructor instead of the other one, be sure to set all the
		object's public member variables before using it!
	*/
	ColourGradient() noexcept;

	/** Destructor */
	~ColourGradient();

	/** Removes any colours that have been added.

		This will also remove any start and end colours, so the gradient won't work. You'll
		need to add more colours with addColour().
	*/
	void clearColours();

	/** Adds a colour at a point along the length of the gradient.

		This allows the gradient to go through a spectrum of colours, instead of just a
		start and end colour.

		@param proportionAlongGradient      a value between 0 and 1.0, which is the proportion
											of the distance along the line between the two points
											at which the colour should occur.
		@param colour                       the colour that should be used at this point
		@returns the index at which the new point was added
	*/
	int addColour (double proportionAlongGradient,
				   const Colour& colour);

	/** Removes one of the colours from the gradient. */
	void removeColour (int index);

	/** Multiplies the alpha value of all the colours by the given scale factor */
	void multiplyOpacity (float multiplier) noexcept;

	/** Returns the number of colour-stops that have been added. */
	int getNumColours() const noexcept;

	/** Returns the position along the length of the gradient of the colour with this index.

		The index is from 0 to getNumColours() - 1. The return value will be between 0.0 and 1.0
	*/
	double getColourPosition (int index) const noexcept;

	/** Returns the colour that was added with a given index.
		The index is from 0 to getNumColours() - 1.
	*/
	Colour getColour (int index) const noexcept;

	/** Changes the colour at a given index.
		The index is from 0 to getNumColours() - 1.
	*/
	void setColour (int index, const Colour& newColour) noexcept;

	/** Returns the an interpolated colour at any position along the gradient.
		@param position     the position along the gradient, between 0 and 1
	*/
	Colour getColourAtPosition (double position) const noexcept;

	/** Creates a set of interpolated premultiplied ARGB values.
		This will resize the HeapBlock, fill it with the colours, and will return the number of
		colours that it added.
		When calling this, the ColourGradient must have at least 2 colour stops specified.
	*/
	int createLookupTable (const AffineTransform& transform, HeapBlock <PixelARGB>& resultLookupTable) const;

	/** Creates a set of interpolated premultiplied ARGB values.
		This will fill an array of a user-specified size with the gradient, interpolating to fit.
		The numEntries argument specifies the size of the array, and this size must be greater than zero.
		When calling this, the ColourGradient must have at least 2 colour stops specified.
	*/
	void createLookupTable (PixelARGB* resultLookupTable, int numEntries) const noexcept;

	/** Returns true if all colours are opaque. */
	bool isOpaque() const noexcept;

	/** Returns true if all colours are completely transparent. */
	bool isInvisible() const noexcept;

	Point<float> point1, point2;

	/** If true, the gradient should be filled circularly, centred around
		point1, with point2 defining a point on the circumference.

		If false, the gradient is linear between the two points.
	*/
	bool isRadial;

	bool operator== (const ColourGradient& other) const noexcept;
	bool operator!= (const ColourGradient& other) const noexcept;

private:

	struct ColourPoint
	{
		ColourPoint() noexcept {}

		ColourPoint (const double position_, const Colour& colour_) noexcept
			: position (position_), colour (colour_)
		{}

		bool operator== (const ColourPoint& other) const noexcept;
		bool operator!= (const ColourPoint& other) const noexcept;

		double position;
		Colour colour;
	};

	Array <ColourPoint> colours;

	JUCE_LEAK_DETECTOR (ColourGradient);
};

#endif   // __JUCE_COLOURGRADIENT_JUCEHEADER__

/*** End of inlined file: juce_ColourGradient.h ***/


#endif
#ifndef __JUCE_COLOURS_JUCEHEADER__

/*** Start of inlined file: juce_Colours.h ***/
#ifndef __JUCE_COLOURS_JUCEHEADER__
#define __JUCE_COLOURS_JUCEHEADER__

/**
	Contains a set of predefined named colours (mostly standard HTML colours)

	@see Colour, Colours::greyLevel
*/
class Colours
{
public:
	static JUCE_API const Colour

	transparentBlack,   /**< ARGB = 0x00000000 */
	transparentWhite,   /**< ARGB = 0x00ffffff */

	black,              /**< ARGB = 0xff000000 */
	white,              /**< ARGB = 0xffffffff */
	blue,               /**< ARGB = 0xff0000ff */
	grey,               /**< ARGB = 0xff808080 */
	green,              /**< ARGB = 0xff008000 */
	red,                /**< ARGB = 0xffff0000 */
	yellow,             /**< ARGB = 0xffffff00 */

	aliceblue,              antiquewhite,       aqua,               aquamarine,
	azure,                  beige,              bisque,             blanchedalmond,
	blueviolet,             brown,              burlywood,          cadetblue,
	chartreuse,             chocolate,          coral,              cornflowerblue,
	cornsilk,               crimson,            cyan,               darkblue,
	darkcyan,               darkgoldenrod,      darkgrey,           darkgreen,
	darkkhaki,              darkmagenta,        darkolivegreen,     darkorange,
	darkorchid,             darkred,            darksalmon,         darkseagreen,
	darkslateblue,          darkslategrey,      darkturquoise,      darkviolet,
	deeppink,               deepskyblue,        dimgrey,            dodgerblue,
	firebrick,              floralwhite,        forestgreen,        fuchsia,
	gainsboro,              gold,               goldenrod,          greenyellow,
	honeydew,               hotpink,            indianred,          indigo,
	ivory,                  khaki,              lavender,           lavenderblush,
	lemonchiffon,           lightblue,          lightcoral,         lightcyan,
	lightgoldenrodyellow,   lightgreen,         lightgrey,          lightpink,
	lightsalmon,            lightseagreen,      lightskyblue,       lightslategrey,
	lightsteelblue,         lightyellow,        lime,               limegreen,
	linen,                  magenta,            maroon,             mediumaquamarine,
	mediumblue,             mediumorchid,       mediumpurple,       mediumseagreen,
	mediumslateblue,        mediumspringgreen,  mediumturquoise,    mediumvioletred,
	midnightblue,           mintcream,          mistyrose,          navajowhite,
	navy,                   oldlace,            olive,              olivedrab,
	orange,                 orangered,          orchid,             palegoldenrod,
	palegreen,              paleturquoise,      palevioletred,      papayawhip,
	peachpuff,              peru,               pink,               plum,
	powderblue,             purple,             rosybrown,          royalblue,
	saddlebrown,            salmon,             sandybrown,         seagreen,
	seashell,               sienna,             silver,             skyblue,
	slateblue,              slategrey,          snow,               springgreen,
	steelblue,              tan,                teal,               thistle,
	tomato,                 turquoise,          violet,             wheat,
	whitesmoke,             yellowgreen;

	/** Attempts to look up a string in the list of known colour names, and return
		the appropriate colour.

		A non-case-sensitive search is made of the list of predefined colours, and
		if a match is found, that colour is returned. If no match is found, the
		colour passed in as the defaultColour parameter is returned.
	*/
	static JUCE_API Colour findColourForName (const String& colourName,
											  const Colour& defaultColour);

private:

	// this isn't a class you should ever instantiate - it's just here for the
	// static values in it.
	Colours();

	JUCE_DECLARE_NON_COPYABLE (Colours);
};

#endif   // __JUCE_COLOURS_JUCEHEADER__

/*** End of inlined file: juce_Colours.h ***/


#endif
#ifndef __JUCE_FILLTYPE_JUCEHEADER__

/*** Start of inlined file: juce_FillType.h ***/
#ifndef __JUCE_FILLTYPE_JUCEHEADER__
#define __JUCE_FILLTYPE_JUCEHEADER__


/*** Start of inlined file: juce_Image.h ***/
#ifndef __JUCE_IMAGE_JUCEHEADER__
#define __JUCE_IMAGE_JUCEHEADER__


/*** Start of inlined file: juce_GraphicsContext.h ***/
#ifndef __JUCE_GRAPHICSCONTEXT_JUCEHEADER__
#define __JUCE_GRAPHICSCONTEXT_JUCEHEADER__


/*** Start of inlined file: juce_Font.h ***/
#ifndef __JUCE_FONT_JUCEHEADER__
#define __JUCE_FONT_JUCEHEADER__


/*** Start of inlined file: juce_Typeface.h ***/
#ifndef __JUCE_TYPEFACE_JUCEHEADER__
#define __JUCE_TYPEFACE_JUCEHEADER__

class Path;
class Font;
class EdgeTable;
class AffineTransform;

/**
	A typeface represents a size-independent font.

	This base class is abstract, but calling createSystemTypefaceFor() will return
	a platform-specific subclass that can be used.

	The CustomTypeface subclass allow you to build your own typeface, and to
	load and save it in the Juce typeface format.

	Normally you should never need to deal directly with Typeface objects - the Font
	class does everything you typically need for rendering text.

	@see CustomTypeface, Font
*/
class JUCE_API  Typeface  : public SingleThreadedReferenceCountedObject
{
public:

	/** A handy typedef for a pointer to a typeface. */
	typedef ReferenceCountedObjectPtr <Typeface> Ptr;

	/** Returns the name of the typeface.
		@see Font::getTypefaceName
	*/
	const String& getName() const noexcept      { return name; }

	/** Creates a new system typeface. */
	static Ptr createSystemTypefaceFor (const Font& font);

	/** Destructor. */
	virtual ~Typeface();

	/** Returns true if this typeface can be used to render the specified font.
		When called, the font will already have been checked to make sure that its name and
		style flags match the typeface.
	*/
	virtual bool isSuitableForFont (const Font&) const          { return true; }

	/** Returns the ascent of the font, as a proportion of its height.
		The height is considered to always be normalised as 1.0, so this will be a
		value less that 1.0, indicating the proportion of the font that lies above
		its baseline.
	*/
	virtual float getAscent() const = 0;

	/** Returns the descent of the font, as a proportion of its height.
		The height is considered to always be normalised as 1.0, so this will be a
		value less that 1.0, indicating the proportion of the font that lies below
		its baseline.
	*/
	virtual float getDescent() const = 0;

	/** Measures the width of a line of text.

		The distance returned is based on the font having an normalised height of 1.0.

		You should never need to call this directly! Use Font::getStringWidth() instead!
	*/
	virtual float getStringWidth (const String& text) = 0;

	/** Converts a line of text into its glyph numbers and their positions.

		The distances returned are based on the font having an normalised height of 1.0.

		You should never need to call this directly! Use Font::getGlyphPositions() instead!
	*/
	virtual void getGlyphPositions (const String& text, Array <int>& glyphs, Array<float>& xOffsets) = 0;

	/** Returns the outline for a glyph.

		The path returned will be normalised to a font height of 1.0.
	*/
	virtual bool getOutlineForGlyph (int glyphNumber, Path& path) = 0;

	/** Returns a new EdgeTable that contains the path for the givem glyph, with the specified transform applied. */
	virtual EdgeTable* getEdgeTableForGlyph (int glyphNumber, const AffineTransform& transform);

	/** Returns true if the typeface uses hinting. */
	virtual bool isHinted() const                           { return false; }

	/** Changes the number of fonts that are cached in memory. */
	static void setTypefaceCacheSize (int numFontsToCache);

protected:

	String name;

	explicit Typeface (const String& name) noexcept;

	static Ptr getFallbackTypeface();

private:
	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Typeface);
};

#endif   // __JUCE_TYPEFACE_JUCEHEADER__

/*** End of inlined file: juce_Typeface.h ***/

class LowLevelGraphicsContext;

/**
	Represents a particular font, including its size, style, etc.

	Apart from the typeface to be used, a Font object also dictates whether
	the font is bold, italic, underlined, how big it is, and its kerning and
	horizontal scale factor.

	@see Typeface
*/
class JUCE_API  Font
{
public:

	/** A combination of these values is used by the constructor to specify the
		style of font to use.
	*/
	enum FontStyleFlags
	{
		plain       = 0,    /**< indicates a plain, non-bold, non-italic version of the font. @see setStyleFlags */
		bold        = 1,    /**< boldens the font. @see setStyleFlags */
		italic      = 2,    /**< finds an italic version of the font. @see setStyleFlags */
		underlined  = 4     /**< underlines the font. @see setStyleFlags */
	};

	/** Creates a sans-serif font in a given size.

		@param fontHeight   the height in pixels (can be fractional)
		@param styleFlags   the style to use - this can be a combination of the
							Font::bold, Font::italic and Font::underlined, or
							just Font::plain for the normal style.
		@see FontStyleFlags, getDefaultSansSerifFontName
	*/
	Font (float fontHeight, int styleFlags = plain);

	/** Creates a font with a given typeface and parameters.

		@param typefaceName the name of the typeface to use
		@param fontHeight   the height in pixels (can be fractional)
		@param styleFlags   the style to use - this can be a combination of the
							Font::bold, Font::italic and Font::underlined, or
							just Font::plain for the normal style.
		@see FontStyleFlags, getDefaultSansSerifFontName
	*/
	Font (const String& typefaceName, float fontHeight, int styleFlags);

	/** Creates a copy of another Font object. */
	Font (const Font& other) noexcept;

	/** Creates a font for a typeface. */
	Font (const Typeface::Ptr& typeface);

	/** Creates a basic sans-serif font at a default height.

		You should use one of the other constructors for creating a font that you're planning
		on drawing with - this constructor is here to help initialise objects before changing
		the font's settings later.
	*/
	Font();

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	Font (Font&& other) noexcept;
	Font& operator= (Font&& other) noexcept;
   #endif

	/** Copies this font from another one. */
	Font& operator= (const Font& other) noexcept;

	bool operator== (const Font& other) const noexcept;
	bool operator!= (const Font& other) const noexcept;

	/** Destructor. */
	~Font() noexcept;

	/** Changes the name of the typeface family.

		e.g. "Arial", "Courier", etc.

		This may also be set to Font::getDefaultSansSerifFontName(), Font::getDefaultSerifFontName(),
		or Font::getDefaultMonospacedFontName(), which are not actual platform-specific font names,
		but are generic names that are used to represent the various default fonts.
		If you need to know the exact typeface name being used, you can call
		Font::getTypeface()->getTypefaceName(), which will give you the platform-specific name.

		If a suitable font isn't found on the machine, it'll just use a default instead.
	*/
	void setTypefaceName (const String& faceName);

	/** Returns the name of the typeface family that this font uses.

		e.g. "Arial", "Courier", etc.

		This may also be set to Font::getDefaultSansSerifFontName(), Font::getDefaultSerifFontName(),
		or Font::getDefaultMonospacedFontName(), which are not actual platform-specific font names,
		but are generic names that are used to represent the various default fonts.

		If you need to know the exact typeface name being used, you can call
		Font::getTypeface()->getTypefaceName(), which will give you the platform-specific name.
	*/
	const String& getTypefaceName() const noexcept;

	/** Returns a typeface name that represents the default sans-serif font.

		This is also the typeface that will be used when a font is created without
		specifying any typeface details.

		Note that this method just returns a generic placeholder string that means "the default
		sans-serif font" - it's not the actual name of this font.

		@see setTypefaceName, getDefaultSerifFontName, getDefaultMonospacedFontName
	*/
	static const String& getDefaultSansSerifFontName();

	/** Returns a typeface name that represents the default sans-serif font.

		Note that this method just returns a generic placeholder string that means "the default
		serif font" - it's not the actual name of this font.

		@see setTypefaceName, getDefaultSansSerifFontName, getDefaultMonospacedFontName
	*/
	static const String& getDefaultSerifFontName();

	/** Returns a typeface name that represents the default sans-serif font.

		Note that this method just returns a generic placeholder string that means "the default
		monospaced font" - it's not the actual name of this font.

		@see setTypefaceName, getDefaultSansSerifFontName, getDefaultSerifFontName
	*/
	static const String& getDefaultMonospacedFontName();

	/** Returns the default system typeface for the given font. */
	static Typeface::Ptr getDefaultTypefaceForFont (const Font& font);

	/** Returns the total height of this font.

		This is the maximum height, from the top of the ascent to the bottom of the
		descenders.

		@see withHeight, setHeightWithoutChangingWidth, getAscent
	*/
	float getHeight() const noexcept;

	/** Returns a copy of this font with a new height. */
	Font withHeight (float height) const;

	/** Changes the font's height.
		@see getHeight, withHeight, setHeightWithoutChangingWidth
	*/
	void setHeight (float newHeight);

	/** Changes the font's height without changing its width.
		This alters the horizontal scale to compensate for the change in height.
	*/
	void setHeightWithoutChangingWidth (float newHeight);

	/** Returns the height of the font above its baseline.
		This is the maximum height from the baseline to the top.
		@see getHeight, getDescent
	*/
	float getAscent() const;

	/** Returns the amount that the font descends below its baseline.
		This is calculated as (getHeight() - getAscent()).
		@see getAscent, getHeight
	*/
	float getDescent() const;

	/** Returns the font's style flags.
		This will return a bitwise-or'ed combination of values from the FontStyleFlags
		enum, to describe whether the font is bold, italic, etc.
		@see FontStyleFlags, withStyle
	*/
	int getStyleFlags() const noexcept;

	/** Returns a copy of this font with the given set of style flags.
		@param styleFlags     a bitwise-or'ed combination of values from the FontStyleFlags enum.
		@see FontStyleFlags, getStyleFlags
	*/
	Font withStyle (int styleFlags) const;

	/** Changes the font's style.
		@param newFlags     a bitwise-or'ed combination of values from the FontStyleFlags enum.
		@see FontStyleFlags, withStyle
	*/
	void setStyleFlags (int newFlags);

	/** Makes the font bold or non-bold. */
	void setBold (bool shouldBeBold);
	/** Returns a copy of this font with the bold attribute set. */
	Font boldened() const;
	/** Returns true if the font is bold. */
	bool isBold() const noexcept;

	/** Makes the font italic or non-italic. */
	void setItalic (bool shouldBeItalic);
	/** Returns a copy of this font with the italic attribute set. */
	Font italicised() const;
	/** Returns true if the font is italic. */
	bool isItalic() const noexcept;

	/** Makes the font underlined or non-underlined. */
	void setUnderline (bool shouldBeUnderlined);
	/** Returns true if the font is underlined. */
	bool isUnderlined() const noexcept;

	/** Returns the font's horizontal scale.

		A value of 1.0 is the normal scale, less than this will be narrower, greater
		than 1.0 will be stretched out.

		@see withHorizontalScale
	*/
	float getHorizontalScale() const noexcept;

	/** Returns a copy of this font with a new horizontal scale.
		@param scaleFactor  a value of 1.0 is the normal scale, less than this will be
							narrower, greater than 1.0 will be stretched out.
		@see getHorizontalScale
	*/
	Font withHorizontalScale (float scaleFactor) const;

	/** Changes the font's horizontal scale factor.
		@param scaleFactor  a value of 1.0 is the normal scale, less than this will be
							narrower, greater than 1.0 will be stretched out.
	*/
	void setHorizontalScale (float scaleFactor);

	/** Returns the font's kerning.

		This is the extra space added between adjacent characters, as a proportion
		of the font's height.

		A value of zero is normal spacing, positive values will spread the letters
		out more, and negative values make them closer together.
	*/
	float getExtraKerningFactor() const noexcept;

	/** Returns a copy of this font with a new kerning factor.
		@param extraKerning     a multiple of the font's height that will be added
								to space between the characters. So a value of zero is
								normal spacing, positive values spread the letters out,
								negative values make them closer together.
	*/
	Font withExtraKerningFactor (float extraKerning) const;

	/** Changes the font's kerning.
		@param extraKerning     a multiple of the font's height that will be added
								to space between the characters. So a value of zero is
								normal spacing, positive values spread the letters out,
								negative values make them closer together.
	*/
	void setExtraKerningFactor (float extraKerning);

	/** Changes all the font's characteristics with one call. */
	void setSizeAndStyle (float newHeight,
						  int newStyleFlags,
						  float newHorizontalScale,
						  float newKerningAmount);

	/** Returns the total width of a string as it would be drawn using this font.

		For a more accurate floating-point result, use getStringWidthFloat().
	*/
	int getStringWidth (const String& text) const;

	/** Returns the total width of a string as it would be drawn using this font.

		@see getStringWidth
	*/
	float getStringWidthFloat (const String& text) const;

	/** Returns the series of glyph numbers and their x offsets needed to represent a string.

		An extra x offset is added at the end of the run, to indicate where the right hand
		edge of the last character is.
	*/
	void getGlyphPositions (const String& text, Array <int>& glyphs, Array <float>& xOffsets) const;

	/** Returns the typeface used by this font.

		Note that the object returned may go out of scope if this font is deleted
		or has its style changed.
	*/
	Typeface* getTypeface() const;

	/** Creates an array of Font objects to represent all the fonts on the system.

		If you just need the names of the typefaces, you can also use
		findAllTypefaceNames() instead.

		@param results  the array to which new Font objects will be added.
	*/
	static void findFonts (Array<Font>& results);

	/** Returns a list of all the available typeface names.

		The names returned can be passed into setTypefaceName().

		You can use this instead of findFonts() if you only need their names, and not
		font objects.
	*/
	static StringArray findAllTypefaceNames();

	/** Returns the name of the typeface to be used for rendering glyphs that aren't found
		in the requested typeface.
	*/
	static const String& getFallbackFontName();

	/** Sets the (platform-specific) name of the typeface to use to find glyphs that aren't
		available in whatever font you're trying to use.
	*/
	static void setFallbackFontName (const String& name);

	/** Creates a string to describe this font.
		The string will contain information to describe the font's typeface, size, and
		style. To recreate the font from this string, use fromString().
	*/
	String toString() const;

	/** Recreates a font from its stringified encoding.
		This method takes a string that was created by toString(), and recreates the
		original font.
	*/
	static Font fromString (const String& fontDescription);

private:

	class SharedFontInternal;
	ReferenceCountedObjectPtr <SharedFontInternal> font;
	void dupeInternalIfShared();

	JUCE_LEAK_DETECTOR (Font);
};

#endif   // __JUCE_FONT_JUCEHEADER__

/*** End of inlined file: juce_Font.h ***/


/*** Start of inlined file: juce_Rectangle.h ***/
#ifndef __JUCE_RECTANGLE_JUCEHEADER__
#define __JUCE_RECTANGLE_JUCEHEADER__

class RectangleList;

/**
	Manages a rectangle and allows geometric operations to be performed on it.

	@see RectangleList, Path, Line, Point
*/
template <typename ValueType>
class Rectangle
{
public:

	/** Creates a rectangle of zero size.

		The default co-ordinates will be (0, 0, 0, 0).
	*/
	Rectangle() noexcept
	  : w(), h()
	{
	}

	/** Creates a copy of another rectangle. */
	Rectangle (const Rectangle& other) noexcept
	  : pos (other.pos), w (other.w), h (other.h)
	{
	}

	/** Creates a rectangle with a given position and size. */
	Rectangle (const ValueType initialX, const ValueType initialY,
			   const ValueType width, const ValueType height) noexcept
	  : pos (initialX, initialY),
		w (width), h (height)
	{
	}

	/** Creates a rectangle with a given size, and a position of (0, 0). */
	Rectangle (const ValueType width, const ValueType height) noexcept
	  : w (width), h (height)
	{
	}

	/** Creates a Rectangle from the positions of two opposite corners. */
	Rectangle (const Point<ValueType>& corner1, const Point<ValueType>& corner2) noexcept
	  : pos (jmin (corner1.x, corner2.x),
			 jmin (corner1.y, corner2.y)),
		w (corner1.x - corner2.x),
		h (corner1.y - corner2.y)
	{
		if (w < ValueType()) w = -w;
		if (h < ValueType()) h = -h;
	}

	/** Creates a Rectangle from a set of left, right, top, bottom coordinates.
		The right and bottom values must be larger than the left and top ones, or the resulting
		rectangle will have a negative size.
	*/
	static Rectangle leftTopRightBottom (const ValueType left, const ValueType top,
										 const ValueType right, const ValueType bottom) noexcept
	{
		return Rectangle (left, top, right - left, bottom - top);
	}

	Rectangle& operator= (const Rectangle& other) noexcept
	{
		pos = other.pos;
		w = other.w; h = other.h;
		return *this;
	}

	/** Destructor. */
	~Rectangle() noexcept {}

	/** Returns true if the rectangle's width and height are both zero or less */
	bool isEmpty() const noexcept                                   { return w <= ValueType() || h <= ValueType(); }

	/** Returns the x co-ordinate of the rectangle's left-hand-side. */
	inline ValueType getX() const noexcept                          { return pos.x; }

	/** Returns the y co-ordinate of the rectangle's top edge. */
	inline ValueType getY() const noexcept                          { return pos.y; }

	/** Returns the width of the rectangle. */
	inline ValueType getWidth() const noexcept                      { return w; }

	/** Returns the height of the rectangle. */
	inline ValueType getHeight() const noexcept                     { return h; }

	/** Returns the x co-ordinate of the rectangle's right-hand-side. */
	inline ValueType getRight() const noexcept                      { return pos.x + w; }

	/** Returns the y co-ordinate of the rectangle's bottom edge. */
	inline ValueType getBottom() const noexcept                     { return pos.y + h; }

	/** Returns the x co-ordinate of the rectangle's centre. */
	ValueType getCentreX() const noexcept                           { return pos.x + w / (ValueType) 2; }

	/** Returns the y co-ordinate of the rectangle's centre. */
	ValueType getCentreY() const noexcept                           { return pos.y + h / (ValueType) 2; }

	/** Returns the centre point of the rectangle. */
	Point<ValueType> getCentre() const noexcept                     { return Point<ValueType> (pos.x + w / (ValueType) 2,
																							   pos.y + h / (ValueType) 2); }

	/** Returns the aspect ratio of the rectangle's width / height.
		If widthOverHeight is true, it returns width / height; if widthOverHeight is false,
		it returns height / width. */
	ValueType getAspectRatio (const bool widthOverHeight = true) const noexcept                     { return widthOverHeight ? w / h : h / w; }

	/** Returns the rectangle's top-left position as a Point. */
	const Point<ValueType>& getPosition() const noexcept                                            { return pos; }

	/** Changes the position of the rectangle's top-left corner (leaving its size unchanged). */
	void setPosition (const Point<ValueType>& newPos) noexcept                                      { pos = newPos; }

	/** Changes the position of the rectangle's top-left corner (leaving its size unchanged). */
	void setPosition (const ValueType newX, const ValueType newY) noexcept                          { pos.setXY (newX, newY); }

	/** Returns a rectangle with the same size as this one, but a new position. */
	Rectangle withPosition (const ValueType newX, const ValueType newY) const noexcept              { return Rectangle (newX, newY, w, h); }

	/** Returns a rectangle with the same size as this one, but a new position. */
	Rectangle withPosition (const Point<ValueType>& newPos) const noexcept                          { return Rectangle (newPos.x, newPos.y, w, h); }

	/** Returns the rectangle's top-left position as a Point. */
	const Point<ValueType>& getTopLeft() const noexcept                                             { return pos; }

	/** Returns the rectangle's top-right position as a Point. */
	Point<ValueType> getTopRight() const noexcept                                                   { return Point<ValueType> (pos.x + w, pos.y); }

	/** Returns the rectangle's bottom-left position as a Point. */
	Point<ValueType> getBottomLeft() const noexcept                                                 { return Point<ValueType> (pos.x, pos.y + h); }

	/** Returns the rectangle's bottom-right position as a Point. */
	Point<ValueType> getBottomRight() const noexcept                                                { return Point<ValueType> (pos.x + w, pos.y + h); }

	/** Changes the rectangle's size, leaving the position of its top-left corner unchanged. */
	void setSize (const ValueType newWidth, const ValueType newHeight) noexcept                     { w = newWidth; h = newHeight; }

	/** Returns a rectangle with the same position as this one, but a new size. */
	Rectangle withSize (const ValueType newWidth, const ValueType newHeight) const noexcept         { return Rectangle (pos.x, pos.y, newWidth, newHeight); }

	/** Changes all the rectangle's co-ordinates. */
	void setBounds (const ValueType newX, const ValueType newY,
					const ValueType newWidth, const ValueType newHeight) noexcept
	{
		pos.x = newX; pos.y = newY; w = newWidth; h = newHeight;
	}

	/** Changes the rectangle's X coordinate */
	void setX (const ValueType newX) noexcept                       { pos.x = newX; }

	/** Changes the rectangle's Y coordinate */
	void setY (const ValueType newY) noexcept                       { pos.y = newY; }

	/** Changes the rectangle's width */
	void setWidth (const ValueType newWidth) noexcept               { w = newWidth; }

	/** Changes the rectangle's height */
	void setHeight (const ValueType newHeight) noexcept             { h = newHeight; }

	/** Returns a rectangle which has the same size and y-position as this one, but with a different x-position. */
	Rectangle withX (const ValueType newX) const noexcept                                     { return Rectangle (newX, pos.y, w, h); }

	/** Returns a rectangle which has the same size and x-position as this one, but with a different y-position. */
	Rectangle withY (const ValueType newY) const noexcept                                     { return Rectangle (pos.x, newY, w, h); }

	/** Returns a rectangle which has the same position and height as this one, but with a different width. */
	Rectangle withWidth (const ValueType newWidth) const noexcept                             { return Rectangle (pos.x, pos.y, newWidth, h); }

	/** Returns a rectangle which has the same position and width as this one, but with a different height. */
	Rectangle withHeight (const ValueType newHeight) const noexcept                           { return Rectangle (pos.x, pos.y, w, newHeight); }

	/** Moves the x position, adjusting the width so that the right-hand edge remains in the same place.
		If the x is moved to be on the right of the current right-hand edge, the width will be set to zero.
		@see withLeft
	*/
	void setLeft (const ValueType newLeft) noexcept
	{
		w = jmax (ValueType(), pos.x + w - newLeft);
		pos.x = newLeft;
	}

	/** Returns a new rectangle with a different x position, but the same right-hand edge as this one.
		If the new x is beyond the right of the current right-hand edge, the width will be set to zero.
		@see setLeft
	*/
	Rectangle withLeft (const ValueType newLeft) const noexcept       { return Rectangle (newLeft, pos.y, jmax (ValueType(), pos.x + w - newLeft), h); }

	/** Moves the y position, adjusting the height so that the bottom edge remains in the same place.
		If the y is moved to be below the current bottom edge, the height will be set to zero.
		@see withTop
	*/
	void setTop (const ValueType newTop) noexcept
	{
		h = jmax (ValueType(), pos.y + h - newTop);
		pos.y = newTop;
	}

	/** Returns a new rectangle with a different y position, but the same bottom edge as this one.
		If the new y is beyond the bottom of the current rectangle, the height will be set to zero.
		@see setTop
	*/
	Rectangle withTop (const ValueType newTop) const noexcept         { return Rectangle (pos.x, newTop, w, jmax (ValueType(), pos.y + h - newTop)); }

	/** Adjusts the width so that the right-hand edge of the rectangle has this new value.
		If the new right is below the current X value, the X will be pushed down to match it.
		@see getRight, withRight
	*/
	void setRight (const ValueType newRight) noexcept
	{
		pos.x = jmin (pos.x, newRight);
		w = newRight - pos.x;
	}

	/** Returns a new rectangle with a different right-hand edge position, but the same left-hand edge as this one.
		If the new right edge is below the current left-hand edge, the width will be set to zero.
		@see setRight
	*/
	Rectangle withRight (const ValueType newRight) const noexcept     { return Rectangle (jmin (pos.x, newRight), pos.y, jmax (ValueType(), newRight - pos.x), h); }

	/** Adjusts the height so that the bottom edge of the rectangle has this new value.
		If the new bottom is lower than the current Y value, the Y will be pushed down to match it.
		@see getBottom, withBottom
	*/
	void setBottom (const ValueType newBottom) noexcept
	{
		pos.y = jmin (pos.y, newBottom);
		h = newBottom - pos.y;
	}

	/** Returns a new rectangle with a different bottom edge position, but the same top edge as this one.
		If the new y is beyond the bottom of the current rectangle, the height will be set to zero.
		@see setBottom
	*/
	Rectangle withBottom (const ValueType newBottom) const noexcept   { return Rectangle (pos.x, jmin (pos.y, newBottom), w, jmax (ValueType(), newBottom - pos.y)); }

	/** Moves the rectangle's position by adding amount to its x and y co-ordinates. */
	void translate (const ValueType deltaX,
					const ValueType deltaY) noexcept
	{
		pos.x += deltaX;
		pos.y += deltaY;
	}

	/** Returns a rectangle which is the same as this one moved by a given amount. */
	Rectangle translated (const ValueType deltaX,
						  const ValueType deltaY) const noexcept
	{
		return Rectangle (pos.x + deltaX, pos.y + deltaY, w, h);
	}

	/** Returns a rectangle which is the same as this one moved by a given amount. */
	Rectangle operator+ (const Point<ValueType>& deltaPosition) const noexcept
	{
		return Rectangle (pos.x + deltaPosition.x, pos.y + deltaPosition.y, w, h);
	}

	/** Moves this rectangle by a given amount. */
	Rectangle& operator+= (const Point<ValueType>& deltaPosition) noexcept
	{
		pos += deltaPosition;
		return *this;
	}

	/** Returns a rectangle which is the same as this one moved by a given amount. */
	Rectangle operator- (const Point<ValueType>& deltaPosition) const noexcept
	{
		return Rectangle (pos.x - deltaPosition.x, pos.y - deltaPosition.y, w, h);
	}

	/** Moves this rectangle by a given amount. */
	Rectangle& operator-= (const Point<ValueType>& deltaPosition) noexcept
	{
		pos -= deltaPosition;
		return *this;
	}

	/** Expands the rectangle by a given amount.

		Effectively, its new size is (x - deltaX, y - deltaY, w + deltaX * 2, h + deltaY * 2).
		@see expanded, reduce, reduced
	*/
	void expand (const ValueType deltaX,
				 const ValueType deltaY) noexcept
	{
		const ValueType nw = jmax (ValueType(), w + deltaX * 2);
		const ValueType nh = jmax (ValueType(), h + deltaY * 2);
		setBounds (pos.x - deltaX, pos.y - deltaY, nw, nh);
	}

	/** Returns a rectangle that is larger than this one by a given amount.

		Effectively, the rectangle returned is (x - deltaX, y - deltaY, w + deltaX * 2, h + deltaY * 2).
		@see expand, reduce, reduced
	*/
	Rectangle expanded (const ValueType deltaX,
						const ValueType deltaY) const noexcept
	{
		const ValueType nw = jmax (ValueType(), w + deltaX * 2);
		const ValueType nh = jmax (ValueType(), h + deltaY * 2);
		return Rectangle (pos.x - deltaX, pos.y - deltaY, nw, nh);
	}

	/** Shrinks the rectangle by a given amount.

		Effectively, its new size is (x + deltaX, y + deltaY, w - deltaX * 2, h - deltaY * 2).
		@see reduced, expand, expanded
	*/
	void reduce (const ValueType deltaX,
				 const ValueType deltaY) noexcept
	{
		expand (-deltaX, -deltaY);
	}

	/** Returns a rectangle that is smaller than this one by a given amount.

		Effectively, the rectangle returned is (x + deltaX, y + deltaY, w - deltaX * 2, h - deltaY * 2).
		@see reduce, expand, expanded
	*/
	Rectangle reduced (const ValueType deltaX,
					   const ValueType deltaY) const noexcept
	{
		return expanded (-deltaX, -deltaY);
	}

	/** Removes a strip from the top of this rectangle, reducing this rectangle
		by the specified amount and returning the section that was removed.

		E.g. if this rectangle is (100, 100, 300, 300) and amountToRemove is 50, this will
		return (100, 100, 300, 50) and leave this rectangle as (100, 150, 300, 250).

		If amountToRemove is greater than the height of this rectangle, it'll be clipped to
		that value.
	*/
	Rectangle removeFromTop (const ValueType amountToRemove) noexcept
	{
		const Rectangle r (pos.x, pos.y, w, jmin (amountToRemove, h));
		pos.y += r.h; h -= r.h;
		return r;
	}

	/** Removes a strip from the left-hand edge of this rectangle, reducing this rectangle
		by the specified amount and returning the section that was removed.

		E.g. if this rectangle is (100, 100, 300, 300) and amountToRemove is 50, this will
		return (100, 100, 50, 300) and leave this rectangle as (150, 100, 250, 300).

		If amountToRemove is greater than the width of this rectangle, it'll be clipped to
		that value.
	*/
	Rectangle removeFromLeft (const ValueType amountToRemove) noexcept
	{
		const Rectangle r (pos.x, pos.y, jmin (amountToRemove, w), h);
		pos.x += r.w; w -= r.w;
		return r;
	}

	/** Removes a strip from the right-hand edge of this rectangle, reducing this rectangle
		by the specified amount and returning the section that was removed.

		E.g. if this rectangle is (100, 100, 300, 300) and amountToRemove is 50, this will
		return (250, 100, 50, 300) and leave this rectangle as (100, 100, 250, 300).

		If amountToRemove is greater than the width of this rectangle, it'll be clipped to
		that value.
	*/
	Rectangle removeFromRight (ValueType amountToRemove) noexcept
	{
		amountToRemove = jmin (amountToRemove, w);
		const Rectangle r (pos.x + w - amountToRemove, pos.y, amountToRemove, h);
		w -= amountToRemove;
		return r;
	}

	/** Removes a strip from the bottom of this rectangle, reducing this rectangle
		by the specified amount and returning the section that was removed.

		E.g. if this rectangle is (100, 100, 300, 300) and amountToRemove is 50, this will
		return (100, 250, 300, 50) and leave this rectangle as (100, 100, 300, 250).

		If amountToRemove is greater than the height of this rectangle, it'll be clipped to
		that value.
	*/
	Rectangle removeFromBottom (ValueType amountToRemove) noexcept
	{
		amountToRemove = jmin (amountToRemove, h);
		const Rectangle r (pos.x, pos.y + h - amountToRemove, w, amountToRemove);
		h -= amountToRemove;
		return r;
	}

	/** Returns true if the two rectangles are identical. */
	bool operator== (const Rectangle& other) const noexcept
	{
		return pos == other.pos && w == other.w && h == other.h;
	}

	/** Returns true if the two rectangles are not identical. */
	bool operator!= (const Rectangle& other) const noexcept
	{
		return pos != other.pos || w != other.w || h != other.h;
	}

	/** Returns true if this co-ordinate is inside the rectangle. */
	bool contains (const ValueType xCoord, const ValueType yCoord) const noexcept
	{
		return xCoord >= pos.x && yCoord >= pos.y && xCoord < pos.x + w && yCoord < pos.y + h;
	}

	/** Returns true if this co-ordinate is inside the rectangle. */
	bool contains (const Point<ValueType>& point) const noexcept
	{
		return point.x >= pos.x && point.y >= pos.y && point.x < pos.x + w && point.y < pos.y + h;
	}

	/** Returns true if this other rectangle is completely inside this one. */
	bool contains (const Rectangle& other) const noexcept
	{
		return pos.x <= other.pos.x && pos.y <= other.pos.y
			&& pos.x + w >= other.pos.x + other.w && pos.y + h >= other.pos.y + other.h;
	}

	/** Returns the nearest point to the specified point that lies within this rectangle. */
	Point<ValueType> getConstrainedPoint (const Point<ValueType>& point) const noexcept
	{
		return Point<ValueType> (jlimit (pos.x, pos.x + w, point.x),
								 jlimit (pos.y, pos.y + h, point.y));
	}

	/** Returns true if any part of another rectangle overlaps this one. */
	bool intersects (const Rectangle& other) const noexcept
	{
		return pos.x + w > other.pos.x
			&& pos.y + h > other.pos.y
			&& pos.x < other.pos.x + other.w
			&& pos.y < other.pos.y + other.h
			&& w > ValueType() && h > ValueType();
	}

	/** Returns the region that is the overlap between this and another rectangle.

		If the two rectangles don't overlap, the rectangle returned will be empty.
	*/
	Rectangle getIntersection (const Rectangle& other) const noexcept
	{
		const ValueType nx = jmax (pos.x, other.pos.x);
		const ValueType ny = jmax (pos.y, other.pos.y);
		const ValueType nw = jmin (pos.x + w, other.pos.x + other.w) - nx;
		const ValueType nh = jmin (pos.y + h, other.pos.y + other.h) - ny;

		if (nw >= ValueType() && nh >= ValueType())
			return Rectangle (nx, ny, nw, nh);

		return Rectangle();
	}

	/** Clips a rectangle so that it lies only within this one.
		This is a non-static version of intersectRectangles().
		Returns false if the two regions didn't overlap.
	*/
	bool intersectRectangle (ValueType& otherX, ValueType& otherY, ValueType& otherW, ValueType& otherH) const noexcept
	{
		const ValueType maxX (jmax (otherX, pos.x));
		otherW = jmin (otherX + otherW, pos.x + w) - maxX;

		if (otherW > ValueType())
		{
			const ValueType maxY (jmax (otherY, pos.y));
			otherH = jmin (otherY + otherH, pos.y + h) - maxY;

			if (otherH > ValueType())
			{
				otherX = maxX; otherY = maxY;
				return true;
			}
		}

		return false;
	}

	/** Returns the smallest rectangle that contains both this one and the one passed-in.

		If either this or the other rectangle are empty, they will not be counted as
		part of the resulting region.
	*/
	Rectangle getUnion (const Rectangle& other) const noexcept
	{
		if (other.isEmpty())  return *this;
		if (isEmpty())        return other;

		const ValueType newX = jmin (pos.x, other.pos.x);
		const ValueType newY = jmin (pos.y, other.pos.y);

		return Rectangle (newX, newY,
						  jmax (pos.x + w, other.pos.x + other.w) - newX,
						  jmax (pos.y + h, other.pos.y + other.h) - newY);
	}

	/** If this rectangle merged with another one results in a simple rectangle, this
		will set this rectangle to the result, and return true.

		Returns false and does nothing to this rectangle if the two rectangles don't overlap,
		or if they form a complex region.
	*/
	bool enlargeIfAdjacent (const Rectangle& other) noexcept
	{
		if (pos.x == other.pos.x && getRight() == other.getRight()
			 && (other.getBottom() >= pos.y && other.pos.y <= getBottom()))
		{
			const ValueType newY = jmin (pos.y, other.pos.y);
			h = jmax (getBottom(), other.getBottom()) - newY;
			pos.y = newY;
			return true;
		}
		else if (pos.y == other.pos.y && getBottom() == other.getBottom()
				  && (other.getRight() >= pos.x && other.pos.x <= getRight()))
		{
			const ValueType newX = jmin (pos.x, other.pos.x);
			w = jmax (getRight(), other.getRight()) - newX;
			pos.x = newX;
			return true;
		}

		return false;
	}

	/** If after removing another rectangle from this one the result is a simple rectangle,
		this will set this object's bounds to be the result, and return true.

		Returns false and does nothing to this rectangle if the two rectangles don't overlap,
		or if removing the other one would form a complex region.
	*/
	bool reduceIfPartlyContainedIn (const Rectangle& other) noexcept
	{
		int inside = 0;
		const ValueType otherR (other.getRight());
		if (pos.x >= other.pos.x && pos.x < otherR) inside = 1;
		const ValueType otherB (other.getBottom());
		if (pos.y >= other.pos.y && pos.y < otherB) inside |= 2;
		const ValueType r (pos.x + w);
		if (r >= other.pos.x && r < otherR) inside |= 4;
		const ValueType b (pos.y + h);
		if (b >= other.pos.y && b < otherB) inside |= 8;

		switch (inside)
		{
			case 1 + 2 + 8:     w = r - otherR; pos.x = otherR; return true;
			case 1 + 2 + 4:     h = b - otherB; pos.y = otherB; return true;
			case 2 + 4 + 8:     w = other.pos.x - pos.x; return true;
			case 1 + 4 + 8:     h = other.pos.y - pos.y; return true;
		}

		return false;
	}

	/** Returns the smallest rectangle that can contain the shape created by applying
		a transform to this rectangle.

		This should only be used on floating point rectangles.
	*/
	Rectangle transformed (const AffineTransform& transform) const noexcept
	{
		float x1 = pos.x,     y1 = pos.y;
		float x2 = pos.x + w, y2 = pos.y;
		float x3 = pos.x,     y3 = pos.y + h;
		float x4 = x2,        y4 = y3;

		transform.transformPoints (x1, y1, x2, y2);
		transform.transformPoints (x3, y3, x4, y4);

		const float rx = jmin (x1, x2, x3, x4);
		const float ry = jmin (y1, y2, y3, y4);

		return Rectangle (rx, ry,
						  jmax (x1, x2, x3, x4) - rx,
						  jmax (y1, y2, y3, y4) - ry);
	}

	/** Returns the smallest integer-aligned rectangle that completely contains this one.
		This is only relevent for floating-point rectangles, of course.
		@see toFloat()
	*/
	Rectangle<int> getSmallestIntegerContainer() const noexcept
	{
		const int x1 = static_cast <int> (std::floor (static_cast<float> (pos.x)));
		const int y1 = static_cast <int> (std::floor (static_cast<float> (pos.y)));
		const int x2 = static_cast <int> (std::ceil  (static_cast<float> (pos.x + w)));
		const int y2 = static_cast <int> (std::ceil  (static_cast<float> (pos.y + h)));

		return Rectangle<int> (x1, y1, x2 - x1, y2 - y1);
	}

	/** Returns the smallest Rectangle that can contain a set of points. */
	static Rectangle findAreaContainingPoints (const Point<ValueType>* const points, const int numPoints) noexcept
	{
		if (numPoints == 0)
			return Rectangle();

		ValueType minX (points[0].x);
		ValueType maxX (minX);
		ValueType minY (points[0].y);
		ValueType maxY (minY);

		for (int i = 1; i < numPoints; ++i)
		{
			minX = jmin (minX, points[i].x);
			maxX = jmax (maxX, points[i].x);
			minY = jmin (minY, points[i].y);
			maxY = jmax (maxY, points[i].y);
		}

		return Rectangle (minX, minY, maxX - minX, maxY - minY);
	}

	/** Casts this rectangle to a Rectangle<float>.
		Obviously this is mainly useful for rectangles that use integer types.
		@see getSmallestIntegerContainer
	*/
	Rectangle<float> toFloat() const noexcept
	{
		return Rectangle<float> (static_cast<float> (pos.x), static_cast<float> (pos.y),
								 static_cast<float> (w),     static_cast<float> (h));
	}

	/** Static utility to intersect two sets of rectangular co-ordinates.
		Returns false if the two regions didn't overlap.
		@see intersectRectangle
	*/
	static bool intersectRectangles (ValueType& x1, ValueType& y1, ValueType& w1, ValueType& h1,
									 const ValueType x2, const ValueType y2, const ValueType w2, const ValueType h2) noexcept
	{
		const ValueType x (jmax (x1, x2));
		w1 = jmin (x1 + w1, x2 + w2) - x;

		if (w1 > ValueType())
		{
			const ValueType y (jmax (y1, y2));
			h1 = jmin (y1 + h1, y2 + h2) - y;

			if (h1 > ValueType())
			{
				x1 = x; y1 = y;
				return true;
			}
		}

		return false;
	}

	/** Creates a string describing this rectangle.

		The string will be of the form "x y width height", e.g. "100 100 400 200".

		Coupled with the fromString() method, this is very handy for things like
		storing rectangles (particularly component positions) in XML attributes.

		@see fromString
	*/
	String toString() const
	{
		String s;
		s.preallocateBytes (32);
		s << pos.x << ' ' << pos.y << ' ' << w << ' ' << h;
		return s;
	}

	/** Parses a string containing a rectangle's details.

		The string should contain 4 integer tokens, in the form "x y width height". They
		can be comma or whitespace separated.

		This method is intended to go with the toString() method, to form an easy way
		of saving/loading rectangles as strings.

		@see toString
	*/
	static Rectangle fromString (const String& stringVersion)
	{
		StringArray toks;
		toks.addTokens (stringVersion.trim(), ",; \t\r\n", String::empty);

		return Rectangle (toks[0].trim().getIntValue(),
						  toks[1].trim().getIntValue(),
						  toks[2].trim().getIntValue(),
						  toks[3].trim().getIntValue());
	}

private:
	friend class RectangleList;
	Point<ValueType> pos;
	ValueType w, h;
};

#endif   // __JUCE_RECTANGLE_JUCEHEADER__

/*** End of inlined file: juce_Rectangle.h ***/


/*** Start of inlined file: juce_PathStrokeType.h ***/
#ifndef __JUCE_PATHSTROKETYPE_JUCEHEADER__
#define __JUCE_PATHSTROKETYPE_JUCEHEADER__


/*** Start of inlined file: juce_Path.h ***/
#ifndef __JUCE_PATH_JUCEHEADER__
#define __JUCE_PATH_JUCEHEADER__


/*** Start of inlined file: juce_Line.h ***/
#ifndef __JUCE_LINE_JUCEHEADER__
#define __JUCE_LINE_JUCEHEADER__

/**
	Represents a line.

	This class contains a bunch of useful methods for various geometric
	tasks.

	The ValueType template parameter should be a primitive type - float or double
	are what it's designed for. Integer types will work in a basic way, but some methods
	that perform mathematical operations may not compile, or they may not produce
	sensible results.

	@see Point, Rectangle, Path, Graphics::drawLine
*/
template <typename ValueType>
class Line
{
public:

	/** Creates a line, using (0, 0) as its start and end points. */
	Line() noexcept {}

	/** Creates a copy of another line. */
	Line (const Line& other) noexcept
		: start (other.start),
		  end (other.end)
	{
	}

	/** Creates a line based on the co-ordinates of its start and end points. */
	Line (ValueType startX, ValueType startY, ValueType endX, ValueType endY) noexcept
		: start (startX, startY),
		  end (endX, endY)
	{
	}

	/** Creates a line from its start and end points. */
	Line (const Point<ValueType>& startPoint,
		  const Point<ValueType>& endPoint) noexcept
		: start (startPoint),
		  end (endPoint)
	{
	}

	/** Copies a line from another one. */
	Line& operator= (const Line& other) noexcept
	{
		start = other.start;
		end = other.end;
		return *this;
	}

	/** Destructor. */
	~Line() noexcept {}

	/** Returns the x co-ordinate of the line's start point. */
	inline ValueType getStartX() const noexcept                             { return start.x; }

	/** Returns the y co-ordinate of the line's start point. */
	inline ValueType getStartY() const noexcept                             { return start.y; }

	/** Returns the x co-ordinate of the line's end point. */
	inline ValueType getEndX() const noexcept                               { return end.x; }

	/** Returns the y co-ordinate of the line's end point. */
	inline ValueType getEndY() const noexcept                               { return end.y; }

	/** Returns the line's start point. */
	inline const Point<ValueType>& getStart() const noexcept                { return start; }

	/** Returns the line's end point. */
	inline const Point<ValueType>& getEnd() const noexcept                  { return end; }

	/** Changes this line's start point */
	void setStart (ValueType newStartX, ValueType newStartY) noexcept       { start.setXY (newStartX, newStartY); }

	/** Changes this line's end point */
	void setEnd (ValueType newEndX, ValueType newEndY) noexcept             { end.setXY (newEndX, newEndY); }

	/** Changes this line's start point */
	void setStart (const Point<ValueType>& newStart) noexcept               { start = newStart; }

	/** Changes this line's end point */
	void setEnd (const Point<ValueType>& newEnd) noexcept                   { end = newEnd; }

	/** Returns a line that is the same as this one, but with the start and end reversed, */
	const Line reversed() const noexcept                                    { return Line (end, start); }

	/** Applies an affine transform to the line's start and end points. */
	void applyTransform (const AffineTransform& transform) noexcept
	{
		start.applyTransform (transform);
		end.applyTransform (transform);
	}

	/** Returns the length of the line. */
	ValueType getLength() const noexcept                                    { return start.getDistanceFrom (end); }

	/** Returns true if the line's start and end x co-ordinates are the same. */
	bool isVertical() const noexcept                                        { return start.x == end.x; }

	/** Returns true if the line's start and end y co-ordinates are the same. */
	bool isHorizontal() const noexcept                                      { return start.y == end.y; }

	/** Returns the line's angle.

		This value is the number of radians clockwise from the 12 o'clock direction,
		where the line's start point is considered to be at the centre.
	*/
	typename Point<ValueType>::FloatType getAngle() const noexcept          { return start.getAngleToPoint (end); }

	/** Compares two lines. */
	bool operator== (const Line& other) const noexcept                      { return start == other.start && end == other.end; }

	/** Compares two lines. */
	bool operator!= (const Line& other) const noexcept                      { return start != other.start || end != other.end; }

	/** Finds the intersection between two lines.

		@param line             the other line
		@param intersection     the position of the point where the lines meet (or
								where they would meet if they were infinitely long)
								the intersection (if the lines intersect). If the lines
								are parallel, this will just be set to the position
								of one of the line's endpoints.
		@returns    true if the line segments intersect; false if they dont. Even if they
					don't intersect, the intersection co-ordinates returned will still
					be valid
	*/
	bool intersects (const Line& line, Point<ValueType>& intersection) const noexcept
	{
		return findIntersection (start, end, line.start, line.end, intersection);
	}

	/** Finds the intersection between two lines.

		@param line     the line to intersect with
		@returns        the point at which the lines intersect, even if this lies beyond the end of the lines
	*/
	Point<ValueType> getIntersection (const Line& line) const noexcept
	{
		Point<ValueType> p;
		findIntersection (start, end, line.start, line.end, p);
		return p;
	}

	/** Returns the location of the point which is a given distance along this line.

		@param distanceFromStart    the distance to move along the line from its
									start point. This value can be negative or longer
									than the line itself
		@see getPointAlongLineProportionally
	*/
	Point<ValueType> getPointAlongLine (ValueType distanceFromStart) const noexcept
	{
		return start + (end - start) * (distanceFromStart / getLength());
	}

	/** Returns a point which is a certain distance along and to the side of this line.

		This effectively moves a given distance along the line, then another distance
		perpendicularly to this, and returns the resulting position.

		@param distanceFromStart    the distance to move along the line from its
									start point. This value can be negative or longer
									than the line itself
		@param perpendicularDistance    how far to move sideways from the line. If you're
									looking along the line from its start towards its
									end, then a positive value here will move to the
									right, negative value move to the left.
	*/
	Point<ValueType> getPointAlongLine (ValueType distanceFromStart,
										ValueType perpendicularDistance) const noexcept
	{
		const Point<ValueType> delta (end - start);
		const double length = juce_hypot ((double) delta.x,
										  (double) delta.y);
		if (length <= 0)
			return start;

		return Point<ValueType> (start.x + static_cast <ValueType> ((delta.x * distanceFromStart - delta.y * perpendicularDistance) / length),
								 start.y + static_cast <ValueType> ((delta.y * distanceFromStart + delta.x * perpendicularDistance) / length));
	}

	/** Returns the location of the point which is a given distance along this line
		proportional to the line's length.

		@param proportionOfLength   the distance to move along the line from its
									start point, in multiples of the line's length.
									So a value of 0.0 will return the line's start point
									and a value of 1.0 will return its end point. (This value
									can be negative or greater than 1.0).
		@see getPointAlongLine
	*/
	Point<ValueType> getPointAlongLineProportionally (ValueType proportionOfLength) const noexcept
	{
		return start + (end - start) * proportionOfLength;
	}

	/** Returns the smallest distance between this line segment and a given point.

		So if the point is close to the line, this will return the perpendicular
		distance from the line; if the point is a long way beyond one of the line's
		end-point's, it'll return the straight-line distance to the nearest end-point.

		pointOnLine receives the position of the point that is found.

		@returns the point's distance from the line
		@see getPositionAlongLineOfNearestPoint
	*/
	ValueType getDistanceFromPoint (const Point<ValueType>& targetPoint,
									Point<ValueType>& pointOnLine) const noexcept
	{
		const Point<ValueType> delta (end - start);
		const double length = delta.x * delta.x + delta.y * delta.y;

		if (length > 0)
		{
			const double prop = ((targetPoint.x - start.x) * delta.x
							   + (targetPoint.y - start.y) * delta.y) / length;

			if (prop >= 0 && prop <= 1.0)
			{
				pointOnLine = start + delta * static_cast <ValueType> (prop);
				return targetPoint.getDistanceFrom (pointOnLine);
			}
		}

		const float fromStart = targetPoint.getDistanceFrom (start);
		const float fromEnd = targetPoint.getDistanceFrom (end);

		if (fromStart < fromEnd)
		{
			pointOnLine = start;
			return fromStart;
		}
		else
		{
			pointOnLine = end;
			return fromEnd;
		}
	}

	/** Finds the point on this line which is nearest to a given point, and
		returns its position as a proportional position along the line.

		@returns    a value 0 to 1.0 which is the distance along this line from the
					line's start to the point which is nearest to the point passed-in. To
					turn this number into a position, use getPointAlongLineProportionally().
		@see getDistanceFromPoint, getPointAlongLineProportionally
	*/
	ValueType findNearestProportionalPositionTo (const Point<ValueType>& point) const noexcept
	{
		const Point<ValueType> delta (end - start);
		const double length = delta.x * delta.x + delta.y * delta.y;

		return length <= 0 ? 0
						   : jlimit (ValueType(), static_cast <ValueType> (1),
									 static_cast <ValueType> ((((point.x - start.x) * delta.x
															  + (point.y - start.y) * delta.y) / length)));
	}

	/** Finds the point on this line which is nearest to a given point.
		@see getDistanceFromPoint, findNearestProportionalPositionTo
	*/
	Point<ValueType> findNearestPointTo (const Point<ValueType>& point) const noexcept
	{
		return getPointAlongLineProportionally (findNearestProportionalPositionTo (point));
	}

	/** Returns true if the given point lies above this line.

		The return value is true if the point's y coordinate is less than the y
		coordinate of this line at the given x (assuming the line extends infinitely
		in both directions).
	*/
	bool isPointAbove (const Point<ValueType>& point) const noexcept
	{
		return start.x != end.x
				&& point.y < ((end.y - start.y)
									* (point.x - start.x)) / (end.x - start.x) + start.y;
	}

	/** Returns a shortened copy of this line.

		This will chop off part of the start of this line by a certain amount, (leaving the
		end-point the same), and return the new line.
	*/
	Line withShortenedStart (ValueType distanceToShortenBy) const noexcept
	{
		return Line (getPointAlongLine (jmin (distanceToShortenBy, getLength())), end);
	}

	/** Returns a shortened copy of this line.

		This will chop off part of the end of this line by a certain amount, (leaving the
		start-point the same), and return the new line.
	*/
	Line withShortenedEnd (ValueType distanceToShortenBy) const noexcept
	{
		const ValueType length = getLength();
		return Line (start, getPointAlongLine (length - jmin (distanceToShortenBy, length)));
	}

private:

	Point<ValueType> start, end;

	static bool findIntersection (const Point<ValueType>& p1, const Point<ValueType>& p2,
								  const Point<ValueType>& p3, const Point<ValueType>& p4,
								  Point<ValueType>& intersection) noexcept
	{
		if (p2 == p3)
		{
			intersection = p2;
			return true;
		}

		const Point<ValueType> d1 (p2 - p1);
		const Point<ValueType> d2 (p4 - p3);
		const ValueType divisor = d1.x * d2.y - d2.x * d1.y;

		if (divisor == 0)
		{
			if (! (d1.isOrigin() || d2.isOrigin()))
			{
				if (d1.y == 0 && d2.y != 0)
				{
					const ValueType along = (p1.y - p3.y) / d2.y;
					intersection = p1.withX (p3.x + along * d2.x);
					return along >= 0 && along <= static_cast <ValueType> (1);
				}
				else if (d2.y == 0 && d1.y != 0)
				{
					const ValueType along = (p3.y - p1.y) / d1.y;
					intersection = p3.withX (p1.x + along * d1.x);
					return along >= 0 && along <= static_cast <ValueType> (1);
				}
				else if (d1.x == 0 && d2.x != 0)
				{
					const ValueType along = (p1.x - p3.x) / d2.x;
					intersection = p1.withY (p3.y + along * d2.y);
					return along >= 0 && along <= static_cast <ValueType> (1);
				}
				else if (d2.x == 0 && d1.x != 0)
				{
					const ValueType along = (p3.x - p1.x) / d1.x;
					intersection = p3.withY (p1.y + along * d1.y);
					return along >= 0 && along <= static_cast <ValueType> (1);
				}
			}

			intersection = (p2 + p3) / static_cast <ValueType> (2);
			return false;
		}

		const ValueType along1 = ((p1.y - p3.y) * d2.x - (p1.x - p3.x) * d2.y) / divisor;
		intersection = p1 + d1 * along1;

		if (along1 < 0 || along1 > static_cast <ValueType> (1))
			return false;

		const ValueType along2 = ((p1.y - p3.y) * d1.x - (p1.x - p3.x) * d1.y) / divisor;
		return along2 >= 0 && along2 <= static_cast <ValueType> (1);
	}
};

#endif   // __JUCE_LINE_JUCEHEADER__

/*** End of inlined file: juce_Line.h ***/


/*** Start of inlined file: juce_Justification.h ***/
#ifndef __JUCE_JUSTIFICATION_JUCEHEADER__
#define __JUCE_JUSTIFICATION_JUCEHEADER__

/**
	Represents a type of justification to be used when positioning graphical items.

	e.g. it indicates whether something should be placed top-left, top-right,
	centred, etc.

	It is used in various places wherever this kind of information is needed.
*/
class JUCE_API  Justification
{
public:

	/** Creates a Justification object using a combination of flags. */
	inline Justification (int flags_) noexcept : flags (flags_) {}

	/** Creates a copy of another Justification object. */
	Justification (const Justification& other) noexcept;

	/** Copies another Justification object. */
	Justification& operator= (const Justification& other) noexcept;

	bool operator== (const Justification& other) const noexcept     { return flags == other.flags; }
	bool operator!= (const Justification& other) const noexcept     { return flags != other.flags; }

	/** Returns the raw flags that are set for this Justification object. */
	inline int getFlags() const noexcept                            { return flags; }

	/** Tests a set of flags for this object.

		@returns true if any of the flags passed in are set on this object.
	*/
	inline bool testFlags (int flagsToTest) const noexcept          { return (flags & flagsToTest) != 0; }

	/** Returns just the flags from this object that deal with vertical layout. */
	int getOnlyVerticalFlags() const noexcept;

	/** Returns just the flags from this object that deal with horizontal layout. */
	int getOnlyHorizontalFlags() const noexcept;

	/** Adjusts the position of a rectangle to fit it into a space.

		The (x, y) position of the rectangle will be updated to position it inside the
		given space according to the justification flags.
	*/
	template <typename ValueType>
	void applyToRectangle (ValueType& x, ValueType& y, ValueType w, ValueType h,
						   ValueType spaceX, ValueType spaceY, ValueType spaceW, ValueType spaceH) const noexcept
	{
		x = spaceX;
		if ((flags & horizontallyCentred) != 0)     x += (spaceW - w) / (ValueType) 2;
		else if ((flags & right) != 0)              x += spaceW - w;

		y = spaceY;
		if ((flags & verticallyCentred) != 0)       y += (spaceH - h) / (ValueType) 2;
		else if ((flags & bottom) != 0)             y += spaceH - h;
	}

	/** Returns the new position of a rectangle that has been justified to fit within a given space.
	*/
	template <typename ValueType>
	const Rectangle<ValueType> appliedToRectangle (const Rectangle<ValueType>& areaToAdjust,
												   const Rectangle<ValueType>& targetSpace) const noexcept
	{
		ValueType x = areaToAdjust.getX(), y = areaToAdjust.getY();
		applyToRectangle (x, y, areaToAdjust.getWidth(), areaToAdjust.getHeight(),
						  targetSpace.getX(), targetSpace.getY(), targetSpace.getWidth(), targetSpace.getHeight());
		return areaToAdjust.withPosition (x, y);
	}

	/** Flag values that can be combined and used in the constructor. */
	enum
	{

		/** Indicates that the item should be aligned against the left edge of the available space. */
		left                            = 1,

		/** Indicates that the item should be aligned against the right edge of the available space. */
		right                           = 2,

		/** Indicates that the item should be placed in the centre between the left and right
			sides of the available space. */
		horizontallyCentred             = 4,

		/** Indicates that the item should be aligned against the top edge of the available space. */
		top                             = 8,

		/** Indicates that the item should be aligned against the bottom edge of the available space. */
		bottom                          = 16,

		/** Indicates that the item should be placed in the centre between the top and bottom
			sides of the available space. */
		verticallyCentred               = 32,

		/** Indicates that lines of text should be spread out to fill the maximum width
			available, so that both margins are aligned vertically.
		*/
		horizontallyJustified           = 64,

		/** Indicates that the item should be centred vertically and horizontally.
			This is equivalent to (horizontallyCentred | verticallyCentred)
		*/
		centred                         = 36,

		/** Indicates that the item should be centred vertically but placed on the left hand side.
			This is equivalent to (left | verticallyCentred)
		*/
		centredLeft                     = 33,

		/** Indicates that the item should be centred vertically but placed on the right hand side.
			This is equivalent to (right | verticallyCentred)
		*/
		centredRight                    = 34,

		/** Indicates that the item should be centred horizontally and placed at the top.
			This is equivalent to (horizontallyCentred | top)
		*/
		centredTop                      = 12,

		/** Indicates that the item should be centred horizontally and placed at the bottom.
			This is equivalent to (horizontallyCentred | bottom)
		*/
		centredBottom                   = 20,

		/** Indicates that the item should be placed in the top-left corner.
			This is equivalent to (left | top)
		*/
		topLeft                         = 9,

		/** Indicates that the item should be placed in the top-right corner.
			This is equivalent to (right | top)
		*/
		topRight                        = 10,

		/** Indicates that the item should be placed in the bottom-left corner.
			This is equivalent to (left | bottom)
		*/
		bottomLeft                      = 17,

		/** Indicates that the item should be placed in the bottom-left corner.
			This is equivalent to (right | bottom)
		*/
		bottomRight                     = 18
	};

private:

	int flags;
};

#endif   // __JUCE_JUSTIFICATION_JUCEHEADER__

/*** End of inlined file: juce_Justification.h ***/

class Image;
class InputStream;
class OutputStream;

/**
	A path is a sequence of lines and curves that may either form a closed shape
	or be open-ended.

	To use a path, you can create an empty one, then add lines and curves to it
	to create shapes, then it can be rendered by a Graphics context or used
	for geometric operations.

	e.g. @code
	Path myPath;

	myPath.startNewSubPath (10.0f, 10.0f);          // move the current position to (10, 10)
	myPath.lineTo (100.0f, 200.0f);                 // draw a line from here to (100, 200)
	myPath.quadraticTo (0.0f, 150.0f, 5.0f, 50.0f); // draw a curve that ends at (5, 50)
	myPath.closeSubPath();                          // close the subpath with a line back to (10, 10)

	// add an ellipse as well, which will form a second sub-path within the path..
	myPath.addEllipse (50.0f, 50.0f, 40.0f, 30.0f);

	// double the width of the whole thing..
	myPath.applyTransform (AffineTransform::scale (2.0f, 1.0f));

	// and draw it to a graphics context with a 5-pixel thick outline.
	g.strokePath (myPath, PathStrokeType (5.0f));

	@endcode

	A path object can actually contain multiple sub-paths, which may themselves
	be open or closed.

	@see PathFlatteningIterator, PathStrokeType, Graphics
*/
class JUCE_API  Path
{
public:

	/** Creates an empty path. */
	Path();

	/** Creates a copy of another path. */
	Path (const Path& other);

	/** Destructor. */
	~Path();

	/** Copies this path from another one. */
	Path& operator= (const Path& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	Path (Path&& other) noexcept;
	Path& operator= (Path&& other) noexcept;
   #endif

	bool operator== (const Path& other) const noexcept;
	bool operator!= (const Path& other) const noexcept;

	/** Returns true if the path doesn't contain any lines or curves. */
	bool isEmpty() const noexcept;

	/** Returns the smallest rectangle that contains all points within the path.
	*/
	Rectangle<float> getBounds() const noexcept;

	/** Returns the smallest rectangle that contains all points within the path
		after it's been transformed with the given tranasform matrix.
	*/
	Rectangle<float> getBoundsTransformed (const AffineTransform& transform) const noexcept;

	/** Checks whether a point lies within the path.

		This is only relevent for closed paths (see closeSubPath()), and
		may produce false results if used on a path which has open sub-paths.

		The path's winding rule is taken into account by this method.

		The tolerance parameter is the maximum error allowed when flattening the path,
		so this method could return a false positive when your point is up to this distance
		outside the path's boundary.

		@see closeSubPath, setUsingNonZeroWinding
	*/
	bool contains (float x, float y,
				   float tolerance = 1.0f) const;

	/** Checks whether a point lies within the path.

		This is only relevent for closed paths (see closeSubPath()), and
		may produce false results if used on a path which has open sub-paths.

		The path's winding rule is taken into account by this method.

		The tolerance parameter is the maximum error allowed when flattening the path,
		so this method could return a false positive when your point is up to this distance
		outside the path's boundary.

		@see closeSubPath, setUsingNonZeroWinding
	*/
	bool contains (const Point<float>& point,
				   float tolerance = 1.0f) const;

	/** Checks whether a line crosses the path.

		This will return positive if the line crosses any of the paths constituent
		lines or curves. It doesn't take into account whether the line is inside
		or outside the path, or whether the path is open or closed.

		The tolerance parameter is the maximum error allowed when flattening the path,
		so this method could return a false positive when your point is up to this distance
		outside the path's boundary.
	*/
	bool intersectsLine (const Line<float>& line,
						 float tolerance = 1.0f);

	/** Cuts off parts of a line to keep the parts that are either inside or
		outside this path.

		Note that this isn't smart enough to cope with situations where the
		line would need to be cut into multiple pieces to correctly clip against
		a re-entrant shape.

		@param line                     the line to clip
		@param keepSectionOutsidePath   if true, it's the section outside the path
										that will be kept; if false its the section inside
										the path
	*/
	Line<float> getClippedLine (const Line<float>& line, bool keepSectionOutsidePath) const;

	/** Returns the length of the path.
		@see getPointAlongPath
	*/
	float getLength (const AffineTransform& transform = AffineTransform::identity) const;

	/** Returns a point that is the specified distance along the path.
		If the distance is greater than the total length of the path, this will return the
		end point.
		@see getLength
	*/
	Point<float> getPointAlongPath (float distanceFromStart,
									const AffineTransform& transform = AffineTransform::identity) const;

	/** Finds the point along the path which is nearest to a given position.
		This sets pointOnPath to the nearest point, and returns the distance of this point from the start
		of the path.
	*/
	float getNearestPoint (const Point<float>& targetPoint,
						   Point<float>& pointOnPath,
						   const AffineTransform& transform = AffineTransform::identity) const;

	/** Removes all lines and curves, resetting the path completely. */
	void clear() noexcept;

	/** Begins a new subpath with a given starting position.

		This will move the path's current position to the co-ordinates passed in and
		make it ready to draw lines or curves starting from this position.

		After adding whatever lines and curves are needed, you can either
		close the current sub-path using closeSubPath() or call startNewSubPath()
		to move to a new sub-path, leaving the old one open-ended.

		@see lineTo, quadraticTo, cubicTo, closeSubPath
	*/
	void startNewSubPath (float startX, float startY);

	/** Begins a new subpath with a given starting position.

		This will move the path's current position to the co-ordinates passed in and
		make it ready to draw lines or curves starting from this position.

		After adding whatever lines and curves are needed, you can either
		close the current sub-path using closeSubPath() or call startNewSubPath()
		to move to a new sub-path, leaving the old one open-ended.

		@see lineTo, quadraticTo, cubicTo, closeSubPath
	*/
	void startNewSubPath (const Point<float>& start);

	/** Closes a the current sub-path with a line back to its start-point.

		When creating a closed shape such as a triangle, don't use 3 lineTo()
		calls - instead use two lineTo() calls, followed by a closeSubPath()
		to join the final point back to the start.

		This ensures that closes shapes are recognised as such, and this is
		important for tasks like drawing strokes, which needs to know whether to
		draw end-caps or not.

		@see startNewSubPath, lineTo, quadraticTo, cubicTo, closeSubPath
	*/
	void closeSubPath();

	/** Adds a line from the shape's last position to a new end-point.

		This will connect the end-point of the last line or curve that was added
		to a new point, using a straight line.

		See the class description for an example of how to add lines and curves to a path.

		@see startNewSubPath, quadraticTo, cubicTo, closeSubPath
	*/
	void lineTo (float endX, float endY);

	/** Adds a line from the shape's last position to a new end-point.

		This will connect the end-point of the last line or curve that was added
		to a new point, using a straight line.

		See the class description for an example of how to add lines and curves to a path.

		@see startNewSubPath, quadraticTo, cubicTo, closeSubPath
	*/
	void lineTo (const Point<float>& end);

	/** Adds a quadratic bezier curve from the shape's last position to a new position.

		This will connect the end-point of the last line or curve that was added
		to a new point, using a quadratic spline with one control-point.

		See the class description for an example of how to add lines and curves to a path.

		@see startNewSubPath, lineTo, cubicTo, closeSubPath
	*/
	void quadraticTo (float controlPointX,
					  float controlPointY,
					  float endPointX,
					  float endPointY);

	/** Adds a quadratic bezier curve from the shape's last position to a new position.

		This will connect the end-point of the last line or curve that was added
		to a new point, using a quadratic spline with one control-point.

		See the class description for an example of how to add lines and curves to a path.

		@see startNewSubPath, lineTo, cubicTo, closeSubPath
	*/
	void quadraticTo (const Point<float>& controlPoint,
					  const Point<float>& endPoint);

	/** Adds a cubic bezier curve from the shape's last position to a new position.

		This will connect the end-point of the last line or curve that was added
		to a new point, using a cubic spline with two control-points.

		See the class description for an example of how to add lines and curves to a path.

		@see startNewSubPath, lineTo, quadraticTo, closeSubPath
	*/
	void cubicTo (float controlPoint1X,
				  float controlPoint1Y,
				  float controlPoint2X,
				  float controlPoint2Y,
				  float endPointX,
				  float endPointY);

	/** Adds a cubic bezier curve from the shape's last position to a new position.

		This will connect the end-point of the last line or curve that was added
		to a new point, using a cubic spline with two control-points.

		See the class description for an example of how to add lines and curves to a path.

		@see startNewSubPath, lineTo, quadraticTo, closeSubPath
	*/
	void cubicTo (const Point<float>& controlPoint1,
				  const Point<float>& controlPoint2,
				  const Point<float>& endPoint);

	/** Returns the last point that was added to the path by one of the drawing methods.
	*/
	Point<float> getCurrentPosition() const;

	/** Adds a rectangle to the path.
		The rectangle is added as a new sub-path. (Any currently open paths will be left open).
		@see addRoundedRectangle, addTriangle
	*/
	void addRectangle (float x, float y, float width, float height);

	/** Adds a rectangle to the path.
		The rectangle is added as a new sub-path. (Any currently open paths will be left open).
		@see addRoundedRectangle, addTriangle
	*/
	template <typename ValueType>
	void addRectangle (const Rectangle<ValueType>& rectangle)
	{
		addRectangle (static_cast <float> (rectangle.getX()), static_cast <float> (rectangle.getY()),
					  static_cast <float> (rectangle.getWidth()), static_cast <float> (rectangle.getHeight()));
	}

	/** Adds a rectangle with rounded corners to the path.
		The rectangle is added as a new sub-path. (Any currently open paths will be left open).
		@see addRectangle, addTriangle
	*/
	void addRoundedRectangle (float x, float y, float width, float height,
							  float cornerSize);

	/** Adds a rectangle with rounded corners to the path.
		The rectangle is added as a new sub-path. (Any currently open paths will be left open).
		@see addRectangle, addTriangle
	*/
	void addRoundedRectangle (float x, float y, float width, float height,
							  float cornerSizeX,
							  float cornerSizeY);

	/** Adds a rectangle with rounded corners to the path.
		The rectangle is added as a new sub-path. (Any currently open paths will be left open).
		@see addRectangle, addTriangle
	*/
	template <typename ValueType>
	void addRoundedRectangle (const Rectangle<ValueType>& rectangle, float cornerSizeX, float cornerSizeY)
	{
		addRoundedRectangle (static_cast <float> (rectangle.getX()), static_cast <float> (rectangle.getY()),
							 static_cast <float> (rectangle.getWidth()), static_cast <float> (rectangle.getHeight()),
							 cornerSizeX, cornerSizeY);
	}

	/** Adds a rectangle with rounded corners to the path.
		The rectangle is added as a new sub-path. (Any currently open paths will be left open).
		@see addRectangle, addTriangle
	*/
	template <typename ValueType>
	void addRoundedRectangle (const Rectangle<ValueType>& rectangle, float cornerSize)
	{
		addRoundedRectangle (rectangle, cornerSize, cornerSize);
	}

	/** Adds a triangle to the path.

		The triangle is added as a new closed sub-path. (Any currently open paths will be left open).

		Note that whether the vertices are specified in clockwise or anticlockwise
		order will affect how the triangle is filled when it overlaps other
		shapes (the winding order setting will affect this of course).
	*/
	void addTriangle (float x1, float y1,
					  float x2, float y2,
					  float x3, float y3);

	/** Adds a quadrilateral to the path.

		The quad is added as a new closed sub-path. (Any currently open paths will be left open).

		Note that whether the vertices are specified in clockwise or anticlockwise
		order will affect how the quad is filled when it overlaps other
		shapes (the winding order setting will affect this of course).
	*/
	void addQuadrilateral (float x1, float y1,
						   float x2, float y2,
						   float x3, float y3,
						   float x4, float y4);

	/** Adds an ellipse to the path.

		The shape is added as a new sub-path. (Any currently open paths will be left open).

		@see addArc
	*/
	void addEllipse (float x, float y, float width, float height);

	/** Adds an elliptical arc to the current path.

		Note that when specifying the start and end angles, the curve will be drawn either clockwise
		or anti-clockwise according to whether the end angle is greater than the start. This means
		that sometimes you may need to use values greater than 2*Pi for the end angle.

		@param x            the left-hand edge of the rectangle in which the elliptical outline fits
		@param y            the top edge of the rectangle in which the elliptical outline fits
		@param width        the width of the rectangle in which the elliptical outline fits
		@param height       the height of the rectangle in which the elliptical outline fits
		@param fromRadians  the angle (clockwise) in radians at which to start the arc segment (where 0 is the
							top-centre of the ellipse)
		@param toRadians    the angle (clockwise) in radians at which to end the arc segment (where 0 is the
							top-centre of the ellipse). This angle can be greater than 2*Pi, so for example to
							draw a curve clockwise from the 9 o'clock position to the 3 o'clock position via
							12 o'clock, you'd use 1.5*Pi and 2.5*Pi as the start and finish points.
		@param startAsNewSubPath    if true, the arc will begin a new subpath from its starting point; if false,
							it will be added to the current sub-path, continuing from the current postition

		@see addCentredArc, arcTo, addPieSegment, addEllipse
	*/
	void addArc (float x, float y, float width, float height,
				 float fromRadians,
				 float toRadians,
				 bool startAsNewSubPath = false);

	/** Adds an arc which is centred at a given point, and can have a rotation specified.

		Note that when specifying the start and end angles, the curve will be drawn either clockwise
		or anti-clockwise according to whether the end angle is greater than the start. This means
		that sometimes you may need to use values greater than 2*Pi for the end angle.

		@param centreX      the centre x of the ellipse
		@param centreY      the centre y of the ellipse
		@param radiusX      the horizontal radius of the ellipse
		@param radiusY      the vertical radius of the ellipse
		@param rotationOfEllipse    an angle by which the whole ellipse should be rotated about its centre, in radians (clockwise)
		@param fromRadians  the angle (clockwise) in radians at which to start the arc segment (where 0 is the
							top-centre of the ellipse)
		@param toRadians    the angle (clockwise) in radians at which to end the arc segment (where 0 is the
							top-centre of the ellipse). This angle can be greater than 2*Pi, so for example to
							draw a curve clockwise from the 9 o'clock position to the 3 o'clock position via
							12 o'clock, you'd use 1.5*Pi and 2.5*Pi as the start and finish points.
		@param startAsNewSubPath    if true, the arc will begin a new subpath from its starting point; if false,
							it will be added to the current sub-path, continuing from the current postition

		@see addArc, arcTo
	*/
	void addCentredArc (float centreX, float centreY,
						float radiusX, float radiusY,
						float rotationOfEllipse,
						float fromRadians,
						float toRadians,
						bool startAsNewSubPath = false);

	/** Adds a "pie-chart" shape to the path.

		The shape is added as a new sub-path. (Any currently open paths will be
		left open).

		Note that when specifying the start and end angles, the curve will be drawn either clockwise
		or anti-clockwise according to whether the end angle is greater than the start. This means
		that sometimes you may need to use values greater than 2*Pi for the end angle.

		@param x            the left-hand edge of the rectangle in which the elliptical outline fits
		@param y            the top edge of the rectangle in which the elliptical outline fits
		@param width        the width of the rectangle in which the elliptical outline fits
		@param height       the height of the rectangle in which the elliptical outline fits
		@param fromRadians  the angle (clockwise) in radians at which to start the arc segment (where 0 is the
							top-centre of the ellipse)
		@param toRadians    the angle (clockwise) in radians at which to end the arc segment (where 0 is the
							top-centre of the ellipse)
		@param innerCircleProportionalSize  if this is > 0, then the pie will be drawn as a curved band around a hollow
							ellipse at its centre, where this value indicates the inner ellipse's size with
							respect to the outer one.

		@see addArc
	*/
	void addPieSegment (float x, float y,
						float width, float height,
						float fromRadians,
						float toRadians,
						float innerCircleProportionalSize);

	/** Adds a line with a specified thickness.

		The line is added as a new closed sub-path. (Any currently open paths will be
		left open).

		@see addArrow
	*/
	void addLineSegment (const Line<float>& line, float lineThickness);

	/** Adds a line with an arrowhead on the end.
		The arrow is added as a new closed sub-path. (Any currently open paths will be left open).
		@see PathStrokeType::createStrokeWithArrowheads
	*/
	void addArrow (const Line<float>& line,
				   float lineThickness,
				   float arrowheadWidth,
				   float arrowheadLength);

	/** Adds a polygon shape to the path.
		@see addStar
	*/
	void addPolygon (const Point<float>& centre,
					 int numberOfSides,
					 float radius,
					 float startAngle = 0.0f);

	/** Adds a star shape to the path.
		@see addPolygon
	*/
	void addStar (const Point<float>& centre,
				  int numberOfPoints,
				  float innerRadius,
				  float outerRadius,
				  float startAngle = 0.0f);

	/** Adds a speech-bubble shape to the path.

		@param bodyX            the left of the main body area of the bubble
		@param bodyY            the top of the main body area of the bubble
		@param bodyW            the width of the main body area of the bubble
		@param bodyH            the height of the main body area of the bubble
		@param cornerSize       the amount by which to round off the corners of the main body rectangle
		@param arrowTipX        the x position that the tip of the arrow should connect to
		@param arrowTipY        the y position that the tip of the arrow should connect to
		@param whichSide        the side to connect the arrow to: 0 = top, 1 = left, 2 = bottom, 3 = right
		@param arrowPositionAlongEdgeProportional   how far along the edge of the main rectangle the
								arrow's base should be - this is a proportional distance between 0 and 1.0
		@param arrowWidth       how wide the base of the arrow should be where it joins the main rectangle
	*/
	void addBubble (float bodyX, float bodyY,
					float bodyW, float bodyH,
					float cornerSize,
					float arrowTipX,
					float arrowTipY,
					int whichSide,
					float arrowPositionAlongEdgeProportional,
					float arrowWidth);

	/** Adds another path to this one.

		The new path is added as a new sub-path. (Any currently open paths in this
		path will be left open).

		@param pathToAppend     the path to add
	*/
	void addPath (const Path& pathToAppend);

	/** Adds another path to this one, transforming it on the way in.

		The new path is added as a new sub-path, its points being transformed by the given
		matrix before being added.

		@param pathToAppend     the path to add
		@param transformToApply an optional transform to apply to the incoming vertices
	*/
	void addPath (const Path& pathToAppend,
				  const AffineTransform& transformToApply);

	/** Swaps the contents of this path with another one.

		The internal data of the two paths is swapped over, so this is much faster than
		copying it to a temp variable and back.
	*/
	void swapWithPath (Path& other) noexcept;

	/** Applies a 2D transform to all the vertices in the path.

		@see AffineTransform, scaleToFit, getTransformToScaleToFit
	*/
	void applyTransform (const AffineTransform& transform) noexcept;

	/** Rescales this path to make it fit neatly into a given space.

		This is effectively a quick way of calling
		applyTransform (getTransformToScaleToFit (x, y, w, h, preserveProportions))

		@param x                    the x position of the rectangle to fit the path inside
		@param y                    the y position of the rectangle to fit the path inside
		@param width                the width of the rectangle to fit the path inside
		@param height               the height of the rectangle to fit the path inside
		@param preserveProportions  if true, it will fit the path into the space without altering its
									horizontal/vertical scale ratio; if false, it will distort the
									path to fill the specified ratio both horizontally and vertically

		@see applyTransform, getTransformToScaleToFit
	*/
	void scaleToFit (float x, float y, float width, float height,
					 bool preserveProportions) noexcept;

	/** Returns a transform that can be used to rescale the path to fit into a given space.

		@param x                    the x position of the rectangle to fit the path inside
		@param y                    the y position of the rectangle to fit the path inside
		@param width                the width of the rectangle to fit the path inside
		@param height               the height of the rectangle to fit the path inside
		@param preserveProportions  if true, it will fit the path into the space without altering its
									horizontal/vertical scale ratio; if false, it will distort the
									path to fill the specified ratio both horizontally and vertically
		@param justificationType    if the proportions are preseved, the resultant path may be smaller
									than the available rectangle, so this describes how it should be
									positioned within the space.
		@returns                    an appropriate transformation

		@see applyTransform, scaleToFit

	*/
	AffineTransform getTransformToScaleToFit (float x, float y, float width, float height,
											  bool preserveProportions,
											  const Justification& justificationType = Justification::centred) const;

	/** Creates a version of this path where all sharp corners have been replaced by curves.

		Wherever two lines meet at an angle, this will replace the corner with a curve
		of the given radius.
	*/
	Path createPathWithRoundedCorners (float cornerRadius) const;

	/** Changes the winding-rule to be used when filling the path.

		If set to true (which is the default), then the path uses a non-zero-winding rule
		to determine which points are inside the path. If set to false, it uses an
		alternate-winding rule.

		The winding-rule comes into play when areas of the shape overlap other
		areas, and determines whether the overlapping regions are considered to be
		inside or outside.

		Changing this value just sets a flag - it doesn't affect the contents of the
		path.

		@see isUsingNonZeroWinding
	*/
	void setUsingNonZeroWinding (bool isNonZeroWinding) noexcept;

	/** Returns the flag that indicates whether the path should use a non-zero winding rule.

		The default for a new path is true.

		@see setUsingNonZeroWinding
	*/
	bool isUsingNonZeroWinding() const                  { return useNonZeroWinding; }

	/** Iterates the lines and curves that a path contains.

		@see Path, PathFlatteningIterator
	*/
	class JUCE_API  Iterator
	{
	public:

		Iterator (const Path& path);
		~Iterator();

		/** Moves onto the next element in the path.

			If this returns false, there are no more elements. If it returns true,
			the elementType variable will be set to the type of the current element,
			and some of the x and y variables will be filled in with values.
		*/
		bool next();

		enum PathElementType
		{
			startNewSubPath,    /**< For this type, x1 and y1 will be set to indicate the first point in the subpath.  */
			lineTo,             /**< For this type, x1 and y1 indicate the end point of the line.  */
			quadraticTo,        /**< For this type, x1, y1, x2, y2 indicate the control point and endpoint of a quadratic curve. */
			cubicTo,            /**< For this type, x1, y1, x2, y2, x3, y3 indicate the two control points and the endpoint of a cubic curve. */
			closePath           /**< Indicates that the sub-path is being closed. None of the x or y values are valid in this case. */
		};

		PathElementType elementType;

		float x1, y1, x2, y2, x3, y3;

	private:
		const Path& path;
		size_t index;

		JUCE_DECLARE_NON_COPYABLE (Iterator);
	};

	/** Loads a stored path from a data stream.

		The data in the stream must have been written using writePathToStream().

		Note that this will append the stored path to whatever is currently in
		this path, so you might need to call clear() beforehand.

		@see loadPathFromData, writePathToStream
	*/
	void loadPathFromStream (InputStream& source);

	/** Loads a stored path from a block of data.

		This is similar to loadPathFromStream(), but just reads from a block
		of data. Useful if you're including stored shapes in your code as a
		block of static data.

		@see loadPathFromStream, writePathToStream
	*/
	void loadPathFromData (const void* data, size_t numberOfBytes);

	/** Stores the path by writing it out to a stream.

		After writing out a path, you can reload it using loadPathFromStream().

		@see loadPathFromStream, loadPathFromData
	*/
	void writePathToStream (OutputStream& destination) const;

	/** Creates a string containing a textual representation of this path.
		@see restoreFromString
	*/
	String toString() const;

	/** Restores this path from a string that was created with the toString() method.
		@see toString()
	*/
	void restoreFromString (const String& stringVersion);

private:

	friend class PathFlatteningIterator;
	friend class Path::Iterator;
	ArrayAllocationBase <float, DummyCriticalSection> data;
	size_t numElements;
	float pathXMin, pathXMax, pathYMin, pathYMax;
	bool useNonZeroWinding;

	static const float lineMarker;
	static const float moveMarker;
	static const float quadMarker;
	static const float cubicMarker;
	static const float closeSubPathMarker;

	JUCE_LEAK_DETECTOR (Path);
};

#endif   // __JUCE_PATH_JUCEHEADER__

/*** End of inlined file: juce_Path.h ***/

/**
	Describes a type of stroke used to render a solid outline along a path.

	A PathStrokeType object can be used directly to create the shape of an outline
	around a path, and is used by Graphics::strokePath to specify the type of
	stroke to draw.

	@see Path, Graphics::strokePath
*/
class JUCE_API  PathStrokeType
{
public:

	/** The type of shape to use for the corners between two adjacent line segments. */
	enum JointStyle
	{
		mitered,    /**< Indicates that corners should be drawn with sharp joints.
						 Note that for angles that curve back on themselves, drawing a
						 mitre could require extending the point too far away from the
						 path, so a mitre limit is imposed and any corners that exceed it
						 are drawn as bevelled instead. */
		curved,     /**< Indicates that corners should be drawn as rounded-off. */
		beveled     /**< Indicates that corners should be drawn with a line flattening their
						 outside edge. */
	};

	/** The type shape to use for the ends of lines. */
	enum EndCapStyle
	{
		butt,       /**< Ends of lines are flat and don't extend beyond the end point. */
		square,     /**< Ends of lines are flat, but stick out beyond the end point for half
						 the thickness of the stroke. */
		rounded     /**< Ends of lines are rounded-off with a circular shape. */
	};

	/** Creates a stroke type.

		@param strokeThickness      the width of the line to use
		@param jointStyle           the type of joints to use for corners
		@param endStyle             the type of end-caps to use for the ends of open paths.
	*/
	PathStrokeType (float strokeThickness,
					JointStyle jointStyle = mitered,
					EndCapStyle endStyle = butt) noexcept;

	/** Createes a copy of another stroke type. */
	PathStrokeType (const PathStrokeType& other) noexcept;

	/** Copies another stroke onto this one. */
	PathStrokeType& operator= (const PathStrokeType& other) noexcept;

	/** Destructor. */
	~PathStrokeType() noexcept;

	/** Applies this stroke type to a path and returns the resultant stroke as another Path.

		@param destPath         the resultant stroked outline shape will be copied into this path.
								Note that it's ok for the source and destination Paths to be
								the same object, so you can easily turn a path into a stroked version
								of itself.
		@param sourcePath       the path to use as the source
		@param transform        an optional transform to apply to the points from the source path
								as they are being used
		@param extraAccuracy    if this is greater than 1.0, it will subdivide the path to
								a higher resolution, which improves the quality if you'll later want
								to enlarge the stroked path. So for example, if you're planning on drawing
								the stroke at 3x the size that you're creating it, you should set this to 3.

		@see createDashedStroke
	*/
	void createStrokedPath (Path& destPath,
							const Path& sourcePath,
							const AffineTransform& transform = AffineTransform::identity,
							float extraAccuracy = 1.0f) const;

	/** Applies this stroke type to a path, creating a dashed line.

		This is similar to createStrokedPath, but uses the array passed in to
		break the stroke up into a series of dashes.

		@param destPath         the resultant stroked outline shape will be copied into this path.
								Note that it's ok for the source and destination Paths to be
								the same object, so you can easily turn a path into a stroked version
								of itself.
		@param sourcePath       the path to use as the source
		@param dashLengths      An array of alternating on/off lengths. E.g. { 2, 3, 4, 5 } will create
								a line of length 2, then skip a length of 3, then add a line of length 4,
								skip 5, and keep repeating this pattern.
		@param numDashLengths   The number of lengths in the dashLengths array. This should really be
								an even number, otherwise the pattern will get out of step as it
								repeats.
		@param transform        an optional transform to apply to the points from the source path
								as they are being used
		@param extraAccuracy    if this is greater than 1.0, it will subdivide the path to
								a higher resolution, which improves the quality if you'll later want
								to enlarge the stroked path. So for example, if you're planning on drawing
								the stroke at 3x the size that you're creating it, you should set this to 3.
	*/
	void createDashedStroke (Path& destPath,
							 const Path& sourcePath,
							 const float* dashLengths,
							 int numDashLengths,
							 const AffineTransform& transform = AffineTransform::identity,
							 float extraAccuracy = 1.0f) const;

	/** Applies this stroke type to a path and returns the resultant stroke as another Path.

		@param destPath             the resultant stroked outline shape will be copied into this path.
									Note that it's ok for the source and destination Paths to be
									the same object, so you can easily turn a path into a stroked version
									of itself.
		@param sourcePath           the path to use as the source
		@param arrowheadStartWidth  the width of the arrowhead at the start of the path
		@param arrowheadStartLength the length of the arrowhead at the start of the path
		@param arrowheadEndWidth    the width of the arrowhead at the end of the path
		@param arrowheadEndLength   the length of the arrowhead at the end of the path
		@param transform            an optional transform to apply to the points from the source path
									as they are being used
		@param extraAccuracy        if this is greater than 1.0, it will subdivide the path to
									a higher resolution, which improves the quality if you'll later want
									to enlarge the stroked path. So for example, if you're planning on drawing
									the stroke at 3x the size that you're creating it, you should set this to 3.
		@see createDashedStroke
	*/
	void createStrokeWithArrowheads (Path& destPath,
									 const Path& sourcePath,
									 float arrowheadStartWidth, float arrowheadStartLength,
									 float arrowheadEndWidth, float arrowheadEndLength,
									 const AffineTransform& transform = AffineTransform::identity,
									 float extraAccuracy = 1.0f) const;

	/** Returns the stroke thickness. */
	float getStrokeThickness() const noexcept                   { return thickness; }

	/** Sets the stroke thickness. */
	void setStrokeThickness (float newThickness) noexcept       { thickness = newThickness; }

	/** Returns the joint style. */
	JointStyle getJointStyle() const noexcept                   { return jointStyle; }

	/** Sets the joint style. */
	void setJointStyle (JointStyle newStyle) noexcept           { jointStyle = newStyle; }

	/** Returns the end-cap style. */
	EndCapStyle getEndStyle() const noexcept                    { return endStyle; }

	/** Sets the end-cap style. */
	void setEndStyle (EndCapStyle newStyle) noexcept            { endStyle = newStyle; }

	/** Compares the stroke thickness, joint and end styles of two stroke types. */
	bool operator== (const PathStrokeType& other) const noexcept;

	/** Compares the stroke thickness, joint and end styles of two stroke types. */
	bool operator!= (const PathStrokeType& other) const noexcept;

private:

	float thickness;
	JointStyle jointStyle;
	EndCapStyle endStyle;

	JUCE_LEAK_DETECTOR (PathStrokeType);
};

#endif   // __JUCE_PATHSTROKETYPE_JUCEHEADER__

/*** End of inlined file: juce_PathStrokeType.h ***/


/*** Start of inlined file: juce_RectanglePlacement.h ***/
#ifndef __JUCE_RECTANGLEPLACEMENT_JUCEHEADER__
#define __JUCE_RECTANGLEPLACEMENT_JUCEHEADER__

/**
	Defines the method used to postion some kind of rectangular object within
	a rectangular viewport.

	Although similar to Justification, this is more specific, and has some extra
	options.
*/
class JUCE_API  RectanglePlacement
{
public:

	/** Creates a RectanglePlacement object using a combination of flags. */
	inline RectanglePlacement (int flags_) noexcept : flags (flags_) {}

	/** Creates a copy of another RectanglePlacement object. */
	RectanglePlacement (const RectanglePlacement& other) noexcept;

	/** Copies another RectanglePlacement object. */
	RectanglePlacement& operator= (const RectanglePlacement& other) noexcept;

	bool operator== (const RectanglePlacement& other) const noexcept;
	bool operator!= (const RectanglePlacement& other) const noexcept;

	/** Flag values that can be combined and used in the constructor. */
	enum
	{

		/** Indicates that the source rectangle's left edge should be aligned with the left edge of the target rectangle. */
		xLeft                                   = 1,

		/** Indicates that the source rectangle's right edge should be aligned with the right edge of the target rectangle. */
		xRight                                  = 2,

		/** Indicates that the source should be placed in the centre between the left and right
			sides of the available space. */
		xMid                                    = 4,

		/** Indicates that the source's top edge should be aligned with the top edge of the
			destination rectangle. */
		yTop                                    = 8,

		/** Indicates that the source's bottom edge should be aligned with the bottom edge of the
			destination rectangle. */
		yBottom                                 = 16,

		/** Indicates that the source should be placed in the centre between the top and bottom
			sides of the available space. */
		yMid                                    = 32,

		/** If this flag is set, then the source rectangle will be resized to completely fill
			the destination rectangle, and all other flags are ignored.
		*/
		stretchToFit                            = 64,

		/** If this flag is set, then the source rectangle will be resized so that it is the
			minimum size to completely fill the destination rectangle, without changing its
			aspect ratio. This means that some of the source rectangle may fall outside
			the destination.

			If this flag is not set, the source will be given the maximum size at which none
			of it falls outside the destination rectangle.
		*/
		fillDestination                         = 128,

		/** Indicates that the source rectangle can be reduced in size if required, but should
			never be made larger than its original size.
		*/
		onlyReduceInSize                        = 256,

		/** Indicates that the source rectangle can be enlarged if required, but should
			never be made smaller than its original size.
		*/
		onlyIncreaseInSize                      = 512,

		/** Indicates that the source rectangle's size should be left unchanged.
		*/
		doNotResize                             = (onlyIncreaseInSize | onlyReduceInSize),

		/** A shorthand value that is equivalent to (xMid | yMid). */
		centred                                 = 4 + 32
	};

	/** Returns the raw flags that are set for this object. */
	inline int getFlags() const noexcept                            { return flags; }

	/** Tests a set of flags for this object.

		@returns true if any of the flags passed in are set on this object.
	*/
	inline bool testFlags (int flagsToTest) const noexcept          { return (flags & flagsToTest) != 0; }

	/** Adjusts the position and size of a rectangle to fit it into a space.

		The source rectangle co-ordinates will be adjusted so that they fit into
		the destination rectangle based on this object's flags.
	*/
	void applyTo (double& sourceX,
				  double& sourceY,
				  double& sourceW,
				  double& sourceH,
				  double destinationX,
				  double destinationY,
				  double destinationW,
				  double destinationH) const noexcept;

	/** Returns the transform that should be applied to these source co-ordinates to fit them
		into the destination rectangle using the current flags.
	*/
	template <typename ValueType>
	const Rectangle<ValueType> appliedTo (const Rectangle<ValueType>& source,
										  const Rectangle<ValueType>& destination) const noexcept
	{
		double x = source.getX(), y = source.getY(), w = source.getWidth(), h = source.getHeight();
		applyTo (x, y, w, h, static_cast <double> (destination.getX()), static_cast <double> (destination.getY()),
				 static_cast <double> (destination.getWidth()), static_cast <double> (destination.getHeight()));
		return Rectangle<ValueType> (static_cast <ValueType> (x), static_cast <ValueType> (y),
									 static_cast <ValueType> (w), static_cast <ValueType> (h));
	}

	/** Returns the transform that should be applied to these source co-ordinates to fit them
		into the destination rectangle using the current flags.
	*/
	const AffineTransform getTransformToFit (const Rectangle<float>& source,
											 const Rectangle<float>& destination) const noexcept;

private:

	int flags;
};

#endif   // __JUCE_RECTANGLEPLACEMENT_JUCEHEADER__

/*** End of inlined file: juce_RectanglePlacement.h ***/

class LowLevelGraphicsContext;
class Image;
class FillType;
class RectangleList;

/**
	A graphics context, used for drawing a component or image.

	When a Component needs painting, a Graphics context is passed to its
	Component::paint() method, and this you then call methods within this
	object to actually draw the component's content.

	A Graphics can also be created from an image, to allow drawing directly onto
	that image.

	@see Component::paint
*/
class JUCE_API  Graphics
{
public:

	/** Creates a Graphics object to draw directly onto the given image.

		The graphics object that is created will be set up to draw onto the image,
		with the context's clipping area being the entire size of the image, and its
		origin being the image's origin. To draw into a subsection of an image, use the
		reduceClipRegion() and setOrigin() methods.

		Obviously you shouldn't delete the image before this context is deleted.
	*/
	explicit Graphics (const Image& imageToDrawOnto);

	/** Destructor. */
	~Graphics();

	/** Changes the current drawing colour.

		This sets the colour that will now be used for drawing operations - it also
		sets the opacity to that of the colour passed-in.

		If a brush is being used when this method is called, the brush will be deselected,
		and any subsequent drawing will be done with a solid colour brush instead.

		@see setOpacity
	*/
	void setColour (const Colour& newColour);

	/** Changes the opacity to use with the current colour.

		If a solid colour is being used for drawing, this changes its opacity
		to this new value (i.e. it doesn't multiply the colour's opacity by this amount).

		If a gradient is being used, this will have no effect on it.

		A value of 0.0 is completely transparent, 1.0 is completely opaque.
	*/
	void setOpacity (float newOpacity);

	/** Sets the context to use a gradient for its fill pattern.
	*/
	void setGradientFill (const ColourGradient& gradient);

	/** Sets the context to use a tiled image pattern for filling.
		Make sure that you don't delete this image while it's still being used by
		this context!
	*/
	void setTiledImageFill (const Image& imageToUse,
							int anchorX, int anchorY,
							float opacity);

	/** Changes the current fill settings.
		@see setColour, setGradientFill, setTiledImageFill
	*/
	void setFillType (const FillType& newFill);

	/** Changes the font to use for subsequent text-drawing functions.

		Note there's also a setFont (float, int) method to quickly change the size and
		style of the current font.

		@see drawSingleLineText, drawMultiLineText, drawTextAsPath, drawText, drawFittedText
	*/
	void setFont (const Font& newFont);

	/** Changes the size and style of the currently-selected font.

		This is a convenient shortcut that changes the context's current font to a
		different size or style. The typeface won't be changed.

		@see Font
	*/
	void setFont (float newFontHeight, int fontStyleFlags = Font::plain);

	/** Returns the currently selected font. */
	Font getCurrentFont() const;

	/** Draws a one-line text string.

		This will use the current colour (or brush) to fill the text. The font is the last
		one specified by setFont().

		@param text          the string to draw
		@param startX        the position to draw the left-hand edge of the text
		@param baselineY     the position of the text's baseline
		@param justification the horizontal flags indicate which end of the text string is
							 anchored at the specified point.
		@see drawMultiLineText, drawText, drawFittedText, GlyphArrangement::addLineOfText
	*/
	void drawSingleLineText (const String& text,
							 int startX, int baselineY,
							 const Justification& justification = Justification::left) const;

	/** Draws text across multiple lines.

		This will break the text onto a new line where there's a new-line or
		carriage-return character, or at a word-boundary when the text becomes wider
		than the size specified by the maximumLineWidth parameter.

		@see setFont, drawSingleLineText, drawFittedText, GlyphArrangement::addJustifiedText
	*/
	void drawMultiLineText (const String& text,
							int startX, int baselineY,
							int maximumLineWidth) const;

	/** Renders a string of text as a vector path.

		This allows a string to be transformed with an arbitrary AffineTransform and
		rendered using the current colour/brush. It's much slower than the normal text methods
		but more accurate.

		@see setFont
	*/
	void drawTextAsPath (const String& text,
						 const AffineTransform& transform) const;

	/** Draws a line of text within a specified rectangle.

		The text will be positioned within the rectangle based on the justification
		flags passed-in. If the string is too long to fit inside the rectangle, it will
		either be truncated or will have ellipsis added to its end (if the useEllipsesIfTooBig
		flag is true).

		@see drawSingleLineText, drawFittedText, drawMultiLineText, GlyphArrangement::addJustifiedText
	*/
	void drawText (const String& text,
				   int x, int y, int width, int height,
				   const Justification& justificationType,
				   bool useEllipsesIfTooBig) const;

	/** Tries to draw a text string inside a given space.

		This does its best to make the given text readable within the specified rectangle,
		so it useful for labelling things.

		If the text is too big, it'll be squashed horizontally or broken over multiple lines
		if the maximumLinesToUse value allows this. If the text just won't fit into the space,
		it'll cram as much as possible in there, and put some ellipsis at the end to show that
		it's been truncated.

		A Justification parameter lets you specify how the text is laid out within the rectangle,
		both horizontally and vertically.

		The minimumHorizontalScale parameter specifies how much the text can be squashed horizontally
		to try to squeeze it into the space. If you don't want any horizontal scaling to occur, you
		can set this value to 1.0f.

		@see GlyphArrangement::addFittedText
	*/
	void drawFittedText (const String& text,
						 int x, int y, int width, int height,
						 const Justification& justificationFlags,
						 int maximumNumberOfLines,
						 float minimumHorizontalScale = 0.7f) const;

	/** Fills the context's entire clip region with the current colour or brush.

		(See also the fillAll (const Colour&) method which is a quick way of filling
		it with a given colour).
	*/
	void fillAll() const;

	/** Fills the context's entire clip region with a given colour.

		This leaves the context's current colour and brush unchanged, it just
		uses the specified colour temporarily.
	*/
	void fillAll (const Colour& colourToUse) const;

	/** Fills a rectangle with the current colour or brush.

		@see drawRect, fillRoundedRectangle
	*/
	void fillRect (int x, int y, int width, int height) const;

	/** Fills a rectangle with the current colour or brush. */
	void fillRect (const Rectangle<int>& rectangle) const;

	/** Fills a rectangle with the current colour or brush.

		This uses sub-pixel positioning so is slower than the fillRect method which
		takes integer co-ordinates.
	*/
	void fillRect (float x, float y, float width, float height) const;

	/** Uses the current colour or brush to fill a rectangle with rounded corners.

		@see drawRoundedRectangle, Path::addRoundedRectangle
	*/
	void fillRoundedRectangle (float x, float y, float width, float height,
							   float cornerSize) const;

	/** Uses the current colour or brush to fill a rectangle with rounded corners.

		@see drawRoundedRectangle, Path::addRoundedRectangle
	*/
	void fillRoundedRectangle (const Rectangle<float>& rectangle,
							   float cornerSize) const;

	/** Fills a rectangle with a checkerboard pattern, alternating between two colours.
	*/
	void fillCheckerBoard (const Rectangle<int>& area,
						   int checkWidth, int checkHeight,
						   const Colour& colour1, const Colour& colour2) const;

	/** Draws four lines to form a rectangular outline, using the current colour or brush.

		The lines are drawn inside the given rectangle, and greater line thicknesses
		extend inwards.

		@see fillRect
	*/
	void drawRect (int x, int y, int width, int height,
				   int lineThickness = 1) const;

	/** Draws four lines to form a rectangular outline, using the current colour or brush.

		The lines are drawn inside the given rectangle, and greater line thicknesses
		extend inwards.

		@see fillRect
	*/
	void drawRect (float x, float y, float width, float height,
				   float lineThickness = 1.0f) const;

	/** Draws four lines to form a rectangular outline, using the current colour or brush.

		The lines are drawn inside the given rectangle, and greater line thicknesses
		extend inwards.

		@see fillRect
	*/
	void drawRect (const Rectangle<int>& rectangle,
				   int lineThickness = 1) const;

	/** Uses the current colour or brush to draw the outline of a rectangle with rounded corners.

		@see fillRoundedRectangle, Path::addRoundedRectangle
	*/
	void drawRoundedRectangle (float x, float y, float width, float height,
							   float cornerSize, float lineThickness) const;

	/** Uses the current colour or brush to draw the outline of a rectangle with rounded corners.

		@see fillRoundedRectangle, Path::addRoundedRectangle
	*/
	void drawRoundedRectangle (const Rectangle<float>& rectangle,
							   float cornerSize, float lineThickness) const;

	/** Draws a 3D raised (or indented) bevel using two colours.

		The bevel is drawn inside the given rectangle, and greater bevel thicknesses
		extend inwards.

		The top-left colour is used for the top- and left-hand edges of the
		bevel; the bottom-right colour is used for the bottom- and right-hand
		edges.

		If useGradient is true, then the bevel fades out to make it look more curved
		and less angular. If sharpEdgeOnOutside is true, the outside of the bevel is
		sharp, and it fades towards the centre; if sharpEdgeOnOutside is false, then
		the centre edges are sharp and it fades towards the outside.
	*/
	void drawBevel (int x, int y, int width, int height,
					int bevelThickness,
					const Colour& topLeftColour = Colours::white,
					const Colour& bottomRightColour = Colours::black,
					bool useGradient = true,
					bool sharpEdgeOnOutside = true) const;

	/** Draws a pixel using the current colour or brush.
	*/
	void setPixel (int x, int y) const;

	/** Fills an ellipse with the current colour or brush.

		The ellipse is drawn to fit inside the given rectangle.

		@see drawEllipse, Path::addEllipse
	*/
	void fillEllipse (float x, float y, float width, float height) const;

	/** Draws an elliptical stroke using the current colour or brush.

		@see fillEllipse, Path::addEllipse
	*/
	void drawEllipse (float x, float y, float width, float height,
					  float lineThickness) const;

	/** Draws a line between two points.

		The line is 1 pixel wide and drawn with the current colour or brush.
	*/
	void drawLine (float startX, float startY, float endX, float endY) const;

	/** Draws a line between two points with a given thickness.

		@see Path::addLineSegment
	*/
	void drawLine (float startX, float startY, float endX, float endY,
				   float lineThickness) const;

	/** Draws a line between two points.

		The line is 1 pixel wide and drawn with the current colour or brush.
	*/
	void drawLine (const Line<float>& line) const;

	/** Draws a line between two points with a given thickness.

		@see Path::addLineSegment
	*/
	void drawLine (const Line<float>& line, float lineThickness) const;

	/** Draws a dashed line using a custom set of dash-lengths.

		@param line             the line to draw
		@param dashLengths      a series of lengths to specify the on/off lengths - e.g.
								{ 4, 5, 6, 7 } will draw a line of 4 pixels, skip 5 pixels,
								draw 6 pixels, skip 7 pixels, and then repeat.
		@param numDashLengths   the number of elements in the array (this must be an even number).
		@param lineThickness    the thickness of the line to draw
		@param dashIndexToStartFrom     the index in the dash-length array to use for the first segment
		@see PathStrokeType::createDashedStroke
	*/
	void drawDashedLine (const Line<float>& line,
						 const float* dashLengths, int numDashLengths,
						 float lineThickness = 1.0f,
						 int dashIndexToStartFrom = 0) const;

	/** Draws a vertical line of pixels at a given x position.

		The x position is an integer, but the top and bottom of the line can be sub-pixel
		positions, and these will be anti-aliased if necessary.

		The bottom parameter must be greater than or equal to the top parameter.
	*/
	void drawVerticalLine (int x, float top, float bottom) const;

	/** Draws a horizontal line of pixels at a given y position.

		The y position is an integer, but the left and right ends of the line can be sub-pixel
		positions, and these will be anti-aliased if necessary.

		The right parameter must be greater than or equal to the left parameter.
	*/
	void drawHorizontalLine (int y, float left, float right) const;

	/** Fills a path using the currently selected colour or brush.
	*/
	void fillPath (const Path& path,
				   const AffineTransform& transform = AffineTransform::identity) const;

	/** Draws a path's outline using the currently selected colour or brush.
	*/
	void strokePath (const Path& path,
					 const PathStrokeType& strokeType,
					 const AffineTransform& transform = AffineTransform::identity) const;

	/** Draws a line with an arrowhead at its end.

		@param line             the line to draw
		@param lineThickness    the thickness of the line
		@param arrowheadWidth   the width of the arrow head (perpendicular to the line)
		@param arrowheadLength  the length of the arrow head (along the length of the line)
	*/
	void drawArrow (const Line<float>& line,
					float lineThickness,
					float arrowheadWidth,
					float arrowheadLength) const;

	/** Types of rendering quality that can be specified when drawing images.

		@see blendImage, Graphics::setImageResamplingQuality
	*/
	enum ResamplingQuality
	{
		lowResamplingQuality     = 0,    /**< Just uses a nearest-neighbour algorithm for resampling. */
		mediumResamplingQuality  = 1,    /**< Uses bilinear interpolation for upsampling and area-averaging for downsampling. */
		highResamplingQuality    = 2     /**< Uses bicubic interpolation for upsampling and area-averaging for downsampling. */
	};

	/** Changes the quality that will be used when resampling images.

		By default a Graphics object will be set to mediumRenderingQuality.

		@see Graphics::drawImage, Graphics::drawImageTransformed, Graphics::drawImageWithin
	*/
	void setImageResamplingQuality (const ResamplingQuality newQuality);

	/** Draws an image.

		This will draw the whole of an image, positioning its top-left corner at the
		given co-ordinates, and keeping its size the same. This is the simplest image
		drawing method - the others give more control over the scaling and clipping
		of the images.

		Images are composited using the context's current opacity, so if you
		don't want it to be drawn semi-transparently, be sure to call setOpacity (1.0f)
		(or setColour() with an opaque colour) before drawing images.
	*/
	void drawImageAt (const Image& imageToDraw, int topLeftX, int topLeftY,
					  bool fillAlphaChannelWithCurrentBrush = false) const;

	/** Draws part of an image, rescaling it to fit in a given target region.

		The specified area of the source image is rescaled and drawn to fill the
		specifed destination rectangle.

		Images are composited using the context's current opacity, so if you
		don't want it to be drawn semi-transparently, be sure to call setOpacity (1.0f)
		(or setColour() with an opaque colour) before drawing images.

		@param imageToDraw      the image to overlay
		@param destX            the left of the destination rectangle
		@param destY            the top of the destination rectangle
		@param destWidth        the width of the destination rectangle
		@param destHeight       the height of the destination rectangle
		@param sourceX          the left of the rectangle to copy from the source image
		@param sourceY          the top of the rectangle to copy from the source image
		@param sourceWidth      the width of the rectangle to copy from the source image
		@param sourceHeight     the height of the rectangle to copy from the source image
		@param fillAlphaChannelWithCurrentBrush     if true, then instead of drawing the source image's pixels,
													the source image's alpha channel is used as a mask with
													which to fill the destination using the current colour
													or brush. (If the source is has no alpha channel, then
													it will just fill the target with a solid rectangle)
		@see setImageResamplingQuality, drawImageAt, drawImageWithin, fillAlphaMap
	*/
	void drawImage (const Image& imageToDraw,
					int destX, int destY, int destWidth, int destHeight,
					int sourceX, int sourceY, int sourceWidth, int sourceHeight,
					bool fillAlphaChannelWithCurrentBrush = false) const;

	/** Draws an image, having applied an affine transform to it.

		This lets you throw the image around in some wacky ways, rotate it, shear,
		scale it, etc.

		Images are composited using the context's current opacity, so if you
		don't want it to be drawn semi-transparently, be sure to call setOpacity (1.0f)
		(or setColour() with an opaque colour) before drawing images.

		If fillAlphaChannelWithCurrentBrush is set to true, then the image's RGB channels
		are ignored and it is filled with the current brush, masked by its alpha channel.

		If you want to render only a subsection of an image, use Image::getClippedImage() to
		create the section that you need.

		@see setImageResamplingQuality, drawImage
	*/
	void drawImageTransformed (const Image& imageToDraw,
							   const AffineTransform& transform,
							   bool fillAlphaChannelWithCurrentBrush = false) const;

	/** Draws an image to fit within a designated rectangle.

		If the image is too big or too small for the space, it will be rescaled
		to fit as nicely as it can do without affecting its aspect ratio. It will
		then be placed within the target rectangle according to the justification flags
		specified.

		@param imageToDraw              the source image to draw
		@param destX                    top-left of the target rectangle to fit it into
		@param destY                    top-left of the target rectangle to fit it into
		@param destWidth                size of the target rectangle to fit the image into
		@param destHeight               size of the target rectangle to fit the image into
		@param placementWithinTarget    this specifies how the image should be positioned
										within the target rectangle - see the RectanglePlacement
										class for more details about this.
		@param fillAlphaChannelWithCurrentBrush     if true, then instead of drawing the image, just its
													alpha channel will be used as a mask with which to
													draw with the current brush or colour. This is
													similar to fillAlphaMap(), and see also drawImage()
		@see setImageResamplingQuality, drawImage, drawImageTransformed, drawImageAt, RectanglePlacement
	*/
	void drawImageWithin (const Image& imageToDraw,
						  int destX, int destY, int destWidth, int destHeight,
						  const RectanglePlacement& placementWithinTarget,
						  bool fillAlphaChannelWithCurrentBrush = false) const;

	/** Returns the position of the bounding box for the current clipping region.

		@see getClipRegion, clipRegionIntersects
	*/
	Rectangle<int> getClipBounds() const;

	/** Checks whether a rectangle overlaps the context's clipping region.

		If this returns false, no part of the given area can be drawn onto, so this
		method can be used to optimise a component's paint() method, by letting it
		avoid drawing complex objects that aren't within the region being repainted.
	*/
	bool clipRegionIntersects (const Rectangle<int>& area) const;

	/** Intersects the current clipping region with another region.

		@returns true if the resulting clipping region is non-zero in size
		@see setOrigin, clipRegionIntersects
	*/
	bool reduceClipRegion (int x, int y, int width, int height);

	/** Intersects the current clipping region with another region.

		@returns true if the resulting clipping region is non-zero in size
		@see setOrigin, clipRegionIntersects
	*/
	bool reduceClipRegion (const Rectangle<int>& area);

	/** Intersects the current clipping region with a rectangle list region.

		@returns true if the resulting clipping region is non-zero in size
		@see setOrigin, clipRegionIntersects
	*/
	bool reduceClipRegion (const RectangleList& clipRegion);

	/** Intersects the current clipping region with a path.

		@returns true if the resulting clipping region is non-zero in size
		@see reduceClipRegion
	*/
	bool reduceClipRegion (const Path& path, const AffineTransform& transform = AffineTransform::identity);

	/** Intersects the current clipping region with an image's alpha-channel.

		The current clipping path is intersected with the area covered by this image's
		alpha-channel, after the image has been transformed by the specified matrix.

		@param image    the image whose alpha-channel should be used. If the image doesn't
						have an alpha-channel, it is treated as entirely opaque.
		@param transform    a matrix to apply to the image
		@returns true if the resulting clipping region is non-zero in size
		@see reduceClipRegion
	*/
	bool reduceClipRegion (const Image& image, const AffineTransform& transform);

	/** Excludes a rectangle to stop it being drawn into. */
	void excludeClipRegion (const Rectangle<int>& rectangleToExclude);

	/** Returns true if no drawing can be done because the clip region is zero. */
	bool isClipEmpty() const;

	/** Saves the current graphics state on an internal stack.
		To restore the state, use restoreState().
		@see ScopedSaveState
	*/
	void saveState();

	/** Restores a graphics state that was previously saved with saveState().
		@see ScopedSaveState
	*/
	void restoreState();

	/** Uses RAII to save and restore the state of a graphics context.
		On construction, this calls Graphics::saveState(), and on destruction it calls
		Graphics::restoreState() on the Graphics object that you supply.
	*/
	class ScopedSaveState
	{
	public:
		ScopedSaveState (Graphics& g);
		~ScopedSaveState();

	private:
		Graphics& context;

		JUCE_DECLARE_NON_COPYABLE (ScopedSaveState);
	};

	/** Begins rendering to an off-screen bitmap which will later be flattened onto the current
		context with the given opacity.

		The context uses an internal stack of temporary image layers to do this. When you've
		finished drawing to the layer, call endTransparencyLayer() to complete the operation and
		composite the finished layer. Every call to beginTransparencyLayer() MUST be matched
		by a corresponding call to endTransparencyLayer()!

		This call also saves the current state, and endTransparencyLayer() restores it.
	*/
	void beginTransparencyLayer (float layerOpacity);

	/** Completes a drawing operation to a temporary semi-transparent buffer.
		See beginTransparencyLayer() for more details.
	*/
	void endTransparencyLayer();

	/** Moves the position of the context's origin.

		This changes the position that the context considers to be (0, 0) to
		the specified position.

		So if you call setOrigin (100, 100), then the position that was previously
		referred to as (100, 100) will subsequently be considered to be (0, 0).

		@see reduceClipRegion, addTransform
	*/
	void setOrigin (int newOriginX, int newOriginY);

	/** Adds a transformation which will be performed on all the graphics operations that
		the context subsequently performs.

		After calling this, all the coordinates that are passed into the context will be
		transformed by this matrix.

		@see setOrigin
	*/
	void addTransform (const AffineTransform& transform);

	/** Resets the current colour, brush, and font to default settings. */
	void resetToDefaultState();

	/** Returns true if this context is drawing to a vector-based device, such as a printer. */
	bool isVectorDevice() const;

	/** Create a graphics that uses a given low-level renderer.
		For internal use only.
		NB. The context will NOT be deleted by this object when it is deleted.
	*/
	Graphics (LowLevelGraphicsContext* internalContext) noexcept;

	/** @internal */
	LowLevelGraphicsContext* getInternalContext() const noexcept    { return context; }

private:

	LowLevelGraphicsContext* const context;
	ScopedPointer <LowLevelGraphicsContext> contextToDelete;

	bool saveStatePending;
	void saveStateIfPending();

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Graphics);
};

#endif   // __JUCE_GRAPHICSCONTEXT_JUCEHEADER__

/*** End of inlined file: juce_GraphicsContext.h ***/

class ImageType;
class ImagePixelData;

/**
	Holds a fixed-size bitmap.

	The image is stored in either 24-bit RGB or 32-bit premultiplied-ARGB format.

	To draw into an image, create a Graphics object for it.
	e.g. @code

	// create a transparent 500x500 image..
	Image myImage (Image::RGB, 500, 500, true);

	Graphics g (myImage);
	g.setColour (Colours::red);
	g.fillEllipse (20, 20, 300, 200);  // draws a red ellipse in our image.
	@endcode

	Other useful ways to create an image are with the ImageCache class, or the
	ImageFileFormat, which provides a way to load common image files.

	@see Graphics, ImageFileFormat, ImageCache, ImageConvolutionKernel
*/
class JUCE_API  Image
{
public:

	/**
	*/
	enum PixelFormat
	{
		UnknownFormat,
		RGB,                /**<< each pixel is a 3-byte packed RGB colour value. For byte order, see the PixelRGB class. */
		ARGB,               /**<< each pixel is a 4-byte ARGB premultiplied colour value. For byte order, see the PixelARGB class. */
		SingleChannel       /**<< each pixel is a 1-byte alpha channel value. */
	};

	/** Creates a null image. */
	Image();

	/** Creates an image with a specified size and format.

		The image's internal type will be of the NativeImageType class - to specify a
		different type, use the other constructor, which takes an ImageType to use.

		@param format           the number of colour channels in the image
		@param imageWidth       the desired width of the image, in pixels - this value must be
								greater than zero (otherwise a width of 1 will be used)
		@param imageHeight      the desired width of the image, in pixels - this value must be
								greater than zero (otherwise a height of 1 will be used)
		@param clearImage       if true, the image will initially be cleared to black (if it's RGB)
								or transparent black (if it's ARGB). If false, the image may contain
								junk initially, so you need to make sure you overwrite it thoroughly.
	*/
	Image (PixelFormat format, int imageWidth, int imageHeight, bool clearImage);

	/** Creates an image with a specified size and format.

		@param format           the number of colour channels in the image
		@param imageWidth       the desired width of the image, in pixels - this value must be
								greater than zero (otherwise a width of 1 will be used)
		@param imageHeight      the desired width of the image, in pixels - this value must be
								greater than zero (otherwise a height of 1 will be used)
		@param clearImage       if true, the image will initially be cleared to black (if it's RGB)
								or transparent black (if it's ARGB). If false, the image may contain
								junk initially, so you need to make sure you overwrite it thoroughly.
		@param type             the type of image - this lets you specify the internal format that will
								be used to allocate and manage the image data.
	*/
	Image (PixelFormat format, int imageWidth, int imageHeight, bool clearImage, const ImageType& type);

	/** Creates a shared reference to another image.

		This won't create a duplicate of the image - when Image objects are copied, they simply
		point to the same shared image data. To make sure that an Image object has its own unique,
		unshared internal data, call duplicateIfShared().
	*/
	Image (const Image& other);

	/** Makes this image refer to the same underlying image as another object.

		This won't create a duplicate of the image - when Image objects are copied, they simply
		point to the same shared image data. To make sure that an Image object has its own unique,
		unshared internal data, call duplicateIfShared().
	*/
	Image& operator= (const Image&);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	Image (Image&& other) noexcept;
	Image& operator= (Image&&) noexcept;
   #endif

	/** Destructor. */
	~Image();

	/** Returns true if the two images are referring to the same internal, shared image. */
	bool operator== (const Image& other) const noexcept     { return image == other.image; }

	/** Returns true if the two images are not referring to the same internal, shared image. */
	bool operator!= (const Image& other) const noexcept     { return image != other.image; }

	/** Returns true if this image isn't null.
		If you create an Image with the default constructor, it has no size or content, and is null
		until you reassign it to an Image which contains some actual data.
		The isNull() method is the opposite of isValid().
		@see isNull
	*/
	inline bool isValid() const noexcept                    { return image != nullptr; }

	/** Returns true if this image is not valid.
		If you create an Image with the default constructor, it has no size or content, and is null
		until you reassign it to an Image which contains some actual data.
		The isNull() method is the opposite of isValid().
		@see isValid
	*/
	inline bool isNull() const noexcept                     { return image == nullptr; }

	/** A null Image object that can be used when you need to return an invalid image.
		This object is the equivalient to an Image created with the default constructor.
	*/
	static const Image null;

	/** Returns the image's width (in pixels). */
	int getWidth() const noexcept;

	/** Returns the image's height (in pixels). */
	int getHeight() const noexcept;

	/** Returns a rectangle with the same size as this image.
		The rectangle's origin is always (0, 0).
	*/
	Rectangle<int> getBounds() const noexcept;

	/** Returns the image's pixel format. */
	PixelFormat getFormat() const noexcept;

	/** True if the image's format is ARGB. */
	bool isARGB() const noexcept;

	/** True if the image's format is RGB. */
	bool isRGB() const noexcept;

	/** True if the image's format is a single-channel alpha map. */
	bool isSingleChannel() const noexcept;

	/** True if the image contains an alpha-channel. */
	bool hasAlphaChannel() const noexcept;

	/** Clears a section of the image with a given colour.

		This won't do any alpha-blending - it just sets all pixels in the image to
		the given colour (which may be non-opaque if the image has an alpha channel).
	*/
	void clear (const Rectangle<int>& area, const Colour& colourToClearTo = Colour (0x00000000));

	/** Returns a rescaled version of this image.

		A new image is returned which is a copy of this one, rescaled to the given size.

		Note that if the new size is identical to the existing image, this will just return
		a reference to the original image, and won't actually create a duplicate.
	*/
	Image rescaled (int newWidth, int newHeight,
					Graphics::ResamplingQuality quality = Graphics::mediumResamplingQuality) const;

	/** Creates a copy of this image.
		Note that it's usually more efficient to use duplicateIfShared(), because it may not be necessary
		to copy an image if nothing else is using it.
		@see getReferenceCount
	*/
	Image createCopy() const;

	/** Returns a version of this image with a different image format.

		A new image is returned which has been converted to the specified format.

		Note that if the new format is no different to the current one, this will just return
		a reference to the original image, and won't actually create a copy.
	*/
	Image convertedToFormat (PixelFormat newFormat) const;

	/** Makes sure that no other Image objects share the same underlying data as this one.

		If no other Image objects refer to the same shared data as this one, this method has no
		effect. But if there are other references to the data, this will create a new copy of
		the data internally.

		Call this if you want to draw onto the image, but want to make sure that this doesn't
		affect any other code that may be sharing the same data.

		@see getReferenceCount
	*/
	void duplicateIfShared();

	/** Returns an image which refers to a subsection of this image.

		This will not make a copy of the original - the new image will keep a reference to it, so that
		if the original image is changed, the contents of the subsection will also change. Likewise if you
		draw into the subimage, you'll also be drawing onto that area of the original image. Note that if
		you use operator= to make the original Image object refer to something else, the subsection image
		won't pick up this change, it'll remain pointing at the original.

		The area passed-in will be clipped to the bounds of this image, so this may return a smaller
		image than the area you asked for, or even a null image if the area was out-of-bounds.
	*/
	Image getClippedImage (const Rectangle<int>& area) const;

	/** Returns the colour of one of the pixels in the image.

		If the co-ordinates given are beyond the image's boundaries, this will
		return Colours::transparentBlack.

		@see setPixelAt, Image::BitmapData::getPixelColour
	*/
	Colour getPixelAt (int x, int y) const;

	/** Sets the colour of one of the image's pixels.

		If the co-ordinates are beyond the image's boundaries, then nothing will happen.

		Note that this won't do any alpha-blending, it'll just replace the existing pixel
		with the given one. The colour's opacity will be ignored if this image doesn't have
		an alpha-channel.

		@see getPixelAt, Image::BitmapData::setPixelColour
	*/
	void setPixelAt (int x, int y, const Colour& colour);

	/** Changes the opacity of a pixel.

		This only has an effect if the image has an alpha channel and if the
		given co-ordinates are inside the image's boundary.

		The multiplier must be in the range 0 to 1.0, and the current alpha
		at the given co-ordinates will be multiplied by this value.

		@see setPixelAt
	*/
	void multiplyAlphaAt (int x, int y, float multiplier);

	/** Changes the overall opacity of the image.

		This will multiply the alpha value of each pixel in the image by the given
		amount (limiting the resulting alpha values between 0 and 255). This allows
		you to make an image more or less transparent.

		If the image doesn't have an alpha channel, this won't have any effect.
	*/
	void multiplyAllAlphas (float amountToMultiplyBy);

	/** Changes all the colours to be shades of grey, based on their current luminosity.
	*/
	void desaturate();

	/** Retrieves a section of an image as raw pixel data, so it can be read or written to.

		You should only use this class as a last resort - messing about with the internals of
		an image is only recommended for people who really know what they're doing!

		A BitmapData object should be used as a temporary, stack-based object. Don't keep one
		hanging around while the image is being used elsewhere.

		Depending on the way the image class is implemented, this may create a temporary buffer
		which is copied back to the image when the object is deleted, or it may just get a pointer
		directly into the image's raw data.

		You can use the stride and data values in this class directly, but don't alter them!
		The actual format of the pixel data depends on the image's format - see Image::getFormat(),
		and the PixelRGB, PixelARGB and PixelAlpha classes for more info.
	*/
	class BitmapData
	{
	public:
		enum ReadWriteMode
		{
			readOnly,
			writeOnly,
			readWrite
		};

		BitmapData (Image& image, int x, int y, int w, int h, ReadWriteMode mode);
		BitmapData (const Image& image, int x, int y, int w, int h);
		BitmapData (const Image& image, ReadWriteMode mode);
		~BitmapData();

		/** Returns a pointer to the start of a line in the image.
			The co-ordinate you provide here isn't checked, so it's the caller's responsibility to make
			sure it's not out-of-range.
		*/
		inline uint8* getLinePointer (int y) const noexcept                 { return data + y * lineStride; }

		/** Returns a pointer to a pixel in the image.
			The co-ordinates you give here are not checked, so it's the caller's responsibility to make sure they're
			not out-of-range.
		*/
		inline uint8* getPixelPointer (int x, int y) const noexcept         { return data + y * lineStride + x * pixelStride; }

		/** Returns the colour of a given pixel.
			For performance reasons, this won't do any bounds-checking on the coordinates, so it's the caller's
			repsonsibility to make sure they're within the image's size.
		*/
		Colour getPixelColour (int x, int y) const noexcept;

		/** Sets the colour of a given pixel.
			For performance reasons, this won't do any bounds-checking on the coordinates, so it's the caller's
			repsonsibility to make sure they're within the image's size.
		*/
		void setPixelColour (int x, int y, const Colour& colour) const noexcept;

		uint8* data;
		PixelFormat pixelFormat;
		int lineStride, pixelStride, width, height;

		/** Used internally by custom image types to manage pixel data lifetime. */
		class BitmapDataReleaser
		{
		protected:
			BitmapDataReleaser() {}
		public:
			virtual ~BitmapDataReleaser() {}
		};

		ScopedPointer<BitmapDataReleaser> dataReleaser;

	private:
		JUCE_DECLARE_NON_COPYABLE (BitmapData);
	};

	/** Copies a section of the image to somewhere else within itself. */
	void moveImageSection (int destX, int destY,
						   int sourceX, int sourceY,
						   int width, int height);

	/** Creates a RectangleList containing rectangles for all non-transparent pixels
		of the image.

		@param result           the list that will have the area added to it
		@param alphaThreshold   for a semi-transparent image, any pixels whose alpha is
								above this level will be considered opaque
	*/
	void createSolidAreaMask (RectangleList& result,
							  float alphaThreshold = 0.5f) const;

	/** Returns a NamedValueSet that is attached to the image and which can be used for
		associating custom values with it.

		If this is a null image, this will return a null pointer.
	*/
	NamedValueSet* getProperties() const;

	/** Creates a context suitable for drawing onto this image.
		Don't call this method directly! It's used internally by the Graphics class.
	*/
	LowLevelGraphicsContext* createLowLevelContext() const;

	/** Returns the number of Image objects which are currently referring to the same internal
		shared image data.

		@see duplicateIfShared
	*/
	int getReferenceCount() const noexcept;

	/** @internal */
	ImagePixelData* getPixelData() const noexcept       { return image; }

	/** @internal */
	explicit Image (ImagePixelData*);

private:

	ReferenceCountedObjectPtr<ImagePixelData> image;

	JUCE_LEAK_DETECTOR (Image);
};

/**
	This is a base class for holding image data in implementation-specific ways.

	You may never need to use this class directly - it's used internally
	by the Image class to store the actual image data. To access pixel data directly,
	you should use Image::BitmapData rather than this class.

	ImagePixelData objects are created indirectly, by subclasses of ImageType.
	@see Image, ImageType
*/
class JUCE_API  ImagePixelData  : public ReferenceCountedObject
{
public:
	ImagePixelData (Image::PixelFormat, int width, int height);
	~ImagePixelData();

	/** Creates a context that will draw into this image. */
	virtual LowLevelGraphicsContext* createLowLevelContext() = 0;
	/** Creates a copy of this image. */
	virtual ImagePixelData* clone() = 0;
	/** Creates an instance of the type of this image. */
	virtual ImageType* createType() const = 0;
	/** Initialises a BitmapData object. */
	virtual void initialiseBitmapData (Image::BitmapData&, int x, int y, Image::BitmapData::ReadWriteMode) = 0;

	/** The pixel format of the image data. */
	const Image::PixelFormat pixelFormat;
	const int width, height;

	/** User-defined settings that are attached to this image.
		@see Image::getProperties().
	*/
	NamedValueSet userData;

private:
	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ImagePixelData);
};

/**
	This base class is for handlers that control a type of image manipulation format,
	e.g. an in-memory bitmap, an OpenGL image, CoreGraphics image, etc.

	@see SoftwareImageType, NativeImageType, OpenGLImageType
*/
class JUCE_API  ImageType
{
public:
	ImageType();
	virtual ~ImageType();

	/** Creates a new image of this type, and the specified parameters. */
	virtual ImagePixelData* create (Image::PixelFormat format, int width, int height, bool shouldClearImage) const = 0;

	/** Must return a unique number to identify this type. */
	virtual int getTypeID() const = 0;

	/** Returns an image which is a copy of the source image, but using this type of storage mechanism.
		For example, to make sure that an image is stored in-memory, you could use:
		@code myImage = SoftwareImageType().convert (myImage); @endcode
	*/
	virtual Image convert (const Image& source) const;
};

/**
	An image storage type which holds the pixels in-memory as a simple block of values.
	@see ImageType, NativeImageType
*/
class JUCE_API  SoftwareImageType   : public ImageType
{
public:
	SoftwareImageType();
	~SoftwareImageType();

	ImagePixelData* create (Image::PixelFormat, int width, int height, bool clearImage) const;
	int getTypeID() const;
};

/**
	An image storage type which holds the pixels using whatever is the default storage
	format on the current platform.
	@see ImageType, SoftwareImageType
*/
class JUCE_API  NativeImageType   : public ImageType
{
public:
	NativeImageType();
	~NativeImageType();

	ImagePixelData* create (Image::PixelFormat, int width, int height, bool clearImage) const;
	int getTypeID() const;
};

#endif   // __JUCE_IMAGE_JUCEHEADER__

/*** End of inlined file: juce_Image.h ***/

/**
	Represents a colour or fill pattern to use for rendering paths.

	This is used by the Graphics and DrawablePath classes as a way to encapsulate
	a brush type. It can either be a solid colour, a gradient, or a tiled image.

	@see Graphics::setFillType, DrawablePath::setFill
*/
class JUCE_API  FillType
{
public:

	/** Creates a default fill type, of solid black. */
	FillType() noexcept;

	/** Creates a fill type of a solid colour.
		@see setColour
	*/
	FillType (const Colour& colour) noexcept;

	/** Creates a gradient fill type.
		@see setGradient
	*/
	FillType (const ColourGradient& gradient);

	/** Creates a tiled image fill type. The transform allows you to set the scaling, offset
		and rotation of the pattern.
		@see setTiledImage
	*/
	FillType (const Image& image, const AffineTransform& transform) noexcept;

	/** Creates a copy of another FillType. */
	FillType (const FillType& other);

	/** Makes a copy of another FillType. */
	FillType& operator= (const FillType& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	FillType (FillType&& other) noexcept;
	FillType& operator= (FillType&& other) noexcept;
   #endif

	/** Destructor. */
	~FillType() noexcept;

	/** Returns true if this is a solid colour fill, and not a gradient or image. */
	bool isColour() const noexcept          { return gradient == nullptr && image.isNull(); }

	/** Returns true if this is a gradient fill. */
	bool isGradient() const noexcept        { return gradient != nullptr; }

	/** Returns true if this is a tiled image pattern fill. */
	bool isTiledImage() const noexcept      { return image.isValid(); }

	/** Turns this object into a solid colour fill.
		If the object was an image or gradient, those fields will no longer be valid. */
	void setColour (const Colour& newColour) noexcept;

	/** Turns this object into a gradient fill. */
	void setGradient (const ColourGradient& newGradient);

	/** Turns this object into a tiled image fill type. The transform allows you to set
		the scaling, offset and rotation of the pattern.
	*/
	void setTiledImage (const Image& image, const AffineTransform& transform) noexcept;

	/** Changes the opacity that should be used.
		If the fill is a solid colour, this just changes the opacity of that colour. For
		gradients and image tiles, it changes the opacity that will be used for them.
	*/
	void setOpacity (float newOpacity) noexcept;

	/** Returns the current opacity to be applied to the colour, gradient, or image.
		@see setOpacity
	*/
	float getOpacity() const noexcept       { return colour.getFloatAlpha(); }

	/** Returns true if this fill type is completely transparent. */
	bool isInvisible() const noexcept;

	/** Returns a copy of this fill, adding the specified transform applied to the
		existing transform.
	*/
	FillType transformed (const AffineTransform& transform) const;

	/** The solid colour being used.

		If the fill type is not a solid colour, the alpha channel of this colour indicates
		the opacity that should be used for the fill, and the RGB channels are ignored.
	*/
	Colour colour;

	/** Returns the gradient that should be used for filling.
		This will be zero if the object is some other type of fill.
		If a gradient is active, the overall opacity with which it should be applied
		is indicated by the alpha channel of the colour variable.
	*/
	ScopedPointer <ColourGradient> gradient;

	/** The image that should be used for tiling.
		If an image fill is active, the overall opacity with which it should be applied
		is indicated by the alpha channel of the colour variable.
	*/
	Image image;

	/** The transform that should be applied to the image or gradient that's being drawn. */
	AffineTransform transform;

	bool operator== (const FillType& other) const;
	bool operator!= (const FillType& other) const;

private:
	JUCE_LEAK_DETECTOR (FillType);
};

#endif   // __JUCE_FILLTYPE_JUCEHEADER__

/*** End of inlined file: juce_FillType.h ***/


#endif
#ifndef __JUCE_PIXELFORMATS_JUCEHEADER__

#endif
#ifndef __JUCE_AFFINETRANSFORM_JUCEHEADER__

#endif
#ifndef __JUCE_BORDERSIZE_JUCEHEADER__

/*** Start of inlined file: juce_BorderSize.h ***/
#ifndef __JUCE_BORDERSIZE_JUCEHEADER__
#define __JUCE_BORDERSIZE_JUCEHEADER__

/**
	Specifies a set of gaps to be left around the sides of a rectangle.

	This is basically the size of the spaces at the top, bottom, left and right of
	a rectangle. It's used by various component classes to specify borders.

	@see Rectangle
*/
template <typename ValueType>
class BorderSize
{
public:

	/** Creates a null border.
		All sizes are left as 0.
	*/
	BorderSize() noexcept
		: top(), left(), bottom(), right()
	{
	}

	/** Creates a copy of another border. */
	BorderSize (const BorderSize& other) noexcept
		: top (other.top), left (other.left), bottom (other.bottom), right (other.right)
	{
	}

	/** Creates a border with the given gaps. */
	BorderSize (ValueType topGap, ValueType leftGap, ValueType bottomGap, ValueType rightGap) noexcept
		: top (topGap), left (leftGap), bottom (bottomGap), right (rightGap)
	{
	}

	/** Creates a border with the given gap on all sides. */
	explicit BorderSize (ValueType allGaps) noexcept
		: top (allGaps), left (allGaps), bottom (allGaps), right (allGaps)
	{
	}

	/** Returns the gap that should be left at the top of the region. */
	ValueType getTop() const noexcept                   { return top; }

	/** Returns the gap that should be left at the top of the region. */
	ValueType getLeft() const noexcept                  { return left; }

	/** Returns the gap that should be left at the top of the region. */
	ValueType getBottom() const noexcept                { return bottom; }

	/** Returns the gap that should be left at the top of the region. */
	ValueType getRight() const noexcept                 { return right; }

	/** Returns the sum of the top and bottom gaps. */
	ValueType getTopAndBottom() const noexcept          { return top + bottom; }

	/** Returns the sum of the left and right gaps. */
	ValueType getLeftAndRight() const noexcept          { return left + right; }

	/** Returns true if this border has no thickness along any edge. */
	bool isEmpty() const noexcept                       { return left + right + top + bottom == ValueType(); }

	/** Changes the top gap. */
	void setTop (ValueType newTopGap) noexcept          { top = newTopGap; }

	/** Changes the left gap. */
	void setLeft (ValueType newLeftGap) noexcept        { left = newLeftGap; }

	/** Changes the bottom gap. */
	void setBottom (ValueType newBottomGap) noexcept    { bottom = newBottomGap; }

	/** Changes the right gap. */
	void setRight (ValueType newRightGap) noexcept      { right = newRightGap; }

	/** Returns a rectangle with these borders removed from it. */
	Rectangle<ValueType> subtractedFrom (const Rectangle<ValueType>& original) const noexcept
	{
		return Rectangle<ValueType> (original.getX() + left,
									 original.getY() + top,
									 original.getWidth() - (left + right),
									 original.getHeight() - (top + bottom));
	}

	/** Removes this border from a given rectangle. */
	void subtractFrom (Rectangle<ValueType>& rectangle) const noexcept
	{
		rectangle = subtractedFrom (rectangle);
	}

	/** Returns a rectangle with these borders added around it. */
	Rectangle<ValueType> addedTo (const Rectangle<ValueType>& original) const noexcept
	{
		return Rectangle<ValueType> (original.getX() - left,
									 original.getY() - top,
									 original.getWidth() + (left + right),
									 original.getHeight() + (top + bottom));
	}

	/** Adds this border around a given rectangle. */
	void addTo (Rectangle<ValueType>& rectangle) const noexcept
	{
		rectangle = addedTo (rectangle);
	}

	bool operator== (const BorderSize& other) const noexcept
	{
		return top == other.top && left == other.left && bottom == other.bottom && right == other.right;
	}

	bool operator!= (const BorderSize& other) const noexcept
	{
		return ! operator== (other);
	}

private:

	ValueType top, left, bottom, right;

	JUCE_LEAK_DETECTOR (BorderSize);
};

#endif   // __JUCE_BORDERSIZE_JUCEHEADER__

/*** End of inlined file: juce_BorderSize.h ***/


#endif
#ifndef __JUCE_EDGETABLE_JUCEHEADER__

/*** Start of inlined file: juce_EdgeTable.h ***/
#ifndef __JUCE_EDGETABLE_JUCEHEADER__
#define __JUCE_EDGETABLE_JUCEHEADER__


/*** Start of inlined file: juce_RectangleList.h ***/
#ifndef __JUCE_RECTANGLELIST_JUCEHEADER__
#define __JUCE_RECTANGLELIST_JUCEHEADER__

/**
	Maintains a set of rectangles as a complex region.

	This class allows a set of rectangles to be treated as a solid shape, and can
	add and remove rectangular sections of it, and simplify overlapping or
	adjacent rectangles.

	@see Rectangle
*/
class JUCE_API  RectangleList
{
public:

	/** Creates an empty RectangleList */
	RectangleList() noexcept;

	/** Creates a copy of another list */
	RectangleList (const RectangleList& other);

	/** Creates a list containing just one rectangle. */
	RectangleList (const Rectangle<int>& rect);

	/** Copies this list from another one. */
	RectangleList& operator= (const RectangleList& other);

   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	RectangleList (RectangleList&& other) noexcept;
	RectangleList& operator= (RectangleList&& other) noexcept;
   #endif

	/** Destructor. */
	~RectangleList();

	/** Returns true if the region is empty. */
	bool isEmpty() const noexcept;

	/** Returns the number of rectangles in the list. */
	int getNumRectangles() const noexcept                       { return rects.size(); }

	/** Returns one of the rectangles at a particular index.

		@returns    the rectangle at the index, or an empty rectangle if the
					index is out-of-range.
	*/
	Rectangle<int> getRectangle (int index) const noexcept;

	/** Removes all rectangles to leave an empty region. */
	void clear();

	/** Merges a new rectangle into the list.

		The rectangle being added will first be clipped to remove any parts of it
		that overlap existing rectangles in the list.
	*/
	void add (int x, int y, int width, int height);

	/** Merges a new rectangle into the list.

		The rectangle being added will first be clipped to remove any parts of it
		that overlap existing rectangles in the list, and adjacent rectangles will be
		merged into it.
	*/
	void add (const Rectangle<int>& rect);

	/** Dumbly adds a rectangle to the list without checking for overlaps.

		This simply adds the rectangle to the end, it doesn't merge it or remove
		any overlapping bits.
	*/
	void addWithoutMerging (const Rectangle<int>& rect);

	/** Merges another rectangle list into this one.

		Any overlaps between the two lists will be clipped, so that the result is
		the union of both lists.
	*/
	void add (const RectangleList& other);

	/** Removes a rectangular region from the list.

		Any rectangles in the list which overlap this will be clipped and subdivided
		if necessary.
	*/
	void subtract (const Rectangle<int>& rect);

	/** Removes all areas in another RectangleList from this one.

		Any rectangles in the list which overlap this will be clipped and subdivided
		if necessary.

		@returns true if the resulting list is non-empty.
	*/
	bool subtract (const RectangleList& otherList);

	/** Removes any areas of the region that lie outside a given rectangle.

		Any rectangles in the list which overlap this will be clipped and subdivided
		if necessary.

		Returns true if the resulting region is not empty, false if it is empty.

		@see getIntersectionWith
	*/
	bool clipTo (const Rectangle<int>& rect);

	/** Removes any areas of the region that lie outside a given rectangle list.

		Any rectangles in this object which overlap the specified list will be clipped
		and subdivided if necessary.

		Returns true if the resulting region is not empty, false if it is empty.

		@see getIntersectionWith
	*/
	bool clipTo (const RectangleList& other);

	/** Creates a region which is the result of clipping this one to a given rectangle.

		Unlike the other clipTo method, this one doesn't affect this object - it puts the
		resulting region into the list whose reference is passed-in.

		Returns true if the resulting region is not empty, false if it is empty.

		@see clipTo
	*/
	bool getIntersectionWith (const Rectangle<int>& rect, RectangleList& destRegion) const;

	/** Swaps the contents of this and another list.

		This swaps their internal pointers, so is hugely faster than using copy-by-value
		to swap them.
	*/
	void swapWith (RectangleList& otherList) noexcept;

	/** Checks whether the region contains a given point.

		@returns true if the point lies within one of the rectangles in the list
	*/
	bool containsPoint (int x, int y) const noexcept;

	/** Checks whether the region contains the whole of a given rectangle.

		@returns    true all parts of the rectangle passed in lie within the region
					defined by this object
		@see intersectsRectangle, containsPoint
	*/
	bool containsRectangle (const Rectangle<int>& rectangleToCheck) const;

	/** Checks whether the region contains any part of a given rectangle.

		@returns    true if any part of the rectangle passed in lies within the region
					defined by this object
		@see containsRectangle
	*/
	bool intersectsRectangle (const Rectangle<int>& rectangleToCheck) const noexcept;

	/** Checks whether this region intersects any part of another one.

		@see intersectsRectangle
	*/
	bool intersects (const RectangleList& other) const noexcept;

	/** Returns the smallest rectangle that can enclose the whole of this region. */
	Rectangle<int> getBounds() const noexcept;

	/** Optimises the list into a minimum number of constituent rectangles.

		This will try to combine any adjacent rectangles into larger ones where
		possible, to simplify lists that might have been fragmented by repeated
		add/subtract calls.
	*/
	void consolidate();

	/** Adds an x and y value to all the co-ordinates. */
	void offsetAll (int dx, int dy) noexcept;

	/** Creates a Path object to represent this region. */
	Path toPath() const;

	/** An iterator for accessing all the rectangles in a RectangleList. */
	class JUCE_API  Iterator
	{
	public:

		Iterator (const RectangleList& list) noexcept;
		~Iterator();

		/** Advances to the next rectangle, and returns true if it's not finished.

			Call this before using getRectangle() to find the rectangle that was returned.
		*/
		bool next() noexcept;

		/** Returns the current rectangle. */
		const Rectangle<int>* getRectangle() const noexcept      { return current; }

	private:
		const Rectangle<int>* current;
		const RectangleList& owner;
		int index;

		JUCE_DECLARE_NON_COPYABLE (Iterator);
	};

private:

	friend class Iterator;
	Array <Rectangle<int> > rects;

	JUCE_LEAK_DETECTOR (RectangleList);
};

#endif   // __JUCE_RECTANGLELIST_JUCEHEADER__

/*** End of inlined file: juce_RectangleList.h ***/

class Path;
class Image;

/**
	A table of horizontal scan-line segments - used for rasterising Paths.

	@see Path, Graphics
*/
class JUCE_API  EdgeTable
{
public:

	/** Creates an edge table containing a path.

		A table is created with a fixed vertical range, and only sections of the path
		which lie within this range will be added to the table.

		@param clipLimits               only the region of the path that lies within this area will be added
		@param pathToAdd                the path to add to the table
		@param transform                a transform to apply to the path being added
	*/
	EdgeTable (const Rectangle<int>& clipLimits,
			   const Path& pathToAdd,
			   const AffineTransform& transform);

	/** Creates an edge table containing a rectangle. */
	explicit EdgeTable (const Rectangle<int>& rectangleToAdd);

	/** Creates an edge table containing a rectangle list. */
	explicit EdgeTable (const RectangleList& rectanglesToAdd);

	/** Creates an edge table containing a rectangle. */
	explicit EdgeTable (const Rectangle<float>& rectangleToAdd);

	/** Creates a copy of another edge table. */
	EdgeTable (const EdgeTable& other);

	/** Copies from another edge table. */
	EdgeTable& operator= (const EdgeTable& other);

	/** Destructor. */
	~EdgeTable();

	void clipToRectangle (const Rectangle<int>& r);
	void excludeRectangle (const Rectangle<int>& r);
	void clipToEdgeTable (const EdgeTable& other);
	void clipLineToMask (int x, int y, const uint8* mask, int maskStride, int numPixels);
	bool isEmpty() noexcept;
	const Rectangle<int>& getMaximumBounds() const noexcept      { return bounds; }
	void translate (float dx, int dy) noexcept;

	/** Reduces the amount of space the table has allocated.

		This will shrink the table down to use as little memory as possible - useful for
		read-only tables that get stored and re-used for rendering.
	*/
	void optimiseTable();

	/** Iterates the lines in the table, for rendering.

		This function will iterate each line in the table, and call a user-defined class
		to render each pixel or continuous line of pixels that the table contains.

		@param iterationCallback    this templated class must contain the following methods:
										@code
										inline void setEdgeTableYPos (int y);
										inline void handleEdgeTablePixel (int x, int alphaLevel) const;
										inline void handleEdgeTablePixelFull (int x) const;
										inline void handleEdgeTableLine (int x, int width, int alphaLevel) const;
										inline void handleEdgeTableLineFull (int x, int width) const;
										@endcode
										(these don't necessarily have to be 'const', but it might help it go faster)
	*/
	template <class EdgeTableIterationCallback>
	void iterate (EdgeTableIterationCallback& iterationCallback) const noexcept
	{
		const int* lineStart = table;

		for (int y = 0; y < bounds.getHeight(); ++y)
		{
			const int* line = lineStart;
			lineStart += lineStrideElements;
			int numPoints = line[0];

			if (--numPoints > 0)
			{
				int x = *++line;
				jassert ((x >> 8) >= bounds.getX() && (x >> 8) < bounds.getRight());
				int levelAccumulator = 0;

				iterationCallback.setEdgeTableYPos (bounds.getY() + y);

				while (--numPoints >= 0)
				{
					const int level = *++line;
					jassert (isPositiveAndBelow (level, (int) 256));
					const int endX = *++line;
					jassert (endX >= x);
					const int endOfRun = (endX >> 8);

					if (endOfRun == (x >> 8))
					{
						// small segment within the same pixel, so just save it for the next
						// time round..
						levelAccumulator += (endX - x) * level;
					}
					else
					{
						// plot the fist pixel of this segment, including any accumulated
						// levels from smaller segments that haven't been drawn yet
						levelAccumulator += (0x100 - (x & 0xff)) * level;
						levelAccumulator >>= 8;
						x >>= 8;

						if (levelAccumulator > 0)
						{
							if (levelAccumulator >= 255)
								iterationCallback.handleEdgeTablePixelFull (x);
							else
								iterationCallback.handleEdgeTablePixel (x, levelAccumulator);
						}

						// if there's a run of similar pixels, do it all in one go..
						if (level > 0)
						{
							jassert (endOfRun <= bounds.getRight());
							const int numPix = endOfRun - ++x;

							if (numPix > 0)
								iterationCallback.handleEdgeTableLine (x, numPix, level);
						}

						// save the bit at the end to be drawn next time round the loop.
						levelAccumulator = (endX & 0xff) * level;
					}

					x = endX;
				}

				levelAccumulator >>= 8;

				if (levelAccumulator > 0)
				{
					x >>= 8;
					jassert (x >= bounds.getX() && x < bounds.getRight());

					if (levelAccumulator >= 255)
						iterationCallback.handleEdgeTablePixelFull (x);
					else
						iterationCallback.handleEdgeTablePixel (x, levelAccumulator);
				}
			}
		}
	}

private:

	// table line format: number of points; point0 x, point0 levelDelta, point1 x, point1 levelDelta, etc
	HeapBlock<int> table;
	Rectangle<int> bounds;
	int maxEdgesPerLine, lineStrideElements;
	bool needToCheckEmptinesss;

	void addEdgePoint (int x, int y, int winding);
	void remapTableForNumEdges (int newNumEdgesPerLine);
	void intersectWithEdgeTableLine (int y, const int* otherLine);
	void clipEdgeTableLineToRange (int* line, int x1, int x2) noexcept;
	void sanitiseLevels (bool useNonZeroWinding) noexcept;
	static void copyEdgeTableData (int* dest, int destLineStride, const int* src, int srcLineStride, int numLines) noexcept;

	JUCE_LEAK_DETECTOR (EdgeTable);
};

#endif   // __JUCE_EDGETABLE_JUCEHEADER__

/*** End of inlined file: juce_EdgeTable.h ***/


#endif
#ifndef __JUCE_LINE_JUCEHEADER__

#endif
#ifndef __JUCE_PATH_JUCEHEADER__

#endif
#ifndef __JUCE_PATHITERATOR_JUCEHEADER__

/*** Start of inlined file: juce_PathIterator.h ***/
#ifndef __JUCE_PATHITERATOR_JUCEHEADER__
#define __JUCE_PATHITERATOR_JUCEHEADER__

/**
	Flattens a Path object into a series of straight-line sections.

	Use one of these to iterate through a Path object, and it will convert
	all the curves into line sections so it's easy to render or perform
	geometric operations on.

	@see Path
*/
class JUCE_API  PathFlatteningIterator
{
public:

	/** Creates a PathFlatteningIterator.

		After creation, use the next() method to initialise the fields in the
		object with the first line's position.

		@param path         the path to iterate along
		@param transform    a transform to apply to each point in the path being iterated
		@param tolerance    the amount by which the curves are allowed to deviate from the lines
							into which they are being broken down - a higher tolerance contains
							less lines, so can be generated faster, but will be less smooth.
	*/
	PathFlatteningIterator (const Path& path,
							const AffineTransform& transform = AffineTransform::identity,
							float tolerance = defaultTolerance);

	/** Destructor. */
	~PathFlatteningIterator();

	/** Fetches the next line segment from the path.

		This will update the member variables x1, y1, x2, y2, subPathIndex and closesSubPath
		so that they describe the new line segment.

		@returns false when there are no more lines to fetch.
	*/
	bool next();

	float x1;  /**< The x position of the start of the current line segment. */
	float y1;  /**< The y position of the start of the current line segment. */
	float x2;  /**< The x position of the end of the current line segment. */
	float y2;  /**< The y position of the end of the current line segment. */

	/** Indicates whether the current line segment is closing a sub-path.

		If the current line is the one that connects the end of a sub-path
		back to the start again, this will be true.
	*/
	bool closesSubPath;

	/** The index of the current line within the current sub-path.

		E.g. you can use this to see whether the line is the first one in the
		subpath by seeing if it's 0.
	*/
	int subPathIndex;

	/** Returns true if the current segment is the last in the current sub-path. */
	bool isLastInSubpath() const noexcept;

	/** This is the default value that should be used for the tolerance value (see the constructor parameters). */
	static const float defaultTolerance;

private:

	const Path& path;
	const AffineTransform transform;
	float* points;
	const float toleranceSquared;
	float subPathCloseX, subPathCloseY;
	const bool isIdentityTransform;

	HeapBlock <float> stackBase;
	float* stackPos;
	size_t index, stackSize;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PathFlatteningIterator);
};

#endif   // __JUCE_PATHITERATOR_JUCEHEADER__

/*** End of inlined file: juce_PathIterator.h ***/


#endif
#ifndef __JUCE_PATHSTROKETYPE_JUCEHEADER__

#endif
#ifndef __JUCE_POINT_JUCEHEADER__

#endif
#ifndef __JUCE_RECTANGLE_JUCEHEADER__

#endif
#ifndef __JUCE_RECTANGLELIST_JUCEHEADER__

#endif
#ifndef __JUCE_JUSTIFICATION_JUCEHEADER__

#endif
#ifndef __JUCE_RECTANGLEPLACEMENT_JUCEHEADER__

#endif
#ifndef __JUCE_GRAPHICSCONTEXT_JUCEHEADER__

#endif
#ifndef __JUCE_LOWLEVELGRAPHICSCONTEXT_JUCEHEADER__

/*** Start of inlined file: juce_LowLevelGraphicsContext.h ***/
#ifndef __JUCE_LOWLEVELGRAPHICSCONTEXT_JUCEHEADER__
#define __JUCE_LOWLEVELGRAPHICSCONTEXT_JUCEHEADER__

class AttributedString;

/**
	Interface class for graphics context objects, used internally by the Graphics class.

	Users are not supposed to create instances of this class directly - do your drawing
	via the Graphics object instead.

	It's a base class for different types of graphics context, that may perform software-based
	or OS-accelerated rendering.

	E.g. the LowLevelGraphicsSoftwareRenderer renders onto an image in memory, but other
	subclasses could render directly to a windows HDC, a Quartz context, or an OpenGL
	context.
*/
class JUCE_API  LowLevelGraphicsContext
{
protected:

	LowLevelGraphicsContext();

public:
	virtual ~LowLevelGraphicsContext();

	/** Returns true if this device is vector-based, e.g. a printer. */
	virtual bool isVectorDevice() const = 0;

	/** Moves the origin to a new position.

		The co-ords are relative to the current origin, and indicate the new position
		of (0, 0).
	*/
	virtual void setOrigin (int x, int y) = 0;
	virtual void addTransform (const AffineTransform& transform) = 0;
	virtual float getScaleFactor() = 0;

	virtual bool clipToRectangle (const Rectangle<int>& r) = 0;
	virtual bool clipToRectangleList (const RectangleList& clipRegion) = 0;
	virtual void excludeClipRectangle (const Rectangle<int>& r) = 0;
	virtual void clipToPath (const Path& path, const AffineTransform& transform) = 0;
	virtual void clipToImageAlpha (const Image& sourceImage, const AffineTransform& transform) = 0;

	virtual bool clipRegionIntersects (const Rectangle<int>& r) = 0;
	virtual Rectangle<int> getClipBounds() const = 0;
	virtual bool isClipEmpty() const = 0;

	virtual void saveState() = 0;
	virtual void restoreState() = 0;

	virtual void beginTransparencyLayer (float opacity) = 0;
	virtual void endTransparencyLayer() = 0;

	virtual void setFill (const FillType& fillType) = 0;
	virtual void setOpacity (float newOpacity) = 0;
	virtual void setInterpolationQuality (Graphics::ResamplingQuality quality) = 0;

	virtual void fillRect (const Rectangle<int>& r, bool replaceExistingContents) = 0;
	virtual void fillPath (const Path& path, const AffineTransform& transform) = 0;

	virtual void drawImage (const Image& sourceImage, const AffineTransform& transform) = 0;

	virtual void drawLine (const Line <float>& line) = 0;
	virtual void drawVerticalLine (int x, float top, float bottom) = 0;
	virtual void drawHorizontalLine (int y, float left, float right) = 0;

	virtual void setFont (const Font& newFont) = 0;
	virtual const Font& getFont() = 0;
	virtual void drawGlyph (int glyphNumber, const AffineTransform& transform) = 0;
	virtual bool drawTextLayout (const AttributedString&, const Rectangle<float>&)  { return false; }
};

#endif   // __JUCE_LOWLEVELGRAPHICSCONTEXT_JUCEHEADER__

/*** End of inlined file: juce_LowLevelGraphicsContext.h ***/


#endif
#ifndef __JUCE_LOWLEVELGRAPHICSPOSTSCRIPTRENDERER_JUCEHEADER__

/*** Start of inlined file: juce_LowLevelGraphicsPostScriptRenderer.h ***/
#ifndef __JUCE_LOWLEVELGRAPHICSPOSTSCRIPTRENDERER_JUCEHEADER__
#define __JUCE_LOWLEVELGRAPHICSPOSTSCRIPTRENDERER_JUCEHEADER__

/**
	An implementation of LowLevelGraphicsContext that turns the drawing operations
	into a PostScript document.

*/
class JUCE_API  LowLevelGraphicsPostScriptRenderer    : public LowLevelGraphicsContext
{
public:

	LowLevelGraphicsPostScriptRenderer (OutputStream& resultingPostScript,
										const String& documentTitle,
										int totalWidth,
										int totalHeight);

	~LowLevelGraphicsPostScriptRenderer();

	bool isVectorDevice() const;
	void setOrigin (int x, int y);
	void addTransform (const AffineTransform& transform);
	float getScaleFactor();

	bool clipToRectangle (const Rectangle<int>& r);
	bool clipToRectangleList (const RectangleList& clipRegion);
	void excludeClipRectangle (const Rectangle<int>& r);
	void clipToPath (const Path& path, const AffineTransform& transform);
	void clipToImageAlpha (const Image& sourceImage, const AffineTransform& transform);

	void saveState();
	void restoreState();

	void beginTransparencyLayer (float opacity);
	void endTransparencyLayer();

	bool clipRegionIntersects (const Rectangle<int>& r);
	Rectangle<int> getClipBounds() const;
	bool isClipEmpty() const;

	void setFill (const FillType& fillType);
	void setOpacity (float opacity);
	void setInterpolationQuality (Graphics::ResamplingQuality quality);

	void fillRect (const Rectangle<int>& r, bool replaceExistingContents);
	void fillPath (const Path& path, const AffineTransform& transform);

	void drawImage (const Image& sourceImage, const AffineTransform& transform);

	void drawLine (const Line <float>& line);

	void drawVerticalLine (int x, float top, float bottom);
	void drawHorizontalLine (int x, float top, float bottom);

	const Font& getFont();
	void setFont (const Font& newFont);
	void drawGlyph (int glyphNumber, const AffineTransform& transform);

protected:

	OutputStream& out;
	int totalWidth, totalHeight;
	bool needToClip;
	Colour lastColour;

	struct SavedState
	{
		SavedState();
		~SavedState();

		RectangleList clip;
		int xOffset, yOffset;
		FillType fillType;
		Font font;

	private:
		SavedState& operator= (const SavedState&);
	};

	OwnedArray <SavedState> stateStack;

	void writeClip();
	void writeColour (const Colour& colour);
	void writePath (const Path& path) const;
	void writeXY (float x, float y) const;
	void writeTransform (const AffineTransform& trans) const;
	void writeImage (const Image& im, int sx, int sy, int maxW, int maxH) const;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (LowLevelGraphicsPostScriptRenderer);
};

#endif   // __JUCE_LOWLEVELGRAPHICSPOSTSCRIPTRENDERER_JUCEHEADER__

/*** End of inlined file: juce_LowLevelGraphicsPostScriptRenderer.h ***/


#endif
#ifndef __JUCE_LOWLEVELGRAPHICSSOFTWARERENDERER_JUCEHEADER__

/*** Start of inlined file: juce_LowLevelGraphicsSoftwareRenderer.h ***/
#ifndef __JUCE_LOWLEVELGRAPHICSSOFTWARERENDERER_JUCEHEADER__
#define __JUCE_LOWLEVELGRAPHICSSOFTWARERENDERER_JUCEHEADER__

#ifndef DOXYGEN

/*** Start of inlined file: juce_RenderingHelpers.h ***/
#ifndef __JUCE_RENDERINGHELPERS_JUCEHEADER__
#define __JUCE_RENDERINGHELPERS_JUCEHEADER__

namespace RenderingHelpers
{

/** Holds either a simple integer translation, or an affine transform.
*/
class TranslationOrTransform
{
public:
	TranslationOrTransform (int xOffset_, int yOffset_) noexcept
		: xOffset (xOffset_), yOffset (yOffset_), isOnlyTranslated (true)
	{
	}

	TranslationOrTransform (const TranslationOrTransform& other) noexcept
		: complexTransform (other.complexTransform),
		  xOffset (other.xOffset), yOffset (other.yOffset),
		  isOnlyTranslated (other.isOnlyTranslated)
	{
	}

	AffineTransform getTransform() const noexcept
	{
		return isOnlyTranslated ? AffineTransform::translation ((float) xOffset, (float) yOffset)
								: complexTransform;
	}

	AffineTransform getTransformWith (const AffineTransform& userTransform) const noexcept
	{
		return isOnlyTranslated ? userTransform.translated ((float) xOffset, (float) yOffset)
								: userTransform.followedBy (complexTransform);
	}

	void setOrigin (const int x, const int y) noexcept
	{
		if (isOnlyTranslated)
		{
			xOffset += x;
			yOffset += y;
		}
		else
		{
			complexTransform = AffineTransform::translation ((float) x, (float) y)
											   .followedBy (complexTransform);
		}
	}

	void addTransform (const AffineTransform& t) noexcept
	{
		if (isOnlyTranslated
			 && t.isOnlyTranslation()
			 && isIntegerTranslation (t))
		{
			xOffset += (int) t.getTranslationX();
			yOffset += (int) t.getTranslationY();
		}
		else
		{
			complexTransform = getTransformWith (t);
			isOnlyTranslated = false;
		}
	}

	float getScaleFactor() const noexcept
	{
		return isOnlyTranslated ? 1.0f : complexTransform.getScaleFactor();
	}

	void moveOriginInDeviceSpace (const int dx, const int dy) noexcept
	{
		if (isOnlyTranslated)
		{
			xOffset += dx;
			yOffset += dy;
		}
		else
		{
			complexTransform = complexTransform.translated ((float) dx, (float) dx);
		}
	}

	template <typename Type>
	Rectangle<Type> translated (const Rectangle<Type>& r) const noexcept
	{
		jassert (isOnlyTranslated);
		return r.translated (static_cast <Type> (xOffset),
							 static_cast <Type> (yOffset));
	}

	Rectangle<int> deviceSpaceToUserSpace (const Rectangle<int>& r) const noexcept
	{
		return isOnlyTranslated ? r.translated (-xOffset, -yOffset)
								: r.toFloat().transformed (complexTransform.inverted()).getSmallestIntegerContainer();
	}

	AffineTransform complexTransform;
	int xOffset, yOffset;
	bool isOnlyTranslated;

private:
	static inline bool isIntegerTranslation (const AffineTransform& t) noexcept
	{
		const int tx = (int) (t.getTranslationX() * 256.0f);
		const int ty = (int) (t.getTranslationY() * 256.0f);
		return ((tx | ty) & 0xf8) == 0;
	}
};

template <class CachedGlyphType, class RenderTargetType>
class GlyphCache  : private DeletedAtShutdown
{
public:
	GlyphCache()
	{
		addNewGlyphSlots (120);
	}

	~GlyphCache()
	{
		getSingletonPointer() = nullptr;
	}

	static GlyphCache& getInstance()
	{
		GlyphCache*& g = getSingletonPointer();

		if (g == nullptr)
			g = new GlyphCache();

		return *g;
	}

	void drawGlyph (RenderTargetType& target, const Font& font, const int glyphNumber, float x, float y)
	{
		++accessCounter;
		CachedGlyphType* glyph = nullptr;

		const ScopedReadLock srl (lock);

		for (int i = glyphs.size(); --i >= 0;)
		{
			CachedGlyphType* const g = glyphs.getUnchecked (i);

			if (g->glyph == glyphNumber && g->font == font)
			{
				glyph = g;
				++hits;
				break;
			}
		}

		if (glyph == nullptr)
		{
			++misses;
			const ScopedWriteLock swl (lock);

			if (hits.value + misses.value > glyphs.size() * 16)
			{
				if (misses.value * 2 > hits.value)
					addNewGlyphSlots (32);

				hits.set (0);
				misses.set (0);
				glyph = glyphs.getLast();
			}
			else
			{
				glyph = findLeastRecentlyUsedGlyph();
			}

			jassert (glyph != nullptr);
			glyph->generate (font, glyphNumber);
		}

		glyph->lastAccessCount = accessCounter.value;
		glyph->draw (target, x, y);
	}

private:
	friend class OwnedArray <CachedGlyphType>;
	OwnedArray <CachedGlyphType> glyphs;
	Atomic<int> accessCounter, hits, misses;
	ReadWriteLock lock;

	void addNewGlyphSlots (int num)
	{
		while (--num >= 0)
			glyphs.add (new CachedGlyphType());
	}

	CachedGlyphType* findLeastRecentlyUsedGlyph() const noexcept
	{
		CachedGlyphType* oldest = glyphs.getLast();
		int oldestCounter = oldest->lastAccessCount;

		for (int i = glyphs.size() - 1; --i >= 0;)
		{
			CachedGlyphType* const glyph = glyphs.getUnchecked(i);

			if (glyph->lastAccessCount <= oldestCounter)
			{
				oldestCounter = glyph->lastAccessCount;
				oldest = glyph;
			}
		}

		return oldest;
	}

	static GlyphCache*& getSingletonPointer() noexcept
	{
		static GlyphCache* g = nullptr;
		return g;
	}

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (GlyphCache);
};

template <class RendererType>
class CachedGlyphEdgeTable
{
public:
	CachedGlyphEdgeTable() : glyph (0), lastAccessCount (0) {}

	void draw (RendererType& state, float x, const float y) const
	{
		if (snapToIntegerCoordinate)
			x = std::floor (x + 0.5f);

		if (edgeTable != nullptr)
			state.fillEdgeTable (*edgeTable, x, roundToInt (y));
	}

	void generate (const Font& newFont, const int glyphNumber)
	{
		font = newFont;
		Typeface* const typeface = newFont.getTypeface();
		snapToIntegerCoordinate = typeface->isHinted();
		glyph = glyphNumber;

		const float fontHeight = font.getHeight();
		edgeTable = typeface->getEdgeTableForGlyph (glyphNumber,
													AffineTransform::scale (fontHeight * font.getHorizontalScale(), fontHeight)
																  #if JUCE_MAC || JUCE_IOS
																	.translated (0.0f, -0.5f)
																  #endif
													);
	}

	Font font;
	int glyph, lastAccessCount;
	bool snapToIntegerCoordinate;

private:
	ScopedPointer <EdgeTable> edgeTable;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (CachedGlyphEdgeTable);
};

template <class StateObjectType>
class SavedStateStack
{
public:
	SavedStateStack (StateObjectType* const initialState) noexcept
		: currentState (initialState)
	{}

	inline StateObjectType* operator->() const noexcept     { return currentState; }
	inline StateObjectType& operator*()  const noexcept     { return *currentState; }

	void save()
	{
		stack.add (new StateObjectType (*currentState));
	}

	void restore()
	{
		StateObjectType* const top = stack.getLast();

		if (top != nullptr)
		{
			currentState = top;
			stack.removeLast (1, false);
		}
		else
		{
			jassertfalse; // trying to pop with an empty stack!
		}
	}

	void beginTransparencyLayer (float opacity)
	{
		save();
		currentState = currentState->beginTransparencyLayer (opacity);
	}

	void endTransparencyLayer()
	{
		const ScopedPointer<StateObjectType> finishedTransparencyLayer (currentState);
		restore();
		currentState->endTransparencyLayer (*finishedTransparencyLayer);
	}

private:
	ScopedPointer<StateObjectType> currentState;
	OwnedArray<StateObjectType> stack;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SavedStateStack);
};

// Calculates the alpha values and positions for rendering the edges of a non-pixel
// aligned rectangle.
struct FloatRectangleRasterisingInfo
{
	FloatRectangleRasterisingInfo (const Rectangle<float>& area)
		: left   (roundToInt (256.0f * area.getX())),
		  top    (roundToInt (256.0f * area.getY())),
		  right  (roundToInt (256.0f * area.getRight())),
		  bottom (roundToInt (256.0f * area.getBottom()))
	{
		if ((top >> 8) == (bottom >> 8))
		{
			topAlpha = bottom - top;
			bottomAlpha = 0;
			totalTop = top >> 8;
			totalBottom = bottom = top = totalTop + 1;
		}
		else
		{
			if ((top & 255) == 0)
			{
				topAlpha = 0;
				top = totalTop = (top >> 8);
			}
			else
			{
				topAlpha = 255 - (top & 255);
				totalTop = (top >> 8);
				top = totalTop + 1;
			}

			bottomAlpha = bottom & 255;
			bottom >>= 8;
			totalBottom = bottom + (bottomAlpha != 0 ? 1 : 0);
		}

		if ((left >> 8) == (right >> 8))
		{
			leftAlpha = right - left;
			rightAlpha = 0;
			totalLeft = (left >> 8);
			totalRight = right = left = totalLeft + 1;
		}
		else
		{
			if ((left & 255) == 0)
			{
				leftAlpha = 0;
				left = totalLeft = (left >> 8);
			}
			else
			{
				leftAlpha = 255 - (left & 255);
				totalLeft = (left >> 8);
				left = totalLeft + 1;
			}

			rightAlpha = right & 255;
			right >>= 8;
			totalRight = right + (rightAlpha != 0 ? 1 : 0);
		}
	}

	template <class Callback>
	void iterate (Callback& callback) const
	{
		if (topAlpha != 0)       callback (totalLeft, totalTop, totalRight - totalLeft, 1, topAlpha);
		if (bottomAlpha != 0)    callback (totalLeft, bottom,   totalRight - totalLeft, 1, bottomAlpha);
		if (leftAlpha != 0)      callback (totalLeft, totalTop, 1, totalBottom - totalTop, leftAlpha);
		if (rightAlpha != 0)     callback (right,     totalTop, 1, totalBottom - totalTop, rightAlpha);

		callback (left, top, right - left, bottom - top, 255);
	}

	inline bool isOnePixelWide() const noexcept            { return right - left == 1 && leftAlpha + rightAlpha == 0; }

	inline int getTopLeftCornerAlpha() const noexcept      { return (topAlpha * leftAlpha) >> 8; }
	inline int getTopRightCornerAlpha() const noexcept     { return (topAlpha * rightAlpha) >> 8; }
	inline int getBottomLeftCornerAlpha() const noexcept   { return (bottomAlpha * leftAlpha) >> 8; }
	inline int getBottomRightCornerAlpha() const noexcept  { return (bottomAlpha * rightAlpha) >> 8; }

	int left, top, right, bottom;  // bounds of the solid central area, excluding anti-aliased edges
	int totalTop, totalLeft, totalBottom, totalRight; // bounds of the total area, including edges
	int topAlpha, leftAlpha, bottomAlpha, rightAlpha; // alpha of each anti-aliased edge
};

}

#endif   // __JUCE_RENDERINGHELPERS_JUCEHEADER__

/*** End of inlined file: juce_RenderingHelpers.h ***/


#endif

/**
	A lowest-common-denominator implementation of LowLevelGraphicsContext that does all
	its rendering in memory.

	User code is not supposed to create instances of this class directly - do all your
	rendering via the Graphics class instead.
*/
class JUCE_API  LowLevelGraphicsSoftwareRenderer    : public LowLevelGraphicsContext
{
public:

	LowLevelGraphicsSoftwareRenderer (const Image& imageToRenderOn);
	LowLevelGraphicsSoftwareRenderer (const Image& imageToRenderOn, const Point<int>& origin, const RectangleList& initialClip);
	~LowLevelGraphicsSoftwareRenderer();

	bool isVectorDevice() const;
	void setOrigin (int x, int y);
	void addTransform (const AffineTransform&);
	float getScaleFactor();
	bool clipToRectangle (const Rectangle<int>&);
	bool clipToRectangleList (const RectangleList&);
	void excludeClipRectangle (const Rectangle<int>&);
	void clipToPath (const Path&, const AffineTransform&);
	void clipToImageAlpha (const Image&, const AffineTransform&);
	bool clipRegionIntersects (const Rectangle<int>&);
	Rectangle<int> getClipBounds() const;
	bool isClipEmpty() const;

	void saveState();
	void restoreState();

	void beginTransparencyLayer (float opacity);
	void endTransparencyLayer();

	void setFill (const FillType&);
	void setOpacity (float opacity);
	void setInterpolationQuality (Graphics::ResamplingQuality);

	void fillRect (const Rectangle<int>&, bool replaceExistingContents);
	void fillPath (const Path&, const AffineTransform&);

	void drawImage (const Image&, const AffineTransform&);

	void drawLine (const Line <float>& line);

	void drawVerticalLine (int x, float top, float bottom);
	void drawHorizontalLine (int x, float top, float bottom);

	void setFont (const Font&);
	const Font& getFont();
	void drawGlyph (int glyphNumber, float x, float y);
	void drawGlyph (int glyphNumber, const AffineTransform&);

   #ifndef DOXYGEN
	class SavedState;
   #endif

protected:
	RenderingHelpers::SavedStateStack<SavedState> savedState;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (LowLevelGraphicsSoftwareRenderer);
};

#endif   // __JUCE_LOWLEVELGRAPHICSSOFTWARERENDERER_JUCEHEADER__

/*** End of inlined file: juce_LowLevelGraphicsSoftwareRenderer.h ***/


#endif
#ifndef __JUCE_IMAGE_JUCEHEADER__

#endif
#ifndef __JUCE_IMAGECACHE_JUCEHEADER__

/*** Start of inlined file: juce_ImageCache.h ***/
#ifndef __JUCE_IMAGECACHE_JUCEHEADER__
#define __JUCE_IMAGECACHE_JUCEHEADER__

/**
	A global cache of images that have been loaded from files or memory.

	If you're loading an image and may need to use the image in more than one
	place, this is used to allow the same image to be shared rather than loading
	multiple copies into memory.

	Another advantage is that after images are released, they will be kept in
	memory for a few seconds before it is actually deleted, so if you're repeatedly
	loading/deleting the same image, it'll reduce the chances of having to reload it
	each time.

	@see Image, ImageFileFormat
*/
class JUCE_API  ImageCache
{
public:

	/** Loads an image from a file, (or just returns the image if it's already cached).

		If the cache already contains an image that was loaded from this file,
		that image will be returned. Otherwise, this method will try to load the
		file, add it to the cache, and return it.

		Remember that the image returned is shared, so drawing into it might
		affect other things that are using it! If you want to draw on it, first
		call Image::duplicateIfShared()

		@param file     the file to try to load
		@returns        the image, or null if it there was an error loading it
		@see getFromMemory, getFromCache, ImageFileFormat::loadFrom
	*/
	static Image getFromFile (const File& file);

	/** Loads an image from an in-memory image file, (or just returns the image if it's already cached).

		If the cache already contains an image that was loaded from this block of memory,
		that image will be returned. Otherwise, this method will try to load the
		file, add it to the cache, and return it.

		Remember that the image returned is shared, so drawing into it might
		affect other things that are using it! If you want to draw on it, first
		call Image::duplicateIfShared()

		@param imageData    the block of memory containing the image data
		@param dataSize     the data size in bytes
		@returns            the image, or an invalid image if it there was an error loading it
		@see getFromMemory, getFromCache, ImageFileFormat::loadFrom
	*/
	static Image getFromMemory (const void* imageData, int dataSize);

	/** Checks the cache for an image with a particular hashcode.

		If there's an image in the cache with this hashcode, it will be returned,
		otherwise it will return an invalid image.

		@param hashCode the hash code that was associated with the image by addImageToCache()
		@see addImageToCache
	*/
	static Image getFromHashCode (int64 hashCode);

	/** Adds an image to the cache with a user-defined hash-code.

		The image passed-in will be referenced (not copied) by the cache, so it's probably
		a good idea not to draw into it after adding it, otherwise this will affect all
		instances of it that may be in use.

		@param image    the image to add
		@param hashCode the hash-code to associate with it
		@see getFromHashCode
	*/
	static void addImageToCache (const Image& image, int64 hashCode);

	/** Changes the amount of time before an unused image will be removed from the cache.
		By default this is about 5 seconds.
	*/
	static void setCacheTimeout (int millisecs);

private:

	class Pimpl;
	friend class Pimpl;

	ImageCache();
	~ImageCache();

	JUCE_DECLARE_NON_COPYABLE (ImageCache);
};

#endif   // __JUCE_IMAGECACHE_JUCEHEADER__

/*** End of inlined file: juce_ImageCache.h ***/


#endif
#ifndef __JUCE_IMAGECONVOLUTIONKERNEL_JUCEHEADER__

/*** Start of inlined file: juce_ImageConvolutionKernel.h ***/
#ifndef __JUCE_IMAGECONVOLUTIONKERNEL_JUCEHEADER__
#define __JUCE_IMAGECONVOLUTIONKERNEL_JUCEHEADER__

/**
	Represents a filter kernel to use in convoluting an image.

	@see Image::applyConvolution
*/
class JUCE_API  ImageConvolutionKernel
{
public:

	/** Creates an empty convulution kernel.

		@param size     the length of each dimension of the kernel, so e.g. if the size
						is 5, it will create a 5x5 kernel
	*/
	ImageConvolutionKernel (int size);

	/** Destructor. */
	~ImageConvolutionKernel();

	/** Resets all values in the kernel to zero. */
	void clear();

	/** Returns one of the kernel values. */
	float getKernelValue (int x, int y) const noexcept;

	/** Sets the value of a specific cell in the kernel.

		The x and y parameters must be in the range 0 < x < getKernelSize().

		@see setOverallSum
	*/
	void setKernelValue (int x, int y, float value) noexcept;

	/** Rescales all values in the kernel to make the total add up to a fixed value.

		This will multiply all values in the kernel by (desiredTotalSum / currentTotalSum).
	*/
	void setOverallSum (float desiredTotalSum);

	/** Multiplies all values in the kernel by a value. */
	void rescaleAllValues (float multiplier);

	/** Intialises the kernel for a gaussian blur.

		@param blurRadius   this may be larger or smaller than the kernel's actual
							size but this will obviously be wasteful or clip at the
							edges. Ideally the kernel should be just larger than
							(blurRadius * 2).
	*/
	void createGaussianBlur (float blurRadius);

	/** Returns the size of the kernel.

		E.g. if it's a 3x3 kernel, this returns 3.
	*/
	int getKernelSize() const               { return size; }

	/** Applies the kernel to an image.

		@param destImage        the image that will receive the resultant convoluted pixels.
		@param sourceImage      the source image to read from - this can be the same image as
								the destination, but if different, it must be exactly the same
								size and format.
		@param destinationArea  the region of the image to apply the filter to
	*/
	void applyToImage (Image& destImage,
					   const Image& sourceImage,
					   const Rectangle<int>& destinationArea) const;

private:

	HeapBlock <float> values;
	const int size;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ImageConvolutionKernel);
};

#endif   // __JUCE_IMAGECONVOLUTIONKERNEL_JUCEHEADER__

/*** End of inlined file: juce_ImageConvolutionKernel.h ***/


#endif
#ifndef __JUCE_IMAGEFILEFORMAT_JUCEHEADER__

/*** Start of inlined file: juce_ImageFileFormat.h ***/
#ifndef __JUCE_IMAGEFILEFORMAT_JUCEHEADER__
#define __JUCE_IMAGEFILEFORMAT_JUCEHEADER__

/**
	Base-class for codecs that can read and write image file formats such
	as PNG, JPEG, etc.

	This class also contains static methods to make it easy to load images
	from files, streams or from memory.

	@see Image, ImageCache
*/
class JUCE_API  ImageFileFormat
{
protected:

	/** Creates an ImageFormat. */
	ImageFileFormat()                   {}

public:
	/** Destructor. */
	virtual ~ImageFileFormat()          {}

	/** Returns a description of this file format.

		E.g. "JPEG", "PNG"
	*/
	virtual String getFormatName() = 0;

	/** Returns true if the given stream seems to contain data that this format
		understands.

		The format class should only read the first few bytes of the stream and sniff
		for header bytes that it understands.

		@see decodeImage
	*/
	virtual bool canUnderstand (InputStream& input) = 0;

	/** Tries to decode and return an image from the given stream.

		This will be called for an image format after calling its canUnderStand() method
		to see if it can handle the stream.

		@param input    the stream to read the data from. The stream will be positioned
						at the start of the image data (but this may not necessarily
						be position 0)
		@returns        the image that was decoded, or an invalid image if it fails.
		@see loadFrom
	*/
	virtual Image decodeImage (InputStream& input) = 0;

	/** Attempts to write an image to a stream.

		To specify extra information like encoding quality, there will be appropriate parameters
		in the subclasses of the specific file types.

		@returns        true if it nothing went wrong.
	*/
	virtual bool writeImageToStream (const Image& sourceImage,
									 OutputStream& destStream) = 0;

	/** Tries the built-in decoders to see if it can find one to read this stream.

		There are currently built-in decoders for PNG, JPEG and GIF formats.

		The object that is returned should not be deleted by the caller.

		@see canUnderstand, decodeImage, loadFrom
	*/
	static ImageFileFormat* findImageFormatForStream (InputStream& input);

	/** Tries to load an image from a stream.

		This will use the findImageFormatForStream() method to locate a suitable
		codec, and use that to load the image.

		@returns        the image that was decoded, or an invalid image if it fails.
	*/
	static Image loadFrom (InputStream& input);

	/** Tries to load an image from a file.

		This will use the findImageFormatForStream() method to locate a suitable
		codec, and use that to load the image.

		@returns        the image that was decoded, or an invalid image if it fails.
	*/
	static Image loadFrom (const File& file);

	/** Tries to load an image from a block of raw image data.

		This will use the findImageFormatForStream() method to locate a suitable
		codec, and use that to load the image.

		@returns        the image that was decoded, or an invalid image if it fails.
	*/
	static Image loadFrom (const void* rawData,
						   size_t numBytesOfData);

};

/**
	A subclass of ImageFileFormat for reading and writing PNG files.

	@see ImageFileFormat, JPEGImageFormat
*/
class JUCE_API  PNGImageFormat  : public ImageFileFormat
{
public:

	PNGImageFormat();
	~PNGImageFormat();

	String getFormatName();
	bool canUnderstand (InputStream& input);
	Image decodeImage (InputStream& input);
	bool writeImageToStream (const Image& sourceImage, OutputStream& destStream);
};

/**
	A subclass of ImageFileFormat for reading and writing JPEG files.

	@see ImageFileFormat, PNGImageFormat
*/
class JUCE_API  JPEGImageFormat  : public ImageFileFormat
{
public:

	JPEGImageFormat();
	~JPEGImageFormat();

	/** Specifies the quality to be used when writing a JPEG file.

		@param newQuality  a value 0 to 1.0, where 0 is low quality, 1.0 is best, or
						   any negative value is "default" quality
	*/
	void setQuality (float newQuality);

	String getFormatName();
	bool canUnderstand (InputStream& input);
	Image decodeImage (InputStream& input);
	bool writeImageToStream (const Image& sourceImage, OutputStream& destStream);

private:
	float quality;
};

/**
	A subclass of ImageFileFormat for reading GIF files.

	@see ImageFileFormat, PNGImageFormat, JPEGImageFormat
*/
class JUCE_API  GIFImageFormat  : public ImageFileFormat
{
public:

	GIFImageFormat();
	~GIFImageFormat();

	String getFormatName();
	bool canUnderstand (InputStream& input);
	Image decodeImage (InputStream& input);
	bool writeImageToStream (const Image& sourceImage, OutputStream& destStream);
};

#endif   // __JUCE_IMAGEFILEFORMAT_JUCEHEADER__

/*** End of inlined file: juce_ImageFileFormat.h ***/


#endif
#ifndef __JUCE_ATTRIBUTEDSTRING_JUCEHEADER__

/*** Start of inlined file: juce_AttributedString.h ***/
#ifndef __JUCE_ATTRIBUTEDSTRING_JUCEHEADER__
#define __JUCE_ATTRIBUTEDSTRING_JUCEHEADER__

/**
	A text string with a set of colour/font settings that are associated with sub-ranges
	of the text.

	An attributed string lets you create a string with varied fonts, colours, word-wrapping,
	layout, etc., and draw it using AttributedString::draw().

	@see TextLayout
*/
class JUCE_API  AttributedString
{
public:
	/** Creates an empty attributed string. */
	AttributedString();

	/** Creates an attributed string with the given text. */
	explicit AttributedString (const String& text);

	AttributedString (const AttributedString&);
	AttributedString& operator= (const AttributedString&);
   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	AttributedString (AttributedString&&) noexcept;
	AttributedString& operator= (AttributedString&&) noexcept;
   #endif

	/** Destructor. */
	~AttributedString();

	/** Returns the complete text of this attributed string. */
	const String& getText() const noexcept                  { return text; }

	/** Replaces all the text.
		This will change the text, but won't affect any of the colour or font attributes
		that have been added.
	*/
	void setText (const String& newText);

	/** Appends some text (with a default font and colour). */
	void append (const String& textToAppend);
	/** Appends some text, with a specified font, and the default colour (black). */
	void append (const String& textToAppend, const Font& font);
	/** Appends some text, with a specified colour, and the default font. */
	void append (const String& textToAppend, const Colour& colour);
	/** Appends some text, with a specified font and colour. */
	void append (const String& textToAppend, const Font& font, const Colour& colour);

	/** Resets the string, clearing all text and attributes.
		Note that this won't affect global settings like the justification type,
		word-wrap mode, etc.
	*/
	void clear();

	/** Draws this string within the given area.
		The layout of the string within the rectangle is controlled by the justification
		value passed to setJustification().
	*/
	void draw (Graphics& g, const Rectangle<float>& area) const;

	/** Returns the justification that should be used for laying-out the text.
		This may include both vertical and horizontal flags.
	*/
	Justification getJustification() const noexcept         { return justification; }

	/** Sets the justification that should be used for laying-out the text.
		This may include both vertical and horizontal flags.
	*/
	void setJustification (const Justification& newJustification) noexcept;

	/** Types of word-wrap behaviour.
		@see getWordWrap, setWordWrap
	*/
	enum WordWrap
	{
		none,   /**< No word-wrapping: lines extend indefinitely. */
		byWord, /**< Lines are wrapped on a word boundary. */
		byChar, /**< Lines are wrapped on a character boundary. */
	};

	/** Returns the word-wrapping behaviour. */
	WordWrap getWordWrap() const noexcept                   { return wordWrap; }

	/** Sets the word-wrapping behaviour. */
	void setWordWrap (WordWrap newWordWrap) noexcept;

	/** Types of reading direction that can be used.
		@see getReadingDirection, setReadingDirection
	*/
	enum ReadingDirection
	{
		natural,
		leftToRight,
		rightToLeft,
	};

	/** Returns the reading direction for the text. */
	ReadingDirection getReadingDirection() const noexcept   { return readingDirection; }

	/** Sets the reading direction that should be used for the text. */
	void setReadingDirection (ReadingDirection newReadingDirection) noexcept;

	/** Returns the extra line-spacing distance. */
	float getLineSpacing() const noexcept                   { return lineSpacing; }

	/** Sets an extra line-spacing distance. */
	void setLineSpacing (float newLineSpacing) noexcept;

	/** An attribute that has been applied to a range of characters in an AttributedString. */
	class JUCE_API  Attribute
	{
	public:
		/** Creates an attribute that changes the colour for a range of characters.
			@see AttributedString::setColour()
		*/
		Attribute (const Range<int>& range, const Colour& colour);

		/** Creates an attribute that changes the font for a range of characters.
			@see AttributedString::setFont()
		*/
		Attribute (const Range<int>& range, const Font& font);

		Attribute (const Attribute&);
		~Attribute();

		/** If this attribute specifies a font, this returns it; otherwise it returns nullptr. */
		const Font* getFont() const noexcept            { return font; }

		/** If this attribute specifies a colour, this returns it; otherwise it returns nullptr. */
		const Colour* getColour() const noexcept        { return colour; }

		/** The range of characters to which this attribute will be applied. */
		const Range<int> range;

	private:
		ScopedPointer<Font> font;
		ScopedPointer<Colour> colour;

		Attribute& operator= (const Attribute&);

		JUCE_LEAK_DETECTOR (Attribute);
	};

	/** Returns the number of attributes that have been added to this string. */
	int getNumAttributes() const noexcept                       { return attributes.size(); }

	/** Returns one of the string's attributes.
		The index provided must be less than getNumAttributes(), and >= 0.
	*/
	const Attribute* getAttribute (int index) const noexcept    { return attributes.getUnchecked (index); }

	/** Adds a colour attribute for the specified range. */
	void setColour (const Range<int>& range, const Colour& colour);

	/** Removes all existing colour attributes, and applies this colour to the whole string. */
	void setColour (const Colour& colour);

	/** Adds a font attribute for the specified range. */
	void setFont (const Range<int>& range, const Font& font);

	/** Removes all existing font attributes, and applies this font to the whole string. */
	void setFont (const Font& font);

private:
	String text;
	float lineSpacing;
	Justification justification;
	WordWrap wordWrap;
	ReadingDirection readingDirection;
	OwnedArray<Attribute> attributes;

	JUCE_LEAK_DETECTOR (AttributedString);
};

#endif   // __JUCE_ATTRIBUTEDSTRING_JUCEHEADER__

/*** End of inlined file: juce_AttributedString.h ***/


#endif
#ifndef __JUCE_CUSTOMTYPEFACE_JUCEHEADER__

/*** Start of inlined file: juce_CustomTypeface.h ***/
#ifndef __JUCE_CUSTOMTYPEFACE_JUCEHEADER__
#define __JUCE_CUSTOMTYPEFACE_JUCEHEADER__

class InputStream;
class OutputStream;

/**
	A typeface that can be populated with custom glyphs.

	You can create a CustomTypeface if you need one that contains your own glyphs,
	or if you need to load a typeface from a Juce-formatted binary stream.

	If you want to create a copy of a native face, you can use addGlyphsFromOtherTypeface()
	to copy glyphs into this face.

	@see Typeface, Font
*/
class JUCE_API  CustomTypeface  : public Typeface
{
public:

	/** Creates a new, empty typeface. */
	CustomTypeface();

	/** Loads a typeface from a previously saved stream.
		The stream must have been created by writeToStream().
		@see writeToStream
	*/
	explicit CustomTypeface (InputStream& serialisedTypefaceStream);

	/** Destructor. */
	~CustomTypeface();

	/** Resets this typeface, deleting all its glyphs and settings. */
	void clear();

	/** Sets the vital statistics for the typeface.
		@param name     the typeface's name
		@param ascent   the ascent - this is normalised to a height of 1.0 and this is
						the value that will be returned by Typeface::getAscent(). The
						descent is assumed to be (1.0 - ascent)
		@param isBold   should be true if the typeface is bold
		@param isItalic should be true if the typeface is italic
		@param defaultCharacter     the character to be used as a replacement if there's
						no glyph available for the character that's being drawn
	*/
	void setCharacteristics (const String& name, float ascent,
							 bool isBold, bool isItalic,
							 juce_wchar defaultCharacter) noexcept;

	/** Adds a glyph to the typeface.

		The path that is passed in is normalised so that the font height is 1.0, and its
		origin is the anchor point of the character on its baseline.

		The width is the nominal width of the character, and any extra kerning values that
		are specified will be added to this width.
	*/
	void addGlyph (juce_wchar character, const Path& path, float width) noexcept;

	/** Specifies an extra kerning amount to be used between a pair of characters.
		The amount will be added to the nominal width of the first character when laying out a string.
	*/
	void addKerningPair (juce_wchar char1, juce_wchar char2, float extraAmount) noexcept;

	/** Adds a range of glyphs from another typeface.
		This will attempt to pull in the paths and kerning information from another typeface and
		add it to this one.
	*/
	void addGlyphsFromOtherTypeface (Typeface& typefaceToCopy, juce_wchar characterStartIndex, int numCharacters) noexcept;

	/** Saves this typeface as a Juce-formatted font file.
		A CustomTypeface can be created to reload the data that is written - see the CustomTypeface
		constructor.
	*/
	bool writeToStream (OutputStream& outputStream);

	// The following methods implement the basic Typeface behaviour.
	float getAscent() const;
	float getDescent() const;
	float getStringWidth (const String& text);
	void getGlyphPositions (const String& text, Array <int>& glyphs, Array<float>& xOffsets);
	bool getOutlineForGlyph (int glyphNumber, Path& path);
	EdgeTable* getEdgeTableForGlyph (int glyphNumber, const AffineTransform& transform);

protected:

	juce_wchar defaultCharacter;
	float ascent;
	bool isBold, isItalic;

	/** If a subclass overrides this, it can load glyphs into the font on-demand.
		When methods such as getGlyphPositions() or getOutlineForGlyph() are asked for a
		particular character and there's no corresponding glyph, they'll call this
		method so that a subclass can try to add that glyph, returning true if it
		manages to do so.
	*/
	virtual bool loadGlyphIfPossible (juce_wchar characterNeeded);

private:

	class GlyphInfo;
	friend class OwnedArray<GlyphInfo>;
	OwnedArray <GlyphInfo> glyphs;
	short lookupTable [128];

	GlyphInfo* findGlyph (const juce_wchar character, bool loadIfNeeded) noexcept;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (CustomTypeface);
};

#endif   // __JUCE_CUSTOMTYPEFACE_JUCEHEADER__

/*** End of inlined file: juce_CustomTypeface.h ***/


#endif
#ifndef __JUCE_FONT_JUCEHEADER__

#endif
#ifndef __JUCE_GLYPHARRANGEMENT_JUCEHEADER__

/*** Start of inlined file: juce_GlyphArrangement.h ***/
#ifndef __JUCE_GLYPHARRANGEMENT_JUCEHEADER__
#define __JUCE_GLYPHARRANGEMENT_JUCEHEADER__

/**
	A glyph from a particular font, with a particular size, style,
	typeface and position.

	You should rarely need to use this class directly - for most purposes, the
	GlyphArrangement class will do what you need for text layout.

	@see GlyphArrangement, Font
*/
class JUCE_API  PositionedGlyph
{
public:

	PositionedGlyph (const Font& font, juce_wchar character, int glyphNumber,
					 float anchorX, float baselineY, float width, bool isWhitespace);

	PositionedGlyph (const PositionedGlyph& other);
	PositionedGlyph& operator= (const PositionedGlyph& other);
	~PositionedGlyph();

	/** Returns the character the glyph represents. */
	juce_wchar getCharacter() const noexcept    { return character; }
	/** Checks whether the glyph is actually empty. */
	bool isWhitespace() const noexcept          { return whitespace; }

	/** Returns the position of the glyph's left-hand edge. */
	float getLeft() const noexcept              { return x; }
	/** Returns the position of the glyph's right-hand edge. */
	float getRight() const noexcept             { return x + w; }
	/** Returns the y position of the glyph's baseline. */
	float getBaselineY() const noexcept         { return y; }
	/** Returns the y position of the top of the glyph. */
	float getTop() const                        { return y - font.getAscent(); }
	/** Returns the y position of the bottom of the glyph. */
	float getBottom() const                     { return y + font.getDescent(); }
	/** Returns the bounds of the glyph. */
	Rectangle<float> getBounds() const          { return Rectangle<float> (x, getTop(), w, font.getHeight()); }

	/** Shifts the glyph's position by a relative amount. */
	void moveBy (float deltaX, float deltaY);

	/** Draws the glyph into a graphics context. */
	void draw (const Graphics& g) const;

	/** Draws the glyph into a graphics context, with an extra transform applied to it. */
	void draw (const Graphics& g, const AffineTransform& transform) const;

	/** Returns the path for this glyph.

		@param path     the glyph's outline will be appended to this path
	*/
	void createPath (Path& path) const;

	/** Checks to see if a point lies within this glyph. */
	bool hitTest (float x, float y) const;

private:

	friend class GlyphArrangement;
	Font font;
	juce_wchar character;
	int glyph;
	float x, y, w;
	bool whitespace;

	JUCE_LEAK_DETECTOR (PositionedGlyph);
};

/**
	A set of glyphs, each with a position.

	You can create a GlyphArrangement, text to it and then draw it onto a
	graphics context. It's used internally by the text methods in the
	Graphics class, but can be used directly if more control is needed.

	@see Font, PositionedGlyph
*/
class JUCE_API  GlyphArrangement
{
public:

	/** Creates an empty arrangement. */
	GlyphArrangement();

	/** Takes a copy of another arrangement. */
	GlyphArrangement (const GlyphArrangement& other);

	/** Copies another arrangement onto this one.
		To add another arrangement without clearing this one, use addGlyphArrangement().
	*/
	GlyphArrangement& operator= (const GlyphArrangement& other);

	/** Destructor. */
	~GlyphArrangement();

	/** Returns the total number of glyphs in the arrangement. */
	int getNumGlyphs() const noexcept                           { return glyphs.size(); }

	/** Returns one of the glyphs from the arrangement.

		@param index    the glyph's index, from 0 to (getNumGlyphs() - 1). Be
						careful not to pass an out-of-range index here, as it
						doesn't do any bounds-checking.
	*/
	PositionedGlyph& getGlyph (int index) const;

	/** Clears all text from the arrangement and resets it.
	*/
	void clear();

	/** Appends a line of text to the arrangement.

		This will add the text as a single line, where x is the left-hand edge of the
		first character, and y is the position for the text's baseline.

		If the text contains new-lines or carriage-returns, this will ignore them - use
		addJustifiedText() to add multi-line arrangements.
	*/
	void addLineOfText (const Font& font,
						const String& text,
						float x, float y);

	/** Adds a line of text, truncating it if it's wider than a specified size.

		This is the same as addLineOfText(), but if the line's width exceeds the value
		specified in maxWidthPixels, it will be truncated using either ellipsis (i.e. dots: "..."),
		if useEllipsis is true, or if this is false, it will just drop any subsequent characters.
	*/
	void addCurtailedLineOfText (const Font& font,
								 const String& text,
								 float x, float y,
								 float maxWidthPixels,
								 bool useEllipsis);

	/** Adds some multi-line text, breaking lines at word-boundaries if they are too wide.

		This will add text to the arrangement, breaking it into new lines either where there
		is a new-line or carriage-return character in the text, or where a line's width
		exceeds the value set in maxLineWidth.

		Each line that is added will be laid out using the flags set in horizontalLayout, so
		the lines can be left- or right-justified, or centred horizontally in the space
		between x and (x + maxLineWidth).

		The y co-ordinate is the position of the baseline of the first line of text - subsequent
		lines will be placed below it, separated by a distance of font.getHeight().
	*/
	void addJustifiedText (const Font& font,
						   const String& text,
						   float x, float y,
						   float maxLineWidth,
						   const Justification& horizontalLayout);

	/** Tries to fit some text withing a given space.

		This does its best to make the given text readable within the specified rectangle,
		so it useful for labelling things.

		If the text is too big, it'll be squashed horizontally or broken over multiple lines
		if the maximumLinesToUse value allows this. If the text just won't fit into the space,
		it'll cram as much as possible in there, and put some ellipsis at the end to show that
		it's been truncated.

		A Justification parameter lets you specify how the text is laid out within the rectangle,
		both horizontally and vertically.

		@see Graphics::drawFittedText
	*/
	void addFittedText (const Font& font,
						const String& text,
						float x, float y, float width, float height,
						const Justification& layout,
						int maximumLinesToUse,
						float minimumHorizontalScale = 0.7f);

	/** Appends another glyph arrangement to this one. */
	void addGlyphArrangement (const GlyphArrangement& other);

	/** Appends a custom glyph to the arrangement. */
	void addGlyph (const PositionedGlyph& glyph);

	/** Draws this glyph arrangement to a graphics context.

		This uses cached bitmaps so is much faster than the draw (Graphics&, const AffineTransform&)
		method, which renders the glyphs as filled vectors.
	*/
	void draw (const Graphics& g) const;

	/** Draws this glyph arrangement to a graphics context.

		This renders the paths as filled vectors, so is far slower than the draw (Graphics&)
		method for non-transformed arrangements.
	*/
	void draw (const Graphics& g, const AffineTransform& transform) const;

	/** Converts the set of glyphs into a path.

		@param path     the glyphs' outlines will be appended to this path
	*/
	void createPath (Path& path) const;

	/** Looks for a glyph that contains the given co-ordinate.

		@returns the index of the glyph, or -1 if none were found.
	*/
	int findGlyphIndexAt (float x, float y) const;

	/** Finds the smallest rectangle that will enclose a subset of the glyphs.

		@param startIndex               the first glyph to test
		@param numGlyphs                the number of glyphs to include; if this is < 0, all glyphs after
										startIndex will be included
		@param includeWhitespace        if true, the extent of any whitespace characters will also
										be taken into account
	*/
	Rectangle<float> getBoundingBox (int startIndex, int numGlyphs, bool includeWhitespace) const;

	/** Shifts a set of glyphs by a given amount.

		@param startIndex   the first glyph to transform
		@param numGlyphs    the number of glyphs to move; if this is < 0, all glyphs after
							startIndex will be used
		@param deltaX       the amount to add to their x-positions
		@param deltaY       the amount to add to their y-positions
	*/
	void moveRangeOfGlyphs (int startIndex, int numGlyphs,
							float deltaX, float deltaY);

	/** Removes a set of glyphs from the arrangement.

		@param startIndex   the first glyph to remove
		@param numGlyphs    the number of glyphs to remove; if this is < 0, all glyphs after
							startIndex will be deleted
	*/
	void removeRangeOfGlyphs (int startIndex, int numGlyphs);

	/** Expands or compresses a set of glyphs horizontally.

		@param startIndex               the first glyph to transform
		@param numGlyphs                the number of glyphs to stretch; if this is < 0, all glyphs after
										startIndex will be used
		@param horizontalScaleFactor    how much to scale their horizontal width by
	*/
	void stretchRangeOfGlyphs (int startIndex, int numGlyphs,
							   float horizontalScaleFactor);

	/** Justifies a set of glyphs within a given space.

		This moves the glyphs as a block so that the whole thing is located within the
		given rectangle with the specified layout.

		If the Justification::horizontallyJustified flag is specified, each line will
		be stretched out to fill the specified width.
	*/
	void justifyGlyphs (int startIndex, int numGlyphs,
						float x, float y, float width, float height,
						const Justification& justification);

private:

	OwnedArray <PositionedGlyph> glyphs;

	int insertEllipsis (const Font&, float maxXPos, int startIndex, int endIndex);
	int fitLineIntoSpace (int start, int numGlyphs, float x, float y, float w, float h, const Font&,
						  const Justification&, float minimumHorizontalScale);
	void spreadOutLine (int start, int numGlyphs, float targetWidth);

	JUCE_LEAK_DETECTOR (GlyphArrangement);
};

#endif   // __JUCE_GLYPHARRANGEMENT_JUCEHEADER__

/*** End of inlined file: juce_GlyphArrangement.h ***/


#endif
#ifndef __JUCE_TEXTLAYOUT_JUCEHEADER__

/*** Start of inlined file: juce_TextLayout.h ***/
#ifndef __JUCE_TEXTLAYOUT_JUCEHEADER__
#define __JUCE_TEXTLAYOUT_JUCEHEADER__

class Graphics;

/**
	A Pre-formatted piece of text, which may contain multiple fonts and colours.

	A TextLayout is created from an AttributedString, and once created can be
	quickly drawn into a Graphics context.

	@see AttributedString
*/
class JUCE_API  TextLayout
{
public:
	/** Creates an empty layout.
		Having created a TextLayout, you can populate it using createLayout() or
		createLayoutWithBalancedLineLengths().
	*/
	TextLayout();
	TextLayout (const TextLayout&);
	TextLayout& operator= (const TextLayout&);
   #if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
	TextLayout (TextLayout&& other) noexcept;
	TextLayout& operator= (TextLayout&&) noexcept;
   #endif

	/** Destructor. */
	~TextLayout();

	/** Creates a layout from the given attributed string.
		This will replace any data that is currently stored in the layout.
	*/
	void createLayout (const AttributedString& text, float maxWidth);

	/** Creates a layout, attempting to choose a width which results in lines
		of a similar length.

		This will be slower than the normal createLayout method, but produces a
		tidier result.
	*/
	void createLayoutWithBalancedLineLengths (const AttributedString& text, float maxWidth);

	/** Draws the layout within the specified area.
		The position of the text within the rectangle is controlled by the justification
		flags set in the original AttributedString that was used to create this layout.
	*/
	void draw (Graphics& g, const Rectangle<float>& area) const;

	/** A positioned glyph. */
	class JUCE_API  Glyph
	{
	public:
		Glyph (int glyphCode, const Point<float>& anchor, float width) noexcept;
		Glyph (const Glyph&) noexcept;
		Glyph& operator= (const Glyph&) noexcept;
		~Glyph() noexcept;

		/** The code number of this glyph. */
		int glyphCode;

		/** The glyph's anchor point - this is relative to the line's origin.
			@see TextLayout::Line::lineOrigin
		*/
		Point<float> anchor;

		float width;

	private:
		JUCE_LEAK_DETECTOR (Glyph);
	};

	/** A sequence of glyphs with a common font and colour. */
	class JUCE_API  Run
	{
	public:
		Run() noexcept;
		Run (const Run&);
		Run (const Range<int>& stringRange, int numGlyphsToPreallocate);
		~Run() noexcept;

		Font font;              /**< The run's font. */
		Colour colour;          /**< The run's colour. */
		Array<Glyph> glyphs;    /**< The glyphs in this run. */
		Range<int> stringRange; /**< The character range that this run represents in the
									 original string that was used to create it. */
	private:
		Run& operator= (const Run&);
		JUCE_LEAK_DETECTOR (Run);
	};

	/** A line containing a sequence of glyph-runs. */
	class JUCE_API  Line
	{
	public:
		Line() noexcept;
		Line (const Line&);
		Line (const Range<int>& stringRange, const Point<float>& lineOrigin,
			  float ascent, float descent, float leading, int numRunsToPreallocate);
		~Line() noexcept;

		/** Returns the X position range which contains all the glyphs in this line. */
		Range<float> getLineBoundsX() const noexcept;

		OwnedArray<Run> runs;           /**< The glyph-runs in this line. */
		Range<int> stringRange;         /**< The character range that this line represents in the
											 original string that was used to create it. */
		Point<float> lineOrigin;        /**< The line's baseline origin. */
		float ascent, descent, leading;

	private:
		Line& operator= (const Line&);
		JUCE_LEAK_DETECTOR (Line);
	};

	/** Returns the maximum width of the content. */
	float getWidth() const noexcept     { return width; }

	/** Returns the maximum height of the content. */
	float getHeight() const noexcept;

	/** Returns the number of lines in the layout. */
	int getNumLines() const noexcept    { return lines.size(); }

	/** Returns one of the lines. */
	Line& getLine (int index) const;

	/** Adds a line to the layout. The layout will take ownership of this line object
		and will delete it when it is no longer needed. */
	void addLine (Line* line);

	/** Pre-allocates space for the specified number of lines. */
	void ensureStorageAllocated (int numLinesNeeded);

private:
	OwnedArray<Line> lines;
	float width;
	Justification justification;

	void createStandardLayout (const AttributedString&);
	bool createNativeLayout (const AttributedString&);
	void recalculateWidth();

	JUCE_LEAK_DETECTOR (TextLayout);
};

#endif   // __JUCE_TEXTLAYOUT_JUCEHEADER__

/*** End of inlined file: juce_TextLayout.h ***/


#endif
#ifndef __JUCE_TYPEFACE_JUCEHEADER__

#endif
#ifndef __JUCE_DROPSHADOWEFFECT_JUCEHEADER__

/*** Start of inlined file: juce_DropShadowEffect.h ***/
#ifndef __JUCE_DROPSHADOWEFFECT_JUCEHEADER__
#define __JUCE_DROPSHADOWEFFECT_JUCEHEADER__


/*** Start of inlined file: juce_ImageEffectFilter.h ***/
#ifndef __JUCE_IMAGEEFFECTFILTER_JUCEHEADER__
#define __JUCE_IMAGEEFFECTFILTER_JUCEHEADER__

/**
	A graphical effect filter that can be applied to components.

	An ImageEffectFilter can be applied to the image that a component
	paints before it hits the screen.

	This is used for adding effects like shadows, blurs, etc.

	@see Component::setComponentEffect
*/
class JUCE_API  ImageEffectFilter
{
public:

	/** Overridden to render the effect.

		The implementation of this method must use the image that is passed in
		as its source, and should render its output to the graphics context passed in.

		@param sourceImage      the image that the source component has just rendered with
								its paint() method. The image may or may not have an alpha
								channel, depending on whether the component is opaque.
		@param destContext      the graphics context to use to draw the resultant image.
		@param alpha            the alpha with which to draw the resultant image to the
								target context
	*/
	virtual void applyEffect (Image& sourceImage,
							  Graphics& destContext,
							  float alpha) = 0;

	/** Destructor. */
	virtual ~ImageEffectFilter() {}

};

#endif   // __JUCE_IMAGEEFFECTFILTER_JUCEHEADER__

/*** End of inlined file: juce_ImageEffectFilter.h ***/

/**
	An effect filter that adds a drop-shadow behind the image's content.

	(This will only work on images/components that aren't opaque, of course).

	When added to a component, this effect will draw a soft-edged
	shadow based on what gets drawn inside it. The shadow will also
	be applied to the component's children.

	For speed, this doesn't use a proper gaussian blur, but cheats by
	using a simple bilinear filter. If you need a really high-quality
	shadow, check out ImageConvolutionKernel::createGaussianBlur()

	@see Component::setComponentEffect
*/
class JUCE_API  DropShadowEffect  : public ImageEffectFilter
{
public:

	/** Creates a default drop-shadow effect.

		To customise the shadow's appearance, use the setShadowProperties()
		method.
	*/
	DropShadowEffect();

	/** Destructor. */
	~DropShadowEffect();

	/** Sets up parameters affecting the shadow's appearance.

		@param newRadius        the (approximate) radius of the blur used
		@param newOpacity       the opacity with which the shadow is rendered
		@param newShadowOffsetX allows the shadow to be shifted in relation to the
								component's contents
		@param newShadowOffsetY allows the shadow to be shifted in relation to the
								component's contents
	*/
	void setShadowProperties (float newRadius,
							  float newOpacity,
							  int newShadowOffsetX,
							  int newShadowOffsetY);

	/** @internal */
	void applyEffect (Image& sourceImage, Graphics& destContext, float alpha);

private:

	int offsetX, offsetY;
	float radius, opacity;

	JUCE_LEAK_DETECTOR (DropShadowEffect);
};

#endif   // __JUCE_DROPSHADOWEFFECT_JUCEHEADER__

/*** End of inlined file: juce_DropShadowEffect.h ***/


#endif
#ifndef __JUCE_GLOWEFFECT_JUCEHEADER__

/*** Start of inlined file: juce_GlowEffect.h ***/
#ifndef __JUCE_GLOWEFFECT_JUCEHEADER__
#define __JUCE_GLOWEFFECT_JUCEHEADER__

/**
	A component effect that adds a coloured blur around the component's contents.

	(This will only work on non-opaque components).

	@see Component::setComponentEffect, DropShadowEffect
*/
class JUCE_API  GlowEffect  : public ImageEffectFilter
{
public:

	/** Creates a default 'glow' effect.

		To customise its appearance, use the setGlowProperties() method.
	*/
	GlowEffect();

	/** Destructor. */
	~GlowEffect();

	/** Sets the glow's radius and colour.

		The radius is how large the blur should be, and the colour is
		used to render it (for a less intense glow, lower the colour's
		opacity).
	*/
	void setGlowProperties (float newRadius,
							const Colour& newColour);

	/** @internal */
	void applyEffect (Image& sourceImage, Graphics& destContext, float alpha);

private:

	float radius;
	Colour colour;

	JUCE_LEAK_DETECTOR (GlowEffect);
};

#endif   // __JUCE_GLOWEFFECT_JUCEHEADER__

/*** End of inlined file: juce_GlowEffect.h ***/


#endif
#ifndef __JUCE_IMAGEEFFECTFILTER_JUCEHEADER__

#endif
// END_AUTOINCLUDE

}

#endif   // __JUCE_GRAPHICS_JUCEHEADER__

/*** End of inlined file: juce_graphics.h ***/

#if JUCE_MAC
 #import <QuartzCore/QuartzCore.h>

#elif JUCE_WINDOWS
 #if JUCE_USE_DIRECTWRITE
  /* If you hit a compile error trying to include these files, you may need to update
	 your version of the Windows SDK to the latest one. The DirectWrite and Direct2D
	 headers are in the version 7 SDKs.
  */
  #include <d2d1.h>
  #include <dwrite.h>
 #endif

#elif JUCE_IOS
 #import <QuartzCore/QuartzCore.h>
 #import <CoreText/CoreText.h>

#elif JUCE_LINUX
 #include <ft2build.h>
 #include FT_FREETYPE_H
 #undef SIZEOF
#endif

namespace juce
{

// START_AUTOINCLUDE colour/*.cpp, geometry/*.cpp, placement/*.cpp, contexts/*.cpp, images/*.cpp,
// image_formats/*.cpp, fonts/*.cpp, effects/*.cpp

/*** Start of inlined file: juce_Colour.cpp ***/
namespace ColourHelpers
{
	uint8 floatToUInt8 (const float n) noexcept
	{
		return n <= 0.0f ? 0 : (n >= 1.0f ? 255 : (uint8) (n * 255.0f));
	}

	// This is an adjusted brightness value, based on the way the human
	// eye responds to different colour channels..
	float getPerceivedBrightness (float r, float g, float b) noexcept
	{
		return std::sqrt (r * r * 0.241f
						   + g * g * 0.691f
						   + b * b * 0.068f);
	}
}

struct HSB
{
	HSB (const Colour& col) noexcept
	{
		const int r = col.getRed();
		const int g = col.getGreen();
		const int b = col.getBlue();

		const int hi = jmax (r, g, b);
		const int lo = jmin (r, g, b);

		if (hi != 0)
		{
			saturation = (hi - lo) / (float) hi;

			if (saturation > 0)
			{
				const float invDiff = 1.0f / (hi - lo);

				const float red   = (hi - r) * invDiff;
				const float green = (hi - g) * invDiff;
				const float blue  = (hi - b) * invDiff;

				if (r == hi)
					hue = blue - green;
				else if (g == hi)
					hue = 2.0f + red - blue;
				else
					hue = 4.0f + green - red;

				hue *= 1.0f / 6.0f;

				if (hue < 0)
					++hue;
			}
			else
			{
				hue = 0;
			}
		}
		else
		{
			saturation = hue = 0;
		}

		brightness = hi / 255.0f;
	}

	Colour toColour (const Colour& original) const noexcept
	{
		return Colour (hue, saturation, brightness, original.getAlpha());
	}

	static PixelARGB toRGB (float h, float s, float v, const uint8 alpha) noexcept
	{
		v = jlimit (0.0f, 255.0f, v * 255.0f);
		const uint8 intV = (uint8) roundToInt (v);

		if (s <= 0)
			return PixelARGB (alpha, intV, intV, intV);

		s = jmin (1.0f, s);
		h = (h - std::floor (h)) * 6.0f + 0.00001f; // need a small adjustment to compensate for rounding errors
		const float f = h - std::floor (h);
		const uint8 x = (uint8) roundToInt (v * (1.0f - s));

		if (h < 1.0f)   return PixelARGB (alpha, intV,    (uint8) roundToInt (v * (1.0f - (s * (1.0f - f)))), x);
		if (h < 2.0f)   return PixelARGB (alpha,          (uint8) roundToInt (v * (1.0f - s * f)), intV, x);
		if (h < 3.0f)   return PixelARGB (alpha, x, intV, (uint8) roundToInt (v * (1.0f - (s * (1.0f - f)))));
		if (h < 4.0f)   return PixelARGB (alpha, x,       (uint8) roundToInt (v * (1.0f - s * f)), intV);
		if (h < 5.0f)   return PixelARGB (alpha,          (uint8) roundToInt (v * (1.0f - (s * (1.0f - f)))), x, intV);
		else            return PixelARGB (alpha, intV, x, (uint8) roundToInt (v * (1.0f - s * f)));
	}

	float hue, saturation, brightness;
};

Colour::Colour() noexcept
	: argb (0)
{
}

Colour::Colour (const Colour& other) noexcept
	: argb (other.argb)
{
}

Colour& Colour::operator= (const Colour& other) noexcept
{
	argb = other.argb;
	return *this;
}

bool Colour::operator== (const Colour& other) const noexcept    { return argb.getARGB() == other.argb.getARGB(); }
bool Colour::operator!= (const Colour& other) const noexcept    { return argb.getARGB() != other.argb.getARGB(); }

Colour::Colour (const uint32 argb_) noexcept
	: argb (argb_)
{
}

Colour::Colour (const uint8 red, const uint8 green, const uint8 blue) noexcept
{
	argb.setARGB (0xff, red, green, blue);
}

Colour Colour::fromRGB (const uint8 red, const uint8 green, const uint8 blue) noexcept
{
	return Colour (red, green, blue);
}

Colour::Colour (const uint8 red, const uint8 green, const uint8 blue, const uint8 alpha) noexcept
{
	argb.setARGB (alpha, red, green, blue);
}

Colour Colour::fromRGBA (const uint8 red, const uint8 green, const uint8 blue, const uint8 alpha) noexcept
{
	return Colour (red, green, blue, alpha);
}

Colour::Colour (const uint8 red, const uint8 green, const uint8 blue, const float alpha) noexcept
{
	argb.setARGB (ColourHelpers::floatToUInt8 (alpha), red, green, blue);
}

Colour Colour::fromFloatRGBA (const float red, const float green, const float blue, const float alpha) noexcept
{
	return Colour (ColourHelpers::floatToUInt8 (red), ColourHelpers::floatToUInt8 (green), ColourHelpers::floatToUInt8 (blue), alpha);
}

Colour::Colour (const float hue, const float saturation, const float brightness, const float alpha) noexcept
	: argb (HSB::toRGB (hue, saturation, brightness, ColourHelpers::floatToUInt8 (alpha)))
{
}

Colour Colour::fromHSV (const float hue, const float saturation, const float brightness, const float alpha) noexcept
{
	return Colour (hue, saturation, brightness, alpha);
}

Colour::Colour (const float hue, const float saturation, const float brightness, const uint8 alpha) noexcept
	: argb (HSB::toRGB (hue, saturation, brightness, alpha))
{
}

Colour::~Colour() noexcept
{
}

const PixelARGB Colour::getPixelARGB() const noexcept
{
	PixelARGB p (argb);
	p.premultiply();
	return p;
}

uint32 Colour::getARGB() const noexcept
{
	return argb.getARGB();
}

bool Colour::isTransparent() const noexcept
{
	return getAlpha() == 0;
}

bool Colour::isOpaque() const noexcept
{
	return getAlpha() == 0xff;
}

Colour Colour::withAlpha (const uint8 newAlpha) const noexcept
{
	PixelARGB newCol (argb);
	newCol.setAlpha (newAlpha);
	return Colour (newCol.getARGB());
}

Colour Colour::withAlpha (const float newAlpha) const noexcept
{
	jassert (newAlpha >= 0 && newAlpha <= 1.0f);

	PixelARGB newCol (argb);
	newCol.setAlpha (ColourHelpers::floatToUInt8 (newAlpha));
	return Colour (newCol.getARGB());
}

Colour Colour::withMultipliedAlpha (const float alphaMultiplier) const noexcept
{
	jassert (alphaMultiplier >= 0);

	PixelARGB newCol (argb);
	newCol.setAlpha ((uint8) jmin (0xff, roundToInt (alphaMultiplier * newCol.getAlpha())));
	return Colour (newCol.getARGB());
}

Colour Colour::overlaidWith (const Colour& src) const noexcept
{
	const int destAlpha = getAlpha();

	if (destAlpha <= 0)
		return src;

	const int invA = 0xff - (int) src.getAlpha();
	const int resA = 0xff - (((0xff - destAlpha) * invA) >> 8);

	if (resA <= 0)
		return *this;

	const int da = (invA * destAlpha) / resA;

	return Colour ((uint8) (src.getRed()   + ((((int) getRed()   - src.getRed())   * da) >> 8)),
				   (uint8) (src.getGreen() + ((((int) getGreen() - src.getGreen()) * da) >> 8)),
				   (uint8) (src.getBlue()  + ((((int) getBlue()  - src.getBlue())  * da) >> 8)),
				   (uint8) resA);
}

Colour Colour::interpolatedWith (const Colour& other, float proportionOfOther) const noexcept
{
	if (proportionOfOther <= 0)
		return *this;

	if (proportionOfOther >= 1.0f)
		return other;

	PixelARGB c1 (getPixelARGB());
	const PixelARGB c2 (other.getPixelARGB());
	c1.tween (c2, (uint32) roundToInt (proportionOfOther * 255.0f));
	c1.unpremultiply();

	return Colour (c1.getARGB());
}

float Colour::getFloatRed() const noexcept      { return getRed()   / 255.0f; }
float Colour::getFloatGreen() const noexcept    { return getGreen() / 255.0f; }
float Colour::getFloatBlue() const noexcept     { return getBlue()  / 255.0f; }
float Colour::getFloatAlpha() const noexcept    { return getAlpha() / 255.0f; }

void Colour::getHSB (float& h, float& s, float& v) const noexcept
{
	const HSB hsb (*this);
	h = hsb.hue;
	s = hsb.saturation;
	v = hsb.brightness;
}

float Colour::getHue() const noexcept           { return HSB (*this).hue; }
float Colour::getSaturation() const noexcept    { return HSB (*this).saturation; }
float Colour::getBrightness() const noexcept    { return HSB (*this).brightness; }

Colour Colour::withHue (float h) const noexcept          { HSB hsb (*this); hsb.hue = h;        return hsb.toColour (*this); }
Colour Colour::withSaturation (float s) const noexcept   { HSB hsb (*this); hsb.saturation = s; return hsb.toColour (*this); }
Colour Colour::withBrightness (float v) const noexcept   { HSB hsb (*this); hsb.brightness = v; return hsb.toColour (*this); }

Colour Colour::withRotatedHue (const float amountToRotate) const noexcept
{
	HSB hsb (*this);
	hsb.hue += amountToRotate;
	return hsb.toColour (*this);
}

Colour Colour::withMultipliedSaturation (const float amount) const noexcept
{
	HSB hsb (*this);
	hsb.saturation = jmin (1.0f, hsb.saturation * amount);
	return hsb.toColour (*this);
}

Colour Colour::withMultipliedBrightness (const float amount) const noexcept
{
	HSB hsb (*this);
	hsb.brightness = jmin (1.0f, hsb.brightness * amount);
	return hsb.toColour (*this);
}

Colour Colour::brighter (float amount) const noexcept
{
	amount = 1.0f / (1.0f + amount);

	return Colour ((uint8) (255 - (amount * (255 - getRed()))),
				   (uint8) (255 - (amount * (255 - getGreen()))),
				   (uint8) (255 - (amount * (255 - getBlue()))),
				   getAlpha());
}

Colour Colour::darker (float amount) const noexcept
{
	amount = 1.0f / (1.0f + amount);

	return Colour ((uint8) (amount * getRed()),
				   (uint8) (amount * getGreen()),
				   (uint8) (amount * getBlue()),
				   getAlpha());
}

Colour Colour::greyLevel (const float brightness) noexcept
{
	const uint8 level = ColourHelpers::floatToUInt8 (brightness);
	return Colour (level, level, level);
}

Colour Colour::contrasting (const float amount) const noexcept
{
   return overlaidWith ((ColourHelpers::getPerceivedBrightness (getFloatRed(), getFloatGreen(), getFloatBlue()) >= 0.5f
							? Colours::black
							: Colours::white).withAlpha (amount));
}

Colour Colour::contrasting (const Colour& colour1,
							const Colour& colour2) noexcept
{
	const float b1 = colour1.getBrightness();
	const float b2 = colour2.getBrightness();
	float best = 0.0f;
	float bestDist = 0.0f;

	for (float i = 0.0f; i < 1.0f; i += 0.02f)
	{
		const float d1 = std::abs (i - b1);
		const float d2 = std::abs (i - b2);
		const float dist = jmin (d1, d2, 1.0f - d1, 1.0f - d2);

		if (dist > bestDist)
		{
			best = i;
			bestDist = dist;
		}
	}

	return colour1.overlaidWith (colour2.withMultipliedAlpha (0.5f))
				  .withBrightness (best);
}

String Colour::toString() const
{
	return String::toHexString ((int) argb.getARGB());
}

Colour Colour::fromString (const String& encodedColourString)
{
	return Colour ((uint32) encodedColourString.getHexValue32());
}

String Colour::toDisplayString (const bool includeAlphaValue) const
{
	return String::toHexString ((int) (argb.getARGB() & (includeAlphaValue ? 0xffffffff : 0xffffff)))
				  .paddedLeft ('0', includeAlphaValue ? 8 : 6)
				  .toUpperCase();
}

/*** End of inlined file: juce_Colour.cpp ***/



/*** Start of inlined file: juce_ColourGradient.cpp ***/
ColourGradient::ColourGradient() noexcept
{
   #if JUCE_DEBUG
	point1.setX (987654.0f);
	#define JUCE_COLOURGRADIENT_CHECK_COORDS_INITIALISED   jassert (point1.x != 987654.0f);
   #else
	#define JUCE_COLOURGRADIENT_CHECK_COORDS_INITIALISED
   #endif
}

ColourGradient::ColourGradient (const Colour& colour1, const float x1_, const float y1_,
								const Colour& colour2, const float x2_, const float y2_,
								const bool isRadial_)
	: point1 (x1_, y1_),
	  point2 (x2_, y2_),
	  isRadial (isRadial_)
{
	colours.add (ColourPoint (0.0, colour1));
	colours.add (ColourPoint (1.0, colour2));
}

ColourGradient::~ColourGradient()
{
}

bool ColourGradient::operator== (const ColourGradient& other) const noexcept
{
	return point1 == other.point1 && point2 == other.point2
			&& isRadial == other.isRadial
			&& colours == other.colours;
}

bool ColourGradient::operator!= (const ColourGradient& other) const noexcept
{
	return ! operator== (other);
}

void ColourGradient::clearColours()
{
	colours.clear();
}

int ColourGradient::addColour (const double proportionAlongGradient, const Colour& colour)
{
	// must be within the two end-points
	jassert (proportionAlongGradient >= 0 && proportionAlongGradient <= 1.0);

	const double pos = jlimit (0.0, 1.0, proportionAlongGradient);

	int i;
	for (i = 0; i < colours.size(); ++i)
		if (colours.getReference(i).position > pos)
			break;

	colours.insert (i, ColourPoint (pos, colour));
	return i;
}

void ColourGradient::removeColour (int index)
{
	jassert (index > 0 && index < colours.size() - 1);
	colours.remove (index);
}

void ColourGradient::multiplyOpacity (const float multiplier) noexcept
{
	for (int i = 0; i < colours.size(); ++i)
	{
		Colour& c = colours.getReference(i).colour;
		c = c.withMultipliedAlpha (multiplier);
	}
}

int ColourGradient::getNumColours() const noexcept
{
	return colours.size();
}

double ColourGradient::getColourPosition (const int index) const noexcept
{
	if (isPositiveAndBelow (index, colours.size()))
		return colours.getReference (index).position;

	return 0;
 }

Colour ColourGradient::getColour (const int index) const noexcept
{
	if (isPositiveAndBelow (index, colours.size()))
		return colours.getReference (index).colour;

	return Colour();
}

void ColourGradient::setColour (int index, const Colour& newColour) noexcept
{
	if (isPositiveAndBelow (index, colours.size()))
		colours.getReference (index).colour = newColour;
}

Colour ColourGradient::getColourAtPosition (const double position) const noexcept
{
	jassert (colours.getReference(0).position == 0); // the first colour specified has to go at position 0

	if (position <= 0 || colours.size() <= 1)
		return colours.getReference(0).colour;

	int i = colours.size() - 1;
	while (position < colours.getReference(i).position)
		--i;

	const ColourPoint& p1 = colours.getReference (i);

	if (i >= colours.size() - 1)
		return p1.colour;

	const ColourPoint& p2 = colours.getReference (i + 1);

	return p1.colour.interpolatedWith (p2.colour, (float) ((position - p1.position) / (p2.position - p1.position)));
}

void ColourGradient::createLookupTable (PixelARGB* const lookupTable, const int numEntries) const noexcept
{
	JUCE_COLOURGRADIENT_CHECK_COORDS_INITIALISED // Trying to use this object without setting its co-ordinates?
	jassert (colours.size() >= 2);
	jassert (numEntries > 0);
	jassert (colours.getReference(0).position == 0); // The first colour specified has to go at position 0

	PixelARGB pix1 (colours.getReference (0).colour.getPixelARGB());
	int index = 0;

	for (int j = 1; j < colours.size(); ++j)
	{
		const ColourPoint& p = colours.getReference (j);
		const int numToDo = roundToInt (p.position * (numEntries - 1)) - index;
		const PixelARGB pix2 (p.colour.getPixelARGB());

		for (int i = 0; i < numToDo; ++i)
		{
			jassert (index >= 0 && index < numEntries);

			lookupTable[index] = pix1;
			lookupTable[index].tween (pix2, (uint32) (i << 8) / numToDo);
			++index;
		}

		pix1 = pix2;
	}

	while (index < numEntries)
		lookupTable [index++] = pix1;
}

int ColourGradient::createLookupTable (const AffineTransform& transform, HeapBlock <PixelARGB>& lookupTable) const
{
	JUCE_COLOURGRADIENT_CHECK_COORDS_INITIALISED // Trying to use this object without setting its co-ordinates?
	jassert (colours.size() >= 2);

	const int numEntries = jlimit (1, jmax (1, (colours.size() - 1) << 8),
								   3 * (int) point1.transformedBy (transform)
												.getDistanceFrom (point2.transformedBy (transform)));
	lookupTable.malloc ((size_t) numEntries);
	createLookupTable (lookupTable, numEntries);
	return numEntries;
}

bool ColourGradient::isOpaque() const noexcept
{
	for (int i = 0; i < colours.size(); ++i)
		if (! colours.getReference(i).colour.isOpaque())
			return false;

	return true;
}

bool ColourGradient::isInvisible() const noexcept
{
	for (int i = 0; i < colours.size(); ++i)
		if (! colours.getReference(i).colour.isTransparent())
			return false;

	return true;
}

bool ColourGradient::ColourPoint::operator== (const ColourPoint& other) const noexcept
{
	return position == other.position && colour == other.colour;
}

bool ColourGradient::ColourPoint::operator!= (const ColourPoint& other) const noexcept
{
	return position != other.position || colour != other.colour;
}

/*** End of inlined file: juce_ColourGradient.cpp ***/


/*** Start of inlined file: juce_Colours.cpp ***/
const Colour Colours::transparentBlack (0);
const Colour Colours::transparentWhite (0x00ffffff);

const Colour Colours::aliceblue (0xfff0f8ff);
const Colour Colours::antiquewhite (0xfffaebd7);
const Colour Colours::aqua (0xff00ffff);
const Colour Colours::aquamarine (0xff7fffd4);
const Colour Colours::azure (0xfff0ffff);
const Colour Colours::beige (0xfff5f5dc);
const Colour Colours::bisque (0xffffe4c4);
const Colour Colours::black (0xff000000);
const Colour Colours::blanchedalmond (0xffffebcd);
const Colour Colours::blue (0xff0000ff);
const Colour Colours::blueviolet (0xff8a2be2);
const Colour Colours::brown (0xffa52a2a);
const Colour Colours::burlywood (0xffdeb887);
const Colour Colours::cadetblue (0xff5f9ea0);
const Colour Colours::chartreuse (0xff7fff00);
const Colour Colours::chocolate (0xffd2691e);
const Colour Colours::coral (0xffff7f50);
const Colour Colours::cornflowerblue (0xff6495ed);
const Colour Colours::cornsilk (0xfffff8dc);
const Colour Colours::crimson (0xffdc143c);
const Colour Colours::cyan (0xff00ffff);
const Colour Colours::darkblue (0xff00008b);
const Colour Colours::darkcyan (0xff008b8b);
const Colour Colours::darkgoldenrod (0xffb8860b);
const Colour Colours::darkgrey (0xff555555);
const Colour Colours::darkgreen (0xff006400);
const Colour Colours::darkkhaki (0xffbdb76b);
const Colour Colours::darkmagenta (0xff8b008b);
const Colour Colours::darkolivegreen (0xff556b2f);
const Colour Colours::darkorange (0xffff8c00);
const Colour Colours::darkorchid (0xff9932cc);
const Colour Colours::darkred (0xff8b0000);
const Colour Colours::darksalmon (0xffe9967a);
const Colour Colours::darkseagreen (0xff8fbc8f);
const Colour Colours::darkslateblue (0xff483d8b);
const Colour Colours::darkslategrey (0xff2f4f4f);
const Colour Colours::darkturquoise (0xff00ced1);
const Colour Colours::darkviolet (0xff9400d3);
const Colour Colours::deeppink (0xffff1493);
const Colour Colours::deepskyblue (0xff00bfff);
const Colour Colours::dimgrey (0xff696969);
const Colour Colours::dodgerblue (0xff1e90ff);
const Colour Colours::firebrick (0xffb22222);
const Colour Colours::floralwhite (0xfffffaf0);
const Colour Colours::forestgreen (0xff228b22);
const Colour Colours::fuchsia (0xffff00ff);
const Colour Colours::gainsboro (0xffdcdcdc);
const Colour Colours::gold (0xffffd700);
const Colour Colours::goldenrod (0xffdaa520);
const Colour Colours::grey (0xff808080);
const Colour Colours::green (0xff008000);
const Colour Colours::greenyellow (0xffadff2f);
const Colour Colours::honeydew (0xfff0fff0);
const Colour Colours::hotpink (0xffff69b4);
const Colour Colours::indianred (0xffcd5c5c);
const Colour Colours::indigo (0xff4b0082);
const Colour Colours::ivory (0xfffffff0);
const Colour Colours::khaki (0xfff0e68c);
const Colour Colours::lavender (0xffe6e6fa);
const Colour Colours::lavenderblush (0xfffff0f5);
const Colour Colours::lemonchiffon (0xfffffacd);
const Colour Colours::lightblue (0xffadd8e6);
const Colour Colours::lightcoral (0xfff08080);
const Colour Colours::lightcyan (0xffe0ffff);
const Colour Colours::lightgoldenrodyellow (0xfffafad2);
const Colour Colours::lightgreen (0xff90ee90);
const Colour Colours::lightgrey (0xffd3d3d3);
const Colour Colours::lightpink (0xffffb6c1);
const Colour Colours::lightsalmon (0xffffa07a);
const Colour Colours::lightseagreen (0xff20b2aa);
const Colour Colours::lightskyblue (0xff87cefa);
const Colour Colours::lightslategrey (0xff778899);
const Colour Colours::lightsteelblue (0xffb0c4de);
const Colour Colours::lightyellow (0xffffffe0);
const Colour Colours::lime (0xff00ff00);
const Colour Colours::limegreen (0xff32cd32);
const Colour Colours::linen (0xfffaf0e6);
const Colour Colours::magenta (0xffff00ff);
const Colour Colours::maroon (0xff800000);
const Colour Colours::mediumaquamarine (0xff66cdaa);
const Colour Colours::mediumblue (0xff0000cd);
const Colour Colours::mediumorchid (0xffba55d3);
const Colour Colours::mediumpurple (0xff9370db);
const Colour Colours::mediumseagreen (0xff3cb371);
const Colour Colours::mediumslateblue (0xff7b68ee);
const Colour Colours::mediumspringgreen (0xff00fa9a);
const Colour Colours::mediumturquoise (0xff48d1cc);
const Colour Colours::mediumvioletred (0xffc71585);
const Colour Colours::midnightblue (0xff191970);
const Colour Colours::mintcream (0xfff5fffa);
const Colour Colours::mistyrose (0xffffe4e1);
const Colour Colours::navajowhite (0xffffdead);
const Colour Colours::navy (0xff000080);
const Colour Colours::oldlace (0xfffdf5e6);
const Colour Colours::olive (0xff808000);
const Colour Colours::olivedrab (0xff6b8e23);
const Colour Colours::orange (0xffffa500);
const Colour Colours::orangered (0xffff4500);
const Colour Colours::orchid (0xffda70d6);
const Colour Colours::palegoldenrod (0xffeee8aa);
const Colour Colours::palegreen (0xff98fb98);
const Colour Colours::paleturquoise (0xffafeeee);
const Colour Colours::palevioletred (0xffdb7093);
const Colour Colours::papayawhip (0xffffefd5);
const Colour Colours::peachpuff (0xffffdab9);
const Colour Colours::peru (0xffcd853f);
const Colour Colours::pink (0xffffc0cb);
const Colour Colours::plum (0xffdda0dd);
const Colour Colours::powderblue (0xffb0e0e6);
const Colour Colours::purple (0xff800080);
const Colour Colours::red (0xffff0000);
const Colour Colours::rosybrown (0xffbc8f8f);
const Colour Colours::royalblue (0xff4169e1);
const Colour Colours::saddlebrown (0xff8b4513);
const Colour Colours::salmon (0xfffa8072);
const Colour Colours::sandybrown (0xfff4a460);
const Colour Colours::seagreen (0xff2e8b57);
const Colour Colours::seashell (0xfffff5ee);
const Colour Colours::sienna (0xffa0522d);
const Colour Colours::silver (0xffc0c0c0);
const Colour Colours::skyblue (0xff87ceeb);
const Colour Colours::slateblue (0xff6a5acd);
const Colour Colours::slategrey (0xff708090);
const Colour Colours::snow (0xfffffafa);
const Colour Colours::springgreen (0xff00ff7f);
const Colour Colours::steelblue (0xff4682b4);
const Colour Colours::tan (0xffd2b48c);
const Colour Colours::teal (0xff008080);
const Colour Colours::thistle (0xffd8bfd8);
const Colour Colours::tomato (0xffff6347);
const Colour Colours::turquoise (0xff40e0d0);
const Colour Colours::violet (0xffee82ee);
const Colour Colours::wheat (0xfff5deb3);
const Colour Colours::white (0xffffffff);
const Colour Colours::whitesmoke (0xfff5f5f5);
const Colour Colours::yellow (0xffffff00);
const Colour Colours::yellowgreen (0xff9acd32);

Colour Colours::findColourForName (const String& colourName,
								   const Colour& defaultColour)
{
	static const uint32 presets[] =
	{
		// (first value is the string's hashcode, second is ARGB)

		0x05978fff, 0xff000000, /* black */
		0x06bdcc29, 0xffffffff, /* white */
		0x002e305a, 0xff0000ff, /* blue */
		0x00308adf, 0xff808080, /* grey */
		0x05e0cf03, 0xff008000, /* green */
		0x0001b891, 0xffff0000, /* red */
		0xd43c6474, 0xffffff00, /* yellow */
		0x620886da, 0xfff0f8ff, /* aliceblue */
		0x20a2676a, 0xfffaebd7, /* antiquewhite */
		0x002dcebc, 0xff00ffff, /* aqua */
		0x46bb5f7e, 0xff7fffd4, /* aquamarine */
		0x0590228f, 0xfff0ffff, /* azure */
		0x05947fe4, 0xfff5f5dc, /* beige */
		0xad388e35, 0xffffe4c4, /* bisque */
		0x00674f7e, 0xffffebcd, /* blanchedalmond */
		0x39129959, 0xff8a2be2, /* blueviolet */
		0x059a8136, 0xffa52a2a, /* brown */
		0x89cea8f9, 0xffdeb887, /* burlywood */
		0x0fa260cf, 0xff5f9ea0, /* cadetblue */
		0x6b748956, 0xff7fff00, /* chartreuse */
		0x2903623c, 0xffd2691e, /* chocolate */
		0x05a74431, 0xffff7f50, /* coral */
		0x618d42dd, 0xff6495ed, /* cornflowerblue */
		0xe4b479fd, 0xfffff8dc, /* cornsilk */
		0x3d8c4edf, 0xffdc143c, /* crimson */
		0x002ed323, 0xff00ffff, /* cyan */
		0x67cc74d0, 0xff00008b, /* darkblue */
		0x67cd1799, 0xff008b8b, /* darkcyan */
		0x31bbd168, 0xffb8860b, /* darkgoldenrod */
		0x67cecf55, 0xff555555, /* darkgrey */
		0x920b194d, 0xff006400, /* darkgreen */
		0x923edd4c, 0xffbdb76b, /* darkkhaki */
		0x5c293873, 0xff8b008b, /* darkmagenta */
		0x6b6671fe, 0xff556b2f, /* darkolivegreen */
		0xbcfd2524, 0xffff8c00, /* darkorange */
		0xbcfdf799, 0xff9932cc, /* darkorchid */
		0x55ee0d5b, 0xff8b0000, /* darkred */
		0xc2e5f564, 0xffe9967a, /* darksalmon */
		0x61be858a, 0xff8fbc8f, /* darkseagreen */
		0xc2b0f2bd, 0xff483d8b, /* darkslateblue */
		0xc2b34d42, 0xff2f4f4f, /* darkslategrey */
		0x7cf2b06b, 0xff00ced1, /* darkturquoise */
		0xc8769375, 0xff9400d3, /* darkviolet */
		0x25832862, 0xffff1493, /* deeppink */
		0xfcad568f, 0xff00bfff, /* deepskyblue */
		0x634c8b67, 0xff696969, /* dimgrey */
		0x45c1ce55, 0xff1e90ff, /* dodgerblue */
		0xef19e3cb, 0xffb22222, /* firebrick */
		0xb852b195, 0xfffffaf0, /* floralwhite */
		0xd086fd06, 0xff228b22, /* forestgreen */
		0xe106b6d7, 0xffff00ff, /* fuchsia */
		0x7880d61e, 0xffdcdcdc, /* gainsboro */
		0x00308060, 0xffffd700, /* gold */
		0xb3b3bc1e, 0xffdaa520, /* goldenrod */
		0xbab8a537, 0xffadff2f, /* greenyellow */
		0xe4cacafb, 0xfff0fff0, /* honeydew */
		0x41892743, 0xffff69b4, /* hotpink */
		0xd5796f1a, 0xffcd5c5c, /* indianred */
		0xb969fed2, 0xff4b0082, /* indigo */
		0x05fef6a9, 0xfffffff0, /* ivory */
		0x06149302, 0xfff0e68c, /* khaki */
		0xad5a05c7, 0xffe6e6fa, /* lavender */
		0x7c4d5b99, 0xfffff0f5, /* lavenderblush */
		0x195756f0, 0xfffffacd, /* lemonchiffon */
		0x28e4ea70, 0xffadd8e6, /* lightblue */
		0xf3c7ccdb, 0xfff08080, /* lightcoral */
		0x28e58d39, 0xffe0ffff, /* lightcyan */
		0x21234e3c, 0xfffafad2, /* lightgoldenrodyellow */
		0xf40157ad, 0xff90ee90, /* lightgreen */
		0x28e744f5, 0xffd3d3d3, /* lightgrey */
		0x28eb3b8c, 0xffffb6c1, /* lightpink */
		0x9fb78304, 0xffffa07a, /* lightsalmon */
		0x50632b2a, 0xff20b2aa, /* lightseagreen */
		0x68fb7b25, 0xff87cefa, /* lightskyblue */
		0xa8a35ba2, 0xff778899, /* lightslategrey */
		0xa20d484f, 0xffb0c4de, /* lightsteelblue */
		0xaa2cf10a, 0xffffffe0, /* lightyellow */
		0x0032afd5, 0xff00ff00, /* lime */
		0x607bbc4e, 0xff32cd32, /* limegreen */
		0x06234efa, 0xfffaf0e6, /* linen */
		0x316858a9, 0xffff00ff, /* magenta */
		0xbf8ca470, 0xff800000, /* maroon */
		0xbd58e0b3, 0xff66cdaa, /* mediumaquamarine */
		0x967dfd4f, 0xff0000cd, /* mediumblue */
		0x056f5c58, 0xffba55d3, /* mediumorchid */
		0x07556b71, 0xff9370db, /* mediumpurple */
		0x5369b689, 0xff3cb371, /* mediumseagreen */
		0x066be19e, 0xff7b68ee, /* mediumslateblue */
		0x3256b281, 0xff00fa9a, /* mediumspringgreen */
		0xc0ad9f4c, 0xff48d1cc, /* mediumturquoise */
		0x628e63dd, 0xffc71585, /* mediumvioletred */
		0x168eb32a, 0xff191970, /* midnightblue */
		0x4306b960, 0xfff5fffa, /* mintcream */
		0x4cbc0e6b, 0xffffe4e1, /* mistyrose */
		0xe97218a6, 0xffffdead, /* navajowhite */
		0x00337bb6, 0xff000080, /* navy */
		0xadd2d33e, 0xfffdf5e6, /* oldlace */
		0x064ee1db, 0xff808000, /* olive */
		0x9e33a98a, 0xff6b8e23, /* olivedrab */
		0xc3de262e, 0xffffa500, /* orange */
		0x58bebba3, 0xffff4500, /* orangered */
		0xc3def8a3, 0xffda70d6, /* orchid */
		0x28cb4834, 0xffeee8aa, /* palegoldenrod */
		0x3d9dd619, 0xff98fb98, /* palegreen */
		0x74022737, 0xffafeeee, /* paleturquoise */
		0x15e2ebc8, 0xffdb7093, /* palevioletred */
		0x5fd898e2, 0xffffefd5, /* papayawhip */
		0x93e1b776, 0xffffdab9, /* peachpuff */
		0x003472f8, 0xffcd853f, /* peru */
		0x00348176, 0xffffc0cb, /* pink */
		0x00348d94, 0xffdda0dd, /* plum */
		0xd036be93, 0xffb0e0e6, /* powderblue */
		0xc5c507bc, 0xff800080, /* purple */
		0xa89d65b3, 0xffbc8f8f, /* rosybrown */
		0xbd9413e1, 0xff4169e1, /* royalblue */
		0xf456044f, 0xff8b4513, /* saddlebrown */
		0xc9c6f66e, 0xfffa8072, /* salmon */
		0x0bb131e1, 0xfff4a460, /* sandybrown */
		0x34636c14, 0xff2e8b57, /* seagreen */
		0x3507fb41, 0xfffff5ee, /* seashell */
		0xca348772, 0xffa0522d, /* sienna */
		0xca37d30d, 0xffc0c0c0, /* silver */
		0x80da74fb, 0xff87ceeb, /* skyblue */
		0x44a8dd73, 0xff6a5acd, /* slateblue */
		0x44ab37f8, 0xff708090, /* slategrey */
		0x0035f183, 0xfffffafa, /* snow */
		0xd5440d16, 0xff00ff7f, /* springgreen */
		0x3e1524a5, 0xff4682b4, /* steelblue */
		0x0001bfa1, 0xffd2b48c, /* tan */
		0x0036425c, 0xff008080, /* teal */
		0xafc8858f, 0xffd8bfd8, /* thistle */
		0xcc41600a, 0xffff6347, /* tomato */
		0xfeea9b21, 0xff40e0d0, /* turquoise */
		0xcf57947f, 0xffee82ee, /* violet */
		0x06bdbae7, 0xfff5deb3, /* wheat */
		0x10802ee6, 0xfff5f5f5, /* whitesmoke */
		0xe1b5130f, 0xff9acd32  /* yellowgreen */
	};

	const uint32 hash = (uint32) colourName.trim().toLowerCase().hashCode();

	for (int i = 0; i < numElementsInArray (presets); i += 2)
		if (presets [i] == hash)
			return Colour (presets [i + 1]);

	return defaultColour;
}

/*** End of inlined file: juce_Colours.cpp ***/


/*** Start of inlined file: juce_FillType.cpp ***/
FillType::FillType() noexcept
	: colour (0xff000000)
{
}

FillType::FillType (const Colour& colour_) noexcept
	: colour (colour_)
{
}

FillType::FillType (const ColourGradient& gradient_)
	: colour (0xff000000), gradient (new ColourGradient (gradient_))
{
}

FillType::FillType (const Image& image_, const AffineTransform& transform_) noexcept
	: colour (0xff000000), image (image_), transform (transform_)
{
}

FillType::FillType (const FillType& other)
	: colour (other.colour),
	  gradient (other.gradient.createCopy()),
	  image (other.image),
	  transform (other.transform)
{
}

FillType& FillType::operator= (const FillType& other)
{
	if (this != &other)
	{
		colour = other.colour;
		gradient = other.gradient.createCopy();
		image = other.image;
		transform = other.transform;
	}

	return *this;
}

#if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
FillType::FillType (FillType&& other) noexcept
	: colour (other.colour),
	  gradient (other.gradient.release()),
	  image (static_cast <Image&&> (other.image)),
	  transform (other.transform)
{
}

FillType& FillType::operator= (FillType&& other) noexcept
{
	jassert (this != &other); // hopefully the compiler should make this situation impossible!

	colour = other.colour;
	gradient = other.gradient.release();
	image = static_cast <Image&&> (other.image);
	transform = other.transform;
	return *this;
}
#endif

FillType::~FillType() noexcept
{
}

bool FillType::operator== (const FillType& other) const
{
	return colour == other.colour && image == other.image
			&& transform == other.transform
			&& (gradient == other.gradient
				 || (gradient != nullptr && other.gradient != nullptr && *gradient == *other.gradient));
}

bool FillType::operator!= (const FillType& other) const
{
	return ! operator== (other);
}

void FillType::setColour (const Colour& newColour) noexcept
{
	gradient = nullptr;
	image = Image::null;
	colour = newColour;
}

void FillType::setGradient (const ColourGradient& newGradient)
{
	if (gradient != nullptr)
	{
		*gradient = newGradient;
	}
	else
	{
		image = Image::null;
		gradient = new ColourGradient (newGradient);
		colour = Colours::black;
	}
}

void FillType::setTiledImage (const Image& image_, const AffineTransform& transform_) noexcept
{
	gradient = nullptr;
	image = image_;
	transform = transform_;
	colour = Colours::black;
}

void FillType::setOpacity (const float newOpacity) noexcept
{
	colour = colour.withAlpha (newOpacity);
}

bool FillType::isInvisible() const noexcept
{
	return colour.isTransparent() || (gradient != nullptr && gradient->isInvisible());
}

FillType FillType::transformed (const AffineTransform& t) const
{
	FillType f (*this);
	f.transform = f.transform.followedBy (t);
	return f;
}

/*** End of inlined file: juce_FillType.cpp ***/


/*** Start of inlined file: juce_AffineTransform.cpp ***/
AffineTransform::AffineTransform() noexcept
	: mat00 (1.0f), mat01 (0), mat02 (0),
	  mat10 (0), mat11 (1.0f), mat12 (0)
{
}

AffineTransform::AffineTransform (const AffineTransform& other) noexcept
  : mat00 (other.mat00), mat01 (other.mat01), mat02 (other.mat02),
	mat10 (other.mat10), mat11 (other.mat11), mat12 (other.mat12)
{
}

AffineTransform::AffineTransform (const float mat00_, const float mat01_, const float mat02_,
								  const float mat10_, const float mat11_, const float mat12_) noexcept
 :  mat00 (mat00_), mat01 (mat01_), mat02 (mat02_),
	mat10 (mat10_), mat11 (mat11_), mat12 (mat12_)
{
}

AffineTransform& AffineTransform::operator= (const AffineTransform& other) noexcept
{
	mat00 = other.mat00;
	mat01 = other.mat01;
	mat02 = other.mat02;
	mat10 = other.mat10;
	mat11 = other.mat11;
	mat12 = other.mat12;

	return *this;
}

bool AffineTransform::operator== (const AffineTransform& other) const noexcept
{
	return mat00 == other.mat00
		&& mat01 == other.mat01
		&& mat02 == other.mat02
		&& mat10 == other.mat10
		&& mat11 == other.mat11
		&& mat12 == other.mat12;
}

bool AffineTransform::operator!= (const AffineTransform& other) const noexcept
{
	return ! operator== (other);
}

bool AffineTransform::isIdentity() const noexcept
{
	return (mat01 == 0)
		&& (mat02 == 0)
		&& (mat10 == 0)
		&& (mat12 == 0)
		&& (mat00 == 1.0f)
		&& (mat11 == 1.0f);
}

const AffineTransform AffineTransform::identity;

AffineTransform AffineTransform::followedBy (const AffineTransform& other) const noexcept
{
	return AffineTransform (other.mat00 * mat00 + other.mat01 * mat10,
							other.mat00 * mat01 + other.mat01 * mat11,
							other.mat00 * mat02 + other.mat01 * mat12 + other.mat02,
							other.mat10 * mat00 + other.mat11 * mat10,
							other.mat10 * mat01 + other.mat11 * mat11,
							other.mat10 * mat02 + other.mat11 * mat12 + other.mat12);
}

AffineTransform AffineTransform::translated (const float dx, const float dy) const noexcept
{
	return AffineTransform (mat00, mat01, mat02 + dx,
							mat10, mat11, mat12 + dy);
}

AffineTransform AffineTransform::translation (const float dx, const float dy) noexcept
{
	return AffineTransform (1.0f, 0, dx,
							0, 1.0f, dy);
}

AffineTransform AffineTransform::rotated (const float rad) const noexcept
{
	const float cosRad = std::cos (rad);
	const float sinRad = std::sin (rad);

	return AffineTransform (cosRad * mat00 + -sinRad * mat10,
							cosRad * mat01 + -sinRad * mat11,
							cosRad * mat02 + -sinRad * mat12,
							sinRad * mat00 + cosRad * mat10,
							sinRad * mat01 + cosRad * mat11,
							sinRad * mat02 + cosRad * mat12);
}

AffineTransform AffineTransform::rotation (const float rad) noexcept
{
	const float cosRad = std::cos (rad);
	const float sinRad = std::sin (rad);

	return AffineTransform (cosRad, -sinRad, 0,
							sinRad, cosRad, 0);
}

AffineTransform AffineTransform::rotation (const float rad, const float pivotX, const float pivotY) noexcept
{
	const float cosRad = std::cos (rad);
	const float sinRad = std::sin (rad);

	return AffineTransform (cosRad, -sinRad, -cosRad * pivotX + sinRad * pivotY + pivotX,
							sinRad, cosRad, -sinRad * pivotX + -cosRad * pivotY + pivotY);
}

AffineTransform AffineTransform::rotated (const float angle, const float pivotX, const float pivotY) const noexcept
{
	return followedBy (rotation (angle, pivotX, pivotY));
}

AffineTransform AffineTransform::scaled (const float factorX, const float factorY) const noexcept
{
	return AffineTransform (factorX * mat00, factorX * mat01, factorX * mat02,
							factorY * mat10, factorY * mat11, factorY * mat12);
}

AffineTransform AffineTransform::scale (const float factorX, const float factorY) noexcept
{
	return AffineTransform (factorX, 0, 0,
							0, factorY, 0);
}

AffineTransform AffineTransform::scaled (const float factorX, const float factorY,
										 const float pivotX, const float pivotY) const noexcept
{
	return AffineTransform (factorX * mat00, factorX * mat01, factorX * mat02 + pivotX * (1.0f - factorX),
							factorY * mat10, factorY * mat11, factorY * mat12 + pivotY * (1.0f - factorY));
}

AffineTransform AffineTransform::scale (const float factorX, const float factorY,
										const float pivotX, const float pivotY) noexcept
{
	return AffineTransform (factorX, 0, pivotX * (1.0f - factorX),
							0, factorY, pivotY * (1.0f - factorY));
}

AffineTransform AffineTransform::shear (float shearX, float shearY) noexcept
{
	return AffineTransform (1.0f, shearX, 0,
							shearY, 1.0f, 0);
}

AffineTransform AffineTransform::sheared (const float shearX, const float shearY) const noexcept
{
	return AffineTransform (mat00 + shearX * mat10,
							mat01 + shearX * mat11,
							mat02 + shearX * mat12,
							shearY * mat00 + mat10,
							shearY * mat01 + mat11,
							shearY * mat02 + mat12);
}

AffineTransform AffineTransform::verticalFlip (const float height) noexcept
{
	return AffineTransform (1.0f, 0, 0, 0, -1.0f, height);
}

AffineTransform AffineTransform::inverted() const noexcept
{
	double determinant = (mat00 * mat11 - mat10 * mat01);

	if (determinant != 0.0)
	{
		determinant = 1.0 / determinant;

		const float dst00 = (float) (mat11 * determinant);
		const float dst10 = (float) (-mat10 * determinant);
		const float dst01 = (float) (-mat01 * determinant);
		const float dst11 = (float) (mat00 * determinant);

		return AffineTransform (dst00, dst01, -mat02 * dst00 - mat12 * dst01,
								dst10, dst11, -mat02 * dst10 - mat12 * dst11);
	}
	else
	{
		// singularity..
		return *this;
	}
}

bool AffineTransform::isSingularity() const noexcept
{
	return (mat00 * mat11 - mat10 * mat01) == 0;
}

AffineTransform AffineTransform::fromTargetPoints (const float x00, const float y00,
												   const float x10, const float y10,
												   const float x01, const float y01) noexcept
{
	return AffineTransform (x10 - x00, x01 - x00, x00,
							y10 - y00, y01 - y00, y00);
}

AffineTransform AffineTransform::fromTargetPoints (const float sx1, const float sy1, const float tx1, const float ty1,
												   const float sx2, const float sy2, const float tx2, const float ty2,
												   const float sx3, const float sy3, const float tx3, const float ty3) noexcept
{
	return fromTargetPoints (sx1, sy1, sx2, sy2, sx3, sy3)
			.inverted()
			.followedBy (fromTargetPoints (tx1, ty1, tx2, ty2, tx3, ty3));
}

bool AffineTransform::isOnlyTranslation() const noexcept
{
	return (mat01 == 0)
		&& (mat10 == 0)
		&& (mat00 == 1.0f)
		&& (mat11 == 1.0f);
}

float AffineTransform::getScaleFactor() const noexcept
{
	return juce_hypot (mat00 + mat01, mat10 + mat11);
}

/*** End of inlined file: juce_AffineTransform.cpp ***/


/*** Start of inlined file: juce_EdgeTable.cpp ***/
const int juce_edgeTableDefaultEdgesPerLine = 32;

EdgeTable::EdgeTable (const Rectangle<int>& bounds_,
					  const Path& path, const AffineTransform& transform)
   : bounds (bounds_),
	 maxEdgesPerLine (juce_edgeTableDefaultEdgesPerLine),
	 lineStrideElements ((juce_edgeTableDefaultEdgesPerLine << 1) + 1),
	 needToCheckEmptinesss (true)
{
	table.malloc ((size_t) ((bounds.getHeight() + 1) * lineStrideElements));
	int* t = table;

	for (int i = bounds.getHeight(); --i >= 0;)
	{
		*t = 0;
		t += lineStrideElements;
	}

	const int leftLimit   = bounds.getX() << 8;
	const int topLimit    = bounds.getY() << 8;
	const int rightLimit  = bounds.getRight() << 8;
	const int heightLimit = bounds.getHeight() << 8;

	PathFlatteningIterator iter (path, transform);

	while (iter.next())
	{
		int y1 = roundToInt (iter.y1 * 256.0f);
		int y2 = roundToInt (iter.y2 * 256.0f);

		if (y1 != y2)
		{
			y1 -= topLimit;
			y2 -= topLimit;

			const int startY = y1;
			int direction = -1;

			if (y1 > y2)
			{
				std::swap (y1, y2);
				direction = 1;
			}

			if (y1 < 0)
				y1 = 0;

			if (y2 > heightLimit)
				y2 = heightLimit;

			if (y1 < y2)
			{
				const double startX = 256.0f * iter.x1;
				const double multiplier = (iter.x2 - iter.x1) / (iter.y2 - iter.y1);
				const int stepSize = jlimit (1, 256, 256 / (1 + (int) std::abs (multiplier)));

				do
				{
					const int step = jmin (stepSize, y2 - y1, 256 - (y1 & 255));
					int x = roundToInt (startX + multiplier * ((y1 + (step >> 1)) - startY));

					if (x < leftLimit)
						x = leftLimit;
					else if (x >= rightLimit)
						x = rightLimit - 1;

					addEdgePoint (x, y1 >> 8, direction * step);
					y1 += step;
				}
				while (y1 < y2);
			}
		}
	}

	sanitiseLevels (path.isUsingNonZeroWinding());
}

EdgeTable::EdgeTable (const Rectangle<int>& rectangleToAdd)
   : bounds (rectangleToAdd),
	 maxEdgesPerLine (juce_edgeTableDefaultEdgesPerLine),
	 lineStrideElements ((juce_edgeTableDefaultEdgesPerLine << 1) + 1),
	 needToCheckEmptinesss (true)
{
	table.malloc ((size_t) jmax (1, bounds.getHeight()) * lineStrideElements);
	table[0] = 0;

	const int x1 = rectangleToAdd.getX() << 8;
	const int x2 = rectangleToAdd.getRight() << 8;

	int* t = table;
	for (int i = rectangleToAdd.getHeight(); --i >= 0;)
	{
		t[0] = 2;
		t[1] = x1;
		t[2] = 255;
		t[3] = x2;
		t[4] = 0;
		t += lineStrideElements;
	}
}

EdgeTable::EdgeTable (const RectangleList& rectanglesToAdd)
   : bounds (rectanglesToAdd.getBounds()),
	 maxEdgesPerLine (juce_edgeTableDefaultEdgesPerLine),
	 lineStrideElements ((juce_edgeTableDefaultEdgesPerLine << 1) + 1),
	 needToCheckEmptinesss (true)
{
	table.malloc ((size_t) jmax (1, bounds.getHeight()) * lineStrideElements);

	int* t = table;
	for (int i = bounds.getHeight(); --i >= 0;)
	{
		*t = 0;
		t += lineStrideElements;
	}

	for (RectangleList::Iterator iter (rectanglesToAdd); iter.next();)
	{
		const Rectangle<int>* const r = iter.getRectangle();

		const int x1 = r->getX() << 8;
		const int x2 = r->getRight() << 8;
		int y = r->getY() - bounds.getY();

		for (int j = r->getHeight(); --j >= 0;)
		{
			addEdgePoint (x1, y, 255);
			addEdgePoint (x2, y, -255);
			++y;
		}
	}

	sanitiseLevels (true);
}

EdgeTable::EdgeTable (const Rectangle<float>& rectangleToAdd)
   : bounds (Rectangle<int> ((int) std::floor (rectangleToAdd.getX()),
							 roundToInt (rectangleToAdd.getY() * 256.0f) >> 8,
							 2 + (int) rectangleToAdd.getWidth(),
							 2 + (int) rectangleToAdd.getHeight())),
	 maxEdgesPerLine (juce_edgeTableDefaultEdgesPerLine),
	 lineStrideElements ((juce_edgeTableDefaultEdgesPerLine << 1) + 1),
	 needToCheckEmptinesss (true)
{
	jassert (! rectangleToAdd.isEmpty());
	table.malloc ((size_t) jmax (1, bounds.getHeight()) * lineStrideElements);
	table[0] = 0;

	const int x1 = roundToInt (rectangleToAdd.getX() * 256.0f);
	const int x2 = roundToInt (rectangleToAdd.getRight() * 256.0f);

	int y1 = roundToInt (rectangleToAdd.getY() * 256.0f) - (bounds.getY() << 8);
	jassert (y1 < 256);
	int y2 = roundToInt (rectangleToAdd.getBottom() * 256.0f) - (bounds.getY() << 8);

	if (x2 <= x1 || y2 <= y1)
	{
		bounds.setHeight (0);
		return;
	}

	int lineY = 0;
	int* t = table;

	if ((y1 >> 8) == (y2 >> 8))
	{
		t[0] = 2;
		t[1] = x1;
		t[2] = y2 - y1;
		t[3] = x2;
		t[4] = 0;
		++lineY;
		t += lineStrideElements;
	}
	else
	{
		t[0] = 2;
		t[1] = x1;
		t[2] = 255 - (y1 & 255);
		t[3] = x2;
		t[4] = 0;
		++lineY;
		t += lineStrideElements;

		while (lineY < (y2 >> 8))
		{
			t[0] = 2;
			t[1] = x1;
			t[2] = 255;
			t[3] = x2;
			t[4] = 0;
			++lineY;
			t += lineStrideElements;
		}

		jassert (lineY < bounds.getHeight());
		t[0] = 2;
		t[1] = x1;
		t[2] = y2 & 255;
		t[3] = x2;
		t[4] = 0;
		++lineY;
		t += lineStrideElements;
	}

	while (lineY < bounds.getHeight())
	{
		t[0] = 0;
		t += lineStrideElements;
		++lineY;
	}
}

EdgeTable::EdgeTable (const EdgeTable& other)
{
	operator= (other);
}

EdgeTable& EdgeTable::operator= (const EdgeTable& other)
{
	bounds = other.bounds;
	maxEdgesPerLine = other.maxEdgesPerLine;
	lineStrideElements = other.lineStrideElements;
	needToCheckEmptinesss = other.needToCheckEmptinesss;

	table.malloc ((size_t) jmax (1, bounds.getHeight()) * lineStrideElements);
	copyEdgeTableData (table, lineStrideElements, other.table, lineStrideElements, bounds.getHeight());
	return *this;
}

EdgeTable::~EdgeTable()
{
}

void EdgeTable::copyEdgeTableData (int* dest, const int destLineStride, const int* src, const int srcLineStride, int numLines) noexcept
{
	while (--numLines >= 0)
	{
		memcpy (dest, src, (src[0] * 2 + 1) * sizeof (int));
		src += srcLineStride;
		dest += destLineStride;
	}
}

void EdgeTable::sanitiseLevels (const bool useNonZeroWinding) noexcept
{
	// Convert the table from relative windings to absolute levels..
	int* lineStart = table;

	for (int i = bounds.getHeight(); --i >= 0;)
	{
		int* line = lineStart;
		lineStart += lineStrideElements;

		int num = *line;
		if (num == 0)
			continue;

		int level = 0;

		if (useNonZeroWinding)
		{
			while (--num > 0)
			{
				line += 2;
				level += *line;
				int corrected = abs (level);
				if (corrected >> 8)
					corrected = 255;

				*line = corrected;
			}
		}
		else
		{
			while (--num > 0)
			{
				line += 2;
				level += *line;
				int corrected = abs (level);
				if (corrected >> 8)
				{
					corrected &= 511;
					if (corrected >> 8)
						corrected = 511 - corrected;
				}

				*line = corrected;
			}
		}

		line[2] = 0; // force the last level to 0, just in case something went wrong in creating the table
	}
}

void EdgeTable::remapTableForNumEdges (const int newNumEdgesPerLine)
{
	if (newNumEdgesPerLine != maxEdgesPerLine)
	{
		maxEdgesPerLine = newNumEdgesPerLine;

		jassert (bounds.getHeight() > 0);
		const int newLineStrideElements = maxEdgesPerLine * 2 + 1;

		HeapBlock <int> newTable ((size_t) (bounds.getHeight() * newLineStrideElements));

		copyEdgeTableData (newTable, newLineStrideElements, table, lineStrideElements, bounds.getHeight());

		table.swapWith (newTable);
		lineStrideElements = newLineStrideElements;
	}
}

void EdgeTable::optimiseTable()
{
	int maxLineElements = 0;

	for (int i = bounds.getHeight(); --i >= 0;)
		maxLineElements = jmax (maxLineElements, table [i * lineStrideElements]);

	remapTableForNumEdges (maxLineElements);
}

void EdgeTable::addEdgePoint (const int x, const int y, const int winding)
{
	jassert (y >= 0 && y < bounds.getHeight());

	int* line = table + lineStrideElements * y;
	const int numPoints = line[0];
	int n = numPoints << 1;

	if (n > 0)
	{
		while (n > 0)
		{
			const int cx = line [n - 1];

			if (cx <= x)
			{
				if (cx == x)
				{
					line [n] += winding;
					return;
				}

				break;
			}

			n -= 2;
		}

		if (numPoints >= maxEdgesPerLine)
		{
			remapTableForNumEdges (maxEdgesPerLine + juce_edgeTableDefaultEdgesPerLine);
			jassert (numPoints < maxEdgesPerLine);
			line = table + lineStrideElements * y;
		}

		memmove (line + (n + 3), line + (n + 1), sizeof (int) * ((numPoints << 1) - n));
	}

	line [n + 1] = x;
	line [n + 2] = winding;
	line[0]++;
}

void EdgeTable::translate (float dx, const int dy) noexcept
{
	bounds.translate ((int) std::floor (dx), dy);

	int* lineStart = table;
	const int intDx = (int) (dx * 256.0f);

	for (int i = bounds.getHeight(); --i >= 0;)
	{
		int* line = lineStart;
		lineStart += lineStrideElements;
		int num = *line++;

		while (--num >= 0)
		{
			*line += intDx;
			line += 2;
		}
	}
}

void EdgeTable::intersectWithEdgeTableLine (const int y, const int* otherLine)
{
	jassert (y >= 0 && y < bounds.getHeight());

	int* dest = table + lineStrideElements * y;
	if (dest[0] == 0)
		return;

	int otherNumPoints = *otherLine;
	if (otherNumPoints == 0)
	{
		*dest = 0;
		return;
	}

	const int right = bounds.getRight() << 8;

	// optimise for the common case where our line lies entirely within a
	// single pair of points, as happens when clipping to a simple rect.
	if (otherNumPoints == 2 && otherLine[2] >= 255)
	{
		clipEdgeTableLineToRange (dest, otherLine[1], jmin (right, otherLine[3]));
		return;
	}

	++otherLine;
	const size_t lineSizeBytes = (dest[0] * 2 + 1) * sizeof (int);
	int* temp = static_cast<int*> (alloca (lineSizeBytes));
	memcpy (temp, dest, lineSizeBytes);

	const int* src1 = temp;
	int srcNum1 = *src1++;
	int x1 = *src1++;

	const int* src2 = otherLine;
	int srcNum2 = otherNumPoints;
	int x2 = *src2++;

	int destIndex = 0, destTotal = 0;
	int level1 = 0, level2 = 0;
	int lastX = std::numeric_limits<int>::min(), lastLevel = 0;

	while (srcNum1 > 0 && srcNum2 > 0)
	{
		int nextX;

		if (x1 < x2)
		{
			nextX = x1;
			level1 = *src1++;
			x1 = *src1++;
			--srcNum1;
		}
		else if (x1 == x2)
		{
			nextX = x1;
			level1 = *src1++;
			level2 = *src2++;
			x1 = *src1++;
			x2 = *src2++;
			--srcNum1;
			--srcNum2;
		}
		else
		{
			nextX = x2;
			level2 = *src2++;
			x2 = *src2++;
			--srcNum2;
		}

		if (nextX > lastX)
		{
			if (nextX >= right)
				break;

			lastX = nextX;

			const int nextLevel = (level1 * (level2 + 1)) >> 8;
			jassert (isPositiveAndBelow (nextLevel, (int) 256));

			if (nextLevel != lastLevel)
			{
				if (destTotal >= maxEdgesPerLine)
				{
					dest[0] = destTotal;
					remapTableForNumEdges (maxEdgesPerLine + juce_edgeTableDefaultEdgesPerLine);
					dest = table + lineStrideElements * y;
				}

				++destTotal;
				lastLevel = nextLevel;
				dest[++destIndex] = nextX;
				dest[++destIndex] = nextLevel;
			}
		}
	}

	if (lastLevel > 0)
	{
		if (destTotal >= maxEdgesPerLine)
		{
			dest[0] = destTotal;
			remapTableForNumEdges (maxEdgesPerLine + juce_edgeTableDefaultEdgesPerLine);
			dest = table + lineStrideElements * y;
		}

		++destTotal;
		dest[++destIndex] = right;
		dest[++destIndex] = 0;
	}

	dest[0] = destTotal;

#if JUCE_DEBUG
	int last = std::numeric_limits<int>::min();
	for (int i = 0; i < dest[0]; ++i)
	{
		jassert (dest[i * 2 + 1] > last);
		last = dest[i * 2 + 1];
	}

	jassert (dest [dest[0] * 2] == 0);
#endif
}

void EdgeTable::clipEdgeTableLineToRange (int* dest, const int x1, const int x2) noexcept
{
	int* lastItem = dest + (dest[0] * 2 - 1);

	if (x2 < lastItem[0])
	{
		if (x2 <= dest[1])
		{
			dest[0] = 0;
			return;
		}

		while (x2 < lastItem[-2])
		{
			--(dest[0]);
			lastItem -= 2;
		}

		lastItem[0] = x2;
		lastItem[1] = 0;
	}

	if (x1 > dest[1])
	{
		while (lastItem[0] > x1)
			lastItem -= 2;

		const int itemsRemoved = (int) (lastItem - (dest + 1)) / 2;

		if (itemsRemoved > 0)
		{
			dest[0] -= itemsRemoved;
			memmove (dest + 1, lastItem, dest[0] * (sizeof (int) * 2));
		}

		dest[1] = x1;
	}
}

void EdgeTable::clipToRectangle (const Rectangle<int>& r)
{
	const Rectangle<int> clipped (r.getIntersection (bounds));

	if (clipped.isEmpty())
	{
		needToCheckEmptinesss = false;
		bounds.setHeight (0);
	}
	else
	{
		const int top = clipped.getY() - bounds.getY();
		const int bottom = clipped.getBottom() - bounds.getY();

		if (bottom < bounds.getHeight())
			bounds.setHeight (bottom);

		for (int i = top; --i >= 0;)
			table [lineStrideElements * i] = 0;

		if (clipped.getX() > bounds.getX() || clipped.getRight() < bounds.getRight())
		{
			const int x1 = clipped.getX() << 8;
			const int x2 = jmin (bounds.getRight(), clipped.getRight()) << 8;
			int* line = table + lineStrideElements * top;

			for (int i = bottom - top; --i >= 0;)
			{
				if (line[0] != 0)
					clipEdgeTableLineToRange (line, x1, x2);

				line += lineStrideElements;
			}
		}

		needToCheckEmptinesss = true;
	}
}

void EdgeTable::excludeRectangle (const Rectangle<int>& r)
{
	const Rectangle<int> clipped (r.getIntersection (bounds));

	if (! clipped.isEmpty())
	{
		const int top = clipped.getY() - bounds.getY();
		const int bottom = clipped.getBottom() - bounds.getY();

		const int rectLine[] = { 4, std::numeric_limits<int>::min(), 255,
								 clipped.getX() << 8, 0,
								 clipped.getRight() << 8, 255,
								 std::numeric_limits<int>::max(), 0 };

		for (int i = top; i < bottom; ++i)
			intersectWithEdgeTableLine (i, rectLine);

		needToCheckEmptinesss = true;
	}
}

void EdgeTable::clipToEdgeTable (const EdgeTable& other)
{
	const Rectangle<int> clipped (other.bounds.getIntersection (bounds));

	if (clipped.isEmpty())
	{
		needToCheckEmptinesss = false;
		bounds.setHeight (0);
	}
	else
	{
		const int top = clipped.getY() - bounds.getY();
		const int bottom = clipped.getBottom() - bounds.getY();

		if (bottom < bounds.getHeight())
			bounds.setHeight (bottom);

		if (clipped.getRight() < bounds.getRight())
			bounds.setRight (clipped.getRight());

		int i = 0;
		for (i = top; --i >= 0;)
			table [lineStrideElements * i] = 0;

		const int* otherLine = other.table + other.lineStrideElements * (clipped.getY() - other.bounds.getY());

		for (i = top; i < bottom; ++i)
		{
			intersectWithEdgeTableLine (i, otherLine);
			otherLine += other.lineStrideElements;
		}

		needToCheckEmptinesss = true;
	}
}

void EdgeTable::clipLineToMask (int x, int y, const uint8* mask, int maskStride, int numPixels)
{
	y -= bounds.getY();

	if (y < 0 || y >= bounds.getHeight())
		return;

	needToCheckEmptinesss = true;

	if (numPixels <= 0)
	{
		table [lineStrideElements * y] = 0;
		return;
	}

	int* tempLine = static_cast<int*> (alloca ((numPixels * 2 + 4) * sizeof (int)));
	int destIndex = 0, lastLevel = 0;

	while (--numPixels >= 0)
	{
		const int alpha = *mask;
		mask += maskStride;

		if (alpha != lastLevel)
		{
			tempLine[++destIndex] = (x << 8);
			tempLine[++destIndex] = alpha;
			lastLevel = alpha;
		}

		++x;
	}

	if (lastLevel > 0)
	{
		tempLine[++destIndex] = (x << 8);
		tempLine[++destIndex] = 0;
	}

	tempLine[0] = destIndex >> 1;

	intersectWithEdgeTableLine (y, tempLine);
}

bool EdgeTable::isEmpty() noexcept
{
	if (needToCheckEmptinesss)
	{
		needToCheckEmptinesss = false;
		int* t = table;

		for (int i = bounds.getHeight(); --i >= 0;)
		{
			if (t[0] > 1)
				return false;

			t += lineStrideElements;
		}

		bounds.setHeight (0);
	}

	return bounds.getHeight() == 0;
}

/*** End of inlined file: juce_EdgeTable.cpp ***/


/*** Start of inlined file: juce_Path.cpp ***/
// tests that some co-ords aren't NaNs
#define JUCE_CHECK_COORDS_ARE_VALID(x, y) \
	jassert (x == x && y == y);

namespace PathHelpers
{
	const float ellipseAngularIncrement = 0.05f;

	String nextToken (String::CharPointerType& t)
	{
		t = t.findEndOfWhitespace();

		String::CharPointerType start (t);
		size_t numChars = 0;

		while (! (t.isEmpty() || t.isWhitespace()))
		{
			++t;
			++numChars;
		}

		return String (start, numChars);
	}

	inline double lengthOf (float x1, float y1, float x2, float y2) noexcept
	{
		return juce_hypot ((double) (x1 - x2), (double) (y1 - y2));
	}
}

const float Path::lineMarker           = 100001.0f;
const float Path::moveMarker           = 100002.0f;
const float Path::quadMarker           = 100003.0f;
const float Path::cubicMarker          = 100004.0f;
const float Path::closeSubPathMarker   = 100005.0f;

Path::Path()
	: numElements (0),
	  pathXMin (0),
	  pathXMax (0),
	  pathYMin (0),
	  pathYMax (0),
	  useNonZeroWinding (true)
{
}

Path::~Path()
{
}

Path::Path (const Path& other)
	: numElements (other.numElements),
	  pathXMin (other.pathXMin),
	  pathXMax (other.pathXMax),
	  pathYMin (other.pathYMin),
	  pathYMax (other.pathYMax),
	  useNonZeroWinding (other.useNonZeroWinding)
{
	if (numElements > 0)
	{
		data.setAllocatedSize ((int) numElements);
		memcpy (data.elements, other.data.elements, numElements * sizeof (float));
	}
}

Path& Path::operator= (const Path& other)
{
	if (this != &other)
	{
		data.ensureAllocatedSize ((int) other.numElements);

		numElements = other.numElements;
		pathXMin = other.pathXMin;
		pathXMax = other.pathXMax;
		pathYMin = other.pathYMin;
		pathYMax = other.pathYMax;
		useNonZeroWinding = other.useNonZeroWinding;

		if (numElements > 0)
			memcpy (data.elements, other.data.elements, numElements * sizeof (float));
	}

	return *this;
}

#if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
Path::Path (Path&& other) noexcept
	: data (static_cast <ArrayAllocationBase <float, DummyCriticalSection>&&> (other.data)),
	  numElements (other.numElements),
	  pathXMin (other.pathXMin),
	  pathXMax (other.pathXMax),
	  pathYMin (other.pathYMin),
	  pathYMax (other.pathYMax),
	  useNonZeroWinding (other.useNonZeroWinding)
{
}

Path& Path::operator= (Path&& other) noexcept
{
	data = static_cast <ArrayAllocationBase <float, DummyCriticalSection>&&> (other.data);
	numElements = other.numElements;
	pathXMin = other.pathXMin;
	pathXMax = other.pathXMax;
	pathYMin = other.pathYMin;
	pathYMax = other.pathYMax;
	useNonZeroWinding = other.useNonZeroWinding;
	return *this;
}
#endif

bool Path::operator== (const Path& other) const noexcept
{
	return ! operator!= (other);
}

bool Path::operator!= (const Path& other) const noexcept
{
	if (numElements != other.numElements || useNonZeroWinding != other.useNonZeroWinding)
		return true;

	for (size_t i = 0; i < numElements; ++i)
		if (data.elements[i] != other.data.elements[i])
			return true;

	return false;
}

void Path::clear() noexcept
{
	numElements = 0;
	pathXMin = 0;
	pathYMin = 0;
	pathYMax = 0;
	pathXMax = 0;
}

void Path::swapWithPath (Path& other) noexcept
{
	data.swapWith (other.data);
	std::swap (numElements, other.numElements);
	std::swap (pathXMin, other.pathXMin);
	std::swap (pathXMax, other.pathXMax);
	std::swap (pathYMin, other.pathYMin);
	std::swap (pathYMax, other.pathYMax);
	std::swap (useNonZeroWinding, other.useNonZeroWinding);
}

void Path::setUsingNonZeroWinding (const bool isNonZero) noexcept
{
	useNonZeroWinding = isNonZero;
}

void Path::scaleToFit (const float x, const float y, const float w, const float h,
					   const bool preserveProportions) noexcept
{
	applyTransform (getTransformToScaleToFit (x, y, w, h, preserveProportions));
}

bool Path::isEmpty() const noexcept
{
	size_t i = 0;

	while (i < numElements)
	{
		const float type = data.elements [i++];

		if (type == moveMarker)
		{
			i += 2;
		}
		else if (type == lineMarker
				 || type == quadMarker
				 || type == cubicMarker)
		{
			return false;
		}
	}

	return true;
}

Rectangle<float> Path::getBounds() const noexcept
{
	return Rectangle<float> (pathXMin, pathYMin,
							 pathXMax - pathXMin,
							 pathYMax - pathYMin);
}

Rectangle<float> Path::getBoundsTransformed (const AffineTransform& transform) const noexcept
{
	return getBounds().transformed (transform);
}

void Path::startNewSubPath (const float x, const float y)
{
	JUCE_CHECK_COORDS_ARE_VALID (x, y);

	if (numElements == 0)
	{
		pathXMin = pathXMax = x;
		pathYMin = pathYMax = y;
	}
	else
	{
		pathXMin = jmin (pathXMin, x);
		pathXMax = jmax (pathXMax, x);
		pathYMin = jmin (pathYMin, y);
		pathYMax = jmax (pathYMax, y);
	}

	data.ensureAllocatedSize ((int) numElements + 3);

	data.elements [numElements++] = moveMarker;
	data.elements [numElements++] = x;
	data.elements [numElements++] = y;
}

void Path::startNewSubPath (const Point<float>& start)
{
	startNewSubPath (start.x, start.y);
}

void Path::lineTo (const float x, const float y)
{
	JUCE_CHECK_COORDS_ARE_VALID (x, y);

	if (numElements == 0)
		startNewSubPath (0, 0);

	data.ensureAllocatedSize ((int) numElements + 3);

	data.elements [numElements++] = lineMarker;
	data.elements [numElements++] = x;
	data.elements [numElements++] = y;

	pathXMin = jmin (pathXMin, x);
	pathXMax = jmax (pathXMax, x);
	pathYMin = jmin (pathYMin, y);
	pathYMax = jmax (pathYMax, y);
}

void Path::lineTo (const Point<float>& end)
{
	lineTo (end.x, end.y);
}

void Path::quadraticTo (const float x1, const float y1,
						const float x2, const float y2)
{
	JUCE_CHECK_COORDS_ARE_VALID (x1, y1);
	JUCE_CHECK_COORDS_ARE_VALID (x2, y2);

	if (numElements == 0)
		startNewSubPath (0, 0);

	data.ensureAllocatedSize ((int) numElements + 5);

	data.elements [numElements++] = quadMarker;
	data.elements [numElements++] = x1;
	data.elements [numElements++] = y1;
	data.elements [numElements++] = x2;
	data.elements [numElements++] = y2;

	pathXMin = jmin (pathXMin, x1, x2);
	pathXMax = jmax (pathXMax, x1, x2);
	pathYMin = jmin (pathYMin, y1, y2);
	pathYMax = jmax (pathYMax, y1, y2);
}

void Path::quadraticTo (const Point<float>& controlPoint,
						const Point<float>& endPoint)
{
	quadraticTo (controlPoint.x, controlPoint.y,
				 endPoint.x, endPoint.y);
}

void Path::cubicTo (const float x1, const float y1,
					const float x2, const float y2,
					const float x3, const float y3)
{
	JUCE_CHECK_COORDS_ARE_VALID (x1, y1);
	JUCE_CHECK_COORDS_ARE_VALID (x2, y2);
	JUCE_CHECK_COORDS_ARE_VALID (x3, y3);

	if (numElements == 0)
		startNewSubPath (0, 0);

	data.ensureAllocatedSize ((int) numElements + 7);

	data.elements [numElements++] = cubicMarker;
	data.elements [numElements++] = x1;
	data.elements [numElements++] = y1;
	data.elements [numElements++] = x2;
	data.elements [numElements++] = y2;
	data.elements [numElements++] = x3;
	data.elements [numElements++] = y3;

	pathXMin = jmin (pathXMin, x1, x2, x3);
	pathXMax = jmax (pathXMax, x1, x2, x3);
	pathYMin = jmin (pathYMin, y1, y2, y3);
	pathYMax = jmax (pathYMax, y1, y2, y3);
}

void Path::cubicTo (const Point<float>& controlPoint1,
					const Point<float>& controlPoint2,
					const Point<float>& endPoint)
{
	cubicTo (controlPoint1.x, controlPoint1.y,
			 controlPoint2.x, controlPoint2.y,
			 endPoint.x, endPoint.y);
}

void Path::closeSubPath()
{
	if (numElements > 0
		 && data.elements [numElements - 1] != closeSubPathMarker)
	{
		data.ensureAllocatedSize ((int) numElements + 1);
		data.elements [numElements++] = closeSubPathMarker;
	}
}

Point<float> Path::getCurrentPosition() const
{
	int i = (int) numElements - 1;

	if (i > 0 && data.elements[i] == closeSubPathMarker)
	{
		while (i >= 0)
		{
			if (data.elements[i] == moveMarker)
			{
				i += 2;
				break;
			}

			--i;
		}
	}

	if (i > 0)
		return Point<float> (data.elements [i - 1], data.elements [i]);

	return Point<float>();
}

void Path::addRectangle (const float x, const float y,
						 const float w, const float h)
{
	float x1 = x, y1 = y, x2 = x + w, y2 = y + h;

	if (w < 0) std::swap (x1, x2);
	if (h < 0) std::swap (y1, y2);

	data.ensureAllocatedSize ((int) numElements + 13);

	if (numElements == 0)
	{
		pathXMin = x1;
		pathXMax = x2;
		pathYMin = y1;
		pathYMax = y2;
	}
	else
	{
		pathXMin = jmin (pathXMin, x1);
		pathXMax = jmax (pathXMax, x2);
		pathYMin = jmin (pathYMin, y1);
		pathYMax = jmax (pathYMax, y2);
	}

	data.elements [numElements++] = moveMarker;
	data.elements [numElements++] = x1;
	data.elements [numElements++] = y2;
	data.elements [numElements++] = lineMarker;
	data.elements [numElements++] = x1;
	data.elements [numElements++] = y1;
	data.elements [numElements++] = lineMarker;
	data.elements [numElements++] = x2;
	data.elements [numElements++] = y1;
	data.elements [numElements++] = lineMarker;
	data.elements [numElements++] = x2;
	data.elements [numElements++] = y2;
	data.elements [numElements++] = closeSubPathMarker;
}

void Path::addRoundedRectangle (const float x, const float y,
								const float w, const float h,
								float csx,
								float csy)
{
	csx = jmin (csx, w * 0.5f);
	csy = jmin (csy, h * 0.5f);
	const float cs45x = csx * 0.45f;
	const float cs45y = csy * 0.45f;
	const float x2 = x + w;
	const float y2 = y + h;

	startNewSubPath (x + csx, y);
	lineTo (x2 - csx, y);
	cubicTo (x2 - cs45x, y, x2, y + cs45y, x2, y + csy);
	lineTo (x2, y2 - csy);
	cubicTo (x2, y2 - cs45y, x2 - cs45x, y2, x2 - csx, y2);
	lineTo (x + csx, y2);
	cubicTo (x + cs45x, y2, x, y2 - cs45y, x, y2 - csy);
	lineTo (x, y + csy);
	cubicTo (x, y + cs45y, x + cs45x, y, x + csx, y);
	closeSubPath();
}

void Path::addRoundedRectangle (const float x, const float y,
								const float w, const float h,
								float cs)
{
	addRoundedRectangle (x, y, w, h, cs, cs);
}

void Path::addTriangle (const float x1, const float y1,
						const float x2, const float y2,
						const float x3, const float y3)
{
	startNewSubPath (x1, y1);
	lineTo (x2, y2);
	lineTo (x3, y3);
	closeSubPath();
}

void Path::addQuadrilateral (const float x1, const float y1,
							 const float x2, const float y2,
							 const float x3, const float y3,
							 const float x4, const float y4)
{
	startNewSubPath (x1, y1);
	lineTo (x2, y2);
	lineTo (x3, y3);
	lineTo (x4, y4);
	closeSubPath();
}

void Path::addEllipse (const float x, const float y,
					   const float w, const float h)
{
	const float hw = w * 0.5f;
	const float hw55 = hw * 0.55f;
	const float hh = h * 0.5f;
	const float hh55 = hh * 0.55f;
	const float cx = x + hw;
	const float cy = y + hh;

	startNewSubPath (cx, cy - hh);
	cubicTo (cx + hw55, cy - hh, cx + hw, cy - hh55, cx + hw, cy);
	cubicTo (cx + hw, cy + hh55, cx + hw55, cy + hh, cx, cy + hh);
	cubicTo (cx - hw55, cy + hh, cx - hw, cy + hh55, cx - hw, cy);
	cubicTo (cx - hw, cy - hh55, cx - hw55, cy - hh, cx, cy - hh);
	closeSubPath();
}

void Path::addArc (const float x, const float y,
				   const float w, const float h,
				   const float fromRadians,
				   const float toRadians,
				   const bool startAsNewSubPath)
{
	const float radiusX = w / 2.0f;
	const float radiusY = h / 2.0f;

	addCentredArc (x + radiusX,
				   y + radiusY,
				   radiusX, radiusY,
				   0.0f,
				   fromRadians, toRadians,
				   startAsNewSubPath);
}

void Path::addCentredArc (const float centreX, const float centreY,
						  const float radiusX, const float radiusY,
						  const float rotationOfEllipse,
						  const float fromRadians,
						  float toRadians,
						  const bool startAsNewSubPath)
{
	if (radiusX > 0.0f && radiusY > 0.0f)
	{
		const Point<float> centre (centreX, centreY);
		const AffineTransform rotation (AffineTransform::rotation (rotationOfEllipse, centreX, centreY));
		float angle = fromRadians;

		if (startAsNewSubPath)
			startNewSubPath (centre.getPointOnCircumference (radiusX, radiusY, angle).transformedBy (rotation));

		if (fromRadians < toRadians)
		{
			if (startAsNewSubPath)
				angle += PathHelpers::ellipseAngularIncrement;

			while (angle < toRadians)
			{
				lineTo (centre.getPointOnCircumference (radiusX, radiusY, angle).transformedBy (rotation));
				angle += PathHelpers::ellipseAngularIncrement;
			}
		}
		else
		{
			if (startAsNewSubPath)
				angle -= PathHelpers::ellipseAngularIncrement;

			while (angle > toRadians)
			{
				lineTo (centre.getPointOnCircumference (radiusX, radiusY, angle).transformedBy (rotation));
				angle -= PathHelpers::ellipseAngularIncrement;
			}
		}

		lineTo (centre.getPointOnCircumference (radiusX, radiusY, toRadians).transformedBy (rotation));
	}
}

void Path::addPieSegment (const float x, const float y,
						  const float width, const float height,
						  const float fromRadians,
						  const float toRadians,
						  const float innerCircleProportionalSize)
{
	float radiusX = width * 0.5f;
	float radiusY = height * 0.5f;
	const Point<float> centre (x + radiusX, y + radiusY);

	startNewSubPath (centre.getPointOnCircumference (radiusX, radiusY, fromRadians));
	addArc (x, y, width, height, fromRadians, toRadians);

	if (std::abs (fromRadians - toRadians) > float_Pi * 1.999f)
	{
		closeSubPath();

		if (innerCircleProportionalSize > 0)
		{
			radiusX *= innerCircleProportionalSize;
			radiusY *= innerCircleProportionalSize;

			startNewSubPath (centre.getPointOnCircumference (radiusX, radiusY, toRadians));
			addArc (centre.x - radiusX, centre.y - radiusY, radiusX * 2.0f, radiusY * 2.0f, toRadians, fromRadians);
		}
	}
	else
	{
		if (innerCircleProportionalSize > 0)
		{
			radiusX *= innerCircleProportionalSize;
			radiusY *= innerCircleProportionalSize;

			addArc (centre.x - radiusX, centre.y - radiusY, radiusX * 2.0f, radiusY * 2.0f, toRadians, fromRadians);
		}
		else
		{
			lineTo (centre);
		}
	}

	closeSubPath();
}

void Path::addLineSegment (const Line<float>& line, float lineThickness)
{
	const Line<float> reversed (line.reversed());
	lineThickness *= 0.5f;

	startNewSubPath (line.getPointAlongLine (0, lineThickness));
	lineTo (line.getPointAlongLine (0, -lineThickness));
	lineTo (reversed.getPointAlongLine (0, lineThickness));
	lineTo (reversed.getPointAlongLine (0, -lineThickness));
	closeSubPath();
}

void Path::addArrow (const Line<float>& line, float lineThickness,
					 float arrowheadWidth, float arrowheadLength)
{
	const Line<float> reversed (line.reversed());
	lineThickness *= 0.5f;
	arrowheadWidth *= 0.5f;
	arrowheadLength = jmin (arrowheadLength, 0.8f * line.getLength());

	startNewSubPath (line.getPointAlongLine (0, lineThickness));
	lineTo (line.getPointAlongLine (0, -lineThickness));
	lineTo (reversed.getPointAlongLine (arrowheadLength, lineThickness));
	lineTo (reversed.getPointAlongLine (arrowheadLength, arrowheadWidth));
	lineTo (line.getEnd());
	lineTo (reversed.getPointAlongLine (arrowheadLength, -arrowheadWidth));
	lineTo (reversed.getPointAlongLine (arrowheadLength, -lineThickness));
	closeSubPath();
}

void Path::addPolygon (const Point<float>& centre, const int numberOfSides,
					   const float radius, const float startAngle)
{
	jassert (numberOfSides > 1); // this would be silly.

	if (numberOfSides > 1)
	{
		const float angleBetweenPoints = float_Pi * 2.0f / numberOfSides;

		for (int i = 0; i < numberOfSides; ++i)
		{
			const float angle = startAngle + i * angleBetweenPoints;
			const Point<float> p (centre.getPointOnCircumference (radius, angle));

			if (i == 0)
				startNewSubPath (p);
			else
				lineTo (p);
		}

		closeSubPath();
	}
}

void Path::addStar (const Point<float>& centre, const int numberOfPoints,
					const float innerRadius, const float outerRadius, const float startAngle)
{
	jassert (numberOfPoints > 1); // this would be silly.

	if (numberOfPoints > 1)
	{
		const float angleBetweenPoints = float_Pi * 2.0f / numberOfPoints;

		for (int i = 0; i < numberOfPoints; ++i)
		{
			const float angle = startAngle + i * angleBetweenPoints;
			const Point<float> p (centre.getPointOnCircumference (outerRadius, angle));

			if (i == 0)
				startNewSubPath (p);
			else
				lineTo (p);

			lineTo (centre.getPointOnCircumference (innerRadius, angle + angleBetweenPoints * 0.5f));
		}

		closeSubPath();
	}
}

void Path::addBubble (float x, float y,
					  float w, float h,
					  float cs,
					  float tipX,
					  float tipY,
					  int whichSide,
					  float arrowPos,
					  float arrowWidth)
{
	if (w > 1.0f && h > 1.0f)
	{
		cs = jmin (cs, w * 0.5f, h * 0.5f);
		const float cs2 = 2.0f * cs;

		startNewSubPath (x + cs, y);

		if (whichSide == 0)
		{
			const float halfArrowW = jmin (arrowWidth, w - cs2) * 0.5f;
			const float arrowX1 = x + cs + jmax (0.0f, (w - cs2 - arrowWidth) * arrowPos - halfArrowW);
			lineTo (arrowX1, y);
			lineTo (tipX, tipY);
			lineTo (arrowX1 + halfArrowW * 2.0f, y);
		}

		lineTo (x + w - cs, y);

		if (cs > 0.0f)
			addArc (x + w - cs2, y, cs2, cs2, 0, float_Pi * 0.5f);

		if (whichSide == 3)
		{
			const float halfArrowH = jmin (arrowWidth, h - cs2) * 0.5f;
			const float arrowY1 = y + cs + jmax (0.0f, (h - cs2 - arrowWidth) * arrowPos - halfArrowH);
			lineTo (x + w, arrowY1);
			lineTo (tipX, tipY);
			lineTo (x + w, arrowY1 + halfArrowH * 2.0f);
		}

		lineTo (x + w, y + h - cs);

		if (cs > 0.0f)
			addArc (x + w - cs2, y + h - cs2, cs2, cs2, float_Pi * 0.5f, float_Pi);

		if (whichSide == 2)
		{
			const float halfArrowW = jmin (arrowWidth, w - cs2) * 0.5f;
			const float arrowX1 = x + cs + jmax (0.0f, (w - cs2 - arrowWidth) * arrowPos - halfArrowW);
			lineTo (arrowX1 + halfArrowW * 2.0f, y + h);
			lineTo (tipX, tipY);
			lineTo (arrowX1, y + h);
		}

		lineTo (x + cs, y + h);

		if (cs > 0.0f)
			addArc (x, y + h - cs2, cs2, cs2, float_Pi, float_Pi * 1.5f);

		if (whichSide == 1)
		{
			const float halfArrowH = jmin (arrowWidth, h - cs2) * 0.5f;
			const float arrowY1 = y + cs + jmax (0.0f, (h - cs2 - arrowWidth) * arrowPos - halfArrowH);
			lineTo (x, arrowY1 + halfArrowH * 2.0f);
			lineTo (tipX, tipY);
			lineTo (x, arrowY1);
		}

		lineTo (x, y + cs);

		if (cs > 0.0f)
			addArc (x, y, cs2, cs2, float_Pi * 1.5f, float_Pi * 2.0f - PathHelpers::ellipseAngularIncrement);

		closeSubPath();
	}
}

void Path::addPath (const Path& other)
{
	size_t i = 0;

	while (i < other.numElements)
	{
		const float type = other.data.elements [i++];

		if (type == moveMarker)
		{
			startNewSubPath (other.data.elements [i],
							 other.data.elements [i + 1]);

			i += 2;
		}
		else if (type == lineMarker)
		{
			lineTo (other.data.elements [i],
					other.data.elements [i + 1]);

			i += 2;
		}
		else if (type == quadMarker)
		{
			quadraticTo (other.data.elements [i],
						 other.data.elements [i + 1],
						 other.data.elements [i + 2],
						 other.data.elements [i + 3]);
			i += 4;
		}
		else if (type == cubicMarker)
		{
			cubicTo (other.data.elements [i],
					 other.data.elements [i + 1],
					 other.data.elements [i + 2],
					 other.data.elements [i + 3],
					 other.data.elements [i + 4],
					 other.data.elements [i + 5]);

			i += 6;
		}
		else if (type == closeSubPathMarker)
		{
			closeSubPath();
		}
		else
		{
			// something's gone wrong with the element list!
			jassertfalse;
		}
	}
}

void Path::addPath (const Path& other,
					const AffineTransform& transformToApply)
{
	size_t i = 0;

	while (i < other.numElements)
	{
		const float type = other.data.elements [i++];

		if (type == closeSubPathMarker)
		{
			closeSubPath();
		}
		else
		{
			float x = other.data.elements [i++];
			float y = other.data.elements [i++];
			transformToApply.transformPoint (x, y);

			if (type == moveMarker)
			{
				startNewSubPath (x, y);
			}
			else if (type == lineMarker)
			{
				lineTo (x, y);
			}
			else if (type == quadMarker)
			{
				float x2 = other.data.elements [i++];
				float y2 = other.data.elements [i++];
				transformToApply.transformPoint (x2, y2);

				quadraticTo (x, y, x2, y2);
			}
			else if (type == cubicMarker)
			{
				float x2 = other.data.elements [i++];
				float y2 = other.data.elements [i++];
				float x3 = other.data.elements [i++];
				float y3 = other.data.elements [i++];
				transformToApply.transformPoints (x2, y2, x3, y3);

				cubicTo (x, y, x2, y2, x3, y3);
			}
			else
			{
				// something's gone wrong with the element list!
				jassertfalse;
			}
		}
	}
}

void Path::applyTransform (const AffineTransform& transform) noexcept
{
	size_t i = 0;
	pathYMin = pathXMin = 0;
	pathYMax = pathXMax = 0;
	bool setMaxMin = false;

	while (i < numElements)
	{
		const float type = data.elements [i++];

		if (type == moveMarker)
		{
			transform.transformPoint (data.elements [i], data.elements [i + 1]);

			if (setMaxMin)
			{
				pathXMin = jmin (pathXMin, data.elements [i]);
				pathXMax = jmax (pathXMax, data.elements [i]);
				pathYMin = jmin (pathYMin, data.elements [i + 1]);
				pathYMax = jmax (pathYMax, data.elements [i + 1]);
			}
			else
			{
				pathXMin = pathXMax = data.elements [i];
				pathYMin = pathYMax = data.elements [i + 1];
				setMaxMin = true;
			}

			i += 2;
		}
		else if (type == lineMarker)
		{
			transform.transformPoint (data.elements [i], data.elements [i + 1]);

			pathXMin = jmin (pathXMin, data.elements [i]);
			pathXMax = jmax (pathXMax, data.elements [i]);
			pathYMin = jmin (pathYMin, data.elements [i + 1]);
			pathYMax = jmax (pathYMax, data.elements [i + 1]);

			i += 2;
		}
		else if (type == quadMarker)
		{
			transform.transformPoints (data.elements [i], data.elements [i + 1],
									   data.elements [i + 2], data.elements [i + 3]);

			pathXMin = jmin (pathXMin, data.elements [i], data.elements [i + 2]);
			pathXMax = jmax (pathXMax, data.elements [i], data.elements [i + 2]);
			pathYMin = jmin (pathYMin, data.elements [i + 1], data.elements [i + 3]);
			pathYMax = jmax (pathYMax, data.elements [i + 1], data.elements [i + 3]);

			i += 4;
		}
		else if (type == cubicMarker)
		{
			transform.transformPoints (data.elements [i], data.elements [i + 1],
									   data.elements [i + 2], data.elements [i + 3],
									   data.elements [i + 4], data.elements [i + 5]);

			pathXMin = jmin (pathXMin, data.elements [i], data.elements [i + 2], data.elements [i + 4]);
			pathXMax = jmax (pathXMax, data.elements [i], data.elements [i + 2], data.elements [i + 4]);
			pathYMin = jmin (pathYMin, data.elements [i + 1], data.elements [i + 3], data.elements [i + 5]);
			pathYMax = jmax (pathYMax, data.elements [i + 1], data.elements [i + 3], data.elements [i + 5]);

			i += 6;
		}
	}
}

AffineTransform Path::getTransformToScaleToFit (const float x, const float y,
												const float w, const float h,
												const bool preserveProportions,
												const Justification& justification) const
{
	Rectangle<float> bounds (getBounds());

	if (preserveProportions)
	{
		if (w <= 0 || h <= 0 || bounds.isEmpty())
			return AffineTransform::identity;

		float newW, newH;
		const float srcRatio = bounds.getHeight() / bounds.getWidth();

		if (srcRatio > h / w)
		{
			newW = h / srcRatio;
			newH = h;
		}
		else
		{
			newW = w;
			newH = w * srcRatio;
		}

		float newXCentre = x;
		float newYCentre = y;

		if (justification.testFlags (Justification::left))          newXCentre += newW * 0.5f;
		else if (justification.testFlags (Justification::right))    newXCentre += w - newW * 0.5f;
		else                                                        newXCentre += w * 0.5f;

		if (justification.testFlags (Justification::top))           newYCentre += newH * 0.5f;
		else if (justification.testFlags (Justification::bottom))   newYCentre += h - newH * 0.5f;
		else                                                        newYCentre += h * 0.5f;

		return AffineTransform::translation (bounds.getWidth()  * -0.5f - bounds.getX(),
											 bounds.getHeight() * -0.5f - bounds.getY())
					.scaled (newW / bounds.getWidth(),
							 newH / bounds.getHeight())
					.translated (newXCentre, newYCentre);
	}
	else
	{
		return AffineTransform::translation (-bounds.getX(), -bounds.getY())
					.scaled (w / bounds.getWidth(),
							 h / bounds.getHeight())
					.translated (x, y);
	}
}

bool Path::contains (const float x, const float y, const float tolerance) const
{
	if (x <= pathXMin || x >= pathXMax
		 || y <= pathYMin || y >= pathYMax)
		return false;

	PathFlatteningIterator i (*this, AffineTransform::identity, tolerance);

	int positiveCrossings = 0;
	int negativeCrossings = 0;

	while (i.next())
	{
		if ((i.y1 <= y && i.y2 > y) || (i.y2 <= y && i.y1 > y))
		{
			const float intersectX = i.x1 + (i.x2 - i.x1) * (y - i.y1) / (i.y2 - i.y1);

			if (intersectX <= x)
			{
				if (i.y1 < i.y2)
					++positiveCrossings;
				else
					++negativeCrossings;
			}
		}
	}

	return useNonZeroWinding ? (negativeCrossings != positiveCrossings)
							 : ((negativeCrossings + positiveCrossings) & 1) != 0;
}

bool Path::contains (const Point<float>& point, const float tolerance) const
{
	return contains (point.x, point.y, tolerance);
}

bool Path::intersectsLine (const Line<float>& line, const float tolerance)
{
	PathFlatteningIterator i (*this, AffineTransform::identity, tolerance);
	Point<float> intersection;

	while (i.next())
		if (line.intersects (Line<float> (i.x1, i.y1, i.x2, i.y2), intersection))
			return true;

	return false;
}

Line<float> Path::getClippedLine (const Line<float>& line, const bool keepSectionOutsidePath) const
{
	Line<float> result (line);
	const bool startInside = contains (line.getStart());
	const bool endInside   = contains (line.getEnd());

	if (startInside == endInside)
	{
		if (keepSectionOutsidePath == startInside)
			result = Line<float>();
	}
	else
	{
		PathFlatteningIterator i (*this, AffineTransform::identity);
		Point<float> intersection;

		while (i.next())
		{
			if (line.intersects (Line<float> (i.x1, i.y1, i.x2, i.y2), intersection))
			{
				if ((startInside && keepSectionOutsidePath) || (endInside && ! keepSectionOutsidePath))
					result.setStart (intersection);
				else
					result.setEnd (intersection);
			}
		}
	}

	return result;
}

float Path::getLength (const AffineTransform& transform) const
{
	float length = 0;
	PathFlatteningIterator i (*this, transform);

	while (i.next())
		length += Line<float> (i.x1, i.y1, i.x2, i.y2).getLength();

	return length;
}

Point<float> Path::getPointAlongPath (float distanceFromStart, const AffineTransform& transform) const
{
	PathFlatteningIterator i (*this, transform);

	while (i.next())
	{
		const Line<float> line (i.x1, i.y1, i.x2, i.y2);
		const float lineLength = line.getLength();

		if (distanceFromStart <= lineLength)
			return line.getPointAlongLine (distanceFromStart);

		distanceFromStart -= lineLength;
	}

	return Point<float> (i.x2, i.y2);
}

float Path::getNearestPoint (const Point<float>& targetPoint, Point<float>& pointOnPath,
							 const AffineTransform& transform) const
{
	PathFlatteningIterator i (*this, transform);
	float bestPosition = 0, bestDistance = std::numeric_limits<float>::max();
	float length = 0;
	Point<float> pointOnLine;

	while (i.next())
	{
		const Line<float> line (i.x1, i.y1, i.x2, i.y2);
		const float distance = line.getDistanceFromPoint (targetPoint, pointOnLine);

		if (distance < bestDistance)
		{
			bestDistance = distance;
			bestPosition = length + pointOnLine.getDistanceFrom (line.getStart());
			pointOnPath = pointOnLine;
		}

		length += line.getLength();
	}

	return bestPosition;
}

Path Path::createPathWithRoundedCorners (const float cornerRadius) const
{
	if (cornerRadius <= 0.01f)
		return *this;

	size_t indexOfPathStart = 0, indexOfPathStartThis = 0;
	size_t n = 0;
	bool lastWasLine = false, firstWasLine = false;
	Path p;

	while (n < numElements)
	{
		const float type = data.elements [n++];

		if (type == moveMarker)
		{
			indexOfPathStart = p.numElements;
			indexOfPathStartThis = n - 1;
			const float x = data.elements [n++];
			const float y = data.elements [n++];
			p.startNewSubPath (x, y);
			lastWasLine = false;
			firstWasLine = (data.elements [n] == lineMarker);
		}
		else if (type == lineMarker || type == closeSubPathMarker)
		{
			float startX = 0, startY = 0, joinX = 0, joinY = 0, endX, endY;

			if (type == lineMarker)
			{
				endX = data.elements [n++];
				endY = data.elements [n++];

				if (n > 8)
				{
					startX = data.elements [n - 8];
					startY = data.elements [n - 7];
					joinX  = data.elements [n - 5];
					joinY  = data.elements [n - 4];
				}
			}
			else
			{
				endX = data.elements [indexOfPathStartThis + 1];
				endY = data.elements [indexOfPathStartThis + 2];

				if (n > 6)
				{
					startX = data.elements [n - 6];
					startY = data.elements [n - 5];
					joinX  = data.elements [n - 3];
					joinY  = data.elements [n - 2];
				}
			}

			if (lastWasLine)
			{
				const double len1 = PathHelpers::lengthOf (startX, startY, joinX, joinY);

				if (len1 > 0)
				{
					const double propNeeded = jmin (0.5, cornerRadius / len1);

					p.data.elements [p.numElements - 2] = (float) (joinX - (joinX - startX) * propNeeded);
					p.data.elements [p.numElements - 1] = (float) (joinY - (joinY - startY) * propNeeded);
				}

				const double len2 = PathHelpers::lengthOf (endX, endY, joinX, joinY);

				if (len2 > 0)
				{
					const double propNeeded = jmin (0.5, cornerRadius / len2);

					p.quadraticTo (joinX, joinY,
								   (float) (joinX + (endX - joinX) * propNeeded),
								   (float) (joinY + (endY - joinY) * propNeeded));
				}

				p.lineTo (endX, endY);
			}
			else if (type == lineMarker)
			{
				p.lineTo (endX, endY);
				lastWasLine = true;
			}

			if (type == closeSubPathMarker)
			{
				if (firstWasLine)
				{
					startX = data.elements [n - 3];
					startY = data.elements [n - 2];
					joinX = endX;
					joinY = endY;
					endX = data.elements [indexOfPathStartThis + 4];
					endY = data.elements [indexOfPathStartThis + 5];

					const double len1 = PathHelpers::lengthOf (startX, startY, joinX, joinY);

					if (len1 > 0)
					{
						const double propNeeded = jmin (0.5, cornerRadius / len1);

						p.data.elements [p.numElements - 2] = (float) (joinX - (joinX - startX) * propNeeded);
						p.data.elements [p.numElements - 1] = (float) (joinY - (joinY - startY) * propNeeded);
					}

					const double len2 = PathHelpers::lengthOf (endX, endY, joinX, joinY);

					if (len2 > 0)
					{
						const double propNeeded = jmin (0.5, cornerRadius / len2);

						endX = (float) (joinX + (endX - joinX) * propNeeded);
						endY = (float) (joinY + (endY - joinY) * propNeeded);

						p.quadraticTo (joinX, joinY, endX, endY);

						p.data.elements [indexOfPathStart + 1] = endX;
						p.data.elements [indexOfPathStart + 2] = endY;
					}
				}

				p.closeSubPath();
			}
		}
		else if (type == quadMarker)
		{
			lastWasLine = false;
			const float x1 = data.elements [n++];
			const float y1 = data.elements [n++];
			const float x2 = data.elements [n++];
			const float y2 = data.elements [n++];
			p.quadraticTo (x1, y1, x2, y2);
		}
		else if (type == cubicMarker)
		{
			lastWasLine = false;
			const float x1 = data.elements [n++];
			const float y1 = data.elements [n++];
			const float x2 = data.elements [n++];
			const float y2 = data.elements [n++];
			const float x3 = data.elements [n++];
			const float y3 = data.elements [n++];
			p.cubicTo (x1, y1, x2, y2, x3, y3);
		}
	}

	return p;
}

void Path::loadPathFromStream (InputStream& source)
{
	while (! source.isExhausted())
	{
		switch (source.readByte())
		{
		case 'm':
		{
			const float x = source.readFloat();
			const float y = source.readFloat();
			startNewSubPath (x, y);
			break;
		}

		case 'l':
		{
			const float x = source.readFloat();
			const float y = source.readFloat();
			lineTo (x, y);
			break;
		}

		case 'q':
		{
			const float x1 = source.readFloat();
			const float y1 = source.readFloat();
			const float x2 = source.readFloat();
			const float y2 = source.readFloat();
			quadraticTo (x1, y1, x2, y2);
			break;
		}

		case 'b':
		{
			const float x1 = source.readFloat();
			const float y1 = source.readFloat();
			const float x2 = source.readFloat();
			const float y2 = source.readFloat();
			const float x3 = source.readFloat();
			const float y3 = source.readFloat();
			cubicTo (x1, y1, x2, y2, x3, y3);
			break;
		}

		case 'c':
			closeSubPath();
			break;

		case 'n':
			useNonZeroWinding = true;
			break;

		case 'z':
			useNonZeroWinding = false;
			break;

		case 'e':
			return; // end of path marker

		default:
			jassertfalse; // illegal char in the stream
			break;
		}
	}
}

void Path::loadPathFromData (const void* const pathData, const size_t numberOfBytes)
{
	MemoryInputStream in (pathData, numberOfBytes, false);
	loadPathFromStream (in);
}

void Path::writePathToStream (OutputStream& dest) const
{
	dest.writeByte (useNonZeroWinding ? 'n' : 'z');

	size_t i = 0;
	while (i < numElements)
	{
		const float type = data.elements [i++];

		if (type == moveMarker)
		{
			dest.writeByte ('m');
			dest.writeFloat (data.elements [i++]);
			dest.writeFloat (data.elements [i++]);
		}
		else if (type == lineMarker)
		{
			dest.writeByte ('l');
			dest.writeFloat (data.elements [i++]);
			dest.writeFloat (data.elements [i++]);
		}
		else if (type == quadMarker)
		{
			dest.writeByte ('q');
			dest.writeFloat (data.elements [i++]);
			dest.writeFloat (data.elements [i++]);
			dest.writeFloat (data.elements [i++]);
			dest.writeFloat (data.elements [i++]);
		}
		else if (type == cubicMarker)
		{
			dest.writeByte ('b');
			dest.writeFloat (data.elements [i++]);
			dest.writeFloat (data.elements [i++]);
			dest.writeFloat (data.elements [i++]);
			dest.writeFloat (data.elements [i++]);
			dest.writeFloat (data.elements [i++]);
			dest.writeFloat (data.elements [i++]);
		}
		else if (type == closeSubPathMarker)
		{
			dest.writeByte ('c');
		}
	}

	dest.writeByte ('e'); // marks the end-of-path
}

String Path::toString() const
{
	MemoryOutputStream s (2048);
	if (! useNonZeroWinding)
		s << 'a';

	size_t i = 0;
	float lastMarker = 0.0f;

	while (i < numElements)
	{
		const float marker = data.elements [i++];
		char markerChar = 0;
		int numCoords = 0;

		if (marker == moveMarker)
		{
			markerChar = 'm';
			numCoords = 2;
		}
		else if (marker == lineMarker)
		{
			markerChar = 'l';
			numCoords = 2;
		}
		else if (marker == quadMarker)
		{
			markerChar = 'q';
			numCoords = 4;
		}
		else if (marker == cubicMarker)
		{
			markerChar = 'c';
			numCoords = 6;
		}
		else
		{
			jassert (marker == closeSubPathMarker);
			markerChar = 'z';
		}

		if (marker != lastMarker)
		{
			if (s.getDataSize() != 0)
				s << ' ';

			s << markerChar;
			lastMarker = marker;
		}

		while (--numCoords >= 0 && i < numElements)
		{
			String coord (data.elements [i++], 3);

			while (coord.endsWithChar ('0') && coord != "0")
				coord = coord.dropLastCharacters (1);

			if (coord.endsWithChar ('.'))
				coord = coord.dropLastCharacters (1);

			if (s.getDataSize() != 0)
				s << ' ';

			s << coord;
		}
	}

	return s.toUTF8();
}

void Path::restoreFromString (const String& stringVersion)
{
	clear();
	setUsingNonZeroWinding (true);

	String::CharPointerType t (stringVersion.getCharPointer());
	juce_wchar marker = 'm';
	int numValues = 2;
	float values [6];

	for (;;)
	{
		const String token (PathHelpers::nextToken (t));
		const juce_wchar firstChar = token[0];
		int startNum = 0;

		if (firstChar == 0)
			break;

		if (firstChar == 'm' || firstChar == 'l')
		{
			marker = firstChar;
			numValues = 2;
		}
		else if (firstChar == 'q')
		{
			marker = firstChar;
			numValues = 4;
		}
		else if (firstChar == 'c')
		{
			marker = firstChar;
			numValues = 6;
		}
		else if (firstChar == 'z')
		{
			marker = firstChar;
			numValues = 0;
		}
		else if (firstChar == 'a')
		{
			setUsingNonZeroWinding (false);
			continue;
		}
		else
		{
			++startNum;
			values [0] = token.getFloatValue();
		}

		for (int i = startNum; i < numValues; ++i)
			values [i] = PathHelpers::nextToken (t).getFloatValue();

		switch (marker)
		{
			case 'm':   startNewSubPath (values[0], values[1]); break;
			case 'l':   lineTo (values[0], values[1]); break;
			case 'q':   quadraticTo (values[0], values[1], values[2], values[3]); break;
			case 'c':   cubicTo (values[0], values[1], values[2], values[3], values[4], values[5]); break;
			case 'z':   closeSubPath(); break;
			default:    jassertfalse; break; // illegal string format?
		}
	}
}

Path::Iterator::Iterator (const Path& path_)
	: path (path_),
	  index (0)
{
}

Path::Iterator::~Iterator()
{
}

bool Path::Iterator::next()
{
	const float* const elements = path.data.elements;

	if (index < path.numElements)
	{
		const float type = elements [index++];

		if (type == moveMarker)
		{
			elementType = startNewSubPath;
			x1 = elements [index++];
			y1 = elements [index++];
		}
		else if (type == lineMarker)
		{
			elementType = lineTo;
			x1 = elements [index++];
			y1 = elements [index++];
		}
		else if (type == quadMarker)
		{
			elementType = quadraticTo;
			x1 = elements [index++];
			y1 = elements [index++];
			x2 = elements [index++];
			y2 = elements [index++];
		}
		else if (type == cubicMarker)
		{
			elementType = cubicTo;
			x1 = elements [index++];
			y1 = elements [index++];
			x2 = elements [index++];
			y2 = elements [index++];
			x3 = elements [index++];
			y3 = elements [index++];
		}
		else if (type == closeSubPathMarker)
		{
			elementType = closePath;
		}

		return true;
	}

	return false;
}

#undef JUCE_CHECK_COORDS_ARE_VALID

/*** End of inlined file: juce_Path.cpp ***/


/*** Start of inlined file: juce_PathIterator.cpp ***/
#if JUCE_MSVC && JUCE_DEBUG
 #pragma optimize ("t", on)
#endif

const float PathFlatteningIterator::defaultTolerance = 0.6f;

PathFlatteningIterator::PathFlatteningIterator (const Path& path_,
												const AffineTransform& transform_,
												const float tolerance)
	: x2 (0),
	  y2 (0),
	  closesSubPath (false),
	  subPathIndex (-1),
	  path (path_),
	  transform (transform_),
	  points (path_.data.elements),
	  toleranceSquared (tolerance * tolerance),
	  subPathCloseX (0),
	  subPathCloseY (0),
	  isIdentityTransform (transform_.isIdentity()),
	  stackBase (32),
	  index (0),
	  stackSize (32)
{
	stackPos = stackBase;
}

PathFlatteningIterator::~PathFlatteningIterator()
{
}

bool PathFlatteningIterator::isLastInSubpath() const noexcept
{
	return stackPos == stackBase.getData()
			 && (index >= path.numElements || points [index] == Path::moveMarker);
}

bool PathFlatteningIterator::next()
{
	x1 = x2;
	y1 = y2;

	float x3 = 0;
	float y3 = 0;
	float x4 = 0;
	float y4 = 0;
	float type;

	for (;;)
	{
		if (stackPos == stackBase)
		{
			if (index >= path.numElements)
			{
				return false;
			}
			else
			{
				type = points [index++];

				if (type != Path::closeSubPathMarker)
				{
					x2 = points [index++];
					y2 = points [index++];

					if (type == Path::quadMarker)
					{
						x3 = points [index++];
						y3 = points [index++];

						if (! isIdentityTransform)
							transform.transformPoints (x2, y2, x3, y3);
					}
					else if (type == Path::cubicMarker)
					{
						x3 = points [index++];
						y3 = points [index++];
						x4 = points [index++];
						y4 = points [index++];

						if (! isIdentityTransform)
							transform.transformPoints (x2, y2, x3, y3, x4, y4);
					}
					else
					{
						if (! isIdentityTransform)
							transform.transformPoint (x2, y2);
					}
				}
			}
		}
		else
		{
			type = *--stackPos;

			if (type != Path::closeSubPathMarker)
			{
				x2 = *--stackPos;
				y2 = *--stackPos;

				if (type == Path::quadMarker)
				{
					x3 = *--stackPos;
					y3 = *--stackPos;
				}
				else if (type == Path::cubicMarker)
				{
					x3 = *--stackPos;
					y3 = *--stackPos;
					x4 = *--stackPos;
					y4 = *--stackPos;
				}
			}
		}

		if (type == Path::lineMarker)
		{
			++subPathIndex;

			closesSubPath = (stackPos == stackBase)
							 && (index < path.numElements)
							 && (points [index] == Path::closeSubPathMarker)
							 && x2 == subPathCloseX
							 && y2 == subPathCloseY;

			return true;
		}
		else if (type == Path::quadMarker)
		{
			const size_t offset = (size_t) (stackPos - stackBase);

			if (offset >= stackSize - 10)
			{
				stackSize <<= 1;
				stackBase.realloc (stackSize);
				stackPos = stackBase + offset;
			}

			const float m1x = (x1 + x2) * 0.5f;
			const float m1y = (y1 + y2) * 0.5f;
			const float m2x = (x2 + x3) * 0.5f;
			const float m2y = (y2 + y3) * 0.5f;
			const float m3x = (m1x + m2x) * 0.5f;
			const float m3y = (m1y + m2y) * 0.5f;

			const float errorX = m3x - x2;
			const float errorY = m3y - y2;

			if (errorX * errorX + errorY * errorY > toleranceSquared)
			{
				*stackPos++ = y3;
				*stackPos++ = x3;
				*stackPos++ = m2y;
				*stackPos++ = m2x;
				*stackPos++ = Path::quadMarker;

				*stackPos++ = m3y;
				*stackPos++ = m3x;
				*stackPos++ = m1y;
				*stackPos++ = m1x;
				*stackPos++ = Path::quadMarker;
			}
			else
			{
				*stackPos++ = y3;
				*stackPos++ = x3;
				*stackPos++ = Path::lineMarker;

				*stackPos++ = m3y;
				*stackPos++ = m3x;
				*stackPos++ = Path::lineMarker;
			}

			jassert (stackPos < stackBase + stackSize);
		}
		else if (type == Path::cubicMarker)
		{
			const size_t offset = (size_t) (stackPos - stackBase);

			if (offset >= stackSize - 16)
			{
				stackSize <<= 1;
				stackBase.realloc (stackSize);
				stackPos = stackBase + offset;
			}

			const float m1x = (x1 + x2) * 0.5f;
			const float m1y = (y1 + y2) * 0.5f;
			const float m2x = (x3 + x2) * 0.5f;
			const float m2y = (y3 + y2) * 0.5f;
			const float m3x = (x3 + x4) * 0.5f;
			const float m3y = (y3 + y4) * 0.5f;
			const float m4x = (m1x + m2x) * 0.5f;
			const float m4y = (m1y + m2y) * 0.5f;
			const float m5x = (m3x + m2x) * 0.5f;
			const float m5y = (m3y + m2y) * 0.5f;

			const float error1X = m4x - x2;
			const float error1Y = m4y - y2;
			const float error2X = m5x - x3;
			const float error2Y = m5y - y3;

			if (error1X * error1X + error1Y * error1Y > toleranceSquared
				 || error2X * error2X + error2Y * error2Y > toleranceSquared)
			{
				*stackPos++ = y4;
				*stackPos++ = x4;
				*stackPos++ = m3y;
				*stackPos++ = m3x;
				*stackPos++ = m5y;
				*stackPos++ = m5x;
				*stackPos++ = Path::cubicMarker;

				*stackPos++ = (m4y + m5y) * 0.5f;
				*stackPos++ = (m4x + m5x) * 0.5f;
				*stackPos++ = m4y;
				*stackPos++ = m4x;
				*stackPos++ = m1y;
				*stackPos++ = m1x;
				*stackPos++ = Path::cubicMarker;
			}
			else
			{
				*stackPos++ = y4;
				*stackPos++ = x4;
				*stackPos++ = Path::lineMarker;

				*stackPos++ = m5y;
				*stackPos++ = m5x;
				*stackPos++ = Path::lineMarker;

				*stackPos++ = m4y;
				*stackPos++ = m4x;
				*stackPos++ = Path::lineMarker;
			}
		}
		else if (type == Path::closeSubPathMarker)
		{
			if (x2 != subPathCloseX || y2 != subPathCloseY)
			{
				x1 = x2;
				y1 = y2;
				x2 = subPathCloseX;
				y2 = subPathCloseY;
				closesSubPath = true;

				return true;
			}
		}
		else
		{
			jassert (type == Path::moveMarker);

			subPathIndex = -1;
			subPathCloseX = x1 = x2;
			subPathCloseY = y1 = y2;
		}
	}
}

#if JUCE_MSVC && JUCE_DEBUG
  #pragma optimize ("", on)  // resets optimisations to the project defaults
#endif

/*** End of inlined file: juce_PathIterator.cpp ***/


/*** Start of inlined file: juce_PathStrokeType.cpp ***/
PathStrokeType::PathStrokeType (const float strokeThickness,
								const JointStyle jointStyle_,
								const EndCapStyle endStyle_) noexcept
	: thickness (strokeThickness),
	  jointStyle (jointStyle_),
	  endStyle (endStyle_)
{
}

PathStrokeType::PathStrokeType (const PathStrokeType& other) noexcept
	: thickness (other.thickness),
	  jointStyle (other.jointStyle),
	  endStyle (other.endStyle)
{
}

PathStrokeType& PathStrokeType::operator= (const PathStrokeType& other) noexcept
{
	thickness = other.thickness;
	jointStyle = other.jointStyle;
	endStyle = other.endStyle;
	return *this;
}

PathStrokeType::~PathStrokeType() noexcept
{
}

bool PathStrokeType::operator== (const PathStrokeType& other) const noexcept
{
	return thickness == other.thickness
		&& jointStyle == other.jointStyle
		&& endStyle == other.endStyle;
}

bool PathStrokeType::operator!= (const PathStrokeType& other) const noexcept
{
	return ! operator== (other);
}

namespace PathStrokeHelpers
{
	bool lineIntersection (const float x1, const float y1,
						   const float x2, const float y2,
						   const float x3, const float y3,
						   const float x4, const float y4,
						   float& intersectionX,
						   float& intersectionY,
						   float& distanceBeyondLine1EndSquared) noexcept
	{
		if (x2 != x3 || y2 != y3)
		{
			const float dx1 = x2 - x1;
			const float dy1 = y2 - y1;
			const float dx2 = x4 - x3;
			const float dy2 = y4 - y3;
			const float divisor = dx1 * dy2 - dx2 * dy1;

			if (divisor == 0)
			{
				if (! ((dx1 == 0 && dy1 == 0) || (dx2 == 0 && dy2 == 0)))
				{
					if (dy1 == 0 && dy2 != 0)
					{
						const float along = (y1 - y3) / dy2;
						intersectionX = x3 + along * dx2;
						intersectionY = y1;

						distanceBeyondLine1EndSquared = intersectionX - x2;
						distanceBeyondLine1EndSquared *= distanceBeyondLine1EndSquared;
						if ((x2 > x1) == (intersectionX < x2))
							distanceBeyondLine1EndSquared = -distanceBeyondLine1EndSquared;

						return along >= 0 && along <= 1.0f;
					}
					else if (dy2 == 0 && dy1 != 0)
					{
						const float along = (y3 - y1) / dy1;
						intersectionX = x1 + along * dx1;
						intersectionY = y3;

						distanceBeyondLine1EndSquared = (along - 1.0f) * dx1;
						distanceBeyondLine1EndSquared *= distanceBeyondLine1EndSquared;
						if (along < 1.0f)
							distanceBeyondLine1EndSquared = -distanceBeyondLine1EndSquared;

						return along >= 0 && along <= 1.0f;
					}
					else if (dx1 == 0 && dx2 != 0)
					{
						const float along = (x1 - x3) / dx2;
						intersectionX = x1;
						intersectionY = y3 + along * dy2;

						distanceBeyondLine1EndSquared = intersectionY - y2;
						distanceBeyondLine1EndSquared *= distanceBeyondLine1EndSquared;

						if ((y2 > y1) == (intersectionY < y2))
							distanceBeyondLine1EndSquared = -distanceBeyondLine1EndSquared;

						return along >= 0 && along <= 1.0f;
					}
					else if (dx2 == 0 && dx1 != 0)
					{
						const float along = (x3 - x1) / dx1;
						intersectionX = x3;
						intersectionY = y1 + along * dy1;

						distanceBeyondLine1EndSquared = (along - 1.0f) * dy1;
						distanceBeyondLine1EndSquared *= distanceBeyondLine1EndSquared;
						if (along < 1.0f)
							distanceBeyondLine1EndSquared = -distanceBeyondLine1EndSquared;

						return along >= 0 && along <= 1.0f;
					}
				}

				intersectionX = 0.5f * (x2 + x3);
				intersectionY = 0.5f * (y2 + y3);

				distanceBeyondLine1EndSquared = 0.0f;
				return false;
			}
			else
			{
				const float along1 = ((y1 - y3) * dx2 - (x1 - x3) * dy2) / divisor;

				intersectionX = x1 + along1 * dx1;
				intersectionY = y1 + along1 * dy1;

				if (along1 >= 0 && along1 <= 1.0f)
				{
					const float along2 = ((y1 - y3) * dx1 - (x1 - x3) * dy1);

					if (along2 >= 0 && along2 <= divisor)
					{
						distanceBeyondLine1EndSquared = 0.0f;
						return true;
					}
				}

				distanceBeyondLine1EndSquared = along1 - 1.0f;
				distanceBeyondLine1EndSquared *= distanceBeyondLine1EndSquared;
				distanceBeyondLine1EndSquared *= (dx1 * dx1 + dy1 * dy1);

				if (along1 < 1.0f)
					distanceBeyondLine1EndSquared = -distanceBeyondLine1EndSquared;

				return false;
			}
		}

		intersectionX = x2;
		intersectionY = y2;

		distanceBeyondLine1EndSquared = 0.0f;
		return true;
	}

	void addEdgeAndJoint (Path& destPath,
						  const PathStrokeType::JointStyle style,
						  const float maxMiterExtensionSquared, const float width,
						  const float x1, const float y1,
						  const float x2, const float y2,
						  const float x3, const float y3,
						  const float x4, const float y4,
						  const float midX, const float midY)
	{
		if (style == PathStrokeType::beveled
			|| (x3 == x4 && y3 == y4)
			|| (x1 == x2 && y1 == y2))
		{
			destPath.lineTo (x2, y2);
			destPath.lineTo (x3, y3);
		}
		else
		{
			float jx, jy, distanceBeyondLine1EndSquared;

			// if they intersect, use this point..
			if (lineIntersection (x1, y1, x2, y2,
								  x3, y3, x4, y4,
								  jx, jy, distanceBeyondLine1EndSquared))
			{
				destPath.lineTo (jx, jy);
			}
			else
			{
				if (style == PathStrokeType::mitered)
				{
					if (distanceBeyondLine1EndSquared < maxMiterExtensionSquared
						&& distanceBeyondLine1EndSquared > 0.0f)
					{
						destPath.lineTo (jx, jy);
					}
					else
					{
						// the end sticks out too far, so just use a blunt joint
						destPath.lineTo (x2, y2);
						destPath.lineTo (x3, y3);
					}
				}
				else
				{
					// curved joints
					float angle1 = std::atan2 (x2 - midX, y2 - midY);
					float angle2 = std::atan2 (x3 - midX, y3 - midY);
					const float angleIncrement = 0.1f;

					destPath.lineTo (x2, y2);

					if (std::abs (angle1 - angle2) > angleIncrement)
					{
						if (angle2 > angle1 + float_Pi
							 || (angle2 < angle1 && angle2 >= angle1 - float_Pi))
						{
							if (angle2 > angle1)
								angle2 -= float_Pi * 2.0f;

							jassert (angle1 <= angle2 + float_Pi);

							angle1 -= angleIncrement;
							while (angle1 > angle2)
							{
								destPath.lineTo (midX + width * std::sin (angle1),
												 midY + width * std::cos (angle1));

								angle1 -= angleIncrement;
							}
						}
						else
						{
							if (angle1 > angle2)
								angle1 -= float_Pi * 2.0f;

							jassert (angle1 >= angle2 - float_Pi);

							angle1 += angleIncrement;
							while (angle1 < angle2)
							{
								destPath.lineTo (midX + width * std::sin (angle1),
												 midY + width * std::cos (angle1));

								angle1 += angleIncrement;
							}
						}
					}

					destPath.lineTo (x3, y3);
				}
			}
		}
	}

	void addLineEnd (Path& destPath,
					 const PathStrokeType::EndCapStyle style,
					 const float x1, const float y1,
					 const float x2, const float y2,
					 const float width)
	{
		if (style == PathStrokeType::butt)
		{
			destPath.lineTo (x2, y2);
		}
		else
		{
			float offx1, offy1, offx2, offy2;

			float dx = x2 - x1;
			float dy = y2 - y1;
			const float len = juce_hypot (dx, dy);

			if (len == 0)
			{
				offx1 = offx2 = x1;
				offy1 = offy2 = y1;
			}
			else
			{
				const float offset = width / len;
				dx *= offset;
				dy *= offset;

				offx1 = x1 + dy;
				offy1 = y1 - dx;
				offx2 = x2 + dy;
				offy2 = y2 - dx;
			}

			if (style == PathStrokeType::square)
			{
				// sqaure ends
				destPath.lineTo (offx1, offy1);
				destPath.lineTo (offx2, offy2);
				destPath.lineTo (x2, y2);
			}
			else
			{
				// rounded ends
				const float midx = (offx1 + offx2) * 0.5f;
				const float midy = (offy1 + offy2) * 0.5f;

				destPath.cubicTo (x1 + (offx1 - x1) * 0.55f, y1 + (offy1 - y1) * 0.55f,
								  offx1 + (midx - offx1) * 0.45f, offy1 + (midy - offy1) * 0.45f,
								  midx, midy);

				destPath.cubicTo (midx + (offx2 - midx) * 0.55f, midy + (offy2 - midy) * 0.55f,
								  offx2 + (x2 - offx2) * 0.45f, offy2 + (y2 - offy2) * 0.45f,
								  x2, y2);
			}
		}
	}

	struct Arrowhead
	{
		float startWidth, startLength;
		float endWidth, endLength;
	};

	void addArrowhead (Path& destPath,
					   const float x1, const float y1,
					   const float x2, const float y2,
					   const float tipX, const float tipY,
					   const float width,
					   const float arrowheadWidth)
	{
		Line<float> line (x1, y1, x2, y2);
		destPath.lineTo (line.getPointAlongLine (-(arrowheadWidth / 2.0f - width), 0));
		destPath.lineTo (tipX, tipY);
		destPath.lineTo (line.getPointAlongLine (arrowheadWidth - (arrowheadWidth / 2.0f - width), 0));
		destPath.lineTo (x2, y2);
	}

	struct LineSection
	{
		float x1, y1, x2, y2;      // original line
		float lx1, ly1, lx2, ly2;  // the left-hand stroke
		float rx1, ry1, rx2, ry2;  // the right-hand stroke
	};

	void shortenSubPath (Array<LineSection>& subPath, float amountAtStart, float amountAtEnd)
	{
		while (amountAtEnd > 0 && subPath.size() > 0)
		{
			LineSection& l = subPath.getReference (subPath.size() - 1);
			float dx = l.rx2 - l.rx1;
			float dy = l.ry2 - l.ry1;
			const float len = juce_hypot (dx, dy);

			if (len <= amountAtEnd && subPath.size() > 1)
			{
				LineSection& prev = subPath.getReference (subPath.size() - 2);
				prev.x2 = l.x2;
				prev.y2 = l.y2;
				subPath.removeLast();
				amountAtEnd -= len;
			}
			else
			{
				const float prop = jmin (0.9999f, amountAtEnd / len);
				dx *= prop;
				dy *= prop;
				l.rx1 += dx;
				l.ry1 += dy;
				l.lx2 += dx;
				l.ly2 += dy;
				break;
			}
		}

		while (amountAtStart > 0 && subPath.size() > 0)
		{
			LineSection& l = subPath.getReference (0);
			float dx = l.rx2 - l.rx1;
			float dy = l.ry2 - l.ry1;
			const float len = juce_hypot (dx, dy);

			if (len <= amountAtStart && subPath.size() > 1)
			{
				LineSection& next = subPath.getReference (1);
				next.x1 = l.x1;
				next.y1 = l.y1;
				subPath.remove (0);
				amountAtStart -= len;
			}
			else
			{
				const float prop = jmin (0.9999f, amountAtStart / len);
				dx *= prop;
				dy *= prop;
				l.rx2 -= dx;
				l.ry2 -= dy;
				l.lx1 -= dx;
				l.ly1 -= dy;
				break;
			}
		}
	}

	void addSubPath (Path& destPath, Array<LineSection>& subPath,
					 const bool isClosed, const float width, const float maxMiterExtensionSquared,
					 const PathStrokeType::JointStyle jointStyle, const PathStrokeType::EndCapStyle endStyle,
					 const Arrowhead* const arrowhead)
	{
		jassert (subPath.size() > 0);

		if (arrowhead != nullptr)
			shortenSubPath (subPath, arrowhead->startLength, arrowhead->endLength);

		const LineSection& firstLine = subPath.getReference (0);

		float lastX1 = firstLine.lx1;
		float lastY1 = firstLine.ly1;
		float lastX2 = firstLine.lx2;
		float lastY2 = firstLine.ly2;

		if (isClosed)
		{
			destPath.startNewSubPath (lastX1, lastY1);
		}
		else
		{
			destPath.startNewSubPath (firstLine.rx2, firstLine.ry2);

			if (arrowhead != nullptr)
				addArrowhead (destPath, firstLine.rx2, firstLine.ry2, lastX1, lastY1, firstLine.x1, firstLine.y1,
							  width, arrowhead->startWidth);
			else
				addLineEnd (destPath, endStyle, firstLine.rx2, firstLine.ry2, lastX1, lastY1, width);
		}

		int i;
		for (i = 1; i < subPath.size(); ++i)
		{
			const LineSection& l = subPath.getReference (i);

			addEdgeAndJoint (destPath, jointStyle,
							 maxMiterExtensionSquared, width,
							 lastX1, lastY1, lastX2, lastY2,
							 l.lx1, l.ly1, l.lx2, l.ly2,
							 l.x1, l.y1);

			lastX1 = l.lx1;
			lastY1 = l.ly1;
			lastX2 = l.lx2;
			lastY2 = l.ly2;
		}

		const LineSection& lastLine = subPath.getReference (subPath.size() - 1);

		if (isClosed)
		{
			const LineSection& l = subPath.getReference (0);

			addEdgeAndJoint (destPath, jointStyle,
							 maxMiterExtensionSquared, width,
							 lastX1, lastY1, lastX2, lastY2,
							 l.lx1, l.ly1, l.lx2, l.ly2,
							 l.x1, l.y1);

			destPath.closeSubPath();
			destPath.startNewSubPath (lastLine.rx1, lastLine.ry1);
		}
		else
		{
			destPath.lineTo (lastX2, lastY2);

			if (arrowhead != nullptr)
				addArrowhead (destPath, lastX2, lastY2, lastLine.rx1, lastLine.ry1, lastLine.x2, lastLine.y2,
							  width, arrowhead->endWidth);
			else
				addLineEnd (destPath, endStyle, lastX2, lastY2, lastLine.rx1, lastLine.ry1, width);
		}

		lastX1 = lastLine.rx1;
		lastY1 = lastLine.ry1;
		lastX2 = lastLine.rx2;
		lastY2 = lastLine.ry2;

		for (i = subPath.size() - 1; --i >= 0;)
		{
			const LineSection& l = subPath.getReference (i);

			addEdgeAndJoint (destPath, jointStyle,
							 maxMiterExtensionSquared, width,
							 lastX1, lastY1, lastX2, lastY2,
							 l.rx1, l.ry1, l.rx2, l.ry2,
							 l.x2, l.y2);

			lastX1 = l.rx1;
			lastY1 = l.ry1;
			lastX2 = l.rx2;
			lastY2 = l.ry2;
		}

		if (isClosed)
		{
			addEdgeAndJoint (destPath, jointStyle,
							 maxMiterExtensionSquared, width,
							 lastX1, lastY1, lastX2, lastY2,
							 lastLine.rx1, lastLine.ry1, lastLine.rx2, lastLine.ry2,
							 lastLine.x2, lastLine.y2);
		}
		else
		{
			// do the last line
			destPath.lineTo (lastX2, lastY2);
		}

		destPath.closeSubPath();
	}

	void createStroke (const float thickness, const PathStrokeType::JointStyle jointStyle,
					   const PathStrokeType::EndCapStyle endStyle,
					   Path& destPath, const Path& source,
					   const AffineTransform& transform,
					   const float extraAccuracy, const Arrowhead* const arrowhead)
	{
		jassert (extraAccuracy > 0);

		if (thickness <= 0)
		{
			destPath.clear();
			return;
		}

		const Path* sourcePath = &source;
		Path temp;

		if (sourcePath == &destPath)
		{
			destPath.swapWithPath (temp);
			sourcePath = &temp;
		}
		else
		{
			destPath.clear();
		}

		destPath.setUsingNonZeroWinding (true);

		const float maxMiterExtensionSquared = 9.0f * thickness * thickness;
		const float width = 0.5f * thickness;

		// Iterate the path, creating a list of the
		// left/right-hand lines along either side of it...
		PathFlatteningIterator it (*sourcePath, transform, PathFlatteningIterator::defaultTolerance / extraAccuracy);

		Array <LineSection> subPath;
		subPath.ensureStorageAllocated (512);
		LineSection l;
		l.x1 = 0;
		l.y1 = 0;

		const float minSegmentLength = 0.0001f;

		while (it.next())
		{
			if (it.subPathIndex == 0)
			{
				if (subPath.size() > 0)
				{
					addSubPath (destPath, subPath, false, width, maxMiterExtensionSquared, jointStyle, endStyle, arrowhead);
					subPath.clearQuick();
				}

				l.x1 = it.x1;
				l.y1 = it.y1;
			}

			l.x2 = it.x2;
			l.y2 = it.y2;

			float dx = l.x2 - l.x1;
			float dy = l.y2 - l.y1;

			const float hypotSquared = dx*dx + dy*dy;

			if (it.closesSubPath || hypotSquared > minSegmentLength || it.isLastInSubpath())
			{
				const float len = std::sqrt (hypotSquared);

				if (len == 0)
				{
					l.rx1 = l.rx2 = l.lx1 = l.lx2 = l.x1;
					l.ry1 = l.ry2 = l.ly1 = l.ly2 = l.y1;
				}
				else
				{
					const float offset = width / len;
					dx *= offset;
					dy *= offset;

					l.rx2 = l.x1 - dy;
					l.ry2 = l.y1 + dx;
					l.lx1 = l.x1 + dy;
					l.ly1 = l.y1 - dx;

					l.lx2 = l.x2 + dy;
					l.ly2 = l.y2 - dx;
					l.rx1 = l.x2 - dy;
					l.ry1 = l.y2 + dx;
				}

				subPath.add (l);

				if (it.closesSubPath)
				{
					addSubPath (destPath, subPath, true, width, maxMiterExtensionSquared, jointStyle, endStyle, arrowhead);
					subPath.clearQuick();
				}
				else
				{
					l.x1 = it.x2;
					l.y1 = it.y2;
				}
			}
		}

		if (subPath.size() > 0)
			addSubPath (destPath, subPath, false, width, maxMiterExtensionSquared, jointStyle, endStyle, arrowhead);
	}
}

void PathStrokeType::createStrokedPath (Path& destPath, const Path& sourcePath,
										const AffineTransform& transform, const float extraAccuracy) const
{
	PathStrokeHelpers::createStroke (thickness, jointStyle, endStyle, destPath, sourcePath,
									 transform, extraAccuracy, 0);
}

void PathStrokeType::createDashedStroke (Path& destPath,
										 const Path& sourcePath,
										 const float* dashLengths,
										 int numDashLengths,
										 const AffineTransform& transform,
										 const float extraAccuracy) const
{
	jassert (extraAccuracy > 0);

	if (thickness <= 0)
		return;

	// this should really be an even number..
	jassert ((numDashLengths & 1) == 0);

	Path newDestPath;
	PathFlatteningIterator it (sourcePath, transform, PathFlatteningIterator::defaultTolerance / extraAccuracy);

	bool first = true;
	int dashNum = 0;
	float pos = 0.0f, lineLen = 0.0f, lineEndPos = 0.0f;
	float dx = 0.0f, dy = 0.0f;

	for (;;)
	{
		const bool isSolid = ((dashNum & 1) == 0);
		const float dashLen = dashLengths [dashNum++ % numDashLengths];

		jassert (dashLen > 0); // must be a positive increment!
		if (dashLen <= 0)
			break;

		pos += dashLen;

		while (pos > lineEndPos)
		{
			if (! it.next())
			{
				if (isSolid && ! first)
					newDestPath.lineTo (it.x2, it.y2);

				createStrokedPath (destPath, newDestPath, AffineTransform::identity, extraAccuracy);
				return;
			}

			if (isSolid && ! first)
				newDestPath.lineTo (it.x1, it.y1);
			else
				newDestPath.startNewSubPath (it.x1, it.y1);

			dx = it.x2 - it.x1;
			dy = it.y2 - it.y1;
			lineLen = juce_hypot (dx, dy);
			lineEndPos += lineLen;
			first = it.closesSubPath;
		}

		const float alpha = (pos - (lineEndPos - lineLen)) / lineLen;

		if (isSolid)
			newDestPath.lineTo (it.x1 + dx * alpha,
								it.y1 + dy * alpha);
		else
			newDestPath.startNewSubPath (it.x1 + dx * alpha,
										 it.y1 + dy * alpha);
	}
}

void PathStrokeType::createStrokeWithArrowheads (Path& destPath,
												 const Path& sourcePath,
												 const float arrowheadStartWidth, const float arrowheadStartLength,
												 const float arrowheadEndWidth, const float arrowheadEndLength,
												 const AffineTransform& transform,
												 const float extraAccuracy) const
{
	PathStrokeHelpers::Arrowhead head;
	head.startWidth = arrowheadStartWidth;
	head.startLength = arrowheadStartLength;
	head.endWidth = arrowheadEndWidth;
	head.endLength = arrowheadEndLength;

	PathStrokeHelpers::createStroke (thickness, jointStyle, endStyle,
									 destPath, sourcePath, transform, extraAccuracy, &head);
}

/*** End of inlined file: juce_PathStrokeType.cpp ***/


/*** Start of inlined file: juce_RectangleList.cpp ***/
RectangleList::RectangleList() noexcept
{
}

RectangleList::RectangleList (const Rectangle<int>& rect)
{
	addWithoutMerging (rect);
}

RectangleList::RectangleList (const RectangleList& other)
	: rects (other.rects)
{
}

RectangleList& RectangleList::operator= (const RectangleList& other)
{
	rects = other.rects;
	return *this;
}

#if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
RectangleList::RectangleList (RectangleList&& other) noexcept
	: rects (static_cast <Array <Rectangle<int> >&&> (other.rects))
{
}

RectangleList& RectangleList::operator= (RectangleList&& other) noexcept
{
	rects = static_cast <Array <Rectangle<int> >&&> (other.rects);
	return *this;
}
#endif

RectangleList::~RectangleList()
{
}

void RectangleList::clear()
{
	rects.clearQuick();
}

Rectangle<int> RectangleList::getRectangle (const int index) const noexcept
{
	if (isPositiveAndBelow (index, rects.size()))
		return rects.getReference (index);

	return Rectangle<int>();
}

bool RectangleList::isEmpty() const noexcept
{
	return rects.size() == 0;
}

RectangleList::Iterator::Iterator (const RectangleList& list) noexcept
	: current (nullptr),
	  owner (list),
	  index (list.rects.size())
{
}

RectangleList::Iterator::~Iterator()
{
}

bool RectangleList::Iterator::next() noexcept
{
	if (--index >= 0)
	{
		current = &(owner.rects.getReference (index));
		return true;
	}

	return false;
}

void RectangleList::add (const Rectangle<int>& rect)
{
	if (! rect.isEmpty())
	{
		if (rects.size() == 0)
		{
			rects.add (rect);
		}
		else
		{
			bool anyOverlaps = false;

			for (int j = rects.size(); --j >= 0;)
			{
				Rectangle<int>& ourRect = rects.getReference (j);

				if (rect.intersects (ourRect))
				{
					if (rect.contains (ourRect))
						rects.remove (j);
					else if (! ourRect.reduceIfPartlyContainedIn (rect))
						anyOverlaps = true;
				}
			}

			if (anyOverlaps && rects.size() > 0)
			{
				RectangleList r (rect);

				for (int i = rects.size(); --i >= 0;)
				{
					const Rectangle<int>& ourRect = rects.getReference (i);

					if (rect.intersects (ourRect))
					{
						r.subtract (ourRect);

						if (r.rects.size() == 0)
							return;
					}
				}

				rects.addArray (r.rects);
			}
			else
			{
				rects.add (rect);
			}
		}
	}
}

void RectangleList::addWithoutMerging (const Rectangle<int>& rect)
{
	if (! rect.isEmpty())
		rects.add (rect);
}

void RectangleList::add (const int x, const int y, const int w, const int h)
{
	add (Rectangle<int> (x, y, w, h));
}

void RectangleList::add (const RectangleList& other)
{
	for (int i = 0; i < other.rects.size(); ++i)
		add (other.rects.getReference (i));
}

void RectangleList::subtract (const Rectangle<int>& rect)
{
	const int originalNumRects = rects.size();

	if (originalNumRects > 0)
	{
		const int x1 = rect.pos.x;
		const int y1 = rect.pos.y;
		const int x2 = x1 + rect.w;
		const int y2 = y1 + rect.h;

		for (int i = getNumRectangles(); --i >= 0;)
		{
			Rectangle<int>& r = rects.getReference (i);

			const int rx1 = r.pos.x;
			const int ry1 = r.pos.y;
			const int rx2 = rx1 + r.w;
			const int ry2 = ry1 + r.h;

			if (! (x2 <= rx1 || x1 >= rx2 || y2 <= ry1 || y1 >= ry2))
			{
				if (x1 > rx1 && x1 < rx2)
				{
					if (y1 <= ry1 && y2 >= ry2 && x2 >= rx2)
					{
						r.w = x1 - rx1;
					}
					else
					{
						r.pos.x = x1;
						r.w = rx2 - x1;

						rects.insert (++i, Rectangle<int> (rx1, ry1, x1 - rx1,  ry2 - ry1));
						++i;
					}
				}
				else if (x2 > rx1 && x2 < rx2)
				{
					r.pos.x = x2;
					r.w = rx2 - x2;

					if (y1 > ry1 || y2 < ry2 || x1 > rx1)
					{
						rects.insert (++i, Rectangle<int> (rx1, ry1, x2 - rx1,  ry2 - ry1));
						++i;
					}
				}
				else if (y1 > ry1 && y1 < ry2)
				{
					if (x1 <= rx1 && x2 >= rx2 && y2 >= ry2)
					{
						r.h = y1 - ry1;
					}
					else
					{
						r.pos.y = y1;
						r.h = ry2 - y1;

						rects.insert (++i, Rectangle<int> (rx1, ry1, rx2 - rx1, y1 - ry1));
						++i;
					}
				}
				else if (y2 > ry1 && y2 < ry2)
				{
					r.pos.y = y2;
					r.h = ry2 - y2;

					if (x1 > rx1 || x2 < rx2 || y1 > ry1)
					{
						rects.insert (++i, Rectangle<int> (rx1, ry1, rx2 - rx1, y2 - ry1));
						++i;
					}
				}
				else
				{
					rects.remove (i);
				}
			}
		}
	}
}

bool RectangleList::subtract (const RectangleList& otherList)
{
	for (int i = otherList.rects.size(); --i >= 0 && rects.size() > 0;)
		subtract (otherList.rects.getReference (i));

	return rects.size() > 0;
}

bool RectangleList::clipTo (const Rectangle<int>& rect)
{
	bool notEmpty = false;

	if (rect.isEmpty())
	{
		clear();
	}
	else
	{
		for (int i = rects.size(); --i >= 0;)
		{
			Rectangle<int>& r = rects.getReference (i);

			if (! rect.intersectRectangle (r.pos.x, r.pos.y, r.w, r.h))
				rects.remove (i);
			else
				notEmpty = true;
		}
	}

	return notEmpty;
}

bool RectangleList::clipTo (const RectangleList& other)
{
	if (rects.size() == 0)
		return false;

	RectangleList result;

	for (int j = 0; j < rects.size(); ++j)
	{
		const Rectangle<int>& rect = rects.getReference (j);

		for (int i = other.rects.size(); --i >= 0;)
		{
			Rectangle<int> r (other.rects.getReference (i));

			if (rect.intersectRectangle (r.pos.x, r.pos.y, r.w, r.h))
				result.rects.add (r);
		}
	}

	swapWith (result);

	return ! isEmpty();
}

bool RectangleList::getIntersectionWith (const Rectangle<int>& rect, RectangleList& destRegion) const
{
	destRegion.clear();

	if (! rect.isEmpty())
	{
		for (int i = rects.size(); --i >= 0;)
		{
			Rectangle<int> r (rects.getReference (i));

			if (rect.intersectRectangle (r.pos.x, r.pos.y, r.w, r.h))
				destRegion.rects.add (r);
		}
	}

	return destRegion.rects.size() > 0;
}

void RectangleList::swapWith (RectangleList& otherList) noexcept
{
	rects.swapWithArray (otherList.rects);
}

void RectangleList::consolidate()
{
	int i;
	for (i = 0; i < getNumRectangles() - 1; ++i)
	{
		Rectangle<int>& r = rects.getReference (i);
		const int rx1 = r.pos.x;
		const int ry1 = r.pos.y;
		const int rx2 = rx1 + r.w;
		const int ry2 = ry1 + r.h;

		for (int j = rects.size(); --j > i;)
		{
			Rectangle<int>& r2 = rects.getReference (j);
			const int jrx1 = r2.pos.x;
			const int jry1 = r2.pos.y;
			const int jrx2 = jrx1 + r2.w;
			const int jry2 = jry1 + r2.h;

			// if the vertical edges of any blocks are touching and their horizontals don't
			// line up, split them horizontally..
			if (jrx1 == rx2 || jrx2 == rx1)
			{
				if (jry1 > ry1 && jry1 < ry2)
				{
					r.h = jry1 - ry1;
					rects.add (Rectangle<int> (rx1, jry1, rx2 - rx1, ry2 - jry1));
					i = -1;
					break;
				}

				if (jry2 > ry1 && jry2 < ry2)
				{
					r.h = jry2 - ry1;
					rects.add (Rectangle<int> (rx1, jry2, rx2 - rx1, ry2 - jry2));
					i = -1;
					break;
				}
				else if (ry1 > jry1 && ry1 < jry2)
				{
					r2.h = ry1 - jry1;
					rects.add (Rectangle<int> (jrx1, ry1, jrx2 - jrx1, jry2 - ry1));
					i = -1;
					break;
				}
				else if (ry2 > jry1 && ry2 < jry2)
				{
					r2.h = ry2 - jry1;
					rects.add (Rectangle<int> (jrx1, ry2, jrx2 - jrx1, jry2 - ry2));
					i = -1;
					break;
				}
			}
		}
	}

	for (i = 0; i < rects.size() - 1; ++i)
	{
		Rectangle<int>& r = rects.getReference (i);

		for (int j = rects.size(); --j > i;)
		{
			if (r.enlargeIfAdjacent (rects.getReference (j)))
			{
				rects.remove (j);
				i = -1;
				break;
			}
		}
	}
}

bool RectangleList::containsPoint (const int x, const int y) const noexcept
{
	for (int i = getNumRectangles(); --i >= 0;)
		if (rects.getReference (i).contains (x, y))
			return true;

	return false;
}

bool RectangleList::containsRectangle (const Rectangle<int>& rectangleToCheck) const
{
	if (rects.size() > 1)
	{
		RectangleList r (rectangleToCheck);

		for (int i = rects.size(); --i >= 0;)
		{
			r.subtract (rects.getReference (i));

			if (r.rects.size() == 0)
				return true;
		}
	}
	else if (rects.size() > 0)
	{
		return rects.getReference (0).contains (rectangleToCheck);
	}

	return false;
}

bool RectangleList::intersectsRectangle (const Rectangle<int>& rectangleToCheck) const noexcept
{
	for (int i = rects.size(); --i >= 0;)
		if (rects.getReference (i).intersects (rectangleToCheck))
			return true;

	return false;
}

bool RectangleList::intersects (const RectangleList& other) const noexcept
{
	for (int i = rects.size(); --i >= 0;)
		if (other.intersectsRectangle (rects.getReference (i)))
			return true;

	return false;
}

Rectangle<int> RectangleList::getBounds() const noexcept
{
	if (rects.size() <= 1)
	{
		if (rects.size() == 0)
			return Rectangle<int>();
		else
			return rects.getReference (0);
	}
	else
	{
		const Rectangle<int>& r = rects.getReference (0);

		int minX = r.pos.x;
		int minY = r.pos.y;
		int maxX = minX + r.w;
		int maxY = minY + r.h;

		for (int i = rects.size(); --i > 0;)
		{
			const Rectangle<int>& r2 = rects.getReference (i);

			minX = jmin (minX, r2.pos.x);
			minY = jmin (minY, r2.pos.y);
			maxX = jmax (maxX, r2.getRight());
			maxY = jmax (maxY, r2.getBottom());
		}

		return Rectangle<int> (minX, minY, maxX - minX, maxY - minY);
	}
}

void RectangleList::offsetAll (const int dx, const int dy) noexcept
{
	for (int i = rects.size(); --i >= 0;)
	{
		Rectangle<int>& r = rects.getReference (i);

		r.pos.x += dx;
		r.pos.y += dy;
	}
}

Path RectangleList::toPath() const
{
	Path p;

	for (int i = 0; i < rects.size(); ++i)
		p.addRectangle (rects.getReference (i));

	return p;
}

/*** End of inlined file: juce_RectangleList.cpp ***/


/*** Start of inlined file: juce_Justification.cpp ***/
Justification::Justification (const Justification& other) noexcept
	: flags (other.flags)
{
}

Justification& Justification::operator= (const Justification& other) noexcept
{
	flags = other.flags;
	return *this;
}

int Justification::getOnlyVerticalFlags() const noexcept
{
	return flags & (top | bottom | verticallyCentred);
}

int Justification::getOnlyHorizontalFlags() const noexcept
{
	return flags & (left | right | horizontallyCentred | horizontallyJustified);
}

/*** End of inlined file: juce_Justification.cpp ***/


/*** Start of inlined file: juce_RectanglePlacement.cpp ***/
RectanglePlacement::RectanglePlacement (const RectanglePlacement& other) noexcept
	: flags (other.flags)
{
}

RectanglePlacement& RectanglePlacement::operator= (const RectanglePlacement& other) noexcept
{
	flags = other.flags;
	return *this;
}

bool RectanglePlacement::operator== (const RectanglePlacement& other) const noexcept
{
	return flags == other.flags;
}

bool RectanglePlacement::operator!= (const RectanglePlacement& other) const noexcept
{
	return flags != other.flags;
}

void RectanglePlacement::applyTo (double& x, double& y, double& w, double& h,
								  const double dx, const double dy, const double dw, const double dh) const noexcept
{
	if (w == 0 || h == 0)
		return;

	if ((flags & stretchToFit) != 0)
	{
		x = dx;
		y = dy;
		w = dw;
		h = dh;
	}
	else
	{
		double scale = (flags & fillDestination) != 0 ? jmax (dw / w, dh / h)
													  : jmin (dw / w, dh / h);

		if ((flags & onlyReduceInSize) != 0)
			scale = jmin (scale, 1.0);

		if ((flags & onlyIncreaseInSize) != 0)
			scale = jmax (scale, 1.0);

		w *= scale;
		h *= scale;

		if ((flags & xLeft) != 0)
			x = dx;
		else if ((flags & xRight) != 0)
			x = dx + dw - w;
		else
			x = dx + (dw - w) * 0.5;

		if ((flags & yTop) != 0)
			y = dy;
		else if ((flags & yBottom) != 0)
			y = dy + dh - h;
		else
			y = dy + (dh - h) * 0.5;
	}
}

const AffineTransform RectanglePlacement::getTransformToFit (const Rectangle<float>& source, const Rectangle<float>& destination) const noexcept
{
	if (source.isEmpty())
		return AffineTransform::identity;

	float newX = destination.getX();
	float newY = destination.getY();

	float scaleX = destination.getWidth() / source.getWidth();
	float scaleY = destination.getHeight() / source.getHeight();

	if ((flags & stretchToFit) == 0)
	{
		scaleX = (flags & fillDestination) != 0 ? jmax (scaleX, scaleY)
												: jmin (scaleX, scaleY);

		if ((flags & onlyReduceInSize) != 0)
			scaleX = jmin (scaleX, 1.0f);

		if ((flags & onlyIncreaseInSize) != 0)
			scaleX = jmax (scaleX, 1.0f);

		scaleY = scaleX;

		if ((flags & xRight) != 0)
			newX += destination.getWidth() - source.getWidth() * scaleX;             // right
		else if ((flags & xLeft) == 0)
			newX += (destination.getWidth() - source.getWidth() * scaleX) / 2.0f;    // centre

		if ((flags & yBottom) != 0)
			newY += destination.getHeight() - source.getHeight() * scaleX;             // bottom
		else if ((flags & yTop) == 0)
			newY += (destination.getHeight() - source.getHeight() * scaleX) / 2.0f;    // centre
	}

	return AffineTransform::translation (-source.getX(), -source.getY())
				.scaled (scaleX, scaleY)
				.translated (newX, newY);
}

/*** End of inlined file: juce_RectanglePlacement.cpp ***/


/*** Start of inlined file: juce_GraphicsContext.cpp ***/
namespace
{
	template <typename Type>
	bool areCoordsSensibleNumbers (Type x, Type y, Type w, Type h)
	{
		const int maxVal = 0x3fffffff;

		return (int) x >= -maxVal && (int) x <= maxVal
			&& (int) y >= -maxVal && (int) y <= maxVal
			&& (int) w >= -maxVal && (int) w <= maxVal
			&& (int) h >= -maxVal && (int) h <= maxVal;
	}
}

LowLevelGraphicsContext::LowLevelGraphicsContext()
{
}

LowLevelGraphicsContext::~LowLevelGraphicsContext()
{
}

Graphics::Graphics (const Image& imageToDrawOnto)
	: context (imageToDrawOnto.createLowLevelContext()),
	  contextToDelete (context),
	  saveStatePending (false)
{
}

Graphics::Graphics (LowLevelGraphicsContext* const internalContext) noexcept
	: context (internalContext),
	  saveStatePending (false)
{
}

Graphics::~Graphics()
{
}

void Graphics::resetToDefaultState()
{
	saveStateIfPending();
	context->setFill (FillType());
	context->setFont (Font());
	context->setInterpolationQuality (Graphics::mediumResamplingQuality);
}

bool Graphics::isVectorDevice() const
{
	return context->isVectorDevice();
}

bool Graphics::reduceClipRegion (const Rectangle<int>& area)
{
	saveStateIfPending();
	return context->clipToRectangle (area);
}

bool Graphics::reduceClipRegion (const int x, const int y, const int w, const int h)
{
	return reduceClipRegion (Rectangle<int> (x, y, w, h));
}

bool Graphics::reduceClipRegion (const RectangleList& clipRegion)
{
	saveStateIfPending();
	return context->clipToRectangleList (clipRegion);
}

bool Graphics::reduceClipRegion (const Path& path, const AffineTransform& transform)
{
	saveStateIfPending();
	context->clipToPath (path, transform);
	return ! context->isClipEmpty();
}

bool Graphics::reduceClipRegion (const Image& image, const AffineTransform& transform)
{
	saveStateIfPending();
	context->clipToImageAlpha (image, transform);
	return ! context->isClipEmpty();
}

void Graphics::excludeClipRegion (const Rectangle<int>& rectangleToExclude)
{
	saveStateIfPending();
	context->excludeClipRectangle (rectangleToExclude);
}

bool Graphics::isClipEmpty() const
{
	return context->isClipEmpty();
}

Rectangle<int> Graphics::getClipBounds() const
{
	return context->getClipBounds();
}

void Graphics::saveState()
{
	saveStateIfPending();
	saveStatePending = true;
}

void Graphics::restoreState()
{
	if (saveStatePending)
		saveStatePending = false;
	else
		context->restoreState();
}

void Graphics::saveStateIfPending()
{
	if (saveStatePending)
	{
		saveStatePending = false;
		context->saveState();
	}
}

void Graphics::setOrigin (const int newOriginX, const int newOriginY)
{
	saveStateIfPending();
	context->setOrigin (newOriginX, newOriginY);
}

void Graphics::addTransform (const AffineTransform& transform)
{
	saveStateIfPending();
	context->addTransform (transform);
}

bool Graphics::clipRegionIntersects (const Rectangle<int>& area) const
{
	return context->clipRegionIntersects (area);
}

void Graphics::beginTransparencyLayer (float layerOpacity)
{
	saveStateIfPending();
	context->beginTransparencyLayer (layerOpacity);
}

void Graphics::endTransparencyLayer()
{
	context->endTransparencyLayer();
}

void Graphics::setColour (const Colour& newColour)
{
	saveStateIfPending();
	context->setFill (newColour);
}

void Graphics::setOpacity (const float newOpacity)
{
	saveStateIfPending();
	context->setOpacity (newOpacity);
}

void Graphics::setGradientFill (const ColourGradient& gradient)
{
	setFillType (gradient);
}

void Graphics::setTiledImageFill (const Image& imageToUse, const int anchorX, const int anchorY, const float opacity)
{
	saveStateIfPending();
	context->setFill (FillType (imageToUse, AffineTransform::translation ((float) anchorX, (float) anchorY)));
	context->setOpacity (opacity);
}

void Graphics::setFillType (const FillType& newFill)
{
	saveStateIfPending();
	context->setFill (newFill);
}

void Graphics::setFont (const Font& newFont)
{
	saveStateIfPending();
	context->setFont (newFont);
}

void Graphics::setFont (const float newFontHeight, const int newFontStyleFlags)
{
	saveStateIfPending();
	Font f (context->getFont());
	f.setSizeAndStyle (newFontHeight, newFontStyleFlags, 1.0f, 0);
	context->setFont (f);
}

Font Graphics::getCurrentFont() const
{
	return context->getFont();
}

void Graphics::drawSingleLineText (const String& text, const int startX, const int baselineY,
								   const Justification& justification) const
{
	if (text.isNotEmpty()
		 && startX < context->getClipBounds().getRight())
	{
		GlyphArrangement arr;
		arr.addLineOfText (context->getFont(), text, (float) startX, (float) baselineY);

		// Don't pass any vertical placement flags to this method - they'll be ignored.
		jassert (justification.getOnlyVerticalFlags() == 0);

		const int flags = justification.getOnlyHorizontalFlags();

		if (flags != Justification::left)
		{
			float w = arr.getBoundingBox (0, -1, true).getWidth();

			if ((flags & (Justification::horizontallyCentred | Justification::horizontallyJustified)) != 0)
				w /= 2.0f;

			arr.draw (*this, AffineTransform::translation (-w, 0));
		}
		else
		{
			arr.draw (*this);
		}
	}
}

void Graphics::drawTextAsPath (const String& text, const AffineTransform& transform) const
{
	if (text.isNotEmpty())
	{
		GlyphArrangement arr;
		arr.addLineOfText (context->getFont(), text, 0.0f, 0.0f);
		arr.draw (*this, transform);
	}
}

void Graphics::drawMultiLineText (const String& text, const int startX, const int baselineY, const int maximumLineWidth) const
{
	if (text.isNotEmpty()
		 && startX < context->getClipBounds().getRight())
	{
		GlyphArrangement arr;
		arr.addJustifiedText (context->getFont(), text,
							  (float) startX, (float) baselineY, (float) maximumLineWidth,
							  Justification::left);
		arr.draw (*this);
	}
}

void Graphics::drawText (const String& text,
						 const int x, const int y, const int width, const int height,
						 const Justification& justificationType,
						 const bool useEllipsesIfTooBig) const
{
	if (text.isNotEmpty() && context->clipRegionIntersects (Rectangle<int> (x, y, width, height)))
	{
		GlyphArrangement arr;

		arr.addCurtailedLineOfText (context->getFont(), text,
									0.0f, 0.0f, (float) width,
									useEllipsesIfTooBig);

		arr.justifyGlyphs (0, arr.getNumGlyphs(),
						   (float) x, (float) y, (float) width, (float) height,
						   justificationType);
		arr.draw (*this);
	}
}

void Graphics::drawFittedText (const String& text,
							   const int x, const int y, const int width, const int height,
							   const Justification& justification,
							   const int maximumNumberOfLines,
							   const float minimumHorizontalScale) const
{
	if (text.isNotEmpty()
		 && width > 0 && height > 0
		 && context->clipRegionIntersects (Rectangle<int> (x, y, width, height)))
	{
		GlyphArrangement arr;

		arr.addFittedText (context->getFont(), text,
						   (float) x, (float) y, (float) width, (float) height,
						   justification,
						   maximumNumberOfLines,
						   minimumHorizontalScale);

		arr.draw (*this);
	}
}

void Graphics::fillRect (int x, int y, int width, int height) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (x, y, width, height));

	context->fillRect (Rectangle<int> (x, y, width, height), false);
}

void Graphics::fillRect (const Rectangle<int>& r) const
{
	context->fillRect (r, false);
}

void Graphics::fillRect (const float x, const float y, const float width, const float height) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (x, y, width, height));

	Path p;
	p.addRectangle (x, y, width, height);
	fillPath (p);
}

void Graphics::setPixel (int x, int y) const
{
	context->fillRect (Rectangle<int> (x, y, 1, 1), false);
}

void Graphics::fillAll() const
{
	fillRect (context->getClipBounds());
}

void Graphics::fillAll (const Colour& colourToUse) const
{
	if (! colourToUse.isTransparent())
	{
		const Rectangle<int> clip (context->getClipBounds());

		context->saveState();
		context->setFill (colourToUse);
		context->fillRect (clip, false);
		context->restoreState();
	}
}

void Graphics::fillPath (const Path& path, const AffineTransform& transform) const
{
	if ((! context->isClipEmpty()) && ! path.isEmpty())
		context->fillPath (path, transform);
}

void Graphics::strokePath (const Path& path,
						   const PathStrokeType& strokeType,
						   const AffineTransform& transform) const
{
	Path stroke;
	strokeType.createStrokedPath (stroke, path, transform, context->getScaleFactor());
	fillPath (stroke);
}

void Graphics::drawRect (const int x, const int y, const int width, const int height,
						 const int lineThickness) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (x, y, width, height));

	context->fillRect (Rectangle<int> (x, y, width, lineThickness), false);
	context->fillRect (Rectangle<int> (x, y + lineThickness, lineThickness, height - lineThickness * 2), false);
	context->fillRect (Rectangle<int> (x + width - lineThickness, y + lineThickness, lineThickness, height - lineThickness * 2), false);
	context->fillRect (Rectangle<int> (x, y + height - lineThickness, width, lineThickness), false);
}

void Graphics::drawRect (const float x, const float y, const float width, const float height, const float lineThickness) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (x, y, width, height));

	Path p;
	p.addRectangle (x, y, width, lineThickness);
	p.addRectangle (x, y + lineThickness, lineThickness, height - lineThickness * 2.0f);
	p.addRectangle (x + width - lineThickness, y + lineThickness, lineThickness, height - lineThickness * 2.0f);
	p.addRectangle (x, y + height - lineThickness, width, lineThickness);
	fillPath (p);
}

void Graphics::drawRect (const Rectangle<int>& r, const int lineThickness) const
{
	drawRect (r.getX(), r.getY(), r.getWidth(), r.getHeight(), lineThickness);
}

void Graphics::drawBevel (const int x, const int y, const int width, const int height,
						  const int bevelThickness, const Colour& topLeftColour, const Colour& bottomRightColour,
						  const bool useGradient, const bool sharpEdgeOnOutside) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (x, y, width, height));

	if (clipRegionIntersects (Rectangle<int> (x, y, width, height)))
	{
		context->saveState();

		for (int i = bevelThickness; --i >= 0;)
		{
			const float op = useGradient ? (sharpEdgeOnOutside ? bevelThickness - i : i) / (float) bevelThickness
										 : 1.0f;

			context->setFill (topLeftColour.withMultipliedAlpha (op));
			context->fillRect (Rectangle<int> (x + i, y + i, width - i * 2, 1), false);
			context->setFill (topLeftColour.withMultipliedAlpha (op * 0.75f));
			context->fillRect (Rectangle<int> (x + i, y + i + 1, 1, height - i * 2 - 2), false);
			context->setFill (bottomRightColour.withMultipliedAlpha (op));
			context->fillRect (Rectangle<int> (x + i, y + height - i - 1, width - i * 2, 1), false);
			context->setFill (bottomRightColour.withMultipliedAlpha (op  * 0.75f));
			context->fillRect (Rectangle<int> (x + width - i - 1, y + i + 1, 1, height - i * 2 - 2), false);
		}

		context->restoreState();
	}
}

void Graphics::fillEllipse (const float x, const float y, const float width, const float height) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (x, y, width, height));

	Path p;
	p.addEllipse (x, y, width, height);
	fillPath (p);
}

void Graphics::drawEllipse (const float x, const float y, const float width, const float height,
							const float lineThickness) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (x, y, width, height));

	Path p;
	p.addEllipse (x, y, width, height);
	strokePath (p, PathStrokeType (lineThickness));
}

void Graphics::fillRoundedRectangle (const float x, const float y, const float width, const float height, const float cornerSize) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (x, y, width, height));

	Path p;
	p.addRoundedRectangle (x, y, width, height, cornerSize);
	fillPath (p);
}

void Graphics::fillRoundedRectangle (const Rectangle<float>& r, const float cornerSize) const
{
	fillRoundedRectangle (r.getX(), r.getY(), r.getWidth(), r.getHeight(), cornerSize);
}

void Graphics::drawRoundedRectangle (const float x, const float y, const float width, const float height,
									 const float cornerSize, const float lineThickness) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (x, y, width, height));

	Path p;
	p.addRoundedRectangle (x, y, width, height, cornerSize);
	strokePath (p, PathStrokeType (lineThickness));
}

void Graphics::drawRoundedRectangle (const Rectangle<float>& r, const float cornerSize, const float lineThickness) const
{
	drawRoundedRectangle (r.getX(), r.getY(), r.getWidth(), r.getHeight(), cornerSize, lineThickness);
}

void Graphics::drawArrow (const Line<float>& line, const float lineThickness, const float arrowheadWidth, const float arrowheadLength) const
{
	Path p;
	p.addArrow (line, lineThickness, arrowheadWidth, arrowheadLength);
	fillPath (p);
}

void Graphics::fillCheckerBoard (const Rectangle<int>& area,
								 const int checkWidth, const int checkHeight,
								 const Colour& colour1, const Colour& colour2) const
{
	jassert (checkWidth > 0 && checkHeight > 0); // can't be zero or less!

	if (checkWidth > 0 && checkHeight > 0)
	{
		context->saveState();

		if (colour1 == colour2)
		{
			context->setFill (colour1);
			context->fillRect (area, false);
		}
		else
		{
			const Rectangle<int> clipped (context->getClipBounds().getIntersection (area));

			if (! clipped.isEmpty())
			{
				context->clipToRectangle (clipped);

				const int checkNumX = (clipped.getX() - area.getX()) / checkWidth;
				const int checkNumY = (clipped.getY() - area.getY()) / checkHeight;
				const int startX = area.getX() + checkNumX * checkWidth;
				const int startY = area.getY() + checkNumY * checkHeight;
				const int right  = clipped.getRight();
				const int bottom = clipped.getBottom();

				for (int i = 0; i < 2; ++i)
				{
					context->setFill (i == ((checkNumX ^ checkNumY) & 1) ? colour1 : colour2);

					int cy = i;
					for (int y = startY; y < bottom; y += checkHeight)
						for (int x = startX + (cy++ & 1) * checkWidth; x < right; x += checkWidth * 2)
							context->fillRect (Rectangle<int> (x, y, checkWidth, checkHeight), false);
				}
			}
		}

		context->restoreState();
	}
}

void Graphics::drawVerticalLine (const int x, float top, float bottom) const
{
	context->drawVerticalLine (x, top, bottom);
}

void Graphics::drawHorizontalLine (const int y, float left, float right) const
{
	context->drawHorizontalLine (y, left, right);
}

void Graphics::drawLine (const float x1, const float y1, const float x2, const float y2) const
{
	context->drawLine (Line<float> (x1, y1, x2, y2));
}

void Graphics::drawLine (const Line<float>& line) const
{
	context->drawLine (line);
}

void Graphics::drawLine (const float x1, const float y1, const float x2, const float y2, const float lineThickness) const
{
	drawLine (Line<float> (x1, y1, x2, y2), lineThickness);
}

void Graphics::drawLine (const Line<float>& line, const float lineThickness) const
{
	Path p;
	p.addLineSegment (line, lineThickness);
	fillPath (p);
}

void Graphics::drawDashedLine (const Line<float>& line, const float* const dashLengths,
							   const int numDashLengths, const float lineThickness, int n) const
{
	jassert (n >= 0 && n < numDashLengths); // your start index must be valid!

	const Point<double> delta ((line.getEnd() - line.getStart()).toDouble());
	const double totalLen = delta.getDistanceFromOrigin();

	if (totalLen >= 0.1)
	{
		const double onePixAlpha = 1.0 / totalLen;

		for (double alpha = 0.0; alpha < 1.0;)
		{
			jassert (dashLengths[n] > 0); // can't have zero-length dashes!

			const double lastAlpha = alpha;
			alpha += dashLengths [n] * onePixAlpha;
			n = (n + 1) % numDashLengths;

			if ((n & 1) != 0)
			{
				const Line<float> segment (line.getStart() + (delta * lastAlpha).toFloat(),
										   line.getStart() + (delta * jmin (1.0, alpha)).toFloat());

				if (lineThickness != 1.0f)
					drawLine (segment, lineThickness);
				else
					context->drawLine (segment);
			}
		}
	}
}

void Graphics::setImageResamplingQuality (const Graphics::ResamplingQuality newQuality)
{
	saveStateIfPending();
	context->setInterpolationQuality (newQuality);
}

void Graphics::drawImageAt (const Image& imageToDraw,
							const int topLeftX, const int topLeftY,
							const bool fillAlphaChannelWithCurrentBrush) const
{
	const int imageW = imageToDraw.getWidth();
	const int imageH = imageToDraw.getHeight();

	drawImage (imageToDraw,
			   topLeftX, topLeftY, imageW, imageH,
			   0, 0, imageW, imageH,
			   fillAlphaChannelWithCurrentBrush);
}

void Graphics::drawImageWithin (const Image& imageToDraw,
								const int destX, const int destY,
								const int destW, const int destH,
								const RectanglePlacement& placementWithinTarget,
								const bool fillAlphaChannelWithCurrentBrush) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (destX, destY, destW, destH));

	if (imageToDraw.isValid())
	{
		const int imageW = imageToDraw.getWidth();
		const int imageH = imageToDraw.getHeight();

		if (imageW > 0 && imageH > 0)
		{
			double newX = 0.0, newY = 0.0;
			double newW = imageW;
			double newH = imageH;

			placementWithinTarget.applyTo (newX, newY, newW, newH,
										   destX, destY, destW, destH);

			if (newW > 0 && newH > 0)
			{
				drawImage (imageToDraw,
						   roundToInt (newX), roundToInt (newY),
						   roundToInt (newW), roundToInt (newH),
						   0, 0, imageW, imageH,
						   fillAlphaChannelWithCurrentBrush);
			}
		}
	}
}

void Graphics::drawImage (const Image& imageToDraw,
						  int dx, int dy, int dw, int dh,
						  int sx, int sy, int sw, int sh,
						  const bool fillAlphaChannelWithCurrentBrush) const
{
	// passing in a silly number can cause maths problems in rendering!
	jassert (areCoordsSensibleNumbers (dx, dy, dw, dh));
	jassert (areCoordsSensibleNumbers (sx, sy, sw, sh));

	if (imageToDraw.isValid() && context->clipRegionIntersects  (Rectangle<int> (dx, dy, dw, dh)))
	{
		drawImageTransformed (imageToDraw.getClippedImage (Rectangle<int> (sx, sy, sw, sh)),
							  AffineTransform::scale (dw / (float) sw, dh / (float) sh)
											  .translated ((float) dx, (float) dy),
							  fillAlphaChannelWithCurrentBrush);
	}
}

void Graphics::drawImageTransformed (const Image& imageToDraw,
									 const AffineTransform& transform,
									 const bool fillAlphaChannelWithCurrentBrush) const
{
	if (imageToDraw.isValid() && ! context->isClipEmpty())
	{
		if (fillAlphaChannelWithCurrentBrush)
		{
			context->saveState();
			context->clipToImageAlpha (imageToDraw, transform);
			fillAll();
			context->restoreState();
		}
		else
		{
			context->drawImage (imageToDraw, transform);
		}
	}
}

Graphics::ScopedSaveState::ScopedSaveState (Graphics& g)
	: context (g)
{
	context.saveState();
}

Graphics::ScopedSaveState::~ScopedSaveState()
{
	context.restoreState();
}

/*** End of inlined file: juce_GraphicsContext.cpp ***/


/*** Start of inlined file: juce_LowLevelGraphicsPostScriptRenderer.cpp ***/
/*
  ==============================================================================

   This file is part of the JUCE library - "Jules' Utility Class Extensions"
   Copyright 2004-11 by Raw Material Software Ltd.

  ------------------------------------------------------------------------------

   JUCE can be redistributed and/or modified under the terms of the GNU General
   Public License (Version 2), as published by the Free Software Foundation.
   A copy of the license is included in the JUCE distribution, or can be found
   online at www.gnu.org/licenses.

   JUCE is distributed in the hope that it will be useful, but WITHOUT ANY
   WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
   A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

  ------------------------------------------------------------------------------

   To release a closed-source product which uses JUCE, commercial licenses are
   available: visit www.rawmaterialsoftware.com/juce for more information.

  ==============================================================================
*/

// this will throw an assertion if you try to draw something that's not
// possible in postscript
#define WARN_ABOUT_NON_POSTSCRIPT_OPERATIONS 0

#if JUCE_DEBUG && WARN_ABOUT_NON_POSTSCRIPT_OPERATIONS
 #define notPossibleInPostscriptAssert jassertfalse
#else
 #define notPossibleInPostscriptAssert
#endif

LowLevelGraphicsPostScriptRenderer::LowLevelGraphicsPostScriptRenderer (OutputStream& resultingPostScript,
																		const String& documentTitle,
																		const int totalWidth_,
																		const int totalHeight_)
	: out (resultingPostScript),
	  totalWidth (totalWidth_),
	  totalHeight (totalHeight_),
	  needToClip (true)
{
	stateStack.add (new SavedState());
	stateStack.getLast()->clip = Rectangle<int> (totalWidth_, totalHeight_);

	const float scale = jmin ((520.0f / totalWidth_), (750.0f / totalHeight));

	out << "%!PS-Adobe-3.0 EPSF-3.0"
		   "\n%%BoundingBox: 0 0 600 824"
		   "\n%%Pages: 0"
		   "\n%%Creator: Raw Material Software JUCE"
		   "\n%%Title: " << documentTitle <<
		   "\n%%CreationDate: none"
		   "\n%%LanguageLevel: 2"
		   "\n%%EndComments"
		   "\n%%BeginProlog"
		   "\n%%BeginResource: JRes"
		   "\n/bd {bind def} bind def"
		   "\n/c {setrgbcolor} bd"
		   "\n/m {moveto} bd"
		   "\n/l {lineto} bd"
		   "\n/rl {rlineto} bd"
		   "\n/ct {curveto} bd"
		   "\n/cp {closepath} bd"
		   "\n/pr {3 index 3 index moveto 1 index 0 rlineto 0 1 index rlineto pop neg 0 rlineto pop pop closepath} bd"
		   "\n/doclip {initclip newpath} bd"
		   "\n/endclip {clip newpath} bd"
		   "\n%%EndResource"
		   "\n%%EndProlog"
		   "\n%%BeginSetup"
		   "\n%%EndSetup"
		   "\n%%Page: 1 1"
		   "\n%%BeginPageSetup"
		   "\n%%EndPageSetup\n\n"
		<< "40 800 translate\n"
		<< scale << ' ' << scale << " scale\n\n";
}

LowLevelGraphicsPostScriptRenderer::~LowLevelGraphicsPostScriptRenderer()
{
}

bool LowLevelGraphicsPostScriptRenderer::isVectorDevice() const
{
	return true;
}

void LowLevelGraphicsPostScriptRenderer::setOrigin (int x, int y)
{
	if (x != 0 || y != 0)
	{
		stateStack.getLast()->xOffset += x;
		stateStack.getLast()->yOffset += y;
		needToClip = true;
	}
}

void LowLevelGraphicsPostScriptRenderer::addTransform (const AffineTransform& /*transform*/)
{
	//xxx
	jassertfalse;
}

float LowLevelGraphicsPostScriptRenderer::getScaleFactor()
{
	jassertfalse; //xxx
	return 1.0f;
}

bool LowLevelGraphicsPostScriptRenderer::clipToRectangle (const Rectangle<int>& r)
{
	needToClip = true;
	return stateStack.getLast()->clip.clipTo (r.translated (stateStack.getLast()->xOffset, stateStack.getLast()->yOffset));
}

bool LowLevelGraphicsPostScriptRenderer::clipToRectangleList (const RectangleList& clipRegion)
{
	needToClip = true;
	return stateStack.getLast()->clip.clipTo (clipRegion);
}

void LowLevelGraphicsPostScriptRenderer::excludeClipRectangle (const Rectangle<int>& r)
{
	needToClip = true;
	stateStack.getLast()->clip.subtract (r.translated (stateStack.getLast()->xOffset, stateStack.getLast()->yOffset));
}

void LowLevelGraphicsPostScriptRenderer::clipToPath (const Path& path, const AffineTransform& transform)
{
	writeClip();

	Path p (path);
	p.applyTransform (transform.translated ((float) stateStack.getLast()->xOffset, (float) stateStack.getLast()->yOffset));
	writePath (p);
	out << "clip\n";
}

void LowLevelGraphicsPostScriptRenderer::clipToImageAlpha (const Image& /*sourceImage*/, const AffineTransform& /*transform*/)
{
	needToClip = true;
	jassertfalse; // xxx
}

bool LowLevelGraphicsPostScriptRenderer::clipRegionIntersects (const Rectangle<int>& r)
{
	return stateStack.getLast()->clip.intersectsRectangle (r.translated (stateStack.getLast()->xOffset, stateStack.getLast()->yOffset));
}

Rectangle<int> LowLevelGraphicsPostScriptRenderer::getClipBounds() const
{
	return stateStack.getLast()->clip.getBounds().translated (-stateStack.getLast()->xOffset,
															  -stateStack.getLast()->yOffset);
}

bool LowLevelGraphicsPostScriptRenderer::isClipEmpty() const
{
	return stateStack.getLast()->clip.isEmpty();
}

LowLevelGraphicsPostScriptRenderer::SavedState::SavedState()
	: xOffset (0),
	  yOffset (0)
{
}

LowLevelGraphicsPostScriptRenderer::SavedState::~SavedState()
{
}

void LowLevelGraphicsPostScriptRenderer::saveState()
{
	stateStack.add (new SavedState (*stateStack.getLast()));
}

void LowLevelGraphicsPostScriptRenderer::restoreState()
{
	jassert (stateStack.size() > 0);

	if (stateStack.size() > 0)
		stateStack.removeLast();
}

void LowLevelGraphicsPostScriptRenderer::beginTransparencyLayer (float)
{
}

void LowLevelGraphicsPostScriptRenderer::endTransparencyLayer()
{
}

void LowLevelGraphicsPostScriptRenderer::writeClip()
{
	if (needToClip)
	{
		needToClip = false;

		out << "doclip ";

		int itemsOnLine = 0;

		for (RectangleList::Iterator i (stateStack.getLast()->clip); i.next();)
		{
			if (++itemsOnLine == 6)
			{
				itemsOnLine = 0;
				out << '\n';
			}

			const Rectangle<int>& r = *i.getRectangle();

			out << r.getX() << ' ' << -r.getY() << ' '
				<< r.getWidth() << ' ' << -r.getHeight() << " pr ";
		}

		out << "endclip\n";
	}
}

void LowLevelGraphicsPostScriptRenderer::writeColour (const Colour& colour)
{
	Colour c (Colours::white.overlaidWith (colour));

	if (lastColour != c)
	{
		lastColour = c;

		out << String (c.getFloatRed(), 3) << ' '
			<< String (c.getFloatGreen(), 3) << ' '
			<< String (c.getFloatBlue(), 3) << " c\n";
	}
}

void LowLevelGraphicsPostScriptRenderer::writeXY (const float x, const float y) const
{
	out << String (x, 2) << ' '
		<< String (-y, 2) << ' ';
}

void LowLevelGraphicsPostScriptRenderer::writePath (const Path& path) const
{
	out << "newpath ";

	float lastX = 0.0f;
	float lastY = 0.0f;
	int itemsOnLine = 0;

	Path::Iterator i (path);

	while (i.next())
	{
		if (++itemsOnLine == 4)
		{
			itemsOnLine = 0;
			out << '\n';
		}

		switch (i.elementType)
		{
		case Path::Iterator::startNewSubPath:
			writeXY (i.x1, i.y1);
			lastX = i.x1;
			lastY = i.y1;
			out << "m ";
			break;

		case Path::Iterator::lineTo:
			writeXY (i.x1, i.y1);
			lastX = i.x1;
			lastY = i.y1;
			out << "l ";
			break;

		case Path::Iterator::quadraticTo:
			{
				const float cp1x = lastX + (i.x1 - lastX) * 2.0f / 3.0f;
				const float cp1y = lastY + (i.y1 - lastY) * 2.0f / 3.0f;
				const float cp2x = cp1x + (i.x2 - lastX) / 3.0f;
				const float cp2y = cp1y + (i.y2 - lastY) / 3.0f;

				writeXY (cp1x, cp1y);
				writeXY (cp2x, cp2y);
				writeXY (i.x2, i.y2);
				out << "ct ";
				lastX = i.x2;
				lastY = i.y2;
			}
			break;

		case Path::Iterator::cubicTo:
			writeXY (i.x1, i.y1);
			writeXY (i.x2, i.y2);
			writeXY (i.x3, i.y3);
			out << "ct ";
			lastX = i.x3;
			lastY = i.y3;
			break;

		case Path::Iterator::closePath:
			out << "cp ";
			break;

		default:
			jassertfalse;
			break;
		}
	}

	out << '\n';
}

void LowLevelGraphicsPostScriptRenderer::writeTransform (const AffineTransform& trans) const
{
	out << "[ "
		<< trans.mat00 << ' '
		<< trans.mat10 << ' '
		<< trans.mat01 << ' '
		<< trans.mat11 << ' '
		<< trans.mat02 << ' '
		<< trans.mat12 << " ] concat ";
}

void LowLevelGraphicsPostScriptRenderer::setFill (const FillType& fillType)
{
	stateStack.getLast()->fillType = fillType;
}

void LowLevelGraphicsPostScriptRenderer::setOpacity (float /*opacity*/)
{
}

void LowLevelGraphicsPostScriptRenderer::setInterpolationQuality (Graphics::ResamplingQuality /*quality*/)
{
}

void LowLevelGraphicsPostScriptRenderer::fillRect (const Rectangle<int>& r, const bool /*replaceExistingContents*/)
{
	if (stateStack.getLast()->fillType.isColour())
	{
		writeClip();
		writeColour (stateStack.getLast()->fillType.colour);

		Rectangle<int> r2 (r.translated (stateStack.getLast()->xOffset,  stateStack.getLast()->yOffset));

		out << r2.getX() << ' ' << -r2.getBottom() << ' ' << r2.getWidth() << ' ' << r2.getHeight() << " rectfill\n";
	}
	else
	{
		Path p;
		p.addRectangle (r);
		fillPath (p, AffineTransform::identity);
	}

}

void LowLevelGraphicsPostScriptRenderer::fillPath (const Path& path, const AffineTransform& t)
{
	if (stateStack.getLast()->fillType.isColour())
	{
		writeClip();

		Path p (path);
		p.applyTransform (t.translated ((float) stateStack.getLast()->xOffset,
										(float) stateStack.getLast()->yOffset));
		writePath (p);

		writeColour (stateStack.getLast()->fillType.colour);

		out << "fill\n";
	}
	else if (stateStack.getLast()->fillType.isGradient())
	{
		// this doesn't work correctly yet - it could be improved to handle solid gradients, but
		// postscript can't do semi-transparent ones.
		notPossibleInPostscriptAssert   // you can disable this warning by setting the WARN_ABOUT_NON_POSTSCRIPT_OPERATIONS flag at the top of this file

		writeClip();
		out << "gsave ";

		{
			Path p (path);
			p.applyTransform (t.translated ((float) stateStack.getLast()->xOffset, (float) stateStack.getLast()->yOffset));
			writePath (p);
			out << "clip\n";
		}

		const Rectangle<int> bounds (stateStack.getLast()->clip.getBounds());

		// ideally this would draw lots of lines or ellipses to approximate the gradient, but for the
		// time-being, this just fills it with the average colour..
		writeColour (stateStack.getLast()->fillType.gradient->getColourAtPosition (0.5f));
		out << bounds.getX() << ' ' << -bounds.getBottom() << ' ' << bounds.getWidth() << ' ' << bounds.getHeight() << " rectfill\n";

		out << "grestore\n";
	}
}

void LowLevelGraphicsPostScriptRenderer::writeImage (const Image& im,
													 const int sx, const int sy,
													 const int maxW, const int maxH) const
{
	out << "{<\n";

	const int w = jmin (maxW, im.getWidth());
	const int h = jmin (maxH, im.getHeight());

	int charsOnLine = 0;
	const Image::BitmapData srcData (im, 0, 0, w, h);
	Colour pixel;

	for (int y = h; --y >= 0;)
	{
		for (int x = 0; x < w; ++x)
		{
			const uint8* pixelData = srcData.getPixelPointer (x, y);

			if (x >= sx && y >= sy)
			{
				if (im.isARGB())
				{
					PixelARGB p (*(const PixelARGB*) pixelData);
					p.unpremultiply();
					pixel = Colours::white.overlaidWith (Colour (p.getARGB()));
				}
				else if (im.isRGB())
				{
					pixel = Colour (((const PixelRGB*) pixelData)->getARGB());
				}
				else
				{
					pixel = Colour ((uint8) 0, (uint8) 0, (uint8) 0, *pixelData);
				}
			}
			else
			{
				pixel = Colours::transparentWhite;
			}

			const uint8 pixelValues[3] = { pixel.getRed(), pixel.getGreen(), pixel.getBlue() };

			out << String::toHexString (pixelValues, 3, 0);
			charsOnLine += 3;

			if (charsOnLine > 100)
			{
				out << '\n';
				charsOnLine = 0;
			}
		}
	}

	out << "\n>}\n";
}

void LowLevelGraphicsPostScriptRenderer::drawImage (const Image& sourceImage, const AffineTransform& transform)
{
	const int w = sourceImage.getWidth();
	const int h = sourceImage.getHeight();

	writeClip();

	out << "gsave ";
	writeTransform (transform.translated ((float) stateStack.getLast()->xOffset, (float) stateStack.getLast()->yOffset)
							 .scaled (1.0f, -1.0f));

	RectangleList imageClip;
	sourceImage.createSolidAreaMask (imageClip, 0.5f);

	out << "newpath ";
	int itemsOnLine = 0;

	for (RectangleList::Iterator i (imageClip); i.next();)
	{
		if (++itemsOnLine == 6)
		{
			out << '\n';
			itemsOnLine = 0;
		}

		const Rectangle<int>& r = *i.getRectangle();

		out << r.getX() << ' ' << r.getY() << ' ' << r.getWidth() << ' ' << r.getHeight() << " pr ";
	}

	out << " clip newpath\n";

	out << w << ' ' << h << " scale\n";
	out << w << ' ' << h << " 8 [" << w << " 0 0 -" << h << ' ' << (int) 0 << ' ' << h << " ]\n";

	writeImage (sourceImage, 0, 0, w, h);

	out << "false 3 colorimage grestore\n";
	needToClip = true;
}

void LowLevelGraphicsPostScriptRenderer::drawLine (const Line <float>& line)
{
	Path p;
	p.addLineSegment (line, 1.0f);
	fillPath (p, AffineTransform::identity);
}

void LowLevelGraphicsPostScriptRenderer::drawVerticalLine (const int x, float top, float bottom)
{
	drawLine (Line<float> ((float) x, top, (float) x, bottom));
}

void LowLevelGraphicsPostScriptRenderer::drawHorizontalLine (const int y, float left, float right)
{
	drawLine (Line<float> (left, (float) y, right, (float) y));
}

void LowLevelGraphicsPostScriptRenderer::setFont (const Font& newFont)
{
	stateStack.getLast()->font = newFont;
}

const Font& LowLevelGraphicsPostScriptRenderer::getFont()
{
	return stateStack.getLast()->font;
}

void LowLevelGraphicsPostScriptRenderer::drawGlyph (int glyphNumber, const AffineTransform& transform)
{
	Path p;
	Font& font = stateStack.getLast()->font;
	font.getTypeface()->getOutlineForGlyph (glyphNumber, p);
	fillPath (p, AffineTransform::scale (font.getHeight() * font.getHorizontalScale(), font.getHeight()).followedBy (transform));
}

/*** End of inlined file: juce_LowLevelGraphicsPostScriptRenderer.cpp ***/


/*** Start of inlined file: juce_LowLevelGraphicsSoftwareRenderer.cpp ***/
#if JUCE_MSVC
 #pragma warning (push)
 #pragma warning (disable: 4127) // "expression is constant" warning

 #if JUCE_DEBUG
  #pragma optimize ("t", on)  // optimise just this file, to avoid sluggish graphics when debugging
  #pragma warning (disable: 4714) // warning about forcedinline methods not being inlined
 #endif
#endif

namespace SoftwareRendererClasses
{

template <class PixelType, bool replaceExisting = false>
class SolidColourEdgeTableRenderer
{
public:
	SolidColourEdgeTableRenderer (const Image::BitmapData& data_, const PixelARGB& colour)
		: data (data_),
		  sourceColour (colour)
	{
		if (sizeof (PixelType) == 3)
		{
			areRGBComponentsEqual = sourceColour.getRed() == sourceColour.getGreen()
										&& sourceColour.getGreen() == sourceColour.getBlue();
			filler[0].set (sourceColour);
			filler[1].set (sourceColour);
			filler[2].set (sourceColour);
			filler[3].set (sourceColour);
		}
	}

	forcedinline void setEdgeTableYPos (const int y) noexcept
	{
		linePixels = (PixelType*) data.getLinePointer (y);
	}

	forcedinline void handleEdgeTablePixel (const int x, const int alphaLevel) const noexcept
	{
		if (replaceExisting)
			linePixels[x].set (sourceColour);
		else
			linePixels[x].blend (sourceColour, (uint32) alphaLevel);
	}

	forcedinline void handleEdgeTablePixelFull (const int x) const noexcept
	{
		if (replaceExisting)
			linePixels[x].set (sourceColour);
		else
			linePixels[x].blend (sourceColour);
	}

	forcedinline void handleEdgeTableLine (const int x, const int width, const int alphaLevel) const noexcept
	{
		PixelARGB p (sourceColour);
		p.multiplyAlpha (alphaLevel);

		PixelType* dest = linePixels + x;

		if (replaceExisting || p.getAlpha() >= 0xff)
			replaceLine (dest, p, width);
		else
			blendLine (dest, p, width);
	}

	forcedinline void handleEdgeTableLineFull (const int x, const int width) const noexcept
	{
		PixelType* dest = linePixels + x;

		if (replaceExisting || sourceColour.getAlpha() >= 0xff)
			replaceLine (dest, sourceColour, width);
		else
			blendLine (dest, sourceColour, width);
	}

private:
	const Image::BitmapData& data;
	PixelType* linePixels;
	PixelARGB sourceColour;
	PixelRGB filler [4];
	bool areRGBComponentsEqual;

	inline void blendLine (PixelType* dest, const PixelARGB& colour, int width) const noexcept
	{
		do
		{
			dest->blend (colour);
			++dest;
		} while (--width > 0);
	}

	forcedinline void replaceLine (PixelRGB* dest, const PixelARGB& colour, int width) const noexcept
	{
		if (areRGBComponentsEqual)  // if all the component values are the same, we can cheat..
		{
			memset (dest, colour.getRed(), (size_t) width * 3);
		}
		else
		{
			if (width >> 5)
			{
				const int* const intFiller = reinterpret_cast<const int*> (filler);

				while (width > 8 && (((pointer_sized_int) dest) & 7) != 0)
				{
					dest->set (colour);
					++dest;
					--width;
				}

				while (width > 4)
				{
					int* d = reinterpret_cast<int*> (dest);
					*d++ = intFiller[0];
					*d++ = intFiller[1];
					*d++ = intFiller[2];
					dest = reinterpret_cast<PixelRGB*> (d);
					width -= 4;
				}
			}

			while (--width >= 0)
			{
				dest->set (colour);
				++dest;
			}
		}
	}

	forcedinline void replaceLine (PixelAlpha* const dest, const PixelARGB& colour, int const width) const noexcept
	{
		memset (dest, colour.getAlpha(), (size_t) width);
	}

	forcedinline void replaceLine (PixelARGB* dest, const PixelARGB& colour, int width) const noexcept
	{
		do
		{
			dest->set (colour);
			++dest;

		} while (--width > 0);
	}

	JUCE_DECLARE_NON_COPYABLE (SolidColourEdgeTableRenderer);
};

class LinearGradientPixelGenerator
{
public:
	LinearGradientPixelGenerator (const ColourGradient& gradient, const AffineTransform& transform,
								  const PixelARGB* const lookupTable_, const int numEntries_)
		: lookupTable (lookupTable_),
		  numEntries (numEntries_)
	{
		jassert (numEntries_ >= 0);
		Point<float> p1 (gradient.point1);
		Point<float> p2 (gradient.point2);

		if (! transform.isIdentity())
		{
			const Line<float> l (p2, p1);
			Point<float> p3 = l.getPointAlongLine (0.0f, 100.0f);

			p1.applyTransform (transform);
			p2.applyTransform (transform);
			p3.applyTransform (transform);

			p2 = Line<float> (p2, p3).findNearestPointTo (p1);
		}

		vertical   = std::abs (p1.x - p2.x) < 0.001f;
		horizontal = std::abs (p1.y - p2.y) < 0.001f;

		if (vertical)
		{
			scale = roundToInt ((numEntries << (int) numScaleBits) / (double) (p2.y - p1.y));
			start = roundToInt (p1.y * scale);
		}
		else if (horizontal)
		{
			scale = roundToInt ((numEntries << (int) numScaleBits) / (double) (p2.x - p1.x));
			start = roundToInt (p1.x * scale);
		}
		else
		{
			grad = (p2.getY() - p1.y) / (double) (p1.x - p2.x);
			yTerm = p1.getY() - p1.x / grad;
			scale = roundToInt ((numEntries << (int) numScaleBits) / (yTerm * grad - (p2.y * grad - p2.x)));
			grad *= scale;
		}
	}

	forcedinline void setY (const int y) noexcept
	{
		if (vertical)
			linePix = lookupTable [jlimit (0, numEntries, (y * scale - start) >> (int) numScaleBits)];
		else if (! horizontal)
			start = roundToInt ((y - yTerm) * grad);
	}

	inline PixelARGB getPixel (const int x) const noexcept
	{
		return vertical ? linePix
						: lookupTable [jlimit (0, numEntries, (x * scale - start) >> (int) numScaleBits)];
	}

private:
	const PixelARGB* const lookupTable;
	const int numEntries;
	PixelARGB linePix;
	int start, scale;
	double grad, yTerm;
	bool vertical, horizontal;
	enum { numScaleBits = 12 };

	JUCE_DECLARE_NON_COPYABLE (LinearGradientPixelGenerator);
};

class RadialGradientPixelGenerator
{
public:
	RadialGradientPixelGenerator (const ColourGradient& gradient, const AffineTransform&,
								  const PixelARGB* const lookupTable_, const int numEntries_)
		: lookupTable (lookupTable_),
		  numEntries (numEntries_),
		  gx1 (gradient.point1.x),
		  gy1 (gradient.point1.y)
	{
		jassert (numEntries_ >= 0);
		const Point<float> diff (gradient.point1 - gradient.point2);
		maxDist = diff.x * diff.x + diff.y * diff.y;
		invScale = numEntries / std::sqrt (maxDist);
		jassert (roundToInt (std::sqrt (maxDist) * invScale) <= numEntries);
	}

	forcedinline void setY (const int y) noexcept
	{
		dy = y - gy1;
		dy *= dy;
	}

	inline PixelARGB getPixel (const int px) const noexcept
	{
		double x = px - gx1;
		x *= x;
		x += dy;

		return lookupTable [x >= maxDist ? numEntries : roundToInt (std::sqrt (x) * invScale)];
	}

protected:
	const PixelARGB* const lookupTable;
	const int numEntries;
	const double gx1, gy1;
	double maxDist, invScale, dy;

	JUCE_DECLARE_NON_COPYABLE (RadialGradientPixelGenerator);
};

class TransformedRadialGradientPixelGenerator   : public RadialGradientPixelGenerator
{
public:
	TransformedRadialGradientPixelGenerator (const ColourGradient& gradient, const AffineTransform& transform,
											 const PixelARGB* const lookupTable_, const int numEntries_)
		: RadialGradientPixelGenerator (gradient, transform, lookupTable_, numEntries_),
		  inverseTransform (transform.inverted())
	{
		tM10 = inverseTransform.mat10;
		tM00 = inverseTransform.mat00;
	}

	forcedinline void setY (const int y) noexcept
	{
		lineYM01 = inverseTransform.mat01 * y + inverseTransform.mat02 - gx1;
		lineYM11 = inverseTransform.mat11 * y + inverseTransform.mat12 - gy1;
	}

	inline PixelARGB getPixel (const int px) const noexcept
	{
		double x = px;
		const double y = tM10 * x + lineYM11;
		x = tM00 * x + lineYM01;
		x *= x;
		x += y * y;

		if (x >= maxDist)
			return lookupTable [numEntries];
		else
			return lookupTable [jmin (numEntries, roundToInt (std::sqrt (x) * invScale))];
	}

private:
	double tM10, tM00, lineYM01, lineYM11;
	const AffineTransform inverseTransform;

	JUCE_DECLARE_NON_COPYABLE (TransformedRadialGradientPixelGenerator);
};

template <class PixelType, class GradientType>
class GradientEdgeTableRenderer  : public GradientType
{
public:
	GradientEdgeTableRenderer (const Image::BitmapData& destData_, const ColourGradient& gradient, const AffineTransform& transform,
							   const PixelARGB* const lookupTable_, const int numEntries_)
		: GradientType (gradient, transform, lookupTable_, numEntries_ - 1),
		  destData (destData_)
	{
	}

	forcedinline void setEdgeTableYPos (const int y) noexcept
	{
		linePixels = (PixelType*) destData.getLinePointer (y);
		GradientType::setY (y);
	}

	forcedinline void handleEdgeTablePixel (const int x, const int alphaLevel) const noexcept
	{
		linePixels[x].blend (GradientType::getPixel (x), (uint32) alphaLevel);
	}

	forcedinline void handleEdgeTablePixelFull (const int x) const noexcept
	{
		linePixels[x].blend (GradientType::getPixel (x));
	}

	void handleEdgeTableLine (int x, int width, const int alphaLevel) const noexcept
	{
		PixelType* dest = linePixels + x;

		if (alphaLevel < 0xff)
		{
			do
			{
				(dest++)->blend (GradientType::getPixel (x++), (uint32) alphaLevel);
			} while (--width > 0);
		}
		else
		{
			do
			{
				(dest++)->blend (GradientType::getPixel (x++));
			} while (--width > 0);
		}
	}

	void handleEdgeTableLineFull (int x, int width) const noexcept
	{
		PixelType* dest = linePixels + x;

		do
		{
			(dest++)->blend (GradientType::getPixel (x++));
		} while (--width > 0);
	}

private:
	const Image::BitmapData& destData;
	PixelType* linePixels;

	JUCE_DECLARE_NON_COPYABLE (GradientEdgeTableRenderer);
};

template <class DestPixelType, class SrcPixelType, bool repeatPattern>
class ImageFillEdgeTableRenderer
{
public:
	ImageFillEdgeTableRenderer (const Image::BitmapData& destData_,
								const Image::BitmapData& srcData_,
								const int extraAlpha_,
								const int x, const int y)
		: destData (destData_),
		  srcData (srcData_),
		  extraAlpha (extraAlpha_ + 1),
		  xOffset (repeatPattern ? negativeAwareModulo (x, srcData_.width) - srcData_.width : x),
		  yOffset (repeatPattern ? negativeAwareModulo (y, srcData_.height) - srcData_.height : y)
	{
	}

	forcedinline void setEdgeTableYPos (int y) noexcept
	{
		linePixels = (DestPixelType*) destData.getLinePointer (y);

		y -= yOffset;
		if (repeatPattern)
		{
			jassert (y >= 0);
			y %= srcData.height;
		}

		sourceLineStart = (SrcPixelType*) srcData.getLinePointer (y);
	}

	forcedinline void handleEdgeTablePixel (const int x, int alphaLevel) const noexcept
	{
		alphaLevel = (alphaLevel * extraAlpha) >> 8;

		linePixels[x].blend (sourceLineStart [repeatPattern ? ((x - xOffset) % srcData.width) : (x - xOffset)], (uint32) alphaLevel);
	}

	forcedinline void handleEdgeTablePixelFull (const int x) const noexcept
	{
		linePixels[x].blend (sourceLineStart [repeatPattern ? ((x - xOffset) % srcData.width) : (x - xOffset)], (uint32) extraAlpha);
	}

	void handleEdgeTableLine (int x, int width, int alphaLevel) const noexcept
	{
		DestPixelType* dest = linePixels + x;
		alphaLevel = (alphaLevel * extraAlpha) >> 8;
		x -= xOffset;

		jassert (repeatPattern || (x >= 0 && x + width <= srcData.width));

		if (alphaLevel < 0xfe)
		{
			do
			{
				dest++ ->blend (sourceLineStart [repeatPattern ? (x++ % srcData.width) : x++], (uint32) alphaLevel);
			} while (--width > 0);
		}
		else
		{
			if (repeatPattern)
			{
				do
				{
					dest++ ->blend (sourceLineStart [x++ % srcData.width]);
				} while (--width > 0);
			}
			else
			{
				copyRow (dest, sourceLineStart + x, width);
			}
		}
	}

	void handleEdgeTableLineFull (int x, int width) const noexcept
	{
		DestPixelType* dest = linePixels + x;
		x -= xOffset;

		jassert (repeatPattern || (x >= 0 && x + width <= srcData.width));

		if (extraAlpha < 0xfe)
		{
			do
			{
				dest++ ->blend (sourceLineStart [repeatPattern ? (x++ % srcData.width) : x++], (uint32) extraAlpha);
			} while (--width > 0);
		}
		else
		{
			if (repeatPattern)
			{
				do
				{
					dest++ ->blend (sourceLineStart [x++ % srcData.width]);
				} while (--width > 0);
			}
			else
			{
				copyRow (dest, sourceLineStart + x, width);
			}
		}
	}

	void clipEdgeTableLine (EdgeTable& et, int x, int y, int width)
	{
		jassert (x - xOffset >= 0 && x + width - xOffset <= srcData.width);
		SrcPixelType* s = (SrcPixelType*) srcData.getLinePointer (y - yOffset);
		uint8* mask = (uint8*) (s + x - xOffset);

		if (sizeof (SrcPixelType) == sizeof (PixelARGB))
			mask += PixelARGB::indexA;

		et.clipLineToMask (x, y, mask, sizeof (SrcPixelType), width);
	}

private:
	const Image::BitmapData& destData;
	const Image::BitmapData& srcData;
	const int extraAlpha, xOffset, yOffset;
	DestPixelType* linePixels;
	SrcPixelType* sourceLineStart;

	template <class PixelType1, class PixelType2>
	static forcedinline void copyRow (PixelType1* dest, PixelType2* src, int width) noexcept
	{
		do
		{
			dest++ ->blend (*src++);
		} while (--width > 0);
	}

	static forcedinline void copyRow (PixelRGB* dest, PixelRGB* src, int width) noexcept
	{
		memcpy (dest, src, width * sizeof (PixelRGB));
	}

	JUCE_DECLARE_NON_COPYABLE (ImageFillEdgeTableRenderer);
};

template <class DestPixelType, class SrcPixelType, bool repeatPattern>
class TransformedImageFillEdgeTableRenderer
{
public:
	TransformedImageFillEdgeTableRenderer (const Image::BitmapData& destData_,
										   const Image::BitmapData& srcData_,
										   const AffineTransform& transform,
										   const int extraAlpha_,
										   const bool betterQuality_)
		: interpolator (transform,
						betterQuality_ ? 0.5f : 0.0f,
						betterQuality_ ? -128 : 0),
		  destData (destData_),
		  srcData (srcData_),
		  extraAlpha (extraAlpha_ + 1),
		  betterQuality (betterQuality_),
		  maxX (srcData_.width - 1),
		  maxY (srcData_.height - 1),
		  scratchSize (2048)
	{
		scratchBuffer.malloc (scratchSize);
	}

	forcedinline void setEdgeTableYPos (const int newY) noexcept
	{
		y = newY;
		linePixels = (DestPixelType*) destData.getLinePointer (newY);
	}

	forcedinline void handleEdgeTablePixel (const int x, const int alphaLevel) noexcept
	{
		SrcPixelType p;
		generate (&p, x, 1);

		linePixels[x].blend (p, (uint32) (alphaLevel * extraAlpha) >> 8);
	}

	forcedinline void handleEdgeTablePixelFull (const int x) noexcept
	{
		SrcPixelType p;
		generate (&p, x, 1);

		linePixels[x].blend (p, (uint32) extraAlpha);
	}

	void handleEdgeTableLine (const int x, int width, int alphaLevel) noexcept
	{
		if (width > (int) scratchSize)
		{
			scratchSize = (size_t) width;
			scratchBuffer.malloc (scratchSize);
		}

		SrcPixelType* span = scratchBuffer;
		generate (span, x, width);

		DestPixelType* dest = linePixels + x;
		alphaLevel *= extraAlpha;
		alphaLevel >>= 8;

		if (alphaLevel < 0xfe)
		{
			do
			{
				dest++ ->blend (*span++, (uint32) alphaLevel);
			} while (--width > 0);
		}
		else
		{
			do
			{
				dest++ ->blend (*span++);
			} while (--width > 0);
		}
	}

	forcedinline void handleEdgeTableLineFull (const int x, int width) noexcept
	{
		handleEdgeTableLine (x, width, 255);
	}

	void clipEdgeTableLine (EdgeTable& et, int x, int y_, int width)
	{
		if (width > (int) scratchSize)
		{
			scratchSize = (size_t) width;
			scratchBuffer.malloc (scratchSize);
		}

		y = y_;
		generate (scratchBuffer.getData(), x, width);

		et.clipLineToMask (x, y_,
						   reinterpret_cast<uint8*> (scratchBuffer.getData()) + SrcPixelType::indexA,
						   sizeof (SrcPixelType), width);
	}

private:

	template <class PixelType>
	void generate (PixelType* dest, const int x, int numPixels) noexcept
	{
		this->interpolator.setStartOfLine ((float) x, (float) y, numPixels);

		do
		{
			int hiResX, hiResY;
			this->interpolator.next (hiResX, hiResY);

			int loResX = hiResX >> 8;
			int loResY = hiResY >> 8;

			if (repeatPattern)
			{
				loResX = negativeAwareModulo (loResX, srcData.width);
				loResY = negativeAwareModulo (loResY, srcData.height);
			}

			if (betterQuality)
			{
				if (isPositiveAndBelow (loResX, maxX))
				{
					if (isPositiveAndBelow (loResY, maxY))
					{
						// In the centre of the image..
						render4PixelAverage (dest, this->srcData.getPixelPointer (loResX, loResY),
											 hiResX & 255, hiResY & 255);
						++dest;
						continue;
					}
					else
					{
						// At a top or bottom edge..
						if (! repeatPattern)
						{
							if (loResY < 0)
								render2PixelAverageX (dest, this->srcData.getPixelPointer (loResX, 0), hiResX & 255);
							else
								render2PixelAverageX (dest, this->srcData.getPixelPointer (loResX, maxY), hiResX & 255);

							++dest;
							continue;
						}
					}
				}
				else
				{
					if (isPositiveAndBelow (loResY, maxY))
					{
						// At a left or right hand edge..
						if (! repeatPattern)
						{
							if (loResX < 0)
								render2PixelAverageY (dest, this->srcData.getPixelPointer (0, loResY), hiResY & 255);
							else
								render2PixelAverageY (dest, this->srcData.getPixelPointer (maxX, loResY), hiResY & 255);

							++dest;
							continue;
						}
					}
				}
			}

			if (! repeatPattern)
			{
				if (loResX < 0)     loResX = 0;
				if (loResY < 0)     loResY = 0;
				if (loResX > maxX)  loResX = maxX;
				if (loResY > maxY)  loResY = maxY;
			}

			dest->set (*(const PixelType*) this->srcData.getPixelPointer (loResX, loResY));
			++dest;

		} while (--numPixels > 0);
	}

	void render4PixelAverage (PixelARGB* const dest, const uint8* src, const int subPixelX, const int subPixelY) noexcept
	{
		uint32 c[4] = { 256 * 128, 256 * 128, 256 * 128, 256 * 128 };

		uint32 weight = (uint32) ((256 - subPixelX) * (256 - subPixelY));
		c[0] += weight * src[0];
		c[1] += weight * src[1];
		c[2] += weight * src[2];
		c[3] += weight * src[3];

		weight = (uint32) (subPixelX * (256 - subPixelY));
		c[0] += weight * src[4];
		c[1] += weight * src[5];
		c[2] += weight * src[6];
		c[3] += weight * src[7];

		src += this->srcData.lineStride;

		weight = (uint32) ((256 - subPixelX) * subPixelY);
		c[0] += weight * src[0];
		c[1] += weight * src[1];
		c[2] += weight * src[2];
		c[3] += weight * src[3];

		weight = (uint32) (subPixelX * subPixelY);
		c[0] += weight * src[4];
		c[1] += weight * src[5];
		c[2] += weight * src[6];
		c[3] += weight * src[7];

		dest->setARGB ((uint8) (c[PixelARGB::indexA] >> 16),
					   (uint8) (c[PixelARGB::indexR] >> 16),
					   (uint8) (c[PixelARGB::indexG] >> 16),
					   (uint8) (c[PixelARGB::indexB] >> 16));
	}

	void render2PixelAverageX (PixelARGB* const dest, const uint8* src, const int subPixelX) noexcept
	{
		uint32 c[4] = { 128, 128, 128, 128 };

		uint32 weight = (uint32) (256 - subPixelX);
		c[0] += weight * src[0];
		c[1] += weight * src[1];
		c[2] += weight * src[2];
		c[3] += weight * src[3];

		weight = (uint32) subPixelX;
		c[0] += weight * src[4];
		c[1] += weight * src[5];
		c[2] += weight * src[6];
		c[3] += weight * src[7];

		dest->setARGB ((uint8) (c[PixelARGB::indexA] >> 8),
					   (uint8) (c[PixelARGB::indexR] >> 8),
					   (uint8) (c[PixelARGB::indexG] >> 8),
					   (uint8) (c[PixelARGB::indexB] >> 8));
	}

	void render2PixelAverageY (PixelARGB* const dest, const uint8* src, const int subPixelY) noexcept
	{
		uint32 c[4] = { 128, 128, 128, 128 };

		uint32 weight = (uint32) (256 - subPixelY);
		c[0] += weight * src[0];
		c[1] += weight * src[1];
		c[2] += weight * src[2];
		c[3] += weight * src[3];

		src += this->srcData.lineStride;

		weight = (uint32) subPixelY;
		c[0] += weight * src[0];
		c[1] += weight * src[1];
		c[2] += weight * src[2];
		c[3] += weight * src[3];

		dest->setARGB ((uint8) (c[PixelARGB::indexA] >> 8),
					   (uint8) (c[PixelARGB::indexR] >> 8),
					   (uint8) (c[PixelARGB::indexG] >> 8),
					   (uint8) (c[PixelARGB::indexB] >> 8));
	}

	void render4PixelAverage (PixelRGB* const dest, const uint8* src, const int subPixelX, const int subPixelY) noexcept
	{
		uint32 c[3] = { 256 * 128, 256 * 128, 256 * 128 };

		uint32 weight = (uint32) ((256 - subPixelX) * (256 - subPixelY));
		c[0] += weight * src[0];
		c[1] += weight * src[1];
		c[2] += weight * src[2];

		weight = (uint32) (subPixelX * (256 - subPixelY));
		c[0] += weight * src[3];
		c[1] += weight * src[4];
		c[2] += weight * src[5];

		src += this->srcData.lineStride;

		weight = (uint32) ((256 - subPixelX) * subPixelY);
		c[0] += weight * src[0];
		c[1] += weight * src[1];
		c[2] += weight * src[2];

		weight = (uint32) (subPixelX * subPixelY);
		c[0] += weight * src[3];
		c[1] += weight * src[4];
		c[2] += weight * src[5];

		dest->setARGB ((uint8) 255,
					   (uint8) (c[PixelRGB::indexR] >> 16),
					   (uint8) (c[PixelRGB::indexG] >> 16),
					   (uint8) (c[PixelRGB::indexB] >> 16));
	}

	void render2PixelAverageX (PixelRGB* const dest, const uint8* src, const int subPixelX) noexcept
	{
		uint32 c[3] = { 128, 128, 128 };

		const uint32 weight = (uint32) (256 - subPixelX);
		c[0] += weight * src[0];
		c[1] += weight * src[1];
		c[2] += weight * src[2];

		c[0] += subPixelX * src[3];
		c[1] += subPixelX * src[4];
		c[2] += subPixelX * src[5];

		dest->setARGB ((uint8) 255,
					   (uint8) (c[PixelRGB::indexR] >> 8),
					   (uint8) (c[PixelRGB::indexG] >> 8),
					   (uint8) (c[PixelRGB::indexB] >> 8));
	}

	void render2PixelAverageY (PixelRGB* const dest, const uint8* src, const int subPixelY) noexcept
	{
		uint32 c[3] = { 128, 128, 128 };

		const uint32 weight = (uint32) (256 - subPixelY);
		c[0] += weight * src[0];
		c[1] += weight * src[1];
		c[2] += weight * src[2];

		src += this->srcData.lineStride;

		c[0] += subPixelY * src[0];
		c[1] += subPixelY * src[1];
		c[2] += subPixelY * src[2];

		dest->setARGB ((uint8) 255,
					   (uint8) (c[PixelRGB::indexR] >> 8),
					   (uint8) (c[PixelRGB::indexG] >> 8),
					   (uint8) (c[PixelRGB::indexB] >> 8));
	}

	void render4PixelAverage (PixelAlpha* const dest, const uint8* src, const int subPixelX, const int subPixelY) noexcept
	{
		uint32 c = 256 * 128;
		c += src[0] * ((256 - subPixelX) * (256 - subPixelY));
		c += src[1] * (subPixelX * (256 - subPixelY));
		src += this->srcData.lineStride;
		c += src[0] * ((256 - subPixelX) * subPixelY);
		c += src[1] * (subPixelX * subPixelY);

		*((uint8*) dest) = (uint8) (c >> 16);
	}

	void render2PixelAverageX (PixelAlpha* const dest, const uint8* src, const int subPixelX) noexcept
	{
		uint32 c = 128;
		c += src[0] * (256 - subPixelX);
		c += src[1] * subPixelX;
		*((uint8*) dest) = (uint8) (c >> 8);
	}

	void render2PixelAverageY (PixelAlpha* const dest, const uint8* src, const int subPixelY) noexcept
	{
		uint32 c = 128;
		c += src[0] * (256 - subPixelY);
		src += this->srcData.lineStride;
		c += src[0] * subPixelY;
		*((uint8*) dest) = (uint8) (c >> 8);
	}

	class TransformedImageSpanInterpolator
	{
	public:
		TransformedImageSpanInterpolator (const AffineTransform& transform, const float pixelOffset_, const int pixelOffsetInt_) noexcept
			: inverseTransform (transform.inverted()),
			  pixelOffset (pixelOffset_), pixelOffsetInt (pixelOffsetInt_)
		{}

		void setStartOfLine (float x, float y, const int numPixels) noexcept
		{
			jassert (numPixels > 0);

			x += pixelOffset;
			y += pixelOffset;
			float x1 = x, y1 = y;
			x += numPixels;
			inverseTransform.transformPoints (x1, y1, x, y);

			xBresenham.set ((int) (x1 * 256.0f), (int) (x * 256.0f), numPixels, pixelOffsetInt);
			yBresenham.set ((int) (y1 * 256.0f), (int) (y * 256.0f), numPixels, pixelOffsetInt);
		}

		void next (int& x, int& y) noexcept
		{
			x = xBresenham.n;
			xBresenham.stepToNext();
			y = yBresenham.n;
			yBresenham.stepToNext();
		}

	private:
		class BresenhamInterpolator
		{
		public:
			BresenhamInterpolator() noexcept {}

			void set (const int n1, const int n2, const int numSteps_, const int pixelOffsetInt) noexcept
			{
				numSteps = numSteps_;
				step = (n2 - n1) / numSteps;
				remainder = modulo = (n2 - n1) % numSteps;
				n = n1 + pixelOffsetInt;

				if (modulo <= 0)
				{
					modulo += numSteps;
					remainder += numSteps;
					--step;
				}

				modulo -= numSteps;
			}

			forcedinline void stepToNext() noexcept
			{
				modulo += remainder;
				n += step;

				if (modulo > 0)
				{
					modulo -= numSteps;
					++n;
				}
			}

			int n;

		private:
			int numSteps, step, modulo, remainder;
		};

		const AffineTransform inverseTransform;
		BresenhamInterpolator xBresenham, yBresenham;
		const float pixelOffset;
		const int pixelOffsetInt;

		JUCE_DECLARE_NON_COPYABLE (TransformedImageSpanInterpolator);
	};

	TransformedImageSpanInterpolator interpolator;
	const Image::BitmapData& destData;
	const Image::BitmapData& srcData;
	const int extraAlpha;
	const bool betterQuality;
	const int maxX, maxY;
	int y;
	DestPixelType* linePixels;
	HeapBlock <SrcPixelType> scratchBuffer;
	size_t scratchSize;

	JUCE_DECLARE_NON_COPYABLE (TransformedImageFillEdgeTableRenderer);
};

class ClipRegionBase  : public SingleThreadedReferenceCountedObject
{
public:
	ClipRegionBase() {}
	virtual ~ClipRegionBase() {}

	typedef ReferenceCountedObjectPtr<ClipRegionBase> Ptr;

	virtual Ptr clone() const = 0;
	virtual Ptr applyClipTo (const Ptr& target) const = 0;

	virtual Ptr clipToRectangle (const Rectangle<int>& r) = 0;
	virtual Ptr clipToRectangleList (const RectangleList& r) = 0;
	virtual Ptr excludeClipRectangle (const Rectangle<int>& r) = 0;
	virtual Ptr clipToPath (const Path& p, const AffineTransform& transform) = 0;
	virtual Ptr clipToEdgeTable (const EdgeTable& et) = 0;
	virtual Ptr clipToImageAlpha (const Image& image, const AffineTransform& t, const bool betterQuality) = 0;
	virtual void translate (const Point<int>& delta) = 0;

	virtual bool clipRegionIntersects (const Rectangle<int>& r) const = 0;
	virtual Rectangle<int> getClipBounds() const = 0;

	virtual void fillRectWithColour (Image::BitmapData& destData, const Rectangle<int>& area, const PixelARGB& colour, bool replaceContents) const = 0;
	virtual void fillRectWithColour (Image::BitmapData& destData, const Rectangle<float>& area, const PixelARGB& colour) const = 0;
	virtual void fillAllWithColour (Image::BitmapData& destData, const PixelARGB& colour, bool replaceContents) const = 0;
	virtual void fillAllWithGradient (Image::BitmapData& destData, ColourGradient& gradient, const AffineTransform& transform, bool isIdentity) const = 0;
	virtual void renderImageTransformed (const Image::BitmapData& destData, const Image::BitmapData& srcData, const int alpha, const AffineTransform& t, bool betterQuality, bool tiledFill) const = 0;
	virtual void renderImageUntransformed (const Image::BitmapData& destData, const Image::BitmapData& srcData, const int alpha, int x, int y, bool tiledFill) const = 0;

protected:

	template <class Iterator>
	static void renderImageTransformedInternal (Iterator& iter, const Image::BitmapData& destData, const Image::BitmapData& srcData,
												const int alpha, const AffineTransform& transform, bool betterQuality, bool tiledFill)
	{
		switch (destData.pixelFormat)
		{
		case Image::ARGB:
			switch (srcData.pixelFormat)
			{
			case Image::ARGB:
				if (tiledFill)  { TransformedImageFillEdgeTableRenderer <PixelARGB, PixelARGB, true>  r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				else            { TransformedImageFillEdgeTableRenderer <PixelARGB, PixelARGB, false> r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				break;
			case Image::RGB:
				if (tiledFill)  { TransformedImageFillEdgeTableRenderer <PixelARGB, PixelRGB, true>  r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				else            { TransformedImageFillEdgeTableRenderer <PixelARGB, PixelRGB, false> r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				break;
			default:
				if (tiledFill)  { TransformedImageFillEdgeTableRenderer <PixelARGB, PixelAlpha, true>  r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				else            { TransformedImageFillEdgeTableRenderer <PixelARGB, PixelAlpha, false> r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				break;
			}
			break;

		case Image::RGB:
			switch (srcData.pixelFormat)
			{
			case Image::ARGB:
				if (tiledFill)  { TransformedImageFillEdgeTableRenderer <PixelRGB, PixelARGB, true>  r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				else            { TransformedImageFillEdgeTableRenderer <PixelRGB, PixelARGB, false> r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				break;
			case Image::RGB:
				if (tiledFill)  { TransformedImageFillEdgeTableRenderer <PixelRGB, PixelRGB, true>  r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				else            { TransformedImageFillEdgeTableRenderer <PixelRGB, PixelRGB, false> r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				break;
			default:
				if (tiledFill)  { TransformedImageFillEdgeTableRenderer <PixelRGB, PixelAlpha, true>  r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				else            { TransformedImageFillEdgeTableRenderer <PixelRGB, PixelAlpha, false> r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				break;
			}
			break;

		default:
			switch (srcData.pixelFormat)
			{
			case Image::ARGB:
				if (tiledFill)  { TransformedImageFillEdgeTableRenderer <PixelAlpha, PixelARGB, true>  r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				else            { TransformedImageFillEdgeTableRenderer <PixelAlpha, PixelARGB, false> r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				break;
			case Image::RGB:
				if (tiledFill)  { TransformedImageFillEdgeTableRenderer <PixelAlpha, PixelRGB, true>  r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				else            { TransformedImageFillEdgeTableRenderer <PixelAlpha, PixelRGB, false> r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				break;
			default:
				if (tiledFill)  { TransformedImageFillEdgeTableRenderer <PixelAlpha, PixelAlpha, true>  r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				else            { TransformedImageFillEdgeTableRenderer <PixelAlpha, PixelAlpha, false> r (destData, srcData, transform, alpha, betterQuality); iter.iterate (r); }
				break;
			}
			break;
		}
	}

	template <class Iterator>
	static void renderImageUntransformedInternal (Iterator& iter, const Image::BitmapData& destData, const Image::BitmapData& srcData, const int alpha, int x, int y, bool tiledFill)
	{
		switch (destData.pixelFormat)
		{
		case Image::ARGB:
			switch (srcData.pixelFormat)
			{
			case Image::ARGB:
				if (tiledFill)  { ImageFillEdgeTableRenderer <PixelARGB, PixelARGB, true>  r (destData, srcData, alpha, x, y); iter.iterate (r); }
				else            { ImageFillEdgeTableRenderer <PixelARGB, PixelARGB, false> r (destData, srcData, alpha, x, y); iter.iterate (r); }
				break;
			case Image::RGB:
				if (tiledFill)  { ImageFillEdgeTableRenderer <PixelARGB, PixelRGB, true>  r (destData, srcData, alpha, x, y); iter.iterate (r); }
				else            { ImageFillEdgeTableRenderer <PixelARGB, PixelRGB, false> r (destData, srcData, alpha, x, y); iter.iterate (r); }
				break;
			default:
				if (tiledFill)  { ImageFillEdgeTableRenderer <PixelARGB, PixelAlpha, true>  r (destData, srcData, alpha, x, y); iter.iterate (r); }
				else            { ImageFillEdgeTableRenderer <PixelARGB, PixelAlpha, false> r (destData, srcData, alpha, x, y); iter.iterate (r); }
				break;
			}
			break;

		case Image::RGB:
			switch (srcData.pixelFormat)
			{
			case Image::ARGB:
				if (tiledFill)  { ImageFillEdgeTableRenderer <PixelRGB, PixelARGB, true>  r (destData, srcData, alpha, x, y); iter.iterate (r); }
				else            { ImageFillEdgeTableRenderer <PixelRGB, PixelARGB, false> r (destData, srcData, alpha, x, y); iter.iterate (r); }
				break;
			case Image::RGB:
				if (tiledFill)  { ImageFillEdgeTableRenderer <PixelRGB, PixelRGB, true>  r (destData, srcData, alpha, x, y); iter.iterate (r); }
				else            { ImageFillEdgeTableRenderer <PixelRGB, PixelRGB, false> r (destData, srcData, alpha, x, y); iter.iterate (r); }
				break;
			default:
				if (tiledFill)  { ImageFillEdgeTableRenderer <PixelRGB, PixelAlpha, true>  r (destData, srcData, alpha, x, y); iter.iterate (r); }
				else            { ImageFillEdgeTableRenderer <PixelRGB, PixelAlpha, false> r (destData, srcData, alpha, x, y); iter.iterate (r); }
				break;
			}
			break;

		default:
			switch (srcData.pixelFormat)
			{
			case Image::ARGB:
				if (tiledFill)  { ImageFillEdgeTableRenderer <PixelAlpha, PixelARGB, true>   r (destData, srcData, alpha, x, y); iter.iterate (r); }
				else            { ImageFillEdgeTableRenderer <PixelAlpha, PixelARGB, false>  r (destData, srcData, alpha, x, y); iter.iterate (r); }
				break;
			case Image::RGB:
				if (tiledFill)  { ImageFillEdgeTableRenderer <PixelAlpha, PixelRGB, true>    r (destData, srcData, alpha, x, y); iter.iterate (r); }
				else            { ImageFillEdgeTableRenderer <PixelAlpha, PixelRGB, false>   r (destData, srcData, alpha, x, y); iter.iterate (r); }
				break;
			default:
				if (tiledFill)  { ImageFillEdgeTableRenderer <PixelAlpha, PixelAlpha, true>  r (destData, srcData, alpha, x, y); iter.iterate (r); }
				else            { ImageFillEdgeTableRenderer <PixelAlpha, PixelAlpha, false> r (destData, srcData, alpha, x, y); iter.iterate (r); }
				break;
			}
			break;
		}
	}

	template <class Iterator, class DestPixelType>
	static void renderSolidFill (Iterator& iter, const Image::BitmapData& destData, const PixelARGB& fillColour, const bool replaceContents, DestPixelType*)
	{
		jassert (destData.pixelStride == sizeof (DestPixelType));
		if (replaceContents)
		{
			SolidColourEdgeTableRenderer <DestPixelType, true> r (destData, fillColour);
			iter.iterate (r);
		}
		else
		{
			SolidColourEdgeTableRenderer <DestPixelType, false> r (destData, fillColour);
			iter.iterate (r);
		}
	}

	template <class Iterator, class DestPixelType>
	static void renderGradient (Iterator& iter, const Image::BitmapData& destData, const ColourGradient& g, const AffineTransform& transform,
								const PixelARGB* const lookupTable, const int numLookupEntries, const bool isIdentity, DestPixelType*)
	{
		jassert (destData.pixelStride == sizeof (DestPixelType));

		if (g.isRadial)
		{
			if (isIdentity)
			{
				GradientEdgeTableRenderer <DestPixelType, RadialGradientPixelGenerator> renderer (destData, g, transform, lookupTable, numLookupEntries);
				iter.iterate (renderer);
			}
			else
			{
				GradientEdgeTableRenderer <DestPixelType, TransformedRadialGradientPixelGenerator> renderer (destData, g, transform, lookupTable, numLookupEntries);
				iter.iterate (renderer);
			}
		}
		else
		{
			GradientEdgeTableRenderer <DestPixelType, LinearGradientPixelGenerator> renderer (destData, g, transform, lookupTable, numLookupEntries);
			iter.iterate (renderer);
		}
	}
};

class ClipRegion_EdgeTable  : public ClipRegionBase
{
public:
	ClipRegion_EdgeTable (const EdgeTable& e)        : edgeTable (e) {}
	ClipRegion_EdgeTable (const Rectangle<int>& r)   : edgeTable (r) {}
	ClipRegion_EdgeTable (const Rectangle<float>& r) : edgeTable (r) {}
	ClipRegion_EdgeTable (const RectangleList& r)    : edgeTable (r) {}
	ClipRegion_EdgeTable (const Rectangle<int>& bounds, const Path& p, const AffineTransform& t) : edgeTable (bounds, p, t) {}
	ClipRegion_EdgeTable (const ClipRegion_EdgeTable& other) : edgeTable (other.edgeTable) {}

	Ptr clone() const
	{
		return new ClipRegion_EdgeTable (*this);
	}

	Ptr applyClipTo (const Ptr& target) const
	{
		return target->clipToEdgeTable (edgeTable);
	}

	Ptr clipToRectangle (const Rectangle<int>& r)
	{
		edgeTable.clipToRectangle (r);
		return edgeTable.isEmpty() ? nullptr : this;
	}

	Ptr clipToRectangleList (const RectangleList& r)
	{
		RectangleList inverse (edgeTable.getMaximumBounds());

		if (inverse.subtract (r))
			for (RectangleList::Iterator iter (inverse); iter.next();)
				edgeTable.excludeRectangle (*iter.getRectangle());

		return edgeTable.isEmpty() ? nullptr : this;
	}

	Ptr excludeClipRectangle (const Rectangle<int>& r)
	{
		edgeTable.excludeRectangle (r);
		return edgeTable.isEmpty() ? nullptr : this;
	}

	Ptr clipToPath (const Path& p, const AffineTransform& transform)
	{
		EdgeTable et (edgeTable.getMaximumBounds(), p, transform);
		edgeTable.clipToEdgeTable (et);
		return edgeTable.isEmpty() ? nullptr : this;
	}

	Ptr clipToEdgeTable (const EdgeTable& et)
	{
		edgeTable.clipToEdgeTable (et);
		return edgeTable.isEmpty() ? nullptr : this;
	}

	Ptr clipToImageAlpha (const Image& image, const AffineTransform& transform, const bool betterQuality)
	{
		const Image::BitmapData srcData (image, Image::BitmapData::readOnly);

		if (transform.isOnlyTranslation())
		{
			// If our translation doesn't involve any distortion, just use a simple blit..
			const int tx = (int) (transform.getTranslationX() * 256.0f);
			const int ty = (int) (transform.getTranslationY() * 256.0f);

			if ((! betterQuality) || ((tx | ty) & 224) == 0)
			{
				const int imageX = ((tx + 128) >> 8);
				const int imageY = ((ty + 128) >> 8);

				if (image.getFormat() == Image::ARGB)
					straightClipImage (srcData, imageX, imageY, (PixelARGB*) 0);
				else
					straightClipImage (srcData, imageX, imageY, (PixelAlpha*) 0);

				return edgeTable.isEmpty() ? nullptr : this;
			}
		}

		if (transform.isSingularity())
			return nullptr;

		{
			Path p;
			p.addRectangle (0, 0, (float) srcData.width, (float) srcData.height);
			EdgeTable et2 (edgeTable.getMaximumBounds(), p, transform);
			edgeTable.clipToEdgeTable (et2);
		}

		if (! edgeTable.isEmpty())
		{
			if (image.getFormat() == Image::ARGB)
				transformedClipImage (srcData, transform, betterQuality, (PixelARGB*) 0);
			else
				transformedClipImage (srcData, transform, betterQuality, (PixelAlpha*) 0);
		}

		return edgeTable.isEmpty() ? nullptr : this;
	}

	void translate (const Point<int>& delta)
	{
		edgeTable.translate ((float) delta.x, delta.y);
	}

	bool clipRegionIntersects (const Rectangle<int>& r) const
	{
		return edgeTable.getMaximumBounds().intersects (r);
	}

	Rectangle<int> getClipBounds() const
	{
		return edgeTable.getMaximumBounds();
	}

	void fillRectWithColour (Image::BitmapData& destData, const Rectangle<int>& area, const PixelARGB& colour, bool replaceContents) const
	{
		const Rectangle<int> totalClip (edgeTable.getMaximumBounds());
		const Rectangle<int> clipped (totalClip.getIntersection (area));

		if (! clipped.isEmpty())
		{
			ClipRegion_EdgeTable et (clipped);
			et.edgeTable.clipToEdgeTable (edgeTable);
			et.fillAllWithColour (destData, colour, replaceContents);
		}
	}

	void fillRectWithColour (Image::BitmapData& destData, const Rectangle<float>& area, const PixelARGB& colour) const
	{
		const Rectangle<float> totalClip (edgeTable.getMaximumBounds().toFloat());
		const Rectangle<float> clipped (totalClip.getIntersection (area));

		if (! clipped.isEmpty())
		{
			ClipRegion_EdgeTable et (clipped);
			et.edgeTable.clipToEdgeTable (edgeTable);
			et.fillAllWithColour (destData, colour, false);
		}
	}

	void fillAllWithColour (Image::BitmapData& destData, const PixelARGB& colour, bool replaceContents) const
	{
		switch (destData.pixelFormat)
		{
			case Image::ARGB:   renderSolidFill (edgeTable, destData, colour, replaceContents, (PixelARGB*) 0); break;
			case Image::RGB:    renderSolidFill (edgeTable, destData, colour, replaceContents, (PixelRGB*) 0); break;
			default:            renderSolidFill (edgeTable, destData, colour, replaceContents, (PixelAlpha*) 0); break;
		}
	}

	void fillAllWithGradient (Image::BitmapData& destData, ColourGradient& gradient, const AffineTransform& transform, bool isIdentity) const
	{
		HeapBlock <PixelARGB> lookupTable;
		const int numLookupEntries = gradient.createLookupTable (transform, lookupTable);
		jassert (numLookupEntries > 0);

		switch (destData.pixelFormat)
		{
			case Image::ARGB:   renderGradient (edgeTable, destData, gradient, transform, lookupTable, numLookupEntries, isIdentity, (PixelARGB*) 0); break;
			case Image::RGB:    renderGradient (edgeTable, destData, gradient, transform, lookupTable, numLookupEntries, isIdentity, (PixelRGB*) 0); break;
			default:            renderGradient (edgeTable, destData, gradient, transform, lookupTable, numLookupEntries, isIdentity, (PixelAlpha*) 0); break;
		}
	}

	void renderImageTransformed (const Image::BitmapData& destData, const Image::BitmapData& srcData, const int alpha, const AffineTransform& transform, bool betterQuality, bool tiledFill) const
	{
		renderImageTransformedInternal (edgeTable, destData, srcData, alpha, transform, betterQuality, tiledFill);
	}

	void renderImageUntransformed (const Image::BitmapData& destData, const Image::BitmapData& srcData, const int alpha, int x, int y, bool tiledFill) const
	{
		renderImageUntransformedInternal (edgeTable, destData, srcData, alpha, x, y, tiledFill);
	}

	EdgeTable edgeTable;

private:

	template <class SrcPixelType>
	void transformedClipImage (const Image::BitmapData& srcData, const AffineTransform& transform, const bool betterQuality, const SrcPixelType*)
	{
		TransformedImageFillEdgeTableRenderer <SrcPixelType, SrcPixelType, false> renderer (srcData, srcData, transform, 255, betterQuality);

		for (int y = 0; y < edgeTable.getMaximumBounds().getHeight(); ++y)
			renderer.clipEdgeTableLine (edgeTable, edgeTable.getMaximumBounds().getX(), y + edgeTable.getMaximumBounds().getY(),
										edgeTable.getMaximumBounds().getWidth());
	}

	template <class SrcPixelType>
	void straightClipImage (const Image::BitmapData& srcData, int imageX, int imageY, const SrcPixelType*)
	{
		Rectangle<int> r (imageX, imageY, srcData.width, srcData.height);
		edgeTable.clipToRectangle (r);

		ImageFillEdgeTableRenderer <SrcPixelType, SrcPixelType, false> renderer (srcData, srcData, 255, imageX, imageY);

		for (int y = 0; y < r.getHeight(); ++y)
			renderer.clipEdgeTableLine (edgeTable, r.getX(), y + r.getY(), r.getWidth());
	}

	ClipRegion_EdgeTable& operator= (const ClipRegion_EdgeTable&);
};

class ClipRegion_RectangleList  : public ClipRegionBase
{
public:
	ClipRegion_RectangleList (const Rectangle<int>& r) : clip (r) {}
	ClipRegion_RectangleList (const RectangleList& r)  : clip (r) {}
	ClipRegion_RectangleList (const ClipRegion_RectangleList& other) : clip (other.clip) {}

	Ptr clone() const
	{
		return new ClipRegion_RectangleList (*this);
	}

	Ptr applyClipTo (const Ptr& target) const
	{
		return target->clipToRectangleList (clip);
	}

	Ptr clipToRectangle (const Rectangle<int>& r)
	{
		clip.clipTo (r);
		return clip.isEmpty() ? nullptr : this;
	}

	Ptr clipToRectangleList (const RectangleList& r)
	{
		clip.clipTo (r);
		return clip.isEmpty() ? nullptr : this;
	}

	Ptr excludeClipRectangle (const Rectangle<int>& r)
	{
		clip.subtract (r);
		return clip.isEmpty() ? nullptr : this;
	}

	Ptr clipToPath (const Path& p, const AffineTransform& transform)
	{
		return toEdgeTable()->clipToPath (p, transform);
	}

	Ptr clipToEdgeTable (const EdgeTable& et)
	{
		return toEdgeTable()->clipToEdgeTable (et);
	}

	Ptr clipToImageAlpha (const Image& image, const AffineTransform& transform, const bool betterQuality)
	{
		return toEdgeTable()->clipToImageAlpha (image, transform, betterQuality);
	}

	void translate (const Point<int>& delta)
	{
		clip.offsetAll (delta.x, delta.y);
	}

	bool clipRegionIntersects (const Rectangle<int>& r) const
	{
		return clip.intersects (r);
	}

	Rectangle<int> getClipBounds() const
	{
		return clip.getBounds();
	}

	void fillRectWithColour (Image::BitmapData& destData, const Rectangle<int>& area, const PixelARGB& colour, bool replaceContents) const
	{
		SubRectangleIterator iter (clip, area);

		switch (destData.pixelFormat)
		{
			case Image::ARGB:   renderSolidFill (iter, destData, colour, replaceContents, (PixelARGB*) 0); break;
			case Image::RGB:    renderSolidFill (iter, destData, colour, replaceContents, (PixelRGB*) 0); break;
			default:            renderSolidFill (iter, destData, colour, replaceContents, (PixelAlpha*) 0); break;
		}
	}

	void fillRectWithColour (Image::BitmapData& destData, const Rectangle<float>& area, const PixelARGB& colour) const
	{
		SubRectangleIteratorFloat iter (clip, area);

		switch (destData.pixelFormat)
		{
			case Image::ARGB:   renderSolidFill (iter, destData, colour, false, (PixelARGB*) 0); break;
			case Image::RGB:    renderSolidFill (iter, destData, colour, false, (PixelRGB*) 0); break;
			default:            renderSolidFill (iter, destData, colour, false, (PixelAlpha*) 0); break;
		}
	}

	void fillAllWithColour (Image::BitmapData& destData, const PixelARGB& colour, bool replaceContents) const
	{
		switch (destData.pixelFormat)
		{
			case Image::ARGB:   renderSolidFill (*this, destData, colour, replaceContents, (PixelARGB*) 0); break;
			case Image::RGB:    renderSolidFill (*this, destData, colour, replaceContents, (PixelRGB*) 0); break;
			default:            renderSolidFill (*this, destData, colour, replaceContents, (PixelAlpha*) 0); break;
		}
	}

	void fillAllWithGradient (Image::BitmapData& destData, ColourGradient& gradient, const AffineTransform& transform, bool isIdentity) const
	{
		HeapBlock <PixelARGB> lookupTable;
		const int numLookupEntries = gradient.createLookupTable (transform, lookupTable);
		jassert (numLookupEntries > 0);

		switch (destData.pixelFormat)
		{
			case Image::ARGB:   renderGradient (*this, destData, gradient, transform, lookupTable, numLookupEntries, isIdentity, (PixelARGB*) 0); break;
			case Image::RGB:    renderGradient (*this, destData, gradient, transform, lookupTable, numLookupEntries, isIdentity, (PixelRGB*) 0); break;
			default:            renderGradient (*this, destData, gradient, transform, lookupTable, numLookupEntries, isIdentity, (PixelAlpha*) 0); break;
		}
	}

	void renderImageTransformed (const Image::BitmapData& destData, const Image::BitmapData& srcData, const int alpha, const AffineTransform& transform, bool betterQuality, bool tiledFill) const
	{
		renderImageTransformedInternal (*this, destData, srcData, alpha, transform, betterQuality, tiledFill);
	}

	void renderImageUntransformed (const Image::BitmapData& destData, const Image::BitmapData& srcData, const int alpha, int x, int y, bool tiledFill) const
	{
		renderImageUntransformedInternal (*this, destData, srcData, alpha, x, y, tiledFill);
	}

	RectangleList clip;

	template <class Renderer>
	void iterate (Renderer& r) const noexcept
	{
		RectangleList::Iterator iter (clip);

		while (iter.next())
		{
			const Rectangle<int> rect (*iter.getRectangle());
			const int x = rect.getX();
			const int w = rect.getWidth();
			jassert (w > 0);
			const int bottom = rect.getBottom();

			for (int y = rect.getY(); y < bottom; ++y)
			{
				r.setEdgeTableYPos (y);
				r.handleEdgeTableLineFull (x, w);
			}
		}
	}

private:

	class SubRectangleIterator
	{
	public:
		SubRectangleIterator (const RectangleList& clip_, const Rectangle<int>& area_)
			: clip (clip_), area (area_)
		{
		}

		template <class Renderer>
		void iterate (Renderer& r) const noexcept
		{
			RectangleList::Iterator iter (clip);

			while (iter.next())
			{
				const Rectangle<int> rect (iter.getRectangle()->getIntersection (area));

				if (! rect.isEmpty())
				{
					const int x = rect.getX();
					const int w = rect.getWidth();
					const int bottom = rect.getBottom();

					for (int y = rect.getY(); y < bottom; ++y)
					{
						r.setEdgeTableYPos (y);
						r.handleEdgeTableLineFull (x, w);
					}
				}
			}
		}

	private:
		const RectangleList& clip;
		const Rectangle<int> area;

		JUCE_DECLARE_NON_COPYABLE (SubRectangleIterator);
	};

	class SubRectangleIteratorFloat
	{
	public:
		SubRectangleIteratorFloat (const RectangleList& clip_, const Rectangle<float>& area_) noexcept
			: clip (clip_), area (area_)
		{
		}

		template <class Renderer>
		void iterate (Renderer& r) const noexcept
		{
			const RenderingHelpers::FloatRectangleRasterisingInfo f (area);
			RectangleList::Iterator iter (clip);

			while (iter.next())
			{
				const int clipLeft   = iter.getRectangle()->getX();
				const int clipRight  = iter.getRectangle()->getRight();
				const int clipTop    = iter.getRectangle()->getY();
				const int clipBottom = iter.getRectangle()->getBottom();

				if (f.totalBottom > clipTop && f.totalTop < clipBottom && f.totalRight > clipLeft && f.totalLeft < clipRight)
				{
					if (f.isOnePixelWide())
					{
						if (f.topAlpha != 0 && f.totalTop >= clipTop)
						{
							r.setEdgeTableYPos (f.totalTop);
							r.handleEdgeTablePixel (f.left, f.topAlpha);
						}

						const int endY = jmin (f.bottom, clipBottom);
						for (int y = jmax (clipTop, f.top); y < endY; ++y)
						{
							r.setEdgeTableYPos (y);
							r.handleEdgeTablePixelFull (f.left);
						}

						if (f.bottomAlpha != 0 && f.bottom < clipBottom)
						{
							r.setEdgeTableYPos (f.bottom);
							r.handleEdgeTablePixel (f.left, f.bottomAlpha);
						}
					}
					else
					{
						const int clippedLeft   = jmax (f.left, clipLeft);
						const int clippedWidth  = jmin (f.right, clipRight) - clippedLeft;
						const bool doLeftAlpha  = f.leftAlpha != 0 && f.totalLeft >= clipLeft;
						const bool doRightAlpha = f.rightAlpha != 0 && f.right < clipRight;

						if (f.topAlpha != 0 && f.totalTop >= clipTop)
						{
							r.setEdgeTableYPos (f.totalTop);

							if (doLeftAlpha)        r.handleEdgeTablePixel (f.totalLeft, f.getTopLeftCornerAlpha());
							if (clippedWidth > 0)   r.handleEdgeTableLine (clippedLeft, clippedWidth, f.topAlpha);
							if (doRightAlpha)       r.handleEdgeTablePixel (f.right, f.getTopRightCornerAlpha());
						}

						const int endY = jmin (f.bottom, clipBottom);
						for (int y = jmax (clipTop, f.top); y < endY; ++y)
						{
							r.setEdgeTableYPos (y);

							if (doLeftAlpha)        r.handleEdgeTablePixel (f.totalLeft, f.leftAlpha);
							if (clippedWidth > 0)   r.handleEdgeTableLineFull (clippedLeft, clippedWidth);
							if (doRightAlpha)       r.handleEdgeTablePixel (f.right, f.rightAlpha);
						}

						if (f.bottomAlpha != 0 && f.bottom < clipBottom)
						{
							r.setEdgeTableYPos (f.bottom);

							if (doLeftAlpha)        r.handleEdgeTablePixel (f.totalLeft, f.getBottomLeftCornerAlpha());
							if (clippedWidth > 0)   r.handleEdgeTableLine (clippedLeft, clippedWidth, f.bottomAlpha);
							if (doRightAlpha)       r.handleEdgeTablePixel (f.right, f.getBottomRightCornerAlpha());
						}
					}
				}
			}
		}

	private:
		const RectangleList& clip;
		const Rectangle<float>& area;

		JUCE_DECLARE_NON_COPYABLE (SubRectangleIteratorFloat);
	};

	inline Ptr toEdgeTable() const   { return new ClipRegion_EdgeTable (clip); }

	ClipRegion_RectangleList& operator= (const ClipRegion_RectangleList&);
};

}

class LowLevelGraphicsSoftwareRenderer::SavedState
{
public:
	SavedState (const Image& image_, const Rectangle<int>& clip_)
		: image (image_), clip (new SoftwareRendererClasses::ClipRegion_RectangleList (clip_)),
		  transform (0, 0),
		  interpolationQuality (Graphics::mediumResamplingQuality),
		  transparencyLayerAlpha (1.0f)
	{
	}

	SavedState (const Image& image_, const RectangleList& clip_, const int xOffset_, const int yOffset_)
		: image (image_), clip (new SoftwareRendererClasses::ClipRegion_RectangleList (clip_)),
		  transform (xOffset_, yOffset_),
		  interpolationQuality (Graphics::mediumResamplingQuality),
		  transparencyLayerAlpha (1.0f)
	{
	}

	SavedState (const SavedState& other)
		: image (other.image), clip (other.clip), transform (other.transform),
		  font (other.font), fillType (other.fillType),
		  interpolationQuality (other.interpolationQuality),
		  transparencyLayerAlpha (other.transparencyLayerAlpha)
	{
	}

	bool clipToRectangle (const Rectangle<int>& r)
	{
		if (clip != nullptr)
		{
			if (transform.isOnlyTranslated)
			{
				cloneClipIfMultiplyReferenced();
				clip = clip->clipToRectangle (transform.translated (r));
			}
			else
			{
				Path p;
				p.addRectangle (r);
				clipToPath (p, AffineTransform::identity);
			}
		}

		return clip != nullptr;
	}

	bool clipToRectangleList (const RectangleList& r)
	{
		if (clip != nullptr)
		{
			if (transform.isOnlyTranslated)
			{
				cloneClipIfMultiplyReferenced();
				RectangleList offsetList (r);
				offsetList.offsetAll (transform.xOffset, transform.yOffset);
				clip = clip->clipToRectangleList (offsetList);
			}
			else
			{
				clipToPath (r.toPath(), AffineTransform::identity);
			}
		}

		return clip != nullptr;
	}

	bool excludeClipRectangle (const Rectangle<int>& r)
	{
		if (clip != nullptr)
		{
			cloneClipIfMultiplyReferenced();

			if (transform.isOnlyTranslated)
			{
				clip = clip->excludeClipRectangle (transform.translated (r));
			}
			else
			{
				Path p;
				p.addRectangle (r.toFloat());
				p.applyTransform (transform.complexTransform);
				p.addRectangle (clip->getClipBounds().toFloat());
				p.setUsingNonZeroWinding (false);
				clip = clip->clipToPath (p, AffineTransform::identity);
			}
		}

		return clip != nullptr;
	}

	void clipToPath (const Path& p, const AffineTransform& t)
	{
		if (clip != nullptr)
		{
			cloneClipIfMultiplyReferenced();
			clip = clip->clipToPath (p, transform.getTransformWith (t));
		}
	}

	void clipToImageAlpha (const Image& sourceImage, const AffineTransform& t)
	{
		if (clip != nullptr)
		{
			if (sourceImage.hasAlphaChannel())
			{
				cloneClipIfMultiplyReferenced();
				clip = clip->clipToImageAlpha (sourceImage, transform.getTransformWith (t),
											   interpolationQuality != Graphics::lowResamplingQuality);
			}
			else
			{
				Path p;
				p.addRectangle (sourceImage.getBounds());
				clipToPath (p, t);
			}
		}
	}

	bool clipRegionIntersects (const Rectangle<int>& r) const
	{
		if (clip != nullptr)
		{
			if (transform.isOnlyTranslated)
				return clip->clipRegionIntersects (transform.translated (r));
			else
				return getClipBounds().intersects (r);
		}

		return false;
	}

	Rectangle<int> getClipBounds() const
	{
		return clip != nullptr ? transform.deviceSpaceToUserSpace (clip->getClipBounds())
							   : Rectangle<int>();
	}

	SavedState* beginTransparencyLayer (float opacity)
	{
		SavedState* s = new SavedState (*this);

		if (clip != nullptr)
		{
			const Rectangle<int> layerBounds (clip->getClipBounds());

			s->image = Image (Image::ARGB, layerBounds.getWidth(), layerBounds.getHeight(), true);
			s->transparencyLayerAlpha = opacity;
			s->transform.moveOriginInDeviceSpace (-layerBounds.getX(), -layerBounds.getY());

			s->cloneClipIfMultiplyReferenced();
			s->clip->translate (-layerBounds.getPosition());
		}

		return s;
	}

	void endTransparencyLayer (SavedState& finishedLayerState)
	{
		if (clip != nullptr)
		{
			const Rectangle<int> layerBounds (clip->getClipBounds());

			const ScopedPointer<LowLevelGraphicsContext> g (image.createLowLevelContext());
			g->setOpacity (finishedLayerState.transparencyLayerAlpha);
			g->drawImage (finishedLayerState.image, AffineTransform::translation ((float) layerBounds.getX(),
																				  (float) layerBounds.getY()));
		}
	}

	void fillRect (const Rectangle<int>& r, const bool replaceContents)
	{
		if (clip != nullptr)
		{
			if (transform.isOnlyTranslated)
			{
				if (fillType.isColour())
				{
					Image::BitmapData destData (image, Image::BitmapData::readWrite);
					clip->fillRectWithColour (destData, transform.translated (r), fillType.colour.getPixelARGB(), replaceContents);
				}
				else
				{
					const Rectangle<int> totalClip (clip->getClipBounds());
					const Rectangle<int> clipped (totalClip.getIntersection (transform.translated (r)));

					if (! clipped.isEmpty())
						fillShape (new SoftwareRendererClasses::ClipRegion_RectangleList (clipped), false);
				}
			}
			else
			{
				Path p;
				p.addRectangle (r);
				fillPath (p, AffineTransform::identity);
			}
		}
	}

	void fillRect (const Rectangle<float>& r)
	{
		if (clip != nullptr)
		{
			if (transform.isOnlyTranslated)
			{
				if (fillType.isColour())
				{
					Image::BitmapData destData (image, Image::BitmapData::readWrite);
					clip->fillRectWithColour (destData, transform.translated (r), fillType.colour.getPixelARGB());
				}
				else
				{
					const Rectangle<float> totalClip (clip->getClipBounds().toFloat());
					const Rectangle<float> clipped (totalClip.getIntersection (transform.translated (r)));

					if (! clipped.isEmpty())
						fillShape (new SoftwareRendererClasses::ClipRegion_EdgeTable (clipped), false);
				}
			}
			else
			{
				Path p;
				p.addRectangle (r);
				fillPath (p, AffineTransform::identity);
			}
		}
	}

	void fillPath (const Path& path, const AffineTransform& t)
	{
		if (clip != nullptr)
			fillShape (new SoftwareRendererClasses::ClipRegion_EdgeTable (clip->getClipBounds(), path, transform.getTransformWith (t)), false);
	}

	void fillEdgeTable (const EdgeTable& edgeTable, const float x, const int y)
	{
		jassert (transform.isOnlyTranslated);

		if (clip != nullptr)
		{
			SoftwareRendererClasses::ClipRegion_EdgeTable* edgeTableClip = new SoftwareRendererClasses::ClipRegion_EdgeTable (edgeTable);
			edgeTableClip->edgeTable.translate (x + transform.xOffset,
												y + transform.yOffset);
			fillShape (edgeTableClip, false);
		}
	}

	void drawGlyph (const Font& f, int glyphNumber, const AffineTransform& t)
	{
		if (clip != nullptr)
		{
			const ScopedPointer<EdgeTable> et (f.getTypeface()->getEdgeTableForGlyph (glyphNumber, transform.getTransformWith (t)));

			if (et != nullptr)
				fillShape (new SoftwareRendererClasses::ClipRegion_EdgeTable (*et), false);
		}
	}

	void fillShape (SoftwareRendererClasses::ClipRegionBase::Ptr shapeToFill, const bool replaceContents)
	{
		jassert (clip != nullptr);

		shapeToFill = clip->applyClipTo (shapeToFill);

		if (shapeToFill != nullptr)
		{
			Image::BitmapData destData (image, Image::BitmapData::readWrite);

			if (fillType.isGradient())
			{
				jassert (! replaceContents); // that option is just for solid colours

				ColourGradient g2 (*(fillType.gradient));
				g2.multiplyOpacity (fillType.getOpacity());
				AffineTransform t (transform.getTransformWith (fillType.transform).translated (-0.5f, -0.5f));

				const bool isIdentity = t.isOnlyTranslation();

				if (isIdentity)
				{
					// If our translation doesn't involve any distortion, we can speed it up..
					g2.point1.applyTransform (t);
					g2.point2.applyTransform (t);
					t = AffineTransform::identity;
				}

				shapeToFill->fillAllWithGradient (destData, g2, t, isIdentity);
			}
			else if (fillType.isTiledImage())
			{
				renderImage (fillType.image, fillType.transform, shapeToFill);
			}
			else
			{
				shapeToFill->fillAllWithColour (destData, fillType.colour.getPixelARGB(), replaceContents);
			}
		}
	}

	void renderImage (const Image& sourceImage, const AffineTransform& trans,
					  const SoftwareRendererClasses::ClipRegionBase* const tiledFillClipRegion)
	{
		const AffineTransform t (transform.getTransformWith (trans));

		const Image::BitmapData destData (image, Image::BitmapData::readWrite);
		const Image::BitmapData srcData (sourceImage, Image::BitmapData::readOnly);
		const int alpha = fillType.colour.getAlpha();
		const bool betterQuality = (interpolationQuality != Graphics::lowResamplingQuality);

		if (t.isOnlyTranslation())
		{
			// If our translation doesn't involve any distortion, just use a simple blit..
			int tx = (int) (t.getTranslationX() * 256.0f);
			int ty = (int) (t.getTranslationY() * 256.0f);

			if ((! betterQuality) || ((tx | ty) & 224) == 0)
			{
				tx = ((tx + 128) >> 8);
				ty = ((ty + 128) >> 8);

				if (tiledFillClipRegion != nullptr)
				{
					tiledFillClipRegion->renderImageUntransformed (destData, srcData, alpha, tx, ty, true);
				}
				else
				{
					Rectangle<int> area (tx, ty, sourceImage.getWidth(), sourceImage.getHeight());
					area = area.getIntersection (image.getBounds());

					if (! area.isEmpty())
					{
						SoftwareRendererClasses::ClipRegionBase::Ptr c (clip->applyClipTo (new SoftwareRendererClasses::ClipRegion_EdgeTable (area)));

						if (c != nullptr)
							c->renderImageUntransformed (destData, srcData, alpha, tx, ty, false);
					}
				}

				return;
			}
		}

		if (t.isSingularity())
			return;

		if (tiledFillClipRegion != nullptr)
		{
			tiledFillClipRegion->renderImageTransformed (destData, srcData, alpha, t, betterQuality, true);
		}
		else
		{
			Path p;
			p.addRectangle (sourceImage.getBounds());

			SoftwareRendererClasses::ClipRegionBase::Ptr c (clip->clone());
			c = c->clipToPath (p, t);

			if (c != nullptr)
				c->renderImageTransformed (destData, srcData, alpha, t, betterQuality, false);
		}
	}

	Image image;
	SoftwareRendererClasses::ClipRegionBase::Ptr clip;
	RenderingHelpers::TranslationOrTransform transform;
	Font font;
	FillType fillType;
	Graphics::ResamplingQuality interpolationQuality;

private:
	float transparencyLayerAlpha;

	void cloneClipIfMultiplyReferenced()
	{
		if (clip->getReferenceCount() > 1)
			clip = clip->clone();
	}

	SavedState& operator= (const SavedState&);
};

LowLevelGraphicsSoftwareRenderer::LowLevelGraphicsSoftwareRenderer (const Image& image)
	: savedState (new SavedState (image, image.getBounds()))
{
}

LowLevelGraphicsSoftwareRenderer::LowLevelGraphicsSoftwareRenderer (const Image& image, const Point<int>& origin,
																	const RectangleList& initialClip)
	: savedState (new SavedState (image, initialClip, origin.x, origin.y))
{
}

LowLevelGraphicsSoftwareRenderer::~LowLevelGraphicsSoftwareRenderer()
{
}

bool LowLevelGraphicsSoftwareRenderer::isVectorDevice() const
{
	return false;
}

void LowLevelGraphicsSoftwareRenderer::setOrigin (int x, int y)
{
	savedState->transform.setOrigin (x, y);
}

void LowLevelGraphicsSoftwareRenderer::addTransform (const AffineTransform& transform)
{
	savedState->transform.addTransform (transform);
}

float LowLevelGraphicsSoftwareRenderer::getScaleFactor()
{
	return savedState->transform.getScaleFactor();
}

bool LowLevelGraphicsSoftwareRenderer::clipToRectangle (const Rectangle<int>& r)
{
	return savedState->clipToRectangle (r);
}

bool LowLevelGraphicsSoftwareRenderer::clipToRectangleList (const RectangleList& clipRegion)
{
	return savedState->clipToRectangleList (clipRegion);
}

void LowLevelGraphicsSoftwareRenderer::excludeClipRectangle (const Rectangle<int>& r)
{
	savedState->excludeClipRectangle (r);
}

void LowLevelGraphicsSoftwareRenderer::clipToPath (const Path& path, const AffineTransform& transform)
{
	savedState->clipToPath (path, transform);
}

void LowLevelGraphicsSoftwareRenderer::clipToImageAlpha (const Image& sourceImage, const AffineTransform& transform)
{
	savedState->clipToImageAlpha (sourceImage, transform);
}

bool LowLevelGraphicsSoftwareRenderer::clipRegionIntersects (const Rectangle<int>& r)
{
	return savedState->clipRegionIntersects (r);
}

Rectangle<int> LowLevelGraphicsSoftwareRenderer::getClipBounds() const
{
	return savedState->getClipBounds();
}

bool LowLevelGraphicsSoftwareRenderer::isClipEmpty() const
{
	return savedState->clip == nullptr;
}

void LowLevelGraphicsSoftwareRenderer::saveState()      { savedState.save(); }
void LowLevelGraphicsSoftwareRenderer::restoreState()   { savedState.restore(); }

void LowLevelGraphicsSoftwareRenderer::beginTransparencyLayer (float opacity)   { savedState.beginTransparencyLayer (opacity); }
void LowLevelGraphicsSoftwareRenderer::endTransparencyLayer()                   { savedState.endTransparencyLayer(); }

void LowLevelGraphicsSoftwareRenderer::setFill (const FillType& fillType)
{
	savedState->fillType = fillType;
}

void LowLevelGraphicsSoftwareRenderer::setOpacity (float newOpacity)
{
	savedState->fillType.setOpacity (newOpacity);
}

void LowLevelGraphicsSoftwareRenderer::setInterpolationQuality (Graphics::ResamplingQuality quality)
{
	savedState->interpolationQuality = quality;
}

void LowLevelGraphicsSoftwareRenderer::fillRect (const Rectangle<int>& r, const bool replaceExistingContents)
{
	savedState->fillRect (r, replaceExistingContents);
}

void LowLevelGraphicsSoftwareRenderer::fillPath (const Path& path, const AffineTransform& transform)
{
	savedState->fillPath (path, transform);
}

void LowLevelGraphicsSoftwareRenderer::drawImage (const Image& sourceImage, const AffineTransform& transform)
{
	savedState->renderImage (sourceImage, transform, nullptr);
}

void LowLevelGraphicsSoftwareRenderer::drawLine (const Line <float>& line)
{
	Path p;
	p.addLineSegment (line, 1.0f);
	fillPath (p, AffineTransform::identity);
}

void LowLevelGraphicsSoftwareRenderer::drawVerticalLine (const int x, float top, float bottom)
{
	if (bottom > top)
		savedState->fillRect (Rectangle<float> ((float) x, top, 1.0f, bottom - top));
}

void LowLevelGraphicsSoftwareRenderer::drawHorizontalLine (const int y, float left, float right)
{
	if (right > left)
		savedState->fillRect (Rectangle<float> (left, (float) y, right - left, 1.0f));
}

void LowLevelGraphicsSoftwareRenderer::drawGlyph (int glyphNumber, const AffineTransform& transform)
{
	Font& f = savedState->font;

	if (transform.isOnlyTranslation() && savedState->transform.isOnlyTranslated)
	{
		RenderingHelpers::GlyphCache <RenderingHelpers::CachedGlyphEdgeTable <LowLevelGraphicsSoftwareRenderer::SavedState>, SavedState>::getInstance()
			.drawGlyph (*savedState, f, glyphNumber,
						transform.getTranslationX(),
						transform.getTranslationY());
	}
	else
	{
		const float fontHeight = f.getHeight();
		savedState->drawGlyph (f, glyphNumber,
							   AffineTransform::scale (fontHeight * f.getHorizontalScale(), fontHeight)
											   .followedBy (transform));
	}
}

void LowLevelGraphicsSoftwareRenderer::setFont (const Font& newFont)    { savedState->font = newFont; }
const Font& LowLevelGraphicsSoftwareRenderer::getFont()                 { return savedState->font; }

#if JUCE_MSVC
 #pragma warning (pop)

 #if JUCE_DEBUG
  #pragma optimize ("", on)  // resets optimisations to the project defaults
 #endif
#endif

/*** End of inlined file: juce_LowLevelGraphicsSoftwareRenderer.cpp ***/


/*** Start of inlined file: juce_Image.cpp ***/
ImagePixelData::ImagePixelData (const Image::PixelFormat format, const int w, const int h)
	: pixelFormat (format), width (w), height (h)
{
	jassert (format == Image::RGB || format == Image::ARGB || format == Image::SingleChannel);
	jassert (w > 0 && h > 0); // It's illegal to create a zero-sized image!
}

ImagePixelData::~ImagePixelData()
{
}

ImageType::ImageType() {}
ImageType::~ImageType() {}

Image ImageType::convert (const Image& source) const
{
	if (source.isNull() || getTypeID() == (ScopedPointer<ImageType> (source.getPixelData()->createType())->getTypeID()))
		return source;

	const Image::BitmapData src (source, Image::BitmapData::readOnly);

	Image newImage (create (src.pixelFormat, src.width, src.height, false));
	Image::BitmapData dest (newImage, Image::BitmapData::writeOnly);

	jassert (src.pixelStride == dest.pixelStride && src.pixelFormat == dest.pixelFormat);

	for (int y = 0; y < dest.height; ++y)
		memcpy (dest.getLinePointer (y), src.getLinePointer (y), dest.lineStride);

	return newImage;
}

NativeImageType::NativeImageType() {}
NativeImageType::~NativeImageType() {}

int NativeImageType::getTypeID() const
{
	return 1;
}

class SoftwarePixelData  : public ImagePixelData
{
public:
	SoftwarePixelData (const Image::PixelFormat format_, const int w, const int h, const bool clearImage)
		: ImagePixelData (format_, w, h),
		  pixelStride (format_ == Image::RGB ? 3 : ((format_ == Image::ARGB) ? 4 : 1)),
		  lineStride ((pixelStride * jmax (1, w) + 3) & ~3)
	{
		imageData.allocate ((size_t) (lineStride * jmax (1, h)), clearImage);
	}

	LowLevelGraphicsContext* createLowLevelContext()
	{
		return new LowLevelGraphicsSoftwareRenderer (Image (this));
	}

	void initialiseBitmapData (Image::BitmapData& bitmap, int x, int y, Image::BitmapData::ReadWriteMode)
	{
		bitmap.data = imageData + x * pixelStride + y * lineStride;
		bitmap.pixelFormat = pixelFormat;
		bitmap.lineStride = lineStride;
		bitmap.pixelStride = pixelStride;
	}

	ImagePixelData* clone()
	{
		SoftwarePixelData* s = new SoftwarePixelData (pixelFormat, width, height, false);
		memcpy (s->imageData, imageData, (size_t) (lineStride * height));
		return s;
	}

	ImageType* createType() const    { return new SoftwareImageType(); }

private:
	HeapBlock<uint8> imageData;
	const int pixelStride, lineStride;

	JUCE_LEAK_DETECTOR (SoftwarePixelData);
};

SoftwareImageType::SoftwareImageType() {}
SoftwareImageType::~SoftwareImageType() {}

ImagePixelData* SoftwareImageType::create (Image::PixelFormat format, int width, int height, bool clearImage) const
{
	return new SoftwarePixelData (format, width, height, clearImage);
}

int SoftwareImageType::getTypeID() const
{
	return 2;
}

class SubsectionPixelData  : public ImagePixelData
{
public:
	SubsectionPixelData (ImagePixelData* const image_, const Rectangle<int>& area_)
		: ImagePixelData (image_->pixelFormat, area_.getWidth(), area_.getHeight()),
		  image (image_), area (area_)
	{
	}

	LowLevelGraphicsContext* createLowLevelContext()
	{
		LowLevelGraphicsContext* g = image->createLowLevelContext();
		g->clipToRectangle (area);
		g->setOrigin (area.getX(), area.getY());
		return g;
	}

	void initialiseBitmapData (Image::BitmapData& bitmap, int x, int y, Image::BitmapData::ReadWriteMode mode)
	{
		image->initialiseBitmapData (bitmap, x + area.getX(), y + area.getY(), mode);
	}

	ImagePixelData* clone()
	{
		jassert (getReferenceCount() > 0); // (This method can't be used on an unowned pointer, as it will end up self-deleting)
		const ScopedPointer<ImageType> type (image->createType());

		Image newImage (type->create (pixelFormat, area.getWidth(), area.getHeight(), pixelFormat != Image::RGB));

		{
			Graphics g (newImage);
			g.drawImageAt (Image (this), -area.getX(), -area.getY());
		}

		newImage.getPixelData()->incReferenceCount();
		return newImage.getPixelData();
	}

	ImageType* createType() const    { return image->createType(); }

private:
	const ReferenceCountedObjectPtr<ImagePixelData> image;
	const Rectangle<int> area;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SubsectionPixelData);
};

Image Image::getClippedImage (const Rectangle<int>& area) const
{
	if (area.contains (getBounds()))
		return *this;

	const Rectangle<int> validArea (area.getIntersection (getBounds()));
	return Image (validArea.isEmpty() ? nullptr : new SubsectionPixelData (image, validArea));
}

Image::Image()
{
}

Image::Image (ImagePixelData* const instance)
	: image (instance)
{
}

Image::Image (const PixelFormat format, int width, int height, bool clearImage)
	: image (NativeImageType().create (format, width, height, clearImage))
{
}

Image::Image (const PixelFormat format, int width, int height, bool clearImage, const ImageType& type)
	: image (type.create (format, width, height, clearImage))
{
}

Image::Image (const Image& other)
	: image (other.image)
{
}

Image& Image::operator= (const Image& other)
{
	image = other.image;
	return *this;
}

#if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
Image::Image (Image&& other) noexcept
	: image (static_cast <ReferenceCountedObjectPtr<ImagePixelData>&&> (other.image))
{
}

Image& Image::operator= (Image&& other) noexcept
{
	image = static_cast <ReferenceCountedObjectPtr<ImagePixelData>&&> (other.image);
	return *this;
}
#endif

Image::~Image()
{
}

const Image Image::null;

int Image::getReferenceCount() const noexcept           { return image == nullptr ? 0 : image->getReferenceCount(); }
int Image::getWidth() const noexcept                    { return image == nullptr ? 0 : image->width; }
int Image::getHeight() const noexcept                   { return image == nullptr ? 0 : image->height; }
Rectangle<int> Image::getBounds() const noexcept        { return image == nullptr ? Rectangle<int>() : Rectangle<int> (image->width, image->height); }
Image::PixelFormat Image::getFormat() const noexcept    { return image == nullptr ? UnknownFormat : image->pixelFormat; }
bool Image::isARGB() const noexcept                     { return getFormat() == ARGB; }
bool Image::isRGB() const noexcept                      { return getFormat() == RGB; }
bool Image::isSingleChannel() const noexcept            { return getFormat() == SingleChannel; }
bool Image::hasAlphaChannel() const noexcept            { return getFormat() != RGB; }

LowLevelGraphicsContext* Image::createLowLevelContext() const
{
	return image == nullptr ? nullptr : image->createLowLevelContext();
}

void Image::duplicateIfShared()
{
	if (image != nullptr && image->getReferenceCount() > 1)
		image = image->clone();
}

Image Image::createCopy() const
{
	return Image (image != nullptr ? image->clone() : nullptr);
}

Image Image::rescaled (const int newWidth, const int newHeight, const Graphics::ResamplingQuality quality) const
{
	if (image == nullptr || (image->width == newWidth && image->height == newHeight))
		return *this;

	const ScopedPointer<ImageType> type (image->createType());
	Image newImage (type->create (image->pixelFormat, newWidth, newHeight, hasAlphaChannel()));

	Graphics g (newImage);
	g.setImageResamplingQuality (quality);
	g.drawImage (*this, 0, 0, newWidth, newHeight, 0, 0, image->width, image->height, false);

	return newImage;
}

Image Image::convertedToFormat (PixelFormat newFormat) const
{
	if (image == nullptr || newFormat == image->pixelFormat)
		return *this;

	const int w = image->width, h = image->height;

	const ScopedPointer<ImageType> type (image->createType());
	Image newImage (type->create (newFormat, w, h, false));

	if (newFormat == SingleChannel)
	{
		if (! hasAlphaChannel())
		{
			newImage.clear (getBounds(), Colours::black);
		}
		else
		{
			const BitmapData destData (newImage, 0, 0, w, h, BitmapData::writeOnly);
			const BitmapData srcData (*this, 0, 0, w, h);

			for (int y = 0; y < h; ++y)
			{
				const PixelARGB* const src = (const PixelARGB*) srcData.getLinePointer (y);
				uint8* const dst = destData.getLinePointer (y);

				for (int x = 0; x < w; ++x)
					dst[x] = src[x].getAlpha();
			}
		}
	}
	else if (image->pixelFormat == SingleChannel && newFormat == Image::ARGB)
	{
		const BitmapData destData (newImage, 0, 0, w, h, BitmapData::writeOnly);
		const BitmapData srcData (*this, 0, 0, w, h);

		for (int y = 0; y < h; ++y)
		{
			const PixelAlpha* const src = (const PixelAlpha*) srcData.getLinePointer (y);
			PixelARGB* const dst = (PixelARGB*) destData.getLinePointer (y);

			for (int x = 0; x < w; ++x)
				dst[x].set (src[x]);
		}
	}
	else
	{
		if (hasAlphaChannel())
			newImage.clear (getBounds());

		Graphics g (newImage);
		g.drawImageAt (*this, 0, 0);
	}

	return newImage;
}

NamedValueSet* Image::getProperties() const
{
	return image == nullptr ? nullptr : &(image->userData);
}

Image::BitmapData::BitmapData (Image& image, const int x, const int y, const int w, const int h, BitmapData::ReadWriteMode mode)
	: width (w),
	  height (h)
{
	// The BitmapData class must be given a valid image, and a valid rectangle within it!
	jassert (image.image != nullptr);
	jassert (x >= 0 && y >= 0 && w > 0 && h > 0 && x + w <= image.getWidth() && y + h <= image.getHeight());

	image.image->initialiseBitmapData (*this, x, y, mode);
	jassert (data != nullptr && pixelStride > 0 && lineStride != 0);
}

Image::BitmapData::BitmapData (const Image& image, const int x, const int y, const int w, const int h)
	: width (w),
	  height (h)
{
	// The BitmapData class must be given a valid image, and a valid rectangle within it!
	jassert (image.image != nullptr);
	jassert (x >= 0 && y >= 0 && w > 0 && h > 0 && x + w <= image.getWidth() && y + h <= image.getHeight());

	image.image->initialiseBitmapData (*this, x, y, readOnly);
	jassert (data != nullptr && pixelStride > 0 && lineStride != 0);
}

Image::BitmapData::BitmapData (const Image& image, BitmapData::ReadWriteMode mode)
	: width (image.getWidth()),
	  height (image.getHeight())
{
	// The BitmapData class must be given a valid image!
	jassert (image.image != nullptr);

	image.image->initialiseBitmapData (*this, 0, 0, mode);
	jassert (data != nullptr && pixelStride > 0 && lineStride != 0);
}

Image::BitmapData::~BitmapData()
{
}

Colour Image::BitmapData::getPixelColour (const int x, const int y) const noexcept
{
	jassert (isPositiveAndBelow (x, width) && isPositiveAndBelow (y, height));

	const uint8* const pixel = getPixelPointer (x, y);

	switch (pixelFormat)
	{
		case Image::ARGB:           return Colour (((const PixelARGB*)  pixel)->getUnpremultipliedARGB());
		case Image::RGB:            return Colour (((const PixelRGB*)   pixel)->getUnpremultipliedARGB());
		case Image::SingleChannel:  return Colour (((const PixelAlpha*) pixel)->getUnpremultipliedARGB());
		default:                    jassertfalse; break;
	}

	return Colour();
}

void Image::BitmapData::setPixelColour (const int x, const int y, const Colour& colour) const noexcept
{
	jassert (isPositiveAndBelow (x, width) && isPositiveAndBelow (y, height));

	uint8* const pixel = getPixelPointer (x, y);
	const PixelARGB col (colour.getPixelARGB());

	switch (pixelFormat)
	{
		case Image::ARGB:           ((PixelARGB*)  pixel)->set (col); break;
		case Image::RGB:            ((PixelRGB*)   pixel)->set (col); break;
		case Image::SingleChannel:  ((PixelAlpha*) pixel)->set (col); break;
		default:                    jassertfalse; break;
	}
}

void Image::clear (const Rectangle<int>& area, const Colour& colourToClearTo)
{
	const ScopedPointer<LowLevelGraphicsContext> g (image->createLowLevelContext());
	g->setFill (colourToClearTo);
	g->fillRect (area, true);
}

Colour Image::getPixelAt (const int x, const int y) const
{
	if (isPositiveAndBelow (x, getWidth()) && isPositiveAndBelow (y, getHeight()))
	{
		const BitmapData srcData (*this, x, y, 1, 1);
		return srcData.getPixelColour (0, 0);
	}

	return Colour();
}

void Image::setPixelAt (const int x, const int y, const Colour& colour)
{
	if (isPositiveAndBelow (x, getWidth()) && isPositiveAndBelow (y, getHeight()))
	{
		const BitmapData destData (*this, x, y, 1, 1, BitmapData::writeOnly);
		destData.setPixelColour (0, 0, colour);
	}
}

void Image::multiplyAlphaAt (const int x, const int y, const float multiplier)
{
	if (isPositiveAndBelow (x, getWidth()) && isPositiveAndBelow (y, getHeight())
		 && hasAlphaChannel())
	{
		const BitmapData destData (*this, x, y, 1, 1, BitmapData::readWrite);

		if (isARGB())
			((PixelARGB*) destData.data)->multiplyAlpha (multiplier);
		else
			*(destData.data) = (uint8) (*(destData.data) * multiplier);
	}
}

template <class PixelType>
struct PixelIterator
{
	template <class PixelOperation>
	static void iterate (const Image::BitmapData& data, const PixelOperation& pixelOp)
	{
		for (int y = 0; y < data.height; ++y)
		{
			uint8* p = data.getLinePointer (y);

			for (int x = 0; x < data.width; ++x)
			{
				pixelOp (*(PixelType*) p);
				p += data.pixelStride;
			}
		}
	}
};

template <class PixelOperation>
static void performPixelOp (const Image::BitmapData& data, const PixelOperation& pixelOp)
{
	switch (data.pixelFormat)
	{
		case Image::ARGB:           PixelIterator<PixelARGB> ::iterate (data, pixelOp); break;
		case Image::RGB:            PixelIterator<PixelRGB>  ::iterate (data, pixelOp); break;
		case Image::SingleChannel:  PixelIterator<PixelAlpha>::iterate (data, pixelOp); break;
		default:                    jassertfalse; break;
	}
}

struct AlphaMultiplyOp
{
	AlphaMultiplyOp (float alpha_) noexcept : alpha (alpha_) {}

	const float alpha;

	template <class PixelType>
	void operator() (PixelType& pixel) const
	{
		pixel.multiplyAlpha (alpha);
	}

	JUCE_DECLARE_NON_COPYABLE (AlphaMultiplyOp);
};

void Image::multiplyAllAlphas (const float amountToMultiplyBy)
{
	jassert (hasAlphaChannel());

	const BitmapData destData (*this, 0, 0, getWidth(), getHeight(), BitmapData::readWrite);
	performPixelOp (destData, AlphaMultiplyOp (amountToMultiplyBy));
}

struct DesaturateOp
{
	template <class PixelType>
	void operator() (PixelType& pixel) const
	{
		pixel.desaturate();
	}
};

void Image::desaturate()
{
	if (isARGB() || isRGB())
	{
		const BitmapData destData (*this, 0, 0, getWidth(), getHeight(), BitmapData::readWrite);
		performPixelOp (destData, DesaturateOp());
	}
}

void Image::createSolidAreaMask (RectangleList& result, const float alphaThreshold) const
{
	if (hasAlphaChannel())
	{
		const uint8 threshold = (uint8) jlimit (0, 255, roundToInt (alphaThreshold * 255.0f));
		SparseSet<int> pixelsOnRow;

		const BitmapData srcData (*this, 0, 0, getWidth(), getHeight());

		for (int y = 0; y < srcData.height; ++y)
		{
			pixelsOnRow.clear();
			const uint8* lineData = srcData.getLinePointer (y);

			if (isARGB())
			{
				for (int x = 0; x < srcData.width; ++x)
				{
					if (((const PixelARGB*) lineData)->getAlpha() >= threshold)
						pixelsOnRow.addRange (Range<int> (x, x + 1));

					lineData += srcData.pixelStride;
				}
			}
			else
			{
				for (int x = 0; x < srcData.width; ++x)
				{
					if (*lineData >= threshold)
						pixelsOnRow.addRange (Range<int> (x, x + 1));

					lineData += srcData.pixelStride;
				}
			}

			for (int i = 0; i < pixelsOnRow.getNumRanges(); ++i)
			{
				const Range<int> range (pixelsOnRow.getRange (i));
				result.add (Rectangle<int> (range.getStart(), y, range.getLength(), 1));
			}

			result.consolidate();
		}
	}
	else
	{
		result.add (0, 0, getWidth(), getHeight());
	}
}

void Image::moveImageSection (int dx, int dy,
							  int sx, int sy,
							  int w, int h)
{
	if (dx < 0)
	{
		w += dx;
		sx -= dx;
		dx = 0;
	}

	if (dy < 0)
	{
		h += dy;
		sy -= dy;
		dy = 0;
	}

	if (sx < 0)
	{
		w += sx;
		dx -= sx;
		sx = 0;
	}

	if (sy < 0)
	{
		h += sy;
		dy -= sy;
		sy = 0;
	}

	const int minX = jmin (dx, sx);
	const int minY = jmin (dy, sy);

	w = jmin (w, getWidth()  - jmax (sx, dx));
	h = jmin (h, getHeight() - jmax (sy, dy));

	if (w > 0 && h > 0)
	{
		const int maxX = jmax (dx, sx) + w;
		const int maxY = jmax (dy, sy) + h;

		const BitmapData destData (*this, minX, minY, maxX - minX, maxY - minY, BitmapData::readWrite);

		uint8* dst       = destData.getPixelPointer (dx - minX, dy - minY);
		const uint8* src = destData.getPixelPointer (sx - minX, sy - minY);

		const size_t lineSize = (size_t) (destData.pixelStride * w);

		if (dy > sy)
		{
			while (--h >= 0)
			{
				const int offset = h * destData.lineStride;
				memmove (dst + offset, src + offset, lineSize);
			}
		}
		else if (dst != src)
		{
			while (--h >= 0)
			{
				memmove (dst, src, lineSize);
				dst += destData.lineStride;
				src += destData.lineStride;
			}
		}
	}
}

/*** End of inlined file: juce_Image.cpp ***/


/*** Start of inlined file: juce_ImageCache.cpp ***/
class ImageCache::Pimpl     : public Timer,
							  public DeletedAtShutdown
{
public:
	Pimpl()
		: cacheTimeout (5000)
	{
	}

	~Pimpl()
	{
		clearSingletonInstance();
	}

	Image getFromHashCode (const int64 hashCode)
	{
		const ScopedLock sl (lock);

		for (int i = images.size(); --i >= 0;)
		{
			Item* const item = images.getUnchecked(i);

			if (item->hashCode == hashCode)
				return item->image;
		}

		return Image::null;
	}

	void addImageToCache (const Image& image, const int64 hashCode)
	{
		if (image.isValid())
		{
			if (! isTimerRunning())
				startTimer (2000);

			Item* const item = new Item();
			item->hashCode = hashCode;
			item->image = image;
			item->lastUseTime = Time::getApproximateMillisecondCounter();

			const ScopedLock sl (lock);
			images.add (item);
		}
	}

	void timerCallback()
	{
		const uint32 now = Time::getApproximateMillisecondCounter();

		const ScopedLock sl (lock);

		for (int i = images.size(); --i >= 0;)
		{
			Item* const item = images.getUnchecked(i);

			if (item->image.getReferenceCount() <= 1)
			{
				if (now > item->lastUseTime + cacheTimeout || now < item->lastUseTime - 1000)
					images.remove (i);
			}
			else
			{
				item->lastUseTime = now; // multiply-referenced, so this image is still in use.
			}
		}

		if (images.size() == 0)
			stopTimer();
	}

	struct Item
	{
		Image image;
		int64 hashCode;
		uint32 lastUseTime;
	};

	int cacheTimeout;

	juce_DeclareSingleton_SingleThreaded_Minimal (ImageCache::Pimpl);

private:
	OwnedArray<Item> images;
	CriticalSection lock;

	JUCE_DECLARE_NON_COPYABLE (Pimpl);
};

juce_ImplementSingleton_SingleThreaded (ImageCache::Pimpl);

Image ImageCache::getFromHashCode (const int64 hashCode)
{
	if (Pimpl::getInstanceWithoutCreating() != nullptr)
		return Pimpl::getInstanceWithoutCreating()->getFromHashCode (hashCode);

	return Image::null;
}

void ImageCache::addImageToCache (const Image& image, const int64 hashCode)
{
	Pimpl::getInstance()->addImageToCache (image, hashCode);
}

Image ImageCache::getFromFile (const File& file)
{
	const int64 hashCode = file.hashCode64();
	Image image (getFromHashCode (hashCode));

	if (image.isNull())
	{
		image = ImageFileFormat::loadFrom (file);
		addImageToCache (image, hashCode);
	}

	return image;
}

Image ImageCache::getFromMemory (const void* imageData, const int dataSize)
{
	const int64 hashCode = (int64) (pointer_sized_int) imageData;
	Image image (getFromHashCode (hashCode));

	if (image.isNull())
	{
		image = ImageFileFormat::loadFrom (imageData, (size_t) dataSize);
		addImageToCache (image, hashCode);
	}

	return image;
}

void ImageCache::setCacheTimeout (const int millisecs)
{
	Pimpl::getInstance()->cacheTimeout = millisecs;
}

/*** End of inlined file: juce_ImageCache.cpp ***/


/*** Start of inlined file: juce_ImageConvolutionKernel.cpp ***/
ImageConvolutionKernel::ImageConvolutionKernel (const int size_)
	: values ((size_t) (size_ * size_)),
	  size (size_)
{
	clear();
}

ImageConvolutionKernel::~ImageConvolutionKernel()
{
}

float ImageConvolutionKernel::getKernelValue (const int x, const int y) const noexcept
{
	if (isPositiveAndBelow (x, size) && isPositiveAndBelow (y, size))
		return values [x + y * size];

	jassertfalse;
	return 0;
}

void ImageConvolutionKernel::setKernelValue (const int x, const int y, const float value) noexcept
{
	if (isPositiveAndBelow (x, size) && isPositiveAndBelow (y, size))
	{
		values [x + y * size] = value;
	}
	else
	{
		jassertfalse;
	}
}

void ImageConvolutionKernel::clear()
{
	for (int i = size * size; --i >= 0;)
		values[i] = 0;
}

void ImageConvolutionKernel::setOverallSum (const float desiredTotalSum)
{
	double currentTotal = 0.0;

	for (int i = size * size; --i >= 0;)
		currentTotal += values[i];

	rescaleAllValues ((float) (desiredTotalSum / currentTotal));
}

void ImageConvolutionKernel::rescaleAllValues (const float multiplier)
{
	for (int i = size * size; --i >= 0;)
		values[i] *= multiplier;
}

void ImageConvolutionKernel::createGaussianBlur (const float radius)
{
	const double radiusFactor = -1.0 / (radius * radius * 2);
	const int centre = size >> 1;

	for (int y = size; --y >= 0;)
	{
		for (int x = size; --x >= 0;)
		{
			const int cx = x - centre;
			const int cy = y - centre;

			values [x + y * size] = (float) exp (radiusFactor * (cx * cx + cy * cy));
		}
	}

	setOverallSum (1.0f);
}

void ImageConvolutionKernel::applyToImage (Image& destImage,
										   const Image& sourceImage,
										   const Rectangle<int>& destinationArea) const
{
	if (sourceImage == destImage)
	{
		destImage.duplicateIfShared();
	}
	else
	{
		if (sourceImage.getWidth() != destImage.getWidth()
			 || sourceImage.getHeight() != destImage.getHeight()
			 || sourceImage.getFormat() != destImage.getFormat())
		{
			jassertfalse;
			return;
		}
	}

	const Rectangle<int> area (destinationArea.getIntersection (destImage.getBounds()));

	if (area.isEmpty())
		return;

	const int right = area.getRight();
	const int bottom = area.getBottom();

	const Image::BitmapData destData (destImage, area.getX(), area.getY(), area.getWidth(), area.getHeight(),
									  Image::BitmapData::writeOnly);
	uint8* line = destData.data;

	const Image::BitmapData srcData (sourceImage, Image::BitmapData::readOnly);

	if (destData.pixelStride == 4)
	{
		for (int y = area.getY(); y < bottom; ++y)
		{
			uint8* dest = line;
			line += destData.lineStride;

			for (int x = area.getX(); x < right; ++x)
			{
				float c1 = 0;
				float c2 = 0;
				float c3 = 0;
				float c4 = 0;

				for (int yy = 0; yy < size; ++yy)
				{
					const int sy = y + yy - (size >> 1);

					if (sy >= srcData.height)
						break;

					if (sy >= 0)
					{
						int sx = x - (size >> 1);
						const uint8* src = srcData.getPixelPointer (sx, sy);

						for (int xx = 0; xx < size; ++xx)
						{
							if (sx >= srcData.width)
								break;

							if (sx >= 0)
							{
								const float kernelMult = values [xx + yy * size];
								c1 += kernelMult * *src++;
								c2 += kernelMult * *src++;
								c3 += kernelMult * *src++;
								c4 += kernelMult * *src++;
							}
							else
							{
								src += 4;
							}

							++sx;
						}
					}
				}

				*dest++ = (uint8) jmin (0xff, roundToInt (c1));
				*dest++ = (uint8) jmin (0xff, roundToInt (c2));
				*dest++ = (uint8) jmin (0xff, roundToInt (c3));
				*dest++ = (uint8) jmin (0xff, roundToInt (c4));
			}
		}
	}
	else if (destData.pixelStride == 3)
	{
		for (int y = area.getY(); y < bottom; ++y)
		{
			uint8* dest = line;
			line += destData.lineStride;

			for (int x = area.getX(); x < right; ++x)
			{
				float c1 = 0;
				float c2 = 0;
				float c3 = 0;

				for (int yy = 0; yy < size; ++yy)
				{
					const int sy = y + yy - (size >> 1);

					if (sy >= srcData.height)
						break;

					if (sy >= 0)
					{
						int sx = x - (size >> 1);
						const uint8* src = srcData.getPixelPointer (sx, sy);

						for (int xx = 0; xx < size; ++xx)
						{
							if (sx >= srcData.width)
								break;

							if (sx >= 0)
							{
								const float kernelMult = values [xx + yy * size];
								c1 += kernelMult * *src++;
								c2 += kernelMult * *src++;
								c3 += kernelMult * *src++;
							}
							else
							{
								src += 3;
							}

							++sx;
						}
					}
				}

				*dest++ = (uint8) roundToInt (c1);
				*dest++ = (uint8) roundToInt (c2);
				*dest++ = (uint8) roundToInt (c3);
			}
		}
	}
}

/*** End of inlined file: juce_ImageConvolutionKernel.cpp ***/


/*** Start of inlined file: juce_ImageFileFormat.cpp ***/
ImageFileFormat* ImageFileFormat::findImageFormatForStream (InputStream& input)
{
	struct DefaultImageFormats
	{
		PNGImageFormat  png;
		JPEGImageFormat jpg;
		GIFImageFormat  gif;
	};

	static DefaultImageFormats defaultImageFormats;

	ImageFileFormat* formats[] = { &defaultImageFormats.png,
								   &defaultImageFormats.jpg,
								   &defaultImageFormats.gif };

	const int64 streamPos = input.getPosition();

	for (int i = 0; i < numElementsInArray (formats); ++i)
	{
		const bool found = formats[i]->canUnderstand (input);
		input.setPosition (streamPos);

		if (found)
			return formats[i];
	}

	return nullptr;
}

Image ImageFileFormat::loadFrom (InputStream& input)
{
	ImageFileFormat* const format = findImageFormatForStream (input);

	if (format != nullptr)
		return format->decodeImage (input);

	return Image::null;
}

Image ImageFileFormat::loadFrom (const File& file)
{
	FileInputStream stream (file);

	if (stream.openedOk())
	{
		BufferedInputStream b (stream, 8192);
		return loadFrom (b);
	}

	return Image::null;
}

Image ImageFileFormat::loadFrom (const void* rawData, const size_t numBytes)
{
	if (rawData != nullptr && numBytes > 4)
	{
		MemoryInputStream stream (rawData, numBytes, false);
		return loadFrom (stream);
	}

	return Image::null;
}

/*** End of inlined file: juce_ImageFileFormat.cpp ***/


/*** Start of inlined file: juce_GIFLoader.cpp ***/
#if (JUCE_MAC || JUCE_IOS) && USE_COREGRAPHICS_RENDERING && JUCE_USE_COREIMAGE_LOADER
 Image juce_loadWithCoreImage (InputStream& input);
#else

class GIFLoader
{
public:
	GIFLoader (InputStream& in)
		: input (in),
		  dataBlockIsZero (false), fresh (false), finished (false),
		  currentBit (0), lastBit (0), lastByteIndex (0),
		  codeSize (0), setCodeSize (0), maxCode (0), maxCodeSize (0),
		  firstcode (0), oldcode (0), clearCode (0), endCode (0)
	{
		int imageWidth, imageHeight;
		if (! getSizeFromHeader (imageWidth, imageHeight))
			return;

		uint8 buf [16];
		if (in.read (buf, 3) != 3)
			return;

		int numColours = 2 << (buf[0] & 7);
		int transparent = -1;

		if ((buf[0] & 0x80) != 0)
			readPalette (numColours);

		for (;;)
		{
			if (input.read (buf, 1) != 1 || buf[0] == ';')
				break;

			if (buf[0] == '!')
			{
				if (readExtension (transparent))
					continue;

				break;
			}

			if (buf[0] != ',')
				continue;

			if (input.read (buf, 9) == 9)
			{
				imageWidth  = (int) ByteOrder::littleEndianShort (buf + 4);
				imageHeight = (int) ByteOrder::littleEndianShort (buf + 6);

				numColours = 2 << (buf[8] & 7);

				if ((buf[8] & 0x80) != 0)
					if (! readPalette (numColours))
						break;

				image = Image (transparent >= 0 ? Image::ARGB : Image::RGB,
							   imageWidth, imageHeight, transparent >= 0);

				image.getProperties()->set ("originalImageHadAlpha", transparent >= 0);

				readImage ((buf[8] & 0x40) != 0, transparent);
			}

			break;
		}
	}

	Image image;

private:
	InputStream& input;
	uint8 buffer [260];
	PixelARGB palette [256];
	bool dataBlockIsZero, fresh, finished;
	int currentBit, lastBit, lastByteIndex;
	int codeSize, setCodeSize;
	int maxCode, maxCodeSize;
	int firstcode, oldcode;
	int clearCode, endCode;
	enum { maxGifCode = 1 << 12 };
	int table [2] [maxGifCode];
	int stack [2 * maxGifCode];
	int* sp;

	bool getSizeFromHeader (int& w, int& h)
	{
		char b[6];

		if (input.read (b, 6) == 6
			 && (strncmp ("GIF87a", b, 6) == 0
				  || strncmp ("GIF89a", b, 6) == 0))
		{
			if (input.read (b, 4) == 4)
			{
				w = (int) ByteOrder::littleEndianShort (b);
				h = (int) ByteOrder::littleEndianShort (b + 2);
				return w > 0 && h > 0;
			}
		}

		return false;
	}

	bool readPalette (const int numCols)
	{
		for (int i = 0; i < numCols; ++i)
		{
			uint8 rgb[4];
			input.read (rgb, 3);

			palette[i].setARGB (0xff, rgb[0], rgb[1], rgb[2]);
			palette[i].premultiply();
		}

		return true;
	}

	int readDataBlock (uint8* const dest)
	{
		uint8 n;
		if (input.read (&n, 1) == 1)
		{
			dataBlockIsZero = (n == 0);

			if (dataBlockIsZero || (input.read (dest, n) == n))
				return n;
		}

		return -1;
	}

	int readExtension (int& transparent)
	{
		uint8 type;
		if (input.read (&type, 1) != 1)
			return false;

		uint8 b [260];
		int n = 0;

		if (type == 0xf9)
		{
			n = readDataBlock (b);
			if (n < 0)
				return 1;

			if ((b[0] & 1) != 0)
				transparent = b[3];
		}

		do
		{
			n = readDataBlock (b);
		}
		while (n > 0);

		return n >= 0;
	}

	void clearTable()
	{
		int i;
		for (i = 0; i < clearCode; ++i)
		{
			table[0][i] = 0;
			table[1][i] = i;
		}

		for (; i < maxGifCode; ++i)
		{
			table[0][i] = 0;
			table[1][i] = 0;
		}
	}

	void initialise (const int inputCodeSize)
	{
		setCodeSize = inputCodeSize;
		codeSize = setCodeSize + 1;
		clearCode = 1 << setCodeSize;
		endCode = clearCode + 1;
		maxCodeSize = 2 * clearCode;
		maxCode = clearCode + 2;

		getCode (0, true);

		fresh = true;
		clearTable();
		sp = stack;
	}

	int readLZWByte()
	{
		if (fresh)
		{
			fresh = false;

			for (;;)
			{
				firstcode = oldcode = getCode (codeSize, false);

				if (firstcode != clearCode)
					return firstcode;
			}
		}

		if (sp > stack)
			return *--sp;

		int code;

		while ((code = getCode (codeSize, false)) >= 0)
		{
			if (code == clearCode)
			{
				clearTable();
				codeSize = setCodeSize + 1;
				maxCodeSize = 2 * clearCode;
				maxCode = clearCode + 2;
				sp = stack;
				firstcode = oldcode = getCode (codeSize, false);
				return firstcode;
			}
			else if (code == endCode)
			{
				if (dataBlockIsZero)
					return -2;

				uint8 buf [260];
				int n;

				while ((n = readDataBlock (buf)) > 0)
				{}

				if (n != 0)
					return -2;
			}

			const int incode = code;

			if (code >= maxCode)
			{
				*sp++ = firstcode;
				code = oldcode;
			}

			while (code >= clearCode)
			{
				*sp++ = table[1][code];
				if (code == table[0][code])
					return -2;

				code = table[0][code];
			}

			*sp++ = firstcode = table[1][code];

			if ((code = maxCode) < maxGifCode)
			{
				table[0][code] = oldcode;
				table[1][code] = firstcode;
				++maxCode;

				if (maxCode >= maxCodeSize && maxCodeSize < maxGifCode)
				{
					maxCodeSize <<= 1;
					++codeSize;
				}
			}

			oldcode = incode;

			if (sp > stack)
				return *--sp;
		}

		return code;
	}

	int getCode (const int codeSize_, const bool shouldInitialise)
	{
		if (shouldInitialise)
		{
			currentBit = 0;
			lastBit = 0;
			finished = false;
			return 0;
		}

		if ((currentBit + codeSize_) >= lastBit)
		{
			if (finished)
				return -1;

			buffer[0] = buffer [lastByteIndex - 2];
			buffer[1] = buffer [lastByteIndex - 1];

			const int n = readDataBlock (buffer + 2);

			if (n == 0)
				finished = true;

			lastByteIndex = 2 + n;
			currentBit = (currentBit - lastBit) + 16;
			lastBit = (2 + n) * 8 ;
		}

		int result = 0;
		int i = currentBit;

		for (int j = 0; j < codeSize_; ++j)
		{
			result |= ((buffer[i >> 3] & (1 << (i & 7))) != 0) << j;
			++i;
		}

		currentBit += codeSize_;
		return result;
	}

	bool readImage (const int interlace, const int transparent)
	{
		uint8 c;
		if (input.read (&c, 1) != 1)
			return false;

		initialise (c);

		if (transparent >= 0)
			palette [transparent].setARGB (0, 0, 0, 0);

		int xpos = 0, ypos = 0, yStep = 8, pass = 0;

		const Image::BitmapData destData (image, Image::BitmapData::writeOnly);
		uint8* p = destData.getPixelPointer (0, 0);
		const bool hasAlpha = image.hasAlphaChannel();

		for (;;)
		{
			const int index = readLZWByte();
			if (index < 0)
				break;

			if (hasAlpha)
				((PixelARGB*) p)->set (palette [index]);
			else
				((PixelRGB*)  p)->set (palette [index]);

			p += destData.pixelStride;

			if (++xpos == destData.width)
			{
				xpos = 0;

				if (interlace)
				{
					ypos += yStep;

					while (ypos >= destData.height)
					{
						switch (++pass)
						{
							case 1:     ypos = 4; yStep = 8; break;
							case 2:     ypos = 2; yStep = 4; break;
							case 3:     ypos = 1; yStep = 2; break;
							default:    return true;
						}
					}
				}
				else
				{
					if (++ypos >= destData.height)
						break;
				}

				p = destData.getPixelPointer (xpos, ypos);
			}
		}

		return true;
	}

	JUCE_DECLARE_NON_COPYABLE (GIFLoader);
};

#endif

GIFImageFormat::GIFImageFormat() {}
GIFImageFormat::~GIFImageFormat() {}

String GIFImageFormat::getFormatName()    { return "GIF"; }

bool GIFImageFormat::canUnderstand (InputStream& in)
{
	char header [4];

	return (in.read (header, sizeof (header)) == sizeof (header))
			 && header[0] == 'G'
			 && header[1] == 'I'
			 && header[2] == 'F';
}

Image GIFImageFormat::decodeImage (InputStream& in)
{
   #if (JUCE_MAC || JUCE_IOS) && USE_COREGRAPHICS_RENDERING && JUCE_USE_COREIMAGE_LOADER
	return juce_loadWithCoreImage (in);
   #else
	const ScopedPointer <GIFLoader> loader (new GIFLoader (in));
	return loader->image;
   #endif
}

bool GIFImageFormat::writeImageToStream (const Image& /*sourceImage*/, OutputStream& /*destStream*/)
{
	jassertfalse; // writing isn't implemented for GIFs!
	return false;
}

/*** End of inlined file: juce_GIFLoader.cpp ***/


/*** Start of inlined file: juce_JPEGLoader.cpp ***/
#if JUCE_MSVC
 #pragma warning (push)
 #pragma warning (disable: 4365)
#endif

namespace jpeglibNamespace
{
#if JUCE_INCLUDE_JPEGLIB_CODE || ! defined (JUCE_INCLUDE_JPEGLIB_CODE)
   #if JUCE_MINGW
	typedef unsigned char boolean;
   #endif
	#define JPEG_INTERNALS
	#undef FAR

/*** Start of inlined file: jpeglib.h ***/
#ifndef JPEGLIB_H
#define JPEGLIB_H

/*
 * First we include the configuration files that record how this
 * installation of the JPEG library is set up.  jconfig.h can be
 * generated automatically for many systems.  jmorecfg.h contains
 * manual configuration options that most people need not worry about.
 */

#ifndef JCONFIG_INCLUDED	/* in case jinclude.h already did */

/*** Start of inlined file: jconfig.h ***/
/* see jconfig.doc for explanations */

// disable all the warnings under MSVC
#ifdef _MSC_VER
#pragma warning (disable: 4996 4267 4100 4127 4702 4244)
#endif

#ifdef __BORLANDC__
#pragma warn -8057
#pragma warn -8019
#pragma warn -8004
#pragma warn -8008
#endif

#define HAVE_PROTOTYPES
#define HAVE_UNSIGNED_CHAR
#define HAVE_UNSIGNED_SHORT
/* #define void char */
/* #define const */
#undef CHAR_IS_UNSIGNED
#define HAVE_STDDEF_H
#define HAVE_STDLIB_H
#undef NEED_BSD_STRINGS
#undef NEED_SYS_TYPES_H
#undef NEED_FAR_POINTERS	/* we presume a 32-bit flat memory model */
#undef NEED_SHORT_EXTERNAL_NAMES
#undef INCOMPLETE_TYPES_BROKEN

/* Define "boolean" as unsigned char, not int, per Windows custom */
#ifndef __RPCNDR_H__		/* don't conflict if rpcndr.h already read */
typedef unsigned char boolean;
#endif
#define HAVE_BOOLEAN		/* prevent jmorecfg.h from redefining it */

#ifdef JPEG_INTERNALS

#undef RIGHT_SHIFT_IS_UNSIGNED

#endif /* JPEG_INTERNALS */

#ifdef JPEG_CJPEG_DJPEG

#define BMP_SUPPORTED		/* BMP image file format */
#define GIF_SUPPORTED		/* GIF image file format */
#define PPM_SUPPORTED		/* PBMPLUS PPM/PGM image file format */
#undef RLE_SUPPORTED		/* Utah RLE image file format */
#define TARGA_SUPPORTED		/* Targa image file format */

#define TWO_FILE_COMMANDLINE	/* optional */
#define USE_SETMODE		/* Microsoft has setmode() */
#undef NEED_SIGNAL_CATCHER
#undef DONT_USE_B_MODE
#undef PROGRESS_REPORT		/* optional */

#endif /* JPEG_CJPEG_DJPEG */

/*** End of inlined file: jconfig.h ***/


#endif

/*** Start of inlined file: jmorecfg.h ***/
/*
 * Define BITS_IN_JSAMPLE as either
 *   8   for 8-bit sample values (the usual setting)
 *   12  for 12-bit sample values
 * Only 8 and 12 are legal data precisions for lossy JPEG according to the
 * JPEG standard, and the IJG code does not support anything else!
 * We do not support run-time selection of data precision, sorry.
 */

#define BITS_IN_JSAMPLE  8	/* use 8 or 12 */

/*
 * Maximum number of components (color channels) allowed in JPEG image.
 * To meet the letter of the JPEG spec, set this to 255.  However, darn
 * few applications need more than 4 channels (maybe 5 for CMYK + alpha
 * mask).  We recommend 10 as a reasonable compromise; use 4 if you are
 * really short on memory.  (Each allowed component costs a hundred or so
 * bytes of storage, whether actually used in an image or not.)
 */

#define MAX_COMPONENTS  10	/* maximum number of image components */

/*
 * Basic data types.
 * You may need to change these if you have a machine with unusual data
 * type sizes; for example, "char" not 8 bits, "short" not 16 bits,
 * or "long" not 32 bits.  We don't care whether "int" is 16 or 32 bits,
 * but it had better be at least 16.
 */

/* Representation of a single sample (pixel element value).
 * We frequently allocate large arrays of these, so it's important to keep
 * them small.  But if you have memory to burn and access to char or short
 * arrays is very slow on your hardware, you might want to change these.
 */

#if BITS_IN_JSAMPLE == 8
/* JSAMPLE should be the smallest type that will hold the values 0..255.
 * You can use a signed char by having GETJSAMPLE mask it with 0xFF.
 */

#ifdef HAVE_UNSIGNED_CHAR

typedef unsigned char JSAMPLE;
#define GETJSAMPLE(value)  ((int) (value))

#else /* not HAVE_UNSIGNED_CHAR */

typedef char JSAMPLE;
#ifdef CHAR_IS_UNSIGNED
#define GETJSAMPLE(value)  ((int) (value))
#else
#define GETJSAMPLE(value)  ((int) (value) & 0xFF)
#endif /* CHAR_IS_UNSIGNED */

#endif /* HAVE_UNSIGNED_CHAR */

#define MAXJSAMPLE	255
#define CENTERJSAMPLE	128

#endif /* BITS_IN_JSAMPLE == 8 */

#if BITS_IN_JSAMPLE == 12
/* JSAMPLE should be the smallest type that will hold the values 0..4095.
 * On nearly all machines "short" will do nicely.
 */

typedef short JSAMPLE;
#define GETJSAMPLE(value)  ((int) (value))

#define MAXJSAMPLE	4095
#define CENTERJSAMPLE	2048

#endif /* BITS_IN_JSAMPLE == 12 */

/* Representation of a DCT frequency coefficient.
 * This should be a signed value of at least 16 bits; "short" is usually OK.
 * Again, we allocate large arrays of these, but you can change to int
 * if you have memory to burn and "short" is really slow.
 */

typedef short JCOEF;

/* Compressed datastreams are represented as arrays of JOCTET.
 * These must be EXACTLY 8 bits wide, at least once they are written to
 * external storage.  Note that when using the stdio data source/destination
 * managers, this is also the data type passed to fread/fwrite.
 */

#ifdef HAVE_UNSIGNED_CHAR

typedef unsigned char JOCTET;
#define GETJOCTET(value)  (value)

#else /* not HAVE_UNSIGNED_CHAR */

typedef char JOCTET;
#ifdef CHAR_IS_UNSIGNED
#define GETJOCTET(value)  (value)
#else
#define GETJOCTET(value)  ((value) & 0xFF)
#endif /* CHAR_IS_UNSIGNED */

#endif /* HAVE_UNSIGNED_CHAR */

/* These typedefs are used for various table entries and so forth.
 * They must be at least as wide as specified; but making them too big
 * won't cost a huge amount of memory, so we don't provide special
 * extraction code like we did for JSAMPLE.  (In other words, these
 * typedefs live at a different point on the speed/space tradeoff curve.)
 */

/* UINT8 must hold at least the values 0..255. */

#ifdef HAVE_UNSIGNED_CHAR
typedef unsigned char UINT8;
#else /* not HAVE_UNSIGNED_CHAR */
#ifdef CHAR_IS_UNSIGNED
typedef char UINT8;
#else /* not CHAR_IS_UNSIGNED */
typedef short UINT8;
#endif /* CHAR_IS_UNSIGNED */
#endif /* HAVE_UNSIGNED_CHAR */

/* UINT16 must hold at least the values 0..65535. */

#ifdef HAVE_UNSIGNED_SHORT
typedef unsigned short UINT16;
#else /* not HAVE_UNSIGNED_SHORT */
typedef unsigned int UINT16;
#endif /* HAVE_UNSIGNED_SHORT */

/* INT16 must hold at least the values -32768..32767. */

#ifndef XMD_H			/* X11/xmd.h correctly defines INT16 */
typedef short INT16;
#endif

/* INT32 must hold at least signed 32-bit values. */

#ifndef XMD_H			/* X11/xmd.h correctly defines INT32 */
typedef long INT32;
#endif

/* Datatype used for image dimensions.  The JPEG standard only supports
 * images up to 64K*64K due to 16-bit fields in SOF markers.  Therefore
 * "unsigned int" is sufficient on all machines.  However, if you need to
 * handle larger images and you don't mind deviating from the spec, you
 * can change this datatype.
 */

typedef unsigned int JDIMENSION;

#define JPEG_MAX_DIMENSION  65500L  /* a tad under 64K to prevent overflows */

/* These macros are used in all function definitions and extern declarations.
 * You could modify them if you need to change function linkage conventions;
 * in particular, you'll need to do that to make the library a Windows DLL.
 * Another application is to make all functions global for use with debuggers
 * or code profilers that require it.
 */

/* a function called through method pointers: */
#define METHODDEF(type)		static type
/* a function used only in its module: */
#define LOCAL(type)		static type
/* a function referenced thru EXTERNs: */
#define GLOBAL(type)		type
/* a reference to a GLOBAL function: */
#define EXTERN(type)		extern type

/* This macro is used to declare a "method", that is, a function pointer.
 * We want to supply prototype parameters if the compiler can cope.
 * Note that the arglist parameter must be parenthesized!
 * Again, you can customize this if you need special linkage keywords.
 */

#ifdef HAVE_PROTOTYPES
#define JMETHOD(type,methodname,arglist)  type (*methodname) arglist
#else
#define JMETHOD(type,methodname,arglist)  type (*methodname) ()
#endif

/* Here is the pseudo-keyword for declaring pointers that must be "far"
 * on 80x86 machines.  Most of the specialized coding for 80x86 is handled
 * by just saying "FAR *" where such a pointer is needed.  In a few places
 * explicit coding is needed; see uses of the NEED_FAR_POINTERS symbol.
 */

#ifdef NEED_FAR_POINTERS
#define FAR  far
#else
#define FAR
#endif

/*
 * On a few systems, type boolean and/or its values FALSE, TRUE may appear
 * in standard header files.  Or you may have conflicts with application-
 * specific header files that you want to include together with these files.
 * Defining HAVE_BOOLEAN before including jpeglib.h should make it work.
 */

#ifndef HAVE_BOOLEAN
typedef int boolean;
#endif
#ifndef FALSE			/* in case these macros already exist */
#define FALSE	0		/* values of boolean */
#endif
#ifndef TRUE
#define TRUE	1
#endif

/*
 * The remaining options affect code selection within the JPEG library,
 * but they don't need to be visible to most applications using the library.
 * To minimize application namespace pollution, the symbols won't be
 * defined unless JPEG_INTERNALS or JPEG_INTERNAL_OPTIONS has been defined.
 */

#ifdef JPEG_INTERNALS
#define JPEG_INTERNAL_OPTIONS
#endif

#ifdef JPEG_INTERNAL_OPTIONS

/*
 * These defines indicate whether to include various optional functions.
 * Undefining some of these symbols will produce a smaller but less capable
 * library.  Note that you can leave certain source files out of the
 * compilation/linking process if you've #undef'd the corresponding symbols.
 * (You may HAVE to do that if your compiler doesn't like null source files.)
 */

/* Arithmetic coding is unsupported for legal reasons.  Complaints to IBM. */

/* Capability options common to encoder and decoder: */

#define DCT_ISLOW_SUPPORTED	/* slow but accurate integer algorithm */
#define DCT_IFAST_SUPPORTED	/* faster, less accurate integer method */
#define DCT_FLOAT_SUPPORTED	/* floating-point: accurate, fast on fast HW */

/* Encoder capability options: */

#undef  C_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
#define C_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define C_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
#define ENTROPY_OPT_SUPPORTED	    /* Optimization of entropy coding parms? */
/* Note: if you selected 12-bit data precision, it is dangerous to turn off
 * ENTROPY_OPT_SUPPORTED.  The standard Huffman tables are only good for 8-bit
 * precision, so jchuff.c normally uses entropy optimization to compute
 * usable tables for higher precision.  If you don't want to do optimization,
 * you'll have to supply different default Huffman tables.
 * The exact same statements apply for progressive JPEG: the default tables
 * don't work for progressive mode.  (This may get fixed, however.)
 */
#define INPUT_SMOOTHING_SUPPORTED   /* Input image smoothing option? */

/* Decoder capability options: */

#undef  D_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
#define D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
#define D_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
#define SAVE_MARKERS_SUPPORTED	    /* jpeg_save_markers() needed? */
#define BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
#define IDCT_SCALING_SUPPORTED	    /* Output rescaling via IDCT? */
#undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
#define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
#define QUANT_1PASS_SUPPORTED	    /* 1-pass color quantization? */
#define QUANT_2PASS_SUPPORTED	    /* 2-pass color quantization? */

/* more capability options later, no doubt */

/*
 * Ordering of RGB data in scanlines passed to or from the application.
 * If your application wants to deal with data in the order B,G,R, just
 * change these macros.  You can also deal with formats such as R,G,B,X
 * (one extra byte per pixel) by changing RGB_PIXELSIZE.  Note that changing
 * the offsets will also change the order in which colormap data is organized.
 * RESTRICTIONS:
 * 1. The sample applications cjpeg,djpeg do NOT support modified RGB formats.
 * 2. These macros only affect RGB<=>YCbCr color conversion, so they are not
 *    useful if you are using JPEG color spaces other than YCbCr or grayscale.
 * 3. The color quantizer modules will not behave desirably if RGB_PIXELSIZE
 *    is not 3 (they don't understand about dummy color components!).  So you
 *    can't use color quantization if you change that value.
 */

#define RGB_RED		0	/* Offset of Red in an RGB scanline element */
#define RGB_GREEN	1	/* Offset of Green */
#define RGB_BLUE	2	/* Offset of Blue */
#define RGB_PIXELSIZE	3	/* JSAMPLEs per RGB scanline element */

/* Definitions for speed-related optimizations. */

/* If your compiler supports inline functions, define INLINE
 * as the inline keyword; otherwise define it as empty.
 */

#ifndef INLINE
#ifdef __GNUC__			/* for instance, GNU C knows about inline */
#define INLINE __inline__
#endif
#ifndef INLINE
#define INLINE			/* default is to define it as empty */
#endif
#endif

/* On some machines (notably 68000 series) "int" is 32 bits, but multiplying
 * two 16-bit shorts is faster than multiplying two ints.  Define MULTIPLIER
 * as short on such a machine.  MULTIPLIER must be at least 16 bits wide.
 */

#ifndef MULTIPLIER
#define MULTIPLIER  int		/* type for fastest integer multiply */
#endif

/* FAST_FLOAT should be either float or double, whichever is done faster
 * by your compiler.  (Note that this type is only used in the floating point
 * DCT routines, so it only matters if you've defined DCT_FLOAT_SUPPORTED.)
 * Typically, float is faster in ANSI C compilers, while double is faster in
 * pre-ANSI compilers (because they insist on converting to double anyway).
 * The code below therefore chooses float if we have ANSI-style prototypes.
 */

#ifndef FAST_FLOAT
#ifdef HAVE_PROTOTYPES
#define FAST_FLOAT  float
#else
#define FAST_FLOAT  double
#endif
#endif

#endif /* JPEG_INTERNAL_OPTIONS */

/*** End of inlined file: jmorecfg.h ***/


/* Version ID for the JPEG library.
 * Might be useful for tests like "#if JPEG_LIB_VERSION >= 60".
 */

#define JPEG_LIB_VERSION  62	/* Version 6b */

/* Various constants determining the sizes of things.
 * All of these are specified by the JPEG standard, so don't change them
 * if you want to be compatible.
 */

#define DCTSIZE		    8	/* The basic DCT block is 8x8 samples */
#define DCTSIZE2	    64	/* DCTSIZE squared; # of elements in a block */
#define NUM_QUANT_TBLS      4	/* Quantization tables are numbered 0..3 */
#define NUM_HUFF_TBLS       4	/* Huffman tables are numbered 0..3 */
#define NUM_ARITH_TBLS      16	/* Arith-coding tables are numbered 0..15 */
#define MAX_COMPS_IN_SCAN   4	/* JPEG limit on # of components in one scan */
#define MAX_SAMP_FACTOR     4	/* JPEG limit on sampling factors */
/* Unfortunately, some bozo at Adobe saw no reason to be bound by the standard;
 * the PostScript DCT filter can emit files with many more than 10 blocks/MCU.
 * If you happen to run across such a file, you can up D_MAX_BLOCKS_IN_MCU
 * to handle it.  We even let you do this from the jconfig.h file.  However,
 * we strongly discourage changing C_MAX_BLOCKS_IN_MCU; just because Adobe
 * sometimes emits noncompliant files doesn't mean you should too.
 */
#define C_MAX_BLOCKS_IN_MCU   10 /* compressor's limit on blocks per MCU */
#ifndef D_MAX_BLOCKS_IN_MCU
#define D_MAX_BLOCKS_IN_MCU   10 /* decompressor's limit on blocks per MCU */
#endif

/* Data structures for images (arrays of samples and of DCT coefficients).
 * On 80x86 machines, the image arrays are too big for near pointers,
 * but the pointer arrays can fit in near memory.
 */

typedef JSAMPLE FAR *JSAMPROW;	/* ptr to one image row of pixel samples. */
typedef JSAMPROW *JSAMPARRAY;	/* ptr to some rows (a 2-D sample array) */
typedef JSAMPARRAY *JSAMPIMAGE;	/* a 3-D sample array: top index is color */

typedef JCOEF JBLOCK[DCTSIZE2];	/* one block of coefficients */
typedef JBLOCK FAR *JBLOCKROW;	/* pointer to one row of coefficient blocks */
typedef JBLOCKROW *JBLOCKARRAY;		/* a 2-D array of coefficient blocks */
typedef JBLOCKARRAY *JBLOCKIMAGE;	/* a 3-D array of coefficient blocks */

typedef JCOEF FAR *JCOEFPTR;	/* useful in a couple of places */

/* Types for JPEG compression parameters and working tables. */

/* DCT coefficient quantization tables. */

typedef struct {
  /* This array gives the coefficient quantizers in natural array order
   * (not the zigzag order in which they are stored in a JPEG DQT marker).
   * CAUTION: IJG versions prior to v6a kept this array in zigzag order.
   */
  UINT16 quantval[DCTSIZE2];	/* quantization step for each coefficient */
  /* This field is used only during compression.  It's initialized FALSE when
   * the table is created, and set TRUE when it's been output to the file.
   * You could suppress output of a table by setting this to TRUE.
   * (See jpeg_suppress_tables for an example.)
   */
  boolean sent_table;		/* TRUE when table has been output */
} JQUANT_TBL;

/* Huffman coding tables. */

typedef struct {
  /* These two fields directly represent the contents of a JPEG DHT marker */
  UINT8 bits[17];		/* bits[k] = # of symbols with codes of */
				/* length k bits; bits[0] is unused */
  UINT8 huffval[256];		/* The symbols, in order of incr code length */
  /* This field is used only during compression.  It's initialized FALSE when
   * the table is created, and set TRUE when it's been output to the file.
   * You could suppress output of a table by setting this to TRUE.
   * (See jpeg_suppress_tables for an example.)
   */
  boolean sent_table;		/* TRUE when table has been output */
} JHUFF_TBL;

/* Basic info about one component (color channel). */

typedef struct {
  /* These values are fixed over the whole image. */
  /* For compression, they must be supplied by parameter setup; */
  /* for decompression, they are read from the SOF marker. */
  int component_id;		/* identifier for this component (0..255) */
  int component_index;		/* its index in SOF or cinfo->comp_info[] */
  int h_samp_factor;		/* horizontal sampling factor (1..4) */
  int v_samp_factor;		/* vertical sampling factor (1..4) */
  int quant_tbl_no;		/* quantization table selector (0..3) */
  /* These values may vary between scans. */
  /* For compression, they must be supplied by parameter setup; */
  /* for decompression, they are read from the SOS marker. */
  /* The decompressor output side may not use these variables. */
  int dc_tbl_no;		/* DC entropy table selector (0..3) */
  int ac_tbl_no;		/* AC entropy table selector (0..3) */

  /* Remaining fields should be treated as private by applications. */

  /* These values are computed during compression or decompression startup: */
  /* Component's size in DCT blocks.
   * Any dummy blocks added to complete an MCU are not counted; therefore
   * these values do not depend on whether a scan is interleaved or not.
   */
  JDIMENSION width_in_blocks;
  JDIMENSION height_in_blocks;
  /* Size of a DCT block in samples.  Always DCTSIZE for compression.
   * For decompression this is the size of the output from one DCT block,
   * reflecting any scaling we choose to apply during the IDCT step.
   * Values of 1,2,4,8 are likely to be supported.  Note that different
   * components may receive different IDCT scalings.
   */
  int DCT_scaled_size;
  /* The downsampled dimensions are the component's actual, unpadded number
   * of samples at the main buffer (preprocessing/compression interface), thus
   * downsampled_width = ceil(image_width * Hi/Hmax)
   * and similarly for height.  For decompression, IDCT scaling is included, so
   * downsampled_width = ceil(image_width * Hi/Hmax * DCT_scaled_size/DCTSIZE)
   */
  JDIMENSION downsampled_width;	 /* actual width in samples */
  JDIMENSION downsampled_height; /* actual height in samples */
  /* This flag is used only for decompression.  In cases where some of the
   * components will be ignored (eg grayscale output from YCbCr image),
   * we can skip most computations for the unused components.
   */
  boolean component_needed;	/* do we need the value of this component? */

  /* These values are computed before starting a scan of the component. */
  /* The decompressor output side may not use these variables. */
  int MCU_width;		/* number of blocks per MCU, horizontally */
  int MCU_height;		/* number of blocks per MCU, vertically */
  int MCU_blocks;		/* MCU_width * MCU_height */
  int MCU_sample_width;		/* MCU width in samples, MCU_width*DCT_scaled_size */
  int last_col_width;		/* # of non-dummy blocks across in last MCU */
  int last_row_height;		/* # of non-dummy blocks down in last MCU */

  /* Saved quantization table for component; NULL if none yet saved.
   * See jdinput.c comments about the need for this information.
   * This field is currently used only for decompression.
   */
  JQUANT_TBL * quant_table;

  /* Private per-component storage for DCT or IDCT subsystem. */
  void * dct_table;
} jpeg_component_info;

/* The script for encoding a multiple-scan file is an array of these: */

typedef struct {
  int comps_in_scan;		/* number of components encoded in this scan */
  int component_index[MAX_COMPS_IN_SCAN]; /* their SOF/comp_info[] indexes */
  int Ss, Se;			/* progressive JPEG spectral selection parms */
  int Ah, Al;			/* progressive JPEG successive approx. parms */
} jpeg_scan_info;

/* The decompressor can save APPn and COM markers in a list of these: */

typedef struct jpeg_marker_struct FAR * jpeg_saved_marker_ptr;

struct jpeg_marker_struct {
  jpeg_saved_marker_ptr next;	/* next in list, or NULL */
  UINT8 marker;			/* marker code: JPEG_COM, or JPEG_APP0+n */
  unsigned int original_length;	/* # bytes of data in the file */
  unsigned int data_length;	/* # bytes of data saved at data[] */
  JOCTET FAR * data;		/* the data contained in the marker */
  /* the marker length word is not counted in data_length or original_length */
};

/* Known color spaces. */

typedef enum {
	JCS_UNKNOWN,		/* error/unspecified */
	JCS_GRAYSCALE,		/* monochrome */
	JCS_RGB,		/* red/green/blue */
	JCS_YCbCr,		/* Y/Cb/Cr (also known as YUV) */
	JCS_CMYK,		/* C/M/Y/K */
	JCS_YCCK		/* Y/Cb/Cr/K */
} J_COLOR_SPACE;

/* DCT/IDCT algorithm options. */

typedef enum {
	JDCT_ISLOW,		/* slow but accurate integer algorithm */
	JDCT_IFAST,		/* faster, less accurate integer method */
	JDCT_FLOAT		/* floating-point: accurate, fast on fast HW */
} J_DCT_METHOD;

#ifndef JDCT_DEFAULT		/* may be overridden in jconfig.h */
#define JDCT_DEFAULT  JDCT_ISLOW
#endif
#ifndef JDCT_FASTEST		/* may be overridden in jconfig.h */
#define JDCT_FASTEST  JDCT_IFAST
#endif

/* Dithering options for decompression. */

typedef enum {
	JDITHER_NONE,		/* no dithering */
	JDITHER_ORDERED,	/* simple ordered dither */
	JDITHER_FS		/* Floyd-Steinberg error diffusion dither */
} J_DITHER_MODE;

/* Common fields between JPEG compression and decompression master structs. */

#define jpeg_common_fields \
  struct jpeg_error_mgr * err;	/* Error handler module */\
  struct jpeg_memory_mgr * mem;	/* Memory manager module */\
  struct jpeg_progress_mgr * progress; /* Progress monitor, or NULL if none */\
  void * client_data;		/* Available for use by application */\
  boolean is_decompressor;	/* So common code can tell which is which */\
  int global_state		/* For checking call sequence validity */

/* Routines that are to be used by both halves of the library are declared
 * to receive a pointer to this structure.  There are no actual instances of
 * jpeg_common_struct, only of jpeg_compress_struct and jpeg_decompress_struct.
 */
struct jpeg_common_struct {
  jpeg_common_fields;		/* Fields common to both master struct types */
  /* Additional fields follow in an actual jpeg_compress_struct or
   * jpeg_decompress_struct.  All three structs must agree on these
   * initial fields!  (This would be a lot cleaner in C++.)
   */
};

typedef struct jpeg_common_struct * j_common_ptr;
typedef struct jpeg_compress_struct * j_compress_ptr;
typedef struct jpeg_decompress_struct * j_decompress_ptr;

/* Master record for a compression instance */

struct jpeg_compress_struct {
  jpeg_common_fields;		/* Fields shared with jpeg_decompress_struct */

  /* Destination for compressed data */
  struct jpeg_destination_mgr * dest;

  /* Description of source image --- these fields must be filled in by
   * outer application before starting compression.  in_color_space must
   * be correct before you can even call jpeg_set_defaults().
   */

  JDIMENSION image_width;	/* input image width */
  JDIMENSION image_height;	/* input image height */
  int input_components;		/* # of color components in input image */
  J_COLOR_SPACE in_color_space;	/* colorspace of input image */

  double input_gamma;		/* image gamma of input image */

  /* Compression parameters --- these fields must be set before calling
   * jpeg_start_compress().  We recommend calling jpeg_set_defaults() to
   * initialize everything to reasonable defaults, then changing anything
   * the application specifically wants to change.  That way you won't get
   * burnt when new parameters are added.  Also note that there are several
   * helper routines to simplify changing parameters.
   */

  int data_precision;		/* bits of precision in image data */

  int num_components;		/* # of color components in JPEG image */
  J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */

  jpeg_component_info * comp_info;
  /* comp_info[i] describes component that appears i'th in SOF */

  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
  /* ptrs to coefficient quantization tables, or NULL if not defined */

  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
  /* ptrs to Huffman coding tables, or NULL if not defined */

  UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
  UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
  UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

  int num_scans;		/* # of entries in scan_info array */
  const jpeg_scan_info * scan_info; /* script for multi-scan file, or NULL */
  /* The default value of scan_info is NULL, which causes a single-scan
   * sequential JPEG file to be emitted.  To create a multi-scan file,
   * set num_scans and scan_info to point to an array of scan definitions.
   */

  boolean raw_data_in;		/* TRUE=caller supplies downsampled data */
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */
  boolean optimize_coding;	/* TRUE=optimize entropy encoding parms */
  boolean CCIR601_sampling;	/* TRUE=first samples are cosited */
  int smoothing_factor;		/* 1..100, or 0 for no input smoothing */
  J_DCT_METHOD dct_method;	/* DCT algorithm selector */

  /* The restart interval can be specified in absolute MCUs by setting
   * restart_interval, or in MCU rows by setting restart_in_rows
   * (in which case the correct restart_interval will be figured
   * for each scan).
   */
  unsigned int restart_interval; /* MCUs per restart, or 0 for no restart */
  int restart_in_rows;		/* if > 0, MCU rows per restart interval */

  /* Parameters controlling emission of special markers. */

  boolean write_JFIF_header;	/* should a JFIF marker be written? */
  UINT8 JFIF_major_version;	/* What to write for the JFIF version number */
  UINT8 JFIF_minor_version;
  /* These three values are not used by the JPEG code, merely copied */
  /* into the JFIF APP0 marker.  density_unit can be 0 for unknown, */
  /* 1 for dots/inch, or 2 for dots/cm.  Note that the pixel aspect */
  /* ratio is defined by X_density/Y_density even when density_unit=0. */
  UINT8 density_unit;		/* JFIF code for pixel size units */
  UINT16 X_density;		/* Horizontal pixel density */
  UINT16 Y_density;		/* Vertical pixel density */
  boolean write_Adobe_marker;	/* should an Adobe marker be written? */

  /* State variable: index of next scanline to be written to
   * jpeg_write_scanlines().  Application may use this to control its
   * processing loop, e.g., "while (next_scanline < image_height)".
   */

  JDIMENSION next_scanline;	/* 0 .. image_height-1  */

  /* Remaining fields are known throughout compressor, but generally
   * should not be touched by a surrounding application.
   */

  /*
   * These fields are computed during compression startup
   */
  boolean progressive_mode;	/* TRUE if scan script uses progressive mode */
  int max_h_samp_factor;	/* largest h_samp_factor */
  int max_v_samp_factor;	/* largest v_samp_factor */

  JDIMENSION total_iMCU_rows;	/* # of iMCU rows to be input to coef ctlr */
  /* The coefficient controller receives data in units of MCU rows as defined
   * for fully interleaved scans (whether the JPEG file is interleaved or not).
   * There are v_samp_factor * DCTSIZE sample rows of each component in an
   * "iMCU" (interleaved MCU) row.
   */

  /*
   * These fields are valid during any one scan.
   * They describe the components and MCUs actually appearing in the scan.
   */
  int comps_in_scan;		/* # of JPEG components in this scan */
  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
  /* *cur_comp_info[i] describes component that appears i'th in SOS */

  JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
  JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */

  int blocks_in_MCU;		/* # of DCT blocks per MCU */
  int MCU_membership[C_MAX_BLOCKS_IN_MCU];
  /* MCU_membership[i] is index in cur_comp_info of component owning */
  /* i'th block in an MCU */

  int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */

  /*
   * Links to compression subobjects (methods and private variables of modules)
   */
  struct jpeg_comp_master * master;
  struct jpeg_c_main_controller * main;
  struct jpeg_c_prep_controller * prep;
  struct jpeg_c_coef_controller * coef;
  struct jpeg_marker_writer * marker;
  struct jpeg_color_converter * cconvert;
  struct jpeg_downsampler * downsample;
  struct jpeg_forward_dct * fdct;
  struct jpeg_entropy_encoder * entropy;
  jpeg_scan_info * script_space; /* workspace for jpeg_simple_progression */
  int script_space_size;
};

/* Master record for a decompression instance */

struct jpeg_decompress_struct {
  jpeg_common_fields;		/* Fields shared with jpeg_compress_struct */

  /* Source of compressed data */
  struct jpeg_source_mgr * src;

  /* Basic description of image --- filled in by jpeg_read_header(). */
  /* Application may inspect these values to decide how to process image. */

  JDIMENSION image_width;	/* nominal image width (from SOF marker) */
  JDIMENSION image_height;	/* nominal image height */
  int num_components;		/* # of color components in JPEG image */
  J_COLOR_SPACE jpeg_color_space; /* colorspace of JPEG image */

  /* Decompression processing parameters --- these fields must be set before
   * calling jpeg_start_decompress().  Note that jpeg_read_header() initializes
   * them to default values.
   */

  J_COLOR_SPACE out_color_space; /* colorspace for output */

  unsigned int scale_num, scale_denom; /* fraction by which to scale image */

  double output_gamma;		/* image gamma wanted in output */

  boolean buffered_image;	/* TRUE=multiple output passes */
  boolean raw_data_out;		/* TRUE=downsampled data wanted */

  J_DCT_METHOD dct_method;	/* IDCT algorithm selector */
  boolean do_fancy_upsampling;	/* TRUE=apply fancy upsampling */
  boolean do_block_smoothing;	/* TRUE=apply interblock smoothing */

  boolean quantize_colors;	/* TRUE=colormapped output wanted */
  /* the following are ignored if not quantize_colors: */
  J_DITHER_MODE dither_mode;	/* type of color dithering to use */
  boolean two_pass_quantize;	/* TRUE=use two-pass color quantization */
  int desired_number_of_colors;	/* max # colors to use in created colormap */
  /* these are significant only in buffered-image mode: */
  boolean enable_1pass_quant;	/* enable future use of 1-pass quantizer */
  boolean enable_external_quant;/* enable future use of external colormap */
  boolean enable_2pass_quant;	/* enable future use of 2-pass quantizer */

  /* Description of actual output image that will be returned to application.
   * These fields are computed by jpeg_start_decompress().
   * You can also use jpeg_calc_output_dimensions() to determine these values
   * in advance of calling jpeg_start_decompress().
   */

  JDIMENSION output_width;	/* scaled image width */
  JDIMENSION output_height;	/* scaled image height */
  int out_color_components;	/* # of color components in out_color_space */
  int output_components;	/* # of color components returned */
  /* output_components is 1 (a colormap index) when quantizing colors;
   * otherwise it equals out_color_components.
   */
  int rec_outbuf_height;	/* min recommended height of scanline buffer */
  /* If the buffer passed to jpeg_read_scanlines() is less than this many rows
   * high, space and time will be wasted due to unnecessary data copying.
   * Usually rec_outbuf_height will be 1 or 2, at most 4.
   */

  /* When quantizing colors, the output colormap is described by these fields.
   * The application can supply a colormap by setting colormap non-NULL before
   * calling jpeg_start_decompress; otherwise a colormap is created during
   * jpeg_start_decompress or jpeg_start_output.
   * The map has out_color_components rows and actual_number_of_colors columns.
   */
  int actual_number_of_colors;	/* number of entries in use */
  JSAMPARRAY colormap;		/* The color map as a 2-D pixel array */

  /* State variables: these variables indicate the progress of decompression.
   * The application may examine these but must not modify them.
   */

  /* Row index of next scanline to be read from jpeg_read_scanlines().
   * Application may use this to control its processing loop, e.g.,
   * "while (output_scanline < output_height)".
   */
  JDIMENSION output_scanline;	/* 0 .. output_height-1  */

  /* Current input scan number and number of iMCU rows completed in scan.
   * These indicate the progress of the decompressor input side.
   */
  int input_scan_number;	/* Number of SOS markers seen so far */
  JDIMENSION input_iMCU_row;	/* Number of iMCU rows completed */

  /* The "output scan number" is the notional scan being displayed by the
   * output side.  The decompressor will not allow output scan/row number
   * to get ahead of input scan/row, but it can fall arbitrarily far behind.
   */
  int output_scan_number;	/* Nominal scan number being displayed */
  JDIMENSION output_iMCU_row;	/* Number of iMCU rows read */

  /* Current progression status.  coef_bits[c][i] indicates the precision
   * with which component c's DCT coefficient i (in zigzag order) is known.
   * It is -1 when no data has yet been received, otherwise it is the point
   * transform (shift) value for the most recent scan of the coefficient
   * (thus, 0 at completion of the progression).
   * This pointer is NULL when reading a non-progressive file.
   */
  int (*coef_bits)[DCTSIZE2];	/* -1 or current Al value for each coef */

  /* Internal JPEG parameters --- the application usually need not look at
   * these fields.  Note that the decompressor output side may not use
   * any parameters that can change between scans.
   */

  /* Quantization and Huffman tables are carried forward across input
   * datastreams when processing abbreviated JPEG datastreams.
   */

  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];
  /* ptrs to coefficient quantization tables, or NULL if not defined */

  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];
  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];
  /* ptrs to Huffman coding tables, or NULL if not defined */

  /* These parameters are never carried across datastreams, since they
   * are given in SOF/SOS markers or defined to be reset by SOI.
   */

  int data_precision;		/* bits of precision in image data */

  jpeg_component_info * comp_info;
  /* comp_info[i] describes component that appears i'th in SOF */

  boolean progressive_mode;	/* TRUE if SOFn specifies progressive mode */
  boolean arith_code;		/* TRUE=arithmetic coding, FALSE=Huffman */

  UINT8 arith_dc_L[NUM_ARITH_TBLS]; /* L values for DC arith-coding tables */
  UINT8 arith_dc_U[NUM_ARITH_TBLS]; /* U values for DC arith-coding tables */
  UINT8 arith_ac_K[NUM_ARITH_TBLS]; /* Kx values for AC arith-coding tables */

  unsigned int restart_interval; /* MCUs per restart interval, or 0 for no restart */

  /* These fields record data obtained from optional markers recognized by
   * the JPEG library.
   */
  boolean saw_JFIF_marker;	/* TRUE iff a JFIF APP0 marker was found */
  /* Data copied from JFIF marker; only valid if saw_JFIF_marker is TRUE: */
  UINT8 JFIF_major_version;	/* JFIF version number */
  UINT8 JFIF_minor_version;
  UINT8 density_unit;		/* JFIF code for pixel size units */
  UINT16 X_density;		/* Horizontal pixel density */
  UINT16 Y_density;		/* Vertical pixel density */
  boolean saw_Adobe_marker;	/* TRUE iff an Adobe APP14 marker was found */
  UINT8 Adobe_transform;	/* Color transform code from Adobe marker */

  boolean CCIR601_sampling;	/* TRUE=first samples are cosited */

  /* Aside from the specific data retained from APPn markers known to the
   * library, the uninterpreted contents of any or all APPn and COM markers
   * can be saved in a list for examination by the application.
   */
  jpeg_saved_marker_ptr marker_list; /* Head of list of saved markers */

  /* Remaining fields are known throughout decompressor, but generally
   * should not be touched by a surrounding application.
   */

  /*
   * These fields are computed during decompression startup
   */
  int max_h_samp_factor;	/* largest h_samp_factor */
  int max_v_samp_factor;	/* largest v_samp_factor */

  int min_DCT_scaled_size;	/* smallest DCT_scaled_size of any component */

  JDIMENSION total_iMCU_rows;	/* # of iMCU rows in image */
  /* The coefficient controller's input and output progress is measured in
   * units of "iMCU" (interleaved MCU) rows.  These are the same as MCU rows
   * in fully interleaved JPEG scans, but are used whether the scan is
   * interleaved or not.  We define an iMCU row as v_samp_factor DCT block
   * rows of each component.  Therefore, the IDCT output contains
   * v_samp_factor*DCT_scaled_size sample rows of a component per iMCU row.
   */

  JSAMPLE * sample_range_limit; /* table for fast range-limiting */

  /*
   * These fields are valid during any one scan.
   * They describe the components and MCUs actually appearing in the scan.
   * Note that the decompressor output side must not use these fields.
   */
  int comps_in_scan;		/* # of JPEG components in this scan */
  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];
  /* *cur_comp_info[i] describes component that appears i'th in SOS */

  JDIMENSION MCUs_per_row;	/* # of MCUs across the image */
  JDIMENSION MCU_rows_in_scan;	/* # of MCU rows in the image */

  int blocks_in_MCU;		/* # of DCT blocks per MCU */
  int MCU_membership[D_MAX_BLOCKS_IN_MCU];
  /* MCU_membership[i] is index in cur_comp_info of component owning */
  /* i'th block in an MCU */

  int Ss, Se, Ah, Al;		/* progressive JPEG parameters for scan */

  /* This field is shared between entropy decoder and marker parser.
   * It is either zero or the code of a JPEG marker that has been
   * read from the data source, but has not yet been processed.
   */
  int unread_marker;

  /*
   * Links to decompression subobjects (methods, private variables of modules)
   */
  struct jpeg_decomp_master * master;
  struct jpeg_d_main_controller * main;
  struct jpeg_d_coef_controller * coef;
  struct jpeg_d_post_controller * post;
  struct jpeg_input_controller * inputctl;
  struct jpeg_marker_reader * marker;
  struct jpeg_entropy_decoder * entropy;
  struct jpeg_inverse_dct * idct;
  struct jpeg_upsampler * upsample;
  struct jpeg_color_deconverter * cconvert;
  struct jpeg_color_quantizer * cquantize;
};

/* "Object" declarations for JPEG modules that may be supplied or called
 * directly by the surrounding application.
 * As with all objects in the JPEG library, these structs only define the
 * publicly visible methods and state variables of a module.  Additional
 * private fields may exist after the public ones.
 */

/* Error handler object */

struct jpeg_error_mgr {
  /* Error exit handler: does not return to caller */
  JMETHOD(void, error_exit, (j_common_ptr cinfo));
  /* Conditionally emit a trace or warning message */
  JMETHOD(void, emit_message, (j_common_ptr cinfo, int msg_level));
  /* Routine that actually outputs a trace or error message */
  JMETHOD(void, output_message, (j_common_ptr cinfo));
  /* Format a message string for the most recent JPEG error or message */
  JMETHOD(void, format_message, (j_common_ptr cinfo, char * buffer));
#define JMSG_LENGTH_MAX  200	/* recommended size of format_message buffer */
  /* Reset error state variables at start of a new image */
  JMETHOD(void, reset_error_mgr, (j_common_ptr cinfo));

  /* The message ID code and any parameters are saved here.
   * A message can have one string parameter or up to 8 int parameters.
   */
  int msg_code;
#define JMSG_STR_PARM_MAX  80
  union {
	int i[8];
	char s[JMSG_STR_PARM_MAX];
  } msg_parm;

  /* Standard state variables for error facility */

  int trace_level;		/* max msg_level that will be displayed */

  /* For recoverable corrupt-data errors, we emit a warning message,
   * but keep going unless emit_message chooses to abort.  emit_message
   * should count warnings in num_warnings.  The surrounding application
   * can check for bad data by seeing if num_warnings is nonzero at the
   * end of processing.
   */
  long num_warnings;		/* number of corrupt-data warnings */

  /* These fields point to the table(s) of error message strings.
   * An application can change the table pointer to switch to a different
   * message list (typically, to change the language in which errors are
   * reported).  Some applications may wish to add additional error codes
   * that will be handled by the JPEG library error mechanism; the second
   * table pointer is used for this purpose.
   *
   * First table includes all errors generated by JPEG library itself.
   * Error code 0 is reserved for a "no such error string" message.
   */
  const char * const * jpeg_message_table; /* Library errors */
  int last_jpeg_message;    /* Table contains strings 0..last_jpeg_message */
  /* Second table can be added by application (see cjpeg/djpeg for example).
   * It contains strings numbered first_addon_message..last_addon_message.
   */
  const char * const * addon_message_table; /* Non-library errors */
  int first_addon_message;	/* code for first string in addon table */
  int last_addon_message;	/* code for last string in addon table */
};

/* Progress monitor object */

struct jpeg_progress_mgr {
  JMETHOD(void, progress_monitor, (j_common_ptr cinfo));

  long pass_counter;		/* work units completed in this pass */
  long pass_limit;		/* total number of work units in this pass */
  int completed_passes;		/* passes completed so far */
  int total_passes;		/* total number of passes expected */
};

/* Data destination object for compression */

struct jpeg_destination_mgr {
  JOCTET * next_output_byte;	/* => next byte to write in buffer */
  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */

  JMETHOD(void, init_destination, (j_compress_ptr cinfo));
  JMETHOD(boolean, empty_output_buffer, (j_compress_ptr cinfo));
  JMETHOD(void, term_destination, (j_compress_ptr cinfo));
};

/* Data source object for decompression */

struct jpeg_source_mgr {
  const JOCTET * next_input_byte; /* => next byte to read from buffer */
  size_t bytes_in_buffer;	/* # of bytes remaining in buffer */

  JMETHOD(void, init_source, (j_decompress_ptr cinfo));
  JMETHOD(boolean, fill_input_buffer, (j_decompress_ptr cinfo));
  JMETHOD(void, skip_input_data, (j_decompress_ptr cinfo, long num_bytes));
  JMETHOD(boolean, resync_to_restart, (j_decompress_ptr cinfo, int desired));
  JMETHOD(void, term_source, (j_decompress_ptr cinfo));
};

/* Memory manager object.
 * Allocates "small" objects (a few K total), "large" objects (tens of K),
 * and "really big" objects (virtual arrays with backing store if needed).
 * The memory manager does not allow individual objects to be freed; rather,
 * each created object is assigned to a pool, and whole pools can be freed
 * at once.  This is faster and more convenient than remembering exactly what
 * to free, especially where malloc()/free() are not too speedy.
 * NB: alloc routines never return NULL.  They exit to error_exit if not
 * successful.
 */

#define JPOOL_PERMANENT	0	/* lasts until master record is destroyed */
#define JPOOL_IMAGE	1	/* lasts until done with image/datastream */
#define JPOOL_NUMPOOLS	2

typedef struct jvirt_sarray_control * jvirt_sarray_ptr;
typedef struct jvirt_barray_control * jvirt_barray_ptr;

struct jpeg_memory_mgr {
  /* Method pointers */
  JMETHOD(void *, alloc_small, (j_common_ptr cinfo, int pool_id,
				size_t sizeofobject));
  JMETHOD(void FAR *, alloc_large, (j_common_ptr cinfo, int pool_id,
				     size_t sizeofobject));
  JMETHOD(JSAMPARRAY, alloc_sarray, (j_common_ptr cinfo, int pool_id,
				     JDIMENSION samplesperrow,
				     JDIMENSION numrows));
  JMETHOD(JBLOCKARRAY, alloc_barray, (j_common_ptr cinfo, int pool_id,
				      JDIMENSION blocksperrow,
				      JDIMENSION numrows));
  JMETHOD(jvirt_sarray_ptr, request_virt_sarray, (j_common_ptr cinfo,
						  int pool_id,
						  boolean pre_zero,
						  JDIMENSION samplesperrow,
						  JDIMENSION numrows,
						  JDIMENSION maxaccess));
  JMETHOD(jvirt_barray_ptr, request_virt_barray, (j_common_ptr cinfo,
						  int pool_id,
						  boolean pre_zero,
						  JDIMENSION blocksperrow,
						  JDIMENSION numrows,
						  JDIMENSION maxaccess));
  JMETHOD(void, realize_virt_arrays, (j_common_ptr cinfo));
  JMETHOD(JSAMPARRAY, access_virt_sarray, (j_common_ptr cinfo,
					   jvirt_sarray_ptr ptr,
					   JDIMENSION start_row,
					   JDIMENSION num_rows,
					   boolean writable));
  JMETHOD(JBLOCKARRAY, access_virt_barray, (j_common_ptr cinfo,
					    jvirt_barray_ptr ptr,
					    JDIMENSION start_row,
					    JDIMENSION num_rows,
					    boolean writable));
  JMETHOD(void, free_pool, (j_common_ptr cinfo, int pool_id));
  JMETHOD(void, self_destruct, (j_common_ptr cinfo));

  /* Limit on memory allocation for this JPEG object.  (Note that this is
   * merely advisory, not a guaranteed maximum; it only affects the space
   * used for virtual-array buffers.)  May be changed by outer application
   * after creating the JPEG object.
   */
  long max_memory_to_use;

  /* Maximum allocation request accepted by alloc_large. */
  long max_alloc_chunk;
};

/* Routine signature for application-supplied marker processing methods.
 * Need not pass marker code since it is stored in cinfo->unread_marker.
 */
typedef JMETHOD(boolean, jpeg_marker_parser_method, (j_decompress_ptr cinfo));

/* Declarations for routines called by application.
 * The JPP macro hides prototype parameters from compilers that can't cope.
 * Note JPP requires double parentheses.
 */

#ifdef HAVE_PROTOTYPES
#define JPP(arglist)	arglist
#else
#define JPP(arglist)	()
#endif

/* Short forms of external names for systems with brain-damaged linkers.
 * We shorten external names to be unique in the first six letters, which
 * is good enough for all known systems.
 * (If your compiler itself needs names to be unique in less than 15
 * characters, you are out of luck.  Get a better compiler.)
 */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_std_error		jStdError
#define jpeg_CreateCompress	jCreaCompress
#define jpeg_CreateDecompress	jCreaDecompress
#define jpeg_destroy_compress	jDestCompress
#define jpeg_destroy_decompress	jDestDecompress
#define jpeg_stdio_dest		jStdDest
#define jpeg_stdio_src		jStdSrc
#define jpeg_set_defaults	jSetDefaults
#define jpeg_set_colorspace	jSetColorspace
#define jpeg_default_colorspace	jDefColorspace
#define jpeg_set_quality	jSetQuality
#define jpeg_set_linear_quality	jSetLQuality
#define jpeg_add_quant_table	jAddQuantTable
#define jpeg_quality_scaling	jQualityScaling
#define jpeg_simple_progression	jSimProgress
#define jpeg_suppress_tables	jSuppressTables
#define jpeg_alloc_quant_table	jAlcQTable
#define jpeg_alloc_huff_table	jAlcHTable
#define jpeg_start_compress	jStrtCompress
#define jpeg_write_scanlines	jWrtScanlines
#define jpeg_finish_compress	jFinCompress
#define jpeg_write_raw_data	jWrtRawData
#define jpeg_write_marker	jWrtMarker
#define jpeg_write_m_header	jWrtMHeader
#define jpeg_write_m_byte	jWrtMByte
#define jpeg_write_tables	jWrtTables
#define jpeg_read_header	jReadHeader
#define jpeg_start_decompress	jStrtDecompress
#define jpeg_read_scanlines	jReadScanlines
#define jpeg_finish_decompress	jFinDecompress
#define jpeg_read_raw_data	jReadRawData
#define jpeg_has_multiple_scans	jHasMultScn
#define jpeg_start_output	jStrtOutput
#define jpeg_finish_output	jFinOutput
#define jpeg_input_complete	jInComplete
#define jpeg_new_colormap	jNewCMap
#define jpeg_consume_input	jConsumeInput
#define jpeg_calc_output_dimensions	jCalcDimensions
#define jpeg_save_markers	jSaveMarkers
#define jpeg_set_marker_processor	jSetMarker
#define jpeg_read_coefficients	jReadCoefs
#define jpeg_write_coefficients	jWrtCoefs
#define jpeg_copy_critical_parameters	jCopyCrit
#define jpeg_abort_compress	jAbrtCompress
#define jpeg_abort_decompress	jAbrtDecompress
#define jpeg_abort		jAbort
#define jpeg_destroy		jDestroy
#define jpeg_resync_to_restart	jResyncRestart
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/* Default error-management setup */
EXTERN(struct jpeg_error_mgr *) jpeg_std_error
	JPP((struct jpeg_error_mgr * err));

/* Initialization of JPEG compression objects.
 * jpeg_create_compress() and jpeg_create_decompress() are the exported
 * names that applications should call.  These expand to calls on
 * jpeg_CreateCompress and jpeg_CreateDecompress with additional information
 * passed for version mismatch checking.
 * NB: you must set up the error-manager BEFORE calling jpeg_create_xxx.
 */
#define jpeg_create_compress(cinfo) \
	jpeg_CreateCompress((cinfo), JPEG_LIB_VERSION, \
			(size_t) sizeof(struct jpeg_compress_struct))
#define jpeg_create_decompress(cinfo) \
	jpeg_CreateDecompress((cinfo), JPEG_LIB_VERSION, \
			  (size_t) sizeof(struct jpeg_decompress_struct))
EXTERN(void) jpeg_CreateCompress JPP((j_compress_ptr cinfo,
				      int version, size_t structsize));
EXTERN(void) jpeg_CreateDecompress JPP((j_decompress_ptr cinfo,
					int version, size_t structsize));
/* Destruction of JPEG compression objects */
EXTERN(void) jpeg_destroy_compress JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_destroy_decompress JPP((j_decompress_ptr cinfo));

/* Standard data source and destination managers: stdio streams. */
/* Caller is responsible for opening the file before and closing after. */
EXTERN(void) jpeg_stdio_dest JPP((j_compress_ptr cinfo, FILE * outfile));
EXTERN(void) jpeg_stdio_src JPP((j_decompress_ptr cinfo, FILE * infile));

/* Default parameter setup for compression */
EXTERN(void) jpeg_set_defaults JPP((j_compress_ptr cinfo));
/* Compression parameter setup aids */
EXTERN(void) jpeg_set_colorspace JPP((j_compress_ptr cinfo,
				      J_COLOR_SPACE colorspace));
EXTERN(void) jpeg_default_colorspace JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_set_quality JPP((j_compress_ptr cinfo, int quality,
				   boolean force_baseline));
EXTERN(void) jpeg_set_linear_quality JPP((j_compress_ptr cinfo,
					  int scale_factor,
					  boolean force_baseline));
EXTERN(void) jpeg_add_quant_table JPP((j_compress_ptr cinfo, int which_tbl,
				       const unsigned int *basic_table,
				       int scale_factor,
				       boolean force_baseline));
EXTERN(int) jpeg_quality_scaling JPP((int quality));
EXTERN(void) jpeg_simple_progression JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_suppress_tables JPP((j_compress_ptr cinfo,
				       boolean suppress));
EXTERN(JQUANT_TBL *) jpeg_alloc_quant_table JPP((j_common_ptr cinfo));
EXTERN(JHUFF_TBL *) jpeg_alloc_huff_table JPP((j_common_ptr cinfo));

/* Main entry points for compression */
EXTERN(void) jpeg_start_compress JPP((j_compress_ptr cinfo,
				      boolean write_all_tables));
EXTERN(JDIMENSION) jpeg_write_scanlines JPP((j_compress_ptr cinfo,
					     JSAMPARRAY scanlines,
					     JDIMENSION num_lines));
EXTERN(void) jpeg_finish_compress JPP((j_compress_ptr cinfo));

/* Replaces jpeg_write_scanlines when writing raw downsampled data. */
EXTERN(JDIMENSION) jpeg_write_raw_data JPP((j_compress_ptr cinfo,
					    JSAMPIMAGE data,
					    JDIMENSION num_lines));

/* Write a special marker.  See libjpeg.doc concerning safe usage. */
EXTERN(void) jpeg_write_marker
	JPP((j_compress_ptr cinfo, int marker,
	     const JOCTET * dataptr, unsigned int datalen));
/* Same, but piecemeal. */
EXTERN(void) jpeg_write_m_header
	JPP((j_compress_ptr cinfo, int marker, unsigned int datalen));
EXTERN(void) jpeg_write_m_byte
	JPP((j_compress_ptr cinfo, int val));

/* Alternate compression function: just write an abbreviated table file */
EXTERN(void) jpeg_write_tables JPP((j_compress_ptr cinfo));

/* Decompression startup: read start of JPEG datastream to see what's there */
EXTERN(int) jpeg_read_header JPP((j_decompress_ptr cinfo,
				  boolean require_image));
/* Return value is one of: */
#define JPEG_SUSPENDED		0 /* Suspended due to lack of input data */
#define JPEG_HEADER_OK		1 /* Found valid image datastream */
#define JPEG_HEADER_TABLES_ONLY	2 /* Found valid table-specs-only datastream */
/* If you pass require_image = TRUE (normal case), you need not check for
 * a TABLES_ONLY return code; an abbreviated file will cause an error exit.
 * JPEG_SUSPENDED is only possible if you use a data source module that can
 * give a suspension return (the stdio source module doesn't).
 */

/* Main entry points for decompression */
EXTERN(boolean) jpeg_start_decompress JPP((j_decompress_ptr cinfo));
EXTERN(JDIMENSION) jpeg_read_scanlines JPP((j_decompress_ptr cinfo,
					    JSAMPARRAY scanlines,
					    JDIMENSION max_lines));
EXTERN(boolean) jpeg_finish_decompress JPP((j_decompress_ptr cinfo));

/* Replaces jpeg_read_scanlines when reading raw downsampled data. */
EXTERN(JDIMENSION) jpeg_read_raw_data JPP((j_decompress_ptr cinfo,
					   JSAMPIMAGE data,
					   JDIMENSION max_lines));

/* Additional entry points for buffered-image mode. */
EXTERN(boolean) jpeg_has_multiple_scans JPP((j_decompress_ptr cinfo));
EXTERN(boolean) jpeg_start_output JPP((j_decompress_ptr cinfo,
				       int scan_number));
EXTERN(boolean) jpeg_finish_output JPP((j_decompress_ptr cinfo));
EXTERN(boolean) jpeg_input_complete JPP((j_decompress_ptr cinfo));
EXTERN(void) jpeg_new_colormap JPP((j_decompress_ptr cinfo));
EXTERN(int) jpeg_consume_input JPP((j_decompress_ptr cinfo));
/* Return value is one of: */
/* #define JPEG_SUSPENDED	0    Suspended due to lack of input data */
#define JPEG_REACHED_SOS	1 /* Reached start of new scan */
#define JPEG_REACHED_EOI	2 /* Reached end of image */
#define JPEG_ROW_COMPLETED	3 /* Completed one iMCU row */
#define JPEG_SCAN_COMPLETED	4 /* Completed last iMCU row of a scan */

/* Precalculate output dimensions for current decompression parameters. */
EXTERN(void) jpeg_calc_output_dimensions JPP((j_decompress_ptr cinfo));

/* Control saving of COM and APPn markers into marker_list. */
EXTERN(void) jpeg_save_markers
	JPP((j_decompress_ptr cinfo, int marker_code,
	     unsigned int length_limit));

/* Install a special processing method for COM or APPn markers. */
EXTERN(void) jpeg_set_marker_processor
	JPP((j_decompress_ptr cinfo, int marker_code,
	     jpeg_marker_parser_method routine));

/* Read or write raw DCT coefficients --- useful for lossless transcoding. */
EXTERN(jvirt_barray_ptr *) jpeg_read_coefficients JPP((j_decompress_ptr cinfo));
EXTERN(void) jpeg_write_coefficients JPP((j_compress_ptr cinfo,
					  jvirt_barray_ptr * coef_arrays));
EXTERN(void) jpeg_copy_critical_parameters JPP((j_decompress_ptr srcinfo,
						j_compress_ptr dstinfo));

/* If you choose to abort compression or decompression before completing
 * jpeg_finish_(de)compress, then you need to clean up to release memory,
 * temporary files, etc.  You can just call jpeg_destroy_(de)compress
 * if you're done with the JPEG object, but if you want to clean it up and
 * reuse it, call this:
 */
EXTERN(void) jpeg_abort_compress JPP((j_compress_ptr cinfo));
EXTERN(void) jpeg_abort_decompress JPP((j_decompress_ptr cinfo));

/* Generic versions of jpeg_abort and jpeg_destroy that work on either
 * flavor of JPEG object.  These may be more convenient in some places.
 */
EXTERN(void) jpeg_abort JPP((j_common_ptr cinfo));
EXTERN(void) jpeg_destroy JPP((j_common_ptr cinfo));

/* Default restart-marker-resync procedure for use by data source modules */
EXTERN(boolean) jpeg_resync_to_restart JPP((j_decompress_ptr cinfo,
					    int desired));

/* These marker codes are exported since applications and data source modules
 * are likely to want to use them.
 */

#define JPEG_RST0	0xD0	/* RST0 marker code */
#define JPEG_EOI	0xD9	/* EOI marker code */
#define JPEG_APP0	0xE0	/* APP0 marker code */
#define JPEG_COM	0xFE	/* COM marker code */

/* If we have a brain-damaged compiler that emits warnings (or worse, errors)
 * for structure definitions that are never filled in, keep it quiet by
 * supplying dummy definitions for the various substructures.
 */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef JPEG_INTERNALS		/* will be defined in jpegint.h */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
struct jpeg_comp_master { long dummy; };
struct jpeg_c_main_controller { long dummy; };
struct jpeg_c_prep_controller { long dummy; };
struct jpeg_c_coef_controller { long dummy; };
struct jpeg_marker_writer { long dummy; };
struct jpeg_color_converter { long dummy; };
struct jpeg_downsampler { long dummy; };
struct jpeg_forward_dct { long dummy; };
struct jpeg_entropy_encoder { long dummy; };
struct jpeg_decomp_master { long dummy; };
struct jpeg_d_main_controller { long dummy; };
struct jpeg_d_coef_controller { long dummy; };
struct jpeg_d_post_controller { long dummy; };
struct jpeg_input_controller { long dummy; };
struct jpeg_marker_reader { long dummy; };
struct jpeg_entropy_decoder { long dummy; };
struct jpeg_inverse_dct { long dummy; };
struct jpeg_upsampler { long dummy; };
struct jpeg_color_deconverter { long dummy; };
struct jpeg_color_quantizer { long dummy; };
#endif /* JPEG_INTERNALS */
#endif /* INCOMPLETE_TYPES_BROKEN */

/*
 * The JPEG library modules define JPEG_INTERNALS before including this file.
 * The internal structure declarations are read only when that is true.
 * Applications using the library should not include jpegint.h, but may wish
 * to include jerror.h.
 */

#ifdef JPEG_INTERNALS

/*** Start of inlined file: jpegint.h ***/
/* Declarations for both compression & decompression */

typedef enum {			/* Operating modes for buffer controllers */
	JBUF_PASS_THRU,		/* Plain stripwise operation */
	/* Remaining modes require a full-image buffer to have been created */
	JBUF_SAVE_SOURCE,	/* Run source subobject only, save output */
	JBUF_CRANK_DEST,	/* Run dest subobject only, using saved data */
	JBUF_SAVE_AND_PASS	/* Run both subobjects, save output */
} J_BUF_MODE;

/* Values of global_state field (jdapi.c has some dependencies on ordering!) */
#define CSTATE_START	100	/* after create_compress */
#define CSTATE_SCANNING	101	/* start_compress done, write_scanlines OK */
#define CSTATE_RAW_OK	102	/* start_compress done, write_raw_data OK */
#define CSTATE_WRCOEFS	103	/* jpeg_write_coefficients done */
#define DSTATE_START	200	/* after create_decompress */
#define DSTATE_INHEADER	201	/* reading header markers, no SOS yet */
#define DSTATE_READY	202	/* found SOS, ready for start_decompress */
#define DSTATE_PRELOAD	203	/* reading multiscan file in start_decompress*/
#define DSTATE_PRESCAN	204	/* performing dummy pass for 2-pass quant */
#define DSTATE_SCANNING	205	/* start_decompress done, read_scanlines OK */
#define DSTATE_RAW_OK	206	/* start_decompress done, read_raw_data OK */
#define DSTATE_BUFIMAGE	207	/* expecting jpeg_start_output */
#define DSTATE_BUFPOST	208	/* looking for SOS/EOI in jpeg_finish_output */
#define DSTATE_RDCOEFS	209	/* reading file in jpeg_read_coefficients */
#define DSTATE_STOPPING	210	/* looking for EOI in jpeg_finish_decompress */

/* Declarations for compression modules */

/* Master control module */
struct jpeg_comp_master {
  JMETHOD(void, prepare_for_pass, (j_compress_ptr cinfo));
  JMETHOD(void, pass_startup, (j_compress_ptr cinfo));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean call_pass_startup;	/* True if pass_startup must be called */
  boolean is_last_pass;		/* True during last pass */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_c_main_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_compress_ptr cinfo,
			       JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			       JDIMENSION in_rows_avail));
};

/* Compression preprocessing (downsampling input buffer control) */
struct jpeg_c_prep_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, pre_process_data, (j_compress_ptr cinfo,
				   JSAMPARRAY input_buf,
				   JDIMENSION *in_row_ctr,
				   JDIMENSION in_rows_avail,
				   JSAMPIMAGE output_buf,
				   JDIMENSION *out_row_group_ctr,
				   JDIMENSION out_row_groups_avail));
};

/* Coefficient buffer control */
struct jpeg_c_coef_controller {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(boolean, compress_data, (j_compress_ptr cinfo,
				   JSAMPIMAGE input_buf));
};

/* Colorspace conversion */
struct jpeg_color_converter {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, color_convert, (j_compress_ptr cinfo,
				JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
				JDIMENSION output_row, int num_rows));
};

/* Downsampling */
struct jpeg_downsampler {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  JMETHOD(void, downsample, (j_compress_ptr cinfo,
			     JSAMPIMAGE input_buf, JDIMENSION in_row_index,
			     JSAMPIMAGE output_buf,
			     JDIMENSION out_row_group_index));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Forward DCT (also controls coefficient quantization) */
struct jpeg_forward_dct {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo));
  /* perhaps this should be an array??? */
  JMETHOD(void, forward_DCT, (j_compress_ptr cinfo,
			      jpeg_component_info * compptr,
			      JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
			      JDIMENSION start_row, JDIMENSION start_col,
			      JDIMENSION num_blocks));
};

/* Entropy encoding */
struct jpeg_entropy_encoder {
  JMETHOD(void, start_pass, (j_compress_ptr cinfo, boolean gather_statistics));
  JMETHOD(boolean, encode_mcu, (j_compress_ptr cinfo, JBLOCKROW *MCU_data));
  JMETHOD(void, finish_pass, (j_compress_ptr cinfo));
};

/* Marker writing */
struct jpeg_marker_writer {
  JMETHOD(void, write_file_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_frame_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_scan_header, (j_compress_ptr cinfo));
  JMETHOD(void, write_file_trailer, (j_compress_ptr cinfo));
  JMETHOD(void, write_tables_only, (j_compress_ptr cinfo));
  /* These routines are exported to allow insertion of extra markers */
  /* Probably only COM and APPn markers should be written this way */
  JMETHOD(void, write_marker_header, (j_compress_ptr cinfo, int marker,
				      unsigned int datalen));
  JMETHOD(void, write_marker_byte, (j_compress_ptr cinfo, int val));
};

/* Declarations for decompression modules */

/* Master control module */
struct jpeg_decomp_master {
  JMETHOD(void, prepare_for_output_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_output_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean is_dummy_pass;	/* True during 1st pass for 2-pass quant */
};

/* Input control module */
struct jpeg_input_controller {
  JMETHOD(int, consume_input, (j_decompress_ptr cinfo));
  JMETHOD(void, reset_input_controller, (j_decompress_ptr cinfo));
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, finish_input_pass, (j_decompress_ptr cinfo));

  /* State variables made visible to other modules */
  boolean has_multiple_scans;	/* True if file has multiple scans */
  boolean eoi_reached;		/* True when EOI has been consumed */
};

/* Main buffer control (downsampled-data buffer) */
struct jpeg_d_main_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, process_data, (j_decompress_ptr cinfo,
			       JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			       JDIMENSION out_rows_avail));
};

/* Coefficient buffer control */
struct jpeg_d_coef_controller {
  JMETHOD(void, start_input_pass, (j_decompress_ptr cinfo));
  JMETHOD(int, consume_data, (j_decompress_ptr cinfo));
  JMETHOD(void, start_output_pass, (j_decompress_ptr cinfo));
  JMETHOD(int, decompress_data, (j_decompress_ptr cinfo,
				 JSAMPIMAGE output_buf));
  /* Pointer to array of coefficient virtual arrays, or NULL if none */
  jvirt_barray_ptr *coef_arrays;
};

/* Decompression postprocessing (color quantization buffer control) */
struct jpeg_d_post_controller {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, J_BUF_MODE pass_mode));
  JMETHOD(void, post_process_data, (j_decompress_ptr cinfo,
				    JSAMPIMAGE input_buf,
				    JDIMENSION *in_row_group_ctr,
				    JDIMENSION in_row_groups_avail,
				    JSAMPARRAY output_buf,
				    JDIMENSION *out_row_ctr,
				    JDIMENSION out_rows_avail));
};

/* Marker reading & parsing */
struct jpeg_marker_reader {
  JMETHOD(void, reset_marker_reader, (j_decompress_ptr cinfo));
  /* Read markers until SOS or EOI.
   * Returns same codes as are defined for jpeg_consume_input:
   * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
   */
  JMETHOD(int, read_markers, (j_decompress_ptr cinfo));
  /* Read a restart marker --- exported for use by entropy decoder only */
  jpeg_marker_parser_method read_restart_marker;

  /* State of marker reader --- nominally internal, but applications
   * supplying COM or APPn handlers might like to know the state.
   */
  boolean saw_SOI;		/* found SOI? */
  boolean saw_SOF;		/* found SOF? */
  int next_restart_num;		/* next restart number expected (0-7) */
  unsigned int discarded_bytes;	/* # of bytes skipped looking for a marker */
};

/* Entropy decoding */
struct jpeg_entropy_decoder {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(boolean, decode_mcu, (j_decompress_ptr cinfo,
				JBLOCKROW *MCU_data));

  /* This is here to share code between baseline and progressive decoders; */
  /* other modules probably should not use it */
  boolean insufficient_data;	/* set TRUE after emitting warning */
};

/* Inverse DCT (also performs dequantization) */
typedef JMETHOD(void, inverse_DCT_method_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col));

struct jpeg_inverse_dct {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  /* It is useful to allow each component to have a separate IDCT method. */
  inverse_DCT_method_ptr inverse_DCT[MAX_COMPONENTS];
};

/* Upsampling (note that upsampler must also call color converter) */
struct jpeg_upsampler {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, upsample, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf,
			   JDIMENSION *in_row_group_ctr,
			   JDIMENSION in_row_groups_avail,
			   JSAMPARRAY output_buf,
			   JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail));

  boolean need_context_rows;	/* TRUE if need rows above & below */
};

/* Colorspace conversion */
struct jpeg_color_deconverter {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, color_convert, (j_decompress_ptr cinfo,
				JSAMPIMAGE input_buf, JDIMENSION input_row,
				JSAMPARRAY output_buf, int num_rows));
};

/* Color quantization or color precision reduction */
struct jpeg_color_quantizer {
  JMETHOD(void, start_pass, (j_decompress_ptr cinfo, boolean is_pre_scan));
  JMETHOD(void, color_quantize, (j_decompress_ptr cinfo,
				 JSAMPARRAY input_buf, JSAMPARRAY output_buf,
				 int num_rows));
  JMETHOD(void, finish_pass, (j_decompress_ptr cinfo));
  JMETHOD(void, new_color_map, (j_decompress_ptr cinfo));
};

/* Miscellaneous useful macros */

#undef MAX
#define MAX(a,b)	((a) > (b) ? (a) : (b))
#undef MIN
#define MIN(a,b)	((a) < (b) ? (a) : (b))

/* We assume that right shift corresponds to signed division by 2 with
 * rounding towards minus infinity.  This is correct for typical "arithmetic
 * shift" instructions that shift in copies of the sign bit.  But some
 * C compilers implement >> with an unsigned shift.  For these machines you
 * must define RIGHT_SHIFT_IS_UNSIGNED.
 * RIGHT_SHIFT provides a proper signed right shift of an INT32 quantity.
 * It is only applied with constant shift counts.  SHIFT_TEMPS must be
 * included in the variables of any routine using RIGHT_SHIFT.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define SHIFT_TEMPS	INT32 shift_temp;
#define RIGHT_SHIFT(x,shft)  \
	((shift_temp = (x)) < 0 ? \
	 (shift_temp >> (shft)) | ((~((INT32) 0)) << (32-(shft))) : \
	 (shift_temp >> (shft)))
#else
#define SHIFT_TEMPS
#define RIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jinit_compress_master	jICompress
#define jinit_c_master_control	jICMaster
#define jinit_c_main_controller	jICMainC
#define jinit_c_prep_controller	jICPrepC
#define jinit_c_coef_controller	jICCoefC
#define jinit_color_converter	jICColor
#define jinit_downsampler	jIDownsampler
#define jinit_forward_dct	jIFDCT
#define jinit_huff_encoder	jIHEncoder
#define jinit_phuff_encoder	jIPHEncoder
#define jinit_marker_writer	jIMWriter
#define jinit_master_decompress	jIDMaster
#define jinit_d_main_controller	jIDMainC
#define jinit_d_coef_controller	jIDCoefC
#define jinit_d_post_controller	jIDPostC
#define jinit_input_controller	jIInCtlr
#define jinit_marker_reader	jIMReader
#define jinit_huff_decoder	jIHDecoder
#define jinit_phuff_decoder	jIPHDecoder
#define jinit_inverse_dct	jIIDCT
#define jinit_upsampler		jIUpsampler
#define jinit_color_deconverter	jIDColor
#define jinit_1pass_quantizer	jI1Quant
#define jinit_2pass_quantizer	jI2Quant
#define jinit_merged_upsampler	jIMUpsampler
#define jinit_memory_mgr	jIMemMgr
#define jdiv_round_up		jDivRound
#define jround_up		jRound
#define jcopy_sample_rows	jCopySamples
#define jcopy_block_row		jCopyBlocks
#define jzero_far		jZeroFar
#define jpeg_zigzag_order	jZIGTable
#define jpeg_natural_order	jZAGTable
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/* Compression module initialization routines */
EXTERN(void) jinit_compress_master JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_c_master_control JPP((j_compress_ptr cinfo,
					 boolean transcode_only));
EXTERN(void) jinit_c_main_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_c_prep_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_c_coef_controller JPP((j_compress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_color_converter JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_downsampler JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_forward_dct JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_huff_encoder JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_phuff_encoder JPP((j_compress_ptr cinfo));
EXTERN(void) jinit_marker_writer JPP((j_compress_ptr cinfo));
/* Decompression module initialization routines */
EXTERN(void) jinit_master_decompress JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_d_main_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_d_coef_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_d_post_controller JPP((j_decompress_ptr cinfo,
					  boolean need_full_buffer));
EXTERN(void) jinit_input_controller JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_marker_reader JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_huff_decoder JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_phuff_decoder JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_inverse_dct JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_upsampler JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_color_deconverter JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_1pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_2pass_quantizer JPP((j_decompress_ptr cinfo));
EXTERN(void) jinit_merged_upsampler JPP((j_decompress_ptr cinfo));
/* Memory manager initialization */
EXTERN(void) jinit_memory_mgr JPP((j_common_ptr cinfo));

/* Utility routines in jutils.c */
EXTERN(long) jdiv_round_up JPP((long a, long b));
EXTERN(long) jround_up JPP((long a, long b));
EXTERN(void) jcopy_sample_rows JPP((JSAMPARRAY input_array, int source_row,
				    JSAMPARRAY output_array, int dest_row,
				    int num_rows, JDIMENSION num_cols));
EXTERN(void) jcopy_block_row JPP((JBLOCKROW input_row, JBLOCKROW output_row,
				  JDIMENSION num_blocks));
EXTERN(void) jzero_far JPP((void FAR * target, size_t bytestozero));
/* Constant tables in jutils.c */
#if 0				/* This table is not actually needed in v6a */
extern const int jpeg_zigzag_order[]; /* natural coef order to zigzag order */
#endif
extern const int jpeg_natural_order[]; /* zigzag coef order to natural order */

/* Suppress undefined-structure complaints if necessary. */

#ifdef INCOMPLETE_TYPES_BROKEN
#ifndef AM_MEMORY_MANAGER	/* only jmemmgr.c defines these */
struct jvirt_sarray_control { long dummy; };
struct jvirt_barray_control { long dummy; };
#endif
#endif /* INCOMPLETE_TYPES_BROKEN */

/*** End of inlined file: jpegint.h ***/



/*** Start of inlined file: jerror.h ***/
/*
 * To define the enum list of message codes, include this file without
 * defining macro JMESSAGE.  To create a message string table, include it
 * again with a suitable JMESSAGE definition (see jerror.c for an example).
 */
#ifndef JMESSAGE
#ifndef JERROR_H
/* First time through, define the enum list */
#define JMAKE_ENUM_LIST
#else
/* Repeated inclusions of this file are no-ops unless JMESSAGE is defined */
#define JMESSAGE(code,string)
#endif /* JERROR_H */
#endif /* JMESSAGE */

#ifdef JMAKE_ENUM_LIST

typedef enum {

#define JMESSAGE(code,string)	code ,

#endif /* JMAKE_ENUM_LIST */

JMESSAGE(JMSG_NOMESSAGE, "Bogus message code %d") /* Must be first entry! */

/* For maintenance convenience, list is alphabetical by message code name */
JMESSAGE(JERR_ARITH_NOTIMPL,
	 "Sorry, there are legal restrictions on arithmetic coding")
JMESSAGE(JERR_BAD_ALIGN_TYPE, "ALIGN_TYPE is wrong, please fix")
JMESSAGE(JERR_BAD_ALLOC_CHUNK, "MAX_ALLOC_CHUNK is wrong, please fix")
JMESSAGE(JERR_BAD_BUFFER_MODE, "Bogus buffer control mode")
JMESSAGE(JERR_BAD_COMPONENT_ID, "Invalid component ID %d in SOS")
JMESSAGE(JERR_BAD_DCT_COEF, "DCT coefficient out of range")
JMESSAGE(JERR_BAD_DCTSIZE, "IDCT output block size %d not supported")
JMESSAGE(JERR_BAD_HUFF_TABLE, "Bogus Huffman table definition")
JMESSAGE(JERR_BAD_IN_COLORSPACE, "Bogus input colorspace")
JMESSAGE(JERR_BAD_J_COLORSPACE, "Bogus JPEG colorspace")
JMESSAGE(JERR_BAD_LENGTH, "Bogus marker length")
JMESSAGE(JERR_BAD_LIB_VERSION,
	 "Wrong JPEG library version: library is %d, caller expects %d")
JMESSAGE(JERR_BAD_MCU_SIZE, "Sampling factors too large for interleaved scan")
JMESSAGE(JERR_BAD_POOL_ID, "Invalid memory pool code %d")
JMESSAGE(JERR_BAD_PRECISION, "Unsupported JPEG data precision %d")
JMESSAGE(JERR_BAD_PROGRESSION,
	 "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d")
JMESSAGE(JERR_BAD_PROG_SCRIPT,
	 "Invalid progressive parameters at scan script entry %d")
JMESSAGE(JERR_BAD_SAMPLING, "Bogus sampling factors")
JMESSAGE(JERR_BAD_SCAN_SCRIPT, "Invalid scan script at entry %d")
JMESSAGE(JERR_BAD_STATE, "Improper call to JPEG library in state %d")
JMESSAGE(JERR_BAD_STRUCT_SIZE,
	 "JPEG parameter struct mismatch: library thinks size is %u, caller expects %u")
JMESSAGE(JERR_BAD_VIRTUAL_ACCESS, "Bogus virtual array access")
JMESSAGE(JERR_BUFFER_SIZE, "Buffer passed to JPEG library is too small")
JMESSAGE(JERR_CANT_SUSPEND, "Suspension not allowed here")
JMESSAGE(JERR_CCIR601_NOTIMPL, "CCIR601 sampling not implemented yet")
JMESSAGE(JERR_COMPONENT_COUNT, "Too many color components: %d, max %d")
JMESSAGE(JERR_CONVERSION_NOTIMPL, "Unsupported color conversion request")
JMESSAGE(JERR_DAC_INDEX, "Bogus DAC index %d")
JMESSAGE(JERR_DAC_VALUE, "Bogus DAC value 0x%x")
JMESSAGE(JERR_DHT_INDEX, "Bogus DHT index %d")
JMESSAGE(JERR_DQT_INDEX, "Bogus DQT index %d")
JMESSAGE(JERR_EMPTY_IMAGE, "Empty JPEG image (DNL not supported)")
JMESSAGE(JERR_EMS_READ, "Read from EMS failed")
JMESSAGE(JERR_EMS_WRITE, "Write to EMS failed")
JMESSAGE(JERR_EOI_EXPECTED, "Didn't expect more than one scan")
JMESSAGE(JERR_FILE_READ, "Input file read error")
JMESSAGE(JERR_FILE_WRITE, "Output file write error --- out of disk space?")
JMESSAGE(JERR_FRACT_SAMPLE_NOTIMPL, "Fractional sampling not implemented yet")
JMESSAGE(JERR_HUFF_CLEN_OVERFLOW, "Huffman code size table overflow")
JMESSAGE(JERR_HUFF_MISSING_CODE, "Missing Huffman code table entry")
JMESSAGE(JERR_IMAGE_TOO_BIG, "Maximum supported image dimension is %u pixels")
JMESSAGE(JERR_INPUT_EMPTY, "Empty input file")
JMESSAGE(JERR_INPUT_EOF, "Premature end of input file")
JMESSAGE(JERR_MISMATCHED_QUANT_TABLE,
	 "Cannot transcode due to multiple use of quantization table %d")
JMESSAGE(JERR_MISSING_DATA, "Scan script does not transmit all data")
JMESSAGE(JERR_MODE_CHANGE, "Invalid color quantization mode change")
JMESSAGE(JERR_NOTIMPL, "Not implemented yet")
JMESSAGE(JERR_NOT_COMPILED, "Requested feature was omitted at compile time")
JMESSAGE(JERR_NO_BACKING_STORE, "Backing store not supported")
JMESSAGE(JERR_NO_HUFF_TABLE, "Huffman table 0x%02x was not defined")
JMESSAGE(JERR_NO_IMAGE, "JPEG datastream contains no image")
JMESSAGE(JERR_NO_QUANT_TABLE, "Quantization table 0x%02x was not defined")
JMESSAGE(JERR_NO_SOI, "Not a JPEG file: starts with 0x%02x 0x%02x")
JMESSAGE(JERR_OUT_OF_MEMORY, "Insufficient memory (case %d)")
JMESSAGE(JERR_QUANT_COMPONENTS,
	 "Cannot quantize more than %d color components")
JMESSAGE(JERR_QUANT_FEW_COLORS, "Cannot quantize to fewer than %d colors")
JMESSAGE(JERR_QUANT_MANY_COLORS, "Cannot quantize to more than %d colors")
JMESSAGE(JERR_SOF_DUPLICATE, "Invalid JPEG file structure: two SOF markers")
JMESSAGE(JERR_SOF_NO_SOS, "Invalid JPEG file structure: missing SOS marker")
JMESSAGE(JERR_SOF_UNSUPPORTED, "Unsupported JPEG process: SOF type 0x%02x")
JMESSAGE(JERR_SOI_DUPLICATE, "Invalid JPEG file structure: two SOI markers")
JMESSAGE(JERR_SOS_NO_SOF, "Invalid JPEG file structure: SOS before SOF")
JMESSAGE(JERR_TFILE_CREATE, "Failed to create temporary file %s")
JMESSAGE(JERR_TFILE_READ, "Read failed on temporary file")
JMESSAGE(JERR_TFILE_SEEK, "Seek failed on temporary file")
JMESSAGE(JERR_TFILE_WRITE,
	 "Write failed on temporary file --- out of disk space?")
JMESSAGE(JERR_TOO_LITTLE_DATA, "Application transferred too few scanlines")
JMESSAGE(JERR_UNKNOWN_MARKER, "Unsupported marker type 0x%02x")
JMESSAGE(JERR_VIRTUAL_BUG, "Virtual array controller messed up")
JMESSAGE(JERR_WIDTH_OVERFLOW, "Image too wide for this implementation")
JMESSAGE(JERR_XMS_READ, "Read from XMS failed")
JMESSAGE(JERR_XMS_WRITE, "Write to XMS failed")
JMESSAGE(JMSG_COPYRIGHT, JCOPYRIGHT)
JMESSAGE(JMSG_VERSION, JVERSION)
JMESSAGE(JTRC_16BIT_TABLES,
	 "Caution: quantization tables are too coarse for baseline JPEG")
JMESSAGE(JTRC_ADOBE,
	 "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d")
JMESSAGE(JTRC_APP0, "Unknown APP0 marker (not JFIF), length %u")
JMESSAGE(JTRC_APP14, "Unknown APP14 marker (not Adobe), length %u")
JMESSAGE(JTRC_DAC, "Define Arithmetic Table 0x%02x: 0x%02x")
JMESSAGE(JTRC_DHT, "Define Huffman Table 0x%02x")
JMESSAGE(JTRC_DQT, "Define Quantization Table %d  precision %d")
JMESSAGE(JTRC_DRI, "Define Restart Interval %u")
JMESSAGE(JTRC_EMS_CLOSE, "Freed EMS handle %u")
JMESSAGE(JTRC_EMS_OPEN, "Obtained EMS handle %u")
JMESSAGE(JTRC_EOI, "End Of Image")
JMESSAGE(JTRC_HUFFBITS, "        %3d %3d %3d %3d %3d %3d %3d %3d")
JMESSAGE(JTRC_JFIF, "JFIF APP0 marker: version %d.%02d, density %dx%d  %d")
JMESSAGE(JTRC_JFIF_BADTHUMBNAILSIZE,
	 "Warning: thumbnail image size does not match data length %u")
JMESSAGE(JTRC_JFIF_EXTENSION,
	 "JFIF extension marker: type 0x%02x, length %u")
JMESSAGE(JTRC_JFIF_THUMBNAIL, "    with %d x %d thumbnail image")
JMESSAGE(JTRC_MISC_MARKER, "Miscellaneous marker 0x%02x, length %u")
JMESSAGE(JTRC_PARMLESS_MARKER, "Unexpected marker 0x%02x")
JMESSAGE(JTRC_QUANTVALS, "        %4u %4u %4u %4u %4u %4u %4u %4u")
JMESSAGE(JTRC_QUANT_3_NCOLORS, "Quantizing to %d = %d*%d*%d colors")
JMESSAGE(JTRC_QUANT_NCOLORS, "Quantizing to %d colors")
JMESSAGE(JTRC_QUANT_SELECTED, "Selected %d colors for quantization")
JMESSAGE(JTRC_RECOVERY_ACTION, "At marker 0x%02x, recovery action %d")
JMESSAGE(JTRC_RST, "RST%d")
JMESSAGE(JTRC_SMOOTH_NOTIMPL,
	 "Smoothing not supported with nonstandard sampling ratios")
JMESSAGE(JTRC_SOF, "Start Of Frame 0x%02x: width=%u, height=%u, components=%d")
JMESSAGE(JTRC_SOF_COMPONENT, "    Component %d: %dhx%dv q=%d")
JMESSAGE(JTRC_SOI, "Start of Image")
JMESSAGE(JTRC_SOS, "Start Of Scan: %d components")
JMESSAGE(JTRC_SOS_COMPONENT, "    Component %d: dc=%d ac=%d")
JMESSAGE(JTRC_SOS_PARAMS, "  Ss=%d, Se=%d, Ah=%d, Al=%d")
JMESSAGE(JTRC_TFILE_CLOSE, "Closed temporary file %s")
JMESSAGE(JTRC_TFILE_OPEN, "Opened temporary file %s")
JMESSAGE(JTRC_THUMB_JPEG,
	 "JFIF extension marker: JPEG-compressed thumbnail image, length %u")
JMESSAGE(JTRC_THUMB_PALETTE,
	 "JFIF extension marker: palette thumbnail image, length %u")
JMESSAGE(JTRC_THUMB_RGB,
	 "JFIF extension marker: RGB thumbnail image, length %u")
JMESSAGE(JTRC_UNKNOWN_IDS,
	 "Unrecognized component IDs %d %d %d, assuming YCbCr")
JMESSAGE(JTRC_XMS_CLOSE, "Freed XMS handle %u")
JMESSAGE(JTRC_XMS_OPEN, "Obtained XMS handle %u")
JMESSAGE(JWRN_ADOBE_XFORM, "Unknown Adobe color transform code %d")
JMESSAGE(JWRN_BOGUS_PROGRESSION,
	 "Inconsistent progression sequence for component %d coefficient %d")
JMESSAGE(JWRN_EXTRANEOUS_DATA,
	 "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x")
JMESSAGE(JWRN_HIT_MARKER, "Corrupt JPEG data: premature end of data segment")
JMESSAGE(JWRN_HUFF_BAD_CODE, "Corrupt JPEG data: bad Huffman code")
JMESSAGE(JWRN_JFIF_MAJOR, "Warning: unknown JFIF revision number %d.%02d")
JMESSAGE(JWRN_JPEG_EOF, "Premature end of JPEG file")
JMESSAGE(JWRN_MUST_RESYNC,
	 "Corrupt JPEG data: found marker 0x%02x instead of RST%d")
JMESSAGE(JWRN_NOT_SEQUENTIAL, "Invalid SOS parameters for sequential JPEG")
JMESSAGE(JWRN_TOO_MUCH_DATA, "Application transferred too many scanlines")

#ifdef JMAKE_ENUM_LIST

  JMSG_LASTMSGCODE
} J_MESSAGE_CODE;

#undef JMAKE_ENUM_LIST
#endif /* JMAKE_ENUM_LIST */

/* Zap JMESSAGE macro so that future re-inclusions do nothing by default */
#undef JMESSAGE

#ifndef JERROR_H
#define JERROR_H

/* Macros to simplify using the error and trace message stuff */
/* The first parameter is either type of cinfo pointer */

/* Fatal errors (print message and exit) */
#define ERREXIT(cinfo,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT1(cinfo,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT2(cinfo,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT3(cinfo,code,p1,p2,p3)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (cinfo)->err->msg_parm.i[2] = (p3), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT4(cinfo,code,p1,p2,p3,p4)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (cinfo)->err->msg_parm.i[2] = (p3), \
   (cinfo)->err->msg_parm.i[3] = (p4), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXITS(cinfo,code,str)  \
  ((cinfo)->err->msg_code = (code), \
   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))

#define MAKESTMT(stuff)		do { stuff } while (0)

/* Nonfatal errors (we can keep going, but the data is probably corrupt) */
#define WARNMS(cinfo,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS1(cinfo,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS2(cinfo,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))

/* Informational/debugging messages */
#define TRACEMS(cinfo,lvl,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS1(cinfo,lvl,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS2(cinfo,lvl,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS3(cinfo,lvl,code,p1,p2,p3)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS4(cinfo,lvl,code,p1,p2,p3,p4)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS5(cinfo,lvl,code,p1,p2,p3,p4,p5)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   _mp[4] = (p5); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS8(cinfo,lvl,code,p1,p2,p3,p4,p5,p6,p7,p8)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   _mp[4] = (p5); _mp[5] = (p6); _mp[6] = (p7); _mp[7] = (p8); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMSS(cinfo,lvl,code,str)  \
  ((cinfo)->err->msg_code = (code), \
   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))

#endif /* JERROR_H */

/*** End of inlined file: jerror.h ***/

#endif

#endif /* JPEGLIB_H */

/*** End of inlined file: jpeglib.h ***/



/*** Start of inlined file: jcapimin.c ***/
#define JPEG_INTERNALS

/*** Start of inlined file: jinclude.h ***/
/* Include auto-config file to find out which system include files we need. */

#ifndef __jinclude_h__
#define __jinclude_h__


/*** Start of inlined file: jconfig.h ***/
/* see jconfig.doc for explanations */

// disable all the warnings under MSVC
#ifdef _MSC_VER
#pragma warning (disable: 4996 4267 4100 4127 4702 4244)
#endif

#ifdef __BORLANDC__
#pragma warn -8057
#pragma warn -8019
#pragma warn -8004
#pragma warn -8008
#endif

#define HAVE_PROTOTYPES
#define HAVE_UNSIGNED_CHAR
#define HAVE_UNSIGNED_SHORT
/* #define void char */
/* #define const */
#undef CHAR_IS_UNSIGNED
#define HAVE_STDDEF_H
#define HAVE_STDLIB_H
#undef NEED_BSD_STRINGS
#undef NEED_SYS_TYPES_H
#undef NEED_FAR_POINTERS	/* we presume a 32-bit flat memory model */
#undef NEED_SHORT_EXTERNAL_NAMES
#undef INCOMPLETE_TYPES_BROKEN

/* Define "boolean" as unsigned char, not int, per Windows custom */
#ifndef __RPCNDR_H__		/* don't conflict if rpcndr.h already read */
typedef unsigned char boolean;
#endif
#define HAVE_BOOLEAN		/* prevent jmorecfg.h from redefining it */

#ifdef JPEG_INTERNALS

#undef RIGHT_SHIFT_IS_UNSIGNED

#endif /* JPEG_INTERNALS */

#ifdef JPEG_CJPEG_DJPEG

#define BMP_SUPPORTED		/* BMP image file format */
#define GIF_SUPPORTED		/* GIF image file format */
#define PPM_SUPPORTED		/* PBMPLUS PPM/PGM image file format */
#undef RLE_SUPPORTED		/* Utah RLE image file format */
#define TARGA_SUPPORTED		/* Targa image file format */

#define TWO_FILE_COMMANDLINE	/* optional */
#define USE_SETMODE		/* Microsoft has setmode() */
#undef NEED_SIGNAL_CATCHER
#undef DONT_USE_B_MODE
#undef PROGRESS_REPORT		/* optional */

#endif /* JPEG_CJPEG_DJPEG */

/*** End of inlined file: jconfig.h ***/

#define JCONFIG_INCLUDED	/* so that jpeglib.h doesn't do it again */

/*
 * We need the NULL macro and size_t typedef.
 * On an ANSI-conforming system it is sufficient to include <stddef.h>.
 * Otherwise, we get them from <stdlib.h> or <stdio.h>; we may have to
 * pull in <sys/types.h> as well.
 * Note that the core JPEG library does not require <stdio.h>;
 * only the default error handler and data source/destination modules do.
 * But we must pull it in because of the references to FILE in jpeglib.h.
 * You can remove those references if you want to compile without <stdio.h>.
 */

#ifdef HAVE_STDDEF_H
#include <stddef.h>
#endif

#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif

#ifdef NEED_SYS_TYPES_H
#include <sys/types.h>
#endif

#include <stdio.h>

/*
 * We need memory copying and zeroing functions, plus strncpy().
 * ANSI and System V implementations declare these in <string.h>.
 * BSD doesn't have the mem() functions, but it does have bcopy()/bzero().
 * Some systems may declare memset and memcpy in <memory.h>.
 *
 * NOTE: we assume the size parameters to these functions are of type size_t.
 * Change the casts in these macros if not!
 */

#ifdef NEED_BSD_STRINGS

#include <strings.h>
#define MEMZERO(target,size)	bzero((void *)(target), (size_t)(size))
#define MEMCOPY(dest,src,size)	bcopy((const void *)(src), (void *)(dest), (size_t)(size))

#else /* not BSD, assume ANSI/SysV string lib */

#include <string.h>
#define MEMZERO(target,size)	memset((void *)(target), 0, (size_t)(size))
#define MEMCOPY(dest,src,size)	memcpy((void *)(dest), (const void *)(src), (size_t)(size))

#endif

/*
 * In ANSI C, and indeed any rational implementation, size_t is also the
 * type returned by sizeof().  However, it seems there are some irrational
 * implementations out there, in which sizeof() returns an int even though
 * size_t is defined as long or unsigned long.  To ensure consistent results
 * we always use this SIZEOF() macro in place of using sizeof() directly.
 */

#define SIZEOF(object)	((size_t) sizeof(object))

/*
 * The modules that use fread() and fwrite() always invoke them through
 * these macros.  On some systems you may need to twiddle the argument casts.
 * CAUTION: argument order is different from underlying functions!
 */

#define JFREAD(file,buf,sizeofbuf)  \
  ((size_t) fread((void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))
#define JFWRITE(file,buf,sizeofbuf)  \
  ((size_t) fwrite((const void *) (buf), (size_t) 1, (size_t) (sizeofbuf), (file)))

typedef enum {			/* JPEG marker codes */
  M_SOF0  = 0xc0,
  M_SOF1  = 0xc1,
  M_SOF2  = 0xc2,
  M_SOF3  = 0xc3,

  M_SOF5  = 0xc5,
  M_SOF6  = 0xc6,
  M_SOF7  = 0xc7,

  M_JPG   = 0xc8,
  M_SOF9  = 0xc9,
  M_SOF10 = 0xca,
  M_SOF11 = 0xcb,

  M_SOF13 = 0xcd,
  M_SOF14 = 0xce,
  M_SOF15 = 0xcf,

  M_DHT   = 0xc4,

  M_DAC   = 0xcc,

  M_RST0  = 0xd0,
  M_RST1  = 0xd1,
  M_RST2  = 0xd2,
  M_RST3  = 0xd3,
  M_RST4  = 0xd4,
  M_RST5  = 0xd5,
  M_RST6  = 0xd6,
  M_RST7  = 0xd7,

  M_SOI   = 0xd8,
  M_EOI   = 0xd9,
  M_SOS   = 0xda,
  M_DQT   = 0xdb,
  M_DNL   = 0xdc,
  M_DRI   = 0xdd,
  M_DHP   = 0xde,
  M_EXP   = 0xdf,

  M_APP0  = 0xe0,
  M_APP1  = 0xe1,
  M_APP2  = 0xe2,
  M_APP3  = 0xe3,
  M_APP4  = 0xe4,
  M_APP5  = 0xe5,
  M_APP6  = 0xe6,
  M_APP7  = 0xe7,
  M_APP8  = 0xe8,
  M_APP9  = 0xe9,
  M_APP10 = 0xea,
  M_APP11 = 0xeb,
  M_APP12 = 0xec,
  M_APP13 = 0xed,
  M_APP14 = 0xee,
  M_APP15 = 0xef,

  M_JPG0  = 0xf0,
  M_JPG13 = 0xfd,
  M_COM   = 0xfe,

  M_TEM   = 0x01,

  M_ERROR = 0x100
} JPEG_MARKER;

/*
 * Figure F.12: extend sign bit.
 * On some machines, a shift and add will be faster than a table lookup.
 */

#ifdef AVOID_TABLES

#define HUFF_EXTEND(x,s)  ((x) < (1<<((s)-1)) ? (x) + (((-1)<<(s)) + 1) : (x))

#else

#define HUFF_EXTEND(x,s)  ((x) < extend_test[s] ? (x) + extend_offset[s] : (x))

static const int extend_test[16] =   /* entry n is 2**(n-1) */
  { 0, 0x0001, 0x0002, 0x0004, 0x0008, 0x0010, 0x0020, 0x0040, 0x0080,
	0x0100, 0x0200, 0x0400, 0x0800, 0x1000, 0x2000, 0x4000 };

static const int extend_offset[16] = /* entry n is (-1 << n) + 1 */
  { 0, ((-1)<<1) + 1, ((-1)<<2) + 1, ((-1)<<3) + 1, ((-1)<<4) + 1,
	((-1)<<5) + 1, ((-1)<<6) + 1, ((-1)<<7) + 1, ((-1)<<8) + 1,
	((-1)<<9) + 1, ((-1)<<10) + 1, ((-1)<<11) + 1, ((-1)<<12) + 1,
	((-1)<<13) + 1, ((-1)<<14) + 1, ((-1)<<15) + 1 };

#endif /* AVOID_TABLES */

#endif

/*** End of inlined file: jinclude.h ***/


/*
 * Initialization of a JPEG compression object.
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL(void)
jpeg_CreateCompress (j_compress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
  if (version != JPEG_LIB_VERSION)
	ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
  if (structsize != SIZEOF(struct jpeg_compress_struct))
	ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE,
	     (int) SIZEOF(struct jpeg_compress_struct), (int) structsize);

  /* For debugging purposes, we zero the whole master structure.
   * But the application has already set the err pointer, and may have set
   * client_data, so we have to save and restore those fields.
   * Note: if application hasn't set client_data, tools like Purify may
   * complain here.
   */
  {
	struct jpeg_error_mgr * err = cinfo->err;
	void * client_data = cinfo->client_data; /* ignore Purify complaint here */
	MEMZERO(cinfo, SIZEOF(struct jpeg_compress_struct));
	cinfo->err = err;
	cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = FALSE;

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
  cinfo->dest = NULL;

  cinfo->comp_info = NULL;

  for (i = 0; i < NUM_QUANT_TBLS; i++)
	cinfo->quant_tbl_ptrs[i] = NULL;

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
	cinfo->dc_huff_tbl_ptrs[i] = NULL;
	cinfo->ac_huff_tbl_ptrs[i] = NULL;
  }

  cinfo->script_space = NULL;

  cinfo->input_gamma = 1.0;	/* in case application forgets */

  /* OK, I'm ready */
  cinfo->global_state = CSTATE_START;
}

/*
 * Destruction of a JPEG compression object
 */

GLOBAL(void)
jpeg_destroy_compress (j_compress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
}

/*
 * Abort processing of a JPEG compression operation,
 * but don't destroy the object itself.
 */

GLOBAL(void)
jpeg_abort_compress (j_compress_ptr cinfo)
{
  jpeg_abort((j_common_ptr) cinfo); /* use common routine */
}

/*
 * Forcibly suppress or un-suppress all quantization and Huffman tables.
 * Marks all currently defined tables as already written (if suppress)
 * or not written (if !suppress).  This will control whether they get emitted
 * by a subsequent jpeg_start_compress call.
 *
 * This routine is exported for use by applications that want to produce
 * abbreviated JPEG datastreams.  It logically belongs in jcparam.c, but
 * since it is called by jpeg_start_compress, we put it here --- otherwise
 * jcparam.o would be linked whether the application used it or not.
 */

GLOBAL(void)
jpeg_suppress_tables (j_compress_ptr cinfo, boolean suppress)
{
  int i;
  JQUANT_TBL * qtbl;
  JHUFF_TBL * htbl;

  for (i = 0; i < NUM_QUANT_TBLS; i++) {
	if ((qtbl = cinfo->quant_tbl_ptrs[i]) != NULL)
	  qtbl->sent_table = suppress;
  }

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
	if ((htbl = cinfo->dc_huff_tbl_ptrs[i]) != NULL)
	  htbl->sent_table = suppress;
	if ((htbl = cinfo->ac_huff_tbl_ptrs[i]) != NULL)
	  htbl->sent_table = suppress;
  }
}

/*
 * Finish JPEG compression.
 *
 * If a multipass operating mode was selected, this may do a great deal of
 * work including most of the actual output.
 */

GLOBAL(void)
jpeg_finish_compress (j_compress_ptr cinfo)
{
  JDIMENSION iMCU_row;

  if (cinfo->global_state == CSTATE_SCANNING ||
	  cinfo->global_state == CSTATE_RAW_OK) {
	/* Terminate first pass */
	if (cinfo->next_scanline < cinfo->image_height)
	  ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
	(*cinfo->master->finish_pass) (cinfo);
  } else if (cinfo->global_state != CSTATE_WRCOEFS)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Perform any remaining passes */
  while (! cinfo->master->is_last_pass) {
	(*cinfo->master->prepare_for_pass) (cinfo);
	for (iMCU_row = 0; iMCU_row < cinfo->total_iMCU_rows; iMCU_row++) {
	  if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) iMCU_row;
	cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
	  }
	  /* We bypass the main controller and invoke coef controller directly;
	   * all work is being done from the coefficient buffer.
	   */
	  if (! (*cinfo->coef->compress_data) (cinfo, (JSAMPIMAGE) NULL))
	ERREXIT(cinfo, JERR_CANT_SUSPEND);
	}
	(*cinfo->master->finish_pass) (cinfo);
  }
  /* Write EOI, do final cleanup */
  (*cinfo->marker->write_file_trailer) (cinfo);
  (*cinfo->dest->term_destination) (cinfo);
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
}

/*
 * Write a special marker.
 * This is only recommended for writing COM or APPn markers.
 * Must be called after jpeg_start_compress() and before
 * first call to jpeg_write_scanlines() or jpeg_write_raw_data().
 */

GLOBAL(void)
jpeg_write_marker (j_compress_ptr cinfo, int marker,
		   const JOCTET *dataptr, unsigned int datalen)
{
  JMETHOD(void, write_marker_byte, (j_compress_ptr info, int val));

  if (cinfo->next_scanline != 0 ||
	  (cinfo->global_state != CSTATE_SCANNING &&
	   cinfo->global_state != CSTATE_RAW_OK &&
	   cinfo->global_state != CSTATE_WRCOEFS))
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  (*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
  write_marker_byte = cinfo->marker->write_marker_byte;	/* copy for speed */
  while (datalen--) {
	(*write_marker_byte) (cinfo, *dataptr);
	dataptr++;
  }
}

/* Same, but piecemeal. */

GLOBAL(void)
jpeg_write_m_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
{
  if (cinfo->next_scanline != 0 ||
	  (cinfo->global_state != CSTATE_SCANNING &&
	   cinfo->global_state != CSTATE_RAW_OK &&
	   cinfo->global_state != CSTATE_WRCOEFS))
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  (*cinfo->marker->write_marker_header) (cinfo, marker, datalen);
}

GLOBAL(void)
jpeg_write_m_byte (j_compress_ptr cinfo, int val)
{
  (*cinfo->marker->write_marker_byte) (cinfo, val);
}

/*
 * Alternate compression function: just write an abbreviated table file.
 * Before calling this, all parameters and a data destination must be set up.
 *
 * To produce a pair of files containing abbreviated tables and abbreviated
 * image data, one would proceed as follows:
 *
 *		initialize JPEG object
 *		set JPEG parameters
 *		set destination to table file
 *		jpeg_write_tables(cinfo);
 *		set destination to image file
 *		jpeg_start_compress(cinfo, FALSE);
 *		write data...
 *		jpeg_finish_compress(cinfo);
 *
 * jpeg_write_tables has the side effect of marking all tables written
 * (same as jpeg_suppress_tables(..., TRUE)).  Thus a subsequent start_compress
 * will not re-emit the tables unless it is passed write_all_tables=TRUE.
 */

GLOBAL(void)
jpeg_write_tables (j_compress_ptr cinfo)
{
  if (cinfo->global_state != CSTATE_START)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* (Re)initialize error mgr and destination modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->dest->init_destination) (cinfo);
  /* Initialize the marker writer ... bit of a crock to do it here. */
  jinit_marker_writer(cinfo);
  /* Write them tables! */
  (*cinfo->marker->write_tables_only) (cinfo);
  /* And clean up. */
  (*cinfo->dest->term_destination) (cinfo);
  /*
   * In library releases up through v6a, we called jpeg_abort() here to free
   * any working memory allocated by the destination manager and marker
   * writer.  Some applications had a problem with that: they allocated space
   * of their own from the library memory manager, and didn't want it to go
   * away during write_tables.  So now we do nothing.  This will cause a
   * memory leak if an app calls write_tables repeatedly without doing a full
   * compression cycle or otherwise resetting the JPEG object.  However, that
   * seems less bad than unexpectedly freeing memory in the normal case.
   * An app that prefers the old behavior can call jpeg_abort for itself after
   * each call to jpeg_write_tables().
   */
}

/*** End of inlined file: jcapimin.c ***/


/*** Start of inlined file: jcapistd.c ***/
#define JPEG_INTERNALS

/*
 * Compression initialization.
 * Before calling this, all parameters and a data destination must be set up.
 *
 * We require a write_all_tables parameter as a failsafe check when writing
 * multiple datastreams from the same compression object.  Since prior runs
 * will have left all the tables marked sent_table=TRUE, a subsequent run
 * would emit an abbreviated stream (no tables) by default.  This may be what
 * is wanted, but for safety's sake it should not be the default behavior:
 * programmers should have to make a deliberate choice to emit abbreviated
 * images.  Therefore the documentation and examples should encourage people
 * to pass write_all_tables=TRUE; then it will take active thought to do the
 * wrong thing.
 */

GLOBAL(void)
jpeg_start_compress (j_compress_ptr cinfo, boolean write_all_tables)
{
  if (cinfo->global_state != CSTATE_START)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  if (write_all_tables)
	jpeg_suppress_tables(cinfo, FALSE);	/* mark all tables to be written */

  /* (Re)initialize error mgr and destination modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->dest->init_destination) (cinfo);
  /* Perform master selection of active modules */
  jinit_compress_master(cinfo);
  /* Set up for the first pass */
  (*cinfo->master->prepare_for_pass) (cinfo);
  /* Ready for application to drive first pass through jpeg_write_scanlines
   * or jpeg_write_raw_data.
   */
  cinfo->next_scanline = 0;
  cinfo->global_state = (cinfo->raw_data_in ? CSTATE_RAW_OK : CSTATE_SCANNING);
}

/*
 * Write some scanlines of data to the JPEG compressor.
 *
 * The return value will be the number of lines actually written.
 * This should be less than the supplied num_lines only in case that
 * the data destination module has requested suspension of the compressor,
 * or if more than image_height scanlines are passed in.
 *
 * Note: we warn about excess calls to jpeg_write_scanlines() since
 * this likely signals an application programmer error.  However,
 * excess scanlines passed in the last valid call are *silently* ignored,
 * so that the application need not adjust num_lines for end-of-image
 * when using a multiple-scanline buffer.
 */

GLOBAL(JDIMENSION)
jpeg_write_scanlines (j_compress_ptr cinfo, JSAMPARRAY scanlines,
		      JDIMENSION num_lines)
{
  JDIMENSION row_ctr, rows_left;

  if (cinfo->global_state != CSTATE_SCANNING)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->next_scanline >= cinfo->image_height)
	WARNMS(cinfo, JWRN_TOO_MUCH_DATA);

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) cinfo->next_scanline;
	cinfo->progress->pass_limit = (long) cinfo->image_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Give master control module another chance if this is first call to
   * jpeg_write_scanlines.  This lets output of the frame/scan headers be
   * delayed so that application can write COM, etc, markers between
   * jpeg_start_compress and jpeg_write_scanlines.
   */
  if (cinfo->master->call_pass_startup)
	(*cinfo->master->pass_startup) (cinfo);

  /* Ignore any extra scanlines at bottom of image. */
  rows_left = cinfo->image_height - cinfo->next_scanline;
  if (num_lines > rows_left)
	num_lines = rows_left;

  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, num_lines);
  cinfo->next_scanline += row_ctr;
  return row_ctr;
}

/*
 * Alternate entry point to write raw data.
 * Processes exactly one iMCU row per call, unless suspended.
 */

GLOBAL(JDIMENSION)
jpeg_write_raw_data (j_compress_ptr cinfo, JSAMPIMAGE data,
		     JDIMENSION num_lines)
{
  JDIMENSION lines_per_iMCU_row;

  if (cinfo->global_state != CSTATE_RAW_OK)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->next_scanline >= cinfo->image_height) {
	WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
	return 0;
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) cinfo->next_scanline;
	cinfo->progress->pass_limit = (long) cinfo->image_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Give master control module another chance if this is first call to
   * jpeg_write_raw_data.  This lets output of the frame/scan headers be
   * delayed so that application can write COM, etc, markers between
   * jpeg_start_compress and jpeg_write_raw_data.
   */
  if (cinfo->master->call_pass_startup)
	(*cinfo->master->pass_startup) (cinfo);

  /* Verify that at least one iMCU row has been passed. */
  lines_per_iMCU_row = cinfo->max_v_samp_factor * DCTSIZE;
  if (num_lines < lines_per_iMCU_row)
	ERREXIT(cinfo, JERR_BUFFER_SIZE);

  /* Directly compress the row. */
  if (! (*cinfo->coef->compress_data) (cinfo, data)) {
	/* If compressor did not consume the whole row, suspend processing. */
	return 0;
  }

  /* OK, we processed one iMCU row. */
  cinfo->next_scanline += lines_per_iMCU_row;
  return lines_per_iMCU_row;
}

/*** End of inlined file: jcapistd.c ***/


/*** Start of inlined file: jccoefct.c ***/
#define JPEG_INTERNALS

/* We use a full-image coefficient buffer when doing Huffman optimization,
 * and also for writing multiple-scan JPEG files.  In all cases, the DCT
 * step is run during the first pass, and subsequent passes need only read
 * the buffered coefficients.
 */
#ifdef ENTROPY_OPT_SUPPORTED
#define FULL_COEF_BUFFER_SUPPORTED
#else
#ifdef C_MULTISCAN_FILES_SUPPORTED
#define FULL_COEF_BUFFER_SUPPORTED
#endif
#endif

/* Private buffer controller object */

typedef struct {
  struct jpeg_c_coef_controller pub; /* public fields */

  JDIMENSION iMCU_row_num;	/* iMCU row # within image */
  JDIMENSION mcu_ctr;		/* counts MCUs processed in current row */
  int MCU_vert_offset;		/* counts MCU rows within iMCU row */
  int MCU_rows_per_iMCU_row;	/* number of such rows needed */

  /* For single-pass compression, it's sufficient to buffer just one MCU
   * (although this may prove a bit slow in practice).  We allocate a
   * workspace of C_MAX_BLOCKS_IN_MCU coefficient blocks, and reuse it for each
   * MCU constructed and sent.  (On 80x86, the workspace is FAR even though
   * it's not really very big; this is to keep the module interfaces unchanged
   * when a large coefficient buffer is necessary.)
   * In multi-pass modes, this array points to the current MCU's blocks
   * within the virtual arrays.
   */
  JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];

  /* In multi-pass modes, we need a virtual block array for each component. */
  jvirt_barray_ptr whole_image[MAX_COMPONENTS];
} my_coef_controller;

typedef my_coef_controller * my_coef_ptr;

/* Forward declarations */
METHODDEF(boolean) compress_data
	JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
#ifdef FULL_COEF_BUFFER_SUPPORTED
METHODDEF(boolean) compress_first_pass
	JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
METHODDEF(boolean) compress_output
	JPP((j_compress_ptr cinfo, JSAMPIMAGE input_buf));
#endif

LOCAL(void)
start_iMCU_row (j_compress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row */
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
	coef->MCU_rows_per_iMCU_row = 1;
  } else {
	if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
	  coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
	else
	  coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
  }

  coef->mcu_ctr = 0;
  coef->MCU_vert_offset = 0;
}

/*
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_coef (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;

  coef->iMCU_row_num = 0;
  start_iMCU_row(cinfo);

  switch (pass_mode) {
  case JBUF_PASS_THRU:
	if (coef->whole_image[0] != NULL)
	  ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
	coef->pub.compress_data = compress_data;
	break;
#ifdef FULL_COEF_BUFFER_SUPPORTED
  case JBUF_SAVE_AND_PASS:
	if (coef->whole_image[0] == NULL)
	  ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
	coef->pub.compress_data = compress_first_pass;
	break;
  case JBUF_CRANK_DEST:
	if (coef->whole_image[0] == NULL)
	  ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
	coef->pub.compress_data = compress_output;
	break;
#endif
  default:
	ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
	break;
  }
}

/*
 * Process some data in the single-pass case.
 * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the image.
 * Returns TRUE if the iMCU row is completed, FALSE if suspended.
 *
 * NB: input_buf contains a plane for each component in image,
 * which we index according to the component's SOF position.
 */

METHODDEF(boolean)
compress_data (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  int blkn, bi, ci, yindex, yoffset, blockcnt;
  JDIMENSION ypos, xpos;
  jpeg_component_info *compptr;

  /* Loop to write as much as one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
	   yoffset++) {
	for (MCU_col_num = coef->mcu_ctr; MCU_col_num <= last_MCU_col;
	 MCU_col_num++) {
	  /* Determine where data comes from in input_buf and do the DCT thing.
	   * Each call on forward_DCT processes a horizontal row of DCT blocks
	   * as wide as an MCU; we rely on having allocated the MCU_buffer[] blocks
	   * sequentially.  Dummy blocks at the right or bottom edge are filled in
	   * specially.  The data in them does not matter for image reconstruction,
	   * so we fill them with values that will encode to the smallest amount of
	   * data, viz: all zeroes in the AC entries, DC entries equal to previous
	   * block's DC value.  (Thanks to Thomas Kinsman for this idea.)
	   */
	  blkn = 0;
	  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						: compptr->last_col_width;
	xpos = MCU_col_num * compptr->MCU_sample_width;
	ypos = yoffset * DCTSIZE; /* ypos == (yoffset+yindex) * DCTSIZE */
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  if (coef->iMCU_row_num < last_iMCU_row ||
	      yoffset+yindex < compptr->last_row_height) {
	    (*cinfo->fdct->forward_DCT) (cinfo, compptr,
					 input_buf[compptr->component_index],
					 coef->MCU_buffer[blkn],
					 ypos, xpos, (JDIMENSION) blockcnt);
	    if (blockcnt < compptr->MCU_width) {
	      /* Create some dummy blocks at the right edge of the image. */
	      jzero_far((void FAR *) coef->MCU_buffer[blkn + blockcnt],
			(compptr->MCU_width - blockcnt) * SIZEOF(JBLOCK));
	      for (bi = blockcnt; bi < compptr->MCU_width; bi++) {
		coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn+bi-1][0][0];
	      }
	    }
	  } else {
	    /* Create a row of dummy blocks at the bottom of the image. */
	    jzero_far((void FAR *) coef->MCU_buffer[blkn],
		      compptr->MCU_width * SIZEOF(JBLOCK));
	    for (bi = 0; bi < compptr->MCU_width; bi++) {
	      coef->MCU_buffer[blkn+bi][0][0] = coef->MCU_buffer[blkn-1][0][0];
	    }
	  }
	  blkn += compptr->MCU_width;
	  ypos += DCTSIZE;
	}
	  }
	  /* Try to write the MCU.  In event of a suspension failure, we will
	   * re-DCT the MCU on restart (a bit inefficient, could be fixed...)
	   */
	  if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->mcu_ctr = MCU_col_num;
	return FALSE;
	  }
	}
	/* Completed an MCU row, but perhaps not an iMCU row */
	coef->mcu_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  coef->iMCU_row_num++;
  start_iMCU_row(cinfo);
  return TRUE;
}

#ifdef FULL_COEF_BUFFER_SUPPORTED

/*
 * Process some data in the first pass of a multi-pass case.
 * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the image.
 * This amount of data is read from the source buffer, DCT'd and quantized,
 * and saved into the virtual arrays.  We also generate suitable dummy blocks
 * as needed at the right and lower edges.  (The dummy blocks are constructed
 * in the virtual arrays, which have been padded appropriately.)  This makes
 * it possible for subsequent passes not to worry about real vs. dummy blocks.
 *
 * We must also emit the data to the entropy encoder.  This is conveniently
 * done by calling compress_output() after we've loaded the current strip
 * of the virtual arrays.
 *
 * NB: input_buf contains a plane for each component in image.  All
 * components are DCT'd and loaded into the virtual arrays in this pass.
 * However, it may be that only a subset of the components are emitted to
 * the entropy encoder during this first pass; be careful about looking
 * at the scan-dependent variables (MCU dimensions, etc).
 */

METHODDEF(boolean)
compress_first_pass (j_compress_ptr cinfo, JSAMPIMAGE input_buf)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  JDIMENSION blocks_across, MCUs_across, MCUindex;
  int bi, ci, h_samp_factor, block_row, block_rows, ndummy;
  JCOEF lastDC;
  jpeg_component_info *compptr;
  JBLOCKARRAY buffer;
  JBLOCKROW thisblockrow, lastblockrow;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* Align the virtual buffer for this component. */
	buffer = (*cinfo->mem->access_virt_barray)
	  ((j_common_ptr) cinfo, coef->whole_image[ci],
	   coef->iMCU_row_num * compptr->v_samp_factor,
	   (JDIMENSION) compptr->v_samp_factor, TRUE);
	/* Count non-dummy DCT block rows in this iMCU row. */
	if (coef->iMCU_row_num < last_iMCU_row)
	  block_rows = compptr->v_samp_factor;
	else {
	  /* NB: can't use last_row_height here, since may not be set! */
	  block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
	  if (block_rows == 0) block_rows = compptr->v_samp_factor;
	}
	blocks_across = compptr->width_in_blocks;
	h_samp_factor = compptr->h_samp_factor;
	/* Count number of dummy blocks to be added at the right margin. */
	ndummy = (int) (blocks_across % h_samp_factor);
	if (ndummy > 0)
	  ndummy = h_samp_factor - ndummy;
	/* Perform DCT for all non-dummy blocks in this iMCU row.  Each call
	 * on forward_DCT processes a complete horizontal row of DCT blocks.
	 */
	for (block_row = 0; block_row < block_rows; block_row++) {
	  thisblockrow = buffer[block_row];
	  (*cinfo->fdct->forward_DCT) (cinfo, compptr,
				   input_buf[ci], thisblockrow,
				   (JDIMENSION) (block_row * DCTSIZE),
				   (JDIMENSION) 0, blocks_across);
	  if (ndummy > 0) {
	/* Create dummy blocks at the right edge of the image. */
	thisblockrow += blocks_across; /* => first dummy block */
	jzero_far((void FAR *) thisblockrow, ndummy * SIZEOF(JBLOCK));
	lastDC = thisblockrow[-1][0];
	for (bi = 0; bi < ndummy; bi++) {
	  thisblockrow[bi][0] = lastDC;
	}
	  }
	}
	/* If at end of image, create dummy block rows as needed.
	 * The tricky part here is that within each MCU, we want the DC values
	 * of the dummy blocks to match the last real block's DC value.
	 * This squeezes a few more bytes out of the resulting file...
	 */
	if (coef->iMCU_row_num == last_iMCU_row) {
	  blocks_across += ndummy;	/* include lower right corner */
	  MCUs_across = blocks_across / h_samp_factor;
	  for (block_row = block_rows; block_row < compptr->v_samp_factor;
	   block_row++) {
	thisblockrow = buffer[block_row];
	lastblockrow = buffer[block_row-1];
	jzero_far((void FAR *) thisblockrow,
		  (size_t) (blocks_across * SIZEOF(JBLOCK)));
	for (MCUindex = 0; MCUindex < MCUs_across; MCUindex++) {
	  lastDC = lastblockrow[h_samp_factor-1][0];
	  for (bi = 0; bi < h_samp_factor; bi++) {
	    thisblockrow[bi][0] = lastDC;
	  }
	  thisblockrow += h_samp_factor; /* advance to next MCU in row */
	  lastblockrow += h_samp_factor;
	}
	  }
	}
  }
  /* NB: compress_output will increment iMCU_row_num if successful.
   * A suspension return will result in redoing all the work above next time.
   */

  /* Emit data to the entropy encoder, sharing code with subsequent passes */
  return compress_output(cinfo, input_buf);
}

/*
 * Process some data in subsequent passes of a multi-pass case.
 * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the scan.
 * The data is obtained from the virtual arrays and fed to the entropy coder.
 * Returns TRUE if the iMCU row is completed, FALSE if suspended.
 *
 * NB: input_buf is ignored; it is likely to be a NULL pointer.
 */

METHODDEF(boolean)
compress_output (j_compress_ptr cinfo, JSAMPIMAGE)
{
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  int blkn, ci, xindex, yindex, yoffset;
  JDIMENSION start_col;
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan.
   * NB: during first pass, this is safe only because the buffers will
   * already be aligned properly, so jmemmgr.c won't need to do any I/O.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	buffer[ci] = (*cinfo->mem->access_virt_barray)
	  ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
	   coef->iMCU_row_num * compptr->v_samp_factor,
	   (JDIMENSION) compptr->v_samp_factor, FALSE);
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
	   yoffset++) {
	for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
	 MCU_col_num++) {
	  /* Construct list of pointers to DCT blocks belonging to this MCU */
	  blkn = 0;			/* index of current DCT block within MCU */
	  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
	  }
	}
	  }
	  /* Try to write the MCU. */
	  if (! (*cinfo->entropy->encode_mcu) (cinfo, coef->MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->mcu_ctr = MCU_col_num;
	return FALSE;
	  }
	}
	/* Completed an MCU row, but perhaps not an iMCU row */
	coef->mcu_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  coef->iMCU_row_num++;
  start_iMCU_row(cinfo);
  return TRUE;
}

#endif /* FULL_COEF_BUFFER_SUPPORTED */

/*
 * Initialize coefficient buffer controller.
 */

GLOBAL(void)
jinit_c_coef_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr coef;

  coef = (my_coef_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_c_coef_controller *) coef;
  coef->pub.start_pass = start_pass_coef;

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
#ifdef FULL_COEF_BUFFER_SUPPORTED
	/* Allocate a full-image virtual array for each component, */
	/* padded to a multiple of samp_factor DCT blocks in each direction. */
	int ci;
	jpeg_component_info *compptr;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
	  coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) compptr->v_samp_factor);
	}
#else
	ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
  } else {
	/* We only need a single-MCU buffer. */
	JBLOCKROW buffer;
	int i;

	buffer = (JBLOCKROW)
	  (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
	for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
	  coef->MCU_buffer[i] = buffer + i;
	}
	coef->whole_image[0] = NULL; /* flag for no virtual arrays */
  }
}

/*** End of inlined file: jccoefct.c ***/


/*** Start of inlined file: jccolor.c ***/
#define JPEG_INTERNALS

/* Private subobject */

typedef struct {
  struct jpeg_color_converter pub; /* public fields */

  /* Private state for RGB->YCC conversion */
  INT32 * rgb_ycc_tab;		/* => table for RGB to YCbCr conversion */
} my_color_converter;

typedef my_color_converter * my_cconvert_ptr;

/**************** RGB -> YCbCr conversion: most common case **************/

/*
 * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
 * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
 * The conversion equations to be implemented are therefore
 *	Y  =  0.29900 * R + 0.58700 * G + 0.11400 * B
 *	Cb = -0.16874 * R - 0.33126 * G + 0.50000 * B  + CENTERJSAMPLE
 *	Cr =  0.50000 * R - 0.41869 * G - 0.08131 * B  + CENTERJSAMPLE
 * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
 * Note: older versions of the IJG code used a zero offset of MAXJSAMPLE/2,
 * rather than CENTERJSAMPLE, for Cb and Cr.  This gave equal positive and
 * negative swings for Cb/Cr, but meant that grayscale values (Cb=Cr=0)
 * were not represented exactly.  Now we sacrifice exact representation of
 * maximum red and maximum blue in order to get exact grayscales.
 *
 * To avoid floating-point arithmetic, we represent the fractional constants
 * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
 * the products by 2^16, with appropriate rounding, to get the correct answer.
 *
 * For even more speed, we avoid doing any multiplications in the inner loop
 * by precalculating the constants times R,G,B for all possible values.
 * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
 * for 12-bit samples it is still acceptable.  It's not very reasonable for
 * 16-bit samples, but if you want lossless storage you shouldn't be changing
 * colorspace anyway.
 * The CENTERJSAMPLE offsets and the rounding fudge-factor of 0.5 are included
 * in the tables to save adding them separately in the inner loop.
 */

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define CBCR_OFFSET	((INT32) CENTERJSAMPLE << SCALEBITS)
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))

/* We allocate one big table and divide it up into eight parts, instead of
 * doing eight alloc_small requests.  This lets us use a single table base
 * address, which can be held in a register in the inner loops on many
 * machines (more than can hold all eight addresses, anyway).
 */

#define R_Y_OFF		0			/* offset to R => Y section */
#define G_Y_OFF		(1*(MAXJSAMPLE+1))	/* offset to G => Y section */
#define B_Y_OFF		(2*(MAXJSAMPLE+1))	/* etc. */
#define R_CB_OFF	(3*(MAXJSAMPLE+1))
#define G_CB_OFF	(4*(MAXJSAMPLE+1))
#define B_CB_OFF	(5*(MAXJSAMPLE+1))
#define R_CR_OFF	B_CB_OFF		/* B=>Cb, R=>Cr are the same */
#define G_CR_OFF	(6*(MAXJSAMPLE+1))
#define B_CR_OFF	(7*(MAXJSAMPLE+1))
#define TABLE_SIZE	(8*(MAXJSAMPLE+1))

/*
 * Initialize for RGB->YCC colorspace conversion.
 */

METHODDEF(void)
rgb_ycc_start (j_compress_ptr cinfo)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  INT32 * rgb_ycc_tab;
  INT32 i;

  /* Allocate and fill in the conversion tables. */
  cconvert->rgb_ycc_tab = rgb_ycc_tab = (INT32 *)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(TABLE_SIZE * SIZEOF(INT32)));

  for (i = 0; i <= MAXJSAMPLE; i++) {
	rgb_ycc_tab[i+R_Y_OFF] = FIX(0.29900) * i;
	rgb_ycc_tab[i+G_Y_OFF] = FIX(0.58700) * i;
	rgb_ycc_tab[i+B_Y_OFF] = FIX(0.11400) * i     + ONE_HALF;
	rgb_ycc_tab[i+R_CB_OFF] = (-FIX(0.16874)) * i;
	rgb_ycc_tab[i+G_CB_OFF] = (-FIX(0.33126)) * i;
	/* We use a rounding fudge-factor of 0.5-epsilon for Cb and Cr.
	 * This ensures that the maximum output will round to MAXJSAMPLE
	 * not MAXJSAMPLE+1, and thus that we don't have to range-limit.
	 */
	rgb_ycc_tab[i+B_CB_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
/*  B=>Cb and R=>Cr tables are the same
	rgb_ycc_tab[i+R_CR_OFF] = FIX(0.50000) * i    + CBCR_OFFSET + ONE_HALF-1;
*/
	rgb_ycc_tab[i+G_CR_OFF] = (-FIX(0.41869)) * i;
	rgb_ycc_tab[i+B_CR_OFF] = (-FIX(0.08131)) * i;
  }
}

/*
 * Convert some rows of samples to the JPEG colorspace.
 *
 * Note that we change from the application's interleaved-pixel format
 * to our internal noninterleaved, one-plane-per-component format.
 * The input buffer is therefore three times as wide as the output buffer.
 *
 * A starting row offset is provided only for the output buffer.  The caller
 * can easily adjust the passed input_buf value to accommodate any row
 * offset required on that side.
 */

METHODDEF(void)
rgb_ycc_convert (j_compress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		 JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
	inptr = *input_buf++;
	outptr0 = output_buf[0][output_row];
	outptr1 = output_buf[1][output_row];
	outptr2 = output_buf[2][output_row];
	output_row++;
	for (col = 0; col < num_cols; col++) {
	  r = GETJSAMPLE(inptr[RGB_RED]);
	  g = GETJSAMPLE(inptr[RGB_GREEN]);
	  b = GETJSAMPLE(inptr[RGB_BLUE]);
	  inptr += RGB_PIXELSIZE;
	  /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
	   * must be too; we do not need an explicit range-limiting operation.
	   * Hence the value being shifted is never negative, and we don't
	   * need the general RIGHT_SHIFT macro.
	   */
	  /* Y */
	  outptr0[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
	  /* Cb */
	  outptr1[col] = (JSAMPLE)
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
		 >> SCALEBITS);
	  /* Cr */
	  outptr2[col] = (JSAMPLE)
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
		 >> SCALEBITS);
	}
  }
}

/**************** Cases other than RGB -> YCbCr **************/

/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles RGB->grayscale conversion, which is the same
 * as the RGB->Y portion of RGB->YCbCr.
 * We assume rgb_ycc_start has been called (we only use the Y tables).
 */

METHODDEF(void)
rgb_gray_convert (j_compress_ptr cinfo,
		  JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		  JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
	inptr = *input_buf++;
	outptr = output_buf[0][output_row];
	output_row++;
	for (col = 0; col < num_cols; col++) {
	  r = GETJSAMPLE(inptr[RGB_RED]);
	  g = GETJSAMPLE(inptr[RGB_GREEN]);
	  b = GETJSAMPLE(inptr[RGB_BLUE]);
	  inptr += RGB_PIXELSIZE;
	  /* Y */
	  outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
	}
  }
}

/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles Adobe-style CMYK->YCCK conversion,
 * where we convert R=1-C, G=1-M, and B=1-Y to YCbCr using the same
 * conversion as above, while passing K (black) unchanged.
 * We assume rgb_ycc_start has been called.
 */

METHODDEF(void)
cmyk_ycck_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_ycc_tab;
  register JSAMPROW inptr;
  register JSAMPROW outptr0, outptr1, outptr2, outptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
	inptr = *input_buf++;
	outptr0 = output_buf[0][output_row];
	outptr1 = output_buf[1][output_row];
	outptr2 = output_buf[2][output_row];
	outptr3 = output_buf[3][output_row];
	output_row++;
	for (col = 0; col < num_cols; col++) {
	  r = MAXJSAMPLE - GETJSAMPLE(inptr[0]);
	  g = MAXJSAMPLE - GETJSAMPLE(inptr[1]);
	  b = MAXJSAMPLE - GETJSAMPLE(inptr[2]);
	  /* K passes through as-is */
	  outptr3[col] = inptr[3];	/* don't need GETJSAMPLE here */
	  inptr += 4;
	  /* If the inputs are 0..MAXJSAMPLE, the outputs of these equations
	   * must be too; we do not need an explicit range-limiting operation.
	   * Hence the value being shifted is never negative, and we don't
	   * need the general RIGHT_SHIFT macro.
	   */
	  /* Y */
	  outptr0[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
		 >> SCALEBITS);
	  /* Cb */
	  outptr1[col] = (JSAMPLE)
		((ctab[r+R_CB_OFF] + ctab[g+G_CB_OFF] + ctab[b+B_CB_OFF])
		 >> SCALEBITS);
	  /* Cr */
	  outptr2[col] = (JSAMPLE)
		((ctab[r+R_CR_OFF] + ctab[g+G_CR_OFF] + ctab[b+B_CR_OFF])
		 >> SCALEBITS);
	}
  }
}

/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles grayscale output with no conversion.
 * The source can be either plain grayscale or YCbCr (since Y == gray).
 */

METHODDEF(void)
grayscale_convert (j_compress_ptr cinfo,
		   JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
		   JDIMENSION output_row, int num_rows)
{
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->image_width;
  int instride = cinfo->input_components;

  while (--num_rows >= 0) {
	inptr = *input_buf++;
	outptr = output_buf[0][output_row];
	output_row++;
	for (col = 0; col < num_cols; col++) {
	  outptr[col] = inptr[0];	/* don't need GETJSAMPLE() here */
	  inptr += instride;
	}
  }
}

/*
 * Convert some rows of samples to the JPEG colorspace.
 * This version handles multi-component colorspaces without conversion.
 * We assume input_components == num_components.
 */

METHODDEF(void)
null_convert (j_compress_ptr cinfo,
	      JSAMPARRAY input_buf, JSAMPIMAGE output_buf,
	      JDIMENSION output_row, int num_rows)
{
  register JSAMPROW inptr;
  register JSAMPROW outptr;
  register JDIMENSION col;
  register int ci;
  int nc = cinfo->num_components;
  JDIMENSION num_cols = cinfo->image_width;

  while (--num_rows >= 0) {
	/* It seems fastest to make a separate pass for each component. */
	for (ci = 0; ci < nc; ci++) {
	  inptr = *input_buf;
	  outptr = output_buf[ci][output_row];
	  for (col = 0; col < num_cols; col++) {
	outptr[col] = inptr[ci]; /* don't need GETJSAMPLE() here */
	inptr += nc;
	  }
	}
	input_buf++;
	output_row++;
  }
}

/*
 * Empty method for start_pass.
 */

METHODDEF(void)
null_method (j_compress_ptr)
{
  /* no work needed */
}

/*
 * Module initialization routine for input colorspace conversion.
 */

GLOBAL(void)
jinit_color_converter (j_compress_ptr cinfo)
{
  my_cconvert_ptr cconvert;

  cconvert = (my_cconvert_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_color_converter));
  cinfo->cconvert = (struct jpeg_color_converter *) cconvert;
  /* set start_pass to null method until we find out differently */
  cconvert->pub.start_pass = null_method;

  /* Make sure input_components agrees with in_color_space */
  switch (cinfo->in_color_space) {
  case JCS_GRAYSCALE:
	if (cinfo->input_components != 1)
	  ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
	break;

  case JCS_RGB:
#if RGB_PIXELSIZE != 3
	if (cinfo->input_components != RGB_PIXELSIZE)
	  ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
	break;
#endif /* else share code with YCbCr */

  case JCS_YCbCr:
	if (cinfo->input_components != 3)
	  ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
	break;

  case JCS_CMYK:
  case JCS_YCCK:
	if (cinfo->input_components != 4)
	  ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
	break;

  default:			/* JCS_UNKNOWN can be anything */
	if (cinfo->input_components < 1)
	  ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
	break;
  }

  /* Check num_components, set conversion method based on requested space */
  switch (cinfo->jpeg_color_space) {
  case JCS_GRAYSCALE:
	if (cinfo->num_components != 1)
	  ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
	if (cinfo->in_color_space == JCS_GRAYSCALE)
	  cconvert->pub.color_convert = grayscale_convert;
	else if (cinfo->in_color_space == JCS_RGB) {
	  cconvert->pub.start_pass = rgb_ycc_start;
	  cconvert->pub.color_convert = rgb_gray_convert;
	} else if (cinfo->in_color_space == JCS_YCbCr)
	  cconvert->pub.color_convert = grayscale_convert;
	else
	  ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
	break;

  case JCS_RGB:
	if (cinfo->num_components != 3)
	  ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
	if (cinfo->in_color_space == JCS_RGB && RGB_PIXELSIZE == 3)
	  cconvert->pub.color_convert = null_convert;
	else
	  ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
	break;

  case JCS_YCbCr:
	if (cinfo->num_components != 3)
	  ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
	if (cinfo->in_color_space == JCS_RGB) {
	  cconvert->pub.start_pass = rgb_ycc_start;
	  cconvert->pub.color_convert = rgb_ycc_convert;
	} else if (cinfo->in_color_space == JCS_YCbCr)
	  cconvert->pub.color_convert = null_convert;
	else
	  ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
	break;

  case JCS_CMYK:
	if (cinfo->num_components != 4)
	  ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
	if (cinfo->in_color_space == JCS_CMYK)
	  cconvert->pub.color_convert = null_convert;
	else
	  ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
	break;

  case JCS_YCCK:
	if (cinfo->num_components != 4)
	  ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
	if (cinfo->in_color_space == JCS_CMYK) {
	  cconvert->pub.start_pass = rgb_ycc_start;
	  cconvert->pub.color_convert = cmyk_ycck_convert;
	} else if (cinfo->in_color_space == JCS_YCCK)
	  cconvert->pub.color_convert = null_convert;
	else
	  ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
	break;

  default:			/* allow null conversion of JCS_UNKNOWN */
	if (cinfo->jpeg_color_space != cinfo->in_color_space ||
	cinfo->num_components != cinfo->input_components)
	  ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
	cconvert->pub.color_convert = null_convert;
	break;
  }
}

/*** End of inlined file: jccolor.c ***/

	#undef FIX

/*** Start of inlined file: jcdctmgr.c ***/
#define JPEG_INTERNALS


/*** Start of inlined file: jdct.h ***/
/*
 * A forward DCT routine is given a pointer to a work area of type DCTELEM[];
 * the DCT is to be performed in-place in that buffer.  Type DCTELEM is int
 * for 8-bit samples, INT32 for 12-bit samples.  (NOTE: Floating-point DCT
 * implementations use an array of type FAST_FLOAT, instead.)
 * The DCT inputs are expected to be signed (range +-CENTERJSAMPLE).
 * The DCT outputs are returned scaled up by a factor of 8; they therefore
 * have a range of +-8K for 8-bit data, +-128K for 12-bit data.  This
 * convention improves accuracy in integer implementations and saves some
 * work in floating-point ones.
 * Quantization of the output coefficients is done by jcdctmgr.c.
 */

#ifndef __jdct_h__
#define __jdct_h__

#if BITS_IN_JSAMPLE == 8
typedef int DCTELEM;		/* 16 or 32 bits is fine */
#else
typedef INT32 DCTELEM;		/* must have 32 bits */
#endif

typedef JMETHOD(void, forward_DCT_method_ptr, (DCTELEM * data));
typedef JMETHOD(void, float_DCT_method_ptr, (FAST_FLOAT * data));

/*
 * An inverse DCT routine is given a pointer to the input JBLOCK and a pointer
 * to an output sample array.  The routine must dequantize the input data as
 * well as perform the IDCT; for dequantization, it uses the multiplier table
 * pointed to by compptr->dct_table.  The output data is to be placed into the
 * sample array starting at a specified column.  (Any row offset needed will
 * be applied to the array pointer before it is passed to the IDCT code.)
 * Note that the number of samples emitted by the IDCT routine is
 * DCT_scaled_size * DCT_scaled_size.
 */

/* typedef inverse_DCT_method_ptr is declared in jpegint.h */

/*
 * Each IDCT routine has its own ideas about the best dct_table element type.
 */

typedef MULTIPLIER ISLOW_MULT_TYPE; /* short or int, whichever is faster */
#if BITS_IN_JSAMPLE == 8
typedef MULTIPLIER IFAST_MULT_TYPE; /* 16 bits is OK, use short if faster */
#define IFAST_SCALE_BITS  2	/* fractional bits in scale factors */
#else
typedef INT32 IFAST_MULT_TYPE;	/* need 32 bits for scaled quantizers */
#define IFAST_SCALE_BITS  13	/* fractional bits in scale factors */
#endif
typedef FAST_FLOAT FLOAT_MULT_TYPE; /* preferred floating type */

/*
 * Each IDCT routine is responsible for range-limiting its results and
 * converting them to unsigned form (0..MAXJSAMPLE).  The raw outputs could
 * be quite far out of range if the input data is corrupt, so a bulletproof
 * range-limiting step is required.  We use a mask-and-table-lookup method
 * to do the combined operations quickly.  See the comments with
 * prepare_range_limit_table (in jdmaster.c) for more info.
 */

#define IDCT_range_limit(cinfo)  ((cinfo)->sample_range_limit + CENTERJSAMPLE)

#define RANGE_MASK  (MAXJSAMPLE * 4 + 3) /* 2 bits wider than legal samples */

/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_fdct_islow		jFDislow
#define jpeg_fdct_ifast		jFDifast
#define jpeg_fdct_float		jFDfloat
#define jpeg_idct_islow		jRDislow
#define jpeg_idct_ifast		jRDifast
#define jpeg_idct_float		jRDfloat
#define jpeg_idct_4x4		jRD4x4
#define jpeg_idct_2x2		jRD2x2
#define jpeg_idct_1x1		jRD1x1
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/* Extern declarations for the forward and inverse DCT routines. */

EXTERN(void) jpeg_fdct_islow JPP((DCTELEM * data));
EXTERN(void) jpeg_fdct_ifast JPP((DCTELEM * data));
EXTERN(void) jpeg_fdct_float JPP((FAST_FLOAT * data));

EXTERN(void) jpeg_idct_islow
	JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_ifast
	JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_float
	JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_4x4
	JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_2x2
	JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));
EXTERN(void) jpeg_idct_1x1
	JPP((j_decompress_ptr cinfo, jpeg_component_info * compptr,
	 JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col));

/*
 * Macros for handling fixed-point arithmetic; these are used by many
 * but not all of the DCT/IDCT modules.
 *
 * All values are expected to be of type INT32.
 * Fractional constants are scaled left by CONST_BITS bits.
 * CONST_BITS is defined within each module using these macros,
 * and may differ from one module to the next.
 */

#define ONE	((INT32) 1)
#define CONST_SCALE (ONE << CONST_BITS)

/* Convert a positive real constant to an integer scaled by CONST_SCALE.
 * Caution: some C compilers fail to reduce "FIX(constant)" at compile time,
 * thus causing a lot of useless floating-point operations at run time.
 */

#define FIX(x)	((INT32) ((x) * CONST_SCALE + 0.5))

/* Descale and correctly round an INT32 value that's scaled by N bits.
 * We assume RIGHT_SHIFT rounds towards minus infinity, so adding
 * the fudge factor is correct for either sign of X.
 */

#define DESCALE(x,n)  RIGHT_SHIFT((x) + (ONE << ((n)-1)), n)

/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * This macro is used only when the two inputs will actually be no more than
 * 16 bits wide, so that a 16x16->32 bit multiply can be used instead of a
 * full 32x32 multiply.  This provides a useful speedup on many machines.
 * Unfortunately there is no way to specify a 16x16->32 multiply portably
 * in C, but some C compilers will do the right thing if you provide the
 * correct combination of casts.
 */

#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT16) (const)))
#endif
#ifdef SHORTxLCONST_32		/* known to work with Microsoft C 6.0 */
#define MULTIPLY16C16(var,const)  (((INT16) (var)) * ((INT32) (const)))
#endif

#ifndef MULTIPLY16C16		/* default definition */
#define MULTIPLY16C16(var,const)  ((var) * (const))
#endif

/* Same except both inputs are variables. */

#ifdef SHORTxSHORT_32		/* may work if 'int' is 32 bits */
#define MULTIPLY16V16(var1,var2)  (((INT16) (var1)) * ((INT16) (var2)))
#endif

#ifndef MULTIPLY16V16		/* default definition */
#define MULTIPLY16V16(var1,var2)  ((var1) * (var2))
#endif

#endif

/*** End of inlined file: jdct.h ***/

/* Private subobject for this module */

typedef struct {
  struct jpeg_forward_dct pub;	/* public fields */

  /* Pointer to the DCT routine actually in use */
  forward_DCT_method_ptr do_dct;

  /* The actual post-DCT divisors --- not identical to the quant table
   * entries, because of scaling (especially for an unnormalized DCT).
   * Each table is given in normal array order.
   */
  DCTELEM * divisors[NUM_QUANT_TBLS];

#ifdef DCT_FLOAT_SUPPORTED
  /* Same as above for the floating-point case. */
  float_DCT_method_ptr do_float_dct;
  FAST_FLOAT * float_divisors[NUM_QUANT_TBLS];
#endif
} my_fdct_controller;

typedef my_fdct_controller * my_fdct_ptr;

/*
 * Initialize for a processing pass.
 * Verify that all referenced Q-tables are present, and set up
 * the divisor table for each one.
 * In the current implementation, DCT of all components is done during
 * the first pass, even if only some components will be output in the
 * first scan.  Hence all components should be examined here.
 */

METHODDEF(void)
start_pass_fdctmgr (j_compress_ptr cinfo)
{
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  int ci, qtblno, i;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;
  DCTELEM * dtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	qtblno = compptr->quant_tbl_no;
	/* Make sure specified quantization table is present */
	if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
	  ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
	qtbl = cinfo->quant_tbl_ptrs[qtblno];
	/* Compute divisors for this quant table */
	/* We may do this more than once for same table, but it's not a big deal */
	switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
	case JDCT_ISLOW:
	  /* For LL&M IDCT method, divisors are equal to raw quantization
	   * coefficients multiplied by 8 (to counteract scaling).
	   */
	  if (fdct->divisors[qtblno] == NULL) {
	fdct->divisors[qtblno] = (DCTELEM *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      DCTSIZE2 * SIZEOF(DCTELEM));
	  }
	  dtbl = fdct->divisors[qtblno];
	  for (i = 0; i < DCTSIZE2; i++) {
	dtbl[i] = ((DCTELEM) qtbl->quantval[i]) << 3;
	  }
	  break;
#endif
#ifdef DCT_IFAST_SUPPORTED
	case JDCT_IFAST:
	  {
	/* For AA&N IDCT method, divisors are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * We apply a further scale factor of 8.
	 */
#define CONST_BITS 14
	static const INT16 aanscales[DCTSIZE2] = {
	  /* precomputed values scaled up by 14 bits */
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	if (fdct->divisors[qtblno] == NULL) {
	  fdct->divisors[qtblno] = (DCTELEM *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
					DCTSIZE2 * SIZEOF(DCTELEM));
	}
	dtbl = fdct->divisors[qtblno];
	for (i = 0; i < DCTSIZE2; i++) {
	  dtbl[i] = (DCTELEM)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
				  (INT32) aanscales[i]),
		    CONST_BITS-3);
	}
	  }
	  break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
	case JDCT_FLOAT:
	  {
	/* For float AA&N IDCT method, divisors are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * We apply a further scale factor of 8.
	 * What's actually stored is 1/divisor so that the inner loop can
	 * use a multiplication rather than a division.
	 */
	FAST_FLOAT * fdtbl;
	int row, col;
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	if (fdct->float_divisors[qtblno] == NULL) {
	  fdct->float_divisors[qtblno] = (FAST_FLOAT *)
	    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
					DCTSIZE2 * SIZEOF(FAST_FLOAT));
	}
	fdtbl = fdct->float_divisors[qtblno];
	i = 0;
	for (row = 0; row < DCTSIZE; row++) {
	  for (col = 0; col < DCTSIZE; col++) {
	    fdtbl[i] = (FAST_FLOAT)
	      (1.0 / (((double) qtbl->quantval[i] *
		       aanscalefactor[row] * aanscalefactor[col] * 8.0)));
	    i++;
	  }
	}
	  }
	  break;
#endif
	default:
	  ERREXIT(cinfo, JERR_NOT_COMPILED);
	  break;
	}
  }
}

/*
 * Perform forward DCT on one or more blocks of a component.
 *
 * The input samples are taken from the sample_data[] array starting at
 * position start_row/start_col, and moving to the right for any additional
 * blocks. The quantized coefficients are returned in coef_blocks[].
 */

METHODDEF(void)
forward_DCT (j_compress_ptr cinfo, jpeg_component_info * compptr,
	     JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
	     JDIMENSION start_row, JDIMENSION start_col,
	     JDIMENSION num_blocks)
/* This version is used for integer DCT implementations. */
{
  /* This routine is heavily used, so it's worth coding it tightly. */
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  forward_DCT_method_ptr do_dct = fdct->do_dct;
  DCTELEM * divisors = fdct->divisors[compptr->quant_tbl_no];
  DCTELEM workspace[DCTSIZE2];	/* work area for FDCT subroutine */
  JDIMENSION bi;

  sample_data += start_row;	/* fold in the vertical offset once */

  for (bi = 0; bi < num_blocks; bi++, start_col += DCTSIZE) {
	/* Load data into workspace, applying unsigned->signed conversion */
	{ register DCTELEM *workspaceptr;
	  register JSAMPROW elemptr;
	  register int elemr;

	  workspaceptr = workspace;
	  for (elemr = 0; elemr < DCTSIZE; elemr++) {
	elemptr = sample_data[elemr] + start_col;
#if DCTSIZE == 8		/* unroll the inner loop */
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	*workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
#else
	{ register int elemc;
	  for (elemc = DCTSIZE; elemc > 0; elemc--) {
	    *workspaceptr++ = GETJSAMPLE(*elemptr++) - CENTERJSAMPLE;
	  }
	}
#endif
	  }
	}

	/* Perform the DCT */
	(*do_dct) (workspace);

	/* Quantize/descale the coefficients, and store into coef_blocks[] */
	{ register DCTELEM temp, qval;
	  register int i;
	  register JCOEFPTR output_ptr = coef_blocks[bi];

	  for (i = 0; i < DCTSIZE2; i++) {
	qval = divisors[i];
	temp = workspace[i];
	/* Divide the coefficient value by qval, ensuring proper rounding.
	 * Since C does not specify the direction of rounding for negative
	 * quotients, we have to force the dividend positive for portability.
	 *
	 * In most files, at least half of the output values will be zero
	 * (at default quantization settings, more like three-quarters...)
	 * so we should ensure that this case is fast.  On many machines,
	 * a comparison is enough cheaper than a divide to make a special test
	 * a win.  Since both inputs will be nonnegative, we need only test
	 * for a < b to discover whether a/b is 0.
	 * If your machine's division is fast enough, define FAST_DIVIDE.
	 */
#ifdef FAST_DIVIDE
#define DIVIDE_BY(a,b)	a /= b
#else
#define DIVIDE_BY(a,b)	if (a >= b) a /= b; else a = 0
#endif
	if (temp < 0) {
	  temp = -temp;
	  temp += qval>>1;	/* for rounding */
	  DIVIDE_BY(temp, qval);
	  temp = -temp;
	} else {
	  temp += qval>>1;	/* for rounding */
	  DIVIDE_BY(temp, qval);
	}
	output_ptr[i] = (JCOEF) temp;
	  }
	}
  }
}

#ifdef DCT_FLOAT_SUPPORTED

METHODDEF(void)
forward_DCT_float (j_compress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY sample_data, JBLOCKROW coef_blocks,
		   JDIMENSION start_row, JDIMENSION start_col,
		   JDIMENSION num_blocks)
/* This version is used for floating-point DCT implementations. */
{
  /* This routine is heavily used, so it's worth coding it tightly. */
  my_fdct_ptr fdct = (my_fdct_ptr) cinfo->fdct;
  float_DCT_method_ptr do_dct = fdct->do_float_dct;
  FAST_FLOAT * divisors = fdct->float_divisors[compptr->quant_tbl_no];
  FAST_FLOAT workspace[DCTSIZE2]; /* work area for FDCT subroutine */
  JDIMENSION bi;

  sample_data += start_row;	/* fold in the vertical offset once */

  for (bi = 0; bi < num_blocks; bi++, start_col += DCTSIZE) {
	/* Load data into workspace, applying unsigned->signed conversion */
	{ register FAST_FLOAT *workspaceptr;
	  register JSAMPROW elemptr;
	  register int elemr;

	  workspaceptr = workspace;
	  for (elemr = 0; elemr < DCTSIZE; elemr++) {
	elemptr = sample_data[elemr] + start_col;
#if DCTSIZE == 8		/* unroll the inner loop */
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	*workspaceptr++ = (FAST_FLOAT)(GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
#else
	{ register int elemc;
	  for (elemc = DCTSIZE; elemc > 0; elemc--) {
	    *workspaceptr++ = (FAST_FLOAT)
	      (GETJSAMPLE(*elemptr++) - CENTERJSAMPLE);
	  }
	}
#endif
	  }
	}

	/* Perform the DCT */
	(*do_dct) (workspace);

	/* Quantize/descale the coefficients, and store into coef_blocks[] */
	{ register FAST_FLOAT temp;
	  register int i;
	  register JCOEFPTR output_ptr = coef_blocks[bi];

	  for (i = 0; i < DCTSIZE2; i++) {
	/* Apply the quantization and scaling factor */
	temp = workspace[i] * divisors[i];
	/* Round to nearest integer.
	 * Since C does not specify the direction of rounding for negative
	 * quotients, we have to force the dividend positive for portability.
	 * The maximum coefficient size is +-16K (for 12-bit data), so this
	 * code should work for either 16-bit or 32-bit ints.
	 */
	output_ptr[i] = (JCOEF) ((int) (temp + (FAST_FLOAT) 16384.5) - 16384);
	  }
	}
  }
}

#endif /* DCT_FLOAT_SUPPORTED */

/*
 * Initialize FDCT manager.
 */

GLOBAL(void)
jinit_forward_dct (j_compress_ptr cinfo)
{
  my_fdct_ptr fdct;
  int i;

  fdct = (my_fdct_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_fdct_controller));
  cinfo->fdct = (struct jpeg_forward_dct *) fdct;
  fdct->pub.start_pass = start_pass_fdctmgr;

  switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
  case JDCT_ISLOW:
	fdct->pub.forward_DCT = forward_DCT;
	fdct->do_dct = jpeg_fdct_islow;
	break;
#endif
#ifdef DCT_IFAST_SUPPORTED
  case JDCT_IFAST:
	fdct->pub.forward_DCT = forward_DCT;
	fdct->do_dct = jpeg_fdct_ifast;
	break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
  case JDCT_FLOAT:
	fdct->pub.forward_DCT = forward_DCT_float;
	fdct->do_float_dct = jpeg_fdct_float;
	break;
#endif
  default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
	break;
  }

  /* Mark divisor tables unallocated */
  for (i = 0; i < NUM_QUANT_TBLS; i++) {
	fdct->divisors[i] = NULL;
#ifdef DCT_FLOAT_SUPPORTED
	fdct->float_divisors[i] = NULL;
#endif
  }
}

/*** End of inlined file: jcdctmgr.c ***/


	#undef CONST_BITS

/*** Start of inlined file: jchuff.c ***/
#define JPEG_INTERNALS


/*** Start of inlined file: jchuff.h ***/
/* The legal range of a DCT coefficient is
 *  -1024 .. +1023  for 8-bit data;
 * -16384 .. +16383 for 12-bit data.
 * Hence the magnitude should always fit in 10 or 14 bits respectively.
 */

#ifndef _jchuff_h_
#define _jchuff_h_

#if BITS_IN_JSAMPLE == 8
#define MAX_COEF_BITS 10
#else
#define MAX_COEF_BITS 14
#endif

/* Derived data constructed for each Huffman table */

typedef struct {
  unsigned int ehufco[256];	/* code for each symbol */
  char ehufsi[256];		/* length of code for each symbol */
  /* If no code has been allocated for a symbol S, ehufsi[S] contains 0 */
} c_derived_tbl;

/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_make_c_derived_tbl	jMkCDerived
#define jpeg_gen_optimal_table	jGenOptTbl
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/* Expand a Huffman table definition into the derived format */
EXTERN(void) jpeg_make_c_derived_tbl
	JPP((j_compress_ptr cinfo, boolean isDC, int tblno,
	     c_derived_tbl ** pdtbl));

/* Generate an optimal table definition given the specified counts */
EXTERN(void) jpeg_gen_optimal_table
	JPP((j_compress_ptr cinfo, JHUFF_TBL * htbl, long freq[]));

#endif

/*** End of inlined file: jchuff.h ***/

/* Expanded entropy encoder object for Huffman encoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  INT32 put_buffer;		/* current bit-accumulation buffer */
  int put_bits;			/* # of bits now in it */
  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
} savable_state;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).put_buffer = (src).put_buffer, \
	 (dest).put_bits = (src).put_bits, \
	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif

typedef struct {
  struct jpeg_entropy_encoder pub; /* public fields */

  savable_state saved;		/* Bit buffer & DC state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */
  int next_restart_num;		/* next restart number to write (0-7) */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  c_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
  c_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];

#ifdef ENTROPY_OPT_SUPPORTED	/* Statistics tables for optimization */
  long * dc_count_ptrs[NUM_HUFF_TBLS];
  long * ac_count_ptrs[NUM_HUFF_TBLS];
#endif
} huff_entropy_encoder;

typedef huff_entropy_encoder * huff_entropy_ptr;

/* Working state while writing an MCU.
 * This struct contains all the fields that are needed by subroutines.
 */

typedef struct {
  JOCTET * next_output_byte;	/* => next byte to write in buffer */
  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
  savable_state cur;		/* Current bit buffer & DC state */
  j_compress_ptr cinfo;		/* dump_buffer needs access to this */
} working_state;

/* Forward declarations */
METHODDEF(boolean) encode_mcu_huff JPP((j_compress_ptr cinfo,
					JBLOCKROW *MCU_data));
METHODDEF(void) finish_pass_huff JPP((j_compress_ptr cinfo));
#ifdef ENTROPY_OPT_SUPPORTED
METHODDEF(boolean) encode_mcu_gather JPP((j_compress_ptr cinfo,
					  JBLOCKROW *MCU_data));
METHODDEF(void) finish_pass_gather JPP((j_compress_ptr cinfo));
#endif

/*
 * Initialize for a Huffman-compressed scan.
 * If gather_statistics is TRUE, we do not output anything during the scan,
 * just count the Huffman symbols used and generate Huffman code tables.
 */

METHODDEF(void)
start_pass_huff (j_compress_ptr cinfo, boolean gather_statistics)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, dctbl, actbl;
  jpeg_component_info * compptr;

  if (gather_statistics) {
#ifdef ENTROPY_OPT_SUPPORTED
	entropy->pub.encode_mcu = encode_mcu_gather;
	entropy->pub.finish_pass = finish_pass_gather;
#else
	ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
	entropy->pub.encode_mcu = encode_mcu_huff;
	entropy->pub.finish_pass = finish_pass_huff;
  }

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	dctbl = compptr->dc_tbl_no;
	actbl = compptr->ac_tbl_no;
	if (gather_statistics) {
#ifdef ENTROPY_OPT_SUPPORTED
	  /* Check for invalid table indexes */
	  /* (make_c_derived_tbl does this in the other path) */
	  if (dctbl < 0 || dctbl >= NUM_HUFF_TBLS)
	ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, dctbl);
	  if (actbl < 0 || actbl >= NUM_HUFF_TBLS)
	ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, actbl);
	  /* Allocate and zero the statistics tables */
	  /* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
	  if (entropy->dc_count_ptrs[dctbl] == NULL)
	entropy->dc_count_ptrs[dctbl] = (long *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      257 * SIZEOF(long));
	  MEMZERO(entropy->dc_count_ptrs[dctbl], 257 * SIZEOF(long));
	  if (entropy->ac_count_ptrs[actbl] == NULL)
	entropy->ac_count_ptrs[actbl] = (long *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      257 * SIZEOF(long));
	  MEMZERO(entropy->ac_count_ptrs[actbl], 257 * SIZEOF(long));
#endif
	} else {
	  /* Compute derived values for Huffman tables */
	  /* We may do this more than once for a table, but it's not expensive */
	  jpeg_make_c_derived_tbl(cinfo, TRUE, dctbl,
			      & entropy->dc_derived_tbls[dctbl]);
	  jpeg_make_c_derived_tbl(cinfo, FALSE, actbl,
			      & entropy->ac_derived_tbls[actbl]);
	}
	/* Initialize DC predictions to 0 */
	entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize bit buffer to empty */
  entropy->saved.put_buffer = 0;
  entropy->saved.put_bits = 0;

  /* Initialize restart stuff */
  entropy->restarts_to_go = cinfo->restart_interval;
  entropy->next_restart_num = 0;
}

/*
 * Compute the derived values for a Huffman table.
 * This routine also performs some validation checks on the table.
 *
 * Note this is also used by jcphuff.c.
 */

GLOBAL(void)
jpeg_make_c_derived_tbl (j_compress_ptr cinfo, boolean isDC, int tblno,
			 c_derived_tbl ** pdtbl)
{
  JHUFF_TBL *htbl;
  c_derived_tbl *dtbl;
  int p, i, l, lastp, si, maxsymbol;
  char huffsize[257];
  unsigned int huffcode[257];
  unsigned int code;

  /* Note that huffsize[] and huffcode[] are filled in code-length order,
   * paralleling the order of the symbols themselves in htbl->huffval[].
   */

  /* Find the input Huffman table */
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
	ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
  htbl =
	isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
  if (htbl == NULL)
	ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
	*pdtbl = (c_derived_tbl *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(c_derived_tbl));
  dtbl = *pdtbl;

  /* Figure C.1: make table of Huffman code length for each symbol */

  p = 0;
  for (l = 1; l <= 16; l++) {
	i = (int) htbl->bits[l];
	if (i < 0 || p + i > 256)	/* protect against table overrun */
	  ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
	while (i--)
	  huffsize[p++] = (char) l;
  }
  huffsize[p] = 0;
  lastp = p;

  /* Figure C.2: generate the codes themselves */
  /* We also validate that the counts represent a legal Huffman code tree. */

  code = 0;
  si = huffsize[0];
  p = 0;
  while (huffsize[p]) {
	while (((int) huffsize[p]) == si) {
	  huffcode[p++] = code;
	  code++;
	}
	/* code is now 1 more than the last code used for codelength si; but
	 * it must still fit in si bits, since no code is allowed to be all ones.
	 */
	if (((INT32) code) >= (((INT32) 1) << si))
	  ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
	code <<= 1;
	si++;
  }

  /* Figure C.3: generate encoding tables */
  /* These are code and size indexed by symbol value */

  /* Set all codeless symbols to have code length 0;
   * this lets us detect duplicate VAL entries here, and later
   * allows emit_bits to detect any attempt to emit such symbols.
   */
  MEMZERO(dtbl->ehufsi, SIZEOF(dtbl->ehufsi));

  /* This is also a convenient place to check for out-of-range
   * and duplicated VAL entries.  We allow 0..255 for AC symbols
   * but only 0..15 for DC.  (We could constrain them further
   * based on data depth and mode, but this seems enough.)
   */
  maxsymbol = isDC ? 15 : 255;

  for (p = 0; p < lastp; p++) {
	i = htbl->huffval[p];
	if (i < 0 || i > maxsymbol || dtbl->ehufsi[i])
	  ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
	dtbl->ehufco[i] = huffcode[p];
	dtbl->ehufsi[i] = huffsize[p];
  }
}

/* Outputting bytes to the file */

/* Emit a byte, taking 'action' if must suspend. */
#define emit_byte(state,val,action)  \
	{ *(state)->next_output_byte++ = (JOCTET) (val);  \
	  if (--(state)->free_in_buffer == 0)  \
	    if (! dump_buffer(state))  \
	      { action; } }

LOCAL(boolean)
dump_buffer (working_state * state)
/* Empty the output buffer; return TRUE if successful, FALSE if must suspend */
{
  struct jpeg_destination_mgr * dest = state->cinfo->dest;

  if (! (*dest->empty_output_buffer) (state->cinfo))
	return FALSE;
  /* After a successful buffer dump, must reset buffer pointers */
  state->next_output_byte = dest->next_output_byte;
  state->free_in_buffer = dest->free_in_buffer;
  return TRUE;
}

/* Outputting bits to the file */

/* Only the right 24 bits of put_buffer are used; the valid bits are
 * left-justified in this part.  At most 16 bits can be passed to emit_bits
 * in one call, and we never retain more than 7 bits in put_buffer
 * between calls, so 24 bits are sufficient.
 */

INLINE
LOCAL(boolean)
emit_bits (working_state * state, unsigned int code, int size)
/* Emit some bits; return TRUE if successful, FALSE if must suspend */
{
  /* This routine is heavily used, so it's worth coding tightly. */
  register INT32 put_buffer = (INT32) code;
  register int put_bits = state->cur.put_bits;

  /* if size is 0, caller used an invalid Huffman table entry */
  if (size == 0)
	ERREXIT(state->cinfo, JERR_HUFF_MISSING_CODE);

  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */

  put_bits += size;		/* new number of bits in buffer */

  put_buffer <<= 24 - put_bits; /* align incoming bits */

  put_buffer |= state->cur.put_buffer; /* and merge with old buffer contents */

  while (put_bits >= 8) {
	int c = (int) ((put_buffer >> 16) & 0xFF);

	emit_byte(state, c, return FALSE);
	if (c == 0xFF) {		/* need to stuff a zero byte? */
	  emit_byte(state, 0, return FALSE);
	}
	put_buffer <<= 8;
	put_bits -= 8;
  }

  state->cur.put_buffer = put_buffer; /* update state variables */
  state->cur.put_bits = put_bits;

  return TRUE;
}

LOCAL(boolean)
flush_bits (working_state * state)
{
  if (! emit_bits(state, 0x7F, 7)) /* fill any partial byte with ones */
	return FALSE;
  state->cur.put_buffer = 0;	/* and reset bit-buffer to empty */
  state->cur.put_bits = 0;
  return TRUE;
}

/* Encode a single block's worth of coefficients */

LOCAL(boolean)
encode_one_block (working_state * state, JCOEFPTR block, int last_dc_val,
		  c_derived_tbl *dctbl, c_derived_tbl *actbl)
{
  register int temp, temp2;
  register int nbits;
  register int k, r, i;

  /* Encode the DC coefficient difference per section F.1.2.1 */

  temp = temp2 = block[0] - last_dc_val;

  if (temp < 0) {
	temp = -temp;		/* temp is abs value of input */
	/* For a negative input, want temp2 = bitwise complement of abs(input) */
	/* This code assumes we are on a two's complement machine */
	temp2--;
  }

  /* Find the number of bits needed for the magnitude of the coefficient */
  nbits = 0;
  while (temp) {
	nbits++;
	temp >>= 1;
  }
  /* Check for out-of-range coefficient values.
   * Since we're encoding a difference, the range limit is twice as much.
   */
  if (nbits > MAX_COEF_BITS+1)
	ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);

  /* Emit the Huffman-coded symbol for the number of bits */
  if (! emit_bits(state, dctbl->ehufco[nbits], dctbl->ehufsi[nbits]))
	return FALSE;

  /* Emit that number of bits of the value, if positive, */
  /* or the complement of its magnitude, if negative. */
  if (nbits)			/* emit_bits rejects calls with size 0 */
	if (! emit_bits(state, (unsigned int) temp2, nbits))
	  return FALSE;

  /* Encode the AC coefficients per section F.1.2.2 */

  r = 0;			/* r = run length of zeros */

  for (k = 1; k < DCTSIZE2; k++) {
	if ((temp = block[jpeg_natural_order[k]]) == 0) {
	  r++;
	} else {
	  /* if run length > 15, must emit special run-length-16 codes (0xF0) */
	  while (r > 15) {
	if (! emit_bits(state, actbl->ehufco[0xF0], actbl->ehufsi[0xF0]))
	  return FALSE;
	r -= 16;
	  }

	  temp2 = temp;
	  if (temp < 0) {
	temp = -temp;		/* temp is abs value of input */
	/* This code assumes we are on a two's complement machine */
	temp2--;
	  }

	  /* Find the number of bits needed for the magnitude of the coefficient */
	  nbits = 1;		/* there must be at least one 1 bit */
	  while ((temp >>= 1))
	nbits++;
	  /* Check for out-of-range coefficient values */
	  if (nbits > MAX_COEF_BITS)
	ERREXIT(state->cinfo, JERR_BAD_DCT_COEF);

	  /* Emit Huffman symbol for run length / number of bits */
	  i = (r << 4) + nbits;
	  if (! emit_bits(state, actbl->ehufco[i], actbl->ehufsi[i]))
	return FALSE;

	  /* Emit that number of bits of the value, if positive, */
	  /* or the complement of its magnitude, if negative. */
	  if (! emit_bits(state, (unsigned int) temp2, nbits))
	return FALSE;

	  r = 0;
	}
  }

  /* If the last coef(s) were zero, emit an end-of-block code */
  if (r > 0)
	if (! emit_bits(state, actbl->ehufco[0], actbl->ehufsi[0]))
	  return FALSE;

  return TRUE;
}

/*
 * Emit a restart marker & resynchronize predictions.
 */

LOCAL(boolean)
emit_restart (working_state * state, int restart_num)
{
  int ci;

  if (! flush_bits(state))
	return FALSE;

  emit_byte(state, 0xFF, return FALSE);
  emit_byte(state, JPEG_RST0 + restart_num, return FALSE);

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < state->cinfo->comps_in_scan; ci++)
	state->cur.last_dc_val[ci] = 0;

  /* The restart counter is not updated until we successfully write the MCU. */

  return TRUE;
}

/*
 * Encode and output one MCU's worth of Huffman-compressed coefficients.
 */

METHODDEF(boolean)
encode_mcu_huff (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  working_state state;
  int blkn, ci;
  jpeg_component_info * compptr;

  /* Load up working state */
  state.next_output_byte = cinfo->dest->next_output_byte;
  state.free_in_buffer = cinfo->dest->free_in_buffer;
  ASSIGN_STATE(state.cur, entropy->saved);
  state.cinfo = cinfo;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0)
	  if (! emit_restart(&state, entropy->next_restart_num))
	return FALSE;
  }

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
	ci = cinfo->MCU_membership[blkn];
	compptr = cinfo->cur_comp_info[ci];
	if (! encode_one_block(&state,
			   MCU_data[blkn][0], state.cur.last_dc_val[ci],
			   entropy->dc_derived_tbls[compptr->dc_tbl_no],
			   entropy->ac_derived_tbls[compptr->ac_tbl_no]))
	  return FALSE;
	/* Update last_dc_val */
	state.cur.last_dc_val[ci] = MCU_data[blkn][0][0];
  }

  /* Completed MCU, so update state */
  cinfo->dest->next_output_byte = state.next_output_byte;
  cinfo->dest->free_in_buffer = state.free_in_buffer;
  ASSIGN_STATE(entropy->saved, state.cur);

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0) {
	  entropy->restarts_to_go = cinfo->restart_interval;
	  entropy->next_restart_num++;
	  entropy->next_restart_num &= 7;
	}
	entropy->restarts_to_go--;
  }

  return TRUE;
}

/*
 * Finish up at the end of a Huffman-compressed scan.
 */

METHODDEF(void)
finish_pass_huff (j_compress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  working_state state;

  /* Load up working state ... flush_bits needs it */
  state.next_output_byte = cinfo->dest->next_output_byte;
  state.free_in_buffer = cinfo->dest->free_in_buffer;
  ASSIGN_STATE(state.cur, entropy->saved);
  state.cinfo = cinfo;

  /* Flush out the last data */
  if (! flush_bits(&state))
	ERREXIT(cinfo, JERR_CANT_SUSPEND);

  /* Update state */
  cinfo->dest->next_output_byte = state.next_output_byte;
  cinfo->dest->free_in_buffer = state.free_in_buffer;
  ASSIGN_STATE(entropy->saved, state.cur);
}

/*
 * Huffman coding optimization.
 *
 * We first scan the supplied data and count the number of uses of each symbol
 * that is to be Huffman-coded. (This process MUST agree with the code above.)
 * Then we build a Huffman coding tree for the observed counts.
 * Symbols which are not needed at all for the particular image are not
 * assigned any code, which saves space in the DHT marker as well as in
 * the compressed data.
 */

#ifdef ENTROPY_OPT_SUPPORTED

/* Process a single block's worth of coefficients */

LOCAL(void)
htest_one_block (j_compress_ptr cinfo, JCOEFPTR block, int last_dc_val,
		 long dc_counts[], long ac_counts[])
{
  register int temp;
  register int nbits;
  register int k, r;

  /* Encode the DC coefficient difference per section F.1.2.1 */

  temp = block[0] - last_dc_val;
  if (temp < 0)
	temp = -temp;

  /* Find the number of bits needed for the magnitude of the coefficient */
  nbits = 0;
  while (temp) {
	nbits++;
	temp >>= 1;
  }
  /* Check for out-of-range coefficient values.
   * Since we're encoding a difference, the range limit is twice as much.
   */
  if (nbits > MAX_COEF_BITS+1)
	ERREXIT(cinfo, JERR_BAD_DCT_COEF);

  /* Count the Huffman symbol for the number of bits */
  dc_counts[nbits]++;

  /* Encode the AC coefficients per section F.1.2.2 */

  r = 0;			/* r = run length of zeros */

  for (k = 1; k < DCTSIZE2; k++) {
	if ((temp = block[jpeg_natural_order[k]]) == 0) {
	  r++;
	} else {
	  /* if run length > 15, must emit special run-length-16 codes (0xF0) */
	  while (r > 15) {
	ac_counts[0xF0]++;
	r -= 16;
	  }

	  /* Find the number of bits needed for the magnitude of the coefficient */
	  if (temp < 0)
	temp = -temp;

	  /* Find the number of bits needed for the magnitude of the coefficient */
	  nbits = 1;		/* there must be at least one 1 bit */
	  while ((temp >>= 1))
	nbits++;
	  /* Check for out-of-range coefficient values */
	  if (nbits > MAX_COEF_BITS)
	ERREXIT(cinfo, JERR_BAD_DCT_COEF);

	  /* Count Huffman symbol for run length / number of bits */
	  ac_counts[(r << 4) + nbits]++;

	  r = 0;
	}
  }

  /* If the last coef(s) were zero, emit an end-of-block code */
  if (r > 0)
	ac_counts[0]++;
}

/*
 * Trial-encode one MCU's worth of Huffman-compressed coefficients.
 * No data is actually output, so no suspension return is possible.
 */

METHODDEF(boolean)
encode_mcu_gather (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int blkn, ci;
  jpeg_component_info * compptr;

  /* Take care of restart intervals if needed */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0) {
	  /* Re-initialize DC predictions to 0 */
	  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
	entropy->saved.last_dc_val[ci] = 0;
	  /* Update restart state */
	  entropy->restarts_to_go = cinfo->restart_interval;
	}
	entropy->restarts_to_go--;
  }

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
	ci = cinfo->MCU_membership[blkn];
	compptr = cinfo->cur_comp_info[ci];
	htest_one_block(cinfo, MCU_data[blkn][0], entropy->saved.last_dc_val[ci],
		    entropy->dc_count_ptrs[compptr->dc_tbl_no],
		    entropy->ac_count_ptrs[compptr->ac_tbl_no]);
	entropy->saved.last_dc_val[ci] = MCU_data[blkn][0][0];
  }

  return TRUE;
}

/*
 * Generate the best Huffman code table for the given counts, fill htbl.
 * Note this is also used by jcphuff.c.
 *
 * The JPEG standard requires that no symbol be assigned a codeword of all
 * one bits (so that padding bits added at the end of a compressed segment
 * can't look like a valid code).  Because of the canonical ordering of
 * codewords, this just means that there must be an unused slot in the
 * longest codeword length category.  Section K.2 of the JPEG spec suggests
 * reserving such a slot by pretending that symbol 256 is a valid symbol
 * with count 1.  In theory that's not optimal; giving it count zero but
 * including it in the symbol set anyway should give a better Huffman code.
 * But the theoretically better code actually seems to come out worse in
 * practice, because it produces more all-ones bytes (which incur stuffed
 * zero bytes in the final file).  In any case the difference is tiny.
 *
 * The JPEG standard requires Huffman codes to be no more than 16 bits long.
 * If some symbols have a very small but nonzero probability, the Huffman tree
 * must be adjusted to meet the code length restriction.  We currently use
 * the adjustment method suggested in JPEG section K.2.  This method is *not*
 * optimal; it may not choose the best possible limited-length code.  But
 * typically only very-low-frequency symbols will be given less-than-optimal
 * lengths, so the code is almost optimal.  Experimental comparisons against
 * an optimal limited-length-code algorithm indicate that the difference is
 * microscopic --- usually less than a hundredth of a percent of total size.
 * So the extra complexity of an optimal algorithm doesn't seem worthwhile.
 */

GLOBAL(void)
jpeg_gen_optimal_table (j_compress_ptr cinfo, JHUFF_TBL * htbl, long freq[])
{
#define MAX_CLEN 32		/* assumed maximum initial code length */
  UINT8 bits[MAX_CLEN+1];	/* bits[k] = # of symbols with code length k */
  int codesize[257];		/* codesize[k] = code length of symbol k */
  int others[257];		/* next symbol in current branch of tree */
  int c1, c2;
  int p, i, j;
  long v;

  /* This algorithm is explained in section K.2 of the JPEG standard */

  MEMZERO(bits, SIZEOF(bits));
  MEMZERO(codesize, SIZEOF(codesize));
  for (i = 0; i < 257; i++)
	others[i] = -1;		/* init links to empty */

  freq[256] = 1;		/* make sure 256 has a nonzero count */
  /* Including the pseudo-symbol 256 in the Huffman procedure guarantees
   * that no real symbol is given code-value of all ones, because 256
   * will be placed last in the largest codeword category.
   */

  /* Huffman's basic algorithm to assign optimal code lengths to symbols */

  for (;;) {
	/* Find the smallest nonzero frequency, set c1 = its symbol */
	/* In case of ties, take the larger symbol number */
	c1 = -1;
	v = 1000000000L;
	for (i = 0; i <= 256; i++) {
	  if (freq[i] && freq[i] <= v) {
	v = freq[i];
	c1 = i;
	  }
	}

	/* Find the next smallest nonzero frequency, set c2 = its symbol */
	/* In case of ties, take the larger symbol number */
	c2 = -1;
	v = 1000000000L;
	for (i = 0; i <= 256; i++) {
	  if (freq[i] && freq[i] <= v && i != c1) {
	v = freq[i];
	c2 = i;
	  }
	}

	/* Done if we've merged everything into one frequency */
	if (c2 < 0)
	  break;

	/* Else merge the two counts/trees */
	freq[c1] += freq[c2];
	freq[c2] = 0;

	/* Increment the codesize of everything in c1's tree branch */
	codesize[c1]++;
	while (others[c1] >= 0) {
	  c1 = others[c1];
	  codesize[c1]++;
	}

	others[c1] = c2;		/* chain c2 onto c1's tree branch */

	/* Increment the codesize of everything in c2's tree branch */
	codesize[c2]++;
	while (others[c2] >= 0) {
	  c2 = others[c2];
	  codesize[c2]++;
	}
  }

  /* Now count the number of symbols of each code length */
  for (i = 0; i <= 256; i++) {
	if (codesize[i]) {
	  /* The JPEG standard seems to think that this can't happen, */
	  /* but I'm paranoid... */
	  if (codesize[i] > MAX_CLEN)
	ERREXIT(cinfo, JERR_HUFF_CLEN_OVERFLOW);

	  bits[codesize[i]]++;
	}
  }

  /* JPEG doesn't allow symbols with code lengths over 16 bits, so if the pure
   * Huffman procedure assigned any such lengths, we must adjust the coding.
   * Here is what the JPEG spec says about how this next bit works:
   * Since symbols are paired for the longest Huffman code, the symbols are
   * removed from this length category two at a time.  The prefix for the pair
   * (which is one bit shorter) is allocated to one of the pair; then,
   * skipping the BITS entry for that prefix length, a code word from the next
   * shortest nonzero BITS entry is converted into a prefix for two code words
   * one bit longer.
   */

  for (i = MAX_CLEN; i > 16; i--) {
	while (bits[i] > 0) {
	  j = i - 2;		/* find length of new prefix to be used */
	  while (bits[j] == 0)
	j--;

	  bits[i] -= 2;		/* remove two symbols */
	  bits[i-1]++;		/* one goes in this length */
	  bits[j+1] += 2;		/* two new symbols in this length */
	  bits[j]--;		/* symbol of this length is now a prefix */
	}
  }

  /* Remove the count for the pseudo-symbol 256 from the largest codelength */
  while (bits[i] == 0)		/* find largest codelength still in use */
	i--;
  bits[i]--;

  /* Return final symbol counts (only for lengths 0..16) */
  MEMCOPY(htbl->bits, bits, SIZEOF(htbl->bits));

  /* Return a list of the symbols sorted by code length */
  /* It's not real clear to me why we don't need to consider the codelength
   * changes made above, but the JPEG spec seems to think this works.
   */
  p = 0;
  for (i = 1; i <= MAX_CLEN; i++) {
	for (j = 0; j <= 255; j++) {
	  if (codesize[j] == i) {
	htbl->huffval[p] = (UINT8) j;
	p++;
	  }
	}
  }

  /* Set sent_table FALSE so updated table will be written to JPEG file. */
  htbl->sent_table = FALSE;
}

/*
 * Finish up a statistics-gathering pass and create the new Huffman tables.
 */

METHODDEF(void)
finish_pass_gather (j_compress_ptr cinfo)
{
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
  int ci, dctbl, actbl;
  jpeg_component_info * compptr;
  JHUFF_TBL **htblptr;
  boolean did_dc[NUM_HUFF_TBLS];
  boolean did_ac[NUM_HUFF_TBLS];

  /* It's important not to apply jpeg_gen_optimal_table more than once
   * per table, because it clobbers the input frequency counts!
   */
  MEMZERO(did_dc, SIZEOF(did_dc));
  MEMZERO(did_ac, SIZEOF(did_ac));

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	dctbl = compptr->dc_tbl_no;
	actbl = compptr->ac_tbl_no;
	if (! did_dc[dctbl]) {
	  htblptr = & cinfo->dc_huff_tbl_ptrs[dctbl];
	  if (*htblptr == NULL)
	*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
	  jpeg_gen_optimal_table(cinfo, *htblptr, entropy->dc_count_ptrs[dctbl]);
	  did_dc[dctbl] = TRUE;
	}
	if (! did_ac[actbl]) {
	  htblptr = & cinfo->ac_huff_tbl_ptrs[actbl];
	  if (*htblptr == NULL)
	*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
	  jpeg_gen_optimal_table(cinfo, *htblptr, entropy->ac_count_ptrs[actbl]);
	  did_ac[actbl] = TRUE;
	}
  }
}

#endif /* ENTROPY_OPT_SUPPORTED */

/*
 * Module initialization routine for Huffman entropy encoding.
 */

GLOBAL(void)
jinit_huff_encoder (j_compress_ptr cinfo)
{
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(huff_entropy_encoder));
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
  entropy->pub.start_pass = start_pass_huff;

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
	entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
#ifdef ENTROPY_OPT_SUPPORTED
	entropy->dc_count_ptrs[i] = entropy->ac_count_ptrs[i] = NULL;
#endif
  }
}

/*** End of inlined file: jchuff.c ***/


	#undef emit_byte

/*** Start of inlined file: jcinit.c ***/
#define JPEG_INTERNALS

/*
 * Master selection of compression modules.
 * This is done once at the start of processing an image.  We determine
 * which modules will be used and give them appropriate initialization calls.
 */

GLOBAL(void)
jinit_compress_master (j_compress_ptr cinfo)
{
  /* Initialize master control (includes parameter checking/processing) */
  jinit_c_master_control(cinfo, FALSE /* full compression */);

  /* Preprocessing */
  if (! cinfo->raw_data_in) {
	jinit_color_converter(cinfo);
	jinit_downsampler(cinfo);
	jinit_c_prep_controller(cinfo, FALSE /* never need full buffer here */);
  }
  /* Forward DCT */
  jinit_forward_dct(cinfo);
  /* Entropy encoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
	ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
	if (cinfo->progressive_mode) {
#ifdef C_PROGRESSIVE_SUPPORTED
	  jinit_phuff_encoder(cinfo);
#else
	  ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else
	  jinit_huff_encoder(cinfo);
  }

  /* Need a full-image coefficient buffer in any multi-pass mode. */
  jinit_c_coef_controller(cinfo,
		(boolean) (cinfo->num_scans > 1 || cinfo->optimize_coding));
  jinit_c_main_controller(cinfo, FALSE /* never need full buffer here */);

  jinit_marker_writer(cinfo);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Write the datastream header (SOI) immediately.
   * Frame and scan headers are postponed till later.
   * This lets application insert special markers after the SOI.
   */
  (*cinfo->marker->write_file_header) (cinfo);
}

/*** End of inlined file: jcinit.c ***/



/*** Start of inlined file: jcmainct.c ***/
#define JPEG_INTERNALS

/* Note: currently, there is no operating mode in which a full-image buffer
 * is needed at this step.  If there were, that mode could not be used with
 * "raw data" input, since this module is bypassed in that case.  However,
 * we've left the code here for possible use in special applications.
 */
#undef FULL_MAIN_BUFFER_SUPPORTED

/* Private buffer controller object */

typedef struct {
  struct jpeg_c_main_controller pub; /* public fields */

  JDIMENSION cur_iMCU_row;	/* number of current iMCU row */
  JDIMENSION rowgroup_ctr;	/* counts row groups received in iMCU row */
  boolean suspended;		/* remember if we suspended output */
  J_BUF_MODE pass_mode;		/* current operating mode */

  /* If using just a strip buffer, this points to the entire set of buffers
   * (we allocate one for each component).  In the full-image case, this
   * points to the currently accessible strips of the virtual arrays.
   */
  JSAMPARRAY buffer[MAX_COMPONENTS];

#ifdef FULL_MAIN_BUFFER_SUPPORTED
  /* If using full-image storage, this array holds pointers to virtual-array
   * control blocks for each component.  Unused if not full-image storage.
   */
  jvirt_sarray_ptr whole_image[MAX_COMPONENTS];
#endif
} my_main_controller;

typedef my_main_controller * my_main_ptr;

/* Forward declarations */
METHODDEF(void) process_data_simple_main
	JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
	     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
#ifdef FULL_MAIN_BUFFER_SUPPORTED
METHODDEF(void) process_data_buffer_main
	JPP((j_compress_ptr cinfo, JSAMPARRAY input_buf,
	     JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail));
#endif

/*
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_main_ptr main_ = (my_main_ptr) cinfo->main;

  /* Do nothing in raw-data mode. */
  if (cinfo->raw_data_in)
	return;

  main_->cur_iMCU_row = 0;	/* initialize counters */
  main_->rowgroup_ctr = 0;
  main_->suspended = FALSE;
  main_->pass_mode = pass_mode;	/* save mode for use by process_data */

  switch (pass_mode) {
  case JBUF_PASS_THRU:
#ifdef FULL_MAIN_BUFFER_SUPPORTED
	if (main_->whole_image[0] != NULL)
	  ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
	main_->pub.process_data = process_data_simple_main;
	break;
#ifdef FULL_MAIN_BUFFER_SUPPORTED
  case JBUF_SAVE_SOURCE:
  case JBUF_CRANK_DEST:
  case JBUF_SAVE_AND_PASS:
	if (main_->whole_image[0] == NULL)
	  ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
	main_->pub.process_data = process_data_buffer_main;
	break;
#endif
  default:
	ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
	break;
  }
}

/*
 * Process some data.
 * This routine handles the simple pass-through mode,
 * where we have only a strip buffer.
 */

METHODDEF(void)
process_data_simple_main (j_compress_ptr cinfo,
			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			  JDIMENSION in_rows_avail)
{
  my_main_ptr main_ = (my_main_ptr) cinfo->main;

  while (main_->cur_iMCU_row < cinfo->total_iMCU_rows) {
	/* Read input data if we haven't filled the main buffer yet */
	if (main_->rowgroup_ctr < DCTSIZE)
	  (*cinfo->prep->pre_process_data) (cinfo,
					input_buf, in_row_ctr, in_rows_avail,
					main_->buffer, &main_->rowgroup_ctr,
					(JDIMENSION) DCTSIZE);

	/* If we don't have a full iMCU row buffered, return to application for
	 * more data.  Note that preprocessor will always pad to fill the iMCU row
	 * at the bottom of the image.
	 */
	if (main_->rowgroup_ctr != DCTSIZE)
	  return;

	/* Send the completed row to the compressor */
	if (! (*cinfo->coef->compress_data) (cinfo, main_->buffer)) {
	  /* If compressor did not consume the whole row, then we must need to
	   * suspend processing and return to the application.  In this situation
	   * we pretend we didn't yet consume the last input row; otherwise, if
	   * it happened to be the last row of the image, the application would
	   * think we were done.
	   */
	  if (! main_->suspended) {
	(*in_row_ctr)--;
	main_->suspended = TRUE;
	  }
	  return;
	}
	/* We did finish the row.  Undo our little suspension hack if a previous
	 * call suspended; then mark the main buffer empty.
	 */
	if (main_->suspended) {
	  (*in_row_ctr)++;
	  main_->suspended = FALSE;
	}
	main_->rowgroup_ctr = 0;
	main_->cur_iMCU_row++;
  }
}

#ifdef FULL_MAIN_BUFFER_SUPPORTED

/*
 * Process some data.
 * This routine handles all of the modes that use a full-size buffer.
 */

METHODDEF(void)
process_data_buffer_main (j_compress_ptr cinfo,
			  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
			  JDIMENSION in_rows_avail)
{
  my_main_ptr main = (my_main_ptr) cinfo->main;
  int ci;
  jpeg_component_info *compptr;
  boolean writing = (main->pass_mode != JBUF_CRANK_DEST);

  while (main->cur_iMCU_row < cinfo->total_iMCU_rows) {
	/* Realign the virtual buffers if at the start of an iMCU row. */
	if (main->rowgroup_ctr == 0) {
	  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	main->buffer[ci] = (*cinfo->mem->access_virt_sarray)
	  ((j_common_ptr) cinfo, main->whole_image[ci],
	   main->cur_iMCU_row * (compptr->v_samp_factor * DCTSIZE),
	   (JDIMENSION) (compptr->v_samp_factor * DCTSIZE), writing);
	  }
	  /* In a read pass, pretend we just read some source data. */
	  if (! writing) {
	*in_row_ctr += cinfo->max_v_samp_factor * DCTSIZE;
	main->rowgroup_ctr = DCTSIZE;
	  }
	}

	/* If a write pass, read input data until the current iMCU row is full. */
	/* Note: preprocessor will pad if necessary to fill the last iMCU row. */
	if (writing) {
	  (*cinfo->prep->pre_process_data) (cinfo,
					input_buf, in_row_ctr, in_rows_avail,
					main->buffer, &main->rowgroup_ctr,
					(JDIMENSION) DCTSIZE);
	  /* Return to application if we need more data to fill the iMCU row. */
	  if (main->rowgroup_ctr < DCTSIZE)
	return;
	}

	/* Emit data, unless this is a sink-only pass. */
	if (main->pass_mode != JBUF_SAVE_SOURCE) {
	  if (! (*cinfo->coef->compress_data) (cinfo, main->buffer)) {
	/* If compressor did not consume the whole row, then we must need to
	 * suspend processing and return to the application.  In this situation
	 * we pretend we didn't yet consume the last input row; otherwise, if
	 * it happened to be the last row of the image, the application would
	 * think we were done.
	 */
	if (! main->suspended) {
	  (*in_row_ctr)--;
	  main->suspended = TRUE;
	}
	return;
	  }
	  /* We did finish the row.  Undo our little suspension hack if a previous
	   * call suspended; then mark the main buffer empty.
	   */
	  if (main->suspended) {
	(*in_row_ctr)++;
	main->suspended = FALSE;
	  }
	}

	/* If get here, we are done with this iMCU row.  Mark buffer empty. */
	main->rowgroup_ctr = 0;
	main->cur_iMCU_row++;
  }
}

#endif /* FULL_MAIN_BUFFER_SUPPORTED */

/*
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_c_main_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
  my_main_ptr main_;
  int ci;
  jpeg_component_info *compptr;

  main_ = (my_main_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_c_main_controller *) main_;
  main_->pub.start_pass = start_pass_main;

  /* We don't need to create a buffer in raw-data mode. */
  if (cinfo->raw_data_in)
	return;

  /* Create the buffer.  It holds downsampled data, so each component
   * may be of a different size.
   */
  if (need_full_buffer) {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
	/* Allocate a full-image virtual array for each component */
	/* Note we pad the bottom to a multiple of the iMCU height */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
	  main->whole_image[ci] = (*cinfo->mem->request_virt_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 compptr->width_in_blocks * DCTSIZE,
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor) * DCTSIZE,
	 (JDIMENSION) (compptr->v_samp_factor * DCTSIZE));
	}
#else
	ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif
  } else {
#ifdef FULL_MAIN_BUFFER_SUPPORTED
	main_->whole_image[0] = NULL; /* flag for no virtual arrays */
#endif
	/* Allocate a strip buffer for each component */
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
	  main_->buffer[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 compptr->width_in_blocks * DCTSIZE,
	 (JDIMENSION) (compptr->v_samp_factor * DCTSIZE));
	}
  }
}

/*** End of inlined file: jcmainct.c ***/


/*** Start of inlined file: jcmarker.c ***/
#define JPEG_INTERNALS

/* Private state */

typedef struct {
  struct jpeg_marker_writer pub; /* public fields */

  unsigned int last_restart_interval; /* last DRI value emitted; 0 after SOI */
} my_marker_writer;

typedef my_marker_writer * my_marker_ptr;

/*
 * Basic output routines.
 *
 * Note that we do not support suspension while writing a marker.
 * Therefore, an application using suspension must ensure that there is
 * enough buffer space for the initial markers (typ. 600-700 bytes) before
 * calling jpeg_start_compress, and enough space to write the trailing EOI
 * (a few bytes) before calling jpeg_finish_compress.  Multipass compression
 * modes are not supported at all with suspension, so those two are the only
 * points where markers will be written.
 */

LOCAL(void)
emit_byte (j_compress_ptr cinfo, int val)
/* Emit a byte */
{
  struct jpeg_destination_mgr * dest = cinfo->dest;

  *(dest->next_output_byte)++ = (JOCTET) val;
  if (--dest->free_in_buffer == 0) {
	if (! (*dest->empty_output_buffer) (cinfo))
	  ERREXIT(cinfo, JERR_CANT_SUSPEND);
  }
}

LOCAL(void)
emit_marker (j_compress_ptr cinfo, JPEG_MARKER mark)
/* Emit a marker code */
{
  emit_byte(cinfo, 0xFF);
  emit_byte(cinfo, (int) mark);
}

LOCAL(void)
emit_2bytes (j_compress_ptr cinfo, int value)
/* Emit a 2-byte integer; these are always MSB first in JPEG files */
{
  emit_byte(cinfo, (value >> 8) & 0xFF);
  emit_byte(cinfo, value & 0xFF);
}

/*
 * Routines to write specific marker types.
 */

LOCAL(int)
emit_dqt (j_compress_ptr cinfo, int index)
/* Emit a DQT marker */
/* Returns the precision used (0 = 8bits, 1 = 16bits) for baseline checking */
{
  JQUANT_TBL * qtbl = cinfo->quant_tbl_ptrs[index];
  int prec;
  int i;

  if (qtbl == NULL)
	ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, index);

  prec = 0;
  for (i = 0; i < DCTSIZE2; i++) {
	if (qtbl->quantval[i] > 255)
	  prec = 1;
  }

  if (! qtbl->sent_table) {
	emit_marker(cinfo, M_DQT);

	emit_2bytes(cinfo, prec ? DCTSIZE2*2 + 1 + 2 : DCTSIZE2 + 1 + 2);

	emit_byte(cinfo, index + (prec<<4));

	for (i = 0; i < DCTSIZE2; i++) {
	  /* The table entries must be emitted in zigzag order. */
	  unsigned int qval = qtbl->quantval[jpeg_natural_order[i]];
	  if (prec)
	emit_byte(cinfo, (int) (qval >> 8));
	  emit_byte(cinfo, (int) (qval & 0xFF));
	}

	qtbl->sent_table = TRUE;
  }

  return prec;
}

LOCAL(void)
emit_dht (j_compress_ptr cinfo, int index, boolean is_ac)
/* Emit a DHT marker */
{
  JHUFF_TBL * htbl;
  int length, i;

  if (is_ac) {
	htbl = cinfo->ac_huff_tbl_ptrs[index];
	index += 0x10;		/* output index has AC bit set */
  } else {
	htbl = cinfo->dc_huff_tbl_ptrs[index];
  }

  if (htbl == NULL)
	ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, index);

  if (! htbl->sent_table) {
	emit_marker(cinfo, M_DHT);

	length = 0;
	for (i = 1; i <= 16; i++)
	  length += htbl->bits[i];

	emit_2bytes(cinfo, length + 2 + 1 + 16);
	emit_byte(cinfo, index);

	for (i = 1; i <= 16; i++)
	  emit_byte(cinfo, htbl->bits[i]);

	for (i = 0; i < length; i++)
	  emit_byte(cinfo, htbl->huffval[i]);

	htbl->sent_table = TRUE;
  }
}

LOCAL(void)
emit_dac (j_compress_ptr)
/* Emit a DAC marker */
/* Since the useful info is so small, we want to emit all the tables in */
/* one DAC marker.  Therefore this routine does its own scan of the table. */
{
#ifdef C_ARITH_CODING_SUPPORTED
  char dc_in_use[NUM_ARITH_TBLS];
  char ac_in_use[NUM_ARITH_TBLS];
  int length, i;
  jpeg_component_info *compptr;

  for (i = 0; i < NUM_ARITH_TBLS; i++)
	dc_in_use[i] = ac_in_use[i] = 0;

  for (i = 0; i < cinfo->comps_in_scan; i++) {
	compptr = cinfo->cur_comp_info[i];
	dc_in_use[compptr->dc_tbl_no] = 1;
	ac_in_use[compptr->ac_tbl_no] = 1;
  }

  length = 0;
  for (i = 0; i < NUM_ARITH_TBLS; i++)
	length += dc_in_use[i] + ac_in_use[i];

  emit_marker(cinfo, M_DAC);

  emit_2bytes(cinfo, length*2 + 2);

  for (i = 0; i < NUM_ARITH_TBLS; i++) {
	if (dc_in_use[i]) {
	  emit_byte(cinfo, i);
	  emit_byte(cinfo, cinfo->arith_dc_L[i] + (cinfo->arith_dc_U[i]<<4));
	}
	if (ac_in_use[i]) {
	  emit_byte(cinfo, i + 0x10);
	  emit_byte(cinfo, cinfo->arith_ac_K[i]);
	}
  }
#endif /* C_ARITH_CODING_SUPPORTED */
}

LOCAL(void)
emit_dri (j_compress_ptr cinfo)
/* Emit a DRI marker */
{
  emit_marker(cinfo, M_DRI);

  emit_2bytes(cinfo, 4);	/* fixed length */

  emit_2bytes(cinfo, (int) cinfo->restart_interval);
}

LOCAL(void)
emit_sof (j_compress_ptr cinfo, JPEG_MARKER code)
/* Emit a SOF marker */
{
  int ci;
  jpeg_component_info *compptr;

  emit_marker(cinfo, code);

  emit_2bytes(cinfo, 3 * cinfo->num_components + 2 + 5 + 1); /* length */

  /* Make sure image isn't bigger than SOF field can handle */
  if ((long) cinfo->image_height > 65535L ||
	  (long) cinfo->image_width > 65535L)
	ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) 65535);

  emit_byte(cinfo, cinfo->data_precision);
  emit_2bytes(cinfo, (int) cinfo->image_height);
  emit_2bytes(cinfo, (int) cinfo->image_width);

  emit_byte(cinfo, cinfo->num_components);

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	emit_byte(cinfo, compptr->component_id);
	emit_byte(cinfo, (compptr->h_samp_factor << 4) + compptr->v_samp_factor);
	emit_byte(cinfo, compptr->quant_tbl_no);
  }
}

LOCAL(void)
emit_sos (j_compress_ptr cinfo)
/* Emit a SOS marker */
{
  int i, td, ta;
  jpeg_component_info *compptr;

  emit_marker(cinfo, M_SOS);

  emit_2bytes(cinfo, 2 * cinfo->comps_in_scan + 2 + 1 + 3); /* length */

  emit_byte(cinfo, cinfo->comps_in_scan);

  for (i = 0; i < cinfo->comps_in_scan; i++) {
	compptr = cinfo->cur_comp_info[i];
	emit_byte(cinfo, compptr->component_id);
	td = compptr->dc_tbl_no;
	ta = compptr->ac_tbl_no;
	if (cinfo->progressive_mode) {
	  /* Progressive mode: only DC or only AC tables are used in one scan;
	   * furthermore, Huffman coding of DC refinement uses no table at all.
	   * We emit 0 for unused field(s); this is recommended by the P&M text
	   * but does not seem to be specified in the standard.
	   */
	  if (cinfo->Ss == 0) {
	ta = 0;			/* DC scan */
	if (cinfo->Ah != 0 && !cinfo->arith_code)
	  td = 0;		/* no DC table either */
	  } else {
	td = 0;			/* AC scan */
	  }
	}
	emit_byte(cinfo, (td << 4) + ta);
  }

  emit_byte(cinfo, cinfo->Ss);
  emit_byte(cinfo, cinfo->Se);
  emit_byte(cinfo, (cinfo->Ah << 4) + cinfo->Al);
}

LOCAL(void)
emit_jfif_app0 (j_compress_ptr cinfo)
/* Emit a JFIF-compliant APP0 marker */
{
  /*
   * Length of APP0 block	(2 bytes)
   * Block ID			(4 bytes - ASCII "JFIF")
   * Zero byte			(1 byte to terminate the ID string)
   * Version Major, Minor	(2 bytes - major first)
   * Units			(1 byte - 0x00 = none, 0x01 = inch, 0x02 = cm)
   * Xdpu			(2 bytes - dots per unit horizontal)
   * Ydpu			(2 bytes - dots per unit vertical)
   * Thumbnail X size		(1 byte)
   * Thumbnail Y size		(1 byte)
   */

  emit_marker(cinfo, M_APP0);

  emit_2bytes(cinfo, 2 + 4 + 1 + 2 + 1 + 2 + 2 + 1 + 1); /* length */

  emit_byte(cinfo, 0x4A);	/* Identifier: ASCII "JFIF" */
  emit_byte(cinfo, 0x46);
  emit_byte(cinfo, 0x49);
  emit_byte(cinfo, 0x46);
  emit_byte(cinfo, 0);
  emit_byte(cinfo, cinfo->JFIF_major_version); /* Version fields */
  emit_byte(cinfo, cinfo->JFIF_minor_version);
  emit_byte(cinfo, cinfo->density_unit); /* Pixel size information */
  emit_2bytes(cinfo, (int) cinfo->X_density);
  emit_2bytes(cinfo, (int) cinfo->Y_density);
  emit_byte(cinfo, 0);		/* No thumbnail image */
  emit_byte(cinfo, 0);
}

LOCAL(void)
emit_adobe_app14 (j_compress_ptr cinfo)
/* Emit an Adobe APP14 marker */
{
  /*
   * Length of APP14 block	(2 bytes)
   * Block ID			(5 bytes - ASCII "Adobe")
   * Version Number		(2 bytes - currently 100)
   * Flags0			(2 bytes - currently 0)
   * Flags1			(2 bytes - currently 0)
   * Color transform		(1 byte)
   *
   * Although Adobe TN 5116 mentions Version = 101, all the Adobe files
   * now in circulation seem to use Version = 100, so that's what we write.
   *
   * We write the color transform byte as 1 if the JPEG color space is
   * YCbCr, 2 if it's YCCK, 0 otherwise.  Adobe's definition has to do with
   * whether the encoder performed a transformation, which is pretty useless.
   */

  emit_marker(cinfo, M_APP14);

  emit_2bytes(cinfo, 2 + 5 + 2 + 2 + 2 + 1); /* length */

  emit_byte(cinfo, 0x41);	/* Identifier: ASCII "Adobe" */
  emit_byte(cinfo, 0x64);
  emit_byte(cinfo, 0x6F);
  emit_byte(cinfo, 0x62);
  emit_byte(cinfo, 0x65);
  emit_2bytes(cinfo, 100);	/* Version */
  emit_2bytes(cinfo, 0);	/* Flags0 */
  emit_2bytes(cinfo, 0);	/* Flags1 */
  switch (cinfo->jpeg_color_space) {
  case JCS_YCbCr:
	emit_byte(cinfo, 1);	/* Color transform = 1 */
	break;
  case JCS_YCCK:
	emit_byte(cinfo, 2);	/* Color transform = 2 */
	break;
  default:
	emit_byte(cinfo, 0);	/* Color transform = 0 */
	break;
  }
}

/*
 * These routines allow writing an arbitrary marker with parameters.
 * The only intended use is to emit COM or APPn markers after calling
 * write_file_header and before calling write_frame_header.
 * Other uses are not guaranteed to produce desirable results.
 * Counting the parameter bytes properly is the caller's responsibility.
 */

METHODDEF(void)
write_marker_header (j_compress_ptr cinfo, int marker, unsigned int datalen)
/* Emit an arbitrary marker header */
{
  if (datalen > (unsigned int) 65533)		/* safety check */
	ERREXIT(cinfo, JERR_BAD_LENGTH);

  emit_marker(cinfo, (JPEG_MARKER) marker);

  emit_2bytes(cinfo, (int) (datalen + 2));	/* total length */
}

METHODDEF(void)
write_marker_byte (j_compress_ptr cinfo, int val)
/* Emit one byte of marker parameters following write_marker_header */
{
  emit_byte(cinfo, val);
}

/*
 * Write datastream header.
 * This consists of an SOI and optional APPn markers.
 * We recommend use of the JFIF marker, but not the Adobe marker,
 * when using YCbCr or grayscale data.  The JFIF marker should NOT
 * be used for any other JPEG colorspace.  The Adobe marker is helpful
 * to distinguish RGB, CMYK, and YCCK colorspaces.
 * Note that an application can write additional header markers after
 * jpeg_start_compress returns.
 */

METHODDEF(void)
write_file_header (j_compress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;

  emit_marker(cinfo, M_SOI);	/* first the SOI */

  /* SOI is defined to reset restart interval to 0 */
  marker->last_restart_interval = 0;

  if (cinfo->write_JFIF_header)	/* next an optional JFIF APP0 */
	emit_jfif_app0(cinfo);
  if (cinfo->write_Adobe_marker) /* next an optional Adobe APP14 */
	emit_adobe_app14(cinfo);
}

/*
 * Write frame header.
 * This consists of DQT and SOFn markers.
 * Note that we do not emit the SOF until we have emitted the DQT(s).
 * This avoids compatibility problems with incorrect implementations that
 * try to error-check the quant table numbers as soon as they see the SOF.
 */

METHODDEF(void)
write_frame_header (j_compress_ptr cinfo)
{
  int ci, prec;
  boolean is_baseline;
  jpeg_component_info *compptr;

  /* Emit DQT for each quantization table.
   * Note that emit_dqt() suppresses any duplicate tables.
   */
  prec = 0;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	prec += emit_dqt(cinfo, compptr->quant_tbl_no);
  }
  /* now prec is nonzero iff there are any 16-bit quant tables. */

  /* Check for a non-baseline specification.
   * Note we assume that Huffman table numbers won't be changed later.
   */
  if (cinfo->arith_code || cinfo->progressive_mode ||
	  cinfo->data_precision != 8) {
	is_baseline = FALSE;
  } else {
	is_baseline = TRUE;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
	  if (compptr->dc_tbl_no > 1 || compptr->ac_tbl_no > 1)
	is_baseline = FALSE;
	}
	if (prec && is_baseline) {
	  is_baseline = FALSE;
	  /* If it's baseline except for quantizer size, warn the user */
	  TRACEMS(cinfo, 0, JTRC_16BIT_TABLES);
	}
  }

  /* Emit the proper SOF marker */
  if (cinfo->arith_code) {
	emit_sof(cinfo, M_SOF9);	/* SOF code for arithmetic coding */
  } else {
	if (cinfo->progressive_mode)
	  emit_sof(cinfo, M_SOF2);	/* SOF code for progressive Huffman */
	else if (is_baseline)
	  emit_sof(cinfo, M_SOF0);	/* SOF code for baseline implementation */
	else
	  emit_sof(cinfo, M_SOF1);	/* SOF code for non-baseline Huffman file */
  }
}

/*
 * Write scan header.
 * This consists of DHT or DAC markers, optional DRI, and SOS.
 * Compressed data will be written following the SOS.
 */

METHODDEF(void)
write_scan_header (j_compress_ptr cinfo)
{
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
  int i;
  jpeg_component_info *compptr;

  if (cinfo->arith_code) {
	/* Emit arith conditioning info.  We may have some duplication
	 * if the file has multiple scans, but it's so small it's hardly
	 * worth worrying about.
	 */
	emit_dac(cinfo);
  } else {
	/* Emit Huffman tables.
	 * Note that emit_dht() suppresses any duplicate tables.
	 */
	for (i = 0; i < cinfo->comps_in_scan; i++) {
	  compptr = cinfo->cur_comp_info[i];
	  if (cinfo->progressive_mode) {
	/* Progressive mode: only DC or only AC tables are used in one scan */
	if (cinfo->Ss == 0) {
	  if (cinfo->Ah == 0)	/* DC needs no table for refinement scan */
	    emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
	} else {
	  emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
	}
	  } else {
	/* Sequential mode: need both DC and AC tables */
	emit_dht(cinfo, compptr->dc_tbl_no, FALSE);
	emit_dht(cinfo, compptr->ac_tbl_no, TRUE);
	  }
	}
  }

  /* Emit DRI if required --- note that DRI value could change for each scan.
   * We avoid wasting space with unnecessary DRIs, however.
   */
  if (cinfo->restart_interval != marker->last_restart_interval) {
	emit_dri(cinfo);
	marker->last_restart_interval = cinfo->restart_interval;
  }

  emit_sos(cinfo);
}

/*
 * Write datastream trailer.
 */

METHODDEF(void)
write_file_trailer (j_compress_ptr cinfo)
{
  emit_marker(cinfo, M_EOI);
}

/*
 * Write an abbreviated table-specification datastream.
 * This consists of SOI, DQT and DHT tables, and EOI.
 * Any table that is defined and not marked sent_table = TRUE will be
 * emitted.  Note that all tables will be marked sent_table = TRUE at exit.
 */

METHODDEF(void)
write_tables_only (j_compress_ptr cinfo)
{
  int i;

  emit_marker(cinfo, M_SOI);

  for (i = 0; i < NUM_QUANT_TBLS; i++) {
	if (cinfo->quant_tbl_ptrs[i] != NULL)
	  (void) emit_dqt(cinfo, i);
  }

  if (! cinfo->arith_code) {
	for (i = 0; i < NUM_HUFF_TBLS; i++) {
	  if (cinfo->dc_huff_tbl_ptrs[i] != NULL)
	emit_dht(cinfo, i, FALSE);
	  if (cinfo->ac_huff_tbl_ptrs[i] != NULL)
	emit_dht(cinfo, i, TRUE);
	}
  }

  emit_marker(cinfo, M_EOI);
}

/*
 * Initialize the marker writer module.
 */

GLOBAL(void)
jinit_marker_writer (j_compress_ptr cinfo)
{
  my_marker_ptr marker;

  /* Create the subobject */
  marker = (my_marker_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_marker_writer));
  cinfo->marker = (struct jpeg_marker_writer *) marker;
  /* Initialize method pointers */
  marker->pub.write_file_header = write_file_header;
  marker->pub.write_frame_header = write_frame_header;
  marker->pub.write_scan_header = write_scan_header;
  marker->pub.write_file_trailer = write_file_trailer;
  marker->pub.write_tables_only = write_tables_only;
  marker->pub.write_marker_header = write_marker_header;
  marker->pub.write_marker_byte = write_marker_byte;
  /* Initialize private state */
  marker->last_restart_interval = 0;
}

/*** End of inlined file: jcmarker.c ***/


/*** Start of inlined file: jcmaster.c ***/
#define JPEG_INTERNALS

/* Private state */

typedef enum {
	main_pass,		/* input data, also do first output step */
	huff_opt_pass,		/* Huffman code optimization pass */
	output_pass		/* data output pass */
} c_pass_type;

typedef struct {
  struct jpeg_comp_master pub;	/* public fields */

  c_pass_type pass_type;	/* the type of the current pass */

  int pass_number;		/* # of passes completed */
  int total_passes;		/* total # of passes needed */

  int scan_number;		/* current index in scan_info[] */
} my_comp_master;

typedef my_comp_master * my_master_ptr;

/*
 * Support routines that do various essential calculations.
 */

LOCAL(void)
initial_setup (j_compress_ptr cinfo)
/* Do computations that are needed before master selection phase */
{
  int ci;
  jpeg_component_info *compptr;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Sanity check on image dimensions */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
	  || cinfo->num_components <= 0 || cinfo->input_components <= 0)
	ERREXIT(cinfo, JERR_EMPTY_IMAGE);

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
	  (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
	ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);

  /* Width of an input scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->image_width * (long) cinfo->input_components;
  jd_samplesperrow = (JDIMENSION) samplesperrow;
  if ((long) jd_samplesperrow != samplesperrow)
	ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
	ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
	ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
  cinfo->max_v_samp_factor = 1;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
	  ERREXIT(cinfo, JERR_BAD_SAMPLING);
	cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
				   compptr->h_samp_factor);
	cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				   compptr->v_samp_factor);
  }

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* Fill in the correct component_index value; don't rely on application */
	compptr->component_index = ci;
	/* For compression, we never do DCT scaling. */
	compptr->DCT_scaled_size = DCTSIZE;
	/* Size in DCT blocks */
	compptr->width_in_blocks = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
	compptr->height_in_blocks = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
	/* Size in samples */
	compptr->downsampled_width = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) cinfo->max_h_samp_factor);
	compptr->downsampled_height = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) cinfo->max_v_samp_factor);
	/* Mark component needed (this flag isn't actually used for compression) */
	compptr->component_needed = TRUE;
  }

  /* Compute number of fully interleaved MCU rows (number of times that
   * main controller will call coefficient controller).
   */
  cinfo->total_iMCU_rows = (JDIMENSION)
	jdiv_round_up((long) cinfo->image_height,
		  (long) (cinfo->max_v_samp_factor*DCTSIZE));
}

#ifdef C_MULTISCAN_FILES_SUPPORTED

LOCAL(void)
validate_script (j_compress_ptr cinfo)
/* Verify that the scan script in cinfo->scan_info[] is valid; also
 * determine whether it uses progressive JPEG, and set cinfo->progressive_mode.
 */
{
  const jpeg_scan_info * scanptr;
  int scanno, ncomps, ci, coefi, thisi;
  int Ss, Se, Ah, Al;
  boolean component_sent[MAX_COMPONENTS];
#ifdef C_PROGRESSIVE_SUPPORTED
  int * last_bitpos_ptr;
  int last_bitpos[MAX_COMPONENTS][DCTSIZE2];
  /* -1 until that coefficient has been seen; then last Al for it */
#endif

  if (cinfo->num_scans <= 0)
	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, 0);

  /* For sequential JPEG, all scans must have Ss=0, Se=DCTSIZE2-1;
   * for progressive JPEG, no scan can have this.
   */
  scanptr = cinfo->scan_info;
  if (scanptr->Ss != 0 || scanptr->Se != DCTSIZE2-1) {
#ifdef C_PROGRESSIVE_SUPPORTED
	cinfo->progressive_mode = TRUE;
	last_bitpos_ptr = & last_bitpos[0][0];
	for (ci = 0; ci < cinfo->num_components; ci++)
	  for (coefi = 0; coefi < DCTSIZE2; coefi++)
	*last_bitpos_ptr++ = -1;
#else
	ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
	cinfo->progressive_mode = FALSE;
	for (ci = 0; ci < cinfo->num_components; ci++)
	  component_sent[ci] = FALSE;
  }

  for (scanno = 1; scanno <= cinfo->num_scans; scanptr++, scanno++) {
	/* Validate component indexes */
	ncomps = scanptr->comps_in_scan;
	if (ncomps <= 0 || ncomps > MAX_COMPS_IN_SCAN)
	  ERREXIT2(cinfo, JERR_COMPONENT_COUNT, ncomps, MAX_COMPS_IN_SCAN);
	for (ci = 0; ci < ncomps; ci++) {
	  thisi = scanptr->component_index[ci];
	  if (thisi < 0 || thisi >= cinfo->num_components)
	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
	  /* Components must appear in SOF order within each scan */
	  if (ci > 0 && thisi <= scanptr->component_index[ci-1])
	ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
	}
	/* Validate progression parameters */
	Ss = scanptr->Ss;
	Se = scanptr->Se;
	Ah = scanptr->Ah;
	Al = scanptr->Al;
	if (cinfo->progressive_mode) {
#ifdef C_PROGRESSIVE_SUPPORTED
	  /* The JPEG spec simply gives the ranges 0..13 for Ah and Al, but that
	   * seems wrong: the upper bound ought to depend on data precision.
	   * Perhaps they really meant 0..N+1 for N-bit precision.
	   * Here we allow 0..10 for 8-bit data; Al larger than 10 results in
	   * out-of-range reconstructed DC values during the first DC scan,
	   * which might cause problems for some decoders.
	   */
#if BITS_IN_JSAMPLE == 8
#define MAX_AH_AL 10
#else
#define MAX_AH_AL 13
#endif
	  if (Ss < 0 || Ss >= DCTSIZE2 || Se < Ss || Se >= DCTSIZE2 ||
	  Ah < 0 || Ah > MAX_AH_AL || Al < 0 || Al > MAX_AH_AL)
	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
	  if (Ss == 0) {
	if (Se != 0)		/* DC and AC together not OK */
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
	  } else {
	if (ncomps != 1)	/* AC scans must be for only one component */
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
	  }
	  for (ci = 0; ci < ncomps; ci++) {
	last_bitpos_ptr = & last_bitpos[scanptr->component_index[ci]][0];
	if (Ss != 0 && last_bitpos_ptr[0] < 0) /* AC without prior DC scan */
	  ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
	for (coefi = Ss; coefi <= Se; coefi++) {
	  if (last_bitpos_ptr[coefi] < 0) {
	    /* first scan of this coefficient */
	    if (Ah != 0)
	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
	  } else {
	    /* not first scan */
	    if (Ah != last_bitpos_ptr[coefi] || Al != Ah-1)
	      ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
	  }
	  last_bitpos_ptr[coefi] = Al;
	}
	  }
#endif
	} else {
	  /* For sequential JPEG, all progression parameters must be these: */
	  if (Ss != 0 || Se != DCTSIZE2-1 || Ah != 0 || Al != 0)
	ERREXIT1(cinfo, JERR_BAD_PROG_SCRIPT, scanno);
	  /* Make sure components are not sent twice */
	  for (ci = 0; ci < ncomps; ci++) {
	thisi = scanptr->component_index[ci];
	if (component_sent[thisi])
	  ERREXIT1(cinfo, JERR_BAD_SCAN_SCRIPT, scanno);
	component_sent[thisi] = TRUE;
	  }
	}
  }

  /* Now verify that everything got sent. */
  if (cinfo->progressive_mode) {
#ifdef C_PROGRESSIVE_SUPPORTED
	/* For progressive mode, we only check that at least some DC data
	 * got sent for each component; the spec does not require that all bits
	 * of all coefficients be transmitted.  Would it be wiser to enforce
	 * transmission of all coefficient bits??
	 */
	for (ci = 0; ci < cinfo->num_components; ci++) {
	  if (last_bitpos[ci][0] < 0)
	ERREXIT(cinfo, JERR_MISSING_DATA);
	}
#endif
  } else {
	for (ci = 0; ci < cinfo->num_components; ci++) {
	  if (! component_sent[ci])
	ERREXIT(cinfo, JERR_MISSING_DATA);
	}
  }
}

#endif /* C_MULTISCAN_FILES_SUPPORTED */

LOCAL(void)
select_scan_parameters (j_compress_ptr cinfo)
/* Set up the scan parameters for the current scan */
{
  int ci;

#ifdef C_MULTISCAN_FILES_SUPPORTED
  if (cinfo->scan_info != NULL) {
	/* Prepare for current scan --- the script is already validated */
	my_master_ptr master = (my_master_ptr) cinfo->master;
	const jpeg_scan_info * scanptr = cinfo->scan_info + master->scan_number;

	cinfo->comps_in_scan = scanptr->comps_in_scan;
	for (ci = 0; ci < scanptr->comps_in_scan; ci++) {
	  cinfo->cur_comp_info[ci] =
	&cinfo->comp_info[scanptr->component_index[ci]];
	}
	cinfo->Ss = scanptr->Ss;
	cinfo->Se = scanptr->Se;
	cinfo->Ah = scanptr->Ah;
	cinfo->Al = scanptr->Al;
  }
  else
#endif
  {
	/* Prepare for single sequential-JPEG scan containing all components */
	if (cinfo->num_components > MAX_COMPS_IN_SCAN)
	  ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	       MAX_COMPS_IN_SCAN);
	cinfo->comps_in_scan = cinfo->num_components;
	for (ci = 0; ci < cinfo->num_components; ci++) {
	  cinfo->cur_comp_info[ci] = &cinfo->comp_info[ci];
	}
	cinfo->Ss = 0;
	cinfo->Se = DCTSIZE2-1;
	cinfo->Ah = 0;
	cinfo->Al = 0;
  }
}

LOCAL(void)
per_scan_setup (j_compress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] are already set */
{
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;

  if (cinfo->comps_in_scan == 1) {

	/* Noninterleaved (single-component) scan */
	compptr = cinfo->cur_comp_info[0];

	/* Overall image size in MCUs */
	cinfo->MCUs_per_row = compptr->width_in_blocks;
	cinfo->MCU_rows_in_scan = compptr->height_in_blocks;

	/* For noninterleaved scan, always one block per MCU */
	compptr->MCU_width = 1;
	compptr->MCU_height = 1;
	compptr->MCU_blocks = 1;
	compptr->MCU_sample_width = DCTSIZE;
	compptr->last_col_width = 1;
	/* For noninterleaved scans, it is convenient to define last_row_height
	 * as the number of block rows present in the last iMCU row.
	 */
	tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
	if (tmp == 0) tmp = compptr->v_samp_factor;
	compptr->last_row_height = tmp;

	/* Prepare array describing MCU composition */
	cinfo->blocks_in_MCU = 1;
	cinfo->MCU_membership[0] = 0;

  } else {

	/* Interleaved (multi-component) scan */
	if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
	  ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
	       MAX_COMPS_IN_SCAN);

	/* Overall image size in MCUs */
	cinfo->MCUs_per_row = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_width,
		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
	cinfo->MCU_rows_in_scan = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_height,
		    (long) (cinfo->max_v_samp_factor*DCTSIZE));

	cinfo->blocks_in_MCU = 0;

	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	  compptr = cinfo->cur_comp_info[ci];
	  /* Sampling factors give # of blocks of component in each MCU */
	  compptr->MCU_width = compptr->h_samp_factor;
	  compptr->MCU_height = compptr->v_samp_factor;
	  compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
	  compptr->MCU_sample_width = compptr->MCU_width * DCTSIZE;
	  /* Figure number of non-dummy blocks in last MCU column & row */
	  tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
	  if (tmp == 0) tmp = compptr->MCU_width;
	  compptr->last_col_width = tmp;
	  tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
	  if (tmp == 0) tmp = compptr->MCU_height;
	  compptr->last_row_height = tmp;
	  /* Prepare array describing MCU composition */
	  mcublks = compptr->MCU_blocks;
	  if (cinfo->blocks_in_MCU + mcublks > C_MAX_BLOCKS_IN_MCU)
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
	  while (mcublks-- > 0) {
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
	  }
	}

  }

  /* Convert restart specified in rows to actual MCU count. */
  /* Note that count must fit in 16 bits, so we provide limiting. */
  if (cinfo->restart_in_rows > 0) {
	long nominal = (long) cinfo->restart_in_rows * (long) cinfo->MCUs_per_row;
	cinfo->restart_interval = (unsigned int) MIN(nominal, 65535L);
  }
}

/*
 * Per-pass setup.
 * This is called at the beginning of each pass.  We determine which modules
 * will be active during this pass and give them appropriate start_pass calls.
 * We also set is_last_pass to indicate whether any more passes will be
 * required.
 */

METHODDEF(void)
prepare_for_pass (j_compress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  switch (master->pass_type) {
  case main_pass:
	/* Initial pass: will collect input data, and do either Huffman
	 * optimization or data output for the first scan.
	 */
	select_scan_parameters(cinfo);
	per_scan_setup(cinfo);
	if (! cinfo->raw_data_in) {
	  (*cinfo->cconvert->start_pass) (cinfo);
	  (*cinfo->downsample->start_pass) (cinfo);
	  (*cinfo->prep->start_pass) (cinfo, JBUF_PASS_THRU);
	}
	(*cinfo->fdct->start_pass) (cinfo);
	(*cinfo->entropy->start_pass) (cinfo, cinfo->optimize_coding);
	(*cinfo->coef->start_pass) (cinfo,
				(master->total_passes > 1 ?
				 JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
	(*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
	if (cinfo->optimize_coding) {
	  /* No immediate data output; postpone writing frame/scan headers */
	  master->pub.call_pass_startup = FALSE;
	} else {
	  /* Will write frame/scan headers at first jpeg_write_scanlines call */
	  master->pub.call_pass_startup = TRUE;
	}
	break;
#ifdef ENTROPY_OPT_SUPPORTED
  case huff_opt_pass:
	/* Do Huffman optimization for a scan after the first one. */
	select_scan_parameters(cinfo);
	per_scan_setup(cinfo);
	if (cinfo->Ss != 0 || cinfo->Ah == 0 || cinfo->arith_code) {
	  (*cinfo->entropy->start_pass) (cinfo, TRUE);
	  (*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
	  master->pub.call_pass_startup = FALSE;
	  break;
	}
	/* Special case: Huffman DC refinement scans need no Huffman table
	 * and therefore we can skip the optimization pass for them.
	 */
	master->pass_type = output_pass;
	master->pass_number++;
	/*FALLTHROUGH*/
#endif
  case output_pass:
	/* Do a data-output pass. */
	/* We need not repeat per-scan setup if prior optimization pass did it. */
	if (! cinfo->optimize_coding) {
	  select_scan_parameters(cinfo);
	  per_scan_setup(cinfo);
	}
	(*cinfo->entropy->start_pass) (cinfo, FALSE);
	(*cinfo->coef->start_pass) (cinfo, JBUF_CRANK_DEST);
	/* We emit frame/scan headers now */
	if (master->scan_number == 0)
	  (*cinfo->marker->write_frame_header) (cinfo);
	(*cinfo->marker->write_scan_header) (cinfo);
	master->pub.call_pass_startup = FALSE;
	break;
  default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
  }

  master->pub.is_last_pass = (master->pass_number == master->total_passes-1);

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
	cinfo->progress->completed_passes = master->pass_number;
	cinfo->progress->total_passes = master->total_passes;
  }
}

/*
 * Special start-of-pass hook.
 * This is called by jpeg_write_scanlines if call_pass_startup is TRUE.
 * In single-pass processing, we need this hook because we don't want to
 * write frame/scan headers during jpeg_start_compress; we want to let the
 * application write COM markers etc. between jpeg_start_compress and the
 * jpeg_write_scanlines loop.
 * In multi-pass processing, this routine is not used.
 */

METHODDEF(void)
pass_startup (j_compress_ptr cinfo)
{
  cinfo->master->call_pass_startup = FALSE; /* reset flag so call only once */

  (*cinfo->marker->write_frame_header) (cinfo);
  (*cinfo->marker->write_scan_header) (cinfo);
}

/*
 * Finish up at end of pass.
 */

METHODDEF(void)
finish_pass_master (j_compress_ptr cinfo)
{
  my_master_ptr master = (my_master_ptr) cinfo->master;

  /* The entropy coder always needs an end-of-pass call,
   * either to analyze statistics or to flush its output buffer.
   */
  (*cinfo->entropy->finish_pass) (cinfo);

  /* Update state for next pass */
  switch (master->pass_type) {
  case main_pass:
	/* next pass is either output of scan 0 (after optimization)
	 * or output of scan 1 (if no optimization).
	 */
	master->pass_type = output_pass;
	if (! cinfo->optimize_coding)
	  master->scan_number++;
	break;
  case huff_opt_pass:
	/* next pass is always output of current scan */
	master->pass_type = output_pass;
	break;
  case output_pass:
	/* next pass is either optimization or output of next scan */
	if (cinfo->optimize_coding)
	  master->pass_type = huff_opt_pass;
	master->scan_number++;
	break;
  }

  master->pass_number++;
}

/*
 * Initialize master compression control.
 */

GLOBAL(void)
jinit_c_master_control (j_compress_ptr cinfo, boolean transcode_only)
{
  my_master_ptr master;

  master = (my_master_ptr)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(my_comp_master));
  cinfo->master = (struct jpeg_comp_master *) master;
  master->pub.prepare_for_pass = prepare_for_pass;
  master->pub.pass_startup = pass_startup;
  master->pub.finish_pass = finish_pass_master;
  master->pub.is_last_pass = FALSE;

  /* Validate parameters, determine derived values */
  initial_setup(cinfo);

  if (cinfo->scan_info != NULL) {
#ifdef C_MULTISCAN_FILES_SUPPORTED
	validate_script(cinfo);
#else
	ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
	cinfo->progressive_mode = FALSE;
	cinfo->num_scans = 1;
  }

  if (cinfo->progressive_mode)	/*  TEMPORARY HACK ??? */
	cinfo->optimize_coding = TRUE; /* assume default tables no good for progressive mode */

  /* Initialize my private state */
  if (transcode_only) {
	/* no main pass in transcoding */
	if (cinfo->optimize_coding)
	  master->pass_type = huff_opt_pass;
	else
	  master->pass_type = output_pass;
  } else {
	/* for normal compression, first pass is always this type: */
	master->pass_type = main_pass;
  }
  master->scan_number = 0;
  master->pass_number = 0;
  if (cinfo->optimize_coding)
	master->total_passes = cinfo->num_scans * 2;
  else
	master->total_passes = cinfo->num_scans;
}

/*** End of inlined file: jcmaster.c ***/


/*** Start of inlined file: jcomapi.c ***/
#define JPEG_INTERNALS

/*
 * Abort processing of a JPEG compression or decompression operation,
 * but don't destroy the object itself.
 *
 * For this, we merely clean up all the nonpermanent memory pools.
 * Note that temp files (virtual arrays) are not allowed to belong to
 * the permanent pool, so we will be able to close all temp files here.
 * Closing a data source or destination, if necessary, is the application's
 * responsibility.
 */

GLOBAL(void)
jpeg_abort (j_common_ptr cinfo)
{
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
	return;

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
	(*cinfo->mem->free_pool) (cinfo, pool);
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
	cinfo->global_state = DSTATE_START;
	/* Try to keep application from accessing now-deleted marker list.
	 * A bit kludgy to do it here, but this is the most central place.
	 */
	((j_decompress_ptr) cinfo)->marker_list = NULL;
  } else {
	cinfo->global_state = CSTATE_START;
  }
}

/*
 * Destruction of a JPEG object.
 *
 * Everything gets deallocated except the master jpeg_compress_struct itself
 * and the error manager struct.  Both of these are supplied by the application
 * and must be freed, if necessary, by the application.  (Often they are on
 * the stack and so don't need to be freed anyway.)
 * Closing a data source or destination, if necessary, is the application's
 * responsibility.
 */

GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
	(*cinfo->mem->self_destruct) (cinfo);
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
  cinfo->global_state = 0;	/* mark it destroyed */
}

/*
 * Convenience routines for allocating quantization and Huffman tables.
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
	(*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
  return tbl;
}

GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
	(*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
  return tbl;
}

/*** End of inlined file: jcomapi.c ***/


/*** Start of inlined file: jcparam.c ***/
#define JPEG_INTERNALS

/*
 * Quantization table setup routines
 */

GLOBAL(void)
jpeg_add_quant_table (j_compress_ptr cinfo, int which_tbl,
		      const unsigned int *basic_table,
		      int scale_factor, boolean force_baseline)
/* Define a quantization table equal to the basic_table times
 * a scale factor (given as a percentage).
 * If force_baseline is TRUE, the computed quantization table entries
 * are limited to 1..255 for JPEG baseline compatibility.
 */
{
  JQUANT_TBL ** qtblptr;
  int i;
  long temp;

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  if (which_tbl < 0 || which_tbl >= NUM_QUANT_TBLS)
	ERREXIT1(cinfo, JERR_DQT_INDEX, which_tbl);

  qtblptr = & cinfo->quant_tbl_ptrs[which_tbl];

  if (*qtblptr == NULL)
	*qtblptr = jpeg_alloc_quant_table((j_common_ptr) cinfo);

  for (i = 0; i < DCTSIZE2; i++) {
	temp = ((long) basic_table[i] * scale_factor + 50L) / 100L;
	/* limit the values to the valid range */
	if (temp <= 0L) temp = 1L;
	if (temp > 32767L) temp = 32767L; /* max quantizer needed for 12 bits */
	if (force_baseline && temp > 255L)
	  temp = 255L;		/* limit to baseline range if requested */
	(*qtblptr)->quantval[i] = (UINT16) temp;
  }

  /* Initialize sent_table FALSE so table will be written to JPEG file. */
  (*qtblptr)->sent_table = FALSE;
}

GLOBAL(void)
jpeg_set_linear_quality (j_compress_ptr cinfo, int scale_factor,
			 boolean force_baseline)
/* Set or change the 'quality' (quantization) setting, using default tables
 * and a straight percentage-scaling quality scale.  In most cases it's better
 * to use jpeg_set_quality (below); this entry point is provided for
 * applications that insist on a linear percentage scaling.
 */
{
  /* These are the sample quantization tables given in JPEG spec section K.1.
   * The spec says that the values given produce "good" quality, and
   * when divided by 2, "very good" quality.
   */
  static const unsigned int std_luminance_quant_tbl[DCTSIZE2] = {
	16,  11,  10,  16,  24,  40,  51,  61,
	12,  12,  14,  19,  26,  58,  60,  55,
	14,  13,  16,  24,  40,  57,  69,  56,
	14,  17,  22,  29,  51,  87,  80,  62,
	18,  22,  37,  56,  68, 109, 103,  77,
	24,  35,  55,  64,  81, 104, 113,  92,
	49,  64,  78,  87, 103, 121, 120, 101,
	72,  92,  95,  98, 112, 100, 103,  99
  };
  static const unsigned int std_chrominance_quant_tbl[DCTSIZE2] = {
	17,  18,  24,  47,  99,  99,  99,  99,
	18,  21,  26,  66,  99,  99,  99,  99,
	24,  26,  56,  99,  99,  99,  99,  99,
	47,  66,  99,  99,  99,  99,  99,  99,
	99,  99,  99,  99,  99,  99,  99,  99,
	99,  99,  99,  99,  99,  99,  99,  99,
	99,  99,  99,  99,  99,  99,  99,  99,
	99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Set up two quantization tables using the specified scaling */
  jpeg_add_quant_table(cinfo, 0, std_luminance_quant_tbl,
		       scale_factor, force_baseline);
  jpeg_add_quant_table(cinfo, 1, std_chrominance_quant_tbl,
		       scale_factor, force_baseline);
}

GLOBAL(int)
jpeg_quality_scaling (int quality)
/* Convert a user-specified quality rating to a percentage scaling factor
 * for an underlying quantization table, using our recommended scaling curve.
 * The input 'quality' factor should be 0 (terrible) to 100 (very good).
 */
{
  /* Safety limit on quality factor.  Convert 0 to 1 to avoid zero divide. */
  if (quality <= 0) quality = 1;
  if (quality > 100) quality = 100;

  /* The basic table is used as-is (scaling 100) for a quality of 50.
   * Qualities 50..100 are converted to scaling percentage 200 - 2*Q;
   * note that at Q=100 the scaling is 0, which will cause jpeg_add_quant_table
   * to make all the table entries 1 (hence, minimum quantization loss).
   * Qualities 1..50 are converted to scaling percentage 5000/Q.
   */
  if (quality < 50)
	quality = 5000 / quality;
  else
	quality = 200 - quality*2;

  return quality;
}

GLOBAL(void)
jpeg_set_quality (j_compress_ptr cinfo, int quality, boolean force_baseline)
/* Set or change the 'quality' (quantization) setting, using default tables.
 * This is the standard quality-adjusting entry point for typical user
 * interfaces; only those who want detailed control over quantization tables
 * would use the preceding three routines directly.
 */
{
  /* Convert user 0-100 rating to percentage scaling */
  quality = jpeg_quality_scaling(quality);

  /* Set up standard quality tables */
  jpeg_set_linear_quality(cinfo, quality, force_baseline);
}

/*
 * Huffman table setup routines
 */

LOCAL(void)
add_huff_table (j_compress_ptr cinfo,
		JHUFF_TBL **htblptr, const UINT8 *bits, const UINT8 *val)
/* Define a Huffman table */
{
  int nsymbols, len;

  if (*htblptr == NULL)
	*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);

  /* Copy the number-of-symbols-of-each-code-length counts */
  MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));

  /* Validate the counts.  We do this here mainly so we can copy the right
   * number of symbols from the val[] array, without risking marching off
   * the end of memory.  jchuff.c will do a more thorough test later.
   */
  nsymbols = 0;
  for (len = 1; len <= 16; len++)
	nsymbols += bits[len];
  if (nsymbols < 1 || nsymbols > 256)
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);

  MEMCOPY((*htblptr)->huffval, val, nsymbols * SIZEOF(UINT8));

  /* Initialize sent_table FALSE so table will be written to JPEG file. */
  (*htblptr)->sent_table = FALSE;
}

LOCAL(void)
std_huff_tables (j_compress_ptr cinfo)
/* Set up the standard Huffman tables (cf. JPEG standard section K.3) */
/* IMPORTANT: these are only valid for 8-bit data precision! */
{
  static const UINT8 bits_dc_luminance[17] =
	{ /* 0-base */ 0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 };
  static const UINT8 val_dc_luminance[] =
	{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };

  static const UINT8 bits_dc_chrominance[17] =
	{ /* 0-base */ 0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 };
  static const UINT8 val_dc_chrominance[] =
	{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 };

  static const UINT8 bits_ac_luminance[17] =
	{ /* 0-base */ 0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 0x7d };
  static const UINT8 val_ac_luminance[] =
	{ 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12,
	  0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07,
	  0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08,
	  0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0,
	  0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
	  0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28,
	  0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39,
	  0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49,
	  0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
	  0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
	  0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79,
	  0x7a, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
	  0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98,
	  0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
	  0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
	  0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5,
	  0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
	  0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2,
	  0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
	  0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
	  0xf9, 0xfa };

  static const UINT8 bits_ac_chrominance[17] =
	{ /* 0-base */ 0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 0x77 };
  static const UINT8 val_ac_chrominance[] =
	{ 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21,
	  0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71,
	  0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
	  0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
	  0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34,
	  0xe1, 0x25, 0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26,
	  0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38,
	  0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
	  0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
	  0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
	  0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
	  0x79, 0x7a, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
	  0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96,
	  0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
	  0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4,
	  0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3,
	  0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2,
	  0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda,
	  0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
	  0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
	  0xf9, 0xfa };

  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[0],
		 bits_dc_luminance, val_dc_luminance);
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[0],
		 bits_ac_luminance, val_ac_luminance);
  add_huff_table(cinfo, &cinfo->dc_huff_tbl_ptrs[1],
		 bits_dc_chrominance, val_dc_chrominance);
  add_huff_table(cinfo, &cinfo->ac_huff_tbl_ptrs[1],
		 bits_ac_chrominance, val_ac_chrominance);
}

/*
 * Default parameter setup for compression.
 *
 * Applications that don't choose to use this routine must do their
 * own setup of all these parameters.  Alternately, you can call this
 * to establish defaults and then alter parameters selectively.  This
 * is the recommended approach since, if we add any new parameters,
 * your code will still work (they'll be set to reasonable defaults).
 */

GLOBAL(void)
jpeg_set_defaults (j_compress_ptr cinfo)
{
  int i;

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* Allocate comp_info array large enough for maximum component count.
   * Array is made permanent in case application wants to compress
   * multiple images at same param settings.
   */
  if (cinfo->comp_info == NULL)
	cinfo->comp_info = (jpeg_component_info *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  MAX_COMPONENTS * SIZEOF(jpeg_component_info));

  /* Initialize everything not dependent on the color space */

  cinfo->data_precision = BITS_IN_JSAMPLE;
  /* Set up two quantization tables using default quality of 75 */
  jpeg_set_quality(cinfo, 75, TRUE);
  /* Set up two Huffman tables */
  std_huff_tables(cinfo);

  /* Initialize default arithmetic coding conditioning */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
	cinfo->arith_dc_L[i] = 0;
	cinfo->arith_dc_U[i] = 1;
	cinfo->arith_ac_K[i] = 5;
  }

  /* Default is no multiple-scan output */
  cinfo->scan_info = NULL;
  cinfo->num_scans = 0;

  /* Expect normal source image, not raw downsampled data */
  cinfo->raw_data_in = FALSE;

  /* Use Huffman coding, not arithmetic coding, by default */
  cinfo->arith_code = FALSE;

  /* By default, don't do extra passes to optimize entropy coding */
  cinfo->optimize_coding = FALSE;
  /* The standard Huffman tables are only valid for 8-bit data precision.
   * If the precision is higher, force optimization on so that usable
   * tables will be computed.  This test can be removed if default tables
   * are supplied that are valid for the desired precision.
   */
  if (cinfo->data_precision > 8)
	cinfo->optimize_coding = TRUE;

  /* By default, use the simpler non-cosited sampling alignment */
  cinfo->CCIR601_sampling = FALSE;

  /* No input smoothing */
  cinfo->smoothing_factor = 0;

  /* DCT algorithm preference */
  cinfo->dct_method = JDCT_DEFAULT;

  /* No restart markers */
  cinfo->restart_interval = 0;
  cinfo->restart_in_rows = 0;

  /* Fill in default JFIF marker parameters.  Note that whether the marker
   * will actually be written is determined by jpeg_set_colorspace.
   *
   * By default, the library emits JFIF version code 1.01.
   * An application that wants to emit JFIF 1.02 extension markers should set
   * JFIF_minor_version to 2.  We could probably get away with just defaulting
   * to 1.02, but there may still be some decoders in use that will complain
   * about that; saying 1.01 should minimize compatibility problems.
   */
  cinfo->JFIF_major_version = 1; /* Default JFIF version = 1.01 */
  cinfo->JFIF_minor_version = 1;
  cinfo->density_unit = 0;	/* Pixel size is unknown by default */
  cinfo->X_density = 1;		/* Pixel aspect ratio is square by default */
  cinfo->Y_density = 1;

  /* Choose JPEG colorspace based on input space, set defaults accordingly */

  jpeg_default_colorspace(cinfo);
}

/*
 * Select an appropriate JPEG colorspace for in_color_space.
 */

GLOBAL(void)
jpeg_default_colorspace (j_compress_ptr cinfo)
{
  switch (cinfo->in_color_space) {
  case JCS_GRAYSCALE:
	jpeg_set_colorspace(cinfo, JCS_GRAYSCALE);
	break;
  case JCS_RGB:
	jpeg_set_colorspace(cinfo, JCS_YCbCr);
	break;
  case JCS_YCbCr:
	jpeg_set_colorspace(cinfo, JCS_YCbCr);
	break;
  case JCS_CMYK:
	jpeg_set_colorspace(cinfo, JCS_CMYK); /* By default, no translation */
	break;
  case JCS_YCCK:
	jpeg_set_colorspace(cinfo, JCS_YCCK);
	break;
  case JCS_UNKNOWN:
	jpeg_set_colorspace(cinfo, JCS_UNKNOWN);
	break;
  default:
	ERREXIT(cinfo, JERR_BAD_IN_COLORSPACE);
  }
}

/*
 * Set the JPEG colorspace, and choose colorspace-dependent default values.
 */

GLOBAL(void)
jpeg_set_colorspace (j_compress_ptr cinfo, J_COLOR_SPACE colorspace)
{
  jpeg_component_info * compptr;
  int ci;

#define SET_COMP(index,id,hsamp,vsamp,quant,dctbl,actbl)  \
  (compptr = &cinfo->comp_info[index], \
   compptr->component_id = (id), \
   compptr->h_samp_factor = (hsamp), \
   compptr->v_samp_factor = (vsamp), \
   compptr->quant_tbl_no = (quant), \
   compptr->dc_tbl_no = (dctbl), \
   compptr->ac_tbl_no = (actbl) )

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* For all colorspaces, we use Q and Huff tables 0 for luminance components,
   * tables 1 for chrominance components.
   */

  cinfo->jpeg_color_space = colorspace;

  cinfo->write_JFIF_header = FALSE; /* No marker for non-JFIF colorspaces */
  cinfo->write_Adobe_marker = FALSE; /* write no Adobe marker by default */

  switch (colorspace) {
  case JCS_GRAYSCALE:
	cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
	cinfo->num_components = 1;
	/* JFIF specifies component ID 1 */
	SET_COMP(0, 1, 1,1, 0, 0,0);
	break;
  case JCS_RGB:
	cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag RGB */
	cinfo->num_components = 3;
	SET_COMP(0, 0x52 /* 'R' */, 1,1, 0, 0,0);
	SET_COMP(1, 0x47 /* 'G' */, 1,1, 0, 0,0);
	SET_COMP(2, 0x42 /* 'B' */, 1,1, 0, 0,0);
	break;
  case JCS_YCbCr:
	cinfo->write_JFIF_header = TRUE; /* Write a JFIF marker */
	cinfo->num_components = 3;
	/* JFIF specifies component IDs 1,2,3 */
	/* We default to 2x2 subsamples of chrominance */
	SET_COMP(0, 1, 2,2, 0, 0,0);
	SET_COMP(1, 2, 1,1, 1, 1,1);
	SET_COMP(2, 3, 1,1, 1, 1,1);
	break;
  case JCS_CMYK:
	cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag CMYK */
	cinfo->num_components = 4;
	SET_COMP(0, 0x43 /* 'C' */, 1,1, 0, 0,0);
	SET_COMP(1, 0x4D /* 'M' */, 1,1, 0, 0,0);
	SET_COMP(2, 0x59 /* 'Y' */, 1,1, 0, 0,0);
	SET_COMP(3, 0x4B /* 'K' */, 1,1, 0, 0,0);
	break;
  case JCS_YCCK:
	cinfo->write_Adobe_marker = TRUE; /* write Adobe marker to flag YCCK */
	cinfo->num_components = 4;
	SET_COMP(0, 1, 2,2, 0, 0,0);
	SET_COMP(1, 2, 1,1, 1, 1,1);
	SET_COMP(2, 3, 1,1, 1, 1,1);
	SET_COMP(3, 4, 2,2, 0, 0,0);
	break;
  case JCS_UNKNOWN:
	cinfo->num_components = cinfo->input_components;
	if (cinfo->num_components < 1 || cinfo->num_components > MAX_COMPONENTS)
	  ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	       MAX_COMPONENTS);
	for (ci = 0; ci < cinfo->num_components; ci++) {
	  SET_COMP(ci, ci, 1,1, 0, 0,0);
	}
	break;
  default:
	ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
  }
}

#ifdef C_PROGRESSIVE_SUPPORTED

LOCAL(jpeg_scan_info *)
fill_a_scan (jpeg_scan_info * scanptr, int ci,
	     int Ss, int Se, int Ah, int Al)
/* Support routine: generate one scan for specified component */
{
  scanptr->comps_in_scan = 1;
  scanptr->component_index[0] = ci;
  scanptr->Ss = Ss;
  scanptr->Se = Se;
  scanptr->Ah = Ah;
  scanptr->Al = Al;
  scanptr++;
  return scanptr;
}

LOCAL(jpeg_scan_info *)
fill_scans (jpeg_scan_info * scanptr, int ncomps,
	    int Ss, int Se, int Ah, int Al)
/* Support routine: generate one scan for each component */
{
  int ci;

  for (ci = 0; ci < ncomps; ci++) {
	scanptr->comps_in_scan = 1;
	scanptr->component_index[0] = ci;
	scanptr->Ss = Ss;
	scanptr->Se = Se;
	scanptr->Ah = Ah;
	scanptr->Al = Al;
	scanptr++;
  }
  return scanptr;
}

LOCAL(jpeg_scan_info *)
fill_dc_scans (jpeg_scan_info * scanptr, int ncomps, int Ah, int Al)
/* Support routine: generate interleaved DC scan if possible, else N scans */
{
  int ci;

  if (ncomps <= MAX_COMPS_IN_SCAN) {
	/* Single interleaved DC scan */
	scanptr->comps_in_scan = ncomps;
	for (ci = 0; ci < ncomps; ci++)
	  scanptr->component_index[ci] = ci;
	scanptr->Ss = scanptr->Se = 0;
	scanptr->Ah = Ah;
	scanptr->Al = Al;
	scanptr++;
  } else {
	/* Noninterleaved DC scan for each component */
	scanptr = fill_scans(scanptr, ncomps, 0, 0, Ah, Al);
  }
  return scanptr;
}

/*
 * Create a recommended progressive-JPEG script.
 * cinfo->num_components and cinfo->jpeg_color_space must be correct.
 */

GLOBAL(void)
jpeg_simple_progression (j_compress_ptr cinfo)
{
  int ncomps = cinfo->num_components;
  int nscans;
  jpeg_scan_info * scanptr;

  /* Safety check to ensure start_compress not called yet. */
  if (cinfo->global_state != CSTATE_START)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  /* Figure space needed for script.  Calculation must match code below! */
  if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr) {
	/* Custom script for YCbCr color images. */
	nscans = 10;
  } else {
	/* All-purpose script for other color spaces. */
	if (ncomps > MAX_COMPS_IN_SCAN)
	  nscans = 6 * ncomps;	/* 2 DC + 4 AC scans per component */
	else
	  nscans = 2 + 4 * ncomps;	/* 2 DC scans; 4 AC scans per component */
  }

  /* Allocate space for script.
   * We need to put it in the permanent pool in case the application performs
   * multiple compressions without changing the settings.  To avoid a memory
   * leak if jpeg_simple_progression is called repeatedly for the same JPEG
   * object, we try to re-use previously allocated space, and we allocate
   * enough space to handle YCbCr even if initially asked for grayscale.
   */
  if (cinfo->script_space == NULL || cinfo->script_space_size < nscans) {
	cinfo->script_space_size = MAX(nscans, 10);
	cinfo->script_space = (jpeg_scan_info *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
			cinfo->script_space_size * SIZEOF(jpeg_scan_info));
  }
  scanptr = cinfo->script_space;
  cinfo->scan_info = scanptr;
  cinfo->num_scans = nscans;

  if (ncomps == 3 && cinfo->jpeg_color_space == JCS_YCbCr) {
	/* Custom script for YCbCr color images. */
	/* Initial DC scan */
	scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
	/* Initial AC scan: get some luma data out in a hurry */
	scanptr = fill_a_scan(scanptr, 0, 1, 5, 0, 2);
	/* Chroma data is too small to be worth expending many scans on */
	scanptr = fill_a_scan(scanptr, 2, 1, 63, 0, 1);
	scanptr = fill_a_scan(scanptr, 1, 1, 63, 0, 1);
	/* Complete spectral selection for luma AC */
	scanptr = fill_a_scan(scanptr, 0, 6, 63, 0, 2);
	/* Refine next bit of luma AC */
	scanptr = fill_a_scan(scanptr, 0, 1, 63, 2, 1);
	/* Finish DC successive approximation */
	scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
	/* Finish AC successive approximation */
	scanptr = fill_a_scan(scanptr, 2, 1, 63, 1, 0);
	scanptr = fill_a_scan(scanptr, 1, 1, 63, 1, 0);
	/* Luma bottom bit comes last since it's usually largest scan */
	scanptr = fill_a_scan(scanptr, 0, 1, 63, 1, 0);
  } else {
	/* All-purpose script for other color spaces. */
	/* Successive approximation first pass */
	scanptr = fill_dc_scans(scanptr, ncomps, 0, 1);
	scanptr = fill_scans(scanptr, ncomps, 1, 5, 0, 2);
	scanptr = fill_scans(scanptr, ncomps, 6, 63, 0, 2);
	/* Successive approximation second pass */
	scanptr = fill_scans(scanptr, ncomps, 1, 63, 2, 1);
	/* Successive approximation final pass */
	scanptr = fill_dc_scans(scanptr, ncomps, 1, 0);
	scanptr = fill_scans(scanptr, ncomps, 1, 63, 1, 0);
  }
}

#endif /* C_PROGRESSIVE_SUPPORTED */

/*** End of inlined file: jcparam.c ***/


/*** Start of inlined file: jcphuff.c ***/
#define JPEG_INTERNALS

#ifdef C_PROGRESSIVE_SUPPORTED

/* Expanded entropy encoder object for progressive Huffman encoding. */

typedef struct {
  struct jpeg_entropy_encoder pub; /* public fields */

  /* Mode flag: TRUE for optimization, FALSE for actual data output */
  boolean gather_statistics;

  /* Bit-level coding status.
   * next_output_byte/free_in_buffer are local copies of cinfo->dest fields.
   */
  JOCTET * next_output_byte;	/* => next byte to write in buffer */
  size_t free_in_buffer;	/* # of byte spaces remaining in buffer */
  INT32 put_buffer;		/* current bit-accumulation buffer */
  int put_bits;			/* # of bits now in it */
  j_compress_ptr cinfo;		/* link to cinfo (needed for dump_buffer) */

  /* Coding status for DC components */
  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */

  /* Coding status for AC components */
  int ac_tbl_no;		/* the table number of the single component */
  unsigned int EOBRUN;		/* run length of EOBs */
  unsigned int BE;		/* # of buffered correction bits before MCU */
  char * bit_buffer;		/* buffer for correction bits (1 per char) */
  /* packing correction bits tightly would save some space but cost time... */

  unsigned int restarts_to_go;	/* MCUs left in this restart interval */
  int next_restart_num;		/* next restart number to write (0-7) */

  /* Pointers to derived tables (these workspaces have image lifespan).
   * Since any one scan codes only DC or only AC, we only need one set
   * of tables, not one for DC and one for AC.
   */
  c_derived_tbl * derived_tbls[NUM_HUFF_TBLS];

  /* Statistics tables for optimization; again, one set is enough */
  long * count_ptrs[NUM_HUFF_TBLS];
} phuff_entropy_encoder;

typedef phuff_entropy_encoder * phuff_entropy_ptr;

/* MAX_CORR_BITS is the number of bits the AC refinement correction-bit
 * buffer can hold.  Larger sizes may slightly improve compression, but
 * 1000 is already well into the realm of overkill.
 * The minimum safe size is 64 bits.
 */

#define MAX_CORR_BITS  1000	/* Max # of correction bits I can buffer */

/* IRIGHT_SHIFT is like RIGHT_SHIFT, but works on int rather than INT32.
 * We assume that int right shift is unsigned if INT32 right shift is,
 * which should be safe.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	int ishift_temp;
#define IRIGHT_SHIFT(x,shft)  \
	((ishift_temp = (x)) < 0 ? \
	 (ishift_temp >> (shft)) | ((~0) << (16-(shft))) : \
	 (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

/* Forward declarations */
METHODDEF(boolean) encode_mcu_DC_first JPP((j_compress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF(boolean) encode_mcu_AC_first JPP((j_compress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF(boolean) encode_mcu_DC_refine JPP((j_compress_ptr cinfo,
					     JBLOCKROW *MCU_data));
METHODDEF(boolean) encode_mcu_AC_refine JPP((j_compress_ptr cinfo,
					     JBLOCKROW *MCU_data));
METHODDEF(void) finish_pass_phuff JPP((j_compress_ptr cinfo));
METHODDEF(void) finish_pass_gather_phuff JPP((j_compress_ptr cinfo));

/*
 * Initialize for a Huffman-compressed scan using progressive JPEG.
 */

METHODDEF(void)
start_pass_phuff (j_compress_ptr cinfo, boolean gather_statistics)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  boolean is_DC_band;
  int ci, tbl;
  jpeg_component_info * compptr;

  entropy->cinfo = cinfo;
  entropy->gather_statistics = gather_statistics;

  is_DC_band = (cinfo->Ss == 0);

  /* We assume jcmaster.c already validated the scan parameters. */

  /* Select execution routines */
  if (cinfo->Ah == 0) {
	if (is_DC_band)
	  entropy->pub.encode_mcu = encode_mcu_DC_first;
	else
	  entropy->pub.encode_mcu = encode_mcu_AC_first;
  } else {
	if (is_DC_band)
	  entropy->pub.encode_mcu = encode_mcu_DC_refine;
	else {
	  entropy->pub.encode_mcu = encode_mcu_AC_refine;
	  /* AC refinement needs a correction bit buffer */
	  if (entropy->bit_buffer == NULL)
	entropy->bit_buffer = (char *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      MAX_CORR_BITS * SIZEOF(char));
	}
  }
  if (gather_statistics)
	entropy->pub.finish_pass = finish_pass_gather_phuff;
  else
	entropy->pub.finish_pass = finish_pass_phuff;

  /* Only DC coefficients may be interleaved, so cinfo->comps_in_scan = 1
   * for AC coefficients.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	/* Initialize DC predictions to 0 */
	entropy->last_dc_val[ci] = 0;
	/* Get table index */
	if (is_DC_band) {
	  if (cinfo->Ah != 0)	/* DC refinement needs no table */
	continue;
	  tbl = compptr->dc_tbl_no;
	} else {
	  entropy->ac_tbl_no = tbl = compptr->ac_tbl_no;
	}
	if (gather_statistics) {
	  /* Check for invalid table index */
	  /* (make_c_derived_tbl does this in the other path) */
	  if (tbl < 0 || tbl >= NUM_HUFF_TBLS)
		ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tbl);
	  /* Allocate and zero the statistics tables */
	  /* Note that jpeg_gen_optimal_table expects 257 entries in each table! */
	  if (entropy->count_ptrs[tbl] == NULL)
	entropy->count_ptrs[tbl] = (long *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				      257 * SIZEOF(long));
	  MEMZERO(entropy->count_ptrs[tbl], 257 * SIZEOF(long));
	} else {
	  /* Compute derived values for Huffman table */
	  /* We may do this more than once for a table, but it's not expensive */
	  jpeg_make_c_derived_tbl(cinfo, is_DC_band, tbl,
			      & entropy->derived_tbls[tbl]);
	}
  }

  /* Initialize AC stuff */
  entropy->EOBRUN = 0;
  entropy->BE = 0;

  /* Initialize bit buffer to empty */
  entropy->put_buffer = 0;
  entropy->put_bits = 0;

  /* Initialize restart stuff */
  entropy->restarts_to_go = cinfo->restart_interval;
  entropy->next_restart_num = 0;
}

/* Outputting bytes to the file.
 * NB: these must be called only when actually outputting,
 * that is, entropy->gather_statistics == FALSE.
 */

/* Emit a byte */
#define emit_byte(entropy,val)  \
	{ *(entropy)->next_output_byte++ = (JOCTET) (val);  \
	  if (--(entropy)->free_in_buffer == 0)  \
	    dump_buffer_p(entropy); }

LOCAL(void)
dump_buffer_p (phuff_entropy_ptr entropy)
/* Empty the output buffer; we do not support suspension in this module. */
{
  struct jpeg_destination_mgr * dest = entropy->cinfo->dest;

  if (! (*dest->empty_output_buffer) (entropy->cinfo))
	ERREXIT(entropy->cinfo, JERR_CANT_SUSPEND);
  /* After a successful buffer dump, must reset buffer pointers */
  entropy->next_output_byte = dest->next_output_byte;
  entropy->free_in_buffer = dest->free_in_buffer;
}

/* Outputting bits to the file */

/* Only the right 24 bits of put_buffer are used; the valid bits are
 * left-justified in this part.  At most 16 bits can be passed to emit_bits
 * in one call, and we never retain more than 7 bits in put_buffer
 * between calls, so 24 bits are sufficient.
 */

INLINE
LOCAL(void)
emit_bits_p (phuff_entropy_ptr entropy, unsigned int code, int size)
/* Emit some bits, unless we are in gather mode */
{
  /* This routine is heavily used, so it's worth coding tightly. */
  register INT32 put_buffer = (INT32) code;
  register int put_bits = entropy->put_bits;

  /* if size is 0, caller used an invalid Huffman table entry */
  if (size == 0)
	ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);

  if (entropy->gather_statistics)
	return;			/* do nothing if we're only getting stats */

  put_buffer &= (((INT32) 1)<<size) - 1; /* mask off any extra bits in code */

  put_bits += size;		/* new number of bits in buffer */

  put_buffer <<= 24 - put_bits; /* align incoming bits */

  put_buffer |= entropy->put_buffer; /* and merge with old buffer contents */

  while (put_bits >= 8) {
	int c = (int) ((put_buffer >> 16) & 0xFF);

	emit_byte(entropy, c);
	if (c == 0xFF) {		/* need to stuff a zero byte? */
	  emit_byte(entropy, 0);
	}
	put_buffer <<= 8;
	put_bits -= 8;
  }

  entropy->put_buffer = put_buffer; /* update variables */
  entropy->put_bits = put_bits;
}

LOCAL(void)
flush_bits_p (phuff_entropy_ptr entropy)
{
  emit_bits_p(entropy, 0x7F, 7); /* fill any partial byte with ones */
  entropy->put_buffer = 0;     /* and reset bit-buffer to empty */
  entropy->put_bits = 0;
}

/*
 * Emit (or just count) a Huffman symbol.
 */

INLINE
LOCAL(void)
emit_symbol (phuff_entropy_ptr entropy, int tbl_no, int symbol)
{
  if (entropy->gather_statistics)
	entropy->count_ptrs[tbl_no][symbol]++;
  else {
	c_derived_tbl * tbl = entropy->derived_tbls[tbl_no];
	emit_bits_p(entropy, tbl->ehufco[symbol], tbl->ehufsi[symbol]);
  }
}

/*
 * Emit bits from a correction bit buffer.
 */

LOCAL(void)
emit_buffered_bits (phuff_entropy_ptr entropy, char * bufstart,
		    unsigned int nbits)
{
  if (entropy->gather_statistics)
	return;			/* no real work */

  while (nbits > 0) {
	emit_bits_p(entropy, (unsigned int) (*bufstart), 1);
	bufstart++;
	nbits--;
  }
}

/*
 * Emit any pending EOBRUN symbol.
 */

LOCAL(void)
emit_eobrun (phuff_entropy_ptr entropy)
{
  register int temp, nbits;

  if (entropy->EOBRUN > 0) {	/* if there is any pending EOBRUN */
	temp = entropy->EOBRUN;
	nbits = 0;
	while ((temp >>= 1))
	  nbits++;
	/* safety check: shouldn't happen given limited correction-bit buffer */
	if (nbits > 14)
	  ERREXIT(entropy->cinfo, JERR_HUFF_MISSING_CODE);

	emit_symbol(entropy, entropy->ac_tbl_no, nbits << 4);
	if (nbits)
	  emit_bits_p(entropy, entropy->EOBRUN, nbits);

	entropy->EOBRUN = 0;

	/* Emit any buffered correction bits */
	emit_buffered_bits(entropy, entropy->bit_buffer, entropy->BE);
	entropy->BE = 0;
  }
}

/*
 * Emit a restart marker & resynchronize predictions.
 */

LOCAL(void)
emit_restart_p (phuff_entropy_ptr entropy, int restart_num)
{
  int ci;

  emit_eobrun(entropy);

  if (! entropy->gather_statistics) {
	flush_bits_p(entropy);
	emit_byte(entropy, 0xFF);
	emit_byte(entropy, JPEG_RST0 + restart_num);
  }

  if (entropy->cinfo->Ss == 0) {
	/* Re-initialize DC predictions to 0 */
	for (ci = 0; ci < entropy->cinfo->comps_in_scan; ci++)
	  entropy->last_dc_val[ci] = 0;
  } else {
	/* Re-initialize all AC-related fields to 0 */
	entropy->EOBRUN = 0;
	entropy->BE = 0;
  }
}

/*
 * MCU encoding for DC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
encode_mcu_DC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  register int temp, temp2;
  register int nbits;
  int blkn, ci;
  int Al = cinfo->Al;
  JBLOCKROW block;
  jpeg_component_info * compptr;
  ISHIFT_TEMPS

  entropy->next_output_byte = cinfo->dest->next_output_byte;
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
	if (entropy->restarts_to_go == 0)
	  emit_restart_p(entropy, entropy->next_restart_num);

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
	block = MCU_data[blkn];
	ci = cinfo->MCU_membership[blkn];
	compptr = cinfo->cur_comp_info[ci];

	/* Compute the DC value after the required point transform by Al.
	 * This is simply an arithmetic right shift.
	 */
	temp2 = IRIGHT_SHIFT((int) ((*block)[0]), Al);

	/* DC differences are figured on the point-transformed values. */
	temp = temp2 - entropy->last_dc_val[ci];
	entropy->last_dc_val[ci] = temp2;

	/* Encode the DC coefficient difference per section G.1.2.1 */
	temp2 = temp;
	if (temp < 0) {
	  temp = -temp;		/* temp is abs value of input */
	  /* For a negative input, want temp2 = bitwise complement of abs(input) */
	  /* This code assumes we are on a two's complement machine */
	  temp2--;
	}

	/* Find the number of bits needed for the magnitude of the coefficient */
	nbits = 0;
	while (temp) {
	  nbits++;
	  temp >>= 1;
	}
	/* Check for out-of-range coefficient values.
	 * Since we're encoding a difference, the range limit is twice as much.
	 */
	if (nbits > MAX_COEF_BITS+1)
	  ERREXIT(cinfo, JERR_BAD_DCT_COEF);

	/* Count/emit the Huffman-coded symbol for the number of bits */
	emit_symbol(entropy, compptr->dc_tbl_no, nbits);

	/* Emit that number of bits of the value, if positive, */
	/* or the complement of its magnitude, if negative. */
	if (nbits)			/* emit_bits rejects calls with size 0 */
	  emit_bits_p(entropy, (unsigned int) temp2, nbits);
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0) {
	  entropy->restarts_to_go = cinfo->restart_interval;
	  entropy->next_restart_num++;
	  entropy->next_restart_num &= 7;
	}
	entropy->restarts_to_go--;
  }

  return TRUE;
}

/*
 * MCU encoding for AC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
encode_mcu_AC_first (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  register int temp, temp2;
  register int nbits;
  register int r, k;
  int Se = cinfo->Se;
  int Al = cinfo->Al;
  JBLOCKROW block;

  entropy->next_output_byte = cinfo->dest->next_output_byte;
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
	if (entropy->restarts_to_go == 0)
	  emit_restart_p(entropy, entropy->next_restart_num);

  /* Encode the MCU data block */
  block = MCU_data[0];

  /* Encode the AC coefficients per section G.1.2.2, fig. G.3 */

  r = 0;			/* r = run length of zeros */

  for (k = cinfo->Ss; k <= Se; k++) {
	if ((temp = (*block)[jpeg_natural_order[k]]) == 0) {
	  r++;
	  continue;
	}
	/* We must apply the point transform by Al.  For AC coefficients this
	 * is an integer division with rounding towards 0.  To do this portably
	 * in C, we shift after obtaining the absolute value; so the code is
	 * interwoven with finding the abs value (temp) and output bits (temp2).
	 */
	if (temp < 0) {
	  temp = -temp;		/* temp is abs value of input */
	  temp >>= Al;		/* apply the point transform */
	  /* For a negative coef, want temp2 = bitwise complement of abs(coef) */
	  temp2 = ~temp;
	} else {
	  temp >>= Al;		/* apply the point transform */
	  temp2 = temp;
	}
	/* Watch out for case that nonzero coef is zero after point transform */
	if (temp == 0) {
	  r++;
	  continue;
	}

	/* Emit any pending EOBRUN */
	if (entropy->EOBRUN > 0)
	  emit_eobrun(entropy);
	/* if run length > 15, must emit special run-length-16 codes (0xF0) */
	while (r > 15) {
	  emit_symbol(entropy, entropy->ac_tbl_no, 0xF0);
	  r -= 16;
	}

	/* Find the number of bits needed for the magnitude of the coefficient */
	nbits = 1;			/* there must be at least one 1 bit */
	while ((temp >>= 1))
	  nbits++;
	/* Check for out-of-range coefficient values */
	if (nbits > MAX_COEF_BITS)
	  ERREXIT(cinfo, JERR_BAD_DCT_COEF);

	/* Count/emit Huffman symbol for run length / number of bits */
	emit_symbol(entropy, entropy->ac_tbl_no, (r << 4) + nbits);

	/* Emit that number of bits of the value, if positive, */
	/* or the complement of its magnitude, if negative. */
	emit_bits_p(entropy, (unsigned int) temp2, nbits);

	r = 0;			/* reset zero run length */
  }

  if (r > 0) {			/* If there are trailing zeroes, */
	entropy->EOBRUN++;		/* count an EOB */
	if (entropy->EOBRUN == 0x7FFF)
	  emit_eobrun(entropy);	/* force it out to avoid overflow */
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0) {
	  entropy->restarts_to_go = cinfo->restart_interval;
	  entropy->next_restart_num++;
	  entropy->next_restart_num &= 7;
	}
	entropy->restarts_to_go--;
  }

  return TRUE;
}

/*
 * MCU encoding for DC successive approximation refinement scan.
 * Note: we assume such scans can be multi-component, although the spec
 * is not very clear on the point.
 */

METHODDEF(boolean)
encode_mcu_DC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  register int temp;
  int blkn;
  int Al = cinfo->Al;
  JBLOCKROW block;

  entropy->next_output_byte = cinfo->dest->next_output_byte;
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
	if (entropy->restarts_to_go == 0)
	  emit_restart_p(entropy, entropy->next_restart_num);

  /* Encode the MCU data blocks */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
	block = MCU_data[blkn];

	/* We simply emit the Al'th bit of the DC coefficient value. */
	temp = (*block)[0];
	emit_bits_p(entropy, (unsigned int) (temp >> Al), 1);
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0) {
	  entropy->restarts_to_go = cinfo->restart_interval;
	  entropy->next_restart_num++;
	  entropy->next_restart_num &= 7;
	}
	entropy->restarts_to_go--;
  }

  return TRUE;
}

/*
 * MCU encoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
encode_mcu_AC_refine (j_compress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  register int temp;
  register int r, k;
  int EOB;
  char *BR_buffer;
  unsigned int BR;
  int Se = cinfo->Se;
  int Al = cinfo->Al;
  JBLOCKROW block;
  int absvalues[DCTSIZE2];

  entropy->next_output_byte = cinfo->dest->next_output_byte;
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;

  /* Emit restart marker if needed */
  if (cinfo->restart_interval)
	if (entropy->restarts_to_go == 0)
	  emit_restart_p(entropy, entropy->next_restart_num);

  /* Encode the MCU data block */
  block = MCU_data[0];

  /* It is convenient to make a pre-pass to determine the transformed
   * coefficients' absolute values and the EOB position.
   */
  EOB = 0;
  for (k = cinfo->Ss; k <= Se; k++) {
	temp = (*block)[jpeg_natural_order[k]];
	/* We must apply the point transform by Al.  For AC coefficients this
	 * is an integer division with rounding towards 0.  To do this portably
	 * in C, we shift after obtaining the absolute value.
	 */
	if (temp < 0)
	  temp = -temp;		/* temp is abs value of input */
	temp >>= Al;		/* apply the point transform */
	absvalues[k] = temp;	/* save abs value for main pass */
	if (temp == 1)
	  EOB = k;			/* EOB = index of last newly-nonzero coef */
  }

  /* Encode the AC coefficients per section G.1.2.3, fig. G.7 */

  r = 0;			/* r = run length of zeros */
  BR = 0;			/* BR = count of buffered bits added now */
  BR_buffer = entropy->bit_buffer + entropy->BE; /* Append bits to buffer */

  for (k = cinfo->Ss; k <= Se; k++) {
	if ((temp = absvalues[k]) == 0) {
	  r++;
	  continue;
	}

	/* Emit any required ZRLs, but not if they can be folded into EOB */
	while (r > 15 && k <= EOB) {
	  /* emit any pending EOBRUN and the BE correction bits */
	  emit_eobrun(entropy);
	  /* Emit ZRL */
	  emit_symbol(entropy, entropy->ac_tbl_no, 0xF0);
	  r -= 16;
	  /* Emit buffered correction bits that must be associated with ZRL */
	  emit_buffered_bits(entropy, BR_buffer, BR);
	  BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
	  BR = 0;
	}

	/* If the coef was previously nonzero, it only needs a correction bit.
	 * NOTE: a straight translation of the spec's figure G.7 would suggest
	 * that we also need to test r > 15.  But if r > 15, we can only get here
	 * if k > EOB, which implies that this coefficient is not 1.
	 */
	if (temp > 1) {
	  /* The correction bit is the next bit of the absolute value. */
	  BR_buffer[BR++] = (char) (temp & 1);
	  continue;
	}

	/* Emit any pending EOBRUN and the BE correction bits */
	emit_eobrun(entropy);

	/* Count/emit Huffman symbol for run length / number of bits */
	emit_symbol(entropy, entropy->ac_tbl_no, (r << 4) + 1);

	/* Emit output bit for newly-nonzero coef */
	temp = ((*block)[jpeg_natural_order[k]] < 0) ? 0 : 1;
	emit_bits_p(entropy, (unsigned int) temp, 1);

	/* Emit buffered correction bits that must be associated with this code */
	emit_buffered_bits(entropy, BR_buffer, BR);
	BR_buffer = entropy->bit_buffer; /* BE bits are gone now */
	BR = 0;
	r = 0;			/* reset zero run length */
  }

  if (r > 0 || BR > 0) {	/* If there are trailing zeroes, */
	entropy->EOBRUN++;		/* count an EOB */
	entropy->BE += BR;		/* concat my correction bits to older ones */
	/* We force out the EOB if we risk either:
	 * 1. overflow of the EOB counter;
	 * 2. overflow of the correction bit buffer during the next MCU.
	 */
	if (entropy->EOBRUN == 0x7FFF || entropy->BE > (MAX_CORR_BITS-DCTSIZE2+1))
	  emit_eobrun(entropy);
  }

  cinfo->dest->next_output_byte = entropy->next_output_byte;
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;

  /* Update restart-interval state too */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0) {
	  entropy->restarts_to_go = cinfo->restart_interval;
	  entropy->next_restart_num++;
	  entropy->next_restart_num &= 7;
	}
	entropy->restarts_to_go--;
  }

  return TRUE;
}

/*
 * Finish up at the end of a Huffman-compressed progressive scan.
 */

METHODDEF(void)
finish_pass_phuff (j_compress_ptr cinfo)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;

  entropy->next_output_byte = cinfo->dest->next_output_byte;
  entropy->free_in_buffer = cinfo->dest->free_in_buffer;

  /* Flush out any buffered data */
  emit_eobrun(entropy);
  flush_bits_p(entropy);

  cinfo->dest->next_output_byte = entropy->next_output_byte;
  cinfo->dest->free_in_buffer = entropy->free_in_buffer;
}

/*
 * Finish up a statistics-gathering pass and create the new Huffman tables.
 */

METHODDEF(void)
finish_pass_gather_phuff (j_compress_ptr cinfo)
{
  phuff_entropy_ptr entropy = (phuff_entropy_ptr) cinfo->entropy;
  boolean is_DC_band;
  int ci, tbl;
  jpeg_component_info * compptr;
  JHUFF_TBL **htblptr;
  boolean did[NUM_HUFF_TBLS];

  /* Flush out buffered data (all we care about is counting the EOB symbol) */
  emit_eobrun(entropy);

  is_DC_band = (cinfo->Ss == 0);

  /* It's important not to apply jpeg_gen_optimal_table more than once
   * per table, because it clobbers the input frequency counts!
   */
  MEMZERO(did, SIZEOF(did));

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	if (is_DC_band) {
	  if (cinfo->Ah != 0)	/* DC refinement needs no table */
	continue;
	  tbl = compptr->dc_tbl_no;
	} else {
	  tbl = compptr->ac_tbl_no;
	}
	if (! did[tbl]) {
	  if (is_DC_band)
		htblptr = & cinfo->dc_huff_tbl_ptrs[tbl];
	  else
		htblptr = & cinfo->ac_huff_tbl_ptrs[tbl];
	  if (*htblptr == NULL)
		*htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
	  jpeg_gen_optimal_table(cinfo, *htblptr, entropy->count_ptrs[tbl]);
	  did[tbl] = TRUE;
	}
  }
}

/*
 * Module initialization routine for progressive Huffman entropy encoding.
 */

GLOBAL(void)
jinit_phuff_encoder (j_compress_ptr cinfo)
{
  phuff_entropy_ptr entropy;
  int i;

  entropy = (phuff_entropy_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(phuff_entropy_encoder));
  cinfo->entropy = (struct jpeg_entropy_encoder *) entropy;
  entropy->pub.start_pass = start_pass_phuff;

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
	entropy->derived_tbls[i] = NULL;
	entropy->count_ptrs[i] = NULL;
  }
  entropy->bit_buffer = NULL;	/* needed only in AC refinement scan */
}

#endif /* C_PROGRESSIVE_SUPPORTED */

/*** End of inlined file: jcphuff.c ***/


/*** Start of inlined file: jcprepct.c ***/
#define JPEG_INTERNALS

/* At present, jcsample.c can request context rows only for smoothing.
 * In the future, we might also need context rows for CCIR601 sampling
 * or other more-complex downsampling procedures.  The code to support
 * context rows should be compiled only if needed.
 */
#ifdef INPUT_SMOOTHING_SUPPORTED
#define CONTEXT_ROWS_SUPPORTED
#endif

/*
 * For the simple (no-context-row) case, we just need to buffer one
 * row group's worth of pixels for the downsampling step.  At the bottom of
 * the image, we pad to a full row group by replicating the last pixel row.
 * The downsampler's last output row is then replicated if needed to pad
 * out to a full iMCU row.
 *
 * When providing context rows, we must buffer three row groups' worth of
 * pixels.  Three row groups are physically allocated, but the row pointer
 * arrays are made five row groups high, with the extra pointers above and
 * below "wrapping around" to point to the last and first real row groups.
 * This allows the downsampler to access the proper context rows.
 * At the top and bottom of the image, we create dummy context rows by
 * copying the first or last real pixel row.  This copying could be avoided
 * by pointer hacking as is done in jdmainct.c, but it doesn't seem worth the
 * trouble on the compression side.
 */

/* Private buffer controller object */

typedef struct {
  struct jpeg_c_prep_controller pub; /* public fields */

  /* Downsampling input buffer.  This buffer holds color-converted data
   * until we have enough to do a downsample step.
   */
  JSAMPARRAY color_buf[MAX_COMPONENTS];

  JDIMENSION rows_to_go;	/* counts rows remaining in source image */
  int next_buf_row;		/* index of next row to store in color_buf */

#ifdef CONTEXT_ROWS_SUPPORTED	/* only needed for context case */
  int this_row_group;		/* starting row index of group to process */
  int next_buf_stop;		/* downsample when we reach this index */
#endif
} my_prep_controller;

typedef my_prep_controller * my_prep_ptr;

/*
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_prep (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;

  if (pass_mode != JBUF_PASS_THRU)
	ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  /* Initialize total-height counter for detecting bottom of image */
  prep->rows_to_go = cinfo->image_height;
  /* Mark the conversion buffer empty */
  prep->next_buf_row = 0;
#ifdef CONTEXT_ROWS_SUPPORTED
  /* Preset additional state variables for context mode.
   * These aren't used in non-context mode, so we needn't test which mode.
   */
  prep->this_row_group = 0;
  /* Set next_buf_stop to stop after two row groups have been read in. */
  prep->next_buf_stop = 2 * cinfo->max_v_samp_factor;
#endif
}

/*
 * Expand an image vertically from height input_rows to height output_rows,
 * by duplicating the bottom row.
 */

LOCAL(void)
expand_bottom_edge (JSAMPARRAY image_data, JDIMENSION num_cols,
		    int input_rows, int output_rows)
{
  register int row;

  for (row = input_rows; row < output_rows; row++) {
	jcopy_sample_rows(image_data, input_rows-1, image_data, row,
		      1, num_cols);
  }
}

/*
 * Process some data in the simple no-context case.
 *
 * Preprocessor output data is counted in "row groups".  A row group
 * is defined to be v_samp_factor sample rows of each component.
 * Downsampling will produce this much data from each max_v_samp_factor
 * input rows.
 */

METHODDEF(void)
pre_process_data (j_compress_ptr cinfo,
		  JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
		  JDIMENSION in_rows_avail,
		  JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
		  JDIMENSION out_row_groups_avail)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
  int numrows, ci;
  JDIMENSION inrows;
  jpeg_component_info * compptr;

  while (*in_row_ctr < in_rows_avail &&
	 *out_row_group_ctr < out_row_groups_avail) {
	/* Do color conversion to fill the conversion buffer. */
	inrows = in_rows_avail - *in_row_ctr;
	numrows = cinfo->max_v_samp_factor - prep->next_buf_row;
	numrows = (int) MIN((JDIMENSION) numrows, inrows);
	(*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
				       prep->color_buf,
				       (JDIMENSION) prep->next_buf_row,
				       numrows);
	*in_row_ctr += numrows;
	prep->next_buf_row += numrows;
	prep->rows_to_go -= numrows;
	/* If at bottom of image, pad to fill the conversion buffer. */
	if (prep->rows_to_go == 0 &&
	prep->next_buf_row < cinfo->max_v_samp_factor) {
	  for (ci = 0; ci < cinfo->num_components; ci++) {
	expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
			   prep->next_buf_row, cinfo->max_v_samp_factor);
	  }
	  prep->next_buf_row = cinfo->max_v_samp_factor;
	}
	/* If we've filled the conversion buffer, empty it. */
	if (prep->next_buf_row == cinfo->max_v_samp_factor) {
	  (*cinfo->downsample->downsample) (cinfo,
					prep->color_buf, (JDIMENSION) 0,
					output_buf, *out_row_group_ctr);
	  prep->next_buf_row = 0;
	  (*out_row_group_ctr)++;
	}
	/* If at bottom of image, pad the output to a full iMCU height.
	 * Note we assume the caller is providing a one-iMCU-height output buffer!
	 */
	if (prep->rows_to_go == 0 &&
	*out_row_group_ctr < out_row_groups_avail) {
	  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	expand_bottom_edge(output_buf[ci],
			   compptr->width_in_blocks * DCTSIZE,
			   (int) (*out_row_group_ctr * compptr->v_samp_factor),
			   (int) (out_row_groups_avail * compptr->v_samp_factor));
	  }
	  *out_row_group_ctr = out_row_groups_avail;
	  break;			/* can exit outer loop without test */
	}
  }
}

#ifdef CONTEXT_ROWS_SUPPORTED

/*
 * Process some data in the context case.
 */

METHODDEF(void)
pre_process_context (j_compress_ptr cinfo,
		     JSAMPARRAY input_buf, JDIMENSION *in_row_ctr,
		     JDIMENSION in_rows_avail,
		     JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr,
		     JDIMENSION out_row_groups_avail)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
  int numrows, ci;
  int buf_height = cinfo->max_v_samp_factor * 3;
  JDIMENSION inrows;

  while (*out_row_group_ctr < out_row_groups_avail) {
	if (*in_row_ctr < in_rows_avail) {
	  /* Do color conversion to fill the conversion buffer. */
	  inrows = in_rows_avail - *in_row_ctr;
	  numrows = prep->next_buf_stop - prep->next_buf_row;
	  numrows = (int) MIN((JDIMENSION) numrows, inrows);
	  (*cinfo->cconvert->color_convert) (cinfo, input_buf + *in_row_ctr,
					 prep->color_buf,
					 (JDIMENSION) prep->next_buf_row,
					 numrows);
	  /* Pad at top of image, if first time through */
	  if (prep->rows_to_go == cinfo->image_height) {
	for (ci = 0; ci < cinfo->num_components; ci++) {
	  int row;
	  for (row = 1; row <= cinfo->max_v_samp_factor; row++) {
	    jcopy_sample_rows(prep->color_buf[ci], 0,
			      prep->color_buf[ci], -row,
			      1, cinfo->image_width);
	  }
	}
	  }
	  *in_row_ctr += numrows;
	  prep->next_buf_row += numrows;
	  prep->rows_to_go -= numrows;
	} else {
	  /* Return for more data, unless we are at the bottom of the image. */
	  if (prep->rows_to_go != 0)
	break;
	  /* When at bottom of image, pad to fill the conversion buffer. */
	  if (prep->next_buf_row < prep->next_buf_stop) {
	for (ci = 0; ci < cinfo->num_components; ci++) {
	  expand_bottom_edge(prep->color_buf[ci], cinfo->image_width,
			     prep->next_buf_row, prep->next_buf_stop);
	}
	prep->next_buf_row = prep->next_buf_stop;
	  }
	}
	/* If we've gotten enough data, downsample a row group. */
	if (prep->next_buf_row == prep->next_buf_stop) {
	  (*cinfo->downsample->downsample) (cinfo,
					prep->color_buf,
					(JDIMENSION) prep->this_row_group,
					output_buf, *out_row_group_ctr);
	  (*out_row_group_ctr)++;
	  /* Advance pointers with wraparound as necessary. */
	  prep->this_row_group += cinfo->max_v_samp_factor;
	  if (prep->this_row_group >= buf_height)
	prep->this_row_group = 0;
	  if (prep->next_buf_row >= buf_height)
	prep->next_buf_row = 0;
	  prep->next_buf_stop = prep->next_buf_row + cinfo->max_v_samp_factor;
	}
  }
}

/*
 * Create the wrapped-around downsampling input buffer needed for context mode.
 */

LOCAL(void)
create_context_buffer (j_compress_ptr cinfo)
{
  my_prep_ptr prep = (my_prep_ptr) cinfo->prep;
  int rgroup_height = cinfo->max_v_samp_factor;
  int ci, i;
  jpeg_component_info * compptr;
  JSAMPARRAY true_buffer, fake_buffer;

  /* Grab enough space for fake row pointers for all the components;
   * we need five row groups' worth of pointers for each component.
   */
  fake_buffer = (JSAMPARRAY)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(cinfo->num_components * 5 * rgroup_height) *
				SIZEOF(JSAMPROW));

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* Allocate the actual buffer space (3 row groups) for this component.
	 * We make the buffer wide enough to allow the downsampler to edge-expand
	 * horizontally within the buffer, if it so chooses.
	 */
	true_buffer = (*cinfo->mem->alloc_sarray)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE,
	   (JDIMENSION) (((long) compptr->width_in_blocks * DCTSIZE *
		      cinfo->max_h_samp_factor) / compptr->h_samp_factor),
	   (JDIMENSION) (3 * rgroup_height));
	/* Copy true buffer row pointers into the middle of the fake row array */
	MEMCOPY(fake_buffer + rgroup_height, true_buffer,
	    3 * rgroup_height * SIZEOF(JSAMPROW));
	/* Fill in the above and below wraparound pointers */
	for (i = 0; i < rgroup_height; i++) {
	  fake_buffer[i] = true_buffer[2 * rgroup_height + i];
	  fake_buffer[4 * rgroup_height + i] = true_buffer[i];
	}
	prep->color_buf[ci] = fake_buffer + rgroup_height;
	fake_buffer += 5 * rgroup_height; /* point to space for next component */
  }
}

#endif /* CONTEXT_ROWS_SUPPORTED */

/*
 * Initialize preprocessing controller.
 */

GLOBAL(void)
jinit_c_prep_controller (j_compress_ptr cinfo, boolean need_full_buffer)
{
  my_prep_ptr prep;
  int ci;
  jpeg_component_info * compptr;

  if (need_full_buffer)		/* safety check */
	ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  prep = (my_prep_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_prep_controller));
  cinfo->prep = (struct jpeg_c_prep_controller *) prep;
  prep->pub.start_pass = start_pass_prep;

  /* Allocate the color conversion buffer.
   * We make the buffer wide enough to allow the downsampler to edge-expand
   * horizontally within the buffer, if it so chooses.
   */
  if (cinfo->downsample->need_context_rows) {
	/* Set up to provide context rows */
#ifdef CONTEXT_ROWS_SUPPORTED
	prep->pub.pre_process_data = pre_process_context;
	create_context_buffer(cinfo);
#else
	ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
	/* No context, just make it tall enough for one row group */
	prep->pub.pre_process_data = pre_process_data;
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
	  prep->color_buf[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) (((long) compptr->width_in_blocks * DCTSIZE *
			cinfo->max_h_samp_factor) / compptr->h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
	}
  }
}

/*** End of inlined file: jcprepct.c ***/


/*** Start of inlined file: jcsample.c ***/
#define JPEG_INTERNALS

/* Pointer to routine to downsample a single component */
typedef JMETHOD(void, downsample1_ptr,
		(j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data));

/* Private subobject */

typedef struct {
  struct jpeg_downsampler pub;	/* public fields */

  /* Downsampling method pointers, one per component */
  downsample1_ptr methods[MAX_COMPONENTS];
} my_downsampler;

typedef my_downsampler * my_downsample_ptr;

/*
 * Initialize for a downsampling pass.
 */

METHODDEF(void)
start_pass_downsample (j_compress_ptr)
{
  /* no work for now */
}

/*
 * Expand a component horizontally from width input_cols to width output_cols,
 * by duplicating the rightmost samples.
 */

LOCAL(void)
expand_right_edge (JSAMPARRAY image_data, int num_rows,
		   JDIMENSION input_cols, JDIMENSION output_cols)
{
  register JSAMPROW ptr;
  register JSAMPLE pixval;
  register int count;
  int row;
  int numcols = (int) (output_cols - input_cols);

  if (numcols > 0) {
	for (row = 0; row < num_rows; row++) {
	  ptr = image_data[row] + input_cols;
	  pixval = ptr[-1];		/* don't need GETJSAMPLE() here */
	  for (count = numcols; count > 0; count--)
	*ptr++ = pixval;
	}
  }
}

/*
 * Do downsampling for a whole row group (all components).
 *
 * In this version we simply downsample each component independently.
 */

METHODDEF(void)
sep_downsample (j_compress_ptr cinfo,
		JSAMPIMAGE input_buf, JDIMENSION in_row_index,
		JSAMPIMAGE output_buf, JDIMENSION out_row_group_index)
{
  my_downsample_ptr downsample = (my_downsample_ptr) cinfo->downsample;
  int ci;
  jpeg_component_info * compptr;
  JSAMPARRAY in_ptr, out_ptr;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	in_ptr = input_buf[ci] + in_row_index;
	out_ptr = output_buf[ci] + (out_row_group_index * compptr->v_samp_factor);
	(*downsample->methods[ci]) (cinfo, compptr, in_ptr, out_ptr);
  }
}

/*
 * Downsample pixel values of a single component.
 * One row group is processed per call.
 * This version handles arbitrary integral sampling ratios, without smoothing.
 * Note that this version is not actually used for customary sampling ratios.
 */

METHODDEF(void)
int_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int inrow, outrow, h_expand, v_expand, numpix, numpix2, h, v;
  JDIMENSION outcol, outcol_h;	/* outcol_h == outcol*h_expand */
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  JSAMPROW inptr, outptr;
  INT32 outvalue;

  h_expand = cinfo->max_h_samp_factor / compptr->h_samp_factor;
  v_expand = cinfo->max_v_samp_factor / compptr->v_samp_factor;
  numpix = h_expand * v_expand;
  numpix2 = numpix/2;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, output_cols * h_expand);

  inrow = 0;
  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
	outptr = output_data[outrow];
	for (outcol = 0, outcol_h = 0; outcol < output_cols;
	 outcol++, outcol_h += h_expand) {
	  outvalue = 0;
	  for (v = 0; v < v_expand; v++) {
	inptr = input_data[inrow+v] + outcol_h;
	for (h = 0; h < h_expand; h++) {
	  outvalue += (INT32) GETJSAMPLE(*inptr++);
	}
	  }
	  *outptr++ = (JSAMPLE) ((outvalue + numpix2) / numpix);
	}
	inrow += v_expand;
  }
}

/*
 * Downsample pixel values of a single component.
 * This version handles the special case of a full-size component,
 * without smoothing.
 */

METHODDEF(void)
fullsize_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  /* Copy the data */
  jcopy_sample_rows(input_data, 0, output_data, 0,
		    cinfo->max_v_samp_factor, cinfo->image_width);
  /* Edge-expand */
  expand_right_edge(output_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, compptr->width_in_blocks * DCTSIZE);
}

/*
 * Downsample pixel values of a single component.
 * This version handles the common case of 2:1 horizontal and 1:1 vertical,
 * without smoothing.
 *
 * A note about the "bias" calculations: when rounding fractional values to
 * integer, we do not want to always round 0.5 up to the next integer.
 * If we did that, we'd introduce a noticeable bias towards larger values.
 * Instead, this code is arranged so that 0.5 will be rounded up or down at
 * alternate pixel locations (a simple ordered dither pattern).
 */

METHODDEF(void)
h2v1_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int outrow;
  JDIMENSION outcol;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr, outptr;
  register int bias;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, output_cols * 2);

  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
	outptr = output_data[outrow];
	inptr = input_data[outrow];
	bias = 0;			/* bias = 0,1,0,1,... for successive samples */
	for (outcol = 0; outcol < output_cols; outcol++) {
	  *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr) + GETJSAMPLE(inptr[1])
			      + bias) >> 1);
	  bias ^= 1;		/* 0=>1, 1=>0 */
	  inptr += 2;
	}
  }
}

/*
 * Downsample pixel values of a single component.
 * This version handles the standard case of 2:1 horizontal and 2:1 vertical,
 * without smoothing.
 */

METHODDEF(void)
h2v2_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int inrow, outrow;
  JDIMENSION outcol;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr0, inptr1, outptr;
  register int bias;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data, cinfo->max_v_samp_factor,
		    cinfo->image_width, output_cols * 2);

  inrow = 0;
  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
	outptr = output_data[outrow];
	inptr0 = input_data[inrow];
	inptr1 = input_data[inrow+1];
	bias = 1;			/* bias = 1,2,1,2,... for successive samples */
	for (outcol = 0; outcol < output_cols; outcol++) {
	  *outptr++ = (JSAMPLE) ((GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
			      GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1])
			      + bias) >> 2);
	  bias ^= 3;		/* 1=>2, 2=>1 */
	  inptr0 += 2; inptr1 += 2;
	}
	inrow += 2;
  }
}

#ifdef INPUT_SMOOTHING_SUPPORTED

/*
 * Downsample pixel values of a single component.
 * This version handles the standard case of 2:1 horizontal and 2:1 vertical,
 * with smoothing.  One row of context is required.
 */

METHODDEF(void)
h2v2_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info * compptr,
			JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int inrow, outrow;
  JDIMENSION colctr;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr0, inptr1, above_ptr, below_ptr, outptr;
  INT32 membersum, neighsum, memberscale, neighscale;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
		    cinfo->image_width, output_cols * 2);

  /* We don't bother to form the individual "smoothed" input pixel values;
   * we can directly compute the output which is the average of the four
   * smoothed values.  Each of the four member pixels contributes a fraction
   * (1-8*SF) to its own smoothed image and a fraction SF to each of the three
   * other smoothed pixels, therefore a total fraction (1-5*SF)/4 to the final
   * output.  The four corner-adjacent neighbor pixels contribute a fraction
   * SF to just one smoothed pixel, or SF/4 to the final output; while the
   * eight edge-adjacent neighbors contribute SF to each of two smoothed
   * pixels, or SF/2 overall.  In order to use integer arithmetic, these
   * factors are scaled by 2^16 = 65536.
   * Also recall that SF = smoothing_factor / 1024.
   */

  memberscale = 16384 - cinfo->smoothing_factor * 80; /* scaled (1-5*SF)/4 */
  neighscale = cinfo->smoothing_factor * 16; /* scaled SF/4 */

  inrow = 0;
  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
	outptr = output_data[outrow];
	inptr0 = input_data[inrow];
	inptr1 = input_data[inrow+1];
	above_ptr = input_data[inrow-1];
	below_ptr = input_data[inrow+2];

	/* Special case for first column: pretend column -1 is same as column 0 */
	membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
	neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
	       GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[2]) +
	       GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[2]);
	neighsum += neighsum;
	neighsum += GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[2]) +
		GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[2]);
	membersum = membersum * memberscale + neighsum * neighscale;
	*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
	inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;

	for (colctr = output_cols - 2; colctr > 0; colctr--) {
	  /* sum of pixels directly mapped to this output element */
	  membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
		  GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
	  /* sum of edge-neighbor pixels */
	  neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
		 GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
		 GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[2]) +
		 GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[2]);
	  /* The edge-neighbors count twice as much as corner-neighbors */
	  neighsum += neighsum;
	  /* Add in the corner-neighbors */
	  neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[2]) +
		  GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[2]);
	  /* form final output scaled up by 2^16 */
	  membersum = membersum * memberscale + neighsum * neighscale;
	  /* round, descale and output it */
	  *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
	  inptr0 += 2; inptr1 += 2; above_ptr += 2; below_ptr += 2;
	}

	/* Special case for last column */
	membersum = GETJSAMPLE(*inptr0) + GETJSAMPLE(inptr0[1]) +
		GETJSAMPLE(*inptr1) + GETJSAMPLE(inptr1[1]);
	neighsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(above_ptr[1]) +
	       GETJSAMPLE(*below_ptr) + GETJSAMPLE(below_ptr[1]) +
	       GETJSAMPLE(inptr0[-1]) + GETJSAMPLE(inptr0[1]) +
	       GETJSAMPLE(inptr1[-1]) + GETJSAMPLE(inptr1[1]);
	neighsum += neighsum;
	neighsum += GETJSAMPLE(above_ptr[-1]) + GETJSAMPLE(above_ptr[1]) +
		GETJSAMPLE(below_ptr[-1]) + GETJSAMPLE(below_ptr[1]);
	membersum = membersum * memberscale + neighsum * neighscale;
	*outptr = (JSAMPLE) ((membersum + 32768) >> 16);

	inrow += 2;
  }
}

/*
 * Downsample pixel values of a single component.
 * This version handles the special case of a full-size component,
 * with smoothing.  One row of context is required.
 */

METHODDEF(void)
fullsize_smooth_downsample (j_compress_ptr cinfo, jpeg_component_info *compptr,
			    JSAMPARRAY input_data, JSAMPARRAY output_data)
{
  int outrow;
  JDIMENSION colctr;
  JDIMENSION output_cols = compptr->width_in_blocks * DCTSIZE;
  register JSAMPROW inptr, above_ptr, below_ptr, outptr;
  INT32 membersum, neighsum, memberscale, neighscale;
  int colsum, lastcolsum, nextcolsum;

  /* Expand input data enough to let all the output samples be generated
   * by the standard loop.  Special-casing padded output would be more
   * efficient.
   */
  expand_right_edge(input_data - 1, cinfo->max_v_samp_factor + 2,
		    cinfo->image_width, output_cols);

  /* Each of the eight neighbor pixels contributes a fraction SF to the
   * smoothed pixel, while the main pixel contributes (1-8*SF).  In order
   * to use integer arithmetic, these factors are multiplied by 2^16 = 65536.
   * Also recall that SF = smoothing_factor / 1024.
   */

  memberscale = 65536L - cinfo->smoothing_factor * 512L; /* scaled 1-8*SF */
  neighscale = cinfo->smoothing_factor * 64; /* scaled SF */

  for (outrow = 0; outrow < compptr->v_samp_factor; outrow++) {
	outptr = output_data[outrow];
	inptr = input_data[outrow];
	above_ptr = input_data[outrow-1];
	below_ptr = input_data[outrow+1];

	/* Special case for first column */
	colsum = GETJSAMPLE(*above_ptr++) + GETJSAMPLE(*below_ptr++) +
	     GETJSAMPLE(*inptr);
	membersum = GETJSAMPLE(*inptr++);
	nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
		 GETJSAMPLE(*inptr);
	neighsum = colsum + (colsum - membersum) + nextcolsum;
	membersum = membersum * memberscale + neighsum * neighscale;
	*outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
	lastcolsum = colsum; colsum = nextcolsum;

	for (colctr = output_cols - 2; colctr > 0; colctr--) {
	  membersum = GETJSAMPLE(*inptr++);
	  above_ptr++; below_ptr++;
	  nextcolsum = GETJSAMPLE(*above_ptr) + GETJSAMPLE(*below_ptr) +
		   GETJSAMPLE(*inptr);
	  neighsum = lastcolsum + (colsum - membersum) + nextcolsum;
	  membersum = membersum * memberscale + neighsum * neighscale;
	  *outptr++ = (JSAMPLE) ((membersum + 32768) >> 16);
	  lastcolsum = colsum; colsum = nextcolsum;
	}

	/* Special case for last column */
	membersum = GETJSAMPLE(*inptr);
	neighsum = lastcolsum + (colsum - membersum) + colsum;
	membersum = membersum * memberscale + neighsum * neighscale;
	*outptr = (JSAMPLE) ((membersum + 32768) >> 16);

  }
}

#endif /* INPUT_SMOOTHING_SUPPORTED */

/*
 * Module initialization routine for downsampling.
 * Note that we must select a routine for each component.
 */

GLOBAL(void)
jinit_downsampler (j_compress_ptr cinfo)
{
  my_downsample_ptr downsample;
  int ci;
  jpeg_component_info * compptr;
  boolean smoothok = TRUE;

  downsample = (my_downsample_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_downsampler));
  cinfo->downsample = (struct jpeg_downsampler *) downsample;
  downsample->pub.start_pass = start_pass_downsample;
  downsample->pub.downsample = sep_downsample;
  downsample->pub.need_context_rows = FALSE;

  if (cinfo->CCIR601_sampling)
	ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

  /* Verify we can handle the sampling factors, and set up method pointers */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	if (compptr->h_samp_factor == cinfo->max_h_samp_factor &&
	compptr->v_samp_factor == cinfo->max_v_samp_factor) {
#ifdef INPUT_SMOOTHING_SUPPORTED
	  if (cinfo->smoothing_factor) {
	downsample->methods[ci] = fullsize_smooth_downsample;
	downsample->pub.need_context_rows = TRUE;
	  } else
#endif
	downsample->methods[ci] = fullsize_downsample;
	} else if (compptr->h_samp_factor * 2 == cinfo->max_h_samp_factor &&
	       compptr->v_samp_factor == cinfo->max_v_samp_factor) {
	  smoothok = FALSE;
	  downsample->methods[ci] = h2v1_downsample;
	} else if (compptr->h_samp_factor * 2 == cinfo->max_h_samp_factor &&
	       compptr->v_samp_factor * 2 == cinfo->max_v_samp_factor) {
#ifdef INPUT_SMOOTHING_SUPPORTED
	  if (cinfo->smoothing_factor) {
	downsample->methods[ci] = h2v2_smooth_downsample;
	downsample->pub.need_context_rows = TRUE;
	  } else
#endif
	downsample->methods[ci] = h2v2_downsample;
	} else if ((cinfo->max_h_samp_factor % compptr->h_samp_factor) == 0 &&
	       (cinfo->max_v_samp_factor % compptr->v_samp_factor) == 0) {
	  smoothok = FALSE;
	  downsample->methods[ci] = int_downsample;
	} else
	  ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
  }

#ifdef INPUT_SMOOTHING_SUPPORTED
  if (cinfo->smoothing_factor && !smoothok)
	TRACEMS(cinfo, 0, JTRC_SMOOTH_NOTIMPL);
#endif
}

/*** End of inlined file: jcsample.c ***/


/*** Start of inlined file: jctrans.c ***/
#define JPEG_INTERNALS

/* Forward declarations */
LOCAL(void) transencode_master_selection
	JPP((j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays));
LOCAL(void) transencode_coef_controller
	JPP((j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays));

/*
 * Compression initialization for writing raw-coefficient data.
 * Before calling this, all parameters and a data destination must be set up.
 * Call jpeg_finish_compress() to actually write the data.
 *
 * The number of passed virtual arrays must match cinfo->num_components.
 * Note that the virtual arrays need not be filled or even realized at
 * the time write_coefficients is called; indeed, if the virtual arrays
 * were requested from this compression object's memory manager, they
 * typically will be realized during this routine and filled afterwards.
 */

GLOBAL(void)
jpeg_write_coefficients (j_compress_ptr cinfo, jvirt_barray_ptr * coef_arrays)
{
  if (cinfo->global_state != CSTATE_START)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Mark all tables to be written */
  jpeg_suppress_tables(cinfo, FALSE);
  /* (Re)initialize error mgr and destination modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->dest->init_destination) (cinfo);
  /* Perform master selection of active modules */
  transencode_master_selection(cinfo, coef_arrays);
  /* Wait for jpeg_finish_compress() call */
  cinfo->next_scanline = 0;	/* so jpeg_write_marker works */
  cinfo->global_state = CSTATE_WRCOEFS;
}

/*
 * Initialize the compression object with default parameters,
 * then copy from the source object all parameters needed for lossless
 * transcoding.  Parameters that can be varied without loss (such as
 * scan script and Huffman optimization) are left in their default states.
 */

GLOBAL(void)
jpeg_copy_critical_parameters (j_decompress_ptr srcinfo,
			       j_compress_ptr dstinfo)
{
  JQUANT_TBL ** qtblptr;
  jpeg_component_info *incomp, *outcomp;
  JQUANT_TBL *c_quant, *slot_quant;
  int tblno, ci, coefi;

  /* Safety check to ensure start_compress not called yet. */
  if (dstinfo->global_state != CSTATE_START)
	ERREXIT1(dstinfo, JERR_BAD_STATE, dstinfo->global_state);
  /* Copy fundamental image dimensions */
  dstinfo->image_width = srcinfo->image_width;
  dstinfo->image_height = srcinfo->image_height;
  dstinfo->input_components = srcinfo->num_components;
  dstinfo->in_color_space = srcinfo->jpeg_color_space;
  /* Initialize all parameters to default values */
  jpeg_set_defaults(dstinfo);
  /* jpeg_set_defaults may choose wrong colorspace, eg YCbCr if input is RGB.
   * Fix it to get the right header markers for the image colorspace.
   */
  jpeg_set_colorspace(dstinfo, srcinfo->jpeg_color_space);
  dstinfo->data_precision = srcinfo->data_precision;
  dstinfo->CCIR601_sampling = srcinfo->CCIR601_sampling;
  /* Copy the source's quantization tables. */
  for (tblno = 0; tblno < NUM_QUANT_TBLS; tblno++) {
	if (srcinfo->quant_tbl_ptrs[tblno] != NULL) {
	  qtblptr = & dstinfo->quant_tbl_ptrs[tblno];
	  if (*qtblptr == NULL)
	*qtblptr = jpeg_alloc_quant_table((j_common_ptr) dstinfo);
	  MEMCOPY((*qtblptr)->quantval,
	      srcinfo->quant_tbl_ptrs[tblno]->quantval,
	      SIZEOF((*qtblptr)->quantval));
	  (*qtblptr)->sent_table = FALSE;
	}
  }
  /* Copy the source's per-component info.
   * Note we assume jpeg_set_defaults has allocated the dest comp_info array.
   */
  dstinfo->num_components = srcinfo->num_components;
  if (dstinfo->num_components < 1 || dstinfo->num_components > MAX_COMPONENTS)
	ERREXIT2(dstinfo, JERR_COMPONENT_COUNT, dstinfo->num_components,
	     MAX_COMPONENTS);
  for (ci = 0, incomp = srcinfo->comp_info, outcomp = dstinfo->comp_info;
	   ci < dstinfo->num_components; ci++, incomp++, outcomp++) {
	outcomp->component_id = incomp->component_id;
	outcomp->h_samp_factor = incomp->h_samp_factor;
	outcomp->v_samp_factor = incomp->v_samp_factor;
	outcomp->quant_tbl_no = incomp->quant_tbl_no;
	/* Make sure saved quantization table for component matches the qtable
	 * slot.  If not, the input file re-used this qtable slot.
	 * IJG encoder currently cannot duplicate this.
	 */
	tblno = outcomp->quant_tbl_no;
	if (tblno < 0 || tblno >= NUM_QUANT_TBLS ||
	srcinfo->quant_tbl_ptrs[tblno] == NULL)
	  ERREXIT1(dstinfo, JERR_NO_QUANT_TABLE, tblno);
	slot_quant = srcinfo->quant_tbl_ptrs[tblno];
	c_quant = incomp->quant_table;
	if (c_quant != NULL) {
	  for (coefi = 0; coefi < DCTSIZE2; coefi++) {
	if (c_quant->quantval[coefi] != slot_quant->quantval[coefi])
	  ERREXIT1(dstinfo, JERR_MISMATCHED_QUANT_TABLE, tblno);
	  }
	}
	/* Note: we do not copy the source's Huffman table assignments;
	 * instead we rely on jpeg_set_colorspace to have made a suitable choice.
	 */
  }
  /* Also copy JFIF version and resolution information, if available.
   * Strictly speaking this isn't "critical" info, but it's nearly
   * always appropriate to copy it if available.  In particular,
   * if the application chooses to copy JFIF 1.02 extension markers from
   * the source file, we need to copy the version to make sure we don't
   * emit a file that has 1.02 extensions but a claimed version of 1.01.
   * We will *not*, however, copy version info from mislabeled "2.01" files.
   */
  if (srcinfo->saw_JFIF_marker) {
	if (srcinfo->JFIF_major_version == 1) {
	  dstinfo->JFIF_major_version = srcinfo->JFIF_major_version;
	  dstinfo->JFIF_minor_version = srcinfo->JFIF_minor_version;
	}
	dstinfo->density_unit = srcinfo->density_unit;
	dstinfo->X_density = srcinfo->X_density;
	dstinfo->Y_density = srcinfo->Y_density;
  }
}

/*
 * Master selection of compression modules for transcoding.
 * This substitutes for jcinit.c's initialization of the full compressor.
 */

LOCAL(void)
transencode_master_selection (j_compress_ptr cinfo,
			      jvirt_barray_ptr * coef_arrays)
{
  /* Although we don't actually use input_components for transcoding,
   * jcmaster.c's initial_setup will complain if input_components is 0.
   */
  cinfo->input_components = 1;
  /* Initialize master control (includes parameter checking/processing) */
  jinit_c_master_control(cinfo, TRUE /* transcode only */);

  /* Entropy encoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
	ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
	if (cinfo->progressive_mode) {
#ifdef C_PROGRESSIVE_SUPPORTED
	  jinit_phuff_encoder(cinfo);
#else
	  ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else
	  jinit_huff_encoder(cinfo);
  }

  /* We need a special coefficient buffer controller. */
  transencode_coef_controller(cinfo, coef_arrays);

  jinit_marker_writer(cinfo);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Write the datastream header (SOI, JFIF) immediately.
   * Frame and scan headers are postponed till later.
   * This lets application insert special markers after the SOI.
   */
  (*cinfo->marker->write_file_header) (cinfo);
}

/*
 * The rest of this file is a special implementation of the coefficient
 * buffer controller.  This is similar to jccoefct.c, but it handles only
 * output from presupplied virtual arrays.  Furthermore, we generate any
 * dummy padding blocks on-the-fly rather than expecting them to be present
 * in the arrays.
 */

/* Private buffer controller object */

typedef struct {
  struct jpeg_c_coef_controller pub; /* public fields */

  JDIMENSION iMCU_row_num;	/* iMCU row # within image */
  JDIMENSION mcu_ctr;		/* counts MCUs processed in current row */
  int MCU_vert_offset;		/* counts MCU rows within iMCU row */
  int MCU_rows_per_iMCU_row;	/* number of such rows needed */

  /* Virtual block array for each component. */
  jvirt_barray_ptr * whole_image;

  /* Workspace for constructing dummy blocks at right/bottom edges. */
  JBLOCKROW dummy_buffer[C_MAX_BLOCKS_IN_MCU];
} my_coef_controller2;

typedef my_coef_controller2 * my_coef_ptr2;

LOCAL(void)
start_iMCU_row2 (j_compress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row */
{
  my_coef_ptr2 coef = (my_coef_ptr2) cinfo->coef;

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
	coef->MCU_rows_per_iMCU_row = 1;
  } else {
	if (coef->iMCU_row_num < (cinfo->total_iMCU_rows-1))
	  coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
	else
	  coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
  }

  coef->mcu_ctr = 0;
  coef->MCU_vert_offset = 0;
}

/*
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_coef2 (j_compress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_coef_ptr2 coef = (my_coef_ptr2) cinfo->coef;

  if (pass_mode != JBUF_CRANK_DEST)
	ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  coef->iMCU_row_num = 0;
  start_iMCU_row2(cinfo);
}

/*
 * Process some data.
 * We process the equivalent of one fully interleaved MCU row ("iMCU" row)
 * per call, ie, v_samp_factor block rows for each component in the scan.
 * The data is obtained from the virtual arrays and fed to the entropy coder.
 * Returns TRUE if the iMCU row is completed, FALSE if suspended.
 *
 * NB: input_buf is ignored; it is likely to be a NULL pointer.
 */

METHODDEF(boolean)
compress_output2 (j_compress_ptr cinfo, JSAMPIMAGE)
{
  my_coef_ptr2 coef = (my_coef_ptr2) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  int blkn, ci, xindex, yindex, yoffset, blockcnt;
  JDIMENSION start_col;
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW MCU_buffer[C_MAX_BLOCKS_IN_MCU];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	buffer[ci] = (*cinfo->mem->access_virt_barray)
	  ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
	   coef->iMCU_row_num * compptr->v_samp_factor,
	   (JDIMENSION) compptr->v_samp_factor, FALSE);
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
	   yoffset++) {
	for (MCU_col_num = coef->mcu_ctr; MCU_col_num < cinfo->MCUs_per_row;
	 MCU_col_num++) {
	  /* Construct list of pointers to DCT blocks belonging to this MCU */
	  blkn = 0;			/* index of current DCT block within MCU */
	  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	blockcnt = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						: compptr->last_col_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  if (coef->iMCU_row_num < last_iMCU_row ||
	      yindex+yoffset < compptr->last_row_height) {
	    /* Fill in pointers to real blocks in this row */
	    buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
	    for (xindex = 0; xindex < blockcnt; xindex++)
	      MCU_buffer[blkn++] = buffer_ptr++;
	  } else {
	    /* At bottom of image, need a whole row of dummy blocks */
	    xindex = 0;
	  }
	  /* Fill in any dummy blocks needed in this row.
	   * Dummy blocks are filled in the same way as in jccoefct.c:
	   * all zeroes in the AC entries, DC entries equal to previous
	   * block's DC value.  The init routine has already zeroed the
	   * AC entries, so we need only set the DC entries correctly.
	   */
	  for (; xindex < compptr->MCU_width; xindex++) {
	    MCU_buffer[blkn] = coef->dummy_buffer[blkn];
	    MCU_buffer[blkn][0][0] = MCU_buffer[blkn-1][0][0];
	    blkn++;
	  }
	}
	  }
	  /* Try to write the MCU. */
	  if (! (*cinfo->entropy->encode_mcu) (cinfo, MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->mcu_ctr = MCU_col_num;
	return FALSE;
	  }
	}
	/* Completed an MCU row, but perhaps not an iMCU row */
	coef->mcu_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  coef->iMCU_row_num++;
  start_iMCU_row2(cinfo);
  return TRUE;
}

/*
 * Initialize coefficient buffer controller.
 *
 * Each passed coefficient array must be the right size for that
 * coefficient: width_in_blocks wide and height_in_blocks high,
 * with unitheight at least v_samp_factor.
 */

LOCAL(void)
transencode_coef_controller (j_compress_ptr cinfo,
			     jvirt_barray_ptr * coef_arrays)
{
  my_coef_ptr2 coef;
  JBLOCKROW buffer;
  int i;

  coef = (my_coef_ptr2)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_coef_controller2));
  cinfo->coef = (struct jpeg_c_coef_controller *) coef;
  coef->pub.start_pass = start_pass_coef2;
  coef->pub.compress_data = compress_output2;

  /* Save pointer to virtual arrays */
  coef->whole_image = coef_arrays;

  /* Allocate and pre-zero space for dummy DCT blocks. */
  buffer = (JBLOCKROW)
	(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
  jzero_far((void FAR *) buffer, C_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
  for (i = 0; i < C_MAX_BLOCKS_IN_MCU; i++) {
	coef->dummy_buffer[i] = buffer + i;
  }
}

/*** End of inlined file: jctrans.c ***/


/*** Start of inlined file: jdapistd.c ***/
#define JPEG_INTERNALS

/* Forward declarations */
LOCAL(boolean) output_pass_setup JPP((j_decompress_ptr cinfo));

/*
 * Decompression initialization.
 * jpeg_read_header must be completed before calling this.
 *
 * If a multipass operating mode was selected, this will do all but the
 * last pass, and thus may take a great deal of time.
 *
 * Returns FALSE if suspended.  The return value need be inspected only if
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_start_decompress (j_decompress_ptr cinfo)
{
  if (cinfo->global_state == DSTATE_READY) {
	/* First call: initialize master control, select active modules */
	jinit_master_decompress(cinfo);
	if (cinfo->buffered_image) {
	  /* No more work here; expecting jpeg_start_output next */
	  cinfo->global_state = DSTATE_BUFIMAGE;
	  return TRUE;
	}
	cinfo->global_state = DSTATE_PRELOAD;
  }
  if (cinfo->global_state == DSTATE_PRELOAD) {
	/* If file has multiple scans, absorb them all into the coef buffer */
	if (cinfo->inputctl->has_multiple_scans) {
#ifdef D_MULTISCAN_FILES_SUPPORTED
	  for (;;) {
	int retcode;
	/* Call progress monitor hook if present */
	if (cinfo->progress != NULL)
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
	/* Absorb some more input */
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
	if (retcode == JPEG_SUSPENDED)
	  return FALSE;
	if (retcode == JPEG_REACHED_EOI)
	  break;
	/* Advance progress counter if appropriate */
	if (cinfo->progress != NULL &&
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
	    /* jdmaster underestimated number of scans; ratchet up one scan */
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
	  }
	}
	  }
#else
	  ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* D_MULTISCAN_FILES_SUPPORTED */
	}
	cinfo->output_scan_number = cinfo->input_scan_number;
  } else if (cinfo->global_state != DSTATE_PRESCAN)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Perform any dummy output passes, and set up for the final pass */
  return output_pass_setup(cinfo);
}

/*
 * Set up for an output pass, and perform any dummy pass(es) needed.
 * Common subroutine for jpeg_start_decompress and jpeg_start_output.
 * Entry: global_state = DSTATE_PRESCAN only if previously suspended.
 * Exit: If done, returns TRUE and sets global_state for proper output mode.
 *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
  if (cinfo->global_state != DSTATE_PRESCAN) {
	/* First call: do pass setup */
	(*cinfo->master->prepare_for_output_pass) (cinfo);
	cinfo->output_scanline = 0;
	cinfo->global_state = DSTATE_PRESCAN;
  }
  /* Loop over any required dummy passes */
  while (cinfo->master->is_dummy_pass) {
#ifdef QUANT_2PASS_SUPPORTED
	/* Crank through the dummy pass */
	while (cinfo->output_scanline < cinfo->output_height) {
	  JDIMENSION last_scanline;
	  /* Call progress monitor hook if present */
	  if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) cinfo->output_scanline;
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
	  }
	  /* Process some data */
	  last_scanline = cinfo->output_scanline;
	  (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
				    &cinfo->output_scanline, (JDIMENSION) 0);
	  if (cinfo->output_scanline == last_scanline)
	return FALSE;		/* No progress made, must suspend */
	}
	/* Finish up dummy pass, and set up for another one */
	(*cinfo->master->finish_output_pass) (cinfo);
	(*cinfo->master->prepare_for_output_pass) (cinfo);
	cinfo->output_scanline = 0;
#else
	ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
  return TRUE;
}

/*
 * Read some scanlines of data from the JPEG decompressor.
 *
 * The return value will be the number of lines actually read.
 * This may be less than the number requested in several cases,
 * including bottom of image, data source suspension, and operating
 * modes that emit multiple scanlines at a time.
 *
 * Note: we warn about excess calls to jpeg_read_scanlines() since
 * this likely signals an application programmer error.  However,
 * an oversize buffer (max_lines > scanlines remaining) is not an error.
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->output_scanline >= cinfo->output_height) {
	WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
	return 0;
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) cinfo->output_scanline;
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Process some data */
  row_ctr = 0;
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
  cinfo->output_scanline += row_ctr;
  return row_ctr;
}

/*
 * Alternate entry point to read raw data.
 * Processes exactly one iMCU row per call, unless suspended.
 */

GLOBAL(JDIMENSION)
jpeg_read_raw_data (j_decompress_ptr cinfo, JSAMPIMAGE data,
		    JDIMENSION max_lines)
{
  JDIMENSION lines_per_iMCU_row;

  if (cinfo->global_state != DSTATE_RAW_OK)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  if (cinfo->output_scanline >= cinfo->output_height) {
	WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
	return 0;
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
	cinfo->progress->pass_counter = (long) cinfo->output_scanline;
	cinfo->progress->pass_limit = (long) cinfo->output_height;
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
  }

  /* Verify that at least one iMCU row can be returned. */
  lines_per_iMCU_row = cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size;
  if (max_lines < lines_per_iMCU_row)
	ERREXIT(cinfo, JERR_BUFFER_SIZE);

  /* Decompress directly into user's buffer. */
  if (! (*cinfo->coef->decompress_data) (cinfo, data))
	return 0;			/* suspension forced, can do nothing more */

  /* OK, we processed one iMCU row. */
  cinfo->output_scanline += lines_per_iMCU_row;
  return lines_per_iMCU_row;
}

/* Additional entry points for buffered-image mode. */

#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Initialize for an output pass in buffered-image mode.
 */

GLOBAL(boolean)
jpeg_start_output (j_decompress_ptr cinfo, int scan_number)
{
  if (cinfo->global_state != DSTATE_BUFIMAGE &&
	  cinfo->global_state != DSTATE_PRESCAN)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  /* Limit scan number to valid range */
  if (scan_number <= 0)
	scan_number = 1;
  if (cinfo->inputctl->eoi_reached &&
	  scan_number > cinfo->input_scan_number)
	scan_number = cinfo->input_scan_number;
  cinfo->output_scan_number = scan_number;
  /* Perform any dummy output passes, and set up for the real pass */
  return output_pass_setup(cinfo);
}

/*
 * Finish up after an output pass in buffered-image mode.
 *
 * Returns FALSE if suspended.  The return value need be inspected only if
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_finish_output (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
	   cinfo->global_state == DSTATE_RAW_OK) && cinfo->buffered_image) {
	/* Terminate this pass. */
	/* We do not require the whole pass to have been completed. */
	(*cinfo->master->finish_output_pass) (cinfo);
	cinfo->global_state = DSTATE_BUFPOST;
  } else if (cinfo->global_state != DSTATE_BUFPOST) {
	/* BUFPOST = repeat call after a suspension, anything else is error */
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read markers looking for SOS or EOI */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
	 ! cinfo->inputctl->eoi_reached) {
	if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
	  return FALSE;		/* Suspend, come back later */
  }
  cinfo->global_state = DSTATE_BUFIMAGE;
  return TRUE;
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */

/*** End of inlined file: jdapistd.c ***/


/*** Start of inlined file: jdapimin.c ***/
#define JPEG_INTERNALS

/*
 * Initialization of a JPEG decompression object.
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL(void)
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
  if (version != JPEG_LIB_VERSION)
	ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
	ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE,
	     (int) SIZEOF(struct jpeg_decompress_struct), (int) structsize);

  /* For debugging purposes, we zero the whole master structure.
   * But the application has already set the err pointer, and may have set
   * client_data, so we have to save and restore those fields.
   * Note: if application hasn't set client_data, tools like Purify may
   * complain here.
   */
  {
	struct jpeg_error_mgr * err = cinfo->err;
	void * client_data = cinfo->client_data; /* ignore Purify complaint here */
	MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
	cinfo->err = err;
	cinfo->client_data = client_data;
  }
  cinfo->is_decompressor = TRUE;

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
  cinfo->src = NULL;

  for (i = 0; i < NUM_QUANT_TBLS; i++)
	cinfo->quant_tbl_ptrs[i] = NULL;

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
	cinfo->dc_huff_tbl_ptrs[i] = NULL;
	cinfo->ac_huff_tbl_ptrs[i] = NULL;
  }

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
  jinit_marker_reader(cinfo);

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
}

/*
 * Destruction of a JPEG decompression object
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
}

/*
 * Abort processing of a JPEG decompression operation,
 * but don't destroy the object itself.
 */

GLOBAL(void)
jpeg_abort_decompress (j_decompress_ptr cinfo)
{
  jpeg_abort((j_common_ptr) cinfo); /* use common routine */
}

/*
 * Set default decompression parameters.
 */

LOCAL(void)
default_decompress_parms (j_decompress_ptr cinfo)
{
  /* Guess the input colorspace, and set output colorspace accordingly. */
  /* (Wish JPEG committee had provided a real way to specify this...) */
  /* Note application may override our guesses. */
  switch (cinfo->num_components) {
  case 1:
	cinfo->jpeg_color_space = JCS_GRAYSCALE;
	cinfo->out_color_space = JCS_GRAYSCALE;
	break;

  case 3:
	if (cinfo->saw_JFIF_marker) {
	  cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
	} else if (cinfo->saw_Adobe_marker) {
	  switch (cinfo->Adobe_transform) {
	  case 0:
	cinfo->jpeg_color_space = JCS_RGB;
	break;
	  case 1:
	cinfo->jpeg_color_space = JCS_YCbCr;
	break;
	  default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
	break;
	  }
	} else {
	  /* Saw no special markers, try to guess from the component IDs */
	  int cid0 = cinfo->comp_info[0].component_id;
	  int cid1 = cinfo->comp_info[1].component_id;
	  int cid2 = cinfo->comp_info[2].component_id;

	  if (cid0 == 1 && cid1 == 2 && cid2 == 3)
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
	  else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
	  else {
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
	  }
	}
	/* Always guess RGB is proper output colorspace. */
	cinfo->out_color_space = JCS_RGB;
	break;

  case 4:
	if (cinfo->saw_Adobe_marker) {
	  switch (cinfo->Adobe_transform) {
	  case 0:
	cinfo->jpeg_color_space = JCS_CMYK;
	break;
	  case 2:
	cinfo->jpeg_color_space = JCS_YCCK;
	break;
	  default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
	break;
	  }
	} else {
	  /* No special markers, assume straight CMYK. */
	  cinfo->jpeg_color_space = JCS_CMYK;
	}
	cinfo->out_color_space = JCS_CMYK;
	break;

  default:
	cinfo->jpeg_color_space = JCS_UNKNOWN;
	cinfo->out_color_space = JCS_UNKNOWN;
	break;
  }

  /* Set defaults for other decompression parameters. */
  cinfo->scale_num = 1;		/* 1:1 scaling */
  cinfo->scale_denom = 1;
  cinfo->output_gamma = 1.0;
  cinfo->buffered_image = FALSE;
  cinfo->raw_data_out = FALSE;
  cinfo->dct_method = JDCT_DEFAULT;
  cinfo->do_fancy_upsampling = TRUE;
  cinfo->do_block_smoothing = TRUE;
  cinfo->quantize_colors = FALSE;
  /* We set these in case application only sets quantize_colors. */
  cinfo->dither_mode = JDITHER_FS;
#ifdef QUANT_2PASS_SUPPORTED
  cinfo->two_pass_quantize = TRUE;
#else
  cinfo->two_pass_quantize = FALSE;
#endif
  cinfo->desired_number_of_colors = 256;
  cinfo->colormap = NULL;
  /* Initialize for no mode change in buffered-image mode. */
  cinfo->enable_1pass_quant = FALSE;
  cinfo->enable_external_quant = FALSE;
  cinfo->enable_2pass_quant = FALSE;
}

/*
 * Decompression startup: read start of JPEG datastream to see what's there.
 * Need only initialize JPEG object and supply a data source before calling.
 *
 * This routine will read as far as the first SOS marker (ie, actual start of
 * compressed data), and will save all tables and parameters in the JPEG
 * object.  It will also initialize the decompression parameters to default
 * values, and finally return JPEG_HEADER_OK.  On return, the application may
 * adjust the decompression parameters and then call jpeg_start_decompress.
 * (Or, if the application only wanted to determine the image parameters,
 * the data need not be decompressed.  In that case, call jpeg_abort or
 * jpeg_destroy to release any temporary space.)
 * If an abbreviated (tables only) datastream is presented, the routine will
 * return JPEG_HEADER_TABLES_ONLY upon reaching EOI.  The application may then
 * re-use the JPEG object to read the abbreviated image datastream(s).
 * It is unnecessary (but OK) to call jpeg_abort in this case.
 * The JPEG_SUSPENDED return code only occurs if the data source module
 * requests suspension of the decompressor.  In this case the application
 * should load more source data and then re-call jpeg_read_header to resume
 * processing.
 * If a non-suspending data source is used and require_image is TRUE, then the
 * return code need not be inspected since only JPEG_HEADER_OK is possible.
 *
 * This routine is now just a front end to jpeg_consume_input, with some
 * extra error checking.
 */

GLOBAL(int)
jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
{
  int retcode;

  if (cinfo->global_state != DSTATE_START &&
	  cinfo->global_state != DSTATE_INHEADER)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  retcode = jpeg_consume_input(cinfo);

  switch (retcode) {
  case JPEG_REACHED_SOS:
	retcode = JPEG_HEADER_OK;
	break;
  case JPEG_REACHED_EOI:
	if (require_image)		/* Complain if application wanted an image */
	  ERREXIT(cinfo, JERR_NO_IMAGE);
	/* Reset to start state; it would be safer to require the application to
	 * call jpeg_abort, but we can't change it now for compatibility reasons.
	 * A side effect is to free any temporary memory (there shouldn't be any).
	 */
	jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
	retcode = JPEG_HEADER_TABLES_ONLY;
	break;
  case JPEG_SUSPENDED:
	/* no work */
	break;
  }

  return retcode;
}

/*
 * Consume data in advance of what the decompressor requires.
 * This can be called at any time once the decompressor object has
 * been created and a data source has been set up.
 *
 * This routine is essentially a state machine that handles a couple
 * of critical state-transition actions, namely initial setup and
 * transition from header scanning to ready-for-start_decompress.
 * All the actual input is done via the input controller's consume_input
 * method.
 */

GLOBAL(int)
jpeg_consume_input (j_decompress_ptr cinfo)
{
  int retcode = JPEG_SUSPENDED;

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
  case DSTATE_START:
	/* Start-of-datastream actions: reset appropriate modules */
	(*cinfo->inputctl->reset_input_controller) (cinfo);
	/* Initialize application's data source module */
	(*cinfo->src->init_source) (cinfo);
	cinfo->global_state = DSTATE_INHEADER;
	/*FALLTHROUGH*/
  case DSTATE_INHEADER:
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
	if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
	  /* Set up default parameters based on header data */
	  default_decompress_parms(cinfo);
	  /* Set global state: ready for start_decompress */
	  cinfo->global_state = DSTATE_READY;
	}
	break;
  case DSTATE_READY:
	/* Can't advance past first SOS until start_decompress is called */
	retcode = JPEG_REACHED_SOS;
	break;
  case DSTATE_PRELOAD:
  case DSTATE_PRESCAN:
  case DSTATE_SCANNING:
  case DSTATE_RAW_OK:
  case DSTATE_BUFIMAGE:
  case DSTATE_BUFPOST:
  case DSTATE_STOPPING:
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
	break;
  default:
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  return retcode;
}

/*
 * Have we finished reading the input file?
 */

GLOBAL(boolean)
jpeg_input_complete (j_decompress_ptr cinfo)
{
  /* Check for valid jpeg object */
  if (cinfo->global_state < DSTATE_START ||
	  cinfo->global_state > DSTATE_STOPPING)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  return cinfo->inputctl->eoi_reached;
}

/*
 * Is there more than one scan?
 */

GLOBAL(boolean)
jpeg_has_multiple_scans (j_decompress_ptr cinfo)
{
  /* Only valid after jpeg_read_header completes */
  if (cinfo->global_state < DSTATE_READY ||
	  cinfo->global_state > DSTATE_STOPPING)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  return cinfo->inputctl->has_multiple_scans;
}

/*
 * Finish JPEG decompression.
 *
 * This will normally just verify the file trailer and release temp storage.
 *
 * Returns FALSE if suspended.  The return value need be inspected only if
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
  if ((cinfo->global_state == DSTATE_SCANNING ||
	   cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
	/* Terminate final pass of non-buffered mode */
	if (cinfo->output_scanline < cinfo->output_height)
	  ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
	(*cinfo->master->finish_output_pass) (cinfo);
	cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
	/* Finishing after a buffered-image operation */
	cinfo->global_state = DSTATE_STOPPING;
  } else if (cinfo->global_state != DSTATE_STOPPING) {
	/* STOPPING = repeat call after a suspension, anything else is error */
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
	if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
	  return FALSE;		/* Suspend, come back later */
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
  return TRUE;
}

/*** End of inlined file: jdapimin.c ***/


/*** Start of inlined file: jdatasrc.c ***/
/* this is not a core library module, so it doesn't define JPEG_INTERNALS */


/*** Start of inlined file: jerror.h ***/
/*
 * To define the enum list of message codes, include this file without
 * defining macro JMESSAGE.  To create a message string table, include it
 * again with a suitable JMESSAGE definition (see jerror.c for an example).
 */
#ifndef JMESSAGE
#ifndef JERROR_H
/* First time through, define the enum list */
#define JMAKE_ENUM_LIST
#else
/* Repeated inclusions of this file are no-ops unless JMESSAGE is defined */
#define JMESSAGE(code,string)
#endif /* JERROR_H */
#endif /* JMESSAGE */

#ifdef JMAKE_ENUM_LIST

typedef enum {

#define JMESSAGE(code,string)	code ,

#endif /* JMAKE_ENUM_LIST */

JMESSAGE(JMSG_NOMESSAGE, "Bogus message code %d") /* Must be first entry! */

/* For maintenance convenience, list is alphabetical by message code name */
JMESSAGE(JERR_ARITH_NOTIMPL,
	 "Sorry, there are legal restrictions on arithmetic coding")
JMESSAGE(JERR_BAD_ALIGN_TYPE, "ALIGN_TYPE is wrong, please fix")
JMESSAGE(JERR_BAD_ALLOC_CHUNK, "MAX_ALLOC_CHUNK is wrong, please fix")
JMESSAGE(JERR_BAD_BUFFER_MODE, "Bogus buffer control mode")
JMESSAGE(JERR_BAD_COMPONENT_ID, "Invalid component ID %d in SOS")
JMESSAGE(JERR_BAD_DCT_COEF, "DCT coefficient out of range")
JMESSAGE(JERR_BAD_DCTSIZE, "IDCT output block size %d not supported")
JMESSAGE(JERR_BAD_HUFF_TABLE, "Bogus Huffman table definition")
JMESSAGE(JERR_BAD_IN_COLORSPACE, "Bogus input colorspace")
JMESSAGE(JERR_BAD_J_COLORSPACE, "Bogus JPEG colorspace")
JMESSAGE(JERR_BAD_LENGTH, "Bogus marker length")
JMESSAGE(JERR_BAD_LIB_VERSION,
	 "Wrong JPEG library version: library is %d, caller expects %d")
JMESSAGE(JERR_BAD_MCU_SIZE, "Sampling factors too large for interleaved scan")
JMESSAGE(JERR_BAD_POOL_ID, "Invalid memory pool code %d")
JMESSAGE(JERR_BAD_PRECISION, "Unsupported JPEG data precision %d")
JMESSAGE(JERR_BAD_PROGRESSION,
	 "Invalid progressive parameters Ss=%d Se=%d Ah=%d Al=%d")
JMESSAGE(JERR_BAD_PROG_SCRIPT,
	 "Invalid progressive parameters at scan script entry %d")
JMESSAGE(JERR_BAD_SAMPLING, "Bogus sampling factors")
JMESSAGE(JERR_BAD_SCAN_SCRIPT, "Invalid scan script at entry %d")
JMESSAGE(JERR_BAD_STATE, "Improper call to JPEG library in state %d")
JMESSAGE(JERR_BAD_STRUCT_SIZE,
	 "JPEG parameter struct mismatch: library thinks size is %u, caller expects %u")
JMESSAGE(JERR_BAD_VIRTUAL_ACCESS, "Bogus virtual array access")
JMESSAGE(JERR_BUFFER_SIZE, "Buffer passed to JPEG library is too small")
JMESSAGE(JERR_CANT_SUSPEND, "Suspension not allowed here")
JMESSAGE(JERR_CCIR601_NOTIMPL, "CCIR601 sampling not implemented yet")
JMESSAGE(JERR_COMPONENT_COUNT, "Too many color components: %d, max %d")
JMESSAGE(JERR_CONVERSION_NOTIMPL, "Unsupported color conversion request")
JMESSAGE(JERR_DAC_INDEX, "Bogus DAC index %d")
JMESSAGE(JERR_DAC_VALUE, "Bogus DAC value 0x%x")
JMESSAGE(JERR_DHT_INDEX, "Bogus DHT index %d")
JMESSAGE(JERR_DQT_INDEX, "Bogus DQT index %d")
JMESSAGE(JERR_EMPTY_IMAGE, "Empty JPEG image (DNL not supported)")
JMESSAGE(JERR_EMS_READ, "Read from EMS failed")
JMESSAGE(JERR_EMS_WRITE, "Write to EMS failed")
JMESSAGE(JERR_EOI_EXPECTED, "Didn't expect more than one scan")
JMESSAGE(JERR_FILE_READ, "Input file read error")
JMESSAGE(JERR_FILE_WRITE, "Output file write error --- out of disk space?")
JMESSAGE(JERR_FRACT_SAMPLE_NOTIMPL, "Fractional sampling not implemented yet")
JMESSAGE(JERR_HUFF_CLEN_OVERFLOW, "Huffman code size table overflow")
JMESSAGE(JERR_HUFF_MISSING_CODE, "Missing Huffman code table entry")
JMESSAGE(JERR_IMAGE_TOO_BIG, "Maximum supported image dimension is %u pixels")
JMESSAGE(JERR_INPUT_EMPTY, "Empty input file")
JMESSAGE(JERR_INPUT_EOF, "Premature end of input file")
JMESSAGE(JERR_MISMATCHED_QUANT_TABLE,
	 "Cannot transcode due to multiple use of quantization table %d")
JMESSAGE(JERR_MISSING_DATA, "Scan script does not transmit all data")
JMESSAGE(JERR_MODE_CHANGE, "Invalid color quantization mode change")
JMESSAGE(JERR_NOTIMPL, "Not implemented yet")
JMESSAGE(JERR_NOT_COMPILED, "Requested feature was omitted at compile time")
JMESSAGE(JERR_NO_BACKING_STORE, "Backing store not supported")
JMESSAGE(JERR_NO_HUFF_TABLE, "Huffman table 0x%02x was not defined")
JMESSAGE(JERR_NO_IMAGE, "JPEG datastream contains no image")
JMESSAGE(JERR_NO_QUANT_TABLE, "Quantization table 0x%02x was not defined")
JMESSAGE(JERR_NO_SOI, "Not a JPEG file: starts with 0x%02x 0x%02x")
JMESSAGE(JERR_OUT_OF_MEMORY, "Insufficient memory (case %d)")
JMESSAGE(JERR_QUANT_COMPONENTS,
	 "Cannot quantize more than %d color components")
JMESSAGE(JERR_QUANT_FEW_COLORS, "Cannot quantize to fewer than %d colors")
JMESSAGE(JERR_QUANT_MANY_COLORS, "Cannot quantize to more than %d colors")
JMESSAGE(JERR_SOF_DUPLICATE, "Invalid JPEG file structure: two SOF markers")
JMESSAGE(JERR_SOF_NO_SOS, "Invalid JPEG file structure: missing SOS marker")
JMESSAGE(JERR_SOF_UNSUPPORTED, "Unsupported JPEG process: SOF type 0x%02x")
JMESSAGE(JERR_SOI_DUPLICATE, "Invalid JPEG file structure: two SOI markers")
JMESSAGE(JERR_SOS_NO_SOF, "Invalid JPEG file structure: SOS before SOF")
JMESSAGE(JERR_TFILE_CREATE, "Failed to create temporary file %s")
JMESSAGE(JERR_TFILE_READ, "Read failed on temporary file")
JMESSAGE(JERR_TFILE_SEEK, "Seek failed on temporary file")
JMESSAGE(JERR_TFILE_WRITE,
	 "Write failed on temporary file --- out of disk space?")
JMESSAGE(JERR_TOO_LITTLE_DATA, "Application transferred too few scanlines")
JMESSAGE(JERR_UNKNOWN_MARKER, "Unsupported marker type 0x%02x")
JMESSAGE(JERR_VIRTUAL_BUG, "Virtual array controller messed up")
JMESSAGE(JERR_WIDTH_OVERFLOW, "Image too wide for this implementation")
JMESSAGE(JERR_XMS_READ, "Read from XMS failed")
JMESSAGE(JERR_XMS_WRITE, "Write to XMS failed")
JMESSAGE(JMSG_COPYRIGHT, JCOPYRIGHT)
JMESSAGE(JMSG_VERSION, JVERSION)
JMESSAGE(JTRC_16BIT_TABLES,
	 "Caution: quantization tables are too coarse for baseline JPEG")
JMESSAGE(JTRC_ADOBE,
	 "Adobe APP14 marker: version %d, flags 0x%04x 0x%04x, transform %d")
JMESSAGE(JTRC_APP0, "Unknown APP0 marker (not JFIF), length %u")
JMESSAGE(JTRC_APP14, "Unknown APP14 marker (not Adobe), length %u")
JMESSAGE(JTRC_DAC, "Define Arithmetic Table 0x%02x: 0x%02x")
JMESSAGE(JTRC_DHT, "Define Huffman Table 0x%02x")
JMESSAGE(JTRC_DQT, "Define Quantization Table %d  precision %d")
JMESSAGE(JTRC_DRI, "Define Restart Interval %u")
JMESSAGE(JTRC_EMS_CLOSE, "Freed EMS handle %u")
JMESSAGE(JTRC_EMS_OPEN, "Obtained EMS handle %u")
JMESSAGE(JTRC_EOI, "End Of Image")
JMESSAGE(JTRC_HUFFBITS, "        %3d %3d %3d %3d %3d %3d %3d %3d")
JMESSAGE(JTRC_JFIF, "JFIF APP0 marker: version %d.%02d, density %dx%d  %d")
JMESSAGE(JTRC_JFIF_BADTHUMBNAILSIZE,
	 "Warning: thumbnail image size does not match data length %u")
JMESSAGE(JTRC_JFIF_EXTENSION,
	 "JFIF extension marker: type 0x%02x, length %u")
JMESSAGE(JTRC_JFIF_THUMBNAIL, "    with %d x %d thumbnail image")
JMESSAGE(JTRC_MISC_MARKER, "Miscellaneous marker 0x%02x, length %u")
JMESSAGE(JTRC_PARMLESS_MARKER, "Unexpected marker 0x%02x")
JMESSAGE(JTRC_QUANTVALS, "        %4u %4u %4u %4u %4u %4u %4u %4u")
JMESSAGE(JTRC_QUANT_3_NCOLORS, "Quantizing to %d = %d*%d*%d colors")
JMESSAGE(JTRC_QUANT_NCOLORS, "Quantizing to %d colors")
JMESSAGE(JTRC_QUANT_SELECTED, "Selected %d colors for quantization")
JMESSAGE(JTRC_RECOVERY_ACTION, "At marker 0x%02x, recovery action %d")
JMESSAGE(JTRC_RST, "RST%d")
JMESSAGE(JTRC_SMOOTH_NOTIMPL,
	 "Smoothing not supported with nonstandard sampling ratios")
JMESSAGE(JTRC_SOF, "Start Of Frame 0x%02x: width=%u, height=%u, components=%d")
JMESSAGE(JTRC_SOF_COMPONENT, "    Component %d: %dhx%dv q=%d")
JMESSAGE(JTRC_SOI, "Start of Image")
JMESSAGE(JTRC_SOS, "Start Of Scan: %d components")
JMESSAGE(JTRC_SOS_COMPONENT, "    Component %d: dc=%d ac=%d")
JMESSAGE(JTRC_SOS_PARAMS, "  Ss=%d, Se=%d, Ah=%d, Al=%d")
JMESSAGE(JTRC_TFILE_CLOSE, "Closed temporary file %s")
JMESSAGE(JTRC_TFILE_OPEN, "Opened temporary file %s")
JMESSAGE(JTRC_THUMB_JPEG,
	 "JFIF extension marker: JPEG-compressed thumbnail image, length %u")
JMESSAGE(JTRC_THUMB_PALETTE,
	 "JFIF extension marker: palette thumbnail image, length %u")
JMESSAGE(JTRC_THUMB_RGB,
	 "JFIF extension marker: RGB thumbnail image, length %u")
JMESSAGE(JTRC_UNKNOWN_IDS,
	 "Unrecognized component IDs %d %d %d, assuming YCbCr")
JMESSAGE(JTRC_XMS_CLOSE, "Freed XMS handle %u")
JMESSAGE(JTRC_XMS_OPEN, "Obtained XMS handle %u")
JMESSAGE(JWRN_ADOBE_XFORM, "Unknown Adobe color transform code %d")
JMESSAGE(JWRN_BOGUS_PROGRESSION,
	 "Inconsistent progression sequence for component %d coefficient %d")
JMESSAGE(JWRN_EXTRANEOUS_DATA,
	 "Corrupt JPEG data: %u extraneous bytes before marker 0x%02x")
JMESSAGE(JWRN_HIT_MARKER, "Corrupt JPEG data: premature end of data segment")
JMESSAGE(JWRN_HUFF_BAD_CODE, "Corrupt JPEG data: bad Huffman code")
JMESSAGE(JWRN_JFIF_MAJOR, "Warning: unknown JFIF revision number %d.%02d")
JMESSAGE(JWRN_JPEG_EOF, "Premature end of JPEG file")
JMESSAGE(JWRN_MUST_RESYNC,
	 "Corrupt JPEG data: found marker 0x%02x instead of RST%d")
JMESSAGE(JWRN_NOT_SEQUENTIAL, "Invalid SOS parameters for sequential JPEG")
JMESSAGE(JWRN_TOO_MUCH_DATA, "Application transferred too many scanlines")

#ifdef JMAKE_ENUM_LIST

  JMSG_LASTMSGCODE
} J_MESSAGE_CODE;

#undef JMAKE_ENUM_LIST
#endif /* JMAKE_ENUM_LIST */

/* Zap JMESSAGE macro so that future re-inclusions do nothing by default */
#undef JMESSAGE

#ifndef JERROR_H
#define JERROR_H

/* Macros to simplify using the error and trace message stuff */
/* The first parameter is either type of cinfo pointer */

/* Fatal errors (print message and exit) */
#define ERREXIT(cinfo,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT1(cinfo,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT2(cinfo,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT3(cinfo,code,p1,p2,p3)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (cinfo)->err->msg_parm.i[2] = (p3), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXIT4(cinfo,code,p1,p2,p3,p4)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (cinfo)->err->msg_parm.i[2] = (p3), \
   (cinfo)->err->msg_parm.i[3] = (p4), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))
#define ERREXITS(cinfo,code,str)  \
  ((cinfo)->err->msg_code = (code), \
   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*(cinfo)->err->error_exit) ((j_common_ptr) (cinfo)))

#define MAKESTMT(stuff)		do { stuff } while (0)

/* Nonfatal errors (we can keep going, but the data is probably corrupt) */
#define WARNMS(cinfo,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS1(cinfo,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))
#define WARNMS2(cinfo,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), -1))

/* Informational/debugging messages */
#define TRACEMS(cinfo,lvl,code)  \
  ((cinfo)->err->msg_code = (code), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS1(cinfo,lvl,code,p1)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS2(cinfo,lvl,code,p1,p2)  \
  ((cinfo)->err->msg_code = (code), \
   (cinfo)->err->msg_parm.i[0] = (p1), \
   (cinfo)->err->msg_parm.i[1] = (p2), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))
#define TRACEMS3(cinfo,lvl,code,p1,p2,p3)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS4(cinfo,lvl,code,p1,p2,p3,p4)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS5(cinfo,lvl,code,p1,p2,p3,p4,p5)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   _mp[4] = (p5); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMS8(cinfo,lvl,code,p1,p2,p3,p4,p5,p6,p7,p8)  \
  MAKESTMT(int * _mp = (cinfo)->err->msg_parm.i; \
	   _mp[0] = (p1); _mp[1] = (p2); _mp[2] = (p3); _mp[3] = (p4); \
	   _mp[4] = (p5); _mp[5] = (p6); _mp[6] = (p7); _mp[7] = (p8); \
	   (cinfo)->err->msg_code = (code); \
	   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)); )
#define TRACEMSS(cinfo,lvl,code,str)  \
  ((cinfo)->err->msg_code = (code), \
   strncpy((cinfo)->err->msg_parm.s, (str), JMSG_STR_PARM_MAX), \
   (*(cinfo)->err->emit_message) ((j_common_ptr) (cinfo), (lvl)))

#endif /* JERROR_H */

/*** End of inlined file: jerror.h ***/

/* Expanded data source object for stdio input */

typedef struct {
  struct jpeg_source_mgr pub;	/* public fields */

  FILE * infile;		/* source stream */
  JOCTET * buffer;		/* start of buffer */
  boolean start_of_file;	/* have we gotten any data yet? */
} my_source_mgr;

typedef my_source_mgr * my_src_ptr;

#define INPUT_BUF_SIZE  4096	/* choose an efficiently fread'able size */

/*
 * Initialize source --- called by jpeg_read_header
 * before any data is actually read.
 */

METHODDEF(void)
init_source (j_decompress_ptr cinfo)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  /* We reset the empty-input-file flag for each image,
   * but we don't clear the input buffer.
   * This is correct behavior for reading a series of images from one source.
   */
  src->start_of_file = TRUE;
}

/*
 * Fill the input buffer --- called whenever buffer is emptied.
 *
 * In typical applications, this should read fresh data into the buffer
 * (ignoring the current state of next_input_byte & bytes_in_buffer),
 * reset the pointer & count to the start of the buffer, and return TRUE
 * indicating that the buffer has been reloaded.  It is not necessary to
 * fill the buffer entirely, only to obtain at least one more byte.
 *
 * There is no such thing as an EOF return.  If the end of the file has been
 * reached, the routine has a choice of ERREXIT() or inserting fake data into
 * the buffer.  In most cases, generating a warning message and inserting a
 * fake EOI marker is the best course of action --- this will allow the
 * decompressor to output however much of the image is there.  However,
 * the resulting error message is misleading if the real problem is an empty
 * input file, so we handle that case specially.
 *
 * In applications that need to be able to suspend compression due to input
 * not being available yet, a FALSE return indicates that no more data can be
 * obtained right now, but more may be forthcoming later.  In this situation,
 * the decompressor will return to its caller (with an indication of the
 * number of scanlines it has read, if any).  The application should resume
 * decompression after it has loaded more data into the input buffer.  Note
 * that there are substantial restrictions on the use of suspension --- see
 * the documentation.
 *
 * When suspending, the decompressor will back up to a convenient restart point
 * (typically the start of the current MCU). next_input_byte & bytes_in_buffer
 * indicate where the restart point will be if the current call returns FALSE.
 * Data beyond this point must be rescanned after resumption, so move it to
 * the front of the buffer rather than discarding it.
 */

METHODDEF(boolean)
fill_input_buffer (j_decompress_ptr cinfo)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;
  size_t nbytes;

  nbytes = JFREAD(src->infile, src->buffer, INPUT_BUF_SIZE);

  if (nbytes <= 0) {
	if (src->start_of_file)	/* Treat empty input file as fatal error */
	  ERREXIT(cinfo, JERR_INPUT_EMPTY);
	WARNMS(cinfo, JWRN_JPEG_EOF);
	/* Insert a fake EOI marker */
	src->buffer[0] = (JOCTET) 0xFF;
	src->buffer[1] = (JOCTET) JPEG_EOI;
	nbytes = 2;
  }

  src->pub.next_input_byte = src->buffer;
  src->pub.bytes_in_buffer = nbytes;
  src->start_of_file = FALSE;

  return TRUE;
}

/*
 * Skip data --- used to skip over a potentially large amount of
 * uninteresting data (such as an APPn marker).
 *
 * Writers of suspendable-input applications must note that skip_input_data
 * is not granted the right to give a suspension return.  If the skip extends
 * beyond the data currently in the buffer, the buffer can be marked empty so
 * that the next read will cause a fill_input_buffer call that can suspend.
 * Arranging for additional bytes to be discarded before reloading the input
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
	while (num_bytes > (long) src->pub.bytes_in_buffer) {
	  num_bytes -= (long) src->pub.bytes_in_buffer;
	  (void) fill_input_buffer(cinfo);
	  /* note we assume that fill_input_buffer will never return FALSE,
	   * so suspension need not be handled.
	   */
	}
	src->pub.next_input_byte += (size_t) num_bytes;
	src->pub.bytes_in_buffer -= (size_t) num_bytes;
  }
}

/*
 * An additional method that can be provided by data source modules is the
 * resync_to_restart method for error recovery in the presence of RST markers.
 * For the moment, this source module just uses the default resync method
 * provided by the JPEG library.  That method assumes that no backtracking
 * is possible.
 */

/*
 * Terminate source --- called by jpeg_finish_decompress
 * after all data has been read.  Often a no-op.
 *
 * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

METHODDEF(void)
term_source (j_decompress_ptr)
{
  /* no work necessary here */
}

/*
 * Prepare for input from a stdio stream.
 * The caller must have already opened the stream, and is responsible
 * for closing it after finishing decompression.
 */

GLOBAL(void)
jpeg_stdio_src (j_decompress_ptr cinfo, FILE * infile)
{
  my_src_ptr src;

  /* The source object and input buffer are made permanent so that a series
   * of JPEG images can be read from the same file by calling jpeg_stdio_src
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
	cinfo->src = (struct jpeg_source_mgr *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  SIZEOF(my_source_mgr));
	src = (my_src_ptr) cinfo->src;
	src->buffer = (JOCTET *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				  INPUT_BUF_SIZE * SIZEOF(JOCTET));
  }

  src = (my_src_ptr) cinfo->src;
  src->pub.init_source = init_source;
  src->pub.fill_input_buffer = fill_input_buffer;
  src->pub.skip_input_data = skip_input_data;
  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
  src->pub.term_source = term_source;
  src->infile = infile;
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
  src->pub.next_input_byte = NULL; /* until buffer loaded */
}

/*** End of inlined file: jdatasrc.c ***/


/*** Start of inlined file: jdcoefct.c ***/
#define JPEG_INTERNALS

/* Block smoothing is only applicable for progressive JPEG, so: */
#ifndef D_PROGRESSIVE_SUPPORTED
#undef BLOCK_SMOOTHING_SUPPORTED
#endif

/* Private buffer controller object */

typedef struct {
  struct jpeg_d_coef_controller pub; /* public fields */

  /* These variables keep track of the current location of the input side. */
  /* cinfo->input_iMCU_row is also used for this. */
  JDIMENSION MCU_ctr;		/* counts MCUs processed in current row */
  int MCU_vert_offset;		/* counts MCU rows within iMCU row */
  int MCU_rows_per_iMCU_row;	/* number of such rows needed */

  /* The output side's location is represented by cinfo->output_iMCU_row. */

  /* In single-pass modes, it's sufficient to buffer just one MCU.
   * We allocate a workspace of D_MAX_BLOCKS_IN_MCU coefficient blocks,
   * and let the entropy decoder write into that workspace each time.
   * (On 80x86, the workspace is FAR even though it's not really very big;
   * this is to keep the module interfaces unchanged when a large coefficient
   * buffer is necessary.)
   * In multi-pass modes, this array points to the current MCU's blocks
   * within the virtual arrays; it is used only by the input side.
   */
  JBLOCKROW MCU_buffer[D_MAX_BLOCKS_IN_MCU];

#ifdef D_MULTISCAN_FILES_SUPPORTED
  /* In multi-pass modes, we need a virtual block array for each component. */
  jvirt_barray_ptr whole_image[MAX_COMPONENTS];
#endif

#ifdef BLOCK_SMOOTHING_SUPPORTED
  /* When doing block smoothing, we latch coefficient Al values here */
  int * coef_bits_latch;
#define SAVED_COEFS  6		/* we save coef_bits[0..5] */
#endif
} my_coef_controller3;

typedef my_coef_controller3 * my_coef_ptr3;

/* Forward declarations */
METHODDEF(int) decompress_onepass
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#ifdef D_MULTISCAN_FILES_SUPPORTED
METHODDEF(int) decompress_data
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#endif
#ifdef BLOCK_SMOOTHING_SUPPORTED
LOCAL(boolean) smoothing_ok JPP((j_decompress_ptr cinfo));
METHODDEF(int) decompress_smooth_data
	JPP((j_decompress_ptr cinfo, JSAMPIMAGE output_buf));
#endif

LOCAL(void)
start_iMCU_row3 (j_decompress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row (input side) */
{
  my_coef_ptr3 coef = (my_coef_ptr3) cinfo->coef;

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
	coef->MCU_rows_per_iMCU_row = 1;
  } else {
	if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
	  coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
	else
	  coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
  }

  coef->MCU_ctr = 0;
  coef->MCU_vert_offset = 0;
}

/*
 * Initialize for an input processing pass.
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
  cinfo->input_iMCU_row = 0;
  start_iMCU_row3(cinfo);
}

/*
 * Initialize for an output processing pass.
 */

METHODDEF(void)
start_output_pass (j_decompress_ptr cinfo)
{
#ifdef BLOCK_SMOOTHING_SUPPORTED
  my_coef_ptr3 coef = (my_coef_ptr3) cinfo->coef;

  /* If multipass, check to see whether to use block smoothing on this pass */
  if (coef->pub.coef_arrays != NULL) {
	if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
	  coef->pub.decompress_data = decompress_smooth_data;
	else
	  coef->pub.decompress_data = decompress_data;
  }
#endif
  cinfo->output_iMCU_row = 0;
}

/*
 * Decompress and return some data in the single-pass case.
 * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
 * Input and output must run in lockstep since we have only a one-MCU buffer.
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 *
 * NB: output_buf contains a plane for each component in image,
 * which we index according to the component's SOF position.
 */

METHODDEF(int)
decompress_onepass (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr3 coef = (my_coef_ptr3) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  int blkn, ci, xindex, yindex, yoffset, useful_width;
  JSAMPARRAY output_ptr;
  JDIMENSION start_col, output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Loop to process as much as one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
	   yoffset++) {
	for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
	 MCU_col_num++) {
	  /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
	  jzero_far((void FAR *) coef->MCU_buffer[0],
		(size_t) (cinfo->blocks_in_MCU * SIZEOF(JBLOCK)));
	  if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->MCU_ctr = MCU_col_num;
	return JPEG_SUSPENDED;
	  }
	  /* Determine where data should go in output_buf and do the IDCT thing.
	   * We skip dummy blocks at the right and bottom edges (but blkn gets
	   * incremented past them!).  Note the inner loop relies on having
	   * allocated the MCU_buffer[] blocks sequentially.
	   */
	  blkn = 0;			/* index of current DCT block within MCU */
	  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	/* Don't bother to IDCT an uninteresting component. */
	if (! compptr->component_needed) {
	  blkn += compptr->MCU_blocks;
	  continue;
	}
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						    : compptr->last_col_width;
	output_ptr = output_buf[compptr->component_index] +
	  yoffset * compptr->DCT_scaled_size;
	start_col = MCU_col_num * compptr->MCU_sample_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
	      yoffset+yindex < compptr->last_row_height) {
	    output_col = start_col;
	    for (xindex = 0; xindex < useful_width; xindex++) {
	      (*inverse_DCT) (cinfo, compptr,
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
			      output_ptr, output_col);
	      output_col += compptr->DCT_scaled_size;
	    }
	  }
	  blkn += compptr->MCU_width;
	  output_ptr += compptr->DCT_scaled_size;
	}
	  }
	}
	/* Completed an MCU row, but perhaps not an iMCU row */
	coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  cinfo->output_iMCU_row++;
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
	start_iMCU_row3(cinfo);
	return JPEG_ROW_COMPLETED;
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}

/*
 * Dummy consume-input routine for single-pass operation.
 */

METHODDEF(int)
dummy_consume_data (j_decompress_ptr)
{
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
}

#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Consume input data and store it in the full-image coefficient buffer.
 * We read as much as one fully interleaved MCU row ("iMCU" row) per call,
 * ie, v_samp_factor block rows for each component in the scan.
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
  my_coef_ptr3 coef = (my_coef_ptr3) cinfo->coef;
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  int blkn, ci, xindex, yindex, yoffset;
  JDIMENSION start_col;
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	buffer[ci] = (*cinfo->mem->access_virt_barray)
	  ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
	   cinfo->input_iMCU_row * compptr->v_samp_factor,
	   (JDIMENSION) compptr->v_samp_factor, TRUE);
	/* Note: entropy decoder expects buffer to be zeroed,
	 * but this is handled automatically by the memory manager
	 * because we requested a pre-zeroed array.
	 */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
	   yoffset++) {
	for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
	 MCU_col_num++) {
	  /* Construct list of pointers to DCT blocks belonging to this MCU */
	  blkn = 0;			/* index of current DCT block within MCU */
	  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	start_col = MCU_col_num * compptr->MCU_width;
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
	  }
	}
	  }
	  /* Try to fetch the MCU. */
	  if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
	coef->MCU_ctr = MCU_col_num;
	return JPEG_SUSPENDED;
	  }
	}
	/* Completed an MCU row, but perhaps not an iMCU row */
	coef->MCU_ctr = 0;
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
	start_iMCU_row3(cinfo);
	return JPEG_ROW_COMPLETED;
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
  return JPEG_SCAN_COMPLETED;
}

/*
 * Decompress and return some data in the multi-pass case.
 * Always attempts to emit one fully interleaved MCU row ("iMCU" row).
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 *
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr3 coef = (my_coef_ptr3) cinfo->coef;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  JDIMENSION block_num;
  int ci, block_row, block_rows;
  JBLOCKARRAY buffer;
  JBLOCKROW buffer_ptr;
  JSAMPARRAY output_ptr;
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
	if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
	  return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* Don't bother to IDCT an uninteresting component. */
	if (! compptr->component_needed)
	  continue;
	/* Align the virtual buffer for this component. */
	buffer = (*cinfo->mem->access_virt_barray)
	  ((j_common_ptr) cinfo, coef->whole_image[ci],
	   cinfo->output_iMCU_row * compptr->v_samp_factor,
	   (JDIMENSION) compptr->v_samp_factor, FALSE);
	/* Count non-dummy DCT block rows in this iMCU row. */
	if (cinfo->output_iMCU_row < last_iMCU_row)
	  block_rows = compptr->v_samp_factor;
	else {
	  /* NB: can't use last_row_height here; it is input-side-dependent! */
	  block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
	  if (block_rows == 0) block_rows = compptr->v_samp_factor;
	}
	inverse_DCT = cinfo->idct->inverse_DCT[ci];
	output_ptr = output_buf[ci];
	/* Loop over all DCT blocks to be processed. */
	for (block_row = 0; block_row < block_rows; block_row++) {
	  buffer_ptr = buffer[block_row];
	  output_col = 0;
	  for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
			output_ptr, output_col);
	buffer_ptr++;
	output_col += compptr->DCT_scaled_size;
	  }
	  output_ptr += compptr->DCT_scaled_size;
	}
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
	return JPEG_ROW_COMPLETED;
  return JPEG_SCAN_COMPLETED;
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */

#ifdef BLOCK_SMOOTHING_SUPPORTED

/*
 * This code applies interblock smoothing as described by section K.8
 * of the JPEG standard: the first 5 AC coefficients are estimated from
 * the DC values of a DCT block and its 8 neighboring blocks.
 * We apply smoothing only for progressive JPEG decoding, and only if
 * the coefficients it can estimate are not yet known to full precision.
 */

/* Natural-order array positions of the first 5 zigzag-order coefficients */
#define Q01_POS  1
#define Q10_POS  8
#define Q20_POS  16
#define Q11_POS  9
#define Q02_POS  2

/*
 * Determine whether block smoothing is applicable and safe.
 * We also latch the current states of the coef_bits[] entries for the
 * AC coefficients; otherwise, if the input side of the decompressor
 * advances into a new scan, we might think the coefficients are known
 * more accurately than they really are.
 */

LOCAL(boolean)
smoothing_ok (j_decompress_ptr cinfo)
{
  my_coef_ptr3 coef = (my_coef_ptr3) cinfo->coef;
  boolean smoothing_useful = FALSE;
  int ci, coefi;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
	return FALSE;

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
	coef->coef_bits_latch = (int *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  cinfo->num_components *
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* All components' quantization values must already be latched. */
	if ((qtable = compptr->quant_table) == NULL)
	  return FALSE;
	/* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
	if (qtable->quantval[0] == 0 ||
	qtable->quantval[Q01_POS] == 0 ||
	qtable->quantval[Q10_POS] == 0 ||
	qtable->quantval[Q20_POS] == 0 ||
	qtable->quantval[Q11_POS] == 0 ||
	qtable->quantval[Q02_POS] == 0)
	  return FALSE;
	/* DC values must be at least partly known for all components. */
	coef_bits = cinfo->coef_bits[ci];
	if (coef_bits[0] < 0)
	  return FALSE;
	/* Block smoothing is helpful if some AC coefficients remain inaccurate. */
	for (coefi = 1; coefi <= 5; coefi++) {
	  coef_bits_latch[coefi] = coef_bits[coefi];
	  if (coef_bits[coefi] != 0)
	smoothing_useful = TRUE;
	}
	coef_bits_latch += SAVED_COEFS;
  }

  return smoothing_useful;
}

/*
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
  my_coef_ptr3 coef = (my_coef_ptr3) cinfo->coef;
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
  JDIMENSION block_num, last_block_column;
  int ci, block_row, block_rows, access_rows;
  JBLOCKARRAY buffer;
  JBLOCKROW buffer_ptr, prev_block_row, next_block_row;
  JSAMPARRAY output_ptr;
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;
  boolean first_row, last_row;
  JBLOCK workspace;
  int *coef_bits;
  JQUANT_TBL *quanttbl;
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
	 ! cinfo->inputctl->eoi_reached) {
	if (cinfo->input_scan_number == cinfo->output_scan_number) {
	  /* If input is working on current scan, we ordinarily want it to
	   * have completed the current row.  But if input scan is DC,
	   * we want it to keep one row ahead so that next block row's DC
	   * values are up to date.
	   */
	  JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
	  if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
	break;
	}
	if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
	  return JPEG_SUSPENDED;
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* Don't bother to IDCT an uninteresting component. */
	if (! compptr->component_needed)
	  continue;
	/* Count non-dummy DCT block rows in this iMCU row. */
	if (cinfo->output_iMCU_row < last_iMCU_row) {
	  block_rows = compptr->v_samp_factor;
	  access_rows = block_rows * 2; /* this and next iMCU row */
	  last_row = FALSE;
	} else {
	  /* NB: can't use last_row_height here; it is input-side-dependent! */
	  block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
	  if (block_rows == 0) block_rows = compptr->v_samp_factor;
	  access_rows = block_rows; /* this iMCU row only */
	  last_row = TRUE;
	}
	/* Align the virtual buffer for this component. */
	if (cinfo->output_iMCU_row > 0) {
	  access_rows += compptr->v_samp_factor; /* prior iMCU row too */
	  buffer = (*cinfo->mem->access_virt_barray)
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
	 (JDIMENSION) access_rows, FALSE);
	  buffer += compptr->v_samp_factor;	/* point to current iMCU row */
	  first_row = FALSE;
	} else {
	  buffer = (*cinfo->mem->access_virt_barray)
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (JDIMENSION) 0, (JDIMENSION) access_rows, FALSE);
	  first_row = TRUE;
	}
	/* Fetch component-dependent info */
	coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
	quanttbl = compptr->quant_table;
	Q00 = quanttbl->quantval[0];
	Q01 = quanttbl->quantval[Q01_POS];
	Q10 = quanttbl->quantval[Q10_POS];
	Q20 = quanttbl->quantval[Q20_POS];
	Q11 = quanttbl->quantval[Q11_POS];
	Q02 = quanttbl->quantval[Q02_POS];
	inverse_DCT = cinfo->idct->inverse_DCT[ci];
	output_ptr = output_buf[ci];
	/* Loop over all DCT blocks to be processed. */
	for (block_row = 0; block_row < block_rows; block_row++) {
	  buffer_ptr = buffer[block_row];
	  if (first_row && block_row == 0)
	prev_block_row = buffer_ptr;
	  else
	prev_block_row = buffer[block_row-1];
	  if (last_row && block_row == block_rows-1)
	next_block_row = buffer_ptr;
	  else
	next_block_row = buffer[block_row+1];
	  /* We fetch the surrounding DC values using a sliding-register approach.
	   * Initialize all nine here so as to do the right thing on narrow pics.
	   */
	  DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
	  DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
	  DC7 = DC8 = DC9 = (int) next_block_row[0][0];
	  output_col = 0;
	  last_block_column = compptr->width_in_blocks - 1;
	  for (block_num = 0; block_num <= last_block_column; block_num++) {
	/* Fetch current DCT block into workspace so we can modify it. */
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
	/* Update DC values */
	if (block_num < last_block_column) {
	  DC3 = (int) prev_block_row[1][0];
	  DC6 = (int) buffer_ptr[1][0];
	  DC9 = (int) next_block_row[1][0];
	}
	/* Compute coefficient estimates per K.8.
	 * An estimate is applied only if coefficient is still zero,
	 * and is not known to be fully accurate.
	 */
	/* AC01 */
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
	  num = 36 * Q00 * (DC4 - DC6);
	  if (num >= 0) {
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[1] = (JCOEF) pred;
	}
	/* AC10 */
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
	  num = 36 * Q00 * (DC2 - DC8);
	  if (num >= 0) {
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[8] = (JCOEF) pred;
	}
	/* AC20 */
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
	  if (num >= 0) {
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[16] = (JCOEF) pred;
	}
	/* AC11 */
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
	  if (num >= 0) {
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[9] = (JCOEF) pred;
	}
	/* AC02 */
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
	  if (num >= 0) {
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	  } else {
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
	    if (Al > 0 && pred >= (1<<Al))
	      pred = (1<<Al)-1;
	    pred = -pred;
	  }
	  workspace[2] = (JCOEF) pred;
	}
	/* OK, do the IDCT */
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
			output_ptr, output_col);
	/* Advance for next column */
	DC1 = DC2; DC2 = DC3;
	DC4 = DC5; DC5 = DC6;
	DC7 = DC8; DC8 = DC9;
	buffer_ptr++, prev_block_row++, next_block_row++;
	output_col += compptr->DCT_scaled_size;
	  }
	  output_ptr += compptr->DCT_scaled_size;
	}
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
	return JPEG_ROW_COMPLETED;
  return JPEG_SCAN_COMPLETED;
}

#endif /* BLOCK_SMOOTHING_SUPPORTED */

/*
 * Initialize coefficient buffer controller.
 */

GLOBAL(void)
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_coef_ptr3 coef;

  coef = (my_coef_ptr3)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_coef_controller3));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
  coef->pub.start_input_pass = start_input_pass;
  coef->pub.start_output_pass = start_output_pass;
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
#ifdef D_MULTISCAN_FILES_SUPPORTED
	/* Allocate a full-image virtual array for each component, */
	/* padded to a multiple of samp_factor DCT blocks in each direction. */
	/* Note we ask for a pre-zeroed array. */
	int ci, access_rows;
	jpeg_component_info *compptr;

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
	  access_rows = compptr->v_samp_factor;
#ifdef BLOCK_SMOOTHING_SUPPORTED
	  /* If block smoothing could be used, need a bigger window */
	  if (cinfo->progressive_mode)
	access_rows *= 3;
#endif
	  coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) access_rows);
	}
	coef->pub.consume_data = consume_data;
	coef->pub.decompress_data = decompress_data;
	coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
#else
	ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
  } else {
	/* We only need a single-MCU buffer. */
	JBLOCKROW buffer;
	int i;

	buffer = (JBLOCKROW)
	  (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK));
	for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
	  coef->MCU_buffer[i] = buffer + i;
	}
	coef->pub.consume_data = dummy_consume_data;
	coef->pub.decompress_data = decompress_onepass;
	coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}

/*** End of inlined file: jdcoefct.c ***/

	#undef FIX

/*** Start of inlined file: jdcolor.c ***/
#define JPEG_INTERNALS

/* Private subobject */

typedef struct {
  struct jpeg_color_deconverter pub; /* public fields */

  /* Private state for YCC->RGB conversion */
  int * Cr_r_tab;		/* => table for Cr to R conversion */
  int * Cb_b_tab;		/* => table for Cb to B conversion */
  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */
} my_color_deconverter2;

typedef my_color_deconverter2 * my_cconvert_ptr2;

/**************** YCbCr -> RGB conversion: most common case **************/

/*
 * YCbCr is defined per CCIR 601-1, except that Cb and Cr are
 * normalized to the range 0..MAXJSAMPLE rather than -0.5 .. 0.5.
 * The conversion equations to be implemented are therefore
 *	R = Y                + 1.40200 * Cr
 *	G = Y - 0.34414 * Cb - 0.71414 * Cr
 *	B = Y + 1.77200 * Cb
 * where Cb and Cr represent the incoming values less CENTERJSAMPLE.
 * (These numbers are derived from TIFF 6.0 section 21, dated 3-June-92.)
 *
 * To avoid floating-point arithmetic, we represent the fractional constants
 * as integers scaled up by 2^16 (about 4 digits precision); we have to divide
 * the products by 2^16, with appropriate rounding, to get the correct answer.
 * Notice that Y, being an integral input, does not contribute any fraction
 * so it need not participate in the rounding.
 *
 * For even more speed, we avoid doing any multiplications in the inner loop
 * by precalculating the constants times Cb and Cr for all possible values.
 * For 8-bit JSAMPLEs this is very reasonable (only 256 entries per table);
 * for 12-bit samples it is still acceptable.  It's not very reasonable for
 * 16-bit samples, but if you want lossless storage you shouldn't be changing
 * colorspace anyway.
 * The Cr=>R and Cb=>B values can be rounded to integers in advance; the
 * values for the G calculation are left scaled up, since we must add them
 * together before rounding.
 */

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))

/*
 * Initialize tables for YCC->RGB colorspace conversion.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
  my_cconvert_ptr2 cconvert = (my_cconvert_ptr2) cinfo->cconvert;
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  cconvert->Cb_g_tab = (INT32 *)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
	/* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
	/* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
	/* Cr=>R value is nearest int to 1.40200 * x */
	cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
	/* Cb=>B value is nearest int to 1.77200 * x */
	cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
	/* Cr=>G value is scaled-up -0.71414 * x */
	cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
	/* Cb=>G value is scaled-up -0.34414 * x */
	/* We also add in ONE_HALF so that need not do it in inner loop */
	cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
  }
}

/*
 * Convert some rows of samples to the output colorspace.
 *
 * Note that we change from noninterleaved, one-plane-per-component format
 * to interleaved-pixel format.  The output buffer is therefore three times
 * as wide as the input buffer.
 * A starting row offset is provided only for the input buffer.  The caller
 * can easily adjust the passed output_buf value to accommodate any row
 * offset required on that side.
 */

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr2 cconvert = (my_cconvert_ptr2) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
	inptr0 = input_buf[0][input_row];
	inptr1 = input_buf[1][input_row];
	inptr2 = input_buf[2][input_row];
	input_row++;
	outptr = *output_buf++;
	for (col = 0; col < num_cols; col++) {
	  y  = GETJSAMPLE(inptr0[col]);
	  cb = GETJSAMPLE(inptr1[col]);
	  cr = GETJSAMPLE(inptr2[col]);
	  /* Range-limiting is essential due to noise introduced by DCT losses. */
	  outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
	  outptr[RGB_GREEN] = range_limit[y +
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
						 SCALEBITS))];
	  outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
	  outptr += RGB_PIXELSIZE;
	}
  }
}

/**************** Cases other than YCbCr -> RGB **************/

/*
 * Color conversion for no colorspace change: just copy the data,
 * converting from separate-planes to interleaved representation.
 */

METHODDEF(void)
null_convert2 (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
  JDIMENSION num_cols = cinfo->output_width;
  int ci;

  while (--num_rows >= 0) {
	for (ci = 0; ci < num_components; ci++) {
	  inptr = input_buf[ci][input_row];
	  outptr = output_buf[0] + ci;
	  for (count = num_cols; count > 0; count--) {
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
	outptr += num_components;
	  }
	}
	input_row++;
	output_buf++;
  }
}

/*
 * Color conversion for grayscale: just copy the data.
 * This also works for YCbCr -> grayscale conversion, in which
 * we just copy the Y (luminance) component and ignore chrominance.
 */

METHODDEF(void)
grayscale_convert2 (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
		    num_rows, cinfo->output_width);
}

/*
 * Convert grayscale to RGB: just duplicate the graylevel three times.
 * This is provided to support applications that don't want to cope
 * with grayscale as a separate case.
 */

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;

  while (--num_rows >= 0) {
	inptr = input_buf[0][input_row++];
	outptr = *output_buf++;
	for (col = 0; col < num_cols; col++) {
	  /* We can dispense with GETJSAMPLE() here */
	  outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
	  outptr += RGB_PIXELSIZE;
	}
  }
}

/*
 * Adobe-style YCCK->CMYK conversion.
 * We convert YCbCr to R=1-C, G=1-M, and B=1-Y using the same
 * conversion as above, while passing K (black) unchanged.
 * We assume build_ycc_rgb_table has been called.
 */

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
  my_cconvert_ptr2 cconvert = (my_cconvert_ptr2) cinfo->cconvert;
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  register int * Crrtab = cconvert->Cr_r_tab;
  register int * Cbbtab = cconvert->Cb_b_tab;
  register INT32 * Crgtab = cconvert->Cr_g_tab;
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
  SHIFT_TEMPS

  while (--num_rows >= 0) {
	inptr0 = input_buf[0][input_row];
	inptr1 = input_buf[1][input_row];
	inptr2 = input_buf[2][input_row];
	inptr3 = input_buf[3][input_row];
	input_row++;
	outptr = *output_buf++;
	for (col = 0; col < num_cols; col++) {
	  y  = GETJSAMPLE(inptr0[col]);
	  cb = GETJSAMPLE(inptr1[col]);
	  cr = GETJSAMPLE(inptr2[col]);
	  /* Range-limiting is essential due to noise introduced by DCT losses. */
	  outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
	  outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
						 SCALEBITS)))];
	  outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
	  /* K passes through unchanged */
	  outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
	  outptr += 4;
	}
  }
}

/*
 * Empty method for start_pass.
 */

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr)
{
  /* no work needed */
}

/*
 * Module initialization routine for output colorspace conversion.
 */

GLOBAL(void)
jinit_color_deconverter (j_decompress_ptr cinfo)
{
  my_cconvert_ptr2 cconvert;
  int ci;

  cconvert = (my_cconvert_ptr2)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_color_deconverter2));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
  cconvert->pub.start_pass = start_pass_dcolor;

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
  case JCS_GRAYSCALE:
	if (cinfo->num_components != 1)
	  ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
	break;

  case JCS_RGB:
  case JCS_YCbCr:
	if (cinfo->num_components != 3)
	  ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
	break;

  case JCS_CMYK:
  case JCS_YCCK:
	if (cinfo->num_components != 4)
	  ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
	break;

  default:			/* JCS_UNKNOWN can be anything */
	if (cinfo->num_components < 1)
	  ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
	break;
  }

  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
	cinfo->out_color_components = 1;
	if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
	cinfo->jpeg_color_space == JCS_YCbCr) {
	  cconvert->pub.color_convert = grayscale_convert2;
	  /* For color->grayscale conversion, only the Y (0) component is needed */
	  for (ci = 1; ci < cinfo->num_components; ci++)
	cinfo->comp_info[ci].component_needed = FALSE;
	} else
	  ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
	break;

  case JCS_RGB:
	cinfo->out_color_components = RGB_PIXELSIZE;
	if (cinfo->jpeg_color_space == JCS_YCbCr) {
	  cconvert->pub.color_convert = ycc_rgb_convert;
	  build_ycc_rgb_table(cinfo);
	} else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
	  cconvert->pub.color_convert = gray_rgb_convert;
	} else if (cinfo->jpeg_color_space == JCS_RGB && RGB_PIXELSIZE == 3) {
	  cconvert->pub.color_convert = null_convert2;
	} else
	  ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
	break;

  case JCS_CMYK:
	cinfo->out_color_components = 4;
	if (cinfo->jpeg_color_space == JCS_YCCK) {
	  cconvert->pub.color_convert = ycck_cmyk_convert;
	  build_ycc_rgb_table(cinfo);
	} else if (cinfo->jpeg_color_space == JCS_CMYK) {
	  cconvert->pub.color_convert = null_convert2;
	} else
	  ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
	break;

  default:
	/* Permit null conversion to same output space */
	if (cinfo->out_color_space == cinfo->jpeg_color_space) {
	  cinfo->out_color_components = cinfo->num_components;
	  cconvert->pub.color_convert = null_convert2;
	} else			/* unsupported non-null conversion */
	  ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
	break;
  }

  if (cinfo->quantize_colors)
	cinfo->output_components = 1; /* single colormapped output component */
  else
	cinfo->output_components = cinfo->out_color_components;
}

/*** End of inlined file: jdcolor.c ***/


	#undef FIX

/*** Start of inlined file: jddctmgr.c ***/
#define JPEG_INTERNALS

/*
 * The decompressor input side (jdinput.c) saves away the appropriate
 * quantization table for each component at the start of the first scan
 * involving that component.  (This is necessary in order to correctly
 * decode files that reuse Q-table slots.)
 * When we are ready to make an output pass, the saved Q-table is converted
 * to a multiplier table that will actually be used by the IDCT routine.
 * The multiplier table contents are IDCT-method-dependent.  To support
 * application changes in IDCT method between scans, we can remake the
 * multiplier tables if necessary.
 * In buffered-image mode, the first output pass may occur before any data
 * has been seen for some components, and thus before their Q-tables have
 * been saved away.  To handle this case, multiplier tables are preset
 * to zeroes; the result of the IDCT will be a neutral gray level.
 */

/* Private subobject for this module */

typedef struct {
  struct jpeg_inverse_dct pub;	/* public fields */

  /* This array contains the IDCT method code that each multiplier table
   * is currently set up for, or -1 if it's not yet set up.
   * The actual multiplier tables are pointed to by dct_table in the
   * per-component comp_info structures.
   */
  int cur_method[MAX_COMPONENTS];
} my_idct_controller;

typedef my_idct_controller * my_idct_ptr;

/* Allocated multiplier tables: big enough for any supported variant */

typedef union {
  ISLOW_MULT_TYPE islow_array[DCTSIZE2];
#ifdef DCT_IFAST_SUPPORTED
  IFAST_MULT_TYPE ifast_array[DCTSIZE2];
#endif
#ifdef DCT_FLOAT_SUPPORTED
  FLOAT_MULT_TYPE float_array[DCTSIZE2];
#endif
} multiplier_table;

/* The current scaled-IDCT routines require ISLOW-style multiplier tables,
 * so be sure to compile that code if either ISLOW or SCALING is requested.
 */
#ifdef DCT_ISLOW_SUPPORTED
#define PROVIDE_ISLOW_TABLES
#else
#ifdef IDCT_SCALING_SUPPORTED
#define PROVIDE_ISLOW_TABLES
#endif
#endif

/*
 * Prepare for an output pass.
 * Here we select the proper IDCT routine for each component and build
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
  inverse_DCT_method_ptr method_ptr = NULL;
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* Select the proper IDCT routine for this component's scaling */
	switch (compptr->DCT_scaled_size) {
#ifdef IDCT_SCALING_SUPPORTED
	case 1:
	  method_ptr = jpeg_idct_1x1;
	  method = JDCT_ISLOW;	/* jidctred uses islow-style table */
	  break;
	case 2:
	  method_ptr = jpeg_idct_2x2;
	  method = JDCT_ISLOW;	/* jidctred uses islow-style table */
	  break;
	case 4:
	  method_ptr = jpeg_idct_4x4;
	  method = JDCT_ISLOW;	/* jidctred uses islow-style table */
	  break;
#endif
	case DCTSIZE:
	  switch (cinfo->dct_method) {
#ifdef DCT_ISLOW_SUPPORTED
	  case JDCT_ISLOW:
	method_ptr = jpeg_idct_islow;
	method = JDCT_ISLOW;
	break;
#endif
#ifdef DCT_IFAST_SUPPORTED
	  case JDCT_IFAST:
	method_ptr = jpeg_idct_ifast;
	method = JDCT_IFAST;
	break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
	  case JDCT_FLOAT:
	method_ptr = jpeg_idct_float;
	method = JDCT_FLOAT;
	break;
#endif
	  default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
	break;
	  }
	  break;
	default:
	  ERREXIT1(cinfo, JERR_BAD_DCTSIZE, compptr->DCT_scaled_size);
	  break;
	}
	idct->pub.inverse_DCT[ci] = method_ptr;
	/* Create multiplier table from quant table.
	 * However, we can skip this if the component is uninteresting
	 * or if we already built the table.  Also, if no quant table
	 * has yet been saved for the component, we leave the
	 * multiplier table all-zero; we'll be reading zeroes from the
	 * coefficient controller's buffer anyway.
	 */
	if (! compptr->component_needed || idct->cur_method[ci] == method)
	  continue;
	qtbl = compptr->quant_table;
	if (qtbl == NULL)		/* happens if no data yet for component */
	  continue;
	idct->cur_method[ci] = method;
	switch (method) {
#ifdef PROVIDE_ISLOW_TABLES
	case JDCT_ISLOW:
	  {
	/* For LL&M IDCT method, multipliers are equal to raw quantization
	 * coefficients, but are stored as ints to ensure access efficiency.
	 */
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
	for (i = 0; i < DCTSIZE2; i++) {
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
	}
	  }
	  break;
#endif
#ifdef DCT_IFAST_SUPPORTED
	case JDCT_IFAST:
	  {
	/* For AA&N IDCT method, multipliers are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * For integer operation, the multiplier table is to be scaled by
	 * IFAST_SCALE_BITS.
	 */
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
#define CONST_BITS 14
	static const INT16 aanscales[DCTSIZE2] = {
	  /* precomputed values scaled up by 14 bits */
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  22725, 31521, 29692, 26722, 22725, 17855, 12299,  6270,
	  21407, 29692, 27969, 25172, 21407, 16819, 11585,  5906,
	  19266, 26722, 25172, 22654, 19266, 15137, 10426,  5315,
	  16384, 22725, 21407, 19266, 16384, 12873,  8867,  4520,
	  12873, 17855, 16819, 15137, 12873, 10114,  6967,  3552,
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	for (i = 0; i < DCTSIZE2; i++) {
	  ifmtbl[i] = (IFAST_MULT_TYPE)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
				  (INT32) aanscales[i]),
		    CONST_BITS-IFAST_SCALE_BITS);
	}
	  }
	  break;
#endif
#ifdef DCT_FLOAT_SUPPORTED
	case JDCT_FLOAT:
	  {
	/* For float AA&N IDCT method, multipliers are equal to quantization
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 */
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
	int row, col;
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	i = 0;
	for (row = 0; row < DCTSIZE; row++) {
	  for (col = 0; col < DCTSIZE; col++) {
	    fmtbl[i] = (FLOAT_MULT_TYPE)
	      ((double) qtbl->quantval[i] *
	       aanscalefactor[row] * aanscalefactor[col]);
	    i++;
	  }
	}
	  }
	  break;
#endif
	default:
	  ERREXIT(cinfo, JERR_NOT_COMPILED);
	  break;
	}
  }
}

/*
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
  idct->pub.start_pass = start_pass;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* Allocate and pre-zero a multiplier table for each component */
	compptr->dct_table =
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(multiplier_table));
	MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
	/* Mark multiplier table not yet set up for any method */
	idct->cur_method[ci] = -1;
  }
}

/*** End of inlined file: jddctmgr.c ***/


	#undef CONST_BITS
	#undef ASSIGN_STATE

/*** Start of inlined file: jdhuff.c ***/
#define JPEG_INTERNALS


/*** Start of inlined file: jdhuff.h ***/
/* Short forms of external names for systems with brain-damaged linkers. */

#ifndef __jdhuff_h__
#define __jdhuff_h__

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_make_d_derived_tbl	jMkDDerived
#define jpeg_fill_bit_buffer	jFilBitBuf
#define jpeg_huff_decode	jHufDecode
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/* Derived data constructed for each Huffman table */

#define HUFF_LOOKAHEAD	8	/* # of bits of lookahead */

typedef struct {
  /* Basic tables: (element [0] of each array is unused) */
  INT32 maxcode[18];		/* largest code of length k (-1 if none) */
  /* (maxcode[17] is a sentinel to ensure jpeg_huff_decode terminates) */
  INT32 valoffset[17];		/* huffval[] offset for codes of length k */
  /* valoffset[k] = huffval[] index of 1st symbol of code length k, less
   * the smallest code of length k; so given a code of length k, the
   * corresponding symbol is huffval[code + valoffset[k]]
   */

  /* Link to public Huffman table (needed only in jpeg_huff_decode) */
  JHUFF_TBL *pub;

  /* Lookahead tables: indexed by the next HUFF_LOOKAHEAD bits of
   * the input data stream.  If the next Huffman code is no more
   * than HUFF_LOOKAHEAD bits long, we can obtain its length and
   * the corresponding symbol directly from these tables.
   */
  int look_nbits[1<<HUFF_LOOKAHEAD]; /* # bits, or 0 if too long */
  UINT8 look_sym[1<<HUFF_LOOKAHEAD]; /* symbol, or unused */
} d_derived_tbl;

/* Expand a Huffman table definition into the derived format */
EXTERN(void) jpeg_make_d_derived_tbl
	JPP((j_decompress_ptr cinfo, boolean isDC, int tblno,
	     d_derived_tbl ** pdtbl));

/*
 * Fetching the next N bits from the input stream is a time-critical operation
 * for the Huffman decoders.  We implement it with a combination of inline
 * macros and out-of-line subroutines.  Note that N (the number of bits
 * demanded at one time) never exceeds 15 for JPEG use.
 *
 * We read source bytes into get_buffer and dole out bits as needed.
 * If get_buffer already contains enough bits, they are fetched in-line
 * by the macros CHECK_BIT_BUFFER and GET_BITS.  When there aren't enough
 * bits, jpeg_fill_bit_buffer is called; it will attempt to fill get_buffer
 * as full as possible (not just to the number of bits needed; this
 * prefetching reduces the overhead cost of calling jpeg_fill_bit_buffer).
 * Note that jpeg_fill_bit_buffer may return FALSE to indicate suspension.
 * On TRUE return, jpeg_fill_bit_buffer guarantees that get_buffer contains
 * at least the requested number of bits --- dummy zeroes are inserted if
 * necessary.
 */

typedef INT32 bit_buf_type;	/* type of bit-extraction buffer */
#define BIT_BUF_SIZE  32	/* size of buffer in bits */

/* If long is > 32 bits on your machine, and shifting/masking longs is
 * reasonably fast, making bit_buf_type be long and setting BIT_BUF_SIZE
 * appropriately should be a win.  Unfortunately we can't define the size
 * with something like  #define BIT_BUF_SIZE (sizeof(bit_buf_type)*8)
 * because not all machines measure sizeof in 8-bit bytes.
 */

typedef struct {		/* Bitreading state saved across MCUs */
  bit_buf_type get_buffer;	/* current bit-extraction buffer */
  int bits_left;		/* # of unused bits in it */
} bitread_perm_state;

typedef struct {		/* Bitreading working state within an MCU */
  /* Current data source location */
  /* We need a copy, rather than munging the original, in case of suspension */
  const JOCTET * next_input_byte; /* => next byte to read from source */
  size_t bytes_in_buffer;	/* # of bytes remaining in source buffer */
  /* Bit input buffer --- note these values are kept in register variables,
   * not in this struct, inside the inner loops.
   */
  bit_buf_type get_buffer;	/* current bit-extraction buffer */
  int bits_left;		/* # of unused bits in it */
  /* Pointer needed by jpeg_fill_bit_buffer. */
  j_decompress_ptr cinfo;	/* back link to decompress master record */
} bitread_working_state;

/* Macros to declare and load/save bitread local variables. */
#define BITREAD_STATE_VARS  \
	register bit_buf_type get_buffer;  \
	register int bits_left;  \
	bitread_working_state br_state

#define BITREAD_LOAD_STATE(cinfop,permstate)  \
	br_state.cinfo = cinfop; \
	br_state.next_input_byte = cinfop->src->next_input_byte; \
	br_state.bytes_in_buffer = cinfop->src->bytes_in_buffer; \
	get_buffer = permstate.get_buffer; \
	bits_left = permstate.bits_left;

#define BITREAD_SAVE_STATE(cinfop,permstate)  \
	cinfop->src->next_input_byte = br_state.next_input_byte; \
	cinfop->src->bytes_in_buffer = br_state.bytes_in_buffer; \
	permstate.get_buffer = get_buffer; \
	permstate.bits_left = bits_left

/*
 * These macros provide the in-line portion of bit fetching.
 * Use CHECK_BIT_BUFFER to ensure there are N bits in get_buffer
 * before using GET_BITS, PEEK_BITS, or DROP_BITS.
 * The variables get_buffer and bits_left are assumed to be locals,
 * but the state struct might not be (jpeg_huff_decode needs this).
 *	CHECK_BIT_BUFFER(state,n,action);
 *		Ensure there are N bits in get_buffer; if suspend, take action.
 *      val = GET_BITS(n);
 *		Fetch next N bits.
 *      val = PEEK_BITS(n);
 *		Fetch next N bits without removing them from the buffer.
 *	DROP_BITS(n);
 *		Discard next N bits.
 * The value N should be a simple variable, not an expression, because it
 * is evaluated multiple times.
 */

#define CHECK_BIT_BUFFER(state,nbits,action) \
	{ if (bits_left < (nbits)) {  \
	    if (! jpeg_fill_bit_buffer(&(state),get_buffer,bits_left,nbits))  \
	      { action; }  \
	    get_buffer = (state).get_buffer; bits_left = (state).bits_left; } }

#define GET_BITS(nbits) \
	(((int) (get_buffer >> (bits_left -= (nbits)))) & ((1<<(nbits))-1))

#define PEEK_BITS(nbits) \
	(((int) (get_buffer >> (bits_left -  (nbits)))) & ((1<<(nbits))-1))

#define DROP_BITS(nbits) \
	(bits_left -= (nbits))

/* Load up the bit buffer to a depth of at least nbits */
EXTERN(boolean) jpeg_fill_bit_buffer
	JPP((bitread_working_state * state, register bit_buf_type get_buffer,
	     register int bits_left, int nbits));

/*
 * Code for extracting next Huffman-coded symbol from input bit stream.
 * Again, this is time-critical and we make the main paths be macros.
 *
 * We use a lookahead table to process codes of up to HUFF_LOOKAHEAD bits
 * without looping.  Usually, more than 95% of the Huffman codes will be 8
 * or fewer bits long.  The few overlength codes are handled with a loop,
 * which need not be inline code.
 *
 * Notes about the HUFF_DECODE macro:
 * 1. Near the end of the data segment, we may fail to get enough bits
 *    for a lookahead.  In that case, we do it the hard way.
 * 2. If the lookahead table contains no entry, the next code must be
 *    more than HUFF_LOOKAHEAD bits long.
 * 3. jpeg_huff_decode returns -1 if forced to suspend.
 */

#define HUFF_DECODE(result,state,htbl,failaction,slowlabel) \
{ register int nb, look; \
  if (bits_left < HUFF_LOOKAHEAD) { \
	if (! jpeg_fill_bit_buffer(&state,get_buffer,bits_left, 0)) {failaction;} \
	get_buffer = state.get_buffer; bits_left = state.bits_left; \
	if (bits_left < HUFF_LOOKAHEAD) { \
	  nb = 1; goto slowlabel; \
	} \
  } \
  look = PEEK_BITS(HUFF_LOOKAHEAD); \
  if ((nb = htbl->look_nbits[look]) != 0) { \
	DROP_BITS(nb); \
	result = htbl->look_sym[look]; \
  } else { \
	nb = HUFF_LOOKAHEAD+1; \
slowlabel: \
	if ((result=jpeg_huff_decode(&state,get_buffer,bits_left,htbl,nb)) < 0) \
	{ failaction; } \
	get_buffer = state.get_buffer; bits_left = state.bits_left; \
  } \
}

/* Out-of-line case for Huffman code fetching */
EXTERN(int) jpeg_huff_decode
	JPP((bitread_working_state * state, register bit_buf_type get_buffer,
	     register int bits_left, d_derived_tbl * htbl, int min_bits));

#endif

/*** End of inlined file: jdhuff.h ***/

/*
 * Expanded entropy decoder object for Huffman decoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  int last_dc_val[MAX_COMPS_IN_SCAN]; /* last DC coef for each component */
} savable_state2;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif

typedef struct {
  struct jpeg_entropy_decoder pub; /* public fields */

  /* These fields are loaded into local variables at start of each MCU.
   * In case of suspension, we exit WITHOUT updating them.
   */
  bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
  savable_state2 saved;		/* Other state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  d_derived_tbl * dc_derived_tbls[NUM_HUFF_TBLS];
  d_derived_tbl * ac_derived_tbls[NUM_HUFF_TBLS];

  /* Precalculated info set up by start_pass for use in decode_mcu: */

  /* Pointers to derived tables to be used for each block within an MCU */
  d_derived_tbl * dc_cur_tbls[D_MAX_BLOCKS_IN_MCU];
  d_derived_tbl * ac_cur_tbls[D_MAX_BLOCKS_IN_MCU];
  /* Whether we care about the DC and AC coefficient values for each block */
  boolean dc_needed[D_MAX_BLOCKS_IN_MCU];
  boolean ac_needed[D_MAX_BLOCKS_IN_MCU];
} huff_entropy_decoder2;

typedef huff_entropy_decoder2 * huff_entropy_ptr2;

/*
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
  huff_entropy_ptr2 entropy = (huff_entropy_ptr2) cinfo->entropy;
  int ci, blkn, dctbl, actbl;
  jpeg_component_info * compptr;

  /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
   * This ought to be an error condition, but we make it a warning because
   * there are some baseline files out there with all zeroes in these bytes.
   */
  if (cinfo->Ss != 0 || cinfo->Se != DCTSIZE2-1 ||
	  cinfo->Ah != 0 || cinfo->Al != 0)
	WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	dctbl = compptr->dc_tbl_no;
	actbl = compptr->ac_tbl_no;
	/* Compute derived values for Huffman tables */
	/* We may do this more than once for a table, but it's not expensive */
	jpeg_make_d_derived_tbl(cinfo, TRUE, dctbl,
			    & entropy->dc_derived_tbls[dctbl]);
	jpeg_make_d_derived_tbl(cinfo, FALSE, actbl,
			    & entropy->ac_derived_tbls[actbl]);
	/* Initialize DC predictions to 0 */
	entropy->saved.last_dc_val[ci] = 0;
  }

  /* Precalculate decoding info for each block in an MCU of this scan */
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
	ci = cinfo->MCU_membership[blkn];
	compptr = cinfo->cur_comp_info[ci];
	/* Precalculate which table to use for each block */
	entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
	entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
	/* Decide whether we really care about the coefficient values */
	if (compptr->component_needed) {
	  entropy->dc_needed[blkn] = TRUE;
	  /* we don't need the ACs if producing a 1/8th-size image */
	  entropy->ac_needed[blkn] = (compptr->DCT_scaled_size > 1);
	} else {
	  entropy->dc_needed[blkn] = entropy->ac_needed[blkn] = FALSE;
	}
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
  entropy->pub.insufficient_data = FALSE;

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
}

/*
 * Compute the derived values for a Huffman table.
 * This routine also performs some validation checks on the table.
 *
 * Note this is also used by jdphuff.c.
 */

GLOBAL(void)
jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, boolean isDC, int tblno,
			 d_derived_tbl ** pdtbl)
{
  JHUFF_TBL *htbl;
  d_derived_tbl *dtbl;
  int p, i, l, si, numsymbols;
  int lookbits, ctr;
  char huffsize[257];
  unsigned int huffcode[257];
  unsigned int code;

  /* Note that huffsize[] and huffcode[] are filled in code-length order,
   * paralleling the order of the symbols themselves in htbl->huffval[].
   */

  /* Find the input Huffman table */
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
	ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
  htbl =
	isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
  if (htbl == NULL)
	ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
	*pdtbl = (d_derived_tbl *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(d_derived_tbl));
  dtbl = *pdtbl;
  dtbl->pub = htbl;		/* fill in back link */

  /* Figure C.1: make table of Huffman code length for each symbol */

  p = 0;
  for (l = 1; l <= 16; l++) {
	i = (int) htbl->bits[l];
	if (i < 0 || p + i > 256)	/* protect against table overrun */
	  ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
	while (i--)
	  huffsize[p++] = (char) l;
  }
  huffsize[p] = 0;
  numsymbols = p;

  /* Figure C.2: generate the codes themselves */
  /* We also validate that the counts represent a legal Huffman code tree. */

  code = 0;
  si = huffsize[0];
  p = 0;
  while (huffsize[p]) {
	while (((int) huffsize[p]) == si) {
	  huffcode[p++] = code;
	  code++;
	}
	/* code is now 1 more than the last code used for codelength si; but
	 * it must still fit in si bits, since no code is allowed to be all ones.
	 */
	if (((INT32) code) >= (((INT32) 1) << si))
	  ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
	code <<= 1;
	si++;
  }

  /* Figure F.15: generate decoding tables for bit-sequential decoding */

  p = 0;
  for (l = 1; l <= 16; l++) {
	if (htbl->bits[l]) {
	  /* valoffset[l] = huffval[] index of 1st symbol of code length l,
	   * minus the minimum code of length l
	   */
	  dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
	  p += htbl->bits[l];
	  dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
	} else {
	  dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
	}
  }
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */

  /* Compute lookahead tables to speed up decoding.
   * First we set all the table entries to 0, indicating "too long";
   * then we iterate through the Huffman codes that are short enough and
   * fill in all the entries that correspond to bit sequences starting
   * with that code.
   */

  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));

  p = 0;
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
	for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
	  /* l = current code's length, p = its index in huffcode[] & huffval[]. */
	  /* Generate left-justified code followed by all possible bit sequences */
	  lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
	  for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
	dtbl->look_nbits[lookbits] = l;
	dtbl->look_sym[lookbits] = htbl->huffval[p];
	lookbits++;
	  }
	}
  }

  /* Validate symbols as being reasonable.
   * For AC tables, we make no check, but accept all byte values 0..255.
   * For DC tables, we require the symbols to be in range 0..15.
   * (Tighter bounds could be applied depending on the data depth and mode,
   * but this is sufficient to ensure safe decoding.)
   */
  if (isDC) {
	for (i = 0; i < numsymbols; i++) {
	  int sym = htbl->huffval[i];
	  if (sym < 0 || sym > 15)
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
	}
  }
}

/*
 * Out-of-line code for bit fetching (shared with jdphuff.c).
 * See jdhuff.h for info about usage.
 * Note: current values of get_buffer and bits_left are passed as parameters,
 * but are returned in the corresponding fields of the state struct.
 *
 * On most machines MIN_GET_BITS should be 25 to allow the full 32-bit width
 * of get_buffer to be used.  (On machines with wider words, an even larger
 * buffer could be used.)  However, on some machines 32-bit shifts are
 * quite slow and take time proportional to the number of places shifted.
 * (This is true with most PC compilers, for instance.)  In this case it may
 * be a win to set MIN_GET_BITS to the minimum value of 15.  This reduces the
 * average shift distance at the cost of more calls to jpeg_fill_bit_buffer.
 */

#ifdef SLOW_SHIFT_32
#define MIN_GET_BITS  15	/* minimum allowable value */
#else
#define MIN_GET_BITS  (BIT_BUF_SIZE-7)
#endif

GLOBAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
  register size_t bytes_in_buffer = state->bytes_in_buffer;
  j_decompress_ptr cinfo = state->cinfo;

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
	while (bits_left < MIN_GET_BITS) {
	  register int c;

	  /* Attempt to read a byte */
	  if (bytes_in_buffer == 0) {
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
	  return FALSE;
	next_input_byte = cinfo->src->next_input_byte;
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
	  }
	  bytes_in_buffer--;
	  c = GETJOCTET(*next_input_byte++);

	  /* If it's 0xFF, check and discard stuffed zero byte */
	  if (c == 0xFF) {
	/* Loop here to discard any padding FF's on terminating marker,
	 * so that we can save a valid unread_marker value.  NOTE: we will
	 * accept multiple FF's followed by a 0 as meaning a single FF data
	 * byte.  This data pattern is not valid according to the standard.
	 */
	do {
	  if (bytes_in_buffer == 0) {
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
	      return FALSE;
	    next_input_byte = cinfo->src->next_input_byte;
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
	  }
	  bytes_in_buffer--;
	  c = GETJOCTET(*next_input_byte++);
	} while (c == 0xFF);

	if (c == 0) {
	  /* Found FF/00, which represents an FF data byte */
	  c = 0xFF;
	} else {
	  /* Oops, it's actually a marker indicating end of compressed data.
	   * Save the marker code for later use.
	   * Fine point: it might appear that we should save the marker into
	   * bitread working state, not straight into permanent state.  But
	   * once we have hit a marker, we cannot need to suspend within the
	   * current MCU, because we will read no more bytes from the data
	   * source.  So it is OK to update permanent state right away.
	   */
	  cinfo->unread_marker = c;
	  /* See if we need to insert some fake zero bits. */
	  goto no_more_bytes;
	}
	  }

	  /* OK, load c into get_buffer */
	  get_buffer = (get_buffer << 8) | c;
	  bits_left += 8;
	} /* end while */
  } else {
  no_more_bytes:
	/* We get here if we've read the marker that terminates the compressed
	 * data segment.  There should be enough bits in the buffer register
	 * to satisfy the request; if so, no problem.
	 */
	if (nbits > bits_left) {
	  /* Uh-oh.  Report corrupted data to user and stuff zeroes into
	   * the data stream, so that we can produce some kind of image.
	   * We use a nonvolatile flag to ensure that only one warning message
	   * appears per data segment.
	   */
	  if (! cinfo->entropy->insufficient_data) {
	WARNMS(cinfo, JWRN_HIT_MARKER);
	cinfo->entropy->insufficient_data = TRUE;
	  }
	  /* Fill the buffer with zero bits */
	  get_buffer <<= MIN_GET_BITS - bits_left;
	  bits_left = MIN_GET_BITS;
	}
  }

  /* Unload the local registers */
  state->next_input_byte = next_input_byte;
  state->bytes_in_buffer = bytes_in_buffer;
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  return TRUE;
}

/*
 * Out-of-line code for Huffman code decoding.
 * See jdhuff.h for info about usage.
 */

GLOBAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
  register int l = min_bits;
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
  code = GET_BITS(l);

  /* Collect the rest of the Huffman code one bit at a time. */
  /* This is per Figure F.16 in the JPEG spec. */

  while (code > htbl->maxcode[l]) {
	code <<= 1;
	CHECK_BIT_BUFFER(*state, 1, return -1);
	code |= GET_BITS(1);
	l++;
  }

  /* Unload the local registers */
  state->get_buffer = get_buffer;
  state->bits_left = bits_left;

  /* With garbage input we may reach the sentinel value l = 17. */

  if (l > 16) {
	WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
	return 0;			/* fake a zero as the safest result */
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
}

/*
 * Check for a restart marker & resynchronize decoder.
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
  huff_entropy_ptr2 entropy = (huff_entropy_ptr2) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
  entropy->bitstate.bits_left = 0;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
	return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
	entropy->saved.last_dc_val[ci] = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;

  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
	entropy->pub.insufficient_data = FALSE;

  return TRUE;
}

/*
 * Decode and return one MCU's worth of Huffman-compressed coefficients.
 * The coefficients are reordered from zigzag order into natural array order,
 * but are not dequantized.
 *
 * The i'th block of the MCU is stored into the block pointed to by
 * MCU_data[i].  WE ASSUME THIS AREA HAS BEEN ZEROED BY THE CALLER.
 * (Wholesale zeroing is usually a little faster than retail...)
 *
 * Returns FALSE if data source requested suspension.  In that case no
 * changes have been made to permanent state.  (Exception: some output
 * coefficients may already have been assigned.  This is harmless for
 * this module, since we'll just re-assign them on the next call.)
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  huff_entropy_ptr2 entropy = (huff_entropy_ptr2) cinfo->entropy;
  int blkn;
  BITREAD_STATE_VARS;
  savable_state2 state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0)
	  if (! process_restart(cinfo))
	return FALSE;
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->pub.insufficient_data) {

	/* Load up working state */
	BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
	ASSIGN_STATE(state, entropy->saved);

	/* Outer loop handles each block in the MCU */

	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
	  JBLOCKROW block = MCU_data[blkn];
	  d_derived_tbl * dctbl = entropy->dc_cur_tbls[blkn];
	  d_derived_tbl * actbl = entropy->ac_cur_tbls[blkn];
	  register int s, k, r;

	  /* Decode a single block's worth of coefficients */

	  /* Section F.2.2.1: decode the DC coefficient difference */
	  HUFF_DECODE(s, br_state, dctbl, return FALSE, label1);
	  if (s) {
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
	r = GET_BITS(s);
	s = HUFF_EXTEND(r, s);
	  }

	  if (entropy->dc_needed[blkn]) {
	/* Convert DC difference to actual value, update last_dc_val */
	int ci = cinfo->MCU_membership[blkn];
	s += state.last_dc_val[ci];
	state.last_dc_val[ci] = s;
	/* Output the DC coefficient (assumes jpeg_natural_order[0] = 0) */
	(*block)[0] = (JCOEF) s;
	  }

	  if (entropy->ac_needed[blkn]) {

	/* Section F.2.2.2: decode the AC coefficients */
	/* Since zeroes are skipped, output area must be cleared beforehand */
	for (k = 1; k < DCTSIZE2; k++) {
	  HUFF_DECODE(s, br_state, actbl, return FALSE, label2);

	  r = s >> 4;
	  s &= 15;

	  if (s) {
	    k += r;
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
	    r = GET_BITS(s);
	    s = HUFF_EXTEND(r, s);
	    /* Output coefficient in natural (dezigzagged) order.
	     * Note: the extra entries in jpeg_natural_order[] will save us
	     * if k >= DCTSIZE2, which could happen if the data is corrupted.
	     */
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
	  } else {
	    if (r != 15)
	      break;
	    k += 15;
	  }
	}

	  } else {

	/* Section F.2.2.2: decode the AC coefficients */
	/* In this path we just discard the values */
	for (k = 1; k < DCTSIZE2; k++) {
	  HUFF_DECODE(s, br_state, actbl, return FALSE, label3);

	  r = s >> 4;
	  s &= 15;

	  if (s) {
	    k += r;
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
	    DROP_BITS(s);
	  } else {
	    if (r != 15)
	      break;
	    k += 15;
	  }
	}

	  }
	}

	/* Completed MCU, so update state */
	BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
	ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}

/*
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
  huff_entropy_ptr2 entropy;
  int i;

  entropy = (huff_entropy_ptr2)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(huff_entropy_decoder2));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_huff_decoder;
  entropy->pub.decode_mcu = decode_mcu;

  /* Mark tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
	entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
  }
}

/*** End of inlined file: jdhuff.c ***/



/*** Start of inlined file: jdinput.c ***/
#define JPEG_INTERNALS

/* Private state */

typedef struct {
  struct jpeg_input_controller pub; /* public fields */

  boolean inheaders;		/* TRUE until first SOS is reached */
} my_input_controller;

typedef my_input_controller * my_inputctl_ptr;

/* Forward declarations */
METHODDEF(int) consume_markers JPP((j_decompress_ptr cinfo));

/*
 * Routines to calculate various quantities related to the size of the image.
 */

LOCAL(void)
initial_setup2 (j_decompress_ptr cinfo)
/* Called once, when first SOS marker is reached */
{
  int ci;
  jpeg_component_info *compptr;

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
	  (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
	ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
	ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
	ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
  cinfo->max_v_samp_factor = 1;
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
	  ERREXIT(cinfo, JERR_BAD_SAMPLING);
	cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
				   compptr->h_samp_factor);
	cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
				   compptr->v_samp_factor);
  }

  /* We initialize DCT_scaled_size and min_DCT_scaled_size to DCTSIZE.
   * In the full decompressor, this will be overridden by jdmaster.c;
   * but in the transcoder, jdmaster.c is not used, so we must do it here.
   */
  cinfo->min_DCT_scaled_size = DCTSIZE;

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	compptr->DCT_scaled_size = DCTSIZE;
	/* Size in DCT blocks */
	compptr->width_in_blocks = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
	compptr->height_in_blocks = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
	/* downsampled_width and downsampled_height will also be overridden by
	 * jdmaster.c if we are doing full decompression.  The transcoder library
	 * doesn't use these values, but the calling application might.
	 */
	/* Size in samples */
	compptr->downsampled_width = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
		    (long) cinfo->max_h_samp_factor);
	compptr->downsampled_height = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
		    (long) cinfo->max_v_samp_factor);
	/* Mark component needed, until color conversion says otherwise */
	compptr->component_needed = TRUE;
	/* Mark no quantization table yet saved for component */
	compptr->quant_table = NULL;
  }

  /* Compute number of fully interleaved MCU rows. */
  cinfo->total_iMCU_rows = (JDIMENSION)
	jdiv_round_up((long) cinfo->image_height,
		  (long) (cinfo->max_v_samp_factor*DCTSIZE));

  /* Decide whether file contains multiple scans */
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
	cinfo->inputctl->has_multiple_scans = TRUE;
  else
	cinfo->inputctl->has_multiple_scans = FALSE;
}

LOCAL(void)
per_scan_setup2 (j_decompress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
{
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;

  if (cinfo->comps_in_scan == 1) {

	/* Noninterleaved (single-component) scan */
	compptr = cinfo->cur_comp_info[0];

	/* Overall image size in MCUs */
	cinfo->MCUs_per_row = compptr->width_in_blocks;
	cinfo->MCU_rows_in_scan = compptr->height_in_blocks;

	/* For noninterleaved scan, always one block per MCU */
	compptr->MCU_width = 1;
	compptr->MCU_height = 1;
	compptr->MCU_blocks = 1;
	compptr->MCU_sample_width = compptr->DCT_scaled_size;
	compptr->last_col_width = 1;
	/* For noninterleaved scans, it is convenient to define last_row_height
	 * as the number of block rows present in the last iMCU row.
	 */
	tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
	if (tmp == 0) tmp = compptr->v_samp_factor;
	compptr->last_row_height = tmp;

	/* Prepare array describing MCU composition */
	cinfo->blocks_in_MCU = 1;
	cinfo->MCU_membership[0] = 0;

  } else {

	/* Interleaved (multi-component) scan */
	if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
	  ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
	       MAX_COMPS_IN_SCAN);

	/* Overall image size in MCUs */
	cinfo->MCUs_per_row = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_width,
		    (long) (cinfo->max_h_samp_factor*DCTSIZE));
	cinfo->MCU_rows_in_scan = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_height,
		    (long) (cinfo->max_v_samp_factor*DCTSIZE));

	cinfo->blocks_in_MCU = 0;

	for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	  compptr = cinfo->cur_comp_info[ci];
	  /* Sampling factors give # of blocks of component in each MCU */
	  compptr->MCU_width = compptr->h_samp_factor;
	  compptr->MCU_height = compptr->v_samp_factor;
	  compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
	  compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_scaled_size;
	  /* Figure number of non-dummy blocks in last MCU column & row */
	  tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
	  if (tmp == 0) tmp = compptr->MCU_width;
	  compptr->last_col_width = tmp;
	  tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
	  if (tmp == 0) tmp = compptr->MCU_height;
	  compptr->last_row_height = tmp;
	  /* Prepare array describing MCU composition */
	  mcublks = compptr->MCU_blocks;
	  if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
	  while (mcublks-- > 0) {
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
	  }
	}

  }
}

/*
 * Save away a copy of the Q-table referenced by each component present
 * in the current scan, unless already saved during a prior scan.
 *
 * In a multiple-scan JPEG file, the encoder could assign different components
 * the same Q-table slot number, but change table definitions between scans
 * so that each component uses a different Q-table.  (The IJG encoder is not
 * currently capable of doing this, but other encoders might.)  Since we want
 * to be able to dequantize all the components at the end of the file, this
 * means that we have to save away the table actually used for each component.
 * We do this by copying the table at the start of the first scan containing
 * the component.
 * The JPEG spec prohibits the encoder from changing the contents of a Q-table
 * slot between scans of a component using that slot.  If the encoder does so
 * anyway, this decoder will simply use the Q-table values that were current
 * at the start of the first scan for the component.
 *
 * The decompressor output side looks only at the saved quant tables,
 * not at the current Q-table slots.
 */

LOCAL(void)
latch_quant_tables (j_decompress_ptr cinfo)
{
  int ci, qtblno;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	/* No work if we already saved Q-table for this component */
	if (compptr->quant_table != NULL)
	  continue;
	/* Make sure specified quantization table is present */
	qtblno = compptr->quant_tbl_no;
	if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
	  ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
	/* OK, save away the quantization table */
	qtbl = (JQUANT_TBL *)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(JQUANT_TBL));
	MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
	compptr->quant_table = qtbl;
  }
}

/*
 * Initialize the input modules to read a scan of compressed data.
 * The first call to this is done by jdmaster.c after initializing
 * the entire decompressor (during jpeg_start_decompress).
 * Subsequent calls come from consume_markers, below.
 */

METHODDEF(void)
start_input_pass2 (j_decompress_ptr cinfo)
{
  per_scan_setup2(cinfo);
  latch_quant_tables(cinfo);
  (*cinfo->entropy->start_pass) (cinfo);
  (*cinfo->coef->start_input_pass) (cinfo);
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
}

/*
 * Finish up after inputting a compressed-data scan.
 * This is called by the coefficient controller after it's read all
 * the expected data of the scan.
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
  cinfo->inputctl->consume_input = consume_markers;
}

/*
 * Read JPEG markers before, between, or after compressed-data scans.
 * Change state as necessary when a new scan is reached.
 * Return value is JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
 *
 * The consume_input method pointer points either here or to the
 * coefficient controller's consume_data routine, depending on whether
 * we are reading a compressed data segment or inter-segment markers.
 */

METHODDEF(int)
consume_markers (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
  int val;

  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
	return JPEG_REACHED_EOI;

  val = (*cinfo->marker->read_markers) (cinfo);

  switch (val) {
  case JPEG_REACHED_SOS:	/* Found SOS */
	if (inputctl->inheaders) {	/* 1st SOS */
	  initial_setup2(cinfo);
	  inputctl->inheaders = FALSE;
	  /* Note: start_input_pass must be called by jdmaster.c
	   * before any more input can be consumed.  jdapimin.c is
	   * responsible for enforcing this sequencing.
	   */
	} else {			/* 2nd or later SOS marker */
	  if (! inputctl->pub.has_multiple_scans)
	ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
	  start_input_pass2(cinfo);
	}
	break;
  case JPEG_REACHED_EOI:	/* Found EOI */
	inputctl->pub.eoi_reached = TRUE;
	if (inputctl->inheaders) {	/* Tables-only datastream, apparently */
	  if (cinfo->marker->saw_SOF)
	ERREXIT(cinfo, JERR_SOF_NO_SOS);
	} else {
	  /* Prevent infinite loop in coef ctlr's decompress_data routine
	   * if user set output_scan_number larger than number of scans.
	   */
	  if (cinfo->output_scan_number > cinfo->input_scan_number)
	cinfo->output_scan_number = cinfo->input_scan_number;
	}
	break;
  case JPEG_SUSPENDED:
	break;
  }

  return val;
}

/*
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;

  inputctl->pub.consume_input = consume_markers;
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = TRUE;
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
  (*cinfo->marker->reset_marker_reader) (cinfo);
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
}

/*
 * Initialize the input controller module.
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_input_controller (j_decompress_ptr cinfo)
{
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
  inputctl->pub.reset_input_controller = reset_input_controller;
  inputctl->pub.start_input_pass = start_input_pass2;
  inputctl->pub.finish_input_pass = finish_input_pass;
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
  inputctl->pub.eoi_reached = FALSE;
  inputctl->inheaders = TRUE;
}

/*** End of inlined file: jdinput.c ***/


/*** Start of inlined file: jdmainct.c ***/
#define JPEG_INTERNALS

/*
 * In the current system design, the main buffer need never be a full-image
 * buffer; any full-height buffers will be found inside the coefficient or
 * postprocessing controllers.  Nonetheless, the main controller is not
 * trivial.  Its responsibility is to provide context rows for upsampling/
 * rescaling, and doing this in an efficient fashion is a bit tricky.
 *
 * Postprocessor input data is counted in "row groups".  A row group
 * is defined to be (v_samp_factor * DCT_scaled_size / min_DCT_scaled_size)
 * sample rows of each component.  (We require DCT_scaled_size values to be
 * chosen such that these numbers are integers.  In practice DCT_scaled_size
 * values will likely be powers of two, so we actually have the stronger
 * condition that DCT_scaled_size / min_DCT_scaled_size is an integer.)
 * Upsampling will typically produce max_v_samp_factor pixel rows from each
 * row group (times any additional scale factor that the upsampler is
 * applying).
 *
 * The coefficient controller will deliver data to us one iMCU row at a time;
 * each iMCU row contains v_samp_factor * DCT_scaled_size sample rows, or
 * exactly min_DCT_scaled_size row groups.  (This amount of data corresponds
 * to one row of MCUs when the image is fully interleaved.)  Note that the
 * number of sample rows varies across components, but the number of row
 * groups does not.  Some garbage sample rows may be included in the last iMCU
 * row at the bottom of the image.
 *
 * Depending on the vertical scaling algorithm used, the upsampler may need
 * access to the sample row(s) above and below its current input row group.
 * The upsampler is required to set need_context_rows TRUE at global selection
 * time if so.  When need_context_rows is FALSE, this controller can simply
 * obtain one iMCU row at a time from the coefficient controller and dole it
 * out as row groups to the postprocessor.
 *
 * When need_context_rows is TRUE, this controller guarantees that the buffer
 * passed to postprocessing contains at least one row group's worth of samples
 * above and below the row group(s) being processed.  Note that the context
 * rows "above" the first passed row group appear at negative row offsets in
 * the passed buffer.  At the top and bottom of the image, the required
 * context rows are manufactured by duplicating the first or last real sample
 * row; this avoids having special cases in the upsampling inner loops.
 *
 * The amount of context is fixed at one row group just because that's a
 * convenient number for this controller to work with.  The existing
 * upsamplers really only need one sample row of context.  An upsampler
 * supporting arbitrary output rescaling might wish for more than one row
 * group of context when shrinking the image; tough, we don't handle that.
 * (This is justified by the assumption that downsizing will be handled mostly
 * by adjusting the DCT_scaled_size values, so that the actual scale factor at
 * the upsample step needn't be much less than one.)
 *
 * To provide the desired context, we have to retain the last two row groups
 * of one iMCU row while reading in the next iMCU row.  (The last row group
 * can't be processed until we have another row group for its below-context,
 * and so we have to save the next-to-last group too for its above-context.)
 * We could do this most simply by copying data around in our buffer, but
 * that'd be very slow.  We can avoid copying any data by creating a rather
 * strange pointer structure.  Here's how it works.  We allocate a workspace
 * consisting of M+2 row groups (where M = min_DCT_scaled_size is the number
 * of row groups per iMCU row).  We create two sets of redundant pointers to
 * the workspace.  Labeling the physical row groups 0 to M+1, the synthesized
 * pointer lists look like this:
 *                   M+1                          M-1
 * master pointer --> 0         master pointer --> 0
 *                    1                            1
 *                   ...                          ...
 *                   M-3                          M-3
 *                   M-2                           M
 *                   M-1                          M+1
 *                    M                           M-2
 *                   M+1                          M-1
 *                    0                            0
 * We read alternate iMCU rows using each master pointer; thus the last two
 * row groups of the previous iMCU row remain un-overwritten in the workspace.
 * The pointer lists are set up so that the required context rows appear to
 * be adjacent to the proper places when we pass the pointer lists to the
 * upsampler.
 *
 * The above pictures describe the normal state of the pointer lists.
 * At top and bottom of the image, we diddle the pointer lists to duplicate
 * the first or last sample row as necessary (this is cheaper than copying
 * sample rows around).
 *
 * This scheme breaks down if M < 2, ie, min_DCT_scaled_size is 1.  In that
 * situation each iMCU row provides only one row group so the buffering logic
 * must be different (eg, we must read two iMCU rows before we can emit the
 * first row group).  For now, we simply do not support providing context
 * rows when min_DCT_scaled_size is 1.  That combination seems unlikely to
 * be worth providing --- if someone wants a 1/8th-size preview, they probably
 * want it quick and dirty, so a context-free upsampler is sufficient.
 */

/* Private buffer controller object */

typedef struct {
  struct jpeg_d_main_controller pub; /* public fields */

  /* Pointer to allocated workspace (M or M+2 row groups). */
  JSAMPARRAY buffer[MAX_COMPONENTS];

  boolean buffer_full;		/* Have we gotten an iMCU row from decoder? */
  JDIMENSION rowgroup_ctr;	/* counts row groups output to postprocessor */

  /* Remaining fields are only used in the context case. */

  /* These are the master pointers to the funny-order pointer lists. */
  JSAMPIMAGE xbuffer[2];	/* pointers to weird pointer lists */

  int whichptr;			/* indicates which pointer set is now in use */
  int context_state;		/* process_data state machine status */
  JDIMENSION rowgroups_avail;	/* row groups available to postprocessor */
  JDIMENSION iMCU_row_ctr;	/* counts iMCU rows to detect image top/bot */
} my_main_controller4;

typedef my_main_controller4 * my_main_ptr4;

/* context_state values: */
#define CTX_PREPARE_FOR_IMCU	0	/* need to prepare for MCU row */
#define CTX_PROCESS_IMCU	1	/* feeding iMCU to postprocessor */
#define CTX_POSTPONED_ROW	2	/* feeding postponed row group */

/* Forward declarations */
METHODDEF(void) process_data_simple_main2
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
METHODDEF(void) process_data_context_main
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#ifdef QUANT_2PASS_SUPPORTED
METHODDEF(void) process_data_crank_post
	JPP((j_decompress_ptr cinfo, JSAMPARRAY output_buf,
	     JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail));
#endif

LOCAL(void)
alloc_funny_pointers (j_decompress_ptr cinfo)
/* Allocate space for the funny pointer lists.
 * This is done only once, not once per pass.
 */
{
  my_main_ptr4 main_ = (my_main_ptr4) cinfo->main;
  int ci, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  /* Get top-level space for component array pointers.
   * We alloc both arrays with one call to save a few cycles.
   */
  main_->xbuffer[0] = (JSAMPIMAGE)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
  main_->xbuffer[1] = main_->xbuffer[0] + cinfo->num_components;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
	  cinfo->min_DCT_scaled_size; /* height of a row group of component */
	/* Get space for pointer lists --- M+4 row groups in each list.
	 * We alloc both pointer lists with one call to save a few cycles.
	 */
	xbuf = (JSAMPARRAY)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
	xbuf += rgroup;		/* want one row group at negative offsets */
	main_->xbuffer[0][ci] = xbuf;
	xbuf += rgroup * (M + 4);
	main_->xbuffer[1][ci] = xbuf;
  }
}

LOCAL(void)
make_funny_pointers (j_decompress_ptr cinfo)
/* Create the funny pointer lists discussed in the comments above.
 * The actual workspace is already allocated (in main->buffer),
 * and the space for the pointer lists is allocated too.
 * This routine just fills in the curiously ordered lists.
 * This will be repeated at the beginning of each pass.
 */
{
  my_main_ptr4 main_ = (my_main_ptr4) cinfo->main;
  int ci, i, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY buf, xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
	  cinfo->min_DCT_scaled_size; /* height of a row group of component */
	xbuf0 = main_->xbuffer[0][ci];
	xbuf1 = main_->xbuffer[1][ci];
	/* First copy the workspace pointers as-is */
	buf = main_->buffer[ci];
	for (i = 0; i < rgroup * (M + 2); i++) {
	  xbuf0[i] = xbuf1[i] = buf[i];
	}
	/* In the second list, put the last four row groups in swapped order */
	for (i = 0; i < rgroup * 2; i++) {
	  xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
	  xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
	}
	/* The wraparound pointers at top and bottom will be filled later
	 * (see set_wraparound_pointers, below).  Initially we want the "above"
	 * pointers to duplicate the first actual data line.  This only needs
	 * to happen in xbuffer[0].
	 */
	for (i = 0; i < rgroup; i++) {
	  xbuf0[i - rgroup] = xbuf0[0];
	}
  }
}

LOCAL(void)
set_wraparound_pointers (j_decompress_ptr cinfo)
/* Set up the "wraparound" pointers at top and bottom of the pointer lists.
 * This changes the pointer list state from top-of-image to the normal state.
 */
{
  my_main_ptr4 main_ = (my_main_ptr4) cinfo->main;
  int ci, i, rgroup;
  int M = cinfo->min_DCT_scaled_size;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
	  cinfo->min_DCT_scaled_size; /* height of a row group of component */
	xbuf0 = main_->xbuffer[0][ci];
	xbuf1 = main_->xbuffer[1][ci];
	for (i = 0; i < rgroup; i++) {
	  xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
	  xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
	  xbuf0[rgroup*(M+2) + i] = xbuf0[i];
	  xbuf1[rgroup*(M+2) + i] = xbuf1[i];
	}
  }
}

LOCAL(void)
set_bottom_pointers (j_decompress_ptr cinfo)
/* Change the pointer lists to duplicate the last sample row at the bottom
 * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
 * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
 */
{
  my_main_ptr4 main_ = (my_main_ptr4) cinfo->main;
  int ci, i, rgroup, iMCUheight, rows_left;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* Count sample rows in one iMCU row and in one row group */
	iMCUheight = compptr->v_samp_factor * compptr->DCT_scaled_size;
	rgroup = iMCUheight / cinfo->min_DCT_scaled_size;
	/* Count nondummy sample rows remaining for this component */
	rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
	if (rows_left == 0) rows_left = iMCUheight;
	/* Count nondummy row groups.  Should get same answer for each component,
	 * so we need only do it once.
	 */
	if (ci == 0) {
	  main_->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
	}
	/* Duplicate the last real sample row rgroup*2 times; this pads out the
	 * last partial rowgroup and ensures at least one full rowgroup of context.
	 */
	xbuf = main_->xbuffer[main_->whichptr][ci];
	for (i = 0; i < rgroup * 2; i++) {
	  xbuf[rows_left + i] = xbuf[rows_left-1];
	}
  }
}

/*
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main2 (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_main_ptr4 main_ = (my_main_ptr4) cinfo->main;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
	if (cinfo->upsample->need_context_rows) {
	  main_->pub.process_data = process_data_context_main;
	  make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
	  main_->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
	  main_->context_state = CTX_PREPARE_FOR_IMCU;
	  main_->iMCU_row_ctr = 0;
	} else {
	  /* Simple case with no context needed */
	  main_->pub.process_data = process_data_simple_main2;
	}
	main_->buffer_full = FALSE;	/* Mark buffer empty */
	main_->rowgroup_ctr = 0;
	break;
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_CRANK_DEST:
	/* For last pass of 2-pass quantization, just crank the postprocessor */
	main_->pub.process_data = process_data_crank_post;
	break;
#endif
  default:
	ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
	break;
  }
}

/*
 * Process some data.
 * This handles the simple case where no context is required.
 */

METHODDEF(void)
process_data_simple_main2 (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
  my_main_ptr4 main_ = (my_main_ptr4) cinfo->main;
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main_->buffer_full) {
	if (! (*cinfo->coef->decompress_data) (cinfo, main_->buffer))
	  return;			/* suspension forced, can do nothing more */
	main_->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_scaled_size;
  /* Note: at the bottom of the image, we may pass extra garbage row groups
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main_->buffer,
				     &main_->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main_->rowgroup_ctr >= rowgroups_avail) {
	main_->buffer_full = FALSE;
	main_->rowgroup_ctr = 0;
  }
}

/*
 * Process some data.
 * This handles the case where context rows must be provided.
 */

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
  my_main_ptr4 main_ = (my_main_ptr4) cinfo->main;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main_->buffer_full) {
	if (! (*cinfo->coef->decompress_data) (cinfo,
					   main_->xbuffer[main_->whichptr]))
	  return;			/* suspension forced, can do nothing more */
	main_->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
	main_->iMCU_row_ctr++;	/* count rows received */
  }

  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main_->context_state) {
  case CTX_POSTPONED_ROW:
	/* Call postprocessor using previously set pointers for postponed row */
	(*cinfo->post->post_process_data) (cinfo, main_->xbuffer[main_->whichptr],
			&main_->rowgroup_ctr, main_->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
	if (main_->rowgroup_ctr < main_->rowgroups_avail)
	  return;			/* Need to suspend */
	main_->context_state = CTX_PREPARE_FOR_IMCU;
	if (*out_row_ctr >= out_rows_avail)
	  return;			/* Postprocessor exactly filled output buf */
	/*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
	/* Prepare to process first M-1 row groups of this iMCU row */
	main_->rowgroup_ctr = 0;
	main_->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size - 1);
	/* Check for bottom of image: if so, tweak pointers to "duplicate"
	 * the last sample row, and adjust rowgroups_avail to ignore padding rows.
	 */
	if (main_->iMCU_row_ctr == cinfo->total_iMCU_rows)
	  set_bottom_pointers(cinfo);
	main_->context_state = CTX_PROCESS_IMCU;
	/*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
	/* Call postprocessor using previously set pointers */
	(*cinfo->post->post_process_data) (cinfo, main_->xbuffer[main_->whichptr],
			&main_->rowgroup_ctr, main_->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
	if (main_->rowgroup_ctr < main_->rowgroups_avail)
	  return;			/* Need to suspend */
	/* After the first iMCU, change wraparound pointers to normal state */
	if (main_->iMCU_row_ctr == 1)
	  set_wraparound_pointers(cinfo);
	/* Prepare to load new iMCU row using other xbuffer list */
	main_->whichptr ^= 1;	/* 0=>1 or 1=>0 */
	main_->buffer_full = FALSE;
	/* Still need to process last row group of this iMCU row, */
	/* which is saved at index M+1 of the other xbuffer */
	main_->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_scaled_size + 1);
	main_->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_scaled_size + 2);
	main_->context_state = CTX_POSTPONED_ROW;
  }
}

/*
 * Process some data.
 * Final pass of two-pass quantization: just call the postprocessor.
 * Source data will be the postprocessor controller's internal buffer.
 */

#ifdef QUANT_2PASS_SUPPORTED

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}

#endif /* QUANT_2PASS_SUPPORTED */

/*
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_main_ptr4 main_;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main_ = (my_main_ptr4)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_main_controller4));
  cinfo->main = (struct jpeg_d_main_controller *) main_;
  main_->pub.start_pass = start_pass_main2;

  if (need_full_buffer)		/* shouldn't happen */
	ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
	if (cinfo->min_DCT_scaled_size < 2) /* unsupported, see comments above */
	  ERREXIT(cinfo, JERR_NOTIMPL);
	alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
	ngroups = cinfo->min_DCT_scaled_size + 2;
  } else {
	ngroups = cinfo->min_DCT_scaled_size;
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	rgroup = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
	  cinfo->min_DCT_scaled_size; /* height of a row group of component */
	main_->buffer[ci] = (*cinfo->mem->alloc_sarray)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_scaled_size,
			 (JDIMENSION) (rgroup * ngroups));
  }
}

/*** End of inlined file: jdmainct.c ***/


/*** Start of inlined file: jdmarker.c ***/
#define JPEG_INTERNALS

/* Private state */

typedef struct {
  struct jpeg_marker_reader pub; /* public fields */

  /* Application-overridable marker processing methods */
  jpeg_marker_parser_method process_COM;
  jpeg_marker_parser_method process_APPn[16];

  /* Limit on marker data length to save for each marker type */
  unsigned int length_limit_COM;
  unsigned int length_limit_APPn[16];

  /* Status of COM/APPn marker saving */
  jpeg_saved_marker_ptr cur_marker;	/* NULL if not processing a marker */
  unsigned int bytes_read;		/* data bytes read so far in marker */
  /* Note: cur_marker is not linked into marker_list until it's all read. */
} my_marker_reader;

typedef my_marker_reader * my_marker_ptr2;

/*
 * Macros for fetching data from the data source module.
 *
 * At all times, cinfo->src->next_input_byte and ->bytes_in_buffer reflect
 * the current restart point; we update them only when we have reached a
 * suitable place to restart if a suspension occurs.
 */

/* Declare and initialize local copies of input pointer/count */
#define INPUT_VARS(cinfo)  \
	struct jpeg_source_mgr * datasrc = (cinfo)->src;  \
	const JOCTET * next_input_byte = datasrc->next_input_byte;  \
	size_t bytes_in_buffer = datasrc->bytes_in_buffer

/* Unload the local copies --- do this only at a restart boundary */
#define INPUT_SYNC(cinfo)  \
	( datasrc->next_input_byte = next_input_byte,  \
	  datasrc->bytes_in_buffer = bytes_in_buffer )

/* Reload the local copies --- used only in MAKE_BYTE_AVAIL */
#define INPUT_RELOAD(cinfo)  \
	( next_input_byte = datasrc->next_input_byte,  \
	  bytes_in_buffer = datasrc->bytes_in_buffer )

/* Internal macro for INPUT_BYTE and INPUT_2BYTES: make a byte available.
 * Note we do *not* do INPUT_SYNC before calling fill_input_buffer,
 * but we must reload the local copies after a successful fill.
 */
#define MAKE_BYTE_AVAIL(cinfo,action)  \
	if (bytes_in_buffer == 0) {  \
	  if (! (*datasrc->fill_input_buffer) (cinfo))  \
	    { action; }  \
	  INPUT_RELOAD(cinfo);  \
	}

/* Read a byte into variable V.
 * If must suspend, take the specified action (typically "return FALSE").
 */
#define INPUT_BYTE(cinfo,V,action)  \
	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
		  bytes_in_buffer--; \
		  V = GETJOCTET(*next_input_byte++); )

/* As above, but read two bytes interpreted as an unsigned 16-bit integer.
 * V should be declared unsigned int or perhaps INT32.
 */
#define INPUT_2BYTES(cinfo,V,action)  \
	MAKESTMT( MAKE_BYTE_AVAIL(cinfo,action); \
		  bytes_in_buffer--; \
		  V = ((unsigned int) GETJOCTET(*next_input_byte++)) << 8; \
		  MAKE_BYTE_AVAIL(cinfo,action); \
		  bytes_in_buffer--; \
		  V += GETJOCTET(*next_input_byte++); )

/*
 * Routines to process JPEG markers.
 *
 * Entry condition: JPEG marker itself has been read and its code saved
 *   in cinfo->unread_marker; input restart point is just after the marker.
 *
 * Exit: if return TRUE, have read and processed any parameters, and have
 *   updated the restart point to point after the parameters.
 *   If return FALSE, was forced to suspend before reaching end of
 *   marker parameters; restart point has not been moved.  Same routine
 *   will be called again after application supplies more input data.
 *
 * This approach to suspension assumes that all of a marker's parameters
 * can fit into a single input bufferload.  This should hold for "normal"
 * markers.  Some COM/APPn markers might have large parameter segments
 * that might not fit.  If we are simply dropping such a marker, we use
 * skip_input_data to get past it, and thereby put the problem on the
 * source manager's shoulders.  If we are saving the marker's contents
 * into memory, we use a slightly different convention: when forced to
 * suspend, the marker processor updates the restart point to the end of
 * what it's consumed (ie, the end of the buffer) before returning FALSE.
 * On resumption, cinfo->unread_marker still contains the marker code,
 * but the data source will point to the next chunk of marker data.
 * The marker processor must retain internal state to deal with this.
 *
 * Note that we don't bother to avoid duplicate trace messages if a
 * suspension occurs within marker parameters.  Other side effects
 * require more care.
 */

LOCAL(boolean)
get_soi (j_decompress_ptr cinfo)
/* Process an SOI marker */
{
  int i;

  TRACEMS(cinfo, 1, JTRC_SOI);

  if (cinfo->marker->saw_SOI)
	ERREXIT(cinfo, JERR_SOI_DUPLICATE);

  /* Reset all parameters that are defined to be reset by SOI */

  for (i = 0; i < NUM_ARITH_TBLS; i++) {
	cinfo->arith_dc_L[i] = 0;
	cinfo->arith_dc_U[i] = 1;
	cinfo->arith_ac_K[i] = 5;
  }
  cinfo->restart_interval = 0;

  /* Set initial assumptions for colorspace etc */

  cinfo->jpeg_color_space = JCS_UNKNOWN;
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */

  cinfo->saw_JFIF_marker = FALSE;
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
  cinfo->JFIF_minor_version = 1;
  cinfo->density_unit = 0;
  cinfo->X_density = 1;
  cinfo->Y_density = 1;
  cinfo->saw_Adobe_marker = FALSE;
  cinfo->Adobe_transform = 0;

  cinfo->marker->saw_SOI = TRUE;

  return TRUE;
}

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_prog, boolean is_arith)
/* Process a SOFn marker */
{
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);

  cinfo->progressive_mode = is_prog;
  cinfo->arith_code = is_arith;

  INPUT_2BYTES(cinfo, length, return FALSE);

  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);

  length -= 8;

  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
	   (int) cinfo->image_width, (int) cinfo->image_height,
	   cinfo->num_components);

  if (cinfo->marker->saw_SOF)
	ERREXIT(cinfo, JERR_SOF_DUPLICATE);

  /* We don't support files in which the image height is initially specified */
  /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
  /* might as well have a general sanity check. */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
	  || cinfo->num_components <= 0)
	ERREXIT(cinfo, JERR_EMPTY_IMAGE);

  if (length != (cinfo->num_components * 3))
	ERREXIT(cinfo, JERR_BAD_LENGTH);

  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
	cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 cinfo->num_components * SIZEOF(jpeg_component_info));

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	compptr->component_index = ci;
	INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
	INPUT_BYTE(cinfo, c, return FALSE);
	compptr->h_samp_factor = (c >> 4) & 15;
	compptr->v_samp_factor = (c     ) & 15;
	INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);

	TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
	     compptr->component_id, compptr->h_samp_factor,
	     compptr->v_samp_factor, compptr->quant_tbl_no);
  }

  cinfo->marker->saw_SOF = TRUE;

  INPUT_SYNC(cinfo);
  return TRUE;
}

LOCAL(boolean)
get_sos (j_decompress_ptr cinfo)
/* Process a SOS marker */
{
  INT32 length;
  int i, ci, n, c, cc;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);

  if (! cinfo->marker->saw_SOF)
	ERREXIT(cinfo, JERR_SOS_NO_SOF);

  INPUT_2BYTES(cinfo, length, return FALSE);

  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */

  TRACEMS1(cinfo, 1, JTRC_SOS, n);

  if (length != (n * 2 + 6) || n < 1 || n > MAX_COMPS_IN_SCAN)
	ERREXIT(cinfo, JERR_BAD_LENGTH);

  cinfo->comps_in_scan = n;

  /* Collect the component-spec parameters */

  for (i = 0; i < n; i++) {
	INPUT_BYTE(cinfo, cc, return FALSE);
	INPUT_BYTE(cinfo, c, return FALSE);

	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
	  if (cc == compptr->component_id)
	goto id_found;
	}

	ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);

  id_found:

	cinfo->cur_comp_info[i] = compptr;
	compptr->dc_tbl_no = (c >> 4) & 15;
	compptr->ac_tbl_no = (c     ) & 15;

	TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
	     compptr->dc_tbl_no, compptr->ac_tbl_no);
  }

  /* Collect the additional scan parameters Ss, Se, Ah/Al. */
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Ss = c;
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Se = c;
  INPUT_BYTE(cinfo, c, return FALSE);
  cinfo->Ah = (c >> 4) & 15;
  cinfo->Al = (c     ) & 15;

  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
	   cinfo->Ah, cinfo->Al);

  /* Prepare to scan data & restart markers */
  cinfo->marker->next_restart_num = 0;

  /* Count another SOS marker */
  cinfo->input_scan_number++;

  INPUT_SYNC(cinfo);
  return TRUE;
}

#ifdef D_ARITH_CODING_SUPPORTED

LOCAL(boolean)
get_dac (j_decompress_ptr cinfo)
/* Process a DAC marker */
{
  INT32 length;
  int index, val;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  while (length > 0) {
	INPUT_BYTE(cinfo, index, return FALSE);
	INPUT_BYTE(cinfo, val, return FALSE);

	length -= 2;

	TRACEMS2(cinfo, 1, JTRC_DAC, index, val);

	if (index < 0 || index >= (2*NUM_ARITH_TBLS))
	  ERREXIT1(cinfo, JERR_DAC_INDEX, index);

	if (index >= NUM_ARITH_TBLS) { /* define AC table */
	  cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
	} else {			/* define DC table */
	  cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
	  cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
	  if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
	}
  }

  if (length != 0)
	ERREXIT(cinfo, JERR_BAD_LENGTH);

  INPUT_SYNC(cinfo);
  return TRUE;
}

#else /* ! D_ARITH_CODING_SUPPORTED */

#define get_dac(cinfo)  skip_variable(cinfo)

#endif /* D_ARITH_CODING_SUPPORTED */

LOCAL(boolean)
get_dht (j_decompress_ptr cinfo)
/* Process a DHT marker */
{
  INT32 length;
  UINT8 bits[17];
  UINT8 huffval[256];
  int i, index, count;
  JHUFF_TBL **htblptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  while (length > 16) {
	INPUT_BYTE(cinfo, index, return FALSE);

	TRACEMS1(cinfo, 1, JTRC_DHT, index);

	bits[0] = 0;
	count = 0;
	for (i = 1; i <= 16; i++) {
	  INPUT_BYTE(cinfo, bits[i], return FALSE);
	  count += bits[i];
	}

	length -= 1 + 16;

	TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
	     bits[1], bits[2], bits[3], bits[4],
	     bits[5], bits[6], bits[7], bits[8]);
	TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
	     bits[9], bits[10], bits[11], bits[12],
	     bits[13], bits[14], bits[15], bits[16]);

	/* Here we just do minimal validation of the counts to avoid walking
	 * off the end of our table space.  jdhuff.c will check more carefully.
	 */
	if (count > 256 || ((INT32) count) > length)
	  ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);

	for (i = 0; i < count; i++)
	  INPUT_BYTE(cinfo, huffval[i], return FALSE);

	length -= count;

	if (index & 0x10) {		/* AC table definition */
	  index -= 0x10;
	  htblptr = &cinfo->ac_huff_tbl_ptrs[index];
	} else {			/* DC table definition */
	  htblptr = &cinfo->dc_huff_tbl_ptrs[index];
	}

	if (index < 0 || index >= NUM_HUFF_TBLS)
	  ERREXIT1(cinfo, JERR_DHT_INDEX, index);

	if (*htblptr == NULL)
	  *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);

	MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
	MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
  }

  if (length != 0)
	ERREXIT(cinfo, JERR_BAD_LENGTH);

  INPUT_SYNC(cinfo);
  return TRUE;
}

LOCAL(boolean)
get_dqt (j_decompress_ptr cinfo)
/* Process a DQT marker */
{
  INT32 length;
  int n, i, prec;
  unsigned int tmp;
  JQUANT_TBL *quant_ptr;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  while (length > 0) {
	INPUT_BYTE(cinfo, n, return FALSE);
	prec = n >> 4;
	n &= 0x0F;

	TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);

	if (n >= NUM_QUANT_TBLS)
	  ERREXIT1(cinfo, JERR_DQT_INDEX, n);

	if (cinfo->quant_tbl_ptrs[n] == NULL)
	  cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
	quant_ptr = cinfo->quant_tbl_ptrs[n];

	for (i = 0; i < DCTSIZE2; i++) {
	  if (prec)
	INPUT_2BYTES(cinfo, tmp, return FALSE);
	  else
	INPUT_BYTE(cinfo, tmp, return FALSE);
	  /* We convert the zigzag-order table to natural array order. */
	  quant_ptr->quantval[jpeg_natural_order[i]] = (UINT16) tmp;
	}

	if (cinfo->err->trace_level >= 2) {
	  for (i = 0; i < DCTSIZE2; i += 8) {
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
		 quant_ptr->quantval[i],   quant_ptr->quantval[i+1],
		 quant_ptr->quantval[i+2], quant_ptr->quantval[i+3],
		 quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
		 quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
	  }
	}

	length -= DCTSIZE2+1;
	if (prec) length -= DCTSIZE2;
  }

  if (length != 0)
	ERREXIT(cinfo, JERR_BAD_LENGTH);

  INPUT_SYNC(cinfo);
  return TRUE;
}

LOCAL(boolean)
get_dri (j_decompress_ptr cinfo)
/* Process a DRI marker */
{
  INT32 length;
  unsigned int tmp;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);

  if (length != 4)
	ERREXIT(cinfo, JERR_BAD_LENGTH);

  INPUT_2BYTES(cinfo, tmp, return FALSE);

  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);

  cinfo->restart_interval = tmp;

  INPUT_SYNC(cinfo);
  return TRUE;
}

/*
 * Routines for processing APPn and COM markers.
 * These are either saved in memory or discarded, per application request.
 * APP0 and APP14 are specially checked to see if they are
 * JFIF and Adobe markers, respectively.
 */

#define APP0_DATA_LEN	14	/* Length of interesting data in APP0 */
#define APP14_DATA_LEN	12	/* Length of interesting data in APP14 */
#define APPN_DATA_LEN	14	/* Must be the largest of the above!! */

LOCAL(void)
examine_app0 (j_decompress_ptr cinfo, JOCTET FAR * data,
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
  INT32 totallen = (INT32) datalen + remaining;

  if (datalen >= APP0_DATA_LEN &&
	  GETJOCTET(data[0]) == 0x4A &&
	  GETJOCTET(data[1]) == 0x46 &&
	  GETJOCTET(data[2]) == 0x49 &&
	  GETJOCTET(data[3]) == 0x46 &&
	  GETJOCTET(data[4]) == 0) {
	/* Found JFIF APP0 marker: save info */
	cinfo->saw_JFIF_marker = TRUE;
	cinfo->JFIF_major_version = GETJOCTET(data[5]);
	cinfo->JFIF_minor_version = GETJOCTET(data[6]);
	cinfo->density_unit = GETJOCTET(data[7]);
	cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
	cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
	/* Check version.
	 * Major version must be 1, anything else signals an incompatible change.
	 * (We used to treat this as an error, but now it's a nonfatal warning,
	 * because some bozo at Hijaak couldn't read the spec.)
	 * Minor version should be 0..2, but process anyway if newer.
	 */
	if (cinfo->JFIF_major_version != 1)
	  WARNMS2(cinfo, JWRN_JFIF_MAJOR,
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
	/* Generate trace messages */
	TRACEMS5(cinfo, 1, JTRC_JFIF,
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
	/* Validate thumbnail dimensions and issue appropriate messages */
	if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
	  TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
	totallen -= APP0_DATA_LEN;
	if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
	  TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
  } else if (datalen >= 6 &&
	  GETJOCTET(data[0]) == 0x4A &&
	  GETJOCTET(data[1]) == 0x46 &&
	  GETJOCTET(data[2]) == 0x58 &&
	  GETJOCTET(data[3]) == 0x58 &&
	  GETJOCTET(data[4]) == 0) {
	/* Found JFIF "JFXX" extension APP0 marker */
	/* The library doesn't actually do anything with these,
	 * but we try to produce a helpful trace message.
	 */
	switch (GETJOCTET(data[5])) {
	case 0x10:
	  TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
	  break;
	case 0x11:
	  TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
	  break;
	case 0x13:
	  TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
	  break;
	default:
	  TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
	       GETJOCTET(data[5]), (int) totallen);
	  break;
	}
  } else {
	/* Start of APP0 does not match "JFIF" or "JFXX", or too short */
	TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
  }
}

LOCAL(void)
examine_app14 (j_decompress_ptr cinfo, JOCTET FAR * data,
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
	  GETJOCTET(data[0]) == 0x41 &&
	  GETJOCTET(data[1]) == 0x64 &&
	  GETJOCTET(data[2]) == 0x6F &&
	  GETJOCTET(data[3]) == 0x62 &&
	  GETJOCTET(data[4]) == 0x65) {
	/* Found Adobe APP14 marker */
	version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
	flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
	flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
	transform = GETJOCTET(data[11]);
	TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
	cinfo->saw_Adobe_marker = TRUE;
	cinfo->Adobe_transform = (UINT8) transform;
  } else {
	/* Start of APP14 does not match "Adobe", or too short */
	TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
  }
}

METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
	numtoread = APPN_DATA_LEN;
  else if (length > 0)
	numtoread = (unsigned int) length;
  else
	numtoread = 0;
  for (i = 0; i < numtoread; i++)
	INPUT_BYTE(cinfo, b[i], return FALSE);
  length -= numtoread;

  /* process it */
  switch (cinfo->unread_marker) {
  case M_APP0:
	examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
	break;
  case M_APP14:
	examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
	break;
  default:
	/* can't get here unless jpeg_save_markers chooses wrong processor */
	ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
	break;
  }

  /* skip any remaining data -- could be lots */
  INPUT_SYNC(cinfo);
  if (length > 0)
	(*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}

#ifdef SAVE_MARKERS_SUPPORTED

METHODDEF(boolean)
save_marker (j_decompress_ptr cinfo)
/* Save an APPn or COM marker into the marker list */
{
  my_marker_ptr2 marker = (my_marker_ptr2) cinfo->marker;
  jpeg_saved_marker_ptr cur_marker = marker->cur_marker;
  unsigned int bytes_read, data_length;
  JOCTET FAR * data;
  INT32 length = 0;
  INPUT_VARS(cinfo);

  if (cur_marker == NULL) {
	/* begin reading a marker */
	INPUT_2BYTES(cinfo, length, return FALSE);
	length -= 2;
	if (length >= 0) {		/* watch out for bogus length word */
	  /* figure out how much we want to save */
	  unsigned int limit;
	  if (cinfo->unread_marker == (int) M_COM)
	limit = marker->length_limit_COM;
	  else
	limit = marker->length_limit_APPn[cinfo->unread_marker - (int) M_APP0];
	  if ((unsigned int) length < limit)
	limit = (unsigned int) length;
	  /* allocate and initialize the marker item */
	  cur_marker = (jpeg_saved_marker_ptr)
	(*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				    SIZEOF(struct jpeg_marker_struct) + limit);
	  cur_marker->next = NULL;
	  cur_marker->marker = (UINT8) cinfo->unread_marker;
	  cur_marker->original_length = (unsigned int) length;
	  cur_marker->data_length = limit;
	  /* data area is just beyond the jpeg_marker_struct */
	  data = cur_marker->data = (JOCTET FAR *) (cur_marker + 1);
	  marker->cur_marker = cur_marker;
	  marker->bytes_read = 0;
	  bytes_read = 0;
	  data_length = limit;
	} else {
	  /* deal with bogus length word */
	  bytes_read = data_length = 0;
	  data = NULL;
	}
  } else {
	/* resume reading a marker */
	bytes_read = marker->bytes_read;
	data_length = cur_marker->data_length;
	data = cur_marker->data + bytes_read;
  }

  while (bytes_read < data_length) {
	INPUT_SYNC(cinfo);		/* move the restart point to here */
	marker->bytes_read = bytes_read;
	/* If there's not at least one byte in buffer, suspend */
	MAKE_BYTE_AVAIL(cinfo, return FALSE);
	/* Copy bytes with reasonable rapidity */
	while (bytes_read < data_length && bytes_in_buffer > 0) {
	  *data++ = *next_input_byte++;
	  bytes_in_buffer--;
	  bytes_read++;
	}
  }

  /* Done reading what we want to read */
  if (cur_marker != NULL) {	/* will be NULL if bogus length word */
	/* Add new marker to end of list */
	if (cinfo->marker_list == NULL) {
	  cinfo->marker_list = cur_marker;
	} else {
	  jpeg_saved_marker_ptr prev = cinfo->marker_list;
	  while (prev->next != NULL)
	prev = prev->next;
	  prev->next = cur_marker;
	}
	/* Reset pointer & calc remaining data length */
	data = cur_marker->data;
	length = cur_marker->original_length - data_length;
  }
  /* Reset to initial state for next marker */
  marker->cur_marker = NULL;

  /* Process the marker if interesting; else just make a generic trace msg */
  switch (cinfo->unread_marker) {
  case M_APP0:
	examine_app0(cinfo, data, data_length, length);
	break;
  case M_APP14:
	examine_app14(cinfo, data, data_length, length);
	break;
  default:
	TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker,
	     (int) (data_length + length));
	break;
  }

  /* skip any remaining data -- could be lots */
  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
	(*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}

#endif /* SAVE_MARKERS_SUPPORTED */

METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
  INT32 length;
  INPUT_VARS(cinfo);

  INPUT_2BYTES(cinfo, length, return FALSE);
  length -= 2;

  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
  if (length > 0)
	(*cinfo->src->skip_input_data) (cinfo, (long) length);

  return TRUE;
}

/*
 * Find the next JPEG marker, save it in cinfo->unread_marker.
 * Returns FALSE if had to suspend before reaching a marker;
 * in that case cinfo->unread_marker is unchanged.
 *
 * Note that the result might not be a valid marker code,
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
  int c;
  INPUT_VARS(cinfo);

  for (;;) {
	INPUT_BYTE(cinfo, c, return FALSE);
	/* Skip any non-FF bytes.
	 * This may look a bit inefficient, but it will not occur in a valid file.
	 * We sync after each discarded byte so that a suspending data source
	 * can discard the byte from its buffer.
	 */
	while (c != 0xFF) {
	  cinfo->marker->discarded_bytes++;
	  INPUT_SYNC(cinfo);
	  INPUT_BYTE(cinfo, c, return FALSE);
	}
	/* This loop swallows any duplicate FF bytes.  Extra FFs are legal as
	 * pad bytes, so don't count them in discarded_bytes.  We assume there
	 * will not be so many consecutive FF bytes as to overflow a suspending
	 * data source's input buffer.
	 */
	do {
	  INPUT_BYTE(cinfo, c, return FALSE);
	} while (c == 0xFF);
	if (c != 0)
	  break;			/* found a valid marker, exit loop */
	/* Reach here if we found a stuffed-zero data sequence (FF/00).
	 * Discard it and loop back to try again.
	 */
	cinfo->marker->discarded_bytes += 2;
	INPUT_SYNC(cinfo);
  }

  if (cinfo->marker->discarded_bytes != 0) {
	WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
	cinfo->marker->discarded_bytes = 0;
  }

  cinfo->unread_marker = c;

  INPUT_SYNC(cinfo);
  return TRUE;
}

LOCAL(boolean)
first_marker (j_decompress_ptr cinfo)
/* Like next_marker, but used to obtain the initial SOI marker. */
/* For this marker, we do not allow preceding garbage or fill; otherwise,
 * we might well scan an entire input file before realizing it ain't JPEG.
 * If an application wants to process non-JFIF files, it must seek to the
 * SOI before calling the JPEG library.
 */
{
  int c, c2;
  INPUT_VARS(cinfo);

  INPUT_BYTE(cinfo, c, return FALSE);
  INPUT_BYTE(cinfo, c2, return FALSE);
  if (c != 0xFF || c2 != (int) M_SOI)
	ERREXIT2(cinfo, JERR_NO_SOI, c, c2);

  cinfo->unread_marker = c2;

  INPUT_SYNC(cinfo);
  return TRUE;
}

/*
 * Read markers until SOS or EOI.
 *
 * Returns same codes as are defined for jpeg_consume_input:
 * JPEG_SUSPENDED, JPEG_REACHED_SOS, or JPEG_REACHED_EOI.
 */

METHODDEF(int)
read_markers (j_decompress_ptr cinfo)
{
  /* Outer loop repeats once for each marker. */
  for (;;) {
	/* Collect the marker proper, unless we already did. */
	/* NB: first_marker() enforces the requirement that SOI appear first. */
	if (cinfo->unread_marker == 0) {
	  if (! cinfo->marker->saw_SOI) {
	if (! first_marker(cinfo))
	  return JPEG_SUSPENDED;
	  } else {
	if (! next_marker(cinfo))
	  return JPEG_SUSPENDED;
	  }
	}
	/* At this point cinfo->unread_marker contains the marker code and the
	 * input point is just past the marker proper, but before any parameters.
	 * A suspension will cause us to return with this state still true.
	 */
	switch (cinfo->unread_marker) {
	case M_SOI:
	  if (! get_soi(cinfo))
	return JPEG_SUSPENDED;
	  break;

	case M_SOF0:		/* Baseline */
	case M_SOF1:		/* Extended sequential, Huffman */
	  if (! get_sof(cinfo, FALSE, FALSE))
	return JPEG_SUSPENDED;
	  break;

	case M_SOF2:		/* Progressive, Huffman */
	  if (! get_sof(cinfo, TRUE, FALSE))
	return JPEG_SUSPENDED;
	  break;

	case M_SOF9:		/* Extended sequential, arithmetic */
	  if (! get_sof(cinfo, FALSE, TRUE))
	return JPEG_SUSPENDED;
	  break;

	case M_SOF10:		/* Progressive, arithmetic */
	  if (! get_sof(cinfo, TRUE, TRUE))
	return JPEG_SUSPENDED;
	  break;

	/* Currently unsupported SOFn types */
	case M_SOF3:		/* Lossless, Huffman */
	case M_SOF5:		/* Differential sequential, Huffman */
	case M_SOF6:		/* Differential progressive, Huffman */
	case M_SOF7:		/* Differential lossless, Huffman */
	case M_JPG:			/* Reserved for JPEG extensions */
	case M_SOF11:		/* Lossless, arithmetic */
	case M_SOF13:		/* Differential sequential, arithmetic */
	case M_SOF14:		/* Differential progressive, arithmetic */
	case M_SOF15:		/* Differential lossless, arithmetic */
	  ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
	  break;

	case M_SOS:
	  if (! get_sos(cinfo))
	return JPEG_SUSPENDED;
	  cinfo->unread_marker = 0;	/* processed the marker */
	  return JPEG_REACHED_SOS;

	case M_EOI:
	  TRACEMS(cinfo, 1, JTRC_EOI);
	  cinfo->unread_marker = 0;	/* processed the marker */
	  return JPEG_REACHED_EOI;

	case M_DAC:
	  if (! get_dac(cinfo))
	return JPEG_SUSPENDED;
	  break;

	case M_DHT:
	  if (! get_dht(cinfo))
	return JPEG_SUSPENDED;
	  break;

	case M_DQT:
	  if (! get_dqt(cinfo))
	return JPEG_SUSPENDED;
	  break;

	case M_DRI:
	  if (! get_dri(cinfo))
	return JPEG_SUSPENDED;
	  break;

	case M_APP0:
	case M_APP1:
	case M_APP2:
	case M_APP3:
	case M_APP4:
	case M_APP5:
	case M_APP6:
	case M_APP7:
	case M_APP8:
	case M_APP9:
	case M_APP10:
	case M_APP11:
	case M_APP12:
	case M_APP13:
	case M_APP14:
	case M_APP15:
	  if (! (*((my_marker_ptr2) cinfo->marker)->process_APPn[
		cinfo->unread_marker - (int) M_APP0]) (cinfo))
	return JPEG_SUSPENDED;
	  break;

	case M_COM:
	  if (! (*((my_marker_ptr2) cinfo->marker)->process_COM) (cinfo))
	return JPEG_SUSPENDED;
	  break;

	case M_RST0:		/* these are all parameterless */
	case M_RST1:
	case M_RST2:
	case M_RST3:
	case M_RST4:
	case M_RST5:
	case M_RST6:
	case M_RST7:
	case M_TEM:
	  TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
	  break;

	case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
	  if (! skip_variable(cinfo))
	return JPEG_SUSPENDED;
	  break;

	default:			/* must be DHP, EXP, JPGn, or RESn */
	  /* For now, we treat the reserved markers as fatal errors since they are
	   * likely to be used to signal incompatible JPEG Part 3 extensions.
	   * Once the JPEG 3 version-number marker is well defined, this code
	   * ought to change!
	   */
	  ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
	  break;
	}
	/* Successfully processed marker, so reset state variable */
	cinfo->unread_marker = 0;
  } /* end loop */
}

/*
 * Read a restart marker, which is expected to appear next in the datastream;
 * if the marker is not there, take appropriate recovery action.
 * Returns FALSE if suspension is required.
 *
 * This is called by the entropy decoder after it has read an appropriate
 * number of MCUs.  cinfo->unread_marker may be nonzero if the entropy decoder
 * has already read a marker from the data source.  Under normal conditions
 * cinfo->unread_marker will be reset to 0 before returning; if not reset,
 * it holds a marker which the decoder will be unable to read past.
 */

METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
	if (! next_marker(cinfo))
	  return FALSE;
  }

  if (cinfo->unread_marker ==
	  ((int) M_RST0 + cinfo->marker->next_restart_num)) {
	/* Normal case --- swallow the marker and let entropy decoder continue */
	TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
	cinfo->unread_marker = 0;
  } else {
	/* Uh-oh, the restart markers have been messed up. */
	/* Let the data source manager determine how to resync. */
	if (! (*cinfo->src->resync_to_restart) (cinfo,
					    cinfo->marker->next_restart_num))
	  return FALSE;
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;

  return TRUE;
}

/*
 * This is the default resync_to_restart method for data source managers
 * to use if they don't have any better approach.  Some data source managers
 * may be able to back up, or may have additional knowledge about the data
 * which permits a more intelligent recovery strategy; such managers would
 * presumably supply their own resync method.
 *
 * read_restart_marker calls resync_to_restart if it finds a marker other than
 * the restart marker it was expecting.  (This code is *not* used unless
 * a nonzero restart interval has been declared.)  cinfo->unread_marker is
 * the marker code actually found (might be anything, except 0 or FF).
 * The desired restart marker number (0..7) is passed as a parameter.
 * This routine is supposed to apply whatever error recovery strategy seems
 * appropriate in order to position the input stream to the next data segment.
 * Note that cinfo->unread_marker is treated as a marker appearing before
 * the current data-source input point; usually it should be reset to zero
 * before returning.
 * Returns FALSE if suspension is required.
 *
 * This implementation is substantially constrained by wanting to treat the
 * input as a data stream; this means we can't back up.  Therefore, we have
 * only the following actions to work with:
 *   1. Simply discard the marker and let the entropy decoder resume at next
 *      byte of file.
 *   2. Read forward until we find another marker, discarding intervening
 *      data.  (In theory we could look ahead within the current bufferload,
 *      without having to discard data if we don't find the desired marker.
 *      This idea is not implemented here, in part because it makes behavior
 *      dependent on buffer size and chance buffer-boundary positions.)
 *   3. Leave the marker unread (by failing to zero cinfo->unread_marker).
 *      This will cause the entropy decoder to process an empty data segment,
 *      inserting dummy zeroes, and then we will reprocess the marker.
 *
 * #2 is appropriate if we think the desired marker lies ahead, while #3 is
 * appropriate if the found marker is a future restart marker (indicating
 * that we have missed the desired restart marker, probably because it got
 * corrupted).
 * We apply #2 or #3 if the found marker is a restart marker no more than
 * two counts behind or ahead of the expected one.  We also apply #2 if the
 * found marker is not a legal JPEG marker code (it's certainly bogus data).
 * If the found marker is a restart marker more than 2 counts away, we do #1
 * (too much risk that the marker is erroneous; with luck we will be able to
 * resync at some future point).
 * For any valid non-restart JPEG marker, we apply #3.  This keeps us from
 * overrunning the end of a scan.  An implementation limited to single-scan
 * files might find it better to apply #2 for markers other than EOI, since
 * any other marker would have to be bogus data in that case.
 */

GLOBAL(boolean)
jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired)
{
  int marker = cinfo->unread_marker;
  int action = 1;

  /* Always put up a warning. */
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);

  /* Outer loop handles repeated decision after scanning forward. */
  for (;;) {
	if (marker < (int) M_SOF0)
	  action = 2;		/* invalid marker */
	else if (marker < (int) M_RST0 || marker > (int) M_RST7)
	  action = 3;		/* valid non-restart marker */
	else {
	  if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
	action = 3;		/* one of the next two expected restarts */
	  else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
	action = 2;		/* a prior restart, so advance */
	  else
	action = 1;		/* desired restart or too far away */
	}
	TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
	switch (action) {
	case 1:
	  /* Discard marker and let entropy decoder resume processing. */
	  cinfo->unread_marker = 0;
	  return TRUE;
	case 2:
	  /* Scan to the next marker, and repeat the decision loop. */
	  if (! next_marker(cinfo))
	return FALSE;
	  marker = cinfo->unread_marker;
	  break;
	case 3:
	  /* Return without advancing past this marker. */
	  /* Entropy decoder will be forced to process an empty segment. */
	  return TRUE;
	}
  } /* end loop */
}

/*
 * Reset marker processing state to begin a fresh datastream.
 */

METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr2 marker = (my_marker_ptr2) cinfo->marker;

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
  cinfo->unread_marker = 0;		/* no pending marker */
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
  marker->pub.saw_SOF = FALSE;
  marker->pub.discarded_bytes = 0;
  marker->cur_marker = NULL;
}

/*
 * Initialize the marker reader module.
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
  my_marker_ptr2 marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr2)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
  marker->pub.read_markers = read_markers;
  marker->pub.read_restart_marker = read_restart_marker;
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
  marker->length_limit_COM = 0;
  for (i = 0; i < 16; i++) {
	marker->process_APPn[i] = skip_variable;
	marker->length_limit_APPn[i] = 0;
  }
  marker->process_APPn[0] = get_interesting_appn;
  marker->process_APPn[14] = get_interesting_appn;
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
}

/*
 * Control saving of COM and APPn markers into marker_list.
 */

#ifdef SAVE_MARKERS_SUPPORTED

GLOBAL(void)
jpeg_save_markers (j_decompress_ptr cinfo, int marker_code,
		   unsigned int length_limit)
{
  my_marker_ptr2 marker = (my_marker_ptr2) cinfo->marker;
  long maxlength;
  jpeg_marker_parser_method processor;

  /* Length limit mustn't be larger than what we can allocate
   * (should only be a concern in a 16-bit environment).
   */
  maxlength = cinfo->mem->max_alloc_chunk - SIZEOF(struct jpeg_marker_struct);
  if (((long) length_limit) > maxlength)
	length_limit = (unsigned int) maxlength;

  /* Choose processor routine to use.
   * APP0/APP14 have special requirements.
   */
  if (length_limit) {
	processor = save_marker;
	/* If saving APP0/APP14, save at least enough for our internal use. */
	if (marker_code == (int) M_APP0 && length_limit < APP0_DATA_LEN)
	  length_limit = APP0_DATA_LEN;
	else if (marker_code == (int) M_APP14 && length_limit < APP14_DATA_LEN)
	  length_limit = APP14_DATA_LEN;
  } else {
	processor = skip_variable;
	/* If discarding APP0/APP14, use our regular on-the-fly processor. */
	if (marker_code == (int) M_APP0 || marker_code == (int) M_APP14)
	  processor = get_interesting_appn;
  }

  if (marker_code == (int) M_COM) {
	marker->process_COM = processor;
	marker->length_limit_COM = length_limit;
  } else if (marker_code >= (int) M_APP0 && marker_code <= (int) M_APP15) {
	marker->process_APPn[marker_code - (int) M_APP0] = processor;
	marker->length_limit_APPn[marker_code - (int) M_APP0] = length_limit;
  } else
	ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, marker_code);
}

#endif /* SAVE_MARKERS_SUPPORTED */

/*
 * Install a special processing method for COM or APPn markers.
 */

GLOBAL(void)
jpeg_set_marker_processor (j_decompress_ptr cinfo, int marker_code,
			   jpeg_marker_parser_method routine)
{
  my_marker_ptr2 marker = (my_marker_ptr2) cinfo->marker;

  if (marker_code == (int) M_COM)
	marker->process_COM = routine;
  else if (marker_code >= (int) M_APP0 && marker_code <= (int) M_APP15)
	marker->process_APPn[marker_code - (int) M_APP0] = routine;
  else
	ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, marker_code);
}

/*** End of inlined file: jdmarker.c ***/


/*** Start of inlined file: jdmaster.c ***/
#define JPEG_INTERNALS

/* Private state */

typedef struct {
  struct jpeg_decomp_master pub; /* public fields */

  int pass_number;		/* # of passes completed */

  boolean using_merged_upsample; /* TRUE if using merged upsample/cconvert */

  /* Saved references to initialized quantizer modules,
   * in case we need to switch modes.
   */
  struct jpeg_color_quantizer * quantizer_1pass;
  struct jpeg_color_quantizer * quantizer_2pass;
} my_decomp_master;

typedef my_decomp_master * my_master_ptr6;

/*
 * Determine whether merged upsample/color conversion should be used.
 * CRUCIAL: this must match the actual capabilities of jdmerge.c!
 */

LOCAL(boolean)
use_merged_upsample (j_decompress_ptr cinfo)
{
#ifdef UPSAMPLE_MERGING_SUPPORTED
  /* Merging is the equivalent of plain box-filter upsampling */
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
	return FALSE;
  /* jdmerge.c only supports YCC=>RGB color conversion */
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
	  cinfo->out_color_space != JCS_RGB ||
	  cinfo->out_color_components != RGB_PIXELSIZE)
	return FALSE;
  /* and it only handles 2h1v or 2h2v sampling ratios */
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
	  cinfo->comp_info[1].h_samp_factor != 1 ||
	  cinfo->comp_info[2].h_samp_factor != 1 ||
	  cinfo->comp_info[0].v_samp_factor >  2 ||
	  cinfo->comp_info[1].v_samp_factor != 1 ||
	  cinfo->comp_info[2].v_samp_factor != 1)
	return FALSE;
  /* furthermore, it doesn't work if we've scaled the IDCTs differently */
  if (cinfo->comp_info[0].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
	  cinfo->comp_info[1].DCT_scaled_size != cinfo->min_DCT_scaled_size ||
	  cinfo->comp_info[2].DCT_scaled_size != cinfo->min_DCT_scaled_size)
	return FALSE;
  /* ??? also need to test for upsample-time rescaling, when & if supported */
  return TRUE;			/* by golly, it'll work... */
#else
  return FALSE;
#endif
}

/*
 * Compute output image dimensions and related values.
 * NOTE: this is exported for possible use by application.
 * Hence it mustn't do anything that can't be done twice.
 * Also note that it may be called before the master module is initialized!
 */

GLOBAL(void)
jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase */
{
#ifdef IDCT_SCALING_SUPPORTED
  int ci;
  jpeg_component_info *compptr;
#endif

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_READY)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

#ifdef IDCT_SCALING_SUPPORTED

  /* Compute actual output image dimensions and DCT scaling choices. */
  if (cinfo->scale_num * 8 <= cinfo->scale_denom) {
	/* Provide 1/8 scaling */
	cinfo->output_width = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_width, 8L);
	cinfo->output_height = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_height, 8L);
	cinfo->min_DCT_scaled_size = 1;
  } else if (cinfo->scale_num * 4 <= cinfo->scale_denom) {
	/* Provide 1/4 scaling */
	cinfo->output_width = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_width, 4L);
	cinfo->output_height = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_height, 4L);
	cinfo->min_DCT_scaled_size = 2;
  } else if (cinfo->scale_num * 2 <= cinfo->scale_denom) {
	/* Provide 1/2 scaling */
	cinfo->output_width = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_width, 2L);
	cinfo->output_height = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_height, 2L);
	cinfo->min_DCT_scaled_size = 4;
  } else {
	/* Provide 1/1 scaling */
	cinfo->output_width = cinfo->image_width;
	cinfo->output_height = cinfo->image_height;
	cinfo->min_DCT_scaled_size = DCTSIZE;
  }
  /* In selecting the actual DCT scaling for each component, we try to
   * scale up the chroma components via IDCT scaling rather than upsampling.
   * This saves time if the upsampler gets to use 1:1 scaling.
   * Note this code assumes that the supported DCT scalings are powers of 2.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	int ssize = cinfo->min_DCT_scaled_size;
	while (ssize < DCTSIZE &&
	   (compptr->h_samp_factor * ssize * 2 <=
	    cinfo->max_h_samp_factor * cinfo->min_DCT_scaled_size) &&
	   (compptr->v_samp_factor * ssize * 2 <=
	    cinfo->max_v_samp_factor * cinfo->min_DCT_scaled_size)) {
	  ssize = ssize * 2;
	}
	compptr->DCT_scaled_size = ssize;
  }

  /* Recompute downsampled dimensions of components;
   * application needs to know these if using raw downsampled data.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* Size in samples, after IDCT scaling */
	compptr->downsampled_width = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_width *
		    (long) (compptr->h_samp_factor * compptr->DCT_scaled_size),
		    (long) (cinfo->max_h_samp_factor * DCTSIZE));
	compptr->downsampled_height = (JDIMENSION)
	  jdiv_round_up((long) cinfo->image_height *
		    (long) (compptr->v_samp_factor * compptr->DCT_scaled_size),
		    (long) (cinfo->max_v_samp_factor * DCTSIZE));
  }

#else /* !IDCT_SCALING_SUPPORTED */

  /* Hardwire it to "no scaling" */
  cinfo->output_width = cinfo->image_width;
  cinfo->output_height = cinfo->image_height;
  /* jdinput.c has already initialized DCT_scaled_size to DCTSIZE,
   * and has computed unscaled downsampled_width and downsampled_height.
   */

#endif /* IDCT_SCALING_SUPPORTED */

  /* Report number of components in selected colorspace. */
  /* Probably this should be in the color conversion module... */
  switch (cinfo->out_color_space) {
  case JCS_GRAYSCALE:
	cinfo->out_color_components = 1;
	break;
  case JCS_RGB:
#if RGB_PIXELSIZE != 3
	cinfo->out_color_components = RGB_PIXELSIZE;
	break;
#endif /* else share code with YCbCr */
  case JCS_YCbCr:
	cinfo->out_color_components = 3;
	break;
  case JCS_CMYK:
  case JCS_YCCK:
	cinfo->out_color_components = 4;
	break;
  default:			/* else must be same colorspace as in file */
	cinfo->out_color_components = cinfo->num_components;
	break;
  }
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
			      cinfo->out_color_components);

  /* See if upsampler will want to emit more than one row at a time */
  if (use_merged_upsample(cinfo))
	cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
  else
	cinfo->rec_outbuf_height = 1;
}

/*
 * Several decompression processes need to range-limit values to the range
 * 0..MAXJSAMPLE; the input value may fall somewhat outside this range
 * due to noise introduced by quantization, roundoff error, etc.  These
 * processes are inner loops and need to be as fast as possible.  On most
 * machines, particularly CPUs with pipelines or instruction prefetch,
 * a (subscript-check-less) C table lookup
 *		x = sample_range_limit[x];
 * is faster than explicit tests
 *		if (x < 0)  x = 0;
 *		else if (x > MAXJSAMPLE)  x = MAXJSAMPLE;
 * These processes all use a common table prepared by the routine below.
 *
 * For most steps we can mathematically guarantee that the initial value
 * of x is within MAXJSAMPLE+1 of the legal range, so a table running from
 * -(MAXJSAMPLE+1) to 2*MAXJSAMPLE+1 is sufficient.  But for the initial
 * limiting step (just after the IDCT), a wildly out-of-range value is
 * possible if the input data is corrupt.  To avoid any chance of indexing
 * off the end of memory and getting a bad-pointer trap, we perform the
 * post-IDCT limiting thus:
 *		x = range_limit[x & MASK];
 * where MASK is 2 bits wider than legal sample data, ie 10 bits for 8-bit
 * samples.  Under normal circumstances this is more than enough range and
 * a correct output will be generated; with bogus input data the mask will
 * cause wraparound, and we will safely generate a bogus-but-in-range output.
 * For the post-IDCT step, we want to convert the data from signed to unsigned
 * representation by adding CENTERJSAMPLE at the same time that we limit it.
 * So the post-IDCT limiting table ends up looking like this:
 *   CENTERJSAMPLE,CENTERJSAMPLE+1,...,MAXJSAMPLE,
 *   MAXJSAMPLE (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 *   0          (repeat 2*(MAXJSAMPLE+1)-CENTERJSAMPLE times),
 *   0,1,...,CENTERJSAMPLE-1
 * Negative inputs select values from the upper half of the table after
 * masking.
 *
 * We can save some space by overlapping the start of the post-IDCT table
 * with the simpler range limiting table.  The post-IDCT table begins at
 * sample_range_limit + CENTERJSAMPLE.
 *
 * Note that the table is allocated in near data space on PCs; it's small
 * enough and used often enough to justify this.
 */

LOCAL(void)
prepare_range_limit_table (j_decompress_ptr cinfo)
/* Allocate and fill in the sample_range_limit table */
{
  JSAMPLE * table;
  int i;

  table = (JSAMPLE *)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
  cinfo->sample_range_limit = table;
  /* First segment of "simple" table: limit[x] = 0 for x < 0 */
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
  /* Main part of "simple" table: limit[x] = x */
  for (i = 0; i <= MAXJSAMPLE; i++)
	table[i] = (JSAMPLE) i;
  table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
  /* End of simple table, rest of first half of post-IDCT table */
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
	table[i] = MAXJSAMPLE;
  /* Second half of post-IDCT table */
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
	  (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
	  cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
}

/*
 * Master selection of decompression modules.
 * This is done once at jpeg_start_decompress time.  We determine
 * which modules will be used and give them appropriate initialization calls.
 * We also initialize the decompressor input side to begin consuming data.
 *
 * Since jpeg_read_header has finished, we know what is in the SOF
 * and (first) SOS markers.  We also have all the application parameter
 * settings.
 */

LOCAL(void)
master_selection (j_decompress_ptr cinfo)
{
  my_master_ptr6 master = (my_master_ptr6) cinfo->master;
  boolean use_c_buffer;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Initialize dimensions and other stuff */
  jpeg_calc_output_dimensions(cinfo);
  prepare_range_limit_table(cinfo);

  /* Width of an output scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
  jd_samplesperrow = (JDIMENSION) samplesperrow;
  if ((long) jd_samplesperrow != samplesperrow)
	ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);

  /* Initialize my private state */
  master->pass_number = 0;
  master->using_merged_upsample = use_merged_upsample(cinfo);

  /* Color quantizer selection */
  master->quantizer_1pass = NULL;
  master->quantizer_2pass = NULL;
  /* No mode changes if not using buffered-image mode. */
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
	cinfo->enable_1pass_quant = FALSE;
	cinfo->enable_external_quant = FALSE;
	cinfo->enable_2pass_quant = FALSE;
  }
  if (cinfo->quantize_colors) {
	if (cinfo->raw_data_out)
	  ERREXIT(cinfo, JERR_NOTIMPL);
	/* 2-pass quantizer only works in 3-component color space. */
	if (cinfo->out_color_components != 3) {
	  cinfo->enable_1pass_quant = TRUE;
	  cinfo->enable_external_quant = FALSE;
	  cinfo->enable_2pass_quant = FALSE;
	  cinfo->colormap = NULL;
	} else if (cinfo->colormap != NULL) {
	  cinfo->enable_external_quant = TRUE;
	} else if (cinfo->two_pass_quantize) {
	  cinfo->enable_2pass_quant = TRUE;
	} else {
	  cinfo->enable_1pass_quant = TRUE;
	}

	if (cinfo->enable_1pass_quant) {
#ifdef QUANT_1PASS_SUPPORTED
	  jinit_1pass_quantizer(cinfo);
	  master->quantizer_1pass = cinfo->cquantize;
#else
	  ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	}

	/* We use the 2-pass code to map to external colormaps. */
	if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
#ifdef QUANT_2PASS_SUPPORTED
	  jinit_2pass_quantizer(cinfo);
	  master->quantizer_2pass = cinfo->cquantize;
#else
	  ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	}
	/* If both quantizers are initialized, the 2-pass one is left active;
	 * this is necessary for starting with quantization to an external map.
	 */
  }

  /* Post-processing: in particular, color conversion first */
  if (! cinfo->raw_data_out) {
	if (master->using_merged_upsample) {
#ifdef UPSAMPLE_MERGING_SUPPORTED
	  jinit_merged_upsampler(cinfo); /* does color conversion too */
#else
	  ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else {
	  jinit_color_deconverter(cinfo);
	  jinit_upsampler(cinfo);
	}
	jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
  }
  /* Inverse DCT */
  jinit_inverse_dct(cinfo);
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
	ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
	if (cinfo->progressive_mode) {
#ifdef D_PROGRESSIVE_SUPPORTED
	  jinit_phuff_decoder(cinfo);
#else
	  ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else
	  jinit_huff_decoder(cinfo);
  }

  /* Initialize principal buffer controllers. */
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
  jinit_d_coef_controller(cinfo, use_c_buffer);

  if (! cinfo->raw_data_out)
	jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);

#ifdef D_MULTISCAN_FILES_SUPPORTED
  /* If jpeg_start_decompress will read the whole file, initialize
   * progress monitoring appropriately.  The input step is counted
   * as one pass.
   */
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
	  cinfo->inputctl->has_multiple_scans) {
	int nscans;
	/* Estimate number of scans to set pass_limit. */
	if (cinfo->progressive_mode) {
	  /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
	  nscans = 2 + 3 * cinfo->num_components;
	} else {
	  /* For a nonprogressive multiscan file, estimate 1 scan per component. */
	  nscans = cinfo->num_components;
	}
	cinfo->progress->pass_counter = 0L;
	cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
	cinfo->progress->completed_passes = 0;
	cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
	/* Count the input pass as done */
	master->pass_number++;
  }
#endif /* D_MULTISCAN_FILES_SUPPORTED */
}

/*
 * Per-pass setup.
 * This is called at the beginning of each output pass.  We determine which
 * modules will be active during this pass and give them appropriate
 * start_pass calls.  We also set is_dummy_pass to indicate whether this
 * is a "real" output pass or a dummy pass for color quantization.
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr6 master = (my_master_ptr6) cinfo->master;

  if (master->pub.is_dummy_pass) {
#ifdef QUANT_2PASS_SUPPORTED
	/* Final pass of 2-pass quantization */
	master->pub.is_dummy_pass = FALSE;
	(*cinfo->cquantize->start_pass) (cinfo, FALSE);
	(*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
	(*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
#else
	ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* QUANT_2PASS_SUPPORTED */
  } else {
	if (cinfo->quantize_colors && cinfo->colormap == NULL) {
	  /* Select new quantization method */
	  if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
	cinfo->cquantize = master->quantizer_2pass;
	master->pub.is_dummy_pass = TRUE;
	  } else if (cinfo->enable_1pass_quant) {
	cinfo->cquantize = master->quantizer_1pass;
	  } else {
	ERREXIT(cinfo, JERR_MODE_CHANGE);
	  }
	}
	(*cinfo->idct->start_pass) (cinfo);
	(*cinfo->coef->start_output_pass) (cinfo);
	if (! cinfo->raw_data_out) {
	  if (! master->using_merged_upsample)
	(*cinfo->cconvert->start_pass) (cinfo);
	  (*cinfo->upsample->start_pass) (cinfo);
	  if (cinfo->quantize_colors)
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
	  (*cinfo->post->start_pass) (cinfo,
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
	  (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
	}
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
	cinfo->progress->completed_passes = master->pass_number;
	cinfo->progress->total_passes = master->pass_number +
				    (master->pub.is_dummy_pass ? 2 : 1);
	/* In buffered-image mode, we assume one more output pass if EOI not
	 * yet reached, but no more passes if EOI has been reached.
	 */
	if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
	  cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
	}
  }
}

/*
 * Finish up at end of an output pass.
 */

METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
  my_master_ptr6 master = (my_master_ptr6) cinfo->master;

  if (cinfo->quantize_colors)
	(*cinfo->cquantize->finish_pass) (cinfo);
  master->pass_number++;
}

#ifdef D_MULTISCAN_FILES_SUPPORTED

/*
 * Switch to a new external colormap between output passes.
 */

GLOBAL(void)
jpeg_new_colormap (j_decompress_ptr cinfo)
{
  my_master_ptr6 master = (my_master_ptr6) cinfo->master;

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_BUFIMAGE)
	ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);

  if (cinfo->quantize_colors && cinfo->enable_external_quant &&
	  cinfo->colormap != NULL) {
	/* Select 2-pass quantizer for external colormap use */
	cinfo->cquantize = master->quantizer_2pass;
	/* Notify quantizer of colormap change */
	(*cinfo->cquantize->new_color_map) (cinfo);
	master->pub.is_dummy_pass = FALSE; /* just in case */
  } else
	ERREXIT(cinfo, JERR_MODE_CHANGE);
}

#endif /* D_MULTISCAN_FILES_SUPPORTED */

/*
 * Initialize master decompression control and select active modules.
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
  my_master_ptr6 master;

  master = (my_master_ptr6)
	  (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
  master->pub.finish_output_pass = finish_output_pass;

  master->pub.is_dummy_pass = FALSE;

  master_selection(cinfo);
}

/*** End of inlined file: jdmaster.c ***/

	#undef FIX

/*** Start of inlined file: jdmerge.c ***/
#define JPEG_INTERNALS

#ifdef UPSAMPLE_MERGING_SUPPORTED

/* Private subobject */

typedef struct {
  struct jpeg_upsampler pub;	/* public fields */

  /* Pointer to routine to do actual upsampling/conversion of one row group */
  JMETHOD(void, upmethod, (j_decompress_ptr cinfo,
			   JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
			   JSAMPARRAY output_buf));

  /* Private state for YCC->RGB conversion */
  int * Cr_r_tab;		/* => table for Cr to R conversion */
  int * Cb_b_tab;		/* => table for Cb to B conversion */
  INT32 * Cr_g_tab;		/* => table for Cr to G conversion */
  INT32 * Cb_g_tab;		/* => table for Cb to G conversion */

  /* For 2:1 vertical sampling, we produce two output rows at a time.
   * We need a "spare" row buffer to hold the second output row if the
   * application provides just a one-row buffer; we also use the spare
   * to discard the dummy last row if the image height is odd.
   */
  JSAMPROW spare_row;
  boolean spare_full;		/* T if spare buffer is occupied */

  JDIMENSION out_row_width;	/* samples per output row */
  JDIMENSION rows_to_go;	/* counts rows remaining in image */
} my_upsampler;

typedef my_upsampler * my_upsample_ptr;

#define SCALEBITS	16	/* speediest right-shift on some machines */
#define ONE_HALF	((INT32) 1 << (SCALEBITS-1))
#define FIX(x)		((INT32) ((x) * (1L<<SCALEBITS) + 0.5))

/*
 * Initialize tables for YCC->RGB colorspace conversion.
 * This is taken directly from jdcolor.c; see that file for more info.
 */

LOCAL(void)
build_ycc_rgb_table2 (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  int i;
  INT32 x;
  SHIFT_TEMPS

  upsample->Cr_r_tab = (int *)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cb_b_tab = (int *)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cr_g_tab = (INT32 *)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  upsample->Cb_g_tab = (INT32 *)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
	/* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
	/* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
	/* Cr=>R value is nearest int to 1.40200 * x */
	upsample->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
	/* Cb=>B value is nearest int to 1.77200 * x */
	upsample->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
	/* Cr=>G value is scaled-up -0.71414 * x */
	upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
	/* Cb=>G value is scaled-up -0.34414 * x */
	/* We also add in ONE_HALF so that need not do it in inner loop */
	upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
  }
}

/*
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
}

/*
 * Control routine to do upsampling (and color conversion).
 *
 * The control routine just handles the row buffering considerations.
 */

METHODDEF(void)
merged_2v_upsample (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 2:1 vertical sampling case: may need a spare row. */
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  JSAMPROW work_ptrs[2];
  JDIMENSION num_rows;		/* number of rows returned to caller */

  if (upsample->spare_full) {
	/* If we have a spare row saved from a previous cycle, just return it. */
	jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
		      1, upsample->out_row_width);
	num_rows = 1;
	upsample->spare_full = FALSE;
  } else {
	/* Figure number of rows to return to caller. */
	num_rows = 2;
	/* Not more than the distance to the end of the image. */
	if (num_rows > upsample->rows_to_go)
	  num_rows = upsample->rows_to_go;
	/* And not more than what the client can accept: */
	out_rows_avail -= *out_row_ctr;
	if (num_rows > out_rows_avail)
	  num_rows = out_rows_avail;
	/* Create output pointer array for upsampler. */
	work_ptrs[0] = output_buf[*out_row_ctr];
	if (num_rows > 1) {
	  work_ptrs[1] = output_buf[*out_row_ctr + 1];
	} else {
	  work_ptrs[1] = upsample->spare_row;
	  upsample->spare_full = TRUE;
	}
	/* Now do the upsampling. */
	(*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
  }

  /* Adjust counts */
  *out_row_ctr += num_rows;
  upsample->rows_to_go -= num_rows;
  /* When the buffer is emptied, declare this input row group consumed */
  if (! upsample->spare_full)
	(*in_row_group_ctr)++;
}

METHODDEF(void)
merged_1v_upsample (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
			 output_buf + *out_row_ctr);
  /* Adjust counts */
  (*out_row_ctr)++;
  (*in_row_group_ctr)++;
}

/*
 * These are the routines invoked by the control routines to do
 * the actual upsampling/conversion.  One row group is processed per call.
 *
 * Note: since we may be writing directly into application-supplied buffers,
 * we have to be honest about the output width; we can't assume the buffer
 * has been rounded up to an even width.
 */

/*
 * Upsample and color convert for the case of 2:1 horizontal and 1:1 vertical.
 */

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  register int y, cred, cgreen, cblue;
  int cb, cr;
  register JSAMPROW outptr;
  JSAMPROW inptr0, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  int * Crrtab = upsample->Cr_r_tab;
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr = output_buf[0];
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
	/* Do the chroma part of the calculation */
	cb = GETJSAMPLE(*inptr1++);
	cr = GETJSAMPLE(*inptr2++);
	cred = Crrtab[cr];
	cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
	cblue = Cbbtab[cb];
	/* Fetch 2 Y values and emit 2 pixels */
	y  = GETJSAMPLE(*inptr0++);
	outptr[RGB_RED] =   range_limit[y + cred];
	outptr[RGB_GREEN] = range_limit[y + cgreen];
	outptr[RGB_BLUE] =  range_limit[y + cblue];
	outptr += RGB_PIXELSIZE;
	y  = GETJSAMPLE(*inptr0++);
	outptr[RGB_RED] =   range_limit[y + cred];
	outptr[RGB_GREEN] = range_limit[y + cgreen];
	outptr[RGB_BLUE] =  range_limit[y + cblue];
	outptr += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
	cb = GETJSAMPLE(*inptr1);
	cr = GETJSAMPLE(*inptr2);
	cred = Crrtab[cr];
	cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
	cblue = Cbbtab[cb];
	y  = GETJSAMPLE(*inptr0);
	outptr[RGB_RED] =   range_limit[y + cred];
	outptr[RGB_GREEN] = range_limit[y + cgreen];
	outptr[RGB_BLUE] =  range_limit[y + cblue];
  }
}

/*
 * Upsample and color convert for the case of 2:1 horizontal and 2:1 vertical.
 */

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
  register int y, cred, cgreen, cblue;
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
  int * Crrtab = upsample->Cr_r_tab;
  int * Cbbtab = upsample->Cb_b_tab;
  INT32 * Crgtab = upsample->Cr_g_tab;
  INT32 * Cbgtab = upsample->Cb_g_tab;
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
  inptr1 = input_buf[1][in_row_group_ctr];
  inptr2 = input_buf[2][in_row_group_ctr];
  outptr0 = output_buf[0];
  outptr1 = output_buf[1];
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
	/* Do the chroma part of the calculation */
	cb = GETJSAMPLE(*inptr1++);
	cr = GETJSAMPLE(*inptr2++);
	cred = Crrtab[cr];
	cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
	cblue = Cbbtab[cb];
	/* Fetch 4 Y values and emit 4 pixels */
	y  = GETJSAMPLE(*inptr00++);
	outptr0[RGB_RED] =   range_limit[y + cred];
	outptr0[RGB_GREEN] = range_limit[y + cgreen];
	outptr0[RGB_BLUE] =  range_limit[y + cblue];
	outptr0 += RGB_PIXELSIZE;
	y  = GETJSAMPLE(*inptr00++);
	outptr0[RGB_RED] =   range_limit[y + cred];
	outptr0[RGB_GREEN] = range_limit[y + cgreen];
	outptr0[RGB_BLUE] =  range_limit[y + cblue];
	outptr0 += RGB_PIXELSIZE;
	y  = GETJSAMPLE(*inptr01++);
	outptr1[RGB_RED] =   range_limit[y + cred];
	outptr1[RGB_GREEN] = range_limit[y + cgreen];
	outptr1[RGB_BLUE] =  range_limit[y + cblue];
	outptr1 += RGB_PIXELSIZE;
	y  = GETJSAMPLE(*inptr01++);
	outptr1[RGB_RED] =   range_limit[y + cred];
	outptr1[RGB_GREEN] = range_limit[y + cgreen];
	outptr1[RGB_BLUE] =  range_limit[y + cblue];
	outptr1 += RGB_PIXELSIZE;
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
	cb = GETJSAMPLE(*inptr1);
	cr = GETJSAMPLE(*inptr2);
	cred = Crrtab[cr];
	cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
	cblue = Cbbtab[cb];
	y  = GETJSAMPLE(*inptr00);
	outptr0[RGB_RED] =   range_limit[y + cred];
	outptr0[RGB_GREEN] = range_limit[y + cgreen];
	outptr0[RGB_BLUE] =  range_limit[y + cblue];
	y  = GETJSAMPLE(*inptr01);
	outptr1[RGB_RED] =   range_limit[y + cred];
	outptr1[RGB_GREEN] = range_limit[y + cgreen];
	outptr1[RGB_BLUE] =  range_limit[y + cblue];
  }
}

/*
 * Module initialization routine for merged upsampling/color conversion.
 *
 * NB: this is called under the conditions determined by use_merged_upsample()
 * in jdmaster.c.  That routine MUST correspond to the actual capabilities
 * of this module; no safety checks are made here.
 */

GLOBAL(void)
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_merged_upsample;
  upsample->pub.need_context_rows = FALSE;

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;

  if (cinfo->max_v_samp_factor == 2) {
	upsample->pub.upsample = merged_2v_upsample;
	upsample->upmethod = h2v2_merged_upsample;
	/* Allocate a spare row buffer */
	upsample->spare_row = (JSAMPROW)
	  (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
  } else {
	upsample->pub.upsample = merged_1v_upsample;
	upsample->upmethod = h2v1_merged_upsample;
	/* No spare row needed */
	upsample->spare_row = NULL;
  }

  build_ycc_rgb_table2(cinfo);
}

#endif /* UPSAMPLE_MERGING_SUPPORTED */

/*** End of inlined file: jdmerge.c ***/


	#undef ASSIGN_STATE

/*** Start of inlined file: jdphuff.c ***/
#define JPEG_INTERNALS

#ifdef D_PROGRESSIVE_SUPPORTED

/*
 * Expanded entropy decoder object for progressive Huffman decoding.
 *
 * The savable_state subrecord contains fields that change within an MCU,
 * but must not be updated permanently until we complete the MCU.
 */

typedef struct {
  unsigned int EOBRUN;			/* remaining EOBs in EOBRUN */
  int last_dc_val[MAX_COMPS_IN_SCAN];	/* last DC coef for each component */
} savable_state3;

/* This macro is to work around compilers with missing or broken
 * structure assignment.  You'll need to fix this code if you have
 * such a compiler and you change MAX_COMPS_IN_SCAN.
 */

#ifndef NO_STRUCT_ASSIGN
#define ASSIGN_STATE(dest,src)  ((dest) = (src))
#else
#if MAX_COMPS_IN_SCAN == 4
#define ASSIGN_STATE(dest,src)  \
	((dest).EOBRUN = (src).EOBRUN, \
	 (dest).last_dc_val[0] = (src).last_dc_val[0], \
	 (dest).last_dc_val[1] = (src).last_dc_val[1], \
	 (dest).last_dc_val[2] = (src).last_dc_val[2], \
	 (dest).last_dc_val[3] = (src).last_dc_val[3])
#endif
#endif

typedef struct {
  struct jpeg_entropy_decoder pub; /* public fields */

  /* These fields are loaded into local variables at start of each MCU.
   * In case of suspension, we exit WITHOUT updating them.
   */
  bitread_perm_state bitstate;	/* Bit buffer at start of MCU */
  savable_state3 saved;		/* Other state at start of MCU */

  /* These fields are NOT loaded into local working state. */
  unsigned int restarts_to_go;	/* MCUs left in this restart interval */

  /* Pointers to derived tables (these workspaces have image lifespan) */
  d_derived_tbl * derived_tbls[NUM_HUFF_TBLS];

  d_derived_tbl * ac_derived_tbl; /* active table during an AC scan */
} phuff_entropy_decoder;

typedef phuff_entropy_decoder * phuff_entropy_ptr2;

/* Forward declarations */
METHODDEF(boolean) decode_mcu_DC_first JPP((j_decompress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF(boolean) decode_mcu_AC_first JPP((j_decompress_ptr cinfo,
					    JBLOCKROW *MCU_data));
METHODDEF(boolean) decode_mcu_DC_refine JPP((j_decompress_ptr cinfo,
					     JBLOCKROW *MCU_data));
METHODDEF(boolean) decode_mcu_AC_refine JPP((j_decompress_ptr cinfo,
					     JBLOCKROW *MCU_data));

/*
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_phuff_decoder (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr2 entropy = (phuff_entropy_ptr2) cinfo->entropy;
  boolean is_DC_band, bad;
  int ci, coefi, tbl;
  int *coef_bit_ptr;
  jpeg_component_info * compptr;

  is_DC_band = (cinfo->Ss == 0);

  /* Validate scan parameters */
  bad = FALSE;
  if (is_DC_band) {
	if (cinfo->Se != 0)
	  bad = TRUE;
  } else {
	/* need not check Ss/Se < 0 since they came from unsigned bytes */
	if (cinfo->Ss > cinfo->Se || cinfo->Se >= DCTSIZE2)
	  bad = TRUE;
	/* AC scans may have only one component */
	if (cinfo->comps_in_scan != 1)
	  bad = TRUE;
  }
  if (cinfo->Ah != 0) {
	/* Successive approximation refinement scan: must have Al = Ah-1. */
	if (cinfo->Al != cinfo->Ah-1)
	  bad = TRUE;
  }
  if (cinfo->Al > 13)		/* need not check for < 0 */
	bad = TRUE;
  /* Arguably the maximum Al value should be less than 13 for 8-bit precision,
   * but the spec doesn't say so, and we try to be liberal about what we
   * accept.  Note: large Al values could result in out-of-range DC
   * coefficients during early scans, leading to bizarre displays due to
   * overflows in the IDCT math.  But we won't crash.
   */
  if (bad)
	ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
	     cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
  /* Update progression status, and verify that scan order is legal.
   * Note that inter-scan inconsistencies are treated as warnings
   * not fatal errors ... not clear if this is right way to behave.
   */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	int cindex = cinfo->cur_comp_info[ci]->component_index;
	coef_bit_ptr = & cinfo->coef_bits[cindex][0];
	if (!is_DC_band && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
	for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
	  int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
	  if (cinfo->Ah != expected)
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
	  coef_bit_ptr[coefi] = cinfo->Al;
	}
  }

  /* Select MCU decoding routine */
  if (cinfo->Ah == 0) {
	if (is_DC_band)
	  entropy->pub.decode_mcu = decode_mcu_DC_first;
	else
	  entropy->pub.decode_mcu = decode_mcu_AC_first;
  } else {
	if (is_DC_band)
	  entropy->pub.decode_mcu = decode_mcu_DC_refine;
	else
	  entropy->pub.decode_mcu = decode_mcu_AC_refine;
  }

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
	compptr = cinfo->cur_comp_info[ci];
	/* Make sure requested tables are present, and compute derived tables.
	 * We may build same derived table more than once, but it's not expensive.
	 */
	if (is_DC_band) {
	  if (cinfo->Ah == 0) {	/* DC refinement needs no table */
	tbl = compptr->dc_tbl_no;
	jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
				& entropy->derived_tbls[tbl]);
	  }
	} else {
	  tbl = compptr->ac_tbl_no;
	  jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
			      & entropy->derived_tbls[tbl]);
	  /* remember the single active table */
	  entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
	}
	/* Initialize DC predictions to 0 */
	entropy->saved.last_dc_val[ci] = 0;
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
  entropy->pub.insufficient_data = FALSE;

  /* Initialize private state variables */
  entropy->saved.EOBRUN = 0;

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
}

/*
 * Check for a restart marker & resynchronize decoder.
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restartp (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr2 entropy = (phuff_entropy_ptr2) cinfo->entropy;
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
  entropy->bitstate.bits_left = 0;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
	return FALSE;

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
	entropy->saved.last_dc_val[ci] = 0;
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;

  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
	entropy->pub.insufficient_data = FALSE;

  return TRUE;
}

/*
 * Huffman MCU decoding.
 * Each of these routines decodes and returns one MCU's worth of
 * Huffman-compressed coefficients.
 * The coefficients are reordered from zigzag order into natural array order,
 * but are not dequantized.
 *
 * The i'th block of the MCU is stored into the block pointed to by
 * MCU_data[i].  WE ASSUME THIS AREA IS INITIALLY ZEROED BY THE CALLER.
 *
 * We return FALSE if data source requested suspension.  In that case no
 * changes have been made to permanent state.  (Exception: some output
 * coefficients may already have been assigned.  This is harmless for
 * spectral selection, since we'll just re-assign them on the next call.
 * Successive approximation AC refinement has to be more careful, however.)
 */

/*
 * MCU decoding for DC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr2 entropy = (phuff_entropy_ptr2) cinfo->entropy;
  int Al = cinfo->Al;
  register int s, r;
  int blkn, ci;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  savable_state3 state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0)
	  if (! process_restartp(cinfo))
	return FALSE;
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->pub.insufficient_data) {

	/* Load up working state */
	BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
	ASSIGN_STATE(state, entropy->saved);

	/* Outer loop handles each block in the MCU */

	for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
	  block = MCU_data[blkn];
	  ci = cinfo->MCU_membership[blkn];
	  compptr = cinfo->cur_comp_info[ci];
	  tbl = entropy->derived_tbls[compptr->dc_tbl_no];

	  /* Decode a single block's worth of coefficients */

	  /* Section F.2.2.1: decode the DC coefficient difference */
	  HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
	  if (s) {
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
	r = GET_BITS(s);
	s = HUFF_EXTEND(r, s);
	  }

	  /* Convert DC difference to actual value, update last_dc_val */
	  s += state.last_dc_val[ci];
	  state.last_dc_val[ci] = s;
	  /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
	  (*block)[0] = (JCOEF) (s << Al);
	}

	/* Completed MCU, so update state */
	BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
	ASSIGN_STATE(entropy->saved, state);
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}

/*
 * MCU decoding for AC initial scan (either spectral selection,
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr2 entropy = (phuff_entropy_ptr2) cinfo->entropy;
  int Se = cinfo->Se;
  int Al = cinfo->Al;
  register int s, k, r;
  unsigned int EOBRUN;
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0)
	  if (! process_restartp(cinfo))
	return FALSE;
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->pub.insufficient_data) {

	/* Load up working state.
	 * We can avoid loading/saving bitread state if in an EOB run.
	 */
	EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */

	/* There is always only one block per MCU */

	if (EOBRUN > 0)		/* if it's a band of zeroes... */
	  EOBRUN--;			/* ...process it now (we do nothing) */
	else {
	  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
	  block = MCU_data[0];
	  tbl = entropy->ac_derived_tbl;

	  for (k = cinfo->Ss; k <= Se; k++) {
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
	r = s >> 4;
	s &= 15;
	if (s) {
	  k += r;
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
	  r = GET_BITS(s);
	  s = HUFF_EXTEND(r, s);
	  /* Scale and output coefficient in natural (dezigzagged) order */
	  (*block)[jpeg_natural_order[k]] = (JCOEF) (s << Al);
	} else {
	  if (r == 15) {	/* ZRL */
	    k += 15;		/* skip 15 zeroes in band */
	  } else {		/* EOBr, run length is 2^r + appended bits */
	    EOBRUN = 1 << r;
	    if (r) {		/* EOBr, r > 0 */
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
	      r = GET_BITS(r);
	      EOBRUN += r;
	    }
	    EOBRUN--;		/* this band is processed at this moment */
	    break;		/* force end-of-band */
	  }
	}
	  }

	  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
	}

	/* Completed MCU, so update state */
	entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}

/*
 * MCU decoding for DC successive approximation refinement scan.
 * Note: we assume such scans can be multi-component, although the spec
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr2 entropy = (phuff_entropy_ptr2) cinfo->entropy;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0)
	  if (! process_restartp(cinfo))
	return FALSE;
  }

  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
	block = MCU_data[blkn];

	/* Encoded data is simply the next bit of the two's-complement DC value */
	CHECK_BIT_BUFFER(br_state, 1, return FALSE);
	if (GET_BITS(1))
	  (*block)[0] |= p1;
	/* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;
}

/*
 * MCU decoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
  phuff_entropy_ptr2 entropy = (phuff_entropy_ptr2) cinfo->entropy;
  int Se = cinfo->Se;
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
  int m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
  register int s, k, r;
  unsigned int EOBRUN;
  JBLOCKROW block;
  JCOEFPTR thiscoef;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
	if (entropy->restarts_to_go == 0)
	  if (! process_restartp(cinfo))
	return FALSE;
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->pub.insufficient_data) {

	/* Load up working state */
	BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
	EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */

	/* There is always only one block per MCU */
	block = MCU_data[0];
	tbl = entropy->ac_derived_tbl;

	/* If we are forced to suspend, we must undo the assignments to any newly
	 * nonzero coefficients in the block, because otherwise we'd get confused
	 * next time about which coefficients were already nonzero.
	 * But we need not undo addition of bits to already-nonzero coefficients;
	 * instead, we can test the current bit to see if we already did it.
	 */
	num_newnz = 0;

	/* initialize coefficient loop counter to start of band */
	k = cinfo->Ss;

	if (EOBRUN == 0) {
	  for (; k <= Se; k++) {
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
	r = s >> 4;
	s &= 15;
	if (s) {
	  if (s != 1)		/* size of new coef should always be 1 */
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
	  if (GET_BITS(1))
	    s = p1;		/* newly nonzero coef is positive */
	  else
	    s = m1;		/* newly nonzero coef is negative */
	} else {
	  if (r != 15) {
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
	    if (r) {
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
	      r = GET_BITS(r);
	      EOBRUN += r;
	    }
	    break;		/* rest of block is handled by EOB logic */
	  }
	  /* note s = 0 for processing ZRL */
	}
	/* Advance over already-nonzero coefs and r still-zero coefs,
	 * appending correction bits to the nonzeroes.  A correction bit is 1
	 * if the absolute value of the coefficient must be increased.
	 */
	do {
	  thiscoef = *block + jpeg_natural_order[k];
	  if (*thiscoef != 0) {
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
	    if (GET_BITS(1)) {
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
		if (*thiscoef >= 0)
		  *thiscoef += p1;
		else
		  *thiscoef += m1;
	      }
	    }
	  } else {
	    if (--r < 0)
	      break;		/* reached target zero coefficient */
	  }
	  k++;
	} while (k <= Se);
	if (s) {
	  int pos = jpeg_natural_order[k];
	  /* Output newly nonzero coefficient */
	  (*block)[pos] = (JCOEF) s;
	  /* Remember its position in case we have to suspend */
	  newnz_pos[num_newnz++] = pos;
	}
	  }
	}

	if (EOBRUN > 0) {
	  /* Scan any remaining coefficient positions after the end-of-band
	   * (the last newly nonzero coefficient, if any).  Append a correction
	   * bit to each already-nonzero coefficient.  A correction bit is 1
	   * if the absolute value of the coefficient must be increased.
	   */
	  for (; k <= Se; k++) {
	thiscoef = *block + jpeg_natural_order[k];
	if (*thiscoef != 0) {
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
	  if (GET_BITS(1)) {
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
	      if (*thiscoef >= 0)
		*thiscoef += p1;
	      else
		*thiscoef += m1;
	    }
	  }
	}
	  }
	  /* Count one block completed in EOB run */
	  EOBRUN--;
	}

	/* Completed MCU, so update state */
	BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
	entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;

  return TRUE;

undoit:
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
	(*block)[newnz_pos[--num_newnz]] = 0;

  return FALSE;
}

/*
 * Module initialization routine for progressive Huffman entropy decoding.
 */

GLOBAL(void)
jinit_phuff_decoder (j_decompress_ptr cinfo)
{
  phuff_entropy_ptr2 entropy;
  int *coef_bit_ptr;
  int ci, i;

  entropy = (phuff_entropy_ptr2)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(phuff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
  entropy->pub.start_pass = start_pass_phuff_decoder;

  /* Mark derived tables unallocated */
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
	entropy->derived_tbls[i] = NULL;
  }

  /* Create progression status table */
  cinfo->coef_bits = (int (*)[DCTSIZE2])
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				cinfo->num_components*DCTSIZE2*SIZEOF(int));
  coef_bit_ptr = & cinfo->coef_bits[0][0];
  for (ci = 0; ci < cinfo->num_components; ci++)
	for (i = 0; i < DCTSIZE2; i++)
	  *coef_bit_ptr++ = -1;
}

#endif /* D_PROGRESSIVE_SUPPORTED */

/*** End of inlined file: jdphuff.c ***/



/*** Start of inlined file: jdpostct.c ***/
#define JPEG_INTERNALS

/* Private buffer controller object */

typedef struct {
  struct jpeg_d_post_controller pub; /* public fields */

  /* Color quantization source buffer: this holds output data from
   * the upsample/color conversion step to be passed to the quantizer.
   * For two-pass color quantization, we need a full-image buffer;
   * for one-pass operation, a strip buffer is sufficient.
   */
  jvirt_sarray_ptr whole_image;	/* virtual array, or NULL if one-pass */
  JSAMPARRAY buffer;		/* strip buffer, or current strip of virtual */
  JDIMENSION strip_height;	/* buffer size in rows */
  /* for two-pass mode only: */
  JDIMENSION starting_row;	/* row # of first row in current strip */
  JDIMENSION next_row;		/* index of next row to fill/empty in strip */
} my_post_controller;

typedef my_post_controller * my_post_ptr;

/* Forward declarations */
METHODDEF(void) post_process_1pass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
#ifdef QUANT_2PASS_SUPPORTED
METHODDEF(void) post_process_prepass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
METHODDEF(void) post_process_2pass
	JPP((j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	     JDIMENSION in_row_groups_avail,
	     JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	     JDIMENSION out_rows_avail));
#endif

/*
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;

  switch (pass_mode) {
  case JBUF_PASS_THRU:
	if (cinfo->quantize_colors) {
	  /* Single-pass processing with color quantization. */
	  post->pub.post_process_data = post_process_1pass;
	  /* We could be doing buffered-image output before starting a 2-pass
	   * color quantization; in that case, jinit_d_post_controller did not
	   * allocate a strip buffer.  Use the virtual-array buffer as workspace.
	   */
	  if (post->buffer == NULL) {
	post->buffer = (*cinfo->mem->access_virt_sarray)
	  ((j_common_ptr) cinfo, post->whole_image,
	   (JDIMENSION) 0, post->strip_height, TRUE);
	  }
	} else {
	  /* For single-pass processing without color quantization,
	   * I have no work to do; just call the upsampler directly.
	   */
	  post->pub.post_process_data = cinfo->upsample->upsample;
	}
	break;
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_SAVE_AND_PASS:
	/* First pass of 2-pass quantization */
	if (post->whole_image == NULL)
	  ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
	post->pub.post_process_data = post_process_prepass;
	break;
  case JBUF_CRANK_DEST:
	/* Second pass of 2-pass quantization */
	if (post->whole_image == NULL)
	  ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
	post->pub.post_process_data = post_process_2pass;
	break;
#endif /* QUANT_2PASS_SUPPORTED */
  default:
	ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
	break;
  }
  post->starting_row = post->next_row = 0;
}

/*
 * Process some data in the one-pass (strip buffer) case.
 * This is used for color precision reduction as well as one-pass quantization.
 */

METHODDEF(void)
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
  if (max_rows > post->strip_height)
	max_rows = post->strip_height;
  num_rows = 0;
  (*cinfo->upsample->upsample) (cinfo,
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
  *out_row_ctr += num_rows;
}

#ifdef QUANT_2PASS_SUPPORTED

/*
 * Process some data in the first pass of 2-pass quantization.
 */

METHODDEF(void)
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY, JDIMENSION *out_row_ctr,
		      JDIMENSION)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
	post->buffer = (*cinfo->mem->access_virt_sarray)
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
  (*cinfo->upsample->upsample) (cinfo,
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
	num_rows = post->next_row - old_next_row;
	(*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
					 (JSAMPARRAY) NULL, (int) num_rows);
	*out_row_ctr += num_rows;
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
	post->starting_row += post->strip_height;
	post->next_row = 0;
  }
}

/*
 * Process some data in the second pass of 2-pass quantization.
 */

METHODDEF(void)
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE, JDIMENSION *,
		    JDIMENSION,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
  my_post_ptr post = (my_post_ptr) cinfo->post;
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
	post->buffer = (*cinfo->mem->access_virt_sarray)
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, FALSE);
  }

  /* Determine number of rows to emit. */
  num_rows = post->strip_height - post->next_row; /* available in strip */
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
  if (num_rows > max_rows)
	num_rows = max_rows;
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
  if (num_rows > max_rows)
	num_rows = max_rows;

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
		post->buffer + post->next_row, output_buf + *out_row_ctr,
		(int) num_rows);
  *out_row_ctr += num_rows;

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
  if (post->next_row >= post->strip_height) {
	post->starting_row += post->strip_height;
	post->next_row = 0;
  }
}

#endif /* QUANT_2PASS_SUPPORTED */

/*
 * Initialize postprocessing controller.
 */

GLOBAL(void)
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
  my_post_ptr post;

  post = (my_post_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
  post->pub.start_pass = start_pass_dpost;
  post->whole_image = NULL;	/* flag for no virtual arrays */
  post->buffer = NULL;		/* flag for no strip buffer */

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
	/* The buffer strip height is max_v_samp_factor, which is typically
	 * an efficient number of rows for upsampling to return.
	 * (In the presence of output rescaling, we might want to be smarter?)
	 */
	post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
	if (need_full_buffer) {
	  /* Two-pass color quantization: need full-image storage. */
	  /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
	  post->whole_image = (*cinfo->mem->request_virt_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
	 (JDIMENSION) jround_up((long) cinfo->output_height,
				(long) post->strip_height),
	 post->strip_height);
#else
	  ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
#endif /* QUANT_2PASS_SUPPORTED */
	} else {
	  /* One-pass color quantization: just make a strip buffer. */
	  post->buffer = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
	}
  }
}

/*** End of inlined file: jdpostct.c ***/

	#undef FIX

/*** Start of inlined file: jdsample.c ***/
#define JPEG_INTERNALS

/* Pointer to routine to upsample a single component */
typedef JMETHOD(void, upsample1_ptr,
		(j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr));

/* Private subobject */

typedef struct {
  struct jpeg_upsampler pub;	/* public fields */

  /* Color conversion buffer.  When using separate upsampling and color
   * conversion steps, this buffer holds one upsampled row group until it
   * has been color converted and output.
   * Note: we do not allocate any storage for component(s) which are full-size,
   * ie do not need rescaling.  The corresponding entry of color_buf[] is
   * simply set to point to the input data array, thereby avoiding copying.
   */
  JSAMPARRAY color_buf[MAX_COMPONENTS];

  /* Per-component upsampling method pointers */
  upsample1_ptr methods[MAX_COMPONENTS];

  int next_row_out;		/* counts rows emitted from color_buf */
  JDIMENSION rows_to_go;	/* counts rows remaining in image */

  /* Height of an input row group for each component. */
  int rowgroup_height[MAX_COMPONENTS];

  /* These arrays save pixel expansion factors so that int_expand need not
   * recompute them each time.  They are unused for other upsampling methods.
   */
  UINT8 h_expand[MAX_COMPONENTS];
  UINT8 v_expand[MAX_COMPONENTS];
} my_upsampler2;

typedef my_upsampler2 * my_upsample_ptr2;

/*
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_upsample (j_decompress_ptr cinfo)
{
  my_upsample_ptr2 upsample = (my_upsample_ptr2) cinfo->upsample;

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
}

/*
 * Control routine to do upsampling (and color conversion).
 *
 * In this version we upsample each component independently.
 * We upsample one row group into the conversion buffer, then apply
 * color conversion a row at a time.
 */

METHODDEF(void)
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
  my_upsample_ptr2 upsample = (my_upsample_ptr2) cinfo->upsample;
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
	for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	 ci++, compptr++) {
	  /* Invoke per-component upsample method.  Notice we pass a POINTER
	   * to color_buf[ci], so that fullsize_upsample can change it.
	   */
	  (*upsample->methods[ci]) (cinfo, compptr,
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
	upsample->color_buf + ci);
	}
	upsample->next_row_out = 0;
  }

  /* Color-convert and emit rows */

  /* How many we have in the buffer: */
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
  /* Not more than the distance to the end of the image.  Need this test
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go)
	num_rows = upsample->rows_to_go;
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
  if (num_rows > out_rows_avail)
	num_rows = out_rows_avail;

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
				     (JDIMENSION) upsample->next_row_out,
				     output_buf + *out_row_ctr,
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
  upsample->rows_to_go -= num_rows;
  upsample->next_row_out += num_rows;
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
	(*in_row_group_ctr)++;
}

/*
 * These are the routines invoked by sep_upsample to upsample pixel values
 * of a single component.  One row group is processed per call.
 */

/*
 * For full-size components, we just make color_buf[ci] point at the
 * input buffer, and thus avoid copying any data.  Note that this is
 * safe only because sep_upsample doesn't declare the input row group
 * "consumed" until we are done color converting and emitting it.
 */

METHODDEF(void)
fullsize_upsample (j_decompress_ptr, jpeg_component_info *,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = input_data;
}

/*
 * This is a no-op version used for "uninteresting" components.
 * These components will not be referenced by color conversion.
 */

METHODDEF(void)
noop_upsample (j_decompress_ptr, jpeg_component_info *,
	       JSAMPARRAY, JSAMPARRAY * output_data_ptr)
{
  *output_data_ptr = NULL;	/* safety check */
}

/*
 * This version handles any integral sampling ratios.
 * This is not used for typical JPEG files, so it need not be fast.
 * Nor, for that matter, is it particularly accurate: the algorithm is
 * simple replication of the input pixel onto the corresponding output
 * pixels.  The hi-falutin sampling literature refers to this as a
 * "box filter".  A box filter tends to introduce visible artifacts,
 * so if you are actually going to use 3:1 or 4:1 sampling ratios
 * you would be well advised to improve this code.
 */

METHODDEF(void)
int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  my_upsample_ptr2 upsample = (my_upsample_ptr2) cinfo->upsample;
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  register int h;
  JSAMPROW outend;
  int h_expand, v_expand;
  int inrow, outrow;

  h_expand = upsample->h_expand[compptr->component_index];
  v_expand = upsample->v_expand[compptr->component_index];

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
	/* Generate one output row with proper horizontal expansion */
	inptr = input_data[inrow];
	outptr = output_data[outrow];
	outend = outptr + cinfo->output_width;
	while (outptr < outend) {
	  invalue = *inptr++;	/* don't need GETJSAMPLE() here */
	  for (h = h_expand; h > 0; h--) {
	*outptr++ = invalue;
	  }
	}
	/* Generate any additional output rows by duplicating the first one */
	if (v_expand > 1) {
	  jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
			v_expand-1, cinfo->output_width);
	}
	inrow++;
	outrow += v_expand;
  }
}

/*
 * Fast processing for the common case of 2:1 horizontal and 1:1 vertical.
 * It's still a box filter.
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info *,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow;

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
	inptr = input_data[inrow];
	outptr = output_data[inrow];
	outend = outptr + cinfo->output_width;
	while (outptr < outend) {
	  invalue = *inptr++;	/* don't need GETJSAMPLE() here */
	  *outptr++ = invalue;
	  *outptr++ = invalue;
	}
  }
}

/*
 * Fast processing for the common case of 2:1 horizontal and 2:1 vertical.
 * It's still a box filter.
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info *,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
	inptr = input_data[inrow];
	outptr = output_data[outrow];
	outend = outptr + cinfo->output_width;
	while (outptr < outend) {
	  invalue = *inptr++;	/* don't need GETJSAMPLE() here */
	  *outptr++ = invalue;
	  *outptr++ = invalue;
	}
	jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
		      1, cinfo->output_width);
	inrow++;
	outrow += 2;
  }
}

/*
 * Fancy processing for the common case of 2:1 horizontal and 1:1 vertical.
 *
 * The upsampling algorithm is linear interpolation between pixel centers,
 * also known as a "triangle filter".  This is a good compromise between
 * speed and visual quality.  The centers of the output pixels are 1/4 and 3/4
 * of the way between input pixel centers.
 *
 * A note about the "bias" calculations: when rounding fractional values to
 * integer, we do not want to always round 0.5 up to the next integer.
 * If we did that, we'd introduce a noticeable bias towards larger values.
 * Instead, this code is arranged so that 0.5 will be rounded up or down at
 * alternate pixel locations (a simple ordered dither pattern).
 */

METHODDEF(void)
h2v1_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr, outptr;
  register int invalue;
  register JDIMENSION colctr;
  int inrow;

  for (inrow = 0; inrow < cinfo->max_v_samp_factor; inrow++) {
	inptr = input_data[inrow];
	outptr = output_data[inrow];
	/* Special case for first column */
	invalue = GETJSAMPLE(*inptr++);
	*outptr++ = (JSAMPLE) invalue;
	*outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(*inptr) + 2) >> 2);

	for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
	  /* General case: 3/4 * nearer pixel + 1/4 * further pixel */
	  invalue = GETJSAMPLE(*inptr++) * 3;
	  *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(inptr[-2]) + 1) >> 2);
	  *outptr++ = (JSAMPLE) ((invalue + GETJSAMPLE(*inptr) + 2) >> 2);
	}

	/* Special case for last column */
	invalue = GETJSAMPLE(*inptr);
	*outptr++ = (JSAMPLE) ((invalue * 3 + GETJSAMPLE(inptr[-1]) + 1) >> 2);
	*outptr++ = (JSAMPLE) invalue;
  }
}

/*
 * Fancy processing for the common case of 2:1 horizontal and 2:1 vertical.
 * Again a triangle filter; see comments for h2v1 case, above.
 *
 * It is OK for us to reference the adjacent input rows because we demanded
 * context from the main buffer controller (see initialization code).
 */

METHODDEF(void)
h2v2_fancy_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		     JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
  JSAMPARRAY output_data = *output_data_ptr;
  register JSAMPROW inptr0, inptr1, outptr;
#if BITS_IN_JSAMPLE == 8
  register int thiscolsum, lastcolsum, nextcolsum;
#else
  register INT32 thiscolsum, lastcolsum, nextcolsum;
#endif
  register JDIMENSION colctr;
  int inrow, outrow, v;

  inrow = outrow = 0;
  while (outrow < cinfo->max_v_samp_factor) {
	for (v = 0; v < 2; v++) {
	  /* inptr0 points to nearest input row, inptr1 points to next nearest */
	  inptr0 = input_data[inrow];
	  if (v == 0)		/* next nearest is row above */
	inptr1 = input_data[inrow-1];
	  else			/* next nearest is row below */
	inptr1 = input_data[inrow+1];
	  outptr = output_data[outrow++];

	  /* Special case for first column */
	  thiscolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
	  nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
	  *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 8) >> 4);
	  *outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
	  lastcolsum = thiscolsum; thiscolsum = nextcolsum;

	  for (colctr = compptr->downsampled_width - 2; colctr > 0; colctr--) {
	/* General case: 3/4 * nearer pixel + 1/4 * further pixel in each */
	/* dimension, thus 9/16, 3/16, 3/16, 1/16 overall */
	nextcolsum = GETJSAMPLE(*inptr0++) * 3 + GETJSAMPLE(*inptr1++);
	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
	*outptr++ = (JSAMPLE) ((thiscolsum * 3 + nextcolsum + 7) >> 4);
	lastcolsum = thiscolsum; thiscolsum = nextcolsum;
	  }

	  /* Special case for last column */
	  *outptr++ = (JSAMPLE) ((thiscolsum * 3 + lastcolsum + 8) >> 4);
	  *outptr++ = (JSAMPLE) ((thiscolsum * 4 + 7) >> 4);
	}
	inrow++;
  }
}

/*
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
  my_upsample_ptr2 upsample;
  int ci;
  jpeg_component_info * compptr;
  boolean need_buffer, do_fancy;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr2)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_upsampler2));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
  upsample->pub.start_pass = start_pass_upsample;
  upsample->pub.upsample = sep_upsample;
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
	ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);

  /* jdmainct.c doesn't support context rows when min_DCT_scaled_size = 1,
   * so don't ask for it.
   */
  do_fancy = cinfo->do_fancy_upsampling && cinfo->min_DCT_scaled_size > 1;

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
	   ci++, compptr++) {
	/* Compute size of an "input group" after IDCT scaling.  This many samples
	 * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
	 */
	h_in_group = (compptr->h_samp_factor * compptr->DCT_scaled_size) /
		 cinfo->min_DCT_scaled_size;
	v_in_group = (compptr->v_samp_factor * compptr->DCT_scaled_size) /
		 cinfo->min_DCT_scaled_size;
	h_out_group = cinfo->max_h_samp_factor;
	v_out_group = cinfo->max_v_samp_factor;
	upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
	need_buffer = TRUE;
	if (! compptr->component_needed) {
	  /* Don't bother to upsample an uninteresting component. */
	  upsample->methods[ci] = noop_upsample;
	  need_buffer = FALSE;
	} else if (h_in_group == h_out_group && v_in_group == v_out_group) {
	  /* Fullsize components can be processed without any work. */
	  upsample->methods[ci] = fullsize_upsample;
	  need_buffer = FALSE;
	} else if (h_in_group * 2 == h_out_group &&
	       v_in_group == v_out_group) {
	  /* Special cases for 2h1v upsampling */
	  if (do_fancy && compptr->downsampled_width > 2)
	upsample->methods[ci] = h2v1_fancy_upsample;
	  else
	upsample->methods[ci] = h2v1_upsample;
	} else if (h_in_group * 2 == h_out_group &&
	       v_in_group * 2 == v_out_group) {
	  /* Special cases for 2h2v upsampling */
	  if (do_fancy && compptr->downsampled_width > 2) {
	upsample->methods[ci] = h2v2_fancy_upsample;
	upsample->pub.need_context_rows = TRUE;
	  } else
	upsample->methods[ci] = h2v2_upsample;
	} else if ((h_out_group % h_in_group) == 0 &&
	       (v_out_group % v_in_group) == 0) {
	  /* Generic integral-factors upsampling method */
	  upsample->methods[ci] = int_upsample;
	  upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
	  upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
	} else
	  ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
	if (need_buffer) {
	  upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) jround_up((long) cinfo->output_width,
				(long) cinfo->max_h_samp_factor),
	 (JDIMENSION) cinfo->max_v_samp_factor);
	}
  }
}

/*** End of inlined file: jdsample.c ***/



/*** Start of inlined file: jdtrans.c ***/
#define JPEG_INTERNALS

/* Forward declarations */
LOCAL(void) transdecode_master_selection JPP((j_decompress_ptr cinfo));

/*
 * Read the coefficient arrays from a JPEG file.
 * jpeg_read_header must be completed before calling this.
 *
 * The entire image is read into a set of virtual coefficient-block arrays,
 * one per component.  The return value is a pointer to the array of
 * virtual-array descriptors.  These can be manipulated directly via the
 * JPEG memory manager, or handed off to jpeg_write_coefficients().
 * To release the memory occupied by the virtual arrays, call
 * jpeg_finish_decompress() when done with the data.
 *
 * An alternative usage is to simply obtain access to the coefficient arrays
 * during a buffered-image-mode decompression operation.  This is allowed
 * after any jpeg_finish_output() call.  The arrays can be accessed until
 * jpeg_finish_decompress() is called.  (Note that any call to the library
 * may reposition the arrays, so don't rely on access_virt_barray() results
 * to stay valid across library calls.)
 *
 * Returns NULL if suspended.  This case need be checked only if
 * a suspending data source is used.
 */

GLOBAL(jvirt_barray_ptr *)
jpeg_read_coefficients (j_decompress_ptr cinfo)
{
  if (cinfo->global_state == DSTATE_READY) {
	/* First call: initialize active modules */
	transdecode_master_selection(cinfo);
	cinfo->global_state = DSTATE_RDCOEFS;
  }
  if (cinfo->global_state == DSTATE_RDCOEFS) {
	/* Absorb whole file into the coef buffer */
	for (;;) {
	  int retcode;
	  /* Call progress monitor hook if present */
	  if (cinfo->progress != NULL)
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
	  /* Absorb some more input */
	  retcode = (*cinfo->inputctl->consume_input) (cinfo);
	  if (retcode == JPEG_SUSPENDED)
	return NULL;
	  if (retcode == JPEG_REACHED_EOI)
	break;
	  /* Advance progress counter if appropriate */
	  if (cinfo->progress != NULL &&
	  (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
	if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
	  /* startup underestimated number of scans; ratchet up one scan */
	  cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
	}
	  }
	}
	/* Set state so that jpeg_finish_decompress does the right thing */
	cinfo->global_state = DSTATE_STOPPING;
  }
  /* At this point we should be in state DSTATE_STOPPING if being used
   * standalone, or in state DSTATE_BUFIMAGE if being invoked to get access
   * to the coefficients during a full buffered-image-mode decompression.
   */
  if ((cinfo->global_state == DSTATE_STOPPING ||
	   cinfo->global_state == DSTATE_BUFIMAGE) && cinfo->buffered_image) {
	return cinfo->coef->coef_arrays;
  }
  /* Oops, improper usage */
  ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
  return NULL;			/* keep compiler happy */
}

/*
 * Master selection of decompression modules for transcoding.
 * This substitutes for jdmaster.c's initialization of the full decompressor.
 */

LOCAL(void)
transdecode_master_selection (j_decompress_ptr cinfo)
{
  /* This is effectively a buffered-image operation. */
  cinfo->buffered_image = TRUE;

  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code) {
	ERREXIT(cinfo, JERR_ARITH_NOTIMPL);
  } else {
	if (cinfo->progressive_mode) {
#ifdef D_PROGRESSIVE_SUPPORTED
	  jinit_phuff_decoder(cinfo);
#else
	  ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
	} else
	  jinit_huff_decoder(cinfo);
  }

  /* Always get a full-image coefficient buffer. */
  jinit_d_coef_controller(cinfo, TRUE);

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);

  /* Initialize progress monitoring. */
  if (cinfo->progress != NULL) {
	int nscans;
	/* Estimate number of scans to set pass_limit. */
	if (cinfo->progressive_mode) {
	  /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
	  nscans = 2 + 3 * cinfo->num_components;
	} else if (cinfo->inputctl->has_multiple_scans) {
	  /* For a nonprogressive multiscan file, estimate 1 scan per component. */
	  nscans = cinfo->num_components;
	} else {
	  nscans = 1;
	}
	cinfo->progress->pass_counter = 0L;
	cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
	cinfo->progress->completed_passes = 0;
	cinfo->progress->total_passes = 1;
  }
}

/*** End of inlined file: jdtrans.c ***/


/*** Start of inlined file: jfdctflt.c ***/
#define JPEG_INTERNALS

#ifdef DCT_FLOAT_SUPPORTED

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif

/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_float (FAST_FLOAT * data)
{
  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
  FAST_FLOAT z1, z2, z3, z4, z5, z11, z13;
  FAST_FLOAT *dataptr;
  int ctr;

  /* Pass 1: process rows. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
	tmp0 = dataptr[0] + dataptr[7];
	tmp7 = dataptr[0] - dataptr[7];
	tmp1 = dataptr[1] + dataptr[6];
	tmp6 = dataptr[1] - dataptr[6];
	tmp2 = dataptr[2] + dataptr[5];
	tmp5 = dataptr[2] - dataptr[5];
	tmp3 = dataptr[3] + dataptr[4];
	tmp4 = dataptr[3] - dataptr[4];

	/* Even part */

	tmp10 = tmp0 + tmp3;	/* phase 2 */
	tmp13 = tmp0 - tmp3;
	tmp11 = tmp1 + tmp2;
	tmp12 = tmp1 - tmp2;

	dataptr[0] = tmp10 + tmp11; /* phase 3 */
	dataptr[4] = tmp10 - tmp11;

	z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
	dataptr[2] = tmp13 + z1;	/* phase 5 */
	dataptr[6] = tmp13 - z1;

	/* Odd part */

	tmp10 = tmp4 + tmp5;	/* phase 2 */
	tmp11 = tmp5 + tmp6;
	tmp12 = tmp6 + tmp7;

	/* The rotator is modified from fig 4-8 to avoid extra negations. */
	z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
	z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
	z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
	z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */

	z11 = tmp7 + z3;		/* phase 5 */
	z13 = tmp7 - z3;

	dataptr[5] = z13 + z2;	/* phase 6 */
	dataptr[3] = z13 - z2;
	dataptr[1] = z11 + z4;
	dataptr[7] = z11 - z4;

	dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
	tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
	tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
	tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
	tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
	tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
	tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
	tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
	tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];

	/* Even part */

	tmp10 = tmp0 + tmp3;	/* phase 2 */
	tmp13 = tmp0 - tmp3;
	tmp11 = tmp1 + tmp2;
	tmp12 = tmp1 - tmp2;

	dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
	dataptr[DCTSIZE*4] = tmp10 - tmp11;

	z1 = (tmp12 + tmp13) * ((FAST_FLOAT) 0.707106781); /* c4 */
	dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
	dataptr[DCTSIZE*6] = tmp13 - z1;

	/* Odd part */

	tmp10 = tmp4 + tmp5;	/* phase 2 */
	tmp11 = tmp5 + tmp6;
	tmp12 = tmp6 + tmp7;

	/* The rotator is modified from fig 4-8 to avoid extra negations. */
	z5 = (tmp10 - tmp12) * ((FAST_FLOAT) 0.382683433); /* c6 */
	z2 = ((FAST_FLOAT) 0.541196100) * tmp10 + z5; /* c2-c6 */
	z4 = ((FAST_FLOAT) 1.306562965) * tmp12 + z5; /* c2+c6 */
	z3 = tmp11 * ((FAST_FLOAT) 0.707106781); /* c4 */

	z11 = tmp7 + z3;		/* phase 5 */
	z13 = tmp7 - z3;

	dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
	dataptr[DCTSIZE*3] = z13 - z2;
	dataptr[DCTSIZE*1] = z11 + z4;
	dataptr[DCTSIZE*7] = z11 - z4;

	dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_FLOAT_SUPPORTED */

/*** End of inlined file: jfdctflt.c ***/


/*** Start of inlined file: jfdctint.c ***/
#define JPEG_INTERNALS

#ifdef DCT_ISLOW_SUPPORTED

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif

/*
 * The poop on this scaling stuff is as follows:
 *
 * Each 1-D DCT step produces outputs which are a factor of sqrt(N)
 * larger than the true DCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D DCT,
 * because the y0 and y4 outputs need not be divided by sqrt(N).
 * In the IJG code, this factor of 8 is removed by the quantization step
 * (in jcdctmgr.c), NOT in this module.
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (For 12-bit sample data, the intermediate
 * array is INT32 anyway.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif

/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif

/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_islow (DCTELEM * data)
{
  INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;
  DCTELEM *dataptr;
  int ctr;
  SHIFT_TEMPS

  /* Pass 1: process rows. */
  /* Note results are scaled up by sqrt(8) compared to a true DCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
	tmp0 = dataptr[0] + dataptr[7];
	tmp7 = dataptr[0] - dataptr[7];
	tmp1 = dataptr[1] + dataptr[6];
	tmp6 = dataptr[1] - dataptr[6];
	tmp2 = dataptr[2] + dataptr[5];
	tmp5 = dataptr[2] - dataptr[5];
	tmp3 = dataptr[3] + dataptr[4];
	tmp4 = dataptr[3] - dataptr[4];

	/* Even part per LL&M figure 1 --- note that published figure is faulty;
	 * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
	 */

	tmp10 = tmp0 + tmp3;
	tmp13 = tmp0 - tmp3;
	tmp11 = tmp1 + tmp2;
	tmp12 = tmp1 - tmp2;

	dataptr[0] = (DCTELEM) ((tmp10 + tmp11) << PASS1_BITS);
	dataptr[4] = (DCTELEM) ((tmp10 - tmp11) << PASS1_BITS);

	z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
	dataptr[2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
				   CONST_BITS-PASS1_BITS);
	dataptr[6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
				   CONST_BITS-PASS1_BITS);

	/* Odd part per figure 8 --- note paper omits factor of sqrt(2).
	 * cK represents cos(K*pi/16).
	 * i0..i3 in the paper are tmp4..tmp7 here.
	 */

	z1 = tmp4 + tmp7;
	z2 = tmp5 + tmp6;
	z3 = tmp4 + tmp6;
	z4 = tmp5 + tmp7;
	z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */

	tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
	tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
	tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
	tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
	z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
	z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
	z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
	z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */

	z3 += z5;
	z4 += z5;

	dataptr[7] = (DCTELEM) DESCALE(tmp4 + z1 + z3, CONST_BITS-PASS1_BITS);
	dataptr[5] = (DCTELEM) DESCALE(tmp5 + z2 + z4, CONST_BITS-PASS1_BITS);
	dataptr[3] = (DCTELEM) DESCALE(tmp6 + z2 + z3, CONST_BITS-PASS1_BITS);
	dataptr[1] = (DCTELEM) DESCALE(tmp7 + z1 + z4, CONST_BITS-PASS1_BITS);

	dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns.
   * We remove the PASS1_BITS scaling, but leave the results scaled up
   * by an overall factor of 8.
   */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
	tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
	tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
	tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
	tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
	tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
	tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
	tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
	tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];

	/* Even part per LL&M figure 1 --- note that published figure is faulty;
	 * rotator "sqrt(2)*c1" should be "sqrt(2)*c6".
	 */

	tmp10 = tmp0 + tmp3;
	tmp13 = tmp0 - tmp3;
	tmp11 = tmp1 + tmp2;
	tmp12 = tmp1 - tmp2;

	dataptr[DCTSIZE*0] = (DCTELEM) DESCALE(tmp10 + tmp11, PASS1_BITS);
	dataptr[DCTSIZE*4] = (DCTELEM) DESCALE(tmp10 - tmp11, PASS1_BITS);

	z1 = MULTIPLY(tmp12 + tmp13, FIX_0_541196100);
	dataptr[DCTSIZE*2] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp13, FIX_0_765366865),
					   CONST_BITS+PASS1_BITS);
	dataptr[DCTSIZE*6] = (DCTELEM) DESCALE(z1 + MULTIPLY(tmp12, - FIX_1_847759065),
					   CONST_BITS+PASS1_BITS);

	/* Odd part per figure 8 --- note paper omits factor of sqrt(2).
	 * cK represents cos(K*pi/16).
	 * i0..i3 in the paper are tmp4..tmp7 here.
	 */

	z1 = tmp4 + tmp7;
	z2 = tmp5 + tmp6;
	z3 = tmp4 + tmp6;
	z4 = tmp5 + tmp7;
	z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */

	tmp4 = MULTIPLY(tmp4, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
	tmp5 = MULTIPLY(tmp5, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
	tmp6 = MULTIPLY(tmp6, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
	tmp7 = MULTIPLY(tmp7, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
	z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
	z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
	z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
	z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */

	z3 += z5;
	z4 += z5;

	dataptr[DCTSIZE*7] = (DCTELEM) DESCALE(tmp4 + z1 + z3,
					   CONST_BITS+PASS1_BITS);
	dataptr[DCTSIZE*5] = (DCTELEM) DESCALE(tmp5 + z2 + z4,
					   CONST_BITS+PASS1_BITS);
	dataptr[DCTSIZE*3] = (DCTELEM) DESCALE(tmp6 + z2 + z3,
					   CONST_BITS+PASS1_BITS);
	dataptr[DCTSIZE*1] = (DCTELEM) DESCALE(tmp7 + z1 + z4,
					   CONST_BITS+PASS1_BITS);

	dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_ISLOW_SUPPORTED */

/*** End of inlined file: jfdctint.c ***/

	#undef CONST_BITS
	#undef MULTIPLY
	#undef FIX_0_541196100

/*** Start of inlined file: jfdctfst.c ***/
#define JPEG_INTERNALS

#ifdef DCT_IFAST_SUPPORTED

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif

/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jfdctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * Again to save a few shifts, the intermediate results between pass 1 and
 * pass 2 are not upscaled, but are represented only to integral precision.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#define CONST_BITS  8

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 8
#define FIX_0_382683433  ((INT32)   98)		/* FIX(0.382683433) */
#define FIX_0_541196100  ((INT32)  139)		/* FIX(0.541196100) */
#define FIX_0_707106781  ((INT32)  181)		/* FIX(0.707106781) */
#define FIX_1_306562965  ((INT32)  334)		/* FIX(1.306562965) */
#else
#define FIX_0_382683433  FIX(0.382683433)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_707106781  FIX(0.707106781)
#define FIX_1_306562965  FIX(1.306562965)
#endif

/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif

/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))

/*
 * Perform the forward DCT on one block of samples.
 */

GLOBAL(void)
jpeg_fdct_ifast (DCTELEM * data)
{
  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  DCTELEM tmp10, tmp11, tmp12, tmp13;
  DCTELEM z1, z2, z3, z4, z5, z11, z13;
  DCTELEM *dataptr;
  int ctr;
  SHIFT_TEMPS

  /* Pass 1: process rows. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
	tmp0 = dataptr[0] + dataptr[7];
	tmp7 = dataptr[0] - dataptr[7];
	tmp1 = dataptr[1] + dataptr[6];
	tmp6 = dataptr[1] - dataptr[6];
	tmp2 = dataptr[2] + dataptr[5];
	tmp5 = dataptr[2] - dataptr[5];
	tmp3 = dataptr[3] + dataptr[4];
	tmp4 = dataptr[3] - dataptr[4];

	/* Even part */

	tmp10 = tmp0 + tmp3;	/* phase 2 */
	tmp13 = tmp0 - tmp3;
	tmp11 = tmp1 + tmp2;
	tmp12 = tmp1 - tmp2;

	dataptr[0] = tmp10 + tmp11; /* phase 3 */
	dataptr[4] = tmp10 - tmp11;

	z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
	dataptr[2] = tmp13 + z1;	/* phase 5 */
	dataptr[6] = tmp13 - z1;

	/* Odd part */

	tmp10 = tmp4 + tmp5;	/* phase 2 */
	tmp11 = tmp5 + tmp6;
	tmp12 = tmp6 + tmp7;

	/* The rotator is modified from fig 4-8 to avoid extra negations. */
	z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
	z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
	z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
	z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */

	z11 = tmp7 + z3;		/* phase 5 */
	z13 = tmp7 - z3;

	dataptr[5] = z13 + z2;	/* phase 6 */
	dataptr[3] = z13 - z2;
	dataptr[1] = z11 + z4;
	dataptr[7] = z11 - z4;

	dataptr += DCTSIZE;		/* advance pointer to next row */
  }

  /* Pass 2: process columns. */

  dataptr = data;
  for (ctr = DCTSIZE-1; ctr >= 0; ctr--) {
	tmp0 = dataptr[DCTSIZE*0] + dataptr[DCTSIZE*7];
	tmp7 = dataptr[DCTSIZE*0] - dataptr[DCTSIZE*7];
	tmp1 = dataptr[DCTSIZE*1] + dataptr[DCTSIZE*6];
	tmp6 = dataptr[DCTSIZE*1] - dataptr[DCTSIZE*6];
	tmp2 = dataptr[DCTSIZE*2] + dataptr[DCTSIZE*5];
	tmp5 = dataptr[DCTSIZE*2] - dataptr[DCTSIZE*5];
	tmp3 = dataptr[DCTSIZE*3] + dataptr[DCTSIZE*4];
	tmp4 = dataptr[DCTSIZE*3] - dataptr[DCTSIZE*4];

	/* Even part */

	tmp10 = tmp0 + tmp3;	/* phase 2 */
	tmp13 = tmp0 - tmp3;
	tmp11 = tmp1 + tmp2;
	tmp12 = tmp1 - tmp2;

	dataptr[DCTSIZE*0] = tmp10 + tmp11; /* phase 3 */
	dataptr[DCTSIZE*4] = tmp10 - tmp11;

	z1 = MULTIPLY(tmp12 + tmp13, FIX_0_707106781); /* c4 */
	dataptr[DCTSIZE*2] = tmp13 + z1; /* phase 5 */
	dataptr[DCTSIZE*6] = tmp13 - z1;

	/* Odd part */

	tmp10 = tmp4 + tmp5;	/* phase 2 */
	tmp11 = tmp5 + tmp6;
	tmp12 = tmp6 + tmp7;

	/* The rotator is modified from fig 4-8 to avoid extra negations. */
	z5 = MULTIPLY(tmp10 - tmp12, FIX_0_382683433); /* c6 */
	z2 = MULTIPLY(tmp10, FIX_0_541196100) + z5; /* c2-c6 */
	z4 = MULTIPLY(tmp12, FIX_1_306562965) + z5; /* c2+c6 */
	z3 = MULTIPLY(tmp11, FIX_0_707106781); /* c4 */

	z11 = tmp7 + z3;		/* phase 5 */
	z13 = tmp7 - z3;

	dataptr[DCTSIZE*5] = z13 + z2; /* phase 6 */
	dataptr[DCTSIZE*3] = z13 - z2;
	dataptr[DCTSIZE*1] = z11 + z4;
	dataptr[DCTSIZE*7] = z11 - z4;

	dataptr++;			/* advance pointer to next column */
  }
}

#endif /* DCT_IFAST_SUPPORTED */

/*** End of inlined file: jfdctfst.c ***/


	#undef FIX_0_541196100

/*** Start of inlined file: jidctflt.c ***/
#define JPEG_INTERNALS

#ifdef DCT_FLOAT_SUPPORTED

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif

/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a float result.
 */

#define DEQUANTIZE(coef,quantval)  (((FAST_FLOAT) (coef)) * (quantval))

/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  FAST_FLOAT tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  FAST_FLOAT tmp10, tmp11, tmp12, tmp13;
  FAST_FLOAT z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  FLOAT_MULT_TYPE * quantptr;
  FAST_FLOAT * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
	/* Due to quantization, we will usually find that many of the input
	 * coefficients are zero, especially the AC terms.  We can exploit this
	 * by short-circuiting the IDCT calculation for any column in which all
	 * the AC terms are zero.  In that case each output is equal to the
	 * DC coefficient (with scale factor as needed).
	 * With typical images and quantization tables, half or more of the
	 * column DCT calculations can be simplified this way.
	 */

	if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
	inptr[DCTSIZE*7] == 0) {
	  /* AC terms all zero */
	  FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);

	  wsptr[DCTSIZE*0] = dcval;
	  wsptr[DCTSIZE*1] = dcval;
	  wsptr[DCTSIZE*2] = dcval;
	  wsptr[DCTSIZE*3] = dcval;
	  wsptr[DCTSIZE*4] = dcval;
	  wsptr[DCTSIZE*5] = dcval;
	  wsptr[DCTSIZE*6] = dcval;
	  wsptr[DCTSIZE*7] = dcval;

	  inptr++;			/* advance pointers to next column */
	  quantptr++;
	  wsptr++;
	  continue;
	}

	/* Even part */

	tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
	tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
	tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
	tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

	tmp10 = tmp0 + tmp2;	/* phase 3 */
	tmp11 = tmp0 - tmp2;

	tmp13 = tmp1 + tmp3;	/* phases 5-3 */
	tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */

	tmp0 = tmp10 + tmp13;	/* phase 2 */
	tmp3 = tmp10 - tmp13;
	tmp1 = tmp11 + tmp12;
	tmp2 = tmp11 - tmp12;

	/* Odd part */

	tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
	tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
	tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
	tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

	z13 = tmp6 + tmp5;		/* phase 6 */
	z10 = tmp6 - tmp5;
	z11 = tmp4 + tmp7;
	z12 = tmp4 - tmp7;

	tmp7 = z11 + z13;		/* phase 5 */
	tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */

	z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
	tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
	tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

	tmp6 = tmp12 - tmp7;	/* phase 2 */
	tmp5 = tmp11 - tmp6;
	tmp4 = tmp10 + tmp5;

	wsptr[DCTSIZE*0] = tmp0 + tmp7;
	wsptr[DCTSIZE*7] = tmp0 - tmp7;
	wsptr[DCTSIZE*1] = tmp1 + tmp6;
	wsptr[DCTSIZE*6] = tmp1 - tmp6;
	wsptr[DCTSIZE*2] = tmp2 + tmp5;
	wsptr[DCTSIZE*5] = tmp2 - tmp5;
	wsptr[DCTSIZE*4] = tmp3 + tmp4;
	wsptr[DCTSIZE*3] = tmp3 - tmp4;

	inptr++;			/* advance pointers to next column */
	quantptr++;
	wsptr++;
  }

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
	outptr = output_buf[ctr] + output_col;
	/* Rows of zeroes can be exploited in the same way as we did with columns.
	 * However, the column calculation has created many nonzero AC terms, so
	 * the simplification applies less often (typically 5% to 10% of the time).
	 * And testing floats for zero is relatively expensive, so we don't bother.
	 */

	/* Even part */

	tmp10 = wsptr[0] + wsptr[4];
	tmp11 = wsptr[0] - wsptr[4];

	tmp13 = wsptr[2] + wsptr[6];
	tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;

	tmp0 = tmp10 + tmp13;
	tmp3 = tmp10 - tmp13;
	tmp1 = tmp11 + tmp12;
	tmp2 = tmp11 - tmp12;

	/* Odd part */

	z13 = wsptr[5] + wsptr[3];
	z10 = wsptr[5] - wsptr[3];
	z11 = wsptr[1] + wsptr[7];
	z12 = wsptr[1] - wsptr[7];

	tmp7 = z11 + z13;
	tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);

	z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
	tmp10 = ((FAST_FLOAT) 1.082392200) * z12 - z5; /* 2*(c2-c6) */
	tmp12 = ((FAST_FLOAT) -2.613125930) * z10 + z5; /* -2*(c2+c6) */

	tmp6 = tmp12 - tmp7;
	tmp5 = tmp11 - tmp6;
	tmp4 = tmp10 + tmp5;

	/* Final output stage: scale down by a factor of 8 and range-limit */

	outptr[0] = range_limit[(int) DESCALE((INT32) (tmp0 + tmp7), 3)
			    & RANGE_MASK];
	outptr[7] = range_limit[(int) DESCALE((INT32) (tmp0 - tmp7), 3)
			    & RANGE_MASK];
	outptr[1] = range_limit[(int) DESCALE((INT32) (tmp1 + tmp6), 3)
			    & RANGE_MASK];
	outptr[6] = range_limit[(int) DESCALE((INT32) (tmp1 - tmp6), 3)
			    & RANGE_MASK];
	outptr[2] = range_limit[(int) DESCALE((INT32) (tmp2 + tmp5), 3)
			    & RANGE_MASK];
	outptr[5] = range_limit[(int) DESCALE((INT32) (tmp2 - tmp5), 3)
			    & RANGE_MASK];
	outptr[4] = range_limit[(int) DESCALE((INT32) (tmp3 + tmp4), 3)
			    & RANGE_MASK];
	outptr[3] = range_limit[(int) DESCALE((INT32) (tmp3 - tmp4), 3)
			    & RANGE_MASK];

	wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_FLOAT_SUPPORTED */

/*** End of inlined file: jidctflt.c ***/


	#undef CONST_BITS
	#undef FIX_1_847759065
	#undef MULTIPLY
	#undef DEQUANTIZE
	#undef DESCALE

/*** Start of inlined file: jidctfst.c ***/
#define JPEG_INTERNALS

#ifdef DCT_IFAST_SUPPORTED

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif

/* Scaling decisions are generally the same as in the LL&M algorithm;
 * see jidctint.c for more details.  However, we choose to descale
 * (right shift) multiplication products as soon as they are formed,
 * rather than carrying additional fractional bits into subsequent additions.
 * This compromises accuracy slightly, but it lets us save a few shifts.
 * More importantly, 16-bit arithmetic is then adequate (for 8-bit samples)
 * everywhere except in the multiplications proper; this saves a good deal
 * of work on 16-bit-int machines.
 *
 * The dequantized coefficients are not integers because the AA&N scaling
 * factors have been incorporated.  We represent them scaled up by PASS1_BITS,
 * so that the first and second IDCT rounds have the same input scaling.
 * For 8-bit JSAMPLEs, we choose IFAST_SCALE_BITS = PASS1_BITS so as to
 * avoid a descaling shift; this compromises accuracy rather drastically
 * for small quantization table entries, but it saves a lot of shifts.
 * For 12-bit JSAMPLEs, there's no hope of using 16x16 multiplies anyway,
 * so we use a much larger scaling factor to preserve accuracy.
 *
 * A final compromise is to represent the multiplicative constants to only
 * 8 fractional bits, rather than 13.  This saves some shifting work on some
 * machines, and may also reduce the cost of multiplication (since there
 * are fewer one-bits in the constants).
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  8
#define PASS1_BITS  2
#else
#define CONST_BITS  8
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 8
#define FIX_1_082392200  ((INT32)  277)		/* FIX(1.082392200) */
#define FIX_1_414213562  ((INT32)  362)		/* FIX(1.414213562) */
#define FIX_1_847759065  ((INT32)  473)		/* FIX(1.847759065) */
#define FIX_2_613125930  ((INT32)  669)		/* FIX(2.613125930) */
#else
#define FIX_1_082392200  FIX(1.082392200)
#define FIX_1_414213562  FIX(1.414213562)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_613125930  FIX(2.613125930)
#endif

/* We can gain a little more speed, with a further compromise in accuracy,
 * by omitting the addition in a descaling shift.  This yields an incorrectly
 * rounded result half the time...
 */

#ifndef USE_ACCURATE_ROUNDING
#undef DESCALE
#define DESCALE(x,n)  RIGHT_SHIFT(x, n)
#endif

/* Multiply a DCTELEM variable by an INT32 constant, and immediately
 * descale to yield a DCTELEM result.
 */

#define MULTIPLY(var,const)  ((DCTELEM) DESCALE((var) * (const), CONST_BITS))

/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce a DCTELEM result.  For 8-bit data a 16x16->16
 * multiplication will do.  For 12-bit data, the multiplier table is
 * declared INT32, so a 32-bit multiply will be used.
 */

#if BITS_IN_JSAMPLE == 8
#define DEQUANTIZE(coef,quantval)  (((IFAST_MULT_TYPE) (coef)) * (quantval))
#else
#define DEQUANTIZE(coef,quantval)  \
	DESCALE((coef)*(quantval), IFAST_SCALE_BITS-PASS1_BITS)
#endif

/* Like DESCALE, but applies to a DCTELEM and produces an int.
 * We assume that int right shift is unsigned if INT32 right shift is.
 */

#ifdef RIGHT_SHIFT_IS_UNSIGNED
#define ISHIFT_TEMPS	DCTELEM ishift_temp;
#if BITS_IN_JSAMPLE == 8
#define DCTELEMBITS  16		/* DCTELEM may be 16 or 32 bits */
#else
#define DCTELEMBITS  32		/* DCTELEM must be 32 bits */
#endif
#define IRIGHT_SHIFT(x,shft)  \
	((ishift_temp = (x)) < 0 ? \
	 (ishift_temp >> (shft)) | ((~((DCTELEM) 0)) << (DCTELEMBITS-(shft))) : \
	 (ishift_temp >> (shft)))
#else
#define ISHIFT_TEMPS
#define IRIGHT_SHIFT(x,shft)	((x) >> (shft))
#endif

#ifdef USE_ACCURATE_ROUNDING
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT((x) + (1 << ((n)-1)), n))
#else
#define IDESCALE(x,n)  ((int) IRIGHT_SHIFT(x, n))
#endif

/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  DCTELEM tmp0, tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7;
  DCTELEM tmp10, tmp11, tmp12, tmp13;
  DCTELEM z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  IFAST_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE2];	/* buffers data between passes */
  SHIFT_TEMPS			/* for DESCALE */
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
	/* Due to quantization, we will usually find that many of the input
	 * coefficients are zero, especially the AC terms.  We can exploit this
	 * by short-circuiting the IDCT calculation for any column in which all
	 * the AC terms are zero.  In that case each output is equal to the
	 * DC coefficient (with scale factor as needed).
	 * With typical images and quantization tables, half or more of the
	 * column DCT calculations can be simplified this way.
	 */

	if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
	inptr[DCTSIZE*7] == 0) {
	  /* AC terms all zero */
	  int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);

	  wsptr[DCTSIZE*0] = dcval;
	  wsptr[DCTSIZE*1] = dcval;
	  wsptr[DCTSIZE*2] = dcval;
	  wsptr[DCTSIZE*3] = dcval;
	  wsptr[DCTSIZE*4] = dcval;
	  wsptr[DCTSIZE*5] = dcval;
	  wsptr[DCTSIZE*6] = dcval;
	  wsptr[DCTSIZE*7] = dcval;

	  inptr++;			/* advance pointers to next column */
	  quantptr++;
	  wsptr++;
	  continue;
	}

	/* Even part */

	tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
	tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
	tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
	tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

	tmp10 = tmp0 + tmp2;	/* phase 3 */
	tmp11 = tmp0 - tmp2;

	tmp13 = tmp1 + tmp3;	/* phases 5-3 */
	tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */

	tmp0 = tmp10 + tmp13;	/* phase 2 */
	tmp3 = tmp10 - tmp13;
	tmp1 = tmp11 + tmp12;
	tmp2 = tmp11 - tmp12;

	/* Odd part */

	tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
	tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
	tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
	tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);

	z13 = tmp6 + tmp5;		/* phase 6 */
	z10 = tmp6 - tmp5;
	z11 = tmp4 + tmp7;
	z12 = tmp4 - tmp7;

	tmp7 = z11 + z13;		/* phase 5 */
	tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */

	z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
	tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
	tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */

	tmp6 = tmp12 - tmp7;	/* phase 2 */
	tmp5 = tmp11 - tmp6;
	tmp4 = tmp10 + tmp5;

	wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
	wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
	wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
	wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
	wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
	wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
	wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
	wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);

	inptr++;			/* advance pointers to next column */
	quantptr++;
	wsptr++;
  }

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
	outptr = output_buf[ctr] + output_col;
	/* Rows of zeroes can be exploited in the same way as we did with columns.
	 * However, the column calculation has created many nonzero AC terms, so
	 * the simplification applies less often (typically 5% to 10% of the time).
	 * On machines with very fast multiplication, it's possible that the
	 * test takes more time than it's worth.  In that case this section
	 * may be commented out.
	 */

#ifndef NO_ZERO_ROW_TEST
	if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
	  /* AC terms all zero */
	  JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];

	  outptr[0] = dcval;
	  outptr[1] = dcval;
	  outptr[2] = dcval;
	  outptr[3] = dcval;
	  outptr[4] = dcval;
	  outptr[5] = dcval;
	  outptr[6] = dcval;
	  outptr[7] = dcval;

	  wsptr += DCTSIZE;		/* advance pointer to next row */
	  continue;
	}
#endif

	/* Even part */

	tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
	tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);

	tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
	tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
	    - tmp13;

	tmp0 = tmp10 + tmp13;
	tmp3 = tmp10 - tmp13;
	tmp1 = tmp11 + tmp12;
	tmp2 = tmp11 - tmp12;

	/* Odd part */

	z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
	z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
	z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
	z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];

	tmp7 = z11 + z13;		/* phase 5 */
	tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */

	z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
	tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
	tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */

	tmp6 = tmp12 - tmp7;	/* phase 2 */
	tmp5 = tmp11 - tmp6;
	tmp4 = tmp10 + tmp5;

	/* Final output stage: scale down by a factor of 8 and range-limit */

	outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
			    & RANGE_MASK];

	wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_IFAST_SUPPORTED */

/*** End of inlined file: jidctfst.c ***/


	#undef CONST_BITS
	#undef FIX_1_847759065
	#undef MULTIPLY
	#undef DEQUANTIZE

/*** Start of inlined file: jidctint.c ***/
#define JPEG_INTERNALS

#ifdef DCT_ISLOW_SUPPORTED

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif

/*
 * The poop on this scaling stuff is as follows:
 *
 * Each 1-D IDCT step produces outputs which are a factor of sqrt(N)
 * larger than the true IDCT outputs.  The final outputs are therefore
 * a factor of N larger than desired; since N=8 this can be cured by
 * a simple right shift at the end of the algorithm.  The advantage of
 * this arrangement is that we save two multiplications per 1-D IDCT,
 * because the y0 and y4 inputs need not be divided by sqrt(N).
 *
 * We have to do addition and subtraction of the integer inputs, which
 * is no problem, and multiplication by fractional constants, which is
 * a problem to do in integer arithmetic.  We multiply all the constants
 * by CONST_SCALE and convert them to integer constants (thus retaining
 * CONST_BITS bits of precision in the constants).  After doing a
 * multiplication we have to divide the product by CONST_SCALE, with proper
 * rounding, to produce the correct output.  This division can be done
 * cheaply as a right shift of CONST_BITS bits.  We postpone shifting
 * as long as possible so that partial sums can be added together with
 * full fractional precision.
 *
 * The outputs of the first pass are scaled up by PASS1_BITS bits so that
 * they are represented to better-than-integral precision.  These outputs
 * require BITS_IN_JSAMPLE + PASS1_BITS + 3 bits; this fits in a 16-bit word
 * with the recommended scaling.  (To scale up 12-bit sample data further, an
 * intermediate INT32 array would be needed.)
 *
 * To avoid overflow of the 32-bit intermediate results in pass 2, we must
 * have BITS_IN_JSAMPLE + CONST_BITS + PASS1_BITS <= 26.  Error analysis
 * shows that the values given below are the most effective.
 */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_298631336  ((INT32)  2446)	/* FIX(0.298631336) */
#define FIX_0_390180644  ((INT32)  3196)	/* FIX(0.390180644) */
#define FIX_0_541196100  ((INT32)  4433)	/* FIX(0.541196100) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_175875602  ((INT32)  9633)	/* FIX(1.175875602) */
#define FIX_1_501321110  ((INT32)  12299)	/* FIX(1.501321110) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_1_961570560  ((INT32)  16069)	/* FIX(1.961570560) */
#define FIX_2_053119869  ((INT32)  16819)	/* FIX(2.053119869) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_072711026  ((INT32)  25172)	/* FIX(3.072711026) */
#else
#define FIX_0_298631336  FIX(0.298631336)
#define FIX_0_390180644  FIX(0.390180644)
#define FIX_0_541196100  FIX(0.541196100)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_175875602  FIX(1.175875602)
#define FIX_1_501321110  FIX(1.501321110)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_1_961570560  FIX(1.961570560)
#define FIX_2_053119869  FIX(2.053119869)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_072711026  FIX(3.072711026)
#endif

/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif

/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce an int result.  In this module, both inputs and result
 * are 16 bits or less, so either int or short multiply will work.
 */

#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))

/*
 * Perform dequantization and inverse DCT on one block of coefficients.
 */

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp1, tmp2, tmp3;
  INT32 tmp10, tmp11, tmp12, tmp13;
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
	/* Due to quantization, we will usually find that many of the input
	 * coefficients are zero, especially the AC terms.  We can exploit this
	 * by short-circuiting the IDCT calculation for any column in which all
	 * the AC terms are zero.  In that case each output is equal to the
	 * DC coefficient (with scale factor as needed).
	 * With typical images and quantization tables, half or more of the
	 * column DCT calculations can be simplified this way.
	 */

	if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
	inptr[DCTSIZE*7] == 0) {
	  /* AC terms all zero */
	  int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;

	  wsptr[DCTSIZE*0] = dcval;
	  wsptr[DCTSIZE*1] = dcval;
	  wsptr[DCTSIZE*2] = dcval;
	  wsptr[DCTSIZE*3] = dcval;
	  wsptr[DCTSIZE*4] = dcval;
	  wsptr[DCTSIZE*5] = dcval;
	  wsptr[DCTSIZE*6] = dcval;
	  wsptr[DCTSIZE*7] = dcval;

	  inptr++;			/* advance pointers to next column */
	  quantptr++;
	  wsptr++;
	  continue;
	}

	/* Even part: reverse the even part of the forward DCT. */
	/* The rotator is sqrt(2)*c(-6). */

	z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
	z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

	z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
	tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
	tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);

	z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
	z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);

	tmp0 = (z2 + z3) << CONST_BITS;
	tmp1 = (z2 - z3) << CONST_BITS;

	tmp10 = tmp0 + tmp3;
	tmp13 = tmp0 - tmp3;
	tmp11 = tmp1 + tmp2;
	tmp12 = tmp1 - tmp2;

	/* Odd part per figure 8; the matrix is unitary and hence its
	 * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
	 */

	tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
	tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
	tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
	tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);

	z1 = tmp0 + tmp3;
	z2 = tmp1 + tmp2;
	z3 = tmp0 + tmp2;
	z4 = tmp1 + tmp3;
	z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */

	tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
	tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
	tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
	tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
	z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
	z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
	z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
	z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */

	z3 += z5;
	z4 += z5;

	tmp0 += z1 + z3;
	tmp1 += z2 + z4;
	tmp2 += z2 + z3;
	tmp3 += z1 + z4;

	/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

	wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
	wsptr[DCTSIZE*7] = (int) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
	wsptr[DCTSIZE*1] = (int) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
	wsptr[DCTSIZE*6] = (int) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
	wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
	wsptr[DCTSIZE*5] = (int) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
	wsptr[DCTSIZE*3] = (int) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
	wsptr[DCTSIZE*4] = (int) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);

	inptr++;			/* advance pointers to next column */
	quantptr++;
	wsptr++;
  }

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
	outptr = output_buf[ctr] + output_col;
	/* Rows of zeroes can be exploited in the same way as we did with columns.
	 * However, the column calculation has created many nonzero AC terms, so
	 * the simplification applies less often (typically 5% to 10% of the time).
	 * On machines with very fast multiplication, it's possible that the
	 * test takes more time than it's worth.  In that case this section
	 * may be commented out.
	 */

#ifndef NO_ZERO_ROW_TEST
	if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
	  /* AC terms all zero */
	  JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];

	  outptr[0] = dcval;
	  outptr[1] = dcval;
	  outptr[2] = dcval;
	  outptr[3] = dcval;
	  outptr[4] = dcval;
	  outptr[5] = dcval;
	  outptr[6] = dcval;
	  outptr[7] = dcval;

	  wsptr += DCTSIZE;		/* advance pointer to next row */
	  continue;
	}
#endif

	/* Even part: reverse the even part of the forward DCT. */
	/* The rotator is sqrt(2)*c(-6). */

	z2 = (INT32) wsptr[2];
	z3 = (INT32) wsptr[6];

	z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
	tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
	tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);

	tmp0 = ((INT32) wsptr[0] + (INT32) wsptr[4]) << CONST_BITS;
	tmp1 = ((INT32) wsptr[0] - (INT32) wsptr[4]) << CONST_BITS;

	tmp10 = tmp0 + tmp3;
	tmp13 = tmp0 - tmp3;
	tmp11 = tmp1 + tmp2;
	tmp12 = tmp1 - tmp2;

	/* Odd part per figure 8; the matrix is unitary and hence its
	 * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
	 */

	tmp0 = (INT32) wsptr[7];
	tmp1 = (INT32) wsptr[5];
	tmp2 = (INT32) wsptr[3];
	tmp3 = (INT32) wsptr[1];

	z1 = tmp0 + tmp3;
	z2 = tmp1 + tmp2;
	z3 = tmp0 + tmp2;
	z4 = tmp1 + tmp3;
	z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */

	tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
	tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
	tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
	tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
	z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
	z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
	z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
	z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */

	z3 += z5;
	z4 += z5;

	tmp0 += z1 + z3;
	tmp1 += z2 + z4;
	tmp2 += z2 + z3;
	tmp3 += z1 + z4;

	/* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

	outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp3,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[7] = range_limit[(int) DESCALE(tmp10 - tmp3,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[1] = range_limit[(int) DESCALE(tmp11 + tmp2,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[6] = range_limit[(int) DESCALE(tmp11 - tmp2,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[2] = range_limit[(int) DESCALE(tmp12 + tmp1,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[5] = range_limit[(int) DESCALE(tmp12 - tmp1,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[3] = range_limit[(int) DESCALE(tmp13 + tmp0,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
	outptr[4] = range_limit[(int) DESCALE(tmp13 - tmp0,
					  CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];

	wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

#endif /* DCT_ISLOW_SUPPORTED */

/*** End of inlined file: jidctint.c ***/



/*** Start of inlined file: jidctred.c ***/
#define JPEG_INTERNALS

#ifdef IDCT_SCALING_SUPPORTED

/*
 * This module is specialized to the case DCTSIZE = 8.
 */

#if DCTSIZE != 8
  Sorry, this code only copes with 8x8 DCTs. /* deliberate syntax err */
#endif

/* Scaling is the same as in jidctint.c. */

#if BITS_IN_JSAMPLE == 8
#define CONST_BITS  13
#define PASS1_BITS  2
#else
#define CONST_BITS  13
#define PASS1_BITS  1		/* lose a little precision to avoid overflow */
#endif

/* Some C compilers fail to reduce "FIX(constant)" at compile time, thus
 * causing a lot of useless floating-point operations at run time.
 * To get around this we use the following pre-calculated constants.
 * If you change CONST_BITS you may want to add appropriate values.
 * (With a reasonable C compiler, you can just rely on the FIX() macro...)
 */

#if CONST_BITS == 13
#define FIX_0_211164243  ((INT32)  1730)	/* FIX(0.211164243) */
#define FIX_0_509795579  ((INT32)  4176)	/* FIX(0.509795579) */
#define FIX_0_601344887  ((INT32)  4926)	/* FIX(0.601344887) */
#define FIX_0_720959822  ((INT32)  5906)	/* FIX(0.720959822) */
#define FIX_0_765366865  ((INT32)  6270)	/* FIX(0.765366865) */
#define FIX_0_850430095  ((INT32)  6967)	/* FIX(0.850430095) */
#define FIX_0_899976223  ((INT32)  7373)	/* FIX(0.899976223) */
#define FIX_1_061594337  ((INT32)  8697)	/* FIX(1.061594337) */
#define FIX_1_272758580  ((INT32)  10426)	/* FIX(1.272758580) */
#define FIX_1_451774981  ((INT32)  11893)	/* FIX(1.451774981) */
#define FIX_1_847759065  ((INT32)  15137)	/* FIX(1.847759065) */
#define FIX_2_172734803  ((INT32)  17799)	/* FIX(2.172734803) */
#define FIX_2_562915447  ((INT32)  20995)	/* FIX(2.562915447) */
#define FIX_3_624509785  ((INT32)  29692)	/* FIX(3.624509785) */
#else
#define FIX_0_211164243  FIX(0.211164243)
#define FIX_0_509795579  FIX(0.509795579)
#define FIX_0_601344887  FIX(0.601344887)
#define FIX_0_720959822  FIX(0.720959822)
#define FIX_0_765366865  FIX(0.765366865)
#define FIX_0_850430095  FIX(0.850430095)
#define FIX_0_899976223  FIX(0.899976223)
#define FIX_1_061594337  FIX(1.061594337)
#define FIX_1_272758580  FIX(1.272758580)
#define FIX_1_451774981  FIX(1.451774981)
#define FIX_1_847759065  FIX(1.847759065)
#define FIX_2_172734803  FIX(2.172734803)
#define FIX_2_562915447  FIX(2.562915447)
#define FIX_3_624509785  FIX(3.624509785)
#endif

/* Multiply an INT32 variable by an INT32 constant to yield an INT32 result.
 * For 8-bit samples with the recommended scaling, all the variable
 * and constant values involved are no more than 16 bits wide, so a
 * 16x16->32 bit multiply can be used instead of a full 32x32 multiply.
 * For 12-bit samples, a full 32-bit multiplication will be needed.
 */

#if BITS_IN_JSAMPLE == 8
#define MULTIPLY(var,const)  MULTIPLY16C16(var,const)
#else
#define MULTIPLY(var,const)  ((var) * (const))
#endif

/* Dequantize a coefficient by multiplying it by the multiplier-table
 * entry; produce an int result.  In this module, both inputs and result
 * are 16 bits or less, so either int or short multiply will work.
 */

#define DEQUANTIZE(coef,quantval)  (((ISLOW_MULT_TYPE) (coef)) * (quantval))

/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 4x4 output block.
 */

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp2, tmp10, tmp12;
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE*4];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
	/* Don't bother to process column 4, because second pass won't use it */
	if (ctr == DCTSIZE-4)
	  continue;
	if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*5] == 0 &&
	inptr[DCTSIZE*6] == 0 && inptr[DCTSIZE*7] == 0) {
	  /* AC terms all zero; we need not examine term 4 for 4x4 output */
	  int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;

	  wsptr[DCTSIZE*0] = dcval;
	  wsptr[DCTSIZE*1] = dcval;
	  wsptr[DCTSIZE*2] = dcval;
	  wsptr[DCTSIZE*3] = dcval;

	  continue;
	}

	/* Even part */

	tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
	tmp0 <<= (CONST_BITS+1);

	z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
	z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);

	tmp2 = MULTIPLY(z2, FIX_1_847759065) + MULTIPLY(z3, - FIX_0_765366865);

	tmp10 = tmp0 + tmp2;
	tmp12 = tmp0 - tmp2;

	/* Odd part */

	z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
	z2 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
	z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
	z4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);

	tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */

	tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */

	/* Final output stage */

	wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp2, CONST_BITS-PASS1_BITS+1);
	wsptr[DCTSIZE*3] = (int) DESCALE(tmp10 - tmp2, CONST_BITS-PASS1_BITS+1);
	wsptr[DCTSIZE*1] = (int) DESCALE(tmp12 + tmp0, CONST_BITS-PASS1_BITS+1);
	wsptr[DCTSIZE*2] = (int) DESCALE(tmp12 - tmp0, CONST_BITS-PASS1_BITS+1);
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
  for (ctr = 0; ctr < 4; ctr++) {
	outptr = output_buf[ctr] + output_col;
	/* It's not clear whether a zero row test is worthwhile here ... */

#ifndef NO_ZERO_ROW_TEST
	if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 &&
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
	  /* AC terms all zero */
	  JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];

	  outptr[0] = dcval;
	  outptr[1] = dcval;
	  outptr[2] = dcval;
	  outptr[3] = dcval;

	  wsptr += DCTSIZE;		/* advance pointer to next row */
	  continue;
	}
#endif

	/* Even part */

	tmp0 = ((INT32) wsptr[0]) << (CONST_BITS+1);

	tmp2 = MULTIPLY((INT32) wsptr[2], FIX_1_847759065)
	 + MULTIPLY((INT32) wsptr[6], - FIX_0_765366865);

	tmp10 = tmp0 + tmp2;
	tmp12 = tmp0 - tmp2;

	/* Odd part */

	z1 = (INT32) wsptr[7];
	z2 = (INT32) wsptr[5];
	z3 = (INT32) wsptr[3];
	z4 = (INT32) wsptr[1];

	tmp0 = MULTIPLY(z1, - FIX_0_211164243) /* sqrt(2) * (c3-c1) */
	 + MULTIPLY(z2, FIX_1_451774981) /* sqrt(2) * (c3+c7) */
	 + MULTIPLY(z3, - FIX_2_172734803) /* sqrt(2) * (-c1-c5) */
	 + MULTIPLY(z4, FIX_1_061594337); /* sqrt(2) * (c5+c7) */

	tmp2 = MULTIPLY(z1, - FIX_0_509795579) /* sqrt(2) * (c7-c5) */
	 + MULTIPLY(z2, - FIX_0_601344887) /* sqrt(2) * (c5-c1) */
	 + MULTIPLY(z3, FIX_0_899976223) /* sqrt(2) * (c3-c7) */
	 + MULTIPLY(z4, FIX_2_562915447); /* sqrt(2) * (c1+c3) */

	/* Final output stage */

	outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp2,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
	outptr[3] = range_limit[(int) DESCALE(tmp10 - tmp2,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
	outptr[1] = range_limit[(int) DESCALE(tmp12 + tmp0,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];
	outptr[2] = range_limit[(int) DESCALE(tmp12 - tmp0,
					  CONST_BITS+PASS1_BITS+3+1)
			    & RANGE_MASK];

	wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 2x2 output block.
 */

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  INT32 tmp0, tmp10, z1;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  int ctr;
  int workspace[DCTSIZE*2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  wsptr = workspace;
  for (ctr = DCTSIZE; ctr > 0; inptr++, quantptr++, wsptr++, ctr--) {
	/* Don't bother to process columns 2,4,6 */
	if (ctr == DCTSIZE-2 || ctr == DCTSIZE-4 || ctr == DCTSIZE-6)
	  continue;
	if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*3] == 0 &&
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*7] == 0) {
	  /* AC terms all zero; we need not examine terms 2,4,6 for 2x2 output */
	  int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;

	  wsptr[DCTSIZE*0] = dcval;
	  wsptr[DCTSIZE*1] = dcval;

	  continue;
	}

	/* Even part */

	z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
	tmp10 = z1 << (CONST_BITS+2);

	/* Odd part */

	z1 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
	tmp0 = MULTIPLY(z1, - FIX_0_720959822); /* sqrt(2) * (c7-c5+c3-c1) */
	z1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
	tmp0 += MULTIPLY(z1, FIX_0_850430095); /* sqrt(2) * (-c1+c3+c5+c7) */
	z1 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
	tmp0 += MULTIPLY(z1, - FIX_1_272758580); /* sqrt(2) * (-c1+c3-c5-c7) */
	z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
	tmp0 += MULTIPLY(z1, FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */

	/* Final output stage */

	wsptr[DCTSIZE*0] = (int) DESCALE(tmp10 + tmp0, CONST_BITS-PASS1_BITS+2);
	wsptr[DCTSIZE*1] = (int) DESCALE(tmp10 - tmp0, CONST_BITS-PASS1_BITS+2);
  }

  /* Pass 2: process 2 rows from work array, store into output array. */

  wsptr = workspace;
  for (ctr = 0; ctr < 2; ctr++) {
	outptr = output_buf[ctr] + output_col;
	/* It's not clear whether a zero row test is worthwhile here ... */

#ifndef NO_ZERO_ROW_TEST
	if (wsptr[1] == 0 && wsptr[3] == 0 && wsptr[5] == 0 && wsptr[7] == 0) {
	  /* AC terms all zero */
	  JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
				  & RANGE_MASK];

	  outptr[0] = dcval;
	  outptr[1] = dcval;

	  wsptr += DCTSIZE;		/* advance pointer to next row */
	  continue;
	}
#endif

	/* Even part */

	tmp10 = ((INT32) wsptr[0]) << (CONST_BITS+2);

	/* Odd part */

	tmp0 = MULTIPLY((INT32) wsptr[7], - FIX_0_720959822) /* sqrt(2) * (c7-c5+c3-c1) */
	 + MULTIPLY((INT32) wsptr[5], FIX_0_850430095) /* sqrt(2) * (-c1+c3+c5+c7) */
	 + MULTIPLY((INT32) wsptr[3], - FIX_1_272758580) /* sqrt(2) * (-c1+c3-c5-c7) */
	 + MULTIPLY((INT32) wsptr[1], FIX_3_624509785); /* sqrt(2) * (c1+c3+c5+c7) */

	/* Final output stage */

	outptr[0] = range_limit[(int) DESCALE(tmp10 + tmp0,
					  CONST_BITS+PASS1_BITS+3+2)
			    & RANGE_MASK];
	outptr[1] = range_limit[(int) DESCALE(tmp10 - tmp0,
					  CONST_BITS+PASS1_BITS+3+2)
			    & RANGE_MASK];

	wsptr += DCTSIZE;		/* advance pointer to next row */
  }
}

/*
 * Perform dequantization and inverse DCT on one block of coefficients,
 * producing a reduced-size 1x1 output block.
 */

GLOBAL(void)
jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
  int dcval;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
  SHIFT_TEMPS

  /* We hardly need an inverse DCT routine for this: just take the
   * average pixel value, which is one-eighth of the DC coefficient.
   */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
  dcval = (int) DESCALE((INT32) dcval, 3);

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
}

#endif /* IDCT_SCALING_SUPPORTED */

/*** End of inlined file: jidctred.c ***/


/*** Start of inlined file: jmemmgr.c ***/
#define JPEG_INTERNALS
#define AM_MEMORY_MANAGER	/* we define jvirt_Xarray_control structs */


/*** Start of inlined file: jmemsys.h ***/
#ifndef __jmemsys_h__
#define __jmemsys_h__

/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jpeg_get_small		jGetSmall
#define jpeg_free_small		jFreeSmall
#define jpeg_get_large		jGetLarge
#define jpeg_free_large		jFreeLarge
#define jpeg_mem_available	jMemAvail
#define jpeg_open_backing_store	jOpenBackStore
#define jpeg_mem_init		jMemInit
#define jpeg_mem_term		jMemTerm
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/*
 * These two functions are used to allocate and release small chunks of
 * memory.  (Typically the total amount requested through jpeg_get_small is
 * no more than 20K or so; this will be requested in chunks of a few K each.)
 * Behavior should be the same as for the standard library functions malloc
 * and free; in particular, jpeg_get_small must return NULL on failure.
 * On most systems, these ARE malloc and free.  jpeg_free_small is passed the
 * size of the object being freed, just in case it's needed.
 * On an 80x86 machine using small-data memory model, these manage near heap.
 */

EXTERN(void *) jpeg_get_small JPP((j_common_ptr cinfo, size_t sizeofobject));
EXTERN(void) jpeg_free_small JPP((j_common_ptr cinfo, void * object,
				  size_t sizeofobject));

/*
 * These two functions are used to allocate and release large chunks of
 * memory (up to the total free space designated by jpeg_mem_available).
 * The interface is the same as above, except that on an 80x86 machine,
 * far pointers are used.  On most other machines these are identical to
 * the jpeg_get/free_small routines; but we keep them separate anyway,
 * in case a different allocation strategy is desirable for large chunks.
 */

EXTERN(void FAR *) jpeg_get_large JPP((j_common_ptr cinfo,
				       size_t sizeofobject));
EXTERN(void) jpeg_free_large JPP((j_common_ptr cinfo, void FAR * object,
				  size_t sizeofobject));

/*
 * The macro MAX_ALLOC_CHUNK designates the maximum number of bytes that may
 * be requested in a single call to jpeg_get_large (and jpeg_get_small for that
 * matter, but that case should never come into play).  This macro is needed
 * to model the 64Kb-segment-size limit of far addressing on 80x86 machines.
 * On those machines, we expect that jconfig.h will provide a proper value.
 * On machines with 32-bit flat address spaces, any large constant may be used.
 *
 * NB: jmemmgr.c expects that MAX_ALLOC_CHUNK will be representable as type
 * size_t and will be a multiple of sizeof(align_type).
 */

#ifndef MAX_ALLOC_CHUNK		/* may be overridden in jconfig.h */
#define MAX_ALLOC_CHUNK  1000000000L
#endif

/*
 * This routine computes the total space still available for allocation by
 * jpeg_get_large.  If more space than this is needed, backing store will be
 * used.  NOTE: any memory already allocated must not be counted.
 *
 * There is a minimum space requirement, corresponding to the minimum
 * feasible buffer sizes; jmemmgr.c will request that much space even if
 * jpeg_mem_available returns zero.  The maximum space needed, enough to hold
 * all working storage in memory, is also passed in case it is useful.
 * Finally, the total space already allocated is passed.  If no better
 * method is available, cinfo->mem->max_memory_to_use - already_allocated
 * is often a suitable calculation.
 *
 * It is OK for jpeg_mem_available to underestimate the space available
 * (that'll just lead to more backing-store access than is really necessary).
 * However, an overestimate will lead to failure.  Hence it's wise to subtract
 * a slop factor from the true available space.  5% should be enough.
 *
 * On machines with lots of virtual memory, any large constant may be returned.
 * Conversely, zero may be returned to always use the minimum amount of memory.
 */

EXTERN(long) jpeg_mem_available JPP((j_common_ptr cinfo,
				     long min_bytes_needed,
				     long max_bytes_needed,
				     long already_allocated));

/*
 * This structure holds whatever state is needed to access a single
 * backing-store object.  The read/write/close method pointers are called
 * by jmemmgr.c to manipulate the backing-store object; all other fields
 * are private to the system-dependent backing store routines.
 */

#define TEMP_NAME_LENGTH   64	/* max length of a temporary file's name */

#ifdef USE_MSDOS_MEMMGR		/* DOS-specific junk */

typedef unsigned short XMSH;	/* type of extended-memory handles */
typedef unsigned short EMSH;	/* type of expanded-memory handles */

typedef union {
  short file_handle;		/* DOS file handle if it's a temp file */
  XMSH xms_handle;		/* handle if it's a chunk of XMS */
  EMSH ems_handle;		/* handle if it's a chunk of EMS */
} handle_union;

#endif /* USE_MSDOS_MEMMGR */

#ifdef USE_MAC_MEMMGR		/* Mac-specific junk */
#include <Files.h>
#endif /* USE_MAC_MEMMGR */

//typedef struct backing_store_struct * backing_store_ptr;

typedef struct backing_store_struct {
  /* Methods for reading/writing/closing this backing-store object */
  JMETHOD(void, read_backing_store, (j_common_ptr cinfo,
				     struct backing_store_struct *info,
				     void FAR * buffer_address,
				     long file_offset, long byte_count));
  JMETHOD(void, write_backing_store, (j_common_ptr cinfo,
				      struct backing_store_struct *info,
				      void FAR * buffer_address,
				      long file_offset, long byte_count));
  JMETHOD(void, close_backing_store, (j_common_ptr cinfo,
				      struct backing_store_struct *info));

  /* Private fields for system-dependent backing-store management */
#ifdef USE_MSDOS_MEMMGR
  /* For the MS-DOS manager (jmemdos.c), we need: */
  handle_union handle;		/* reference to backing-store storage object */
  char temp_name[TEMP_NAME_LENGTH]; /* name if it's a file */
#else
#ifdef USE_MAC_MEMMGR
  /* For the Mac manager (jmemmac.c), we need: */
  short temp_file;		/* file reference number to temp file */
  FSSpec tempSpec;		/* the FSSpec for the temp file */
  char temp_name[TEMP_NAME_LENGTH]; /* name if it's a file */
#else
  /* For a typical implementation with temp files, we need: */
  FILE * temp_file;		/* stdio reference to temp file */
  char temp_name[TEMP_NAME_LENGTH]; /* name of temp file */
#endif
#endif
} backing_store_info;

/*
 * Initial opening of a backing-store object.  This must fill in the
 * read/write/close pointers in the object.  The read/write routines
 * may take an error exit if the specified maximum file size is exceeded.
 * (If jpeg_mem_available always returns a large value, this routine can
 * just take an error exit.)
 */

EXTERN(void) jpeg_open_backing_store JPP((j_common_ptr cinfo,
					  struct backing_store_struct *info,
					  long total_bytes_needed));

/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  jpeg_mem_init will be called before anything is
 * allocated (and, therefore, nothing in cinfo is of use except the error
 * manager pointer).  It should return a suitable default value for
 * max_memory_to_use; this may subsequently be overridden by the surrounding
 * application.  (Note that max_memory_to_use is only important if
 * jpeg_mem_available chooses to consult it ... no one else will.)
 * jpeg_mem_term may assume that all requested memory has been freed and that
 * all opened backing-store objects have been closed.
 */

EXTERN(long) jpeg_mem_init JPP((j_common_ptr cinfo));
EXTERN(void) jpeg_mem_term JPP((j_common_ptr cinfo));

#endif

/*** End of inlined file: jmemsys.h ***/

#ifndef NO_GETENV
#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare getenv() */
extern char * getenv JPP((const char * name));
#endif
#endif

/*
 * Some important notes:
 *   The allocation routines provided here must never return NULL.
 *   They should exit to error_exit if unsuccessful.
 *
 *   It's not a good idea to try to merge the sarray and barray routines,
 *   even though they are textually almost the same, because samples are
 *   usually stored as bytes while coefficients are shorts or ints.  Thus,
 *   in machines where byte pointers have a different representation from
 *   word pointers, the resulting machine code could not be the same.
 */

/*
 * Many machines require storage alignment: longs must start on 4-byte
 * boundaries, doubles on 8-byte boundaries, etc.  On such machines, malloc()
 * always returns pointers that are multiples of the worst-case alignment
 * requirement, and we had better do so too.
 * There isn't any really portable way to determine the worst-case alignment
 * requirement.  This module assumes that the alignment requirement is
 * multiples of sizeof(ALIGN_TYPE).
 * By default, we define ALIGN_TYPE as double.  This is necessary on some
 * workstations (where doubles really do need 8-byte alignment) and will work
 * fine on nearly everything.  If your machine has lesser alignment needs,
 * you can save a few bytes by making ALIGN_TYPE smaller.
 * The only place I know of where this will NOT work is certain Macintosh
 * 680x0 compilers that define double as a 10-byte IEEE extended float.
 * Doing 10-byte alignment is counterproductive because longwords won't be
 * aligned well.  Put "#define ALIGN_TYPE long" in jconfig.h if you have
 * such a compiler.
 */

#ifndef ALIGN_TYPE		/* so can override from jconfig.h */
#define ALIGN_TYPE  double
#endif

/*
 * We allocate objects from "pools", where each pool is gotten with a single
 * request to jpeg_get_small() or jpeg_get_large().  There is no per-object
 * overhead within a pool, except for alignment padding.  Each pool has a
 * header with a link to the next pool of the same class.
 * Small and large pool headers are identical except that the latter's
 * link pointer must be FAR on 80x86 machines.
 * Notice that the "real" header fields are union'ed with a dummy ALIGN_TYPE
 * field.  This forces the compiler to make SIZEOF(small_pool_hdr) a multiple
 * of the alignment requirement of ALIGN_TYPE.
 */

typedef union small_pool_struct * small_pool_ptr;

typedef union small_pool_struct {
  struct {
	small_pool_ptr next;	/* next in list of pools */
	size_t bytes_used;		/* how many bytes already used within pool */
	size_t bytes_left;		/* bytes still available in this pool */
  } hdr;
  ALIGN_TYPE dummy;		/* included in union to ensure alignment */
} small_pool_hdr;

typedef union large_pool_struct FAR * large_pool_ptr;

typedef union large_pool_struct {
  struct {
	large_pool_ptr next;	/* next in list of pools */
	size_t bytes_used;		/* how many bytes already used within pool */
	size_t bytes_left;		/* bytes still available in this pool */
  } hdr;
  ALIGN_TYPE dummy;		/* included in union to ensure alignment */
} large_pool_hdr;

/*
 * Here is the full definition of a memory manager object.
 */

typedef struct {
  struct jpeg_memory_mgr pub;	/* public fields */

  /* Each pool identifier (lifetime class) names a linked list of pools. */
  small_pool_ptr small_list[JPOOL_NUMPOOLS];
  large_pool_ptr large_list[JPOOL_NUMPOOLS];

  /* Since we only have one lifetime class of virtual arrays, only one
   * linked list is necessary (for each datatype).  Note that the virtual
   * array control blocks being linked together are actually stored somewhere
   * in the small-pool list.
   */
  jvirt_sarray_ptr virt_sarray_list;
  jvirt_barray_ptr virt_barray_list;

  /* This counts total space obtained from jpeg_get_small/large */
  long total_space_allocated;

  /* alloc_sarray and alloc_barray set this value for use by virtual
   * array routines.
   */
  JDIMENSION last_rowsperchunk;	/* from most recent alloc_sarray/barray */
} my_memory_mgr;

typedef my_memory_mgr * my_mem_ptr;

/*
 * The control blocks for virtual arrays.
 * Note that these blocks are allocated in the "small" pool area.
 * System-dependent info for the associated backing store (if any) is hidden
 * inside the backing_store_info struct.
 */

struct jvirt_sarray_control {
  JSAMPARRAY mem_buffer;	/* => the in-memory buffer */
  JDIMENSION rows_in_array;	/* total virtual array height */
  JDIMENSION samplesperrow;	/* width of array (and of memory buffer) */
  JDIMENSION maxaccess;		/* max rows accessed by access_virt_sarray */
  JDIMENSION rows_in_mem;	/* height of memory buffer */
  JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
  JDIMENSION cur_start_row;	/* first logical row # in the buffer */
  JDIMENSION first_undef_row;	/* row # of first uninitialized row */
  boolean pre_zero;		/* pre-zero mode requested? */
  boolean dirty;		/* do current buffer contents need written? */
  boolean b_s_open;		/* is backing-store data valid? */
  jvirt_sarray_ptr next;	/* link to next virtual sarray control block */
  backing_store_info b_s_info;	/* System-dependent control info */
};

struct jvirt_barray_control {
  JBLOCKARRAY mem_buffer;	/* => the in-memory buffer */
  JDIMENSION rows_in_array;	/* total virtual array height */
  JDIMENSION blocksperrow;	/* width of array (and of memory buffer) */
  JDIMENSION maxaccess;		/* max rows accessed by access_virt_barray */
  JDIMENSION rows_in_mem;	/* height of memory buffer */
  JDIMENSION rowsperchunk;	/* allocation chunk size in mem_buffer */
  JDIMENSION cur_start_row;	/* first logical row # in the buffer */
  JDIMENSION first_undef_row;	/* row # of first uninitialized row */
  boolean pre_zero;		/* pre-zero mode requested? */
  boolean dirty;		/* do current buffer contents need written? */
  boolean b_s_open;		/* is backing-store data valid? */
  jvirt_barray_ptr next;	/* link to next virtual barray control block */
  backing_store_info b_s_info;	/* System-dependent control info */
};

#ifdef MEM_STATS		/* optional extra stuff for statistics */

LOCAL(void)
print_mem_stats (j_common_ptr cinfo, int pool_id)
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;

  /* Since this is only a debugging stub, we can cheat a little by using
   * fprintf directly rather than going through the trace message code.
   * This is helpful because message parm array can't handle longs.
   */
  fprintf(stderr, "Freeing pool %d, total space = %ld\n",
	  pool_id, mem->total_space_allocated);

  for (lhdr_ptr = mem->large_list[pool_id]; lhdr_ptr != NULL;
	   lhdr_ptr = lhdr_ptr->hdr.next) {
	fprintf(stderr, "  Large chunk used %ld\n",
	    (long) lhdr_ptr->hdr.bytes_used);
  }

  for (shdr_ptr = mem->small_list[pool_id]; shdr_ptr != NULL;
	   shdr_ptr = shdr_ptr->hdr.next) {
	fprintf(stderr, "  Small chunk used %ld free %ld\n",
	    (long) shdr_ptr->hdr.bytes_used,
	    (long) shdr_ptr->hdr.bytes_left);
  }
}

#endif /* MEM_STATS */

LOCAL(void)
out_of_memory (j_common_ptr cinfo, int which)
/* Report an out-of-memory error and stop execution */
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
}

/*
 * Allocation of "small" objects.
 *
 * For these, we use pooled storage.  When a new pool must be created,
 * we try to get enough space for the current request plus a "slop" factor,
 * where the slop will be the amount of leftover space in the new pool.
 * The speed vs. space tradeoff is largely determined by the slop values.
 * A different slop value is provided for each pool class (lifetime),
 * and we also distinguish the first pool of a class from later ones.
 * NOTE: the values given work fairly well on both 16- and 32-bit-int
 * machines, but may be too small if longs are 64 bits or more.
 */

static const size_t first_pool_slop[JPOOL_NUMPOOLS] =
{
	1600,			/* first PERMANENT pool */
	16000			/* first IMAGE pool */
};

static const size_t extra_pool_slop[JPOOL_NUMPOOLS] =
{
	0,			/* additional PERMANENT pools */
	5000			/* additional IMAGE pools */
};

#define MIN_SLOP  50		/* greater than 0 to avoid futile looping */

METHODDEF(void *)
alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "small" object */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr hdr_ptr, prev_hdr_ptr;
  char * data_ptr;
  size_t odd_bytes, min_request, slop;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
	out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
  if (odd_bytes > 0)
	sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;

  /* See if space is available in any existing pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
	ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
  prev_hdr_ptr = NULL;
  hdr_ptr = mem->small_list[pool_id];
  while (hdr_ptr != NULL) {
	if (hdr_ptr->hdr.bytes_left >= sizeofobject)
	  break;			/* found pool with enough space */
	prev_hdr_ptr = hdr_ptr;
	hdr_ptr = hdr_ptr->hdr.next;
  }

  /* Time to make a new pool? */
  if (hdr_ptr == NULL) {
	/* min_request is what we need now, slop is what will be leftover */
	min_request = sizeofobject + SIZEOF(small_pool_hdr);
	if (prev_hdr_ptr == NULL)	/* first pool in class? */
	  slop = first_pool_slop[pool_id];
	else
	  slop = extra_pool_slop[pool_id];
	/* Don't ask for more than MAX_ALLOC_CHUNK */
	if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
	  slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
	/* Try to get space, if fail reduce slop and try again */
	for (;;) {
	  hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
	  if (hdr_ptr != NULL)
	break;
	  slop /= 2;
	  if (slop < MIN_SLOP)	/* give up when it gets real small */
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
	}
	mem->total_space_allocated += min_request + slop;
	/* Success, initialize the new pool header and add to end of list */
	hdr_ptr->hdr.next = NULL;
	hdr_ptr->hdr.bytes_used = 0;
	hdr_ptr->hdr.bytes_left = sizeofobject + slop;
	if (prev_hdr_ptr == NULL)	/* first pool in class? */
	  mem->small_list[pool_id] = hdr_ptr;
	else
	  prev_hdr_ptr->hdr.next = hdr_ptr;
  }

  /* OK, allocate the object from the current pool */
  data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
  hdr_ptr->hdr.bytes_used += sizeofobject;
  hdr_ptr->hdr.bytes_left -= sizeofobject;

  return (void *) data_ptr;
}

/*
 * Allocation of "large" objects.
 *
 * The external semantics of these are the same as "small" objects,
 * except that FAR pointers are used on 80x86.  However the pool
 * management heuristics are quite different.  We assume that each
 * request is large enough that it may as well be passed directly to
 * jpeg_get_large; the pool management just links everything together
 * so that we can free it all on demand.
 * Note: the major use of "large" objects is in JSAMPARRAY and JBLOCKARRAY
 * structures.  The routines that create these structures (see below)
 * deliberately bunch rows together to ensure a large request size.
 */

METHODDEF(void FAR *)
alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "large" object */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  large_pool_ptr hdr_ptr;
  size_t odd_bytes;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
	out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
  if (odd_bytes > 0)
	sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;

  /* Always make a new pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
	ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
					    SIZEOF(large_pool_hdr));
  if (hdr_ptr == NULL)
	out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);

  /* Success, initialize the new pool header and add to list */
  hdr_ptr->hdr.next = mem->large_list[pool_id];
  /* We maintain space counts in each pool header for statistical purposes,
   * even though they are not needed for allocation.
   */
  hdr_ptr->hdr.bytes_used = sizeofobject;
  hdr_ptr->hdr.bytes_left = 0;
  mem->large_list[pool_id] = hdr_ptr;

  return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
}

/*
 * Creation of 2-D sample arrays.
 * The pointers are in near heap, the samples themselves in FAR heap.
 *
 * To minimize allocation overhead and to allow I/O of large contiguous
 * blocks, we allocate the sample rows in groups of as many rows as possible
 * without exceeding MAX_ALLOC_CHUNK total bytes per allocation request.
 * NB: the virtual array control routines, later in this file, know about
 * this chunking of rows.  The rowsperchunk value is left in the mem manager
 * object so that it can be saved away if this sarray is the workspace for
 * a virtual array.
 */

METHODDEF(JSAMPARRAY)
alloc_sarray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION samplesperrow, JDIMENSION numrows)
/* Allocate a 2-D sample array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  JSAMPARRAY result;
  JSAMPROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) samplesperrow * SIZEOF(JSAMPLE));
  if (ltemp <= 0)
	ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
  if (ltemp < (long) numrows)
	rowsperchunk = (JDIMENSION) ltemp;
  else
	rowsperchunk = numrows;
  mem->last_rowsperchunk = rowsperchunk;

  /* Get space for row pointers (small object) */
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
				    (size_t) (numrows * SIZEOF(JSAMPROW)));

  /* Get the rows themselves (large objects) */
  currow = 0;
  while (currow < numrows) {
	rowsperchunk = MIN(rowsperchunk, numrows - currow);
	workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
		  * SIZEOF(JSAMPLE)));
	for (i = rowsperchunk; i > 0; i--) {
	  result[currow++] = workspace;
	  workspace += samplesperrow;
	}
  }

  return result;
}

/*
 * Creation of 2-D coefficient-block arrays.
 * This is essentially the same as the code for sample arrays, above.
 */

METHODDEF(JBLOCKARRAY)
alloc_barray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION blocksperrow, JDIMENSION numrows)
/* Allocate a 2-D coefficient-block array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  JBLOCKARRAY result;
  JBLOCKROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) blocksperrow * SIZEOF(JBLOCK));
  if (ltemp <= 0)
	ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
  if (ltemp < (long) numrows)
	rowsperchunk = (JDIMENSION) ltemp;
  else
	rowsperchunk = numrows;
  mem->last_rowsperchunk = rowsperchunk;

  /* Get space for row pointers (small object) */
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
				     (size_t) (numrows * SIZEOF(JBLOCKROW)));

  /* Get the rows themselves (large objects) */
  currow = 0;
  while (currow < numrows) {
	rowsperchunk = MIN(rowsperchunk, numrows - currow);
	workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
		  * SIZEOF(JBLOCK)));
	for (i = rowsperchunk; i > 0; i--) {
	  result[currow++] = workspace;
	  workspace += blocksperrow;
	}
  }

  return result;
}

/*
 * About virtual array management:
 *
 * The above "normal" array routines are only used to allocate strip buffers
 * (as wide as the image, but just a few rows high).  Full-image-sized buffers
 * are handled as "virtual" arrays.  The array is still accessed a strip at a
 * time, but the memory manager must save the whole array for repeated
 * accesses.  The intended implementation is that there is a strip buffer in
 * memory (as high as is possible given the desired memory limit), plus a
 * backing file that holds the rest of the array.
 *
 * The request_virt_array routines are told the total size of the image and
 * the maximum number of rows that will be accessed at once.  The in-memory
 * buffer must be at least as large as the maxaccess value.
 *
 * The request routines create control blocks but not the in-memory buffers.
 * That is postponed until realize_virt_arrays is called.  At that time the
 * total amount of space needed is known (approximately, anyway), so free
 * memory can be divided up fairly.
 *
 * The access_virt_array routines are responsible for making a specific strip
 * area accessible (after reading or writing the backing file, if necessary).
 * Note that the access routines are told whether the caller intends to modify
 * the accessed strip; during a read-only pass this saves having to rewrite
 * data to disk.  The access routines are also responsible for pre-zeroing
 * any newly accessed rows, if pre-zeroing was requested.
 *
 * In current usage, the access requests are usually for nonoverlapping
 * strips; that is, successive access start_row numbers differ by exactly
 * num_rows = maxaccess.  This means we can get good performance with simple
 * buffer dump/reload logic, by making the in-memory buffer be a multiple
 * of the access height; then there will never be accesses across bufferload
 * boundaries.  The code will still work with overlapping access requests,
 * but it doesn't handle bufferload overlaps very efficiently.
 */

METHODDEF(jvirt_sarray_ptr)
request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION samplesperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D sample array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  jvirt_sarray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
	ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  /* get control block */
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
					  SIZEOF(struct jvirt_sarray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
  result->rows_in_array = numrows;
  result->samplesperrow = samplesperrow;
  result->maxaccess = maxaccess;
  result->pre_zero = pre_zero;
  result->b_s_open = FALSE;	/* no associated backing-store object */
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
  mem->virt_sarray_list = result;

  return result;
}

METHODDEF(jvirt_barray_ptr)
request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION blocksperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D coefficient-block array */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  jvirt_barray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
	ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

  /* get control block */
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
					  SIZEOF(struct jvirt_barray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
  result->rows_in_array = numrows;
  result->blocksperrow = blocksperrow;
  result->maxaccess = maxaccess;
  result->pre_zero = pre_zero;
  result->b_s_open = FALSE;	/* no associated backing-store object */
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
  mem->virt_barray_list = result;

  return result;
}

METHODDEF(void)
realize_virt_arrays (j_common_ptr cinfo)
/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  long space_per_minheight, maximum_space, avail_mem;
  long minheights, max_minheights;
  jvirt_sarray_ptr sptr;
  jvirt_barray_ptr bptr;

  /* Compute the minimum space needed (maxaccess rows in each buffer)
   * and the maximum space needed (full image height in each buffer).
   * These may be of use to the system-dependent jpeg_mem_available routine.
   */
  space_per_minheight = 0;
  maximum_space = 0;
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
	if (sptr->mem_buffer == NULL) { /* if not realized yet */
	  space_per_minheight += (long) sptr->maxaccess *
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
	  maximum_space += (long) sptr->rows_in_array *
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
	}
  }
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
	if (bptr->mem_buffer == NULL) { /* if not realized yet */
	  space_per_minheight += (long) bptr->maxaccess *
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
	  maximum_space += (long) bptr->rows_in_array *
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
	}
  }

  if (space_per_minheight <= 0)
	return;			/* no unrealized arrays, no work */

  /* Determine amount of memory to actually use; this is system-dependent. */
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
				 mem->total_space_allocated);

  /* If the maximum space needed is available, make all the buffers full
   * height; otherwise parcel it out with the same number of minheights
   * in each buffer.
   */
  if (avail_mem >= maximum_space)
	max_minheights = 1000000000L;
  else {
	max_minheights = avail_mem / space_per_minheight;
	/* If there doesn't seem to be enough space, try to get the minimum
	 * anyway.  This allows a "stub" implementation of jpeg_mem_available().
	 */
	if (max_minheights <= 0)
	  max_minheights = 1;
  }

  /* Allocate the in-memory buffers and initialize backing store as needed. */

  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
	if (sptr->mem_buffer == NULL) { /* if not realized yet */
	  minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
	  if (minheights <= max_minheights) {
	/* This buffer fits in memory */
	sptr->rows_in_mem = sptr->rows_in_array;
	  } else {
	/* It doesn't fit in memory, create backing store. */
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
				(long) sptr->rows_in_array *
				(long) sptr->samplesperrow *
				(long) SIZEOF(JSAMPLE));
	sptr->b_s_open = TRUE;
	  }
	  sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
				      sptr->samplesperrow, sptr->rows_in_mem);
	  sptr->rowsperchunk = mem->last_rowsperchunk;
	  sptr->cur_start_row = 0;
	  sptr->first_undef_row = 0;
	  sptr->dirty = FALSE;
	}
  }

  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
	if (bptr->mem_buffer == NULL) { /* if not realized yet */
	  minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
	  if (minheights <= max_minheights) {
	/* This buffer fits in memory */
	bptr->rows_in_mem = bptr->rows_in_array;
	  } else {
	/* It doesn't fit in memory, create backing store. */
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
				(long) bptr->rows_in_array *
				(long) bptr->blocksperrow *
				(long) SIZEOF(JBLOCK));
	bptr->b_s_open = TRUE;
	  }
	  bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
				      bptr->blocksperrow, bptr->rows_in_mem);
	  bptr->rowsperchunk = mem->last_rowsperchunk;
	  bptr->cur_start_row = 0;
	  bptr->first_undef_row = 0;
	  bptr->dirty = FALSE;
	}
  }
}

LOCAL(void)
do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual sample array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
  file_offset = ptr->cur_start_row * bytesperrow;
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
	/* One chunk, but check for short chunk at end of buffer */
	rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
	/* Transfer no more than is currently defined */
	thisrow = (long) ptr->cur_start_row + i;
	rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
	/* Transfer no more than fits in file */
	rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
	if (rows <= 0)		/* this chunk might be past end of file! */
	  break;
	byte_count = rows * bytesperrow;
	if (writing)
	  (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
					    (void FAR *) ptr->mem_buffer[i],
					    file_offset, byte_count);
	else
	  (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
	file_offset += byte_count;
  }
}

LOCAL(void)
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
  file_offset = ptr->cur_start_row * bytesperrow;
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
	/* One chunk, but check for short chunk at end of buffer */
	rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
	/* Transfer no more than is currently defined */
	thisrow = (long) ptr->cur_start_row + i;
	rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
	/* Transfer no more than fits in file */
	rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
	if (rows <= 0)		/* this chunk might be past end of file! */
	  break;
	byte_count = rows * bytesperrow;
	if (writing)
	  (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
					    (void FAR *) ptr->mem_buffer[i],
					    file_offset, byte_count);
	else
	  (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
					   (void FAR *) ptr->mem_buffer[i],
					   file_offset, byte_count);
	file_offset += byte_count;
  }
}

METHODDEF(JSAMPARRAY)
access_virt_sarray (j_common_ptr cinfo, jvirt_sarray_ptr ptr,
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual sample array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
  JDIMENSION end_row = start_row + num_rows;
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
	  ptr->mem_buffer == NULL)
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
	  end_row > ptr->cur_start_row+ptr->rows_in_mem) {
	if (! ptr->b_s_open)
	  ERREXIT(cinfo, JERR_VIRTUAL_BUG);
	/* Flush old buffer contents if necessary */
	if (ptr->dirty) {
	  do_sarray_io(cinfo, ptr, TRUE);
	  ptr->dirty = FALSE;
	}
	/* Decide what part of virtual array to access.
	 * Algorithm: if target address > current window, assume forward scan,
	 * load starting at target address.  If target address < current window,
	 * assume backward scan, load so that target area is top of window.
	 * Note that when switching from forward write to forward read, will have
	 * start_row = 0, so the limiting case applies and we load from 0 anyway.
	 */
	if (start_row > ptr->cur_start_row) {
	  ptr->cur_start_row = start_row;
	} else {
	  /* use long arithmetic here to avoid overflow & unsigned problems */
	  long ltemp;

	  ltemp = (long) end_row - (long) ptr->rows_in_mem;
	  if (ltemp < 0)
	ltemp = 0;		/* don't fall off front end of file */
	  ptr->cur_start_row = (JDIMENSION) ltemp;
	}
	/* Read in the selected part of the array.
	 * During the initial write pass, we will do no actual read
	 * because the selected part is all undefined.
	 */
	do_sarray_io(cinfo, ptr, FALSE);
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
	if (ptr->first_undef_row < start_row) {
	  if (writable)		/* writer skipped over a section of array */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
	  undef_row = start_row;	/* but reader is allowed to read ahead */
	} else {
	  undef_row = ptr->first_undef_row;
	}
	if (writable)
	  ptr->first_undef_row = end_row;
	if (ptr->pre_zero) {
	  size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
	  undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
	  end_row -= ptr->cur_start_row;
	  while (undef_row < end_row) {
	jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
	undef_row++;
	  }
	} else {
	  if (! writable)		/* reader looking at undefined data */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
	}
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
	ptr->dirty = TRUE;
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
}

METHODDEF(JBLOCKARRAY)
access_virt_barray (j_common_ptr cinfo, jvirt_barray_ptr ptr,
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual block array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
  JDIMENSION end_row = start_row + num_rows;
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
	  ptr->mem_buffer == NULL)
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
	  end_row > ptr->cur_start_row+ptr->rows_in_mem) {
	if (! ptr->b_s_open)
	  ERREXIT(cinfo, JERR_VIRTUAL_BUG);
	/* Flush old buffer contents if necessary */
	if (ptr->dirty) {
	  do_barray_io(cinfo, ptr, TRUE);
	  ptr->dirty = FALSE;
	}
	/* Decide what part of virtual array to access.
	 * Algorithm: if target address > current window, assume forward scan,
	 * load starting at target address.  If target address < current window,
	 * assume backward scan, load so that target area is top of window.
	 * Note that when switching from forward write to forward read, will have
	 * start_row = 0, so the limiting case applies and we load from 0 anyway.
	 */
	if (start_row > ptr->cur_start_row) {
	  ptr->cur_start_row = start_row;
	} else {
	  /* use long arithmetic here to avoid overflow & unsigned problems */
	  long ltemp;

	  ltemp = (long) end_row - (long) ptr->rows_in_mem;
	  if (ltemp < 0)
	ltemp = 0;		/* don't fall off front end of file */
	  ptr->cur_start_row = (JDIMENSION) ltemp;
	}
	/* Read in the selected part of the array.
	 * During the initial write pass, we will do no actual read
	 * because the selected part is all undefined.
	 */
	do_barray_io(cinfo, ptr, FALSE);
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
	if (ptr->first_undef_row < start_row) {
	  if (writable)		/* writer skipped over a section of array */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
	  undef_row = start_row;	/* but reader is allowed to read ahead */
	} else {
	  undef_row = ptr->first_undef_row;
	}
	if (writable)
	  ptr->first_undef_row = end_row;
	if (ptr->pre_zero) {
	  size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
	  undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
	  end_row -= ptr->cur_start_row;
	  while (undef_row < end_row) {
	jzero_far((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
	undef_row++;
	  }
	} else {
	  if (! writable)		/* reader looking at undefined data */
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
	}
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
	ptr->dirty = TRUE;
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
}

/*
 * Release all objects belonging to a specified pool.
 */

METHODDEF(void)
free_pool (j_common_ptr cinfo, int pool_id)
{
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
	ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */

#ifdef MEM_STATS
  if (cinfo->err->trace_level > 1)
	print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

  /* If freeing IMAGE pool, close any virtual arrays first */
  if (pool_id == JPOOL_IMAGE) {
	jvirt_sarray_ptr sptr;
	jvirt_barray_ptr bptr;

	for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
	  if (sptr->b_s_open) {	/* there may be no backing store */
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
	  }
	}
	mem->virt_sarray_list = NULL;
	for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
	  if (bptr->b_s_open) {	/* there may be no backing store */
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
	  }
	}
	mem->virt_barray_list = NULL;
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
  mem->large_list[pool_id] = NULL;

  while (lhdr_ptr != NULL) {
	large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
	space_freed = lhdr_ptr->hdr.bytes_used +
		  lhdr_ptr->hdr.bytes_left +
		  SIZEOF(large_pool_hdr);
	jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
	mem->total_space_allocated -= space_freed;
	lhdr_ptr = next_lhdr_ptr;
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
  mem->small_list[pool_id] = NULL;

  while (shdr_ptr != NULL) {
	small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
	space_freed = shdr_ptr->hdr.bytes_used +
		  shdr_ptr->hdr.bytes_left +
		  SIZEOF(small_pool_hdr);
	jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
	mem->total_space_allocated -= space_freed;
	shdr_ptr = next_shdr_ptr;
  }
}

/*
 * Close up shop entirely.
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
  int pool;

  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
	free_pool(cinfo, pool);
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
  cinfo->mem = NULL;		/* ensures I will be called only once */

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
}

/*
 * Memory manager initialization.
 * When this is called, only the error manager pointer is valid in cinfo!
 */

GLOBAL(void)
jinit_memory_mgr (j_common_ptr cinfo)
{
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */

  /* Check for configuration errors.
   * SIZEOF(ALIGN_TYPE) should be a power of 2; otherwise, it probably
   * doesn't reflect any real hardware alignment requirement.
   * The test is a little tricky: for X>0, X and X-1 have no one-bits
   * in common if and only if X is a power of 2, ie has only one one-bit.
   * Some compilers may give an "unreachable code" warning here; ignore it.
   */
  if ((SIZEOF(ALIGN_TYPE) & (SIZEOF(ALIGN_TYPE)-1)) != 0)
	ERREXIT(cinfo, JERR_BAD_ALIGN_TYPE);
  /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
   * a multiple of SIZEOF(ALIGN_TYPE).
   * Again, an "unreachable code" warning may be ignored here.
   * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
   */
  test_mac = (size_t) MAX_ALLOC_CHUNK;
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
	  (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
	ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));

  if (mem == NULL) {
	jpeg_mem_term(cinfo);	/* system-dependent cleanup */
	ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
  mem->pub.alloc_large = alloc_large;
  mem->pub.alloc_sarray = alloc_sarray;
  mem->pub.alloc_barray = alloc_barray;
  mem->pub.request_virt_sarray = request_virt_sarray;
  mem->pub.request_virt_barray = request_virt_barray;
  mem->pub.realize_virt_arrays = realize_virt_arrays;
  mem->pub.access_virt_sarray = access_virt_sarray;
  mem->pub.access_virt_barray = access_virt_barray;
  mem->pub.free_pool = free_pool;
  mem->pub.self_destruct = self_destruct;

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
	mem->small_list[pool] = NULL;
	mem->large_list[pool] = NULL;
  }
  mem->virt_sarray_list = NULL;
  mem->virt_barray_list = NULL;

  mem->total_space_allocated = SIZEOF(my_memory_mgr);

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;

  /* Check for an environment variable JPEGMEM; if found, override the
   * default max_memory setting from jpeg_mem_init.  Note that the
   * surrounding application may again override this value.
   * If your system doesn't support getenv(), define NO_GETENV to disable
   * this feature.
   */
#ifndef NO_GETENV
  { char * memenv;

	if ((memenv = getenv("JPEGMEM")) != NULL) {
	  char ch = 'x';

	  if (sscanf(memenv, "%ld%c", &max_to_use, &ch) > 0) {
	if (ch == 'm' || ch == 'M')
	  max_to_use *= 1000L;
	mem->pub.max_memory_to_use = max_to_use * 1000L;
	  }
	}
  }
#endif

}

/*** End of inlined file: jmemmgr.c ***/


/*** Start of inlined file: jmemnobs.c ***/
#define JPEG_INTERNALS

#ifndef HAVE_STDLIB_H		/* <stdlib.h> should declare malloc(),free() */
extern void * malloc JPP((size_t size));
extern void free JPP((void *ptr));
#endif

/*
 * Memory allocation and freeing are controlled by the regular library
 * routines malloc() and free().
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr , size_t sizeofobject)
{
  return (void *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_small (j_common_ptr , void * object, size_t)
{
  free(object);
}

/*
 * "Large" objects are treated the same as "small" ones.
 * NB: although we include FAR keywords in the routine declarations,
 * this file won't actually work in 80x86 small/medium model; at least,
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr, size_t sizeofobject)
{
  return (void FAR *) malloc(sizeofobject);
}

GLOBAL(void)
jpeg_free_large (j_common_ptr, void FAR * object, size_t)
{
  free(object);
}

/*
 * This routine computes the total memory space available for allocation.
 * Here we always say, "we got all you want bud!"
 */

GLOBAL(long)
jpeg_mem_available (j_common_ptr, long,
		    long max_bytes_needed, long)
{
  return max_bytes_needed;
}

/*
 * Backing store (temporary file) management.
 * Since jpeg_mem_available always promised the moon,
 * this should never be called and we can just error out.
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, struct backing_store_struct *,
			 long )
{
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
}

/*
 * These routines take care of any system-dependent initialization and
 * cleanup required.  Here, there isn't any.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr)
{
  return 0;			/* just set max_memory_to_use to 0 */
}

GLOBAL(void)
jpeg_mem_term (j_common_ptr)
{
  /* no work */
}

/*** End of inlined file: jmemnobs.c ***/


/*** Start of inlined file: jquant1.c ***/
#define JPEG_INTERNALS

#ifdef QUANT_1PASS_SUPPORTED

/*
 * The main purpose of 1-pass quantization is to provide a fast, if not very
 * high quality, colormapped output capability.  A 2-pass quantizer usually
 * gives better visual quality; however, for quantized grayscale output this
 * quantizer is perfectly adequate.  Dithering is highly recommended with this
 * quantizer, though you can turn it off if you really want to.
 *
 * In 1-pass quantization the colormap must be chosen in advance of seeing the
 * image.  We use a map consisting of all combinations of Ncolors[i] color
 * values for the i'th component.  The Ncolors[] values are chosen so that
 * their product, the total number of colors, is no more than that requested.
 * (In most cases, the product will be somewhat less.)
 *
 * Since the colormap is orthogonal, the representative value for each color
 * component can be determined without considering the other components;
 * then these indexes can be combined into a colormap index by a standard
 * N-dimensional-array-subscript calculation.  Most of the arithmetic involved
 * can be precalculated and stored in the lookup table colorindex[].
 * colorindex[i][j] maps pixel value j in component i to the nearest
 * representative value (grid plane) for that component; this index is
 * multiplied by the array stride for component i, so that the
 * index of the colormap entry closest to a given pixel value is just
 *    sum( colorindex[component-number][pixel-component-value] )
 * Aside from being fast, this scheme allows for variable spacing between
 * representative values with no additional lookup cost.
 *
 * If gamma correction has been applied in color conversion, it might be wise
 * to adjust the color grid spacing so that the representative colors are
 * equidistant in linear space.  At this writing, gamma correction is not
 * implemented by jdcolor, so nothing is done here.
 */

/* Declarations for ordered dithering.
 *
 * We use a standard 16x16 ordered dither array.  The basic concept of ordered
 * dithering is described in many references, for instance Dale Schumacher's
 * chapter II.2 of Graphics Gems II (James Arvo, ed. Academic Press, 1991).
 * In place of Schumacher's comparisons against a "threshold" value, we add a
 * "dither" value to the input pixel and then round the result to the nearest
 * output value.  The dither value is equivalent to (0.5 - threshold) times
 * the distance between output values.  For ordered dithering, we assume that
 * the output colors are equally spaced; if not, results will probably be
 * worse, since the dither may be too much or too little at a given point.
 *
 * The normal calculation would be to form pixel value + dither, range-limit
 * this to 0..MAXJSAMPLE, and then index into the colorindex table as usual.
 * We can skip the separate range-limiting step by extending the colorindex
 * table in both directions.
 */

#define ODITHER_SIZE  16	/* dimension of dither matrix */
/* NB: if ODITHER_SIZE is not a power of 2, ODITHER_MASK uses will break */
#define ODITHER_CELLS (ODITHER_SIZE*ODITHER_SIZE)	/* # cells in matrix */
#define ODITHER_MASK  (ODITHER_SIZE-1) /* mask for wrapping around counters */

typedef int ODITHER_MATRIX[ODITHER_SIZE][ODITHER_SIZE];
typedef int (*ODITHER_MATRIX_PTR)[ODITHER_SIZE];

static const UINT8 base_dither_matrix[ODITHER_SIZE][ODITHER_SIZE] = {
  /* Bayer's order-4 dither array.  Generated by the code given in
   * Stephen Hawley's article "Ordered Dithering" in Graphics Gems I.
   * The values in this array must range from 0 to ODITHER_CELLS-1.
   */
  {   0,192, 48,240, 12,204, 60,252,  3,195, 51,243, 15,207, 63,255 },
  { 128, 64,176,112,140, 76,188,124,131, 67,179,115,143, 79,191,127 },
  {  32,224, 16,208, 44,236, 28,220, 35,227, 19,211, 47,239, 31,223 },
  { 160, 96,144, 80,172,108,156, 92,163, 99,147, 83,175,111,159, 95 },
  {   8,200, 56,248,  4,196, 52,244, 11,203, 59,251,  7,199, 55,247 },
  { 136, 72,184,120,132, 68,180,116,139, 75,187,123,135, 71,183,119 },
  {  40,232, 24,216, 36,228, 20,212, 43,235, 27,219, 39,231, 23,215 },
  { 168,104,152, 88,164,100,148, 84,171,107,155, 91,167,103,151, 87 },
  {   2,194, 50,242, 14,206, 62,254,  1,193, 49,241, 13,205, 61,253 },
  { 130, 66,178,114,142, 78,190,126,129, 65,177,113,141, 77,189,125 },
  {  34,226, 18,210, 46,238, 30,222, 33,225, 17,209, 45,237, 29,221 },
  { 162, 98,146, 82,174,110,158, 94,161, 97,145, 81,173,109,157, 93 },
  {  10,202, 58,250,  6,198, 54,246,  9,201, 57,249,  5,197, 53,245 },
  { 138, 74,186,122,134, 70,182,118,137, 73,185,121,133, 69,181,117 },
  {  42,234, 26,218, 38,230, 22,214, 41,233, 25,217, 37,229, 21,213 },
  { 170,106,154, 90,166,102,150, 86,169,105,153, 89,165,101,149, 85 }
};

/* Declarations for Floyd-Steinberg dithering.
 *
 * Errors are accumulated into the array fserrors[], at a resolution of
 * 1/16th of a pixel count.  The error at a given pixel is propagated
 * to its not-yet-processed neighbors using the standard F-S fractions,
 *		...	(here)	7/16
 *		3/16	5/16	1/16
 * We work left-to-right on even rows, right-to-left on odd rows.
 *
 * We can get away with a single array (holding one row's worth of errors)
 * by using it to store the current row's errors at pixel columns not yet
 * processed, but the next row's errors at columns already processed.  We
 * need only a few extra variables to hold the errors immediately around the
 * current column.  (If we are lucky, those variables are in registers, but
 * even if not, they're probably cheaper to access than array elements are.)
 *
 * The fserrors[] array is indexed [component#][position].
 * We provide (#columns + 2) entries per component; the extra entry at each
 * end saves us from special-casing the first and last pixels.
 *
 * Note: on a wide image, we might not have enough room in a PC's near data
 * segment to hold the error array; so it is allocated with alloc_large.
 */

#if BITS_IN_JSAMPLE == 8
typedef INT16 FSERROR;		/* 16 bits should be enough */
typedef int LOCFSERROR;		/* use 'int' for calculation temps */
#else
typedef INT32 FSERROR;		/* may need more than 16 bits */
typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
#endif

typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */

/* Private subobject */

#define MAX_Q_COMPS 4		/* max components I can handle */

typedef struct {
  struct jpeg_color_quantizer pub; /* public fields */

  /* Initially allocated colormap is saved here */
  JSAMPARRAY sv_colormap;	/* The color map as a 2-D pixel array */
  int sv_actual;		/* number of entries in use */

  JSAMPARRAY colorindex;	/* Precomputed mapping for speed */
  /* colorindex[i][j] = index of color closest to pixel value j in component i,
   * premultiplied as described above.  Since colormap indexes must fit into
   * JSAMPLEs, the entries of this array will too.
   */
  boolean is_padded;		/* is the colorindex padded for odither? */

  int Ncolors[MAX_Q_COMPS];	/* # of values alloced to each component */

  /* Variables for ordered dithering */
  int row_index;		/* cur row's vertical index in dither matrix */
  ODITHER_MATRIX_PTR odither[MAX_Q_COMPS]; /* one dither array per component */

  /* Variables for Floyd-Steinberg dithering */
  FSERRPTR fserrors[MAX_Q_COMPS]; /* accumulated errors */
  boolean on_odd_row;		/* flag to remember which row we are on */
} my_cquantizer;

typedef my_cquantizer * my_cquantize_ptr;

/*
 * Policy-making subroutines for create_colormap and create_colorindex.
 * These routines determine the colormap to be used.  The rest of the module
 * only assumes that the colormap is orthogonal.
 *
 *  * select_ncolors decides how to divvy up the available colors
 *    among the components.
 *  * output_value defines the set of representative values for a component.
 *  * largest_input_value defines the mapping from input values to
 *    representative values for a component.
 * Note that the latter two routines may impose different policies for
 * different components, though this is not currently done.
 */

LOCAL(int)
select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
/* Determine allocation of desired colors to components, */
/* and fill in Ncolors[] array to indicate choice. */
/* Return value is total number of colors (product of Ncolors[] values). */
{
  int nc = cinfo->out_color_components; /* number of color components */
  int max_colors = cinfo->desired_number_of_colors;
  int total_colors, iroot, i, j;
  boolean changed;
  long temp;
  static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };

  /* We can allocate at least the nc'th root of max_colors per component. */
  /* Compute floor(nc'th root of max_colors). */
  iroot = 1;
  do {
	iroot++;
	temp = iroot;		/* set temp = iroot ** nc */
	for (i = 1; i < nc; i++)
	  temp *= iroot;
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
  iroot--;			/* now iroot = floor(root) */

  /* Must have at least 2 color values per component */
  if (iroot < 2)
	ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);

  /* Initialize to iroot color values for each component */
  total_colors = 1;
  for (i = 0; i < nc; i++) {
	Ncolors[i] = iroot;
	total_colors *= iroot;
  }
  /* We may be able to increment the count for one or more components without
   * exceeding max_colors, though we know not all can be incremented.
   * Sometimes, the first component can be incremented more than once!
   * (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
   * In RGB colorspace, try to increment G first, then R, then B.
   */
  do {
	changed = FALSE;
	for (i = 0; i < nc; i++) {
	  j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
	  /* calculate new total_colors if Ncolors[j] is incremented */
	  temp = total_colors / Ncolors[j];
	  temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
	  if (temp > (long) max_colors)
	break;			/* won't fit, done with this pass */
	  Ncolors[j]++;		/* OK, apply the increment */
	  total_colors = (int) temp;
	  changed = TRUE;
	}
  } while (changed);

  return total_colors;
}

LOCAL(int)
output_value (j_decompress_ptr, int, int j, int maxj)
/* Return j'th output value, where j will range from 0 to maxj */
/* The output values must fall in 0..MAXJSAMPLE in increasing order */
{
  /* We always provide values 0 and MAXJSAMPLE for each component;
   * any additional values are equally spaced between these limits.
   * (Forcing the upper and lower values to the limits ensures that
   * dithering can't produce a color outside the selected gamut.)
   */
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
}

LOCAL(int)
largest_input_value (j_decompress_ptr, int, int j, int maxj)
/* Return largest input value that should map to j'th output value */
/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
{
  /* Breakpoints are halfway between values returned by output_value */
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
}

/*
 * Create the colormap.
 */

LOCAL(void)
create_colormap (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPARRAY colormap;		/* Created colormap */
  int total_colors;		/* Number of distinct output colors */
  int i,j,k, nci, blksize, blkdist, ptr, val;

  /* Select number of colors for each component */
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);

  /* Report selected color counts */
  if (cinfo->out_color_components == 3)
	TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
	     total_colors, cquantize->Ncolors[0],
	     cquantize->Ncolors[1], cquantize->Ncolors[2]);
  else
	TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);

  /* Allocate and fill in the colormap. */
  /* The colors are ordered in the map in standard row-major order, */
  /* i.e. rightmost (highest-indexed) color changes most rapidly. */

  colormap = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  /* blkdist is distance between groups of identical entries for a component */
  blkdist = total_colors;

  for (i = 0; i < cinfo->out_color_components; i++) {
	/* fill in colormap entries for i'th color component */
	nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
	blksize = blkdist / nci;
	for (j = 0; j < nci; j++) {
	  /* Compute j'th output value (out of nci) for component */
	  val = output_value(cinfo, i, j, nci-1);
	  /* Fill in all colormap entries that have this value of this component */
	  for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
	/* fill in blksize entries beginning at ptr */
	for (k = 0; k < blksize; k++)
	  colormap[i][ptr+k] = (JSAMPLE) val;
	  }
	}
	blkdist = blksize;		/* blksize of this color is blkdist of next */
  }

  /* Save the colormap in private storage,
   * where it will survive color quantization mode changes.
   */
  cquantize->sv_colormap = colormap;
  cquantize->sv_actual = total_colors;
}

/*
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPROW indexptr;
  int i,j,k, nci, blksize, val, pad;

  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
	pad = MAXJSAMPLE*2;
	cquantize->is_padded = TRUE;
  } else {
	pad = 0;
	cquantize->is_padded = FALSE;
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) (MAXJSAMPLE+1 + pad),
	 (JDIMENSION) cinfo->out_color_components);

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;

  for (i = 0; i < cinfo->out_color_components; i++) {
	/* fill in colorindex entries for i'th color component */
	nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
	blksize = blksize / nci;

	/* adjust colorindex pointers to provide padding at negative indexes. */
	if (pad)
	  cquantize->colorindex[i] += MAXJSAMPLE;

	/* in loop, val = index of current output value, */
	/* and k = largest j that maps to current val */
	indexptr = cquantize->colorindex[i];
	val = 0;
	k = largest_input_value(cinfo, i, 0, nci-1);
	for (j = 0; j <= MAXJSAMPLE; j++) {
	  while (j > k)		/* advance val if past boundary */
	k = largest_input_value(cinfo, i, ++val, nci-1);
	  /* premultiply so that no multiplication needed in main processing */
	  indexptr[j] = (JSAMPLE) (val * blksize);
	}
	/* Pad at both ends if necessary */
	if (pad)
	  for (j = 1; j <= MAXJSAMPLE; j++) {
	indexptr[-j] = indexptr[0];
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
	  }
  }
}

/*
 * Create an ordered-dither array for a component having ncolors
 * distinct output values.
 */

LOCAL(ODITHER_MATRIX_PTR)
make_odither_array (j_decompress_ptr cinfo, int ncolors)
{
  ODITHER_MATRIX_PTR odither;
  int j,k;
  INT32 num,den;

  odither = (ODITHER_MATRIX_PTR)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(ODITHER_MATRIX));
  /* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
   * Hence the dither value for the matrix cell with fill order f
   * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
   * On 16-bit-int machine, be careful to avoid overflow.
   */
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
  for (j = 0; j < ODITHER_SIZE; j++) {
	for (k = 0; k < ODITHER_SIZE; k++) {
	  num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
	    * MAXJSAMPLE;
	  /* Ensure round towards zero despite C's lack of consistency
	   * about rounding negative values in integer division...
	   */
	  odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
	}
  }
  return odither;
}

/*
 * Create the ordered-dither tables.
 * Components having the same number of representative colors may
 * share a dither table.
 */

LOCAL(void)
create_odither_tables (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  ODITHER_MATRIX_PTR odither;
  int i, j, nci;

  for (i = 0; i < cinfo->out_color_components; i++) {
	nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
	odither = NULL;		/* search for matching prior component */
	for (j = 0; j < i; j++) {
	  if (nci == cquantize->Ncolors[j]) {
	odither = cquantize->odither[j];
	break;
	  }
	}
	if (odither == NULL)	/* need a new table? */
	  odither = make_odither_array(cinfo, nci);
	cquantize->odither[i] = odither;
  }
}

/*
 * Map some rows of pixels to the output colormapped representation.
 */

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  JSAMPARRAY colorindex = cquantize->colorindex;
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  register int nc = cinfo->out_color_components;

  for (row = 0; row < num_rows; row++) {
	ptrin = input_buf[row];
	ptrout = output_buf[row];
	for (col = width; col > 0; col--) {
	  pixcode = 0;
	  for (ci = 0; ci < nc; ci++) {
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
	  }
	  *ptrout++ = (JSAMPLE) pixcode;
	}
  }
}

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
	ptrin = input_buf[row];
	ptrout = output_buf[row];
	for (col = width; col > 0; col--) {
	  pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
	  pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
	  pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
	  *ptrout++ = (JSAMPLE) pixcode;
	}
  }
}

METHODDEF(void)
quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		     JSAMPARRAY output_buf, int num_rows)
/* General case, with ordered dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  int * dither;			/* points to active row of dither matrix */
  int row_index, col_index;	/* current indexes into dither matrix */
  int nc = cinfo->out_color_components;
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
	/* Initialize output values to 0 so can process components separately */
	jzero_far((void FAR *) output_buf[row],
	      (size_t) (width * SIZEOF(JSAMPLE)));
	row_index = cquantize->row_index;
	for (ci = 0; ci < nc; ci++) {
	  input_ptr = input_buf[row] + ci;
	  output_ptr = output_buf[row];
	  colorindex_ci = cquantize->colorindex[ci];
	  dither = cquantize->odither[ci][row_index];
	  col_index = 0;

	  for (col = width; col > 0; col--) {
	/* Form pixel value + dither, range-limit to 0..MAXJSAMPLE,
	 * select output value, accumulate into output code for this pixel.
	 * Range-limiting need not be done explicitly, as we have extended
	 * the colorindex table to produce the right answers for out-of-range
	 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
	 * required amount of padding.
	 */
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
	input_ptr += nc;
	output_ptr++;
	col_index = (col_index + 1) & ODITHER_MASK;
	  }
	}
	/* Advance row index for next row */
	row_index = (row_index + 1) & ODITHER_MASK;
	cquantize->row_index = row_index;
  }
}

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
  JSAMPROW colorindex1 = cquantize->colorindex[1];
  JSAMPROW colorindex2 = cquantize->colorindex[2];
  int * dither0;		/* points to active row of dither matrix */
  int * dither1;
  int * dither2;
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
	row_index = cquantize->row_index;
	input_ptr = input_buf[row];
	output_ptr = output_buf[row];
	dither0 = cquantize->odither[0][row_index];
	dither1 = cquantize->odither[1][row_index];
	dither2 = cquantize->odither[2][row_index];
	col_index = 0;

	for (col = width; col > 0; col--) {
	  pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
					dither0[col_index]]);
	  pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
					dither1[col_index]]);
	  pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
					dither2[col_index]]);
	  *output_ptr++ = (JSAMPLE) pixcode;
	  col_index = (col_index + 1) & ODITHER_MASK;
	}
	row_index = (row_index + 1) & ODITHER_MASK;
	cquantize->row_index = row_index;
  }
}

METHODDEF(void)
quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		    JSAMPARRAY output_buf, int num_rows)
/* General case, with Floyd-Steinberg dithering */
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  register LOCFSERROR cur;	/* current error or pixel value */
  LOCFSERROR belowerr;		/* error for pixel below cur */
  LOCFSERROR bpreverr;		/* error for below/prev col */
  LOCFSERROR bnexterr;		/* error for below/next col */
  LOCFSERROR delta;
  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  JSAMPROW colormap_ci;
  int pixcode;
  int nc = cinfo->out_color_components;
  int dir;			/* 1 for left-to-right, -1 for right-to-left */
  int dirnc;			/* dir * nc */
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
	/* Initialize output values to 0 so can process components separately */
	jzero_far((void FAR *) output_buf[row],
	      (size_t) (width * SIZEOF(JSAMPLE)));
	for (ci = 0; ci < nc; ci++) {
	  input_ptr = input_buf[row] + ci;
	  output_ptr = output_buf[row];
	  if (cquantize->on_odd_row) {
	/* work right to left in this row */
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
	output_ptr += width-1;
	dir = -1;
	dirnc = -nc;
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
	  } else {
	/* work left to right in this row */
	dir = 1;
	dirnc = nc;
	errorptr = cquantize->fserrors[ci]; /* => entry before first column */
	  }
	  colorindex_ci = cquantize->colorindex[ci];
	  colormap_ci = cquantize->sv_colormap[ci];
	  /* Preset error values: no error propagated to first pixel from left */
	  cur = 0;
	  /* and no error propagated to row below yet */
	  belowerr = bpreverr = 0;

	  for (col = width; col > 0; col--) {
	/* cur holds the error propagated from the previous pixel on the
	 * current line.  Add the error propagated from the previous line
	 * to form the complete error correction term for this pixel, and
	 * round the error term (which is expressed * 16) to an integer.
	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
	 * for either sign of the error value.
	 * Note: errorptr points to *previous* column's array entry.
	 */
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
	 * The maximum error is +- MAXJSAMPLE; this sets the required size
	 * of the range_limit array.
	 */
	cur += GETJSAMPLE(*input_ptr);
	cur = GETJSAMPLE(range_limit[cur]);
	/* Select output value, accumulate into output code for this pixel */
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
	*output_ptr += (JSAMPLE) pixcode;
	/* Compute actual representation error at this pixel */
	/* Note: we can do this even though we don't have the final */
	/* pixel code, because the colormap is orthogonal. */
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
	/* Compute error fractions to be propagated to adjacent pixels.
	 * Add these into the running sums, and simultaneously shift the
	 * next-line error sums left by 1 column.
	 */
	bnexterr = cur;
	delta = cur * 2;
	cur += delta;		/* form error * 3 */
	errorptr[0] = (FSERROR) (bpreverr + cur);
	cur += delta;		/* form error * 5 */
	bpreverr = belowerr + cur;
	belowerr = bnexterr;
	cur += delta;		/* form error * 7 */
	/* At this point cur contains the 7/16 error value to be propagated
	 * to the next pixel on the current line, and all the errors for the
	 * next line have been shifted over. We are therefore ready to move on.
	 */
	input_ptr += dirnc;	/* advance input ptr to next column */
	output_ptr += dir;	/* advance output ptr to next column */
	errorptr += dir;	/* advance errorptr to current column */
	  }
	  /* Post-loop cleanup: we must unload the final error value into the
	   * final fserrors[] entry.  Note we need not unload belowerr because
	   * it is for the dummy column before or after the actual array.
	   */
	  errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
	}
	cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
  }
}

/*
 * Allocate workspace for Floyd-Steinberg errors.
 */

LOCAL(void)
alloc_fs_workspace (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
  for (i = 0; i < cinfo->out_color_components; i++) {
	cquantize->fserrors[i] = (FSERRPTR)
	  (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
  }
}

/*
 * Initialize for one-pass color quantization.
 */

METHODDEF(void)
start_pass_1_quant (j_decompress_ptr cinfo, boolean)
{
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
  size_t arraysize;
  int i;

  /* Install my colormap. */
  cinfo->colormap = cquantize->sv_colormap;
  cinfo->actual_number_of_colors = cquantize->sv_actual;

  /* Initialize for desired dithering mode. */
  switch (cinfo->dither_mode) {
  case JDITHER_NONE:
	if (cinfo->out_color_components == 3)
	  cquantize->pub.color_quantize = color_quantize3;
	else
	  cquantize->pub.color_quantize = color_quantize;
	break;
  case JDITHER_ORDERED:
	if (cinfo->out_color_components == 3)
	  cquantize->pub.color_quantize = quantize3_ord_dither;
	else
	  cquantize->pub.color_quantize = quantize_ord_dither;
	cquantize->row_index = 0;	/* initialize state for ordered dither */
	/* If user changed to ordered dither from another mode,
	 * we must recreate the color index table with padding.
	 * This will cost extra space, but probably isn't very likely.
	 */
	if (! cquantize->is_padded)
	  create_colorindex(cinfo);
	/* Create ordered-dither tables if we didn't already. */
	if (cquantize->odither[0] == NULL)
	  create_odither_tables(cinfo);
	break;
  case JDITHER_FS:
	cquantize->pub.color_quantize = quantize_fs_dither;
	cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
	/* Allocate Floyd-Steinberg workspace if didn't already. */
	if (cquantize->fserrors[0] == NULL)
	  alloc_fs_workspace(cinfo);
	/* Initialize the propagated errors to zero. */
	arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
	for (i = 0; i < cinfo->out_color_components; i++)
	  jzero_far((void FAR *) cquantize->fserrors[i], arraysize);
	break;
  default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
	break;
  }
}

/*
 * Finish up at the end of the pass.
 */

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr)
{
  /* no work in 1-pass case */
}

/*
 * Switch to a new external colormap between output passes.
 * Shouldn't get to this module!
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
  ERREXIT(cinfo, JERR_MODE_CHANGE);
}

/*
 * Module initialization routine for 1-pass color quantization.
 */

GLOBAL(void)
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_1_quant;
  cquantize->pub.finish_pass = finish_pass_1_quant;
  cquantize->pub.new_color_map = new_color_map_1_quant;
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
	ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
	ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
  create_colorindex(cinfo);

  /* Allocate Floyd-Steinberg workspace now if requested.
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
	alloc_fs_workspace(cinfo);
}

#endif /* QUANT_1PASS_SUPPORTED */

/*** End of inlined file: jquant1.c ***/


/*** Start of inlined file: jquant2.c ***/
#define JPEG_INTERNALS

#ifdef QUANT_2PASS_SUPPORTED

/*
 * This module implements the well-known Heckbert paradigm for color
 * quantization.  Most of the ideas used here can be traced back to
 * Heckbert's seminal paper
 *   Heckbert, Paul.  "Color Image Quantization for Frame Buffer Display",
 *   Proc. SIGGRAPH '82, Computer Graphics v.16 #3 (July 1982), pp 297-304.
 *
 * In the first pass over the image, we accumulate a histogram showing the
 * usage count of each possible color.  To keep the histogram to a reasonable
 * size, we reduce the precision of the input; typical practice is to retain
 * 5 or 6 bits per color, so that 8 or 4 different input values are counted
 * in the same histogram cell.
 *
 * Next, the color-selection step begins with a box representing the whole
 * color space, and repeatedly splits the "largest" remaining box until we
 * have as many boxes as desired colors.  Then the mean color in each
 * remaining box becomes one of the possible output colors.
 *
 * The second pass over the image maps each input pixel to the closest output
 * color (optionally after applying a Floyd-Steinberg dithering correction).
 * This mapping is logically trivial, but making it go fast enough requires
 * considerable care.
 *
 * Heckbert-style quantizers vary a good deal in their policies for choosing
 * the "largest" box and deciding where to cut it.  The particular policies
 * used here have proved out well in experimental comparisons, but better ones
 * may yet be found.
 *
 * In earlier versions of the IJG code, this module quantized in YCbCr color
 * space, processing the raw upsampled data without a color conversion step.
 * This allowed the color conversion math to be done only once per colormap
 * entry, not once per pixel.  However, that optimization precluded other
 * useful optimizations (such as merging color conversion with upsampling)
 * and it also interfered with desired capabilities such as quantizing to an
 * externally-supplied colormap.  We have therefore abandoned that approach.
 * The present code works in the post-conversion color space, typically RGB.
 *
 * To improve the visual quality of the results, we actually work in scaled
 * RGB space, giving G distances more weight than R, and R in turn more than
 * B.  To do everything in integer math, we must use integer scale factors.
 * The 2/3/1 scale factors used here correspond loosely to the relative
 * weights of the colors in the NTSC grayscale equation.
 * If you want to use this code to quantize a non-RGB color space, you'll
 * probably need to change these scale factors.
 */

#define R_SCALE 2		/* scale R distances by this much */
#define G_SCALE 3		/* scale G distances by this much */
#define B_SCALE 1		/* and B by this much */

/* Relabel R/G/B as components 0/1/2, respecting the RGB ordering defined
 * in jmorecfg.h.  As the code stands, it will do the right thing for R,G,B
 * and B,G,R orders.  If you define some other weird order in jmorecfg.h,
 * you'll get compile errors until you extend this logic.  In that case
 * you'll probably want to tweak the histogram sizes too.
 */

#if RGB_RED == 0
#define C0_SCALE R_SCALE
#endif
#if RGB_BLUE == 0
#define C0_SCALE B_SCALE
#endif
#if RGB_GREEN == 1
#define C1_SCALE G_SCALE
#endif
#if RGB_RED == 2
#define C2_SCALE R_SCALE
#endif
#if RGB_BLUE == 2
#define C2_SCALE B_SCALE
#endif

/*
 * First we have the histogram data structure and routines for creating it.
 *
 * The number of bits of precision can be adjusted by changing these symbols.
 * We recommend keeping 6 bits for G and 5 each for R and B.
 * If you have plenty of memory and cycles, 6 bits all around gives marginally
 * better results; if you are short of memory, 5 bits all around will save
 * some space but degrade the results.
 * To maintain a fully accurate histogram, we'd need to allocate a "long"
 * (preferably unsigned long) for each cell.  In practice this is overkill;
 * we can get by with 16 bits per cell.  Few of the cell counts will overflow,
 * and clamping those that do overflow to the maximum value will give close-
 * enough results.  This reduces the recommended histogram size from 256Kb
 * to 128Kb, which is a useful savings on PC-class machines.
 * (In the second pass the histogram space is re-used for pixel mapping data;
 * in that capacity, each cell must be able to store zero to the number of
 * desired colors.  16 bits/cell is plenty for that too.)
 * Since the JPEG code is intended to run in small memory model on 80x86
 * machines, we can't just allocate the histogram in one chunk.  Instead
 * of a true 3-D array, we use a row of pointers to 2-D arrays.  Each
 * pointer corresponds to a C0 value (typically 2^5 = 32 pointers) and
 * each 2-D array has 2^6*2^5 = 2048 or 2^6*2^6 = 4096 entries.  Note that
 * on 80x86 machines, the pointer row is in near memory but the actual
 * arrays are in far memory (same arrangement as we use for image arrays).
 */

#define MAXNUMCOLORS  (MAXJSAMPLE+1) /* maximum size of colormap */

/* These will do the right thing for either R,G,B or B,G,R color order,
 * but you may not like the results for other color orders.
 */
#define HIST_C0_BITS  5		/* bits of precision in R/B histogram */
#define HIST_C1_BITS  6		/* bits of precision in G histogram */
#define HIST_C2_BITS  5		/* bits of precision in B/R histogram */

/* Number of elements along histogram axes. */
#define HIST_C0_ELEMS  (1<<HIST_C0_BITS)
#define HIST_C1_ELEMS  (1<<HIST_C1_BITS)
#define HIST_C2_ELEMS  (1<<HIST_C2_BITS)

/* These are the amounts to shift an input value to get a histogram index. */
#define C0_SHIFT  (BITS_IN_JSAMPLE-HIST_C0_BITS)
#define C1_SHIFT  (BITS_IN_JSAMPLE-HIST_C1_BITS)
#define C2_SHIFT  (BITS_IN_JSAMPLE-HIST_C2_BITS)

typedef UINT16 histcell;	/* histogram cell; prefer an unsigned type */

typedef histcell FAR * histptr;	/* for pointers to histogram cells */

typedef histcell hist1d[HIST_C2_ELEMS]; /* typedefs for the array */
typedef hist1d FAR * hist2d;	/* type for the 2nd-level pointers */
typedef hist2d * hist3d;	/* type for top-level pointer */

/* Declarations for Floyd-Steinberg dithering.
 *
 * Errors are accumulated into the array fserrors[], at a resolution of
 * 1/16th of a pixel count.  The error at a given pixel is propagated
 * to its not-yet-processed neighbors using the standard F-S fractions,
 *		...	(here)	7/16
 *		3/16	5/16	1/16
 * We work left-to-right on even rows, right-to-left on odd rows.
 *
 * We can get away with a single array (holding one row's worth of errors)
 * by using it to store the current row's errors at pixel columns not yet
 * processed, but the next row's errors at columns already processed.  We
 * need only a few extra variables to hold the errors immediately around the
 * current column.  (If we are lucky, those variables are in registers, but
 * even if not, they're probably cheaper to access than array elements are.)
 *
 * The fserrors[] array has (#columns + 2) entries; the extra entry at
 * each end saves us from special-casing the first and last pixels.
 * Each entry is three values long, one value for each color component.
 *
 * Note: on a wide image, we might not have enough room in a PC's near data
 * segment to hold the error array; so it is allocated with alloc_large.
 */

#if BITS_IN_JSAMPLE == 8
typedef INT16 FSERROR;		/* 16 bits should be enough */
typedef int LOCFSERROR;		/* use 'int' for calculation temps */
#else
typedef INT32 FSERROR;		/* may need more than 16 bits */
typedef INT32 LOCFSERROR;	/* be sure calculation temps are big enough */
#endif

typedef FSERROR FAR *FSERRPTR;	/* pointer to error array (in FAR storage!) */

/* Private subobject */

typedef struct {
  struct jpeg_color_quantizer pub; /* public fields */

  /* Space for the eventually created colormap is stashed here */
  JSAMPARRAY sv_colormap;	/* colormap allocated at init time */
  int desired;			/* desired # of colors = size of colormap */

  /* Variables for accumulating image statistics */
  hist3d histogram;		/* pointer to the histogram */

  boolean needs_zeroed;		/* TRUE if next pass must zero histogram */

  /* Variables for Floyd-Steinberg dithering */
  FSERRPTR fserrors;		/* accumulated errors */
  boolean on_odd_row;		/* flag to remember which row we are on */
  int * error_limiter;		/* table for clamping the applied error */
} my_cquantizer2;

typedef my_cquantizer2 * my_cquantize_ptr2;

/*
 * Prescan some rows of pixels.
 * In this module the prescan simply updates the histogram, which has been
 * initialized to zeroes by start_pass.
 * An output_buf parameter is required by the method signature, but no data
 * is actually output (in fact the buffer controller is probably passing a
 * NULL pointer).
 */

METHODDEF(void)
prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		  JSAMPARRAY, int num_rows)
{
  my_cquantize_ptr2 cquantize = (my_cquantize_ptr2) cinfo->cquantize;
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
	ptr = input_buf[row];
	for (col = width; col > 0; col--) {
	  /* get pixel value and index into the histogram */
	  histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
	  /* increment, check for overflow and undo increment if so. */
	  if (++(*histp) <= 0)
	(*histp)--;
	  ptr += 3;
	}
  }
}

/*
 * Next we have the really interesting routines: selection of a colormap
 * given the completed histogram.
 * These routines work with a list of "boxes", each representing a rectangular
 * subset of the input color space (to histogram precision).
 */

typedef struct {
  /* The bounds of the box (inclusive); expressed as histogram indexes */
  int c0min, c0max;
  int c1min, c1max;
  int c2min, c2max;
  /* The volume (actually 2-norm) of the box */
  INT32 volume;
  /* The number of nonzero histogram cells within this box */
  long colorcount;
} box;

typedef box * boxptr;

LOCAL(boxptr)
find_biggest_color_pop (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest color population */
/* Returns NULL if no splittable boxes remain */
{
  register boxptr boxp;
  register int i;
  register long maxc = 0;
  boxptr which = NULL;

  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
	if (boxp->colorcount > maxc && boxp->volume > 0) {
	  which = boxp;
	  maxc = boxp->colorcount;
	}
  }
  return which;
}

LOCAL(boxptr)
find_biggest_volume (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest (scaled) volume */
/* Returns NULL if no splittable boxes remain */
{
  register boxptr boxp;
  register int i;
  register INT32 maxv = 0;
  boxptr which = NULL;

  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
	if (boxp->volume > maxv) {
	  which = boxp;
	  maxv = boxp->volume;
	}
  }
  return which;
}

LOCAL(void)
update_box (j_decompress_ptr cinfo, boxptr boxp)
/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
/* and recompute its volume and population */
{
  my_cquantize_ptr2 cquantize = (my_cquantize_ptr2) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  INT32 dist0,dist1,dist2;
  long ccount;

  c0min = boxp->c0min;  c0max = boxp->c0max;
  c1min = boxp->c1min;  c1max = boxp->c1max;
  c2min = boxp->c2min;  c2max = boxp->c2max;

  if (c0max > c0min)
	for (c0 = c0min; c0 <= c0max; c0++)
	  for (c1 = c1min; c1 <= c1max; c1++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c0min = c0min = c0;
	    goto have_c0min;
	  }
	  }
 have_c0min:
  if (c0max > c0min)
	for (c0 = c0max; c0 >= c0min; c0--)
	  for (c1 = c1min; c1 <= c1max; c1++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c0max = c0max = c0;
	    goto have_c0max;
	  }
	  }
 have_c0max:
  if (c1max > c1min)
	for (c1 = c1min; c1 <= c1max; c1++)
	  for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c1min = c1min = c1;
	    goto have_c1min;
	  }
	  }
 have_c1min:
  if (c1max > c1min)
	for (c1 = c1max; c1 >= c1min; c1--)
	  for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1][c2min];
	for (c2 = c2min; c2 <= c2max; c2++)
	  if (*histp++ != 0) {
	    boxp->c1max = c1max = c1;
	    goto have_c1max;
	  }
	  }
 have_c1max:
  if (c2max > c2min)
	for (c2 = c2min; c2 <= c2max; c2++)
	  for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1min][c2];
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
	  if (*histp != 0) {
	    boxp->c2min = c2min = c2;
	    goto have_c2min;
	  }
	  }
 have_c2min:
  if (c2max > c2min)
	for (c2 = c2max; c2 >= c2min; c2--)
	  for (c0 = c0min; c0 <= c0max; c0++) {
	histp = & histogram[c0][c1min][c2];
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
	  if (*histp != 0) {
	    boxp->c2max = c2max = c2;
	    goto have_c2max;
	  }
	  }
 have_c2max:

  /* Update box volume.
   * We use 2-norm rather than real volume here; this biases the method
   * against making long narrow boxes, and it has the side benefit that
   * a box is splittable iff norm > 0.
   * Since the differences are expressed in histogram-cell units,
   * we have to shift back to JSAMPLE units to get consistent distances;
   * after which, we scale according to the selected distance scale factors.
   */
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;

  /* Now scan remaining volume of box and compute population */
  ccount = 0;
  for (c0 = c0min; c0 <= c0max; c0++)
	for (c1 = c1min; c1 <= c1max; c1++) {
	  histp = & histogram[c0][c1][c2min];
	  for (c2 = c2min; c2 <= c2max; c2++, histp++)
	if (*histp != 0) {
	  ccount++;
	}
	}
  boxp->colorcount = ccount;
}

LOCAL(int)
median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
	    int desired_colors)
/* Repeatedly select and split the largest box until we have enough boxes */
{
  int n,lb;
  int c0,c1,c2,cmax;
  register boxptr b1,b2;

  while (numboxes < desired_colors) {
	/* Select box to split.
	 * Current algorithm: by population for first half, then by volume.
	 */
	if (numboxes*2 <= desired_colors) {
	  b1 = find_biggest_color_pop(boxlist, numboxes);
	} else {
	  b1 = find_biggest_volume(boxlist, numboxes);
	}
	if (b1 == NULL)		/* no splittable boxes left! */
	  break;
	b2 = &boxlist[numboxes];	/* where new box will go */
	/* Copy the color bounds to the new box. */
	b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
	b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
	/* Choose which axis to split the box on.
	 * Current algorithm: longest scaled axis.
	 * See notes in update_box about scaling distances.
	 */
	c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
	c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
	c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
	/* We want to break any ties in favor of green, then red, blue last.
	 * This code does the right thing for R,G,B or B,G,R color orders only.
	 */
#if RGB_RED == 0
	cmax = c1; n = 1;
	if (c0 > cmax) { cmax = c0; n = 0; }
	if (c2 > cmax) { n = 2; }
#else
	cmax = c1; n = 1;
	if (c2 > cmax) { cmax = c2; n = 2; }
	if (c0 > cmax) { n = 0; }
#endif
	/* Choose split point along selected axis, and update box bounds.
	 * Current algorithm: split at halfway point.
	 * (Since the box has been shrunk to minimum volume,
	 * any split will produce two nonempty subboxes.)
	 * Note that lb value is max for lower box, so must be < old max.
	 */
	switch (n) {
	case 0:
	  lb = (b1->c0max + b1->c0min) / 2;
	  b1->c0max = lb;
	  b2->c0min = lb+1;
	  break;
	case 1:
	  lb = (b1->c1max + b1->c1min) / 2;
	  b1->c1max = lb;
	  b2->c1min = lb+1;
	  break;
	case 2:
	  lb = (b1->c2max + b1->c2min) / 2;
	  b1->c2max = lb;
	  b2->c2min = lb+1;
	  break;
	}
	/* Update stats for boxes */
	update_box(cinfo, b1);
	update_box(cinfo, b2);
	numboxes++;
  }
  return numboxes;
}

LOCAL(void)
compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
/* Compute representative color for a box, put it in colormap[icolor] */
{
  /* Current algorithm: mean weighted by pixels (not colors) */
  /* Note it is important to get the rounding correct! */
  my_cquantize_ptr2 cquantize = (my_cquantize_ptr2) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  long count;
  long total = 0;
  long c0total = 0;
  long c1total = 0;
  long c2total = 0;

  c0min = boxp->c0min;  c0max = boxp->c0max;
  c1min = boxp->c1min;  c1max = boxp->c1max;
  c2min = boxp->c2min;  c2max = boxp->c2max;

  for (c0 = c0min; c0 <= c0max; c0++)
	for (c1 = c1min; c1 <= c1max; c1++) {
	  histp = & histogram[c0][c1][c2min];
	  for (c2 = c2min; c2 <= c2max; c2++) {
	if ((count = *histp++) != 0) {
	  total += count;
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
	}
	  }
	}

  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
}

LOCAL(void)
select_colors (j_decompress_ptr cinfo, int desired_colors)
/* Master routine for color selection */
{
  boxptr boxlist;
  int numboxes;
  int i;

  /* Allocate workspace for box list */
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
	((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
  /* Initialize one box containing whole space */
  numboxes = 1;
  boxlist[0].c0min = 0;
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
  boxlist[0].c1min = 0;
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
  boxlist[0].c2min = 0;
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
  /* Shrink it to actually-used volume and set its statistics */
  update_box(cinfo, & boxlist[0]);
  /* Perform median-cut to produce final box list */
  numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
  /* Compute the representative color for each box, fill colormap */
  for (i = 0; i < numboxes; i++)
	compute_color(cinfo, & boxlist[i], i);
  cinfo->actual_number_of_colors = numboxes;
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
}

/*
 * These routines are concerned with the time-critical task of mapping input
 * colors to the nearest color in the selected colormap.
 *
 * We re-use the histogram space as an "inverse color map", essentially a
 * cache for the results of nearest-color searches.  All colors within a
 * histogram cell will be mapped to the same colormap entry, namely the one
 * closest to the cell's center.  This may not be quite the closest entry to
 * the actual input color, but it's almost as good.  A zero in the cache
 * indicates we haven't found the nearest color for that cell yet; the array
 * is cleared to zeroes before starting the mapping pass.  When we find the
 * nearest color for a cell, its colormap index plus one is recorded in the
 * cache for future use.  The pass2 scanning routines call fill_inverse_cmap
 * when they need to use an unfilled entry in the cache.
 *
 * Our method of efficiently finding nearest colors is based on the "locally
 * sorted search" idea described by Heckbert and on the incremental distance
 * calculation described by Spencer W. Thomas in chapter III.1 of Graphics
 * Gems II (James Arvo, ed.  Academic Press, 1991).  Thomas points out that
 * the distances from a given colormap entry to each cell of the histogram can
 * be computed quickly using an incremental method: the differences between
 * distances to adjacent cells themselves differ by a constant.  This allows a
 * fairly fast implementation of the "brute force" approach of computing the
 * distance from every colormap entry to every histogram cell.  Unfortunately,
 * it needs a work array to hold the best-distance-so-far for each histogram
 * cell (because the inner loop has to be over cells, not colormap entries).
 * The work array elements have to be INT32s, so the work array would need
 * 256Kb at our recommended precision.  This is not feasible in DOS machines.
 *
 * To get around these problems, we apply Thomas' method to compute the
 * nearest colors for only the cells within a small subbox of the histogram.
 * The work array need be only as big as the subbox, so the memory usage
 * problem is solved.  Furthermore, we need not fill subboxes that are never
 * referenced in pass2; many images use only part of the color gamut, so a
 * fair amount of work is saved.  An additional advantage of this
 * approach is that we can apply Heckbert's locality criterion to quickly
 * eliminate colormap entries that are far away from the subbox; typically
 * three-fourths of the colormap entries are rejected by Heckbert's criterion,
 * and we need not compute their distances to individual cells in the subbox.
 * The speed of this approach is heavily influenced by the subbox size: too
 * small means too much overhead, too big loses because Heckbert's criterion
 * can't eliminate as many colormap entries.  Empirically the best subbox
 * size seems to be about 1/512th of the histogram (1/8th in each direction).
 *
 * Thomas' article also describes a refined method which is asymptotically
 * faster than the brute-force method, but it is also far more complex and
 * cannot efficiently be applied to small subboxes.  It is therefore not
 * useful for programs intended to be portable to DOS machines.  On machines
 * with plenty of memory, filling the whole histogram in one shot with Thomas'
 * refined method might be faster than the present code --- but then again,
 * it might not be any faster, and it's certainly more complicated.
 */

/* log2(histogram cells in update box) for each axis; this can be adjusted */
#define BOX_C0_LOG  (HIST_C0_BITS-3)
#define BOX_C1_LOG  (HIST_C1_BITS-3)
#define BOX_C2_LOG  (HIST_C2_BITS-3)

#define BOX_C0_ELEMS  (1<<BOX_C0_LOG) /* # of hist cells in update box */
#define BOX_C1_ELEMS  (1<<BOX_C1_LOG)
#define BOX_C2_ELEMS  (1<<BOX_C2_LOG)

#define BOX_C0_SHIFT  (C0_SHIFT + BOX_C0_LOG)
#define BOX_C1_SHIFT  (C1_SHIFT + BOX_C1_LOG)
#define BOX_C2_SHIFT  (C2_SHIFT + BOX_C2_LOG)

/*
 * The next three routines implement inverse colormap filling.  They could
 * all be folded into one big routine, but splitting them up this way saves
 * some stack space (the mindist[] and bestdist[] arrays need not coexist)
 * and may allow some compilers to produce better code by registerizing more
 * inner-loop variables.
 */

LOCAL(int)
find_nearby_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
		    JSAMPLE colorlist[])
/* Locate the colormap entries close enough to an update box to be candidates
 * for the nearest entry to some cell(s) in the update box.  The update box
 * is specified by the center coordinates of its first cell.  The number of
 * candidate colormap entries is returned, and their colormap indexes are
 * placed in colorlist[].
 * This routine uses Heckbert's "locally sorted search" criterion to select
 * the colors that need further consideration.
 */
{
  int numcolors = cinfo->actual_number_of_colors;
  int maxc0, maxc1, maxc2;
  int centerc0, centerc1, centerc2;
  int i, x, ncolors;
  INT32 minmaxdist, min_dist, max_dist, tdist;
  INT32 mindist[MAXNUMCOLORS];	/* min distance to colormap entry i */

  /* Compute true coordinates of update box's upper corner and center.
   * Actually we compute the coordinates of the center of the upper-corner
   * histogram cell, which are the upper bounds of the volume we care about.
   * Note that since ">>" rounds down, the "center" values may be closer to
   * min than to max; hence comparisons to them must be "<=", not "<".
   */
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
  centerc0 = (minc0 + maxc0) >> 1;
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
  centerc1 = (minc1 + maxc1) >> 1;
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
  centerc2 = (minc2 + maxc2) >> 1;

  /* For each color in colormap, find:
   *  1. its minimum squared-distance to any point in the update box
   *     (zero if color is within update box);
   *  2. its maximum squared-distance to any point in the update box.
   * Both of these can be found by considering only the corners of the box.
   * We save the minimum distance for each color in mindist[];
   * only the smallest maximum distance is of interest.
   */
  minmaxdist = 0x7FFFFFFFL;

  for (i = 0; i < numcolors; i++) {
	/* We compute the squared-c0-distance term, then add in the other two. */
	x = GETJSAMPLE(cinfo->colormap[0][i]);
	if (x < minc0) {
	  tdist = (x - minc0) * C0_SCALE;
	  min_dist = tdist*tdist;
	  tdist = (x - maxc0) * C0_SCALE;
	  max_dist = tdist*tdist;
	} else if (x > maxc0) {
	  tdist = (x - maxc0) * C0_SCALE;
	  min_dist = tdist*tdist;
	  tdist = (x - minc0) * C0_SCALE;
	  max_dist = tdist*tdist;
	} else {
	  /* within cell range so no contribution to min_dist */
	  min_dist = 0;
	  if (x <= centerc0) {
	tdist = (x - maxc0) * C0_SCALE;
	max_dist = tdist*tdist;
	  } else {
	tdist = (x - minc0) * C0_SCALE;
	max_dist = tdist*tdist;
	  }
	}

	x = GETJSAMPLE(cinfo->colormap[1][i]);
	if (x < minc1) {
	  tdist = (x - minc1) * C1_SCALE;
	  min_dist += tdist*tdist;
	  tdist = (x - maxc1) * C1_SCALE;
	  max_dist += tdist*tdist;
	} else if (x > maxc1) {
	  tdist = (x - maxc1) * C1_SCALE;
	  min_dist += tdist*tdist;
	  tdist = (x - minc1) * C1_SCALE;
	  max_dist += tdist*tdist;
	} else {
	  /* within cell range so no contribution to min_dist */
	  if (x <= centerc1) {
	tdist = (x - maxc1) * C1_SCALE;
	max_dist += tdist*tdist;
	  } else {
	tdist = (x - minc1) * C1_SCALE;
	max_dist += tdist*tdist;
	  }
	}

	x = GETJSAMPLE(cinfo->colormap[2][i]);
	if (x < minc2) {
	  tdist = (x - minc2) * C2_SCALE;
	  min_dist += tdist*tdist;
	  tdist = (x - maxc2) * C2_SCALE;
	  max_dist += tdist*tdist;
	} else if (x > maxc2) {
	  tdist = (x - maxc2) * C2_SCALE;
	  min_dist += tdist*tdist;
	  tdist = (x - minc2) * C2_SCALE;
	  max_dist += tdist*tdist;
	} else {
	  /* within cell range so no contribution to min_dist */
	  if (x <= centerc2) {
	tdist = (x - maxc2) * C2_SCALE;
	max_dist += tdist*tdist;
	  } else {
	tdist = (x - minc2) * C2_SCALE;
	max_dist += tdist*tdist;
	  }
	}

	mindist[i] = min_dist;	/* save away the results */
	if (max_dist < minmaxdist)
	  minmaxdist = max_dist;
  }

  /* Now we know that no cell in the update box is more than minmaxdist
   * away from some colormap entry.  Therefore, only colors that are
   * within minmaxdist of some part of the box need be considered.
   */
  ncolors = 0;
  for (i = 0; i < numcolors; i++) {
	if (mindist[i] <= minmaxdist)
	  colorlist[ncolors++] = (JSAMPLE) i;
  }
  return ncolors;
}

LOCAL(void)
find_best_colors (j_decompress_ptr cinfo, int minc0, int minc1, int minc2,
		  int numcolors, JSAMPLE colorlist[], JSAMPLE bestcolor[])
/* Find the closest colormap entry for each cell in the update box,
 * given the list of candidate colors prepared by find_nearby_colors.
 * Return the indexes of the closest entries in the bestcolor[] array.
 * This routine uses Thomas' incremental distance calculation method to
 * find the distance from a colormap entry to successive cells in the box.
 */
{
  int ic0, ic1, ic2;
  int i, icolor;
  register INT32 * bptr;	/* pointer into bestdist[] array */
  JSAMPLE * cptr;		/* pointer into bestcolor[] array */
  INT32 dist0, dist1;		/* initial distance values */
  register INT32 dist2;		/* current distance in inner loop */
  INT32 xx0, xx1;		/* distance increments */
  register INT32 xx2;
  INT32 inc0, inc1, inc2;	/* initial values for increments */
  /* This array holds the distance to the nearest-so-far color for each cell */
  INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Initialize best-distance for each cell of the update box */
  bptr = bestdist;
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
	*bptr++ = 0x7FFFFFFFL;

  /* For each color selected by find_nearby_colors,
   * compute its distance to the center of each cell in the box.
   * If that's less than best-so-far, update best distance and color number.
   */

  /* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)

  for (i = 0; i < numcolors; i++) {
	icolor = GETJSAMPLE(colorlist[i]);
	/* Compute (square of) distance from minc0/c1/c2 to this color */
	inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
	dist0 = inc0*inc0;
	inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
	dist0 += inc1*inc1;
	inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
	dist0 += inc2*inc2;
	/* Form the initial difference increments */
	inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
	inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
	inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
	/* Now loop over all cells in box, updating distance per Thomas method */
	bptr = bestdist;
	cptr = bestcolor;
	xx0 = inc0;
	for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
	  dist1 = dist0;
	  xx1 = inc1;
	  for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
	dist2 = dist1;
	xx2 = inc2;
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
	  if (dist2 < *bptr) {
	    *bptr = dist2;
	    *cptr = (JSAMPLE) icolor;
	  }
	  dist2 += xx2;
	  xx2 += 2 * STEP_C2 * STEP_C2;
	  bptr++;
	  cptr++;
	}
	dist1 += xx1;
	xx1 += 2 * STEP_C1 * STEP_C1;
	  }
	  dist0 += xx0;
	  xx0 += 2 * STEP_C0 * STEP_C0;
	}
  }
}

LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
  my_cquantize_ptr2 cquantize = (my_cquantize_ptr2) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  int minc0, minc1, minc2;	/* lower left corner of update box */
  int ic0, ic1, ic2;
  register JSAMPLE * cptr;	/* pointer into bestcolor[] array */
  register histptr cachep;	/* pointer into main cache array */
  /* This array lists the candidate colormap indexes. */
  JSAMPLE colorlist[MAXNUMCOLORS];
  int numcolors;		/* number of candidate colors */
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
  c1 >>= BOX_C1_LOG;
  c2 >>= BOX_C2_LOG;

  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);

  /* Determine which colormap entries are close enough to be candidates
   * for the nearest entry to some cell in the update box.
   */
  numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);

  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
  c1 <<= BOX_C1_LOG;
  c2 <<= BOX_C2_LOG;
  cptr = bestcolor;
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
	for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
	  cachep = & histogram[c0+ic0][c1+ic1][c2];
	  for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
	  }
	}
  }
}

/*
 * Map some rows of pixels to the output colormapped representation.
 */

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
  my_cquantize_ptr2 cquantize = (my_cquantize_ptr2) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  register JSAMPROW inptr, outptr;
  register histptr cachep;
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;

  for (row = 0; row < num_rows; row++) {
	inptr = input_buf[row];
	outptr = output_buf[row];
	for (col = width; col > 0; col--) {
	  /* get pixel value and index into the cache */
	  c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
	  c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
	  c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
	  cachep = & histogram[c0][c1][c2];
	  /* If we have not seen this color before, find nearest colormap entry */
	  /* and update the cache */
	  if (*cachep == 0)
	fill_inverse_cmap(cinfo, c0,c1,c2);
	  /* Now emit the colormap index for this cell */
	  *outptr++ = (JSAMPLE) (*cachep - 1);
	}
  }
}

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
  my_cquantize_ptr2 cquantize = (my_cquantize_ptr2) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  register LOCFSERROR cur0, cur1, cur2;	/* current error or pixel value */
  LOCFSERROR belowerr0, belowerr1, belowerr2; /* error for pixel below cur */
  LOCFSERROR bpreverr0, bpreverr1, bpreverr2; /* error for below/prev col */
  register FSERRPTR errorptr;	/* => fserrors[] at column before current */
  JSAMPROW inptr;		/* => current input pixel */
  JSAMPROW outptr;		/* => current output pixel */
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
  int *error_limit = cquantize->error_limiter;
  JSAMPROW colormap0 = cinfo->colormap[0];
  JSAMPROW colormap1 = cinfo->colormap[1];
  JSAMPROW colormap2 = cinfo->colormap[2];
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
	inptr = input_buf[row];
	outptr = output_buf[row];
	if (cquantize->on_odd_row) {
	  /* work right to left in this row */
	  inptr += (width-1) * 3;	/* so point to rightmost pixel */
	  outptr += width-1;
	  dir = -1;
	  dir3 = -3;
	  errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
	  cquantize->on_odd_row = FALSE; /* flip for next time */
	} else {
	  /* work left to right in this row */
	  dir = 1;
	  dir3 = 3;
	  errorptr = cquantize->fserrors; /* => entry before first real column */
	  cquantize->on_odd_row = TRUE; /* flip for next time */
	}
	/* Preset error values: no error propagated to first pixel from left */
	cur0 = cur1 = cur2 = 0;
	/* and no error propagated to row below yet */
	belowerr0 = belowerr1 = belowerr2 = 0;
	bpreverr0 = bpreverr1 = bpreverr2 = 0;

	for (col = width; col > 0; col--) {
	  /* curN holds the error propagated from the previous pixel on the
	   * current line.  Add the error propagated from the previous line
	   * to form the complete error correction term for this pixel, and
	   * round the error term (which is expressed * 16) to an integer.
	   * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
	   * for either sign of the error value.
	   * Note: errorptr points to *previous* column's array entry.
	   */
	  cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
	  cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
	  cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
	  /* Limit the error using transfer function set by init_error_limit.
	   * See comments with init_error_limit for rationale.
	   */
	  cur0 = error_limit[cur0];
	  cur1 = error_limit[cur1];
	  cur2 = error_limit[cur2];
	  /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
	   * The maximum error is +- MAXJSAMPLE (or less with error limiting);
	   * this sets the required size of the range_limit array.
	   */
	  cur0 += GETJSAMPLE(inptr[0]);
	  cur1 += GETJSAMPLE(inptr[1]);
	  cur2 += GETJSAMPLE(inptr[2]);
	  cur0 = GETJSAMPLE(range_limit[cur0]);
	  cur1 = GETJSAMPLE(range_limit[cur1]);
	  cur2 = GETJSAMPLE(range_limit[cur2]);
	  /* Index into the cache with adjusted pixel value */
	  cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
	  /* If we have not seen this color before, find nearest colormap */
	  /* entry and update the cache */
	  if (*cachep == 0)
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
	  /* Now emit the colormap index for this cell */
	  { register int pixcode = *cachep - 1;
	*outptr = (JSAMPLE) pixcode;
	/* Compute representation error for this pixel */
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
	  }
	  /* Compute error fractions to be propagated to adjacent pixels.
	   * Add these into the running sums, and simultaneously shift the
	   * next-line error sums left by 1 column.
	   */
	  { register LOCFSERROR bnexterr, delta;

	bnexterr = cur0;	/* Process component 0 */
	delta = cur0 * 2;
	cur0 += delta;		/* form error * 3 */
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
	cur0 += delta;		/* form error * 5 */
	bpreverr0 = belowerr0 + cur0;
	belowerr0 = bnexterr;
	cur0 += delta;		/* form error * 7 */
	bnexterr = cur1;	/* Process component 1 */
	delta = cur1 * 2;
	cur1 += delta;		/* form error * 3 */
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
	cur1 += delta;		/* form error * 5 */
	bpreverr1 = belowerr1 + cur1;
	belowerr1 = bnexterr;
	cur1 += delta;		/* form error * 7 */
	bnexterr = cur2;	/* Process component 2 */
	delta = cur2 * 2;
	cur2 += delta;		/* form error * 3 */
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
	cur2 += delta;		/* form error * 5 */
	bpreverr2 = belowerr2 + cur2;
	belowerr2 = bnexterr;
	cur2 += delta;		/* form error * 7 */
	  }
	  /* At this point curN contains the 7/16 error value to be propagated
	   * to the next pixel on the current line, and all the errors for the
	   * next line have been shifted over.  We are therefore ready to move on.
	   */
	  inptr += dir3;		/* Advance pixel pointers to next column */
	  outptr += dir;
	  errorptr += dir3;		/* advance errorptr to current column */
	}
	/* Post-loop cleanup: we must unload the final error values into the
	 * final fserrors[] entry.  Note we need not unload belowerrN because
	 * it is for the dummy column before or after the actual array.
	 */
	errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
	errorptr[1] = (FSERROR) bpreverr1;
	errorptr[2] = (FSERROR) bpreverr2;
  }
}

/*
 * Initialize the error-limiting transfer function (lookup table).
 * The raw F-S error computation can potentially compute error values of up to
 * +- MAXJSAMPLE.  But we want the maximum correction applied to a pixel to be
 * much less, otherwise obviously wrong pixels will be created.  (Typical
 * effects include weird fringes at color-area boundaries, isolated bright
 * pixels in a dark area, etc.)  The standard advice for avoiding this problem
 * is to ensure that the "corners" of the color cube are allocated as output
 * colors; then repeated errors in the same direction cannot cause cascading
 * error buildup.  However, that only prevents the error from getting
 * completely out of hand; Aaron Giles reports that error limiting improves
 * the results even with corner colors allocated.
 * A simple clamping of the error values to about +- MAXJSAMPLE/8 works pretty
 * well, but the smoother transfer function used below is even better.  Thanks
 * to Aaron Giles for this idea.
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
  my_cquantize_ptr2 cquantize = (my_cquantize_ptr2) cinfo->cquantize;
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
	((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
  cquantize->error_limiter = table;

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
  for (in = 0; in < STEPSIZE; in++, out++) {
	table[in] = out; table[-in] = -out;
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
	table[in] = out; table[-in] = -out;
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
	table[in] = out; table[-in] = -out;
  }
#undef STEPSIZE
}

/*
 * Finish up at the end of each pass.
 */

METHODDEF(void)
finish_pass1 (j_decompress_ptr cinfo)
{
  my_cquantize_ptr2 cquantize = (my_cquantize_ptr2) cinfo->cquantize;

  /* Select the representative colors and fill in cinfo->colormap */
  cinfo->colormap = cquantize->sv_colormap;
  select_colors(cinfo, cquantize->desired);
  /* Force next pass to zero the color index table */
  cquantize->needs_zeroed = TRUE;
}

METHODDEF(void)
finish_pass2 (j_decompress_ptr)
{
  /* no work */
}

/*
 * Initialize for each processing pass.
 */

METHODDEF(void)
start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
  my_cquantize_ptr2 cquantize = (my_cquantize_ptr2) cinfo->cquantize;
  hist3d histogram = cquantize->histogram;
  int i;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
	cinfo->dither_mode = JDITHER_FS;

  if (is_pre_scan) {
	/* Set up method pointers */
	cquantize->pub.color_quantize = prescan_quantize;
	cquantize->pub.finish_pass = finish_pass1;
	cquantize->needs_zeroed = TRUE; /* Always zero histogram */
  } else {
	/* Set up method pointers */
	if (cinfo->dither_mode == JDITHER_FS)
	  cquantize->pub.color_quantize = pass2_fs_dither;
	else
	  cquantize->pub.color_quantize = pass2_no_dither;
	cquantize->pub.finish_pass = finish_pass2;

	/* Make sure color count is acceptable */
	i = cinfo->actual_number_of_colors;
	if (i < 1)
	  ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
	if (i > MAXNUMCOLORS)
	  ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);

	if (cinfo->dither_mode == JDITHER_FS) {
	  size_t arraysize = (size_t) ((cinfo->output_width + 2) *
				   (3 * SIZEOF(FSERROR)));
	  /* Allocate Floyd-Steinberg workspace if we didn't already. */
	  if (cquantize->fserrors == NULL)
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
	  /* Initialize the propagated errors to zero. */
	  jzero_far((void FAR *) cquantize->fserrors, arraysize);
	  /* Make the error-limit table if we didn't already. */
	  if (cquantize->error_limiter == NULL)
	init_error_limit(cinfo);
	  cquantize->on_odd_row = FALSE;
	}

  }
  /* Zero the histogram or inverse color map, if necessary */
  if (cquantize->needs_zeroed) {
	for (i = 0; i < HIST_C0_ELEMS; i++) {
	  jzero_far((void FAR *) histogram[i],
		HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
	}
	cquantize->needs_zeroed = FALSE;
  }
}

/*
 * Switch to a new external colormap between output passes.
 */

METHODDEF(void)
new_color_map_2_quant (j_decompress_ptr cinfo)
{
  my_cquantize_ptr2 cquantize = (my_cquantize_ptr2) cinfo->cquantize;

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
}

/*
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
  my_cquantize_ptr2 cquantize;
  int i;

  cquantize = (my_cquantize_ptr2)
	(*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
				SIZEOF(my_cquantizer2));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
  cquantize->pub.start_pass = start_pass_2_quant;
  cquantize->pub.new_color_map = new_color_map_2_quant;
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
  cquantize->error_limiter = NULL;

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
	ERREXIT(cinfo, JERR_NOTIMPL);

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
	((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
	cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE,
	   HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
	/* Make sure color count is acceptable */
	int desired = cinfo->desired_number_of_colors;
	/* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
	if (desired < 8)
	  ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
	/* Make sure colormap indexes can be represented by JSAMPLEs */
	if (desired > MAXNUMCOLORS)
	  ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
	cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
	  ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
	cquantize->desired = desired;
  } else
	cquantize->sv_colormap = NULL;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
	cinfo->dither_mode = JDITHER_FS;

  /* Allocate Floyd-Steinberg workspace if necessary.
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
	  ((j_common_ptr) cinfo, JPOOL_IMAGE,
	   (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
	/* Might as well create the error-limiting table too. */
	init_error_limit(cinfo);
  }
}

#endif /* QUANT_2PASS_SUPPORTED */

/*** End of inlined file: jquant2.c ***/


/*** Start of inlined file: jutils.c ***/
#define JPEG_INTERNALS

/*
 * jpeg_zigzag_order[i] is the zigzag-order position of the i'th element
 * of a DCT block read in natural order (left to right, top to bottom).
 */

#if 0				/* This table is not actually needed in v6a */

const int jpeg_zigzag_order[DCTSIZE2] = {
   0,  1,  5,  6, 14, 15, 27, 28,
   2,  4,  7, 13, 16, 26, 29, 42,
   3,  8, 12, 17, 25, 30, 41, 43,
   9, 11, 18, 24, 31, 40, 44, 53,
  10, 19, 23, 32, 39, 45, 52, 54,
  20, 22, 33, 38, 46, 51, 55, 60,
  21, 34, 37, 47, 50, 56, 59, 61,
  35, 36, 48, 49, 57, 58, 62, 63
};

#endif

/*
 * jpeg_natural_order[i] is the natural-order position of the i'th element
 * of zigzag order.
 *
 * When reading corrupted data, the Huffman decoders could attempt
 * to reference an entry beyond the end of this array (if the decoded
 * zero run length reaches past the end of the block).  To prevent
 * wild stores without adding an inner-loop test, we put some extra
 * "63"s after the real entries.  This will cause the extra coefficient
 * to be stored in location 63 of the block, not somewhere random.
 * The worst case would be a run-length of 15, which means we need 16
 * fake entries.
 */

const int jpeg_natural_order[DCTSIZE2+16] = {
  0,  1,  8, 16,  9,  2,  3, 10,
 17, 24, 32, 25, 18, 11,  4,  5,
 12, 19, 26, 33, 40, 48, 41, 34,
 27, 20, 13,  6,  7, 14, 21, 28,
 35, 42, 49, 56, 57, 50, 43, 36,
 29, 22, 15, 23, 30, 37, 44, 51,
 58, 59, 52, 45, 38, 31, 39, 46,
 53, 60, 61, 54, 47, 55, 62, 63,
 63, 63, 63, 63, 63, 63, 63, 63, /* extra entries for safety in decoder */
 63, 63, 63, 63, 63, 63, 63, 63
};

/*
 * Arithmetic utilities
 */

GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
  return (a + b - 1L) / b;
}

GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
  a += b - 1L;
  return a - (a % b);
}

/* On normal machines we can apply MEMCOPY() and MEMZERO() to sample arrays
 * and coefficient-block arrays.  This won't work on 80x86 because the arrays
 * are FAR and we're assuming a small-pointer memory model.  However, some
 * DOS compilers provide far-pointer versions of memcpy() and memset() even
 * in the small-model libraries.  These will be used if USE_FMEM is defined.
 * Otherwise, the routines below do it the hard way.  (The performance cost
 * is not all that great, because these routines aren't very heavily used.)
 */

#ifndef NEED_FAR_POINTERS	/* normal case, same as regular macros */
#define FMEMCOPY(dest,src,size)	MEMCOPY(dest,src,size)
#define FMEMZERO(target,size)	MEMZERO(target,size)
#else				/* 80x86 case, define if we can */
#ifdef USE_FMEM
#define FMEMCOPY(dest,src,size)	_fmemcpy((void FAR *)(dest), (const void FAR *)(src), (size_t)(size))
#define FMEMZERO(target,size)	_fmemset((void FAR *)(target), 0, (size_t)(size))
#endif
#endif

GLOBAL(void)
jcopy_sample_rows (JSAMPARRAY input_array, int source_row,
		   JSAMPARRAY output_array, int dest_row,
		   int num_rows, JDIMENSION num_cols)
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
  register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
  register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
  output_array += dest_row;

  for (row = num_rows; row > 0; row--) {
	inptr = *input_array++;
	outptr = *output_array++;
#ifdef FMEMCOPY
	FMEMCOPY(outptr, inptr, count);
#else
	for (count = num_cols; count > 0; count--)
	  *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
#else
  register JCOEFPTR inptr, outptr;
  register long count;

  inptr = (JCOEFPTR) input_row;
  outptr = (JCOEFPTR) output_row;
  for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
	*outptr++ = *inptr++;
  }
#endif
}

GLOBAL(void)
jzero_far (void FAR * target, size_t bytestozero)
/* Zero out a chunk of FAR memory. */
/* This might be sample-array data, block-array data, or alloc_large data. */
{
#ifdef FMEMZERO
  FMEMZERO(target, bytestozero);
#else
  register char FAR * ptr = (char FAR *) target;
  register size_t count;

  for (count = bytestozero; count > 0; count--) {
	*ptr++ = 0;
  }
#endif
}

/*** End of inlined file: jutils.c ***/


/*** Start of inlined file: transupp.c ***/
/* Although this file really shouldn't have access to the library internals,
 * it's helpful to let it call jround_up() and jcopy_block_row().
 */
#define JPEG_INTERNALS


/*** Start of inlined file: transupp.h ***/
/* If you happen not to want the image transform support, disable it here */
#ifndef TRANSFORMS_SUPPORTED
#define TRANSFORMS_SUPPORTED 1		/* 0 disables transform code */
#endif

/* Short forms of external names for systems with brain-damaged linkers. */

#ifdef NEED_SHORT_EXTERNAL_NAMES
#define jtransform_request_workspace		jTrRequest
#define jtransform_adjust_parameters		jTrAdjust
#define jtransform_execute_transformation	jTrExec
#define jcopy_markers_setup			jCMrkSetup
#define jcopy_markers_execute			jCMrkExec
#endif /* NEED_SHORT_EXTERNAL_NAMES */

/*
 * Codes for supported types of image transformations.
 */

typedef enum {
	JXFORM_NONE,		/* no transformation */
	JXFORM_FLIP_H,		/* horizontal flip */
	JXFORM_FLIP_V,		/* vertical flip */
	JXFORM_TRANSPOSE,	/* transpose across UL-to-LR axis */
	JXFORM_TRANSVERSE,	/* transpose across UR-to-LL axis */
	JXFORM_ROT_90,		/* 90-degree clockwise rotation */
	JXFORM_ROT_180,		/* 180-degree rotation */
	JXFORM_ROT_270		/* 270-degree clockwise (or 90 ccw) */
} JXFORM_CODE;

/*
 * Although rotating and flipping data expressed as DCT coefficients is not
 * hard, there is an asymmetry in the JPEG format specification for images
 * whose dimensions aren't multiples of the iMCU size.  The right and bottom
 * image edges are padded out to the next iMCU boundary with junk data; but
 * no padding is possible at the top and left edges.  If we were to flip
 * the whole image including the pad data, then pad garbage would become
 * visible at the top and/or left, and real pixels would disappear into the
 * pad margins --- perhaps permanently, since encoders & decoders may not
 * bother to preserve DCT blocks that appear to be completely outside the
 * nominal image area.  So, we have to exclude any partial iMCUs from the
 * basic transformation.
 *
 * Transpose is the only transformation that can handle partial iMCUs at the
 * right and bottom edges completely cleanly.  flip_h can flip partial iMCUs
 * at the bottom, but leaves any partial iMCUs at the right edge untouched.
 * Similarly flip_v leaves any partial iMCUs at the bottom edge untouched.
 * The other transforms are defined as combinations of these basic transforms
 * and process edge blocks in a way that preserves the equivalence.
 *
 * The "trim" option causes untransformable partial iMCUs to be dropped;
 * this is not strictly lossless, but it usually gives the best-looking
 * result for odd-size images.  Note that when this option is active,
 * the expected mathematical equivalences between the transforms may not hold.
 * (For example, -rot 270 -trim trims only the bottom edge, but -rot 90 -trim
 * followed by -rot 180 -trim trims both edges.)
 *
 * We also offer a "force to grayscale" option, which simply discards the
 * chrominance channels of a YCbCr image.  This is lossless in the sense that
 * the luminance channel is preserved exactly.  It's not the same kind of
 * thing as the rotate/flip transformations, but it's convenient to handle it
 * as part of this package, mainly because the transformation routines have to
 * be aware of the option to know how many components to work on.
 */

typedef struct {
  /* Options: set by caller */
  JXFORM_CODE transform;	/* image transform operator */
  boolean trim;			/* if TRUE, trim partial MCUs as needed */
  boolean force_grayscale;	/* if TRUE, convert color image to grayscale */

  /* Internal workspace: caller should not touch these */
  int num_components;		/* # of components in workspace */
  jvirt_barray_ptr * workspace_coef_arrays; /* workspace for transformations */
} jpeg_transform_info;

#if TRANSFORMS_SUPPORTED

/* Request any required workspace */
EXTERN(void) jtransform_request_workspace
	JPP((j_decompress_ptr srcinfo, jpeg_transform_info *info));
/* Adjust output image parameters */
EXTERN(jvirt_barray_ptr *) jtransform_adjust_parameters
	JPP((j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
	     jvirt_barray_ptr *src_coef_arrays,
	     jpeg_transform_info *info));
/* Execute the actual transformation, if any */
EXTERN(void) jtransform_execute_transformation
	JPP((j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
	     jvirt_barray_ptr *src_coef_arrays,
	     jpeg_transform_info *info));

#endif /* TRANSFORMS_SUPPORTED */

/*
 * Support for copying optional markers from source to destination file.
 */

typedef enum {
	JCOPYOPT_NONE,		/* copy no optional markers */
	JCOPYOPT_COMMENTS,	/* copy only comment (COM) markers */
	JCOPYOPT_ALL		/* copy all optional markers */
} JCOPY_OPTION;

#define JCOPYOPT_DEFAULT  JCOPYOPT_COMMENTS	/* recommended default */

/* Setup decompression object to save desired markers in memory */
EXTERN(void) jcopy_markers_setup
	JPP((j_decompress_ptr srcinfo, JCOPY_OPTION option));
/* Copy markers saved in the given source object to the destination object */
EXTERN(void) jcopy_markers_execute
	JPP((j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
	     JCOPY_OPTION option));

/*** End of inlined file: transupp.h ***/

#if TRANSFORMS_SUPPORTED

/*
 * Lossless image transformation routines.  These routines work on DCT
 * coefficient arrays and thus do not require any lossy decompression
 * or recompression of the image.
 * Thanks to Guido Vollbeding for the initial design and code of this feature.
 *
 * Horizontal flipping is done in-place, using a single top-to-bottom
 * pass through the virtual source array.  It will thus be much the
 * fastest option for images larger than main memory.
 *
 * The other routines require a set of destination virtual arrays, so they
 * need twice as much memory as jpegtran normally does.  The destination
 * arrays are always written in normal scan order (top to bottom) because
 * the virtual array manager expects this.  The source arrays will be scanned
 * in the corresponding order, which means multiple passes through the source
 * arrays for most of the transforms.  That could result in much thrashing
 * if the image is larger than main memory.
 *
 * Some notes about the operating environment of the individual transform
 * routines:
 * 1. Both the source and destination virtual arrays are allocated from the
 *    source JPEG object, and therefore should be manipulated by calling the
 *    source's memory manager.
 * 2. The destination's component count should be used.  It may be smaller
 *    than the source's when forcing to grayscale.
 * 3. Likewise the destination's sampling factors should be used.  When
 *    forcing to grayscale the destination's sampling factors will be all 1,
 *    and we may as well take that as the effective iMCU size.
 * 4. When "trim" is in effect, the destination's dimensions will be the
 *    trimmed values but the source's will be untrimmed.
 * 5. All the routines assume that the source and destination buffers are
 *    padded out to a full iMCU boundary.  This is true, although for the
 *    source buffer it is an undocumented property of jdcoefct.c.
 * Notes 2,3,4 boil down to this: generally we should use the destination's
 * dimensions and ignore the source's.
 */

LOCAL(void)
do_flip_h (j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
	   jvirt_barray_ptr *src_coef_arrays)
/* Horizontal flip; done in-place, so no separate dest array is required */
{
  JDIMENSION MCU_cols, comp_width, blk_x, blk_y;
  int ci, k, offset_y;
  JBLOCKARRAY buffer;
  JCOEFPTR ptr1, ptr2;
  JCOEF temp1, temp2;
  jpeg_component_info *compptr;

  /* Horizontal mirroring of DCT blocks is accomplished by swapping
   * pairs of blocks in-place.  Within a DCT block, we perform horizontal
   * mirroring by changing the signs of odd-numbered columns.
   * Partial iMCUs at the right edge are left untouched.
   */
  MCU_cols = dstinfo->image_width / (dstinfo->max_h_samp_factor * DCTSIZE);

  for (ci = 0; ci < dstinfo->num_components; ci++) {
	compptr = dstinfo->comp_info + ci;
	comp_width = MCU_cols * compptr->h_samp_factor;
	for (blk_y = 0; blk_y < compptr->height_in_blocks;
	 blk_y += compptr->v_samp_factor) {
	  buffer = (*srcinfo->mem->access_virt_barray)
	((j_common_ptr) srcinfo, src_coef_arrays[ci], blk_y,
	 (JDIMENSION) compptr->v_samp_factor, TRUE);
	  for (offset_y = 0; offset_y < compptr->v_samp_factor; offset_y++) {
	for (blk_x = 0; blk_x * 2 < comp_width; blk_x++) {
	  ptr1 = buffer[offset_y][blk_x];
	  ptr2 = buffer[offset_y][comp_width - blk_x - 1];
	  /* this unrolled loop doesn't need to know which row it's on... */
	  for (k = 0; k < DCTSIZE2; k += 2) {
	    temp1 = *ptr1;	/* swap even column */
	    temp2 = *ptr2;
	    *ptr1++ = temp2;
	    *ptr2++ = temp1;
	    temp1 = *ptr1;	/* swap odd column with sign change */
	    temp2 = *ptr2;
	    *ptr1++ = -temp2;
	    *ptr2++ = -temp1;
	  }
	}
	  }
	}
  }
}

LOCAL(void)
do_flip_v (j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
	   jvirt_barray_ptr *src_coef_arrays,
	   jvirt_barray_ptr *dst_coef_arrays)
/* Vertical flip */
{
  JDIMENSION MCU_rows, comp_height, dst_blk_x, dst_blk_y;
  int ci, i, j, offset_y;
  JBLOCKARRAY src_buffer, dst_buffer;
  JBLOCKROW src_row_ptr, dst_row_ptr;
  JCOEFPTR src_ptr, dst_ptr;
  jpeg_component_info *compptr;

  /* We output into a separate array because we can't touch different
   * rows of the source virtual array simultaneously.  Otherwise, this
   * is a pretty straightforward analog of horizontal flip.
   * Within a DCT block, vertical mirroring is done by changing the signs
   * of odd-numbered rows.
   * Partial iMCUs at the bottom edge are copied verbatim.
   */
  MCU_rows = dstinfo->image_height / (dstinfo->max_v_samp_factor * DCTSIZE);

  for (ci = 0; ci < dstinfo->num_components; ci++) {
	compptr = dstinfo->comp_info + ci;
	comp_height = MCU_rows * compptr->v_samp_factor;
	for (dst_blk_y = 0; dst_blk_y < compptr->height_in_blocks;
	 dst_blk_y += compptr->v_samp_factor) {
	  dst_buffer = (*srcinfo->mem->access_virt_barray)
	((j_common_ptr) srcinfo, dst_coef_arrays[ci], dst_blk_y,
	 (JDIMENSION) compptr->v_samp_factor, TRUE);
	  if (dst_blk_y < comp_height) {
	/* Row is within the mirrorable area. */
	src_buffer = (*srcinfo->mem->access_virt_barray)
	  ((j_common_ptr) srcinfo, src_coef_arrays[ci],
	   comp_height - dst_blk_y - (JDIMENSION) compptr->v_samp_factor,
	   (JDIMENSION) compptr->v_samp_factor, FALSE);
	  } else {
	/* Bottom-edge blocks will be copied verbatim. */
	src_buffer = (*srcinfo->mem->access_virt_barray)
	  ((j_common_ptr) srcinfo, src_coef_arrays[ci], dst_blk_y,
	   (JDIMENSION) compptr->v_samp_factor, FALSE);
	  }
	  for (offset_y = 0; offset_y < compptr->v_samp_factor; offset_y++) {
	if (dst_blk_y < comp_height) {
	  /* Row is within the mirrorable area. */
	  dst_row_ptr = dst_buffer[offset_y];
	  src_row_ptr = src_buffer[compptr->v_samp_factor - offset_y - 1];
	  for (dst_blk_x = 0; dst_blk_x < compptr->width_in_blocks;
	       dst_blk_x++) {
	    dst_ptr = dst_row_ptr[dst_blk_x];
	    src_ptr = src_row_ptr[dst_blk_x];
	    for (i = 0; i < DCTSIZE; i += 2) {
	      /* copy even row */
	      for (j = 0; j < DCTSIZE; j++)
		*dst_ptr++ = *src_ptr++;
	      /* copy odd row with sign change */
	      for (j = 0; j < DCTSIZE; j++)
		*dst_ptr++ = - *src_ptr++;
	    }
	  }
	} else {
	  /* Just copy row verbatim. */
	  jcopy_block_row(src_buffer[offset_y], dst_buffer[offset_y],
			  compptr->width_in_blocks);
	}
	  }
	}
  }
}

LOCAL(void)
do_transpose (j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
	      jvirt_barray_ptr *src_coef_arrays,
	      jvirt_barray_ptr *dst_coef_arrays)
/* Transpose source into destination */
{
  JDIMENSION dst_blk_x, dst_blk_y;
  int ci, i, j, offset_x, offset_y;
  JBLOCKARRAY src_buffer, dst_buffer;
  JCOEFPTR src_ptr, dst_ptr;
  jpeg_component_info *compptr;

  /* Transposing pixels within a block just requires transposing the
   * DCT coefficients.
   * Partial iMCUs at the edges require no special treatment; we simply
   * process all the available DCT blocks for every component.
   */
  for (ci = 0; ci < dstinfo->num_components; ci++) {
	compptr = dstinfo->comp_info + ci;
	for (dst_blk_y = 0; dst_blk_y < compptr->height_in_blocks;
	 dst_blk_y += compptr->v_samp_factor) {
	  dst_buffer = (*srcinfo->mem->access_virt_barray)
	((j_common_ptr) srcinfo, dst_coef_arrays[ci], dst_blk_y,
	 (JDIMENSION) compptr->v_samp_factor, TRUE);
	  for (offset_y = 0; offset_y < compptr->v_samp_factor; offset_y++) {
	for (dst_blk_x = 0; dst_blk_x < compptr->width_in_blocks;
	     dst_blk_x += compptr->h_samp_factor) {
	  src_buffer = (*srcinfo->mem->access_virt_barray)
	    ((j_common_ptr) srcinfo, src_coef_arrays[ci], dst_blk_x,
	     (JDIMENSION) compptr->h_samp_factor, FALSE);
	  for (offset_x = 0; offset_x < compptr->h_samp_factor; offset_x++) {
	    src_ptr = src_buffer[offset_x][dst_blk_y + offset_y];
	    dst_ptr = dst_buffer[offset_y][dst_blk_x + offset_x];
	    for (i = 0; i < DCTSIZE; i++)
	      for (j = 0; j < DCTSIZE; j++)
		dst_ptr[j*DCTSIZE+i] = src_ptr[i*DCTSIZE+j];
	  }
	}
	  }
	}
  }
}

LOCAL(void)
do_rot_90 (j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
	   jvirt_barray_ptr *src_coef_arrays,
	   jvirt_barray_ptr *dst_coef_arrays)
/* 90 degree rotation is equivalent to
 *   1. Transposing the image;
 *   2. Horizontal mirroring.
 * These two steps are merged into a single processing routine.
 */
{
  JDIMENSION MCU_cols, comp_width, dst_blk_x, dst_blk_y;
  int ci, i, j, offset_x, offset_y;
  JBLOCKARRAY src_buffer, dst_buffer;
  JCOEFPTR src_ptr, dst_ptr;
  jpeg_component_info *compptr;

  /* Because of the horizontal mirror step, we can't process partial iMCUs
   * at the (output) right edge properly.  They just get transposed and
   * not mirrored.
   */
  MCU_cols = dstinfo->image_width / (dstinfo->max_h_samp_factor * DCTSIZE);

  for (ci = 0; ci < dstinfo->num_components; ci++) {
	compptr = dstinfo->comp_info + ci;
	comp_width = MCU_cols * compptr->h_samp_factor;
	for (dst_blk_y = 0; dst_blk_y < compptr->height_in_blocks;
	 dst_blk_y += compptr->v_samp_factor) {
	  dst_buffer = (*srcinfo->mem->access_virt_barray)
	((j_common_ptr) srcinfo, dst_coef_arrays[ci], dst_blk_y,
	 (JDIMENSION) compptr->v_samp_factor, TRUE);
	  for (offset_y = 0; offset_y < compptr->v_samp_factor; offset_y++) {
	for (dst_blk_x = 0; dst_blk_x < compptr->width_in_blocks;
	     dst_blk_x += compptr->h_samp_factor) {
	  src_buffer = (*srcinfo->mem->access_virt_barray)
	    ((j_common_ptr) srcinfo, src_coef_arrays[ci], dst_blk_x,
	     (JDIMENSION) compptr->h_samp_factor, FALSE);
	  for (offset_x = 0; offset_x < compptr->h_samp_factor; offset_x++) {
	    src_ptr = src_buffer[offset_x][dst_blk_y + offset_y];
	    if (dst_blk_x < comp_width) {
	      /* Block is within the mirrorable area. */
	      dst_ptr = dst_buffer[offset_y]
		[comp_width - dst_blk_x - offset_x - 1];
	      for (i = 0; i < DCTSIZE; i++) {
		for (j = 0; j < DCTSIZE; j++)
		  dst_ptr[j*DCTSIZE+i] = src_ptr[i*DCTSIZE+j];
		i++;
		for (j = 0; j < DCTSIZE; j++)
		  dst_ptr[j*DCTSIZE+i] = -src_ptr[i*DCTSIZE+j];
	      }
	    } else {
	      /* Edge blocks are transposed but not mirrored. */
	      dst_ptr = dst_buffer[offset_y][dst_blk_x + offset_x];
	      for (i = 0; i < DCTSIZE; i++)
		for (j = 0; j < DCTSIZE; j++)
		  dst_ptr[j*DCTSIZE+i] = src_ptr[i*DCTSIZE+j];
	    }
	  }
	}
	  }
	}
  }
}

LOCAL(void)
do_rot_270 (j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
	    jvirt_barray_ptr *src_coef_arrays,
	    jvirt_barray_ptr *dst_coef_arrays)
/* 270 degree rotation is equivalent to
 *   1. Horizontal mirroring;
 *   2. Transposing the image.
 * These two steps are merged into a single processing routine.
 */
{
  JDIMENSION MCU_rows, comp_height, dst_blk_x, dst_blk_y;
  int ci, i, j, offset_x, offset_y;
  JBLOCKARRAY src_buffer, dst_buffer;
  JCOEFPTR src_ptr, dst_ptr;
  jpeg_component_info *compptr;

  /* Because of the horizontal mirror step, we can't process partial iMCUs
   * at the (output) bottom edge properly.  They just get transposed and
   * not mirrored.
   */
  MCU_rows = dstinfo->image_height / (dstinfo->max_v_samp_factor * DCTSIZE);

  for (ci = 0; ci < dstinfo->num_components; ci++) {
	compptr = dstinfo->comp_info + ci;
	comp_height = MCU_rows * compptr->v_samp_factor;
	for (dst_blk_y = 0; dst_blk_y < compptr->height_in_blocks;
	 dst_blk_y += compptr->v_samp_factor) {
	  dst_buffer = (*srcinfo->mem->access_virt_barray)
	((j_common_ptr) srcinfo, dst_coef_arrays[ci], dst_blk_y,
	 (JDIMENSION) compptr->v_samp_factor, TRUE);
	  for (offset_y = 0; offset_y < compptr->v_samp_factor; offset_y++) {
	for (dst_blk_x = 0; dst_blk_x < compptr->width_in_blocks;
	     dst_blk_x += compptr->h_samp_factor) {
	  src_buffer = (*srcinfo->mem->access_virt_barray)
	    ((j_common_ptr) srcinfo, src_coef_arrays[ci], dst_blk_x,
	     (JDIMENSION) compptr->h_samp_factor, FALSE);
	  for (offset_x = 0; offset_x < compptr->h_samp_factor; offset_x++) {
	    dst_ptr = dst_buffer[offset_y][dst_blk_x + offset_x];
	    if (dst_blk_y < comp_height) {
	      /* Block is within the mirrorable area. */
	      src_ptr = src_buffer[offset_x]
		[comp_height - dst_blk_y - offset_y - 1];
	      for (i = 0; i < DCTSIZE; i++) {
		for (j = 0; j < DCTSIZE; j++) {
		  dst_ptr[j*DCTSIZE+i] = src_ptr[i*DCTSIZE+j];
		  j++;
		  dst_ptr[j*DCTSIZE+i] = -src_ptr[i*DCTSIZE+j];
		}
	      }
	    } else {
	      /* Edge blocks are transposed but not mirrored. */
	      src_ptr = src_buffer[offset_x][dst_blk_y + offset_y];
	      for (i = 0; i < DCTSIZE; i++)
		for (j = 0; j < DCTSIZE; j++)
		  dst_ptr[j*DCTSIZE+i] = src_ptr[i*DCTSIZE+j];
	    }
	  }
	}
	  }
	}
  }
}

LOCAL(void)
do_rot_180 (j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
	    jvirt_barray_ptr *src_coef_arrays,
	    jvirt_barray_ptr *dst_coef_arrays)
/* 180 degree rotation is equivalent to
 *   1. Vertical mirroring;
 *   2. Horizontal mirroring.
 * These two steps are merged into a single processing routine.
 */
{
  JDIMENSION MCU_cols, MCU_rows, comp_width, comp_height, dst_blk_x, dst_blk_y;
  int ci, i, j, offset_y;
  JBLOCKARRAY src_buffer, dst_buffer;
  JBLOCKROW src_row_ptr, dst_row_ptr;
  JCOEFPTR src_ptr, dst_ptr;
  jpeg_component_info *compptr;

  MCU_cols = dstinfo->image_width / (dstinfo->max_h_samp_factor * DCTSIZE);
  MCU_rows = dstinfo->image_height / (dstinfo->max_v_samp_factor * DCTSIZE);

  for (ci = 0; ci < dstinfo->num_components; ci++) {
	compptr = dstinfo->comp_info + ci;
	comp_width = MCU_cols * compptr->h_samp_factor;
	comp_height = MCU_rows * compptr->v_samp_factor;
	for (dst_blk_y = 0; dst_blk_y < compptr->height_in_blocks;
	 dst_blk_y += compptr->v_samp_factor) {
	  dst_buffer = (*srcinfo->mem->access_virt_barray)
	((j_common_ptr) srcinfo, dst_coef_arrays[ci], dst_blk_y,
	 (JDIMENSION) compptr->v_samp_factor, TRUE);
	  if (dst_blk_y < comp_height) {
	/* Row is within the vertically mirrorable area. */
	src_buffer = (*srcinfo->mem->access_virt_barray)
	  ((j_common_ptr) srcinfo, src_coef_arrays[ci],
	   comp_height - dst_blk_y - (JDIMENSION) compptr->v_samp_factor,
	   (JDIMENSION) compptr->v_samp_factor, FALSE);
	  } else {
	/* Bottom-edge rows are only mirrored horizontally. */
	src_buffer = (*srcinfo->mem->access_virt_barray)
	  ((j_common_ptr) srcinfo, src_coef_arrays[ci], dst_blk_y,
	   (JDIMENSION) compptr->v_samp_factor, FALSE);
	  }
	  for (offset_y = 0; offset_y < compptr->v_samp_factor; offset_y++) {
	if (dst_blk_y < comp_height) {
	  /* Row is within the mirrorable area. */
	  dst_row_ptr = dst_buffer[offset_y];
	  src_row_ptr = src_buffer[compptr->v_samp_factor - offset_y - 1];
	  /* Process the blocks that can be mirrored both ways. */
	  for (dst_blk_x = 0; dst_blk_x < comp_width; dst_blk_x++) {
	    dst_ptr = dst_row_ptr[dst_blk_x];
	    src_ptr = src_row_ptr[comp_width - dst_blk_x - 1];
	    for (i = 0; i < DCTSIZE; i += 2) {
	      /* For even row, negate every odd column. */
	      for (j = 0; j < DCTSIZE; j += 2) {
		*dst_ptr++ = *src_ptr++;
		*dst_ptr++ = - *src_ptr++;
	      }
	      /* For odd row, negate every even column. */
	      for (j = 0; j < DCTSIZE; j += 2) {
		*dst_ptr++ = - *src_ptr++;
		*dst_ptr++ = *src_ptr++;
	      }
	    }
	  }
	  /* Any remaining right-edge blocks are only mirrored vertically. */
	  for (; dst_blk_x < compptr->width_in_blocks; dst_blk_x++) {
	    dst_ptr = dst_row_ptr[dst_blk_x];
	    src_ptr = src_row_ptr[dst_blk_x];
	    for (i = 0; i < DCTSIZE; i += 2) {
	      for (j = 0; j < DCTSIZE; j++)
		*dst_ptr++ = *src_ptr++;
	      for (j = 0; j < DCTSIZE; j++)
		*dst_ptr++ = - *src_ptr++;
	    }
	  }
	} else {
	  /* Remaining rows are just mirrored horizontally. */
	  dst_row_ptr = dst_buffer[offset_y];
	  src_row_ptr = src_buffer[offset_y];
	  /* Process the blocks that can be mirrored. */
	  for (dst_blk_x = 0; dst_blk_x < comp_width; dst_blk_x++) {
	    dst_ptr = dst_row_ptr[dst_blk_x];
	    src_ptr = src_row_ptr[comp_width - dst_blk_x - 1];
	    for (i = 0; i < DCTSIZE2; i += 2) {
	      *dst_ptr++ = *src_ptr++;
	      *dst_ptr++ = - *src_ptr++;
	    }
	  }
	  /* Any remaining right-edge blocks are only copied. */
	  for (; dst_blk_x < compptr->width_in_blocks; dst_blk_x++) {
	    dst_ptr = dst_row_ptr[dst_blk_x];
	    src_ptr = src_row_ptr[dst_blk_x];
	    for (i = 0; i < DCTSIZE2; i++)
	      *dst_ptr++ = *src_ptr++;
	  }
	}
	  }
	}
  }
}

LOCAL(void)
do_transverse (j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
	       jvirt_barray_ptr *src_coef_arrays,
	       jvirt_barray_ptr *dst_coef_arrays)
/* Transverse transpose is equivalent to
 *   1. 180 degree rotation;
 *   2. Transposition;
 * or
 *   1. Horizontal mirroring;
 *   2. Transposition;
 *   3. Horizontal mirroring.
 * These steps are merged into a single processing routine.
 */
{
  JDIMENSION MCU_cols, MCU_rows, comp_width, comp_height, dst_blk_x, dst_blk_y;
  int ci, i, j, offset_x, offset_y;
  JBLOCKARRAY src_buffer, dst_buffer;
  JCOEFPTR src_ptr, dst_ptr;
  jpeg_component_info *compptr;

  MCU_cols = dstinfo->image_width / (dstinfo->max_h_samp_factor * DCTSIZE);
  MCU_rows = dstinfo->image_height / (dstinfo->max_v_samp_factor * DCTSIZE);

  for (ci = 0; ci < dstinfo->num_components; ci++) {
	compptr = dstinfo->comp_info + ci;
	comp_width = MCU_cols * compptr->h_samp_factor;
	comp_height = MCU_rows * compptr->v_samp_factor;
	for (dst_blk_y = 0; dst_blk_y < compptr->height_in_blocks;
	 dst_blk_y += compptr->v_samp_factor) {
	  dst_buffer = (*srcinfo->mem->access_virt_barray)
	((j_common_ptr) srcinfo, dst_coef_arrays[ci], dst_blk_y,
	 (JDIMENSION) compptr->v_samp_factor, TRUE);
	  for (offset_y = 0; offset_y < compptr->v_samp_factor; offset_y++) {
	for (dst_blk_x = 0; dst_blk_x < compptr->width_in_blocks;
	     dst_blk_x += compptr->h_samp_factor) {
	  src_buffer = (*srcinfo->mem->access_virt_barray)
	    ((j_common_ptr) srcinfo, src_coef_arrays[ci], dst_blk_x,
	     (JDIMENSION) compptr->h_samp_factor, FALSE);
	  for (offset_x = 0; offset_x < compptr->h_samp_factor; offset_x++) {
	    if (dst_blk_y < comp_height) {
	      src_ptr = src_buffer[offset_x]
		[comp_height - dst_blk_y - offset_y - 1];
	      if (dst_blk_x < comp_width) {
		/* Block is within the mirrorable area. */
		dst_ptr = dst_buffer[offset_y]
		  [comp_width - dst_blk_x - offset_x - 1];
		for (i = 0; i < DCTSIZE; i++) {
		  for (j = 0; j < DCTSIZE; j++) {
		    dst_ptr[j*DCTSIZE+i] = src_ptr[i*DCTSIZE+j];
		    j++;
		    dst_ptr[j*DCTSIZE+i] = -src_ptr[i*DCTSIZE+j];
		  }
		  i++;
		  for (j = 0; j < DCTSIZE; j++) {
		    dst_ptr[j*DCTSIZE+i] = -src_ptr[i*DCTSIZE+j];
		    j++;
		    dst_ptr[j*DCTSIZE+i] = src_ptr[i*DCTSIZE+j];
		  }
		}
	      } else {
		/* Right-edge blocks are mirrored in y only */
		dst_ptr = dst_buffer[offset_y][dst_blk_x + offset_x];
		for (i = 0; i < DCTSIZE; i++) {
		  for (j = 0; j < DCTSIZE; j++) {
		    dst_ptr[j*DCTSIZE+i] = src_ptr[i*DCTSIZE+j];
		    j++;
		    dst_ptr[j*DCTSIZE+i] = -src_ptr[i*DCTSIZE+j];
		  }
		}
	      }
	    } else {
	      src_ptr = src_buffer[offset_x][dst_blk_y + offset_y];
	      if (dst_blk_x < comp_width) {
		/* Bottom-edge blocks are mirrored in x only */
		dst_ptr = dst_buffer[offset_y]
		  [comp_width - dst_blk_x - offset_x - 1];
		for (i = 0; i < DCTSIZE; i++) {
		  for (j = 0; j < DCTSIZE; j++)
		    dst_ptr[j*DCTSIZE+i] = src_ptr[i*DCTSIZE+j];
		  i++;
		  for (j = 0; j < DCTSIZE; j++)
		    dst_ptr[j*DCTSIZE+i] = -src_ptr[i*DCTSIZE+j];
		}
	      } else {
		/* At lower right corner, just transpose, no mirroring */
		dst_ptr = dst_buffer[offset_y][dst_blk_x + offset_x];
		for (i = 0; i < DCTSIZE; i++)
		  for (j = 0; j < DCTSIZE; j++)
		    dst_ptr[j*DCTSIZE+i] = src_ptr[i*DCTSIZE+j];
	      }
	    }
	  }
	}
	  }
	}
  }
}

/* Request any required workspace.
 *
 * We allocate the workspace virtual arrays from the source decompression
 * object, so that all the arrays (both the original data and the workspace)
 * will be taken into account while making memory management decisions.
 * Hence, this routine must be called after jpeg_read_header (which reads
 * the image dimensions) and before jpeg_read_coefficients (which realizes
 * the source's virtual arrays).
 */

GLOBAL(void)
jtransform_request_workspace (j_decompress_ptr srcinfo,
			      jpeg_transform_info *info)
{
  jvirt_barray_ptr *coef_arrays = NULL;
  jpeg_component_info *compptr;
  int ci;

  if (info->force_grayscale &&
	  srcinfo->jpeg_color_space == JCS_YCbCr &&
	  srcinfo->num_components == 3) {
	/* We'll only process the first component */
	info->num_components = 1;
  } else {
	/* Process all the components */
	info->num_components = srcinfo->num_components;
  }

  switch (info->transform) {
  case JXFORM_NONE:
  case JXFORM_FLIP_H:
	/* Don't need a workspace array */
	break;
  case JXFORM_FLIP_V:
  case JXFORM_ROT_180:
	/* Need workspace arrays having same dimensions as source image.
	 * Note that we allocate arrays padded out to the next iMCU boundary,
	 * so that transform routines need not worry about missing edge blocks.
	 */
	coef_arrays = (jvirt_barray_ptr *)
	  (*srcinfo->mem->alloc_small) ((j_common_ptr) srcinfo, JPOOL_IMAGE,
	SIZEOF(jvirt_barray_ptr) * info->num_components);
	for (ci = 0; ci < info->num_components; ci++) {
	  compptr = srcinfo->comp_info + ci;
	  coef_arrays[ci] = (*srcinfo->mem->request_virt_barray)
	((j_common_ptr) srcinfo, JPOOL_IMAGE, FALSE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
				(long) compptr->h_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) compptr->v_samp_factor);
	}
	break;
  case JXFORM_TRANSPOSE:
  case JXFORM_TRANSVERSE:
  case JXFORM_ROT_90:
  case JXFORM_ROT_270:
	/* Need workspace arrays having transposed dimensions.
	 * Note that we allocate arrays padded out to the next iMCU boundary,
	 * so that transform routines need not worry about missing edge blocks.
	 */
	coef_arrays = (jvirt_barray_ptr *)
	  (*srcinfo->mem->alloc_small) ((j_common_ptr) srcinfo, JPOOL_IMAGE,
	SIZEOF(jvirt_barray_ptr) * info->num_components);
	for (ci = 0; ci < info->num_components; ci++) {
	  compptr = srcinfo->comp_info + ci;
	  coef_arrays[ci] = (*srcinfo->mem->request_virt_barray)
	((j_common_ptr) srcinfo, JPOOL_IMAGE, FALSE,
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
				(long) compptr->v_samp_factor),
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
				(long) compptr->h_samp_factor),
	 (JDIMENSION) compptr->h_samp_factor);
	}
	break;
  }
  info->workspace_coef_arrays = coef_arrays;
}

/* Transpose destination image parameters */

LOCAL(void)
transpose_critical_parameters (j_compress_ptr dstinfo)
{
  int tblno, i, j, ci, itemp;
  jpeg_component_info *compptr;
  JQUANT_TBL *qtblptr;
  JDIMENSION dtemp;
  UINT16 qtemp;

  /* Transpose basic image dimensions */
  dtemp = dstinfo->image_width;
  dstinfo->image_width = dstinfo->image_height;
  dstinfo->image_height = dtemp;

  /* Transpose sampling factors */
  for (ci = 0; ci < dstinfo->num_components; ci++) {
	compptr = dstinfo->comp_info + ci;
	itemp = compptr->h_samp_factor;
	compptr->h_samp_factor = compptr->v_samp_factor;
	compptr->v_samp_factor = itemp;
  }

  /* Transpose quantization tables */
  for (tblno = 0; tblno < NUM_QUANT_TBLS; tblno++) {
	qtblptr = dstinfo->quant_tbl_ptrs[tblno];
	if (qtblptr != NULL) {
	  for (i = 0; i < DCTSIZE; i++) {
	for (j = 0; j < i; j++) {
	  qtemp = qtblptr->quantval[i*DCTSIZE+j];
	  qtblptr->quantval[i*DCTSIZE+j] = qtblptr->quantval[j*DCTSIZE+i];
	  qtblptr->quantval[j*DCTSIZE+i] = qtemp;
	}
	  }
	}
  }
}

/* Trim off any partial iMCUs on the indicated destination edge */

LOCAL(void)
trim_right_edge (j_compress_ptr dstinfo)
{
  int ci, max_h_samp_factor;
  JDIMENSION MCU_cols;

  /* We have to compute max_h_samp_factor ourselves,
   * because it hasn't been set yet in the destination
   * (and we don't want to use the source's value).
   */
  max_h_samp_factor = 1;
  for (ci = 0; ci < dstinfo->num_components; ci++) {
	int h_samp_factor = dstinfo->comp_info[ci].h_samp_factor;
	max_h_samp_factor = MAX(max_h_samp_factor, h_samp_factor);
  }
  MCU_cols = dstinfo->image_width / (max_h_samp_factor * DCTSIZE);
  if (MCU_cols > 0)		/* can't trim to 0 pixels */
	dstinfo->image_width = MCU_cols * (max_h_samp_factor * DCTSIZE);
}

LOCAL(void)
trim_bottom_edge (j_compress_ptr dstinfo)
{
  int ci, max_v_samp_factor;
  JDIMENSION MCU_rows;

  /* We have to compute max_v_samp_factor ourselves,
   * because it hasn't been set yet in the destination
   * (and we don't want to use the source's value).
   */
  max_v_samp_factor = 1;
  for (ci = 0; ci < dstinfo->num_components; ci++) {
	int v_samp_factor = dstinfo->comp_info[ci].v_samp_factor;
	max_v_samp_factor = MAX(max_v_samp_factor, v_samp_factor);
  }
  MCU_rows = dstinfo->image_height / (max_v_samp_factor * DCTSIZE);
  if (MCU_rows > 0)		/* can't trim to 0 pixels */
	dstinfo->image_height = MCU_rows * (max_v_samp_factor * DCTSIZE);
}

/* Adjust output image parameters as needed.
 *
 * This must be called after jpeg_copy_critical_parameters()
 * and before jpeg_write_coefficients().
 *
 * The return value is the set of virtual coefficient arrays to be written
 * (either the ones allocated by jtransform_request_workspace, or the
 * original source data arrays).  The caller will need to pass this value
 * to jpeg_write_coefficients().
 */

GLOBAL(jvirt_barray_ptr *)
jtransform_adjust_parameters (j_decompress_ptr,
			      j_compress_ptr dstinfo,
			      jvirt_barray_ptr *src_coef_arrays,
			      jpeg_transform_info *info)
{
  /* If force-to-grayscale is requested, adjust destination parameters */
  if (info->force_grayscale) {
	/* We use jpeg_set_colorspace to make sure subsidiary settings get fixed
	 * properly.  Among other things, the target h_samp_factor & v_samp_factor
	 * will get set to 1, which typically won't match the source.
	 * In fact we do this even if the source is already grayscale; that
	 * provides an easy way of coercing a grayscale JPEG with funny sampling
	 * factors to the customary 1,1.  (Some decoders fail on other factors.)
	 */
	if ((dstinfo->jpeg_color_space == JCS_YCbCr &&
	 dstinfo->num_components == 3) ||
	(dstinfo->jpeg_color_space == JCS_GRAYSCALE &&
	 dstinfo->num_components == 1)) {
	  /* We have to preserve the source's quantization table number. */
	  int sv_quant_tbl_no = dstinfo->comp_info[0].quant_tbl_no;
	  jpeg_set_colorspace(dstinfo, JCS_GRAYSCALE);
	  dstinfo->comp_info[0].quant_tbl_no = sv_quant_tbl_no;
	} else {
	  /* Sorry, can't do it */
	  ERREXIT(dstinfo, JERR_CONVERSION_NOTIMPL);
	}
  }

  /* Correct the destination's image dimensions etc if necessary */
  switch (info->transform) {
  case JXFORM_NONE:
	/* Nothing to do */
	break;
  case JXFORM_FLIP_H:
	if (info->trim)
	  trim_right_edge(dstinfo);
	break;
  case JXFORM_FLIP_V:
	if (info->trim)
	  trim_bottom_edge(dstinfo);
	break;
  case JXFORM_TRANSPOSE:
	transpose_critical_parameters(dstinfo);
	/* transpose does NOT have to trim anything */
	break;
  case JXFORM_TRANSVERSE:
	transpose_critical_parameters(dstinfo);
	if (info->trim) {
	  trim_right_edge(dstinfo);
	  trim_bottom_edge(dstinfo);
	}
	break;
  case JXFORM_ROT_90:
	transpose_critical_parameters(dstinfo);
	if (info->trim)
	  trim_right_edge(dstinfo);
	break;
  case JXFORM_ROT_180:
	if (info->trim) {
	  trim_right_edge(dstinfo);
	  trim_bottom_edge(dstinfo);
	}
	break;
  case JXFORM_ROT_270:
	transpose_critical_parameters(dstinfo);
	if (info->trim)
	  trim_bottom_edge(dstinfo);
	break;
  }

  /* Return the appropriate output data set */
  if (info->workspace_coef_arrays != NULL)
	return info->workspace_coef_arrays;
  return src_coef_arrays;
}

/* Execute the actual transformation, if any.
 *
 * This must be called *after* jpeg_write_coefficients, because it depends
 * on jpeg_write_coefficients to have computed subsidiary values such as
 * the per-component width and height fields in the destination object.
 *
 * Note that some transformations will modify the source data arrays!
 */

GLOBAL(void)
jtransform_execute_transformation (j_decompress_ptr srcinfo,
				   j_compress_ptr dstinfo,
				   jvirt_barray_ptr *src_coef_arrays,
				   jpeg_transform_info *info)
{
  jvirt_barray_ptr *dst_coef_arrays = info->workspace_coef_arrays;

  switch (info->transform) {
  case JXFORM_NONE:
	break;
  case JXFORM_FLIP_H:
	do_flip_h(srcinfo, dstinfo, src_coef_arrays);
	break;
  case JXFORM_FLIP_V:
	do_flip_v(srcinfo, dstinfo, src_coef_arrays, dst_coef_arrays);
	break;
  case JXFORM_TRANSPOSE:
	do_transpose(srcinfo, dstinfo, src_coef_arrays, dst_coef_arrays);
	break;
  case JXFORM_TRANSVERSE:
	do_transverse(srcinfo, dstinfo, src_coef_arrays, dst_coef_arrays);
	break;
  case JXFORM_ROT_90:
	do_rot_90(srcinfo, dstinfo, src_coef_arrays, dst_coef_arrays);
	break;
  case JXFORM_ROT_180:
	do_rot_180(srcinfo, dstinfo, src_coef_arrays, dst_coef_arrays);
	break;
  case JXFORM_ROT_270:
	do_rot_270(srcinfo, dstinfo, src_coef_arrays, dst_coef_arrays);
	break;
  }
}

#endif /* TRANSFORMS_SUPPORTED */

/* Setup decompression object to save desired markers in memory.
 * This must be called before jpeg_read_header() to have the desired effect.
 */

GLOBAL(void)
jcopy_markers_setup (j_decompress_ptr srcinfo, JCOPY_OPTION option)
{
#ifdef SAVE_MARKERS_SUPPORTED
  int m;

  /* Save comments except under NONE option */
  if (option != JCOPYOPT_NONE) {
	jpeg_save_markers(srcinfo, JPEG_COM, 0xFFFF);
  }
  /* Save all types of APPn markers iff ALL option */
  if (option == JCOPYOPT_ALL) {
	for (m = 0; m < 16; m++)
	  jpeg_save_markers(srcinfo, JPEG_APP0 + m, 0xFFFF);
  }
#endif /* SAVE_MARKERS_SUPPORTED */
}

/* Copy markers saved in the given source object to the destination object.
 * This should be called just after jpeg_start_compress() or
 * jpeg_write_coefficients().
 * Note that those routines will have written the SOI, and also the
 * JFIF APP0 or Adobe APP14 markers if selected.
 */

GLOBAL(void)
jcopy_markers_execute (j_decompress_ptr srcinfo, j_compress_ptr dstinfo,
		       JCOPY_OPTION)
{
  jpeg_saved_marker_ptr marker;

  /* In the current implementation, we don't actually need to examine the
   * option flag here; we just copy everything that got saved.
   * But to avoid confusion, we do not output JFIF and Adobe APP14 markers
   * if the encoder library already wrote one.
   */
  for (marker = srcinfo->marker_list; marker != NULL; marker = marker->next) {
	if (dstinfo->write_JFIF_header &&
	marker->marker == JPEG_APP0 &&
	marker->data_length >= 5 &&
	GETJOCTET(marker->data[0]) == 0x4A &&
	GETJOCTET(marker->data[1]) == 0x46 &&
	GETJOCTET(marker->data[2]) == 0x49 &&
	GETJOCTET(marker->data[3]) == 0x46 &&
	GETJOCTET(marker->data[4]) == 0)
	  continue;			/* reject duplicate JFIF */
	if (dstinfo->write_Adobe_marker &&
	marker->marker == JPEG_APP0+14 &&
	marker->data_length >= 5 &&
	GETJOCTET(marker->data[0]) == 0x41 &&
	GETJOCTET(marker->data[1]) == 0x64 &&
	GETJOCTET(marker->data[2]) == 0x6F &&
	GETJOCTET(marker->data[3]) == 0x62 &&
	GETJOCTET(marker->data[4]) == 0x65)
	  continue;			/* reject duplicate Adobe */
#ifdef NEED_FAR_POINTERS
	/* We could use jpeg_write_marker if the data weren't FAR... */
	{
	  unsigned int i;
	  jpeg_write_m_header(dstinfo, marker->marker, marker->data_length);
	  for (i = 0; i < marker->data_length; i++)
	jpeg_write_m_byte(dstinfo, marker->data[i]);
	}
#else
	jpeg_write_marker(dstinfo, marker->marker,
		      marker->data, marker->data_length);
#endif
  }
}

/*** End of inlined file: transupp.c ***/

#else
	#define JPEG_INTERNALS
	#undef FAR
	#include <jpeglib.h>
#endif
}

#undef max
#undef min

#if JUCE_MSVC
 #pragma warning (pop)
#endif

namespace JPEGHelpers
{
	using namespace jpeglibNamespace;

   #if ! JUCE_MSVC
	using jpeglibNamespace::boolean;
   #endif

	struct JPEGDecodingFailure {};

	void fatalErrorHandler (j_common_ptr)            { throw JPEGDecodingFailure(); }
	void silentErrorCallback1 (j_common_ptr)         {}
	void silentErrorCallback2 (j_common_ptr, int)    {}
	void silentErrorCallback3 (j_common_ptr, char*)  {}

	void setupSilentErrorHandler (struct jpeg_error_mgr& err)
	{
		zerostruct (err);

		err.error_exit      = fatalErrorHandler;
		err.emit_message    = silentErrorCallback2;
		err.output_message  = silentErrorCallback1;
		err.format_message  = silentErrorCallback3;
		err.reset_error_mgr = silentErrorCallback1;
	}

	void dummyCallback1 (j_decompress_ptr) {}

	void jpegSkip (j_decompress_ptr decompStruct, long num)
	{
		decompStruct->src->next_input_byte += num;

		num = jmin (num, (long) decompStruct->src->bytes_in_buffer);
		decompStruct->src->bytes_in_buffer -= num;
	}

	boolean jpegFill (j_decompress_ptr)
	{
		return 0;
	}

	const int jpegBufferSize = 512;

	struct JuceJpegDest  : public jpeg_destination_mgr
	{
		OutputStream* output;
		char* buffer;
	};

	void jpegWriteInit (j_compress_ptr) {}

	void jpegWriteTerminate (j_compress_ptr cinfo)
	{
		JuceJpegDest* const dest = static_cast <JuceJpegDest*> (cinfo->dest);

		const size_t numToWrite = jpegBufferSize - dest->free_in_buffer;
		dest->output->write (dest->buffer, (int) numToWrite);
	}

	boolean jpegWriteFlush (j_compress_ptr cinfo)
	{
		JuceJpegDest* const dest = static_cast <JuceJpegDest*> (cinfo->dest);

		const int numToWrite = jpegBufferSize;

		dest->next_output_byte = reinterpret_cast <JOCTET*> (dest->buffer);
		dest->free_in_buffer = jpegBufferSize;

		return (boolean) dest->output->write (dest->buffer, numToWrite);
	}
}

JPEGImageFormat::JPEGImageFormat()
	: quality (-1.0f)
{
}

JPEGImageFormat::~JPEGImageFormat() {}

void JPEGImageFormat::setQuality (const float newQuality)
{
	quality = newQuality;
}

String JPEGImageFormat::getFormatName() { return "JPEG"; }

bool JPEGImageFormat::canUnderstand (InputStream& in)
{
	const int bytesNeeded = 10;
	uint8 header [bytesNeeded];

	if (in.read (header, bytesNeeded) == bytesNeeded)
	{
		return header[0] == 0xff
			&& header[1] == 0xd8
			&& header[2] == 0xff
			&& (header[3] == 0xe0 || header[3] == 0xe1);
	}

	return false;
}

#if (JUCE_MAC || JUCE_IOS) && USE_COREGRAPHICS_RENDERING && JUCE_USE_COREIMAGE_LOADER
 Image juce_loadWithCoreImage (InputStream& input);
#endif

Image JPEGImageFormat::decodeImage (InputStream& in)
{
#if (JUCE_MAC || JUCE_IOS) && USE_COREGRAPHICS_RENDERING && JUCE_USE_COREIMAGE_LOADER
	return juce_loadWithCoreImage (in);
#else
	using namespace jpeglibNamespace;
	using namespace JPEGHelpers;

	MemoryOutputStream mb;
	mb << in;

	Image image;

	if (mb.getDataSize() > 16)
	{
		struct jpeg_decompress_struct jpegDecompStruct;

		struct jpeg_error_mgr jerr;
		setupSilentErrorHandler (jerr);
		jpegDecompStruct.err = &jerr;

		jpeg_create_decompress (&jpegDecompStruct);

		jpegDecompStruct.src = (jpeg_source_mgr*)(jpegDecompStruct.mem->alloc_small)
			((j_common_ptr)(&jpegDecompStruct), JPOOL_PERMANENT, sizeof (jpeg_source_mgr));

		jpegDecompStruct.src->init_source       = dummyCallback1;
		jpegDecompStruct.src->fill_input_buffer = jpegFill;
		jpegDecompStruct.src->skip_input_data   = jpegSkip;
		jpegDecompStruct.src->resync_to_restart = jpeg_resync_to_restart;
		jpegDecompStruct.src->term_source       = dummyCallback1;

		jpegDecompStruct.src->next_input_byte   = static_cast <const unsigned char*> (mb.getData());
		jpegDecompStruct.src->bytes_in_buffer   = mb.getDataSize();

		try
		{
			jpeg_read_header (&jpegDecompStruct, TRUE);

			jpeg_calc_output_dimensions (&jpegDecompStruct);

			const int width  = (int) jpegDecompStruct.output_width;
			const int height = (int) jpegDecompStruct.output_height;

			jpegDecompStruct.out_color_space = JCS_RGB;

			JSAMPARRAY buffer
				= (*jpegDecompStruct.mem->alloc_sarray) ((j_common_ptr) &jpegDecompStruct,
														 JPOOL_IMAGE,
														 (JDIMENSION) width * 3, 1);

			if (jpeg_start_decompress (&jpegDecompStruct))
			{
				image = Image (Image::RGB, width, height, false);
				image.getProperties()->set ("originalImageHadAlpha", false);
				const bool hasAlphaChan = image.hasAlphaChannel(); // (the native image creator may not give back what we expect)

				const Image::BitmapData destData (image, Image::BitmapData::writeOnly);

				for (int y = 0; y < height; ++y)
				{
					jpeg_read_scanlines (&jpegDecompStruct, buffer, 1);

					const uint8* src = *buffer;
					uint8* dest = destData.getLinePointer (y);

					if (hasAlphaChan)
					{
						for (int i = width; --i >= 0;)
						{
							((PixelARGB*) dest)->setARGB (0xff, src[0], src[1], src[2]);
							((PixelARGB*) dest)->premultiply();
							dest += destData.pixelStride;
							src += 3;
						}
					}
					else
					{
						for (int i = width; --i >= 0;)
						{
							((PixelRGB*) dest)->setARGB (0xff, src[0], src[1], src[2]);
							dest += destData.pixelStride;
							src += 3;
						}
					}
				}

				jpeg_finish_decompress (&jpegDecompStruct);

				in.setPosition (((char*) jpegDecompStruct.src->next_input_byte) - (char*) mb.getData());
			}

			jpeg_destroy_decompress (&jpegDecompStruct);
		}
		catch (...)
		{}
	}

	return image;
#endif
}

bool JPEGImageFormat::writeImageToStream (const Image& image, OutputStream& out)
{
	using namespace jpeglibNamespace;
	using namespace JPEGHelpers;

	struct jpeg_compress_struct jpegCompStruct;
	jpeg_create_compress (&jpegCompStruct);

	struct jpeg_error_mgr jerr;
	setupSilentErrorHandler (jerr);
	jpegCompStruct.err = &jerr;

	JuceJpegDest dest;
	jpegCompStruct.dest = &dest;

	dest.output = &out;
	HeapBlock <char> tempBuffer (jpegBufferSize);
	dest.buffer = tempBuffer;
	dest.next_output_byte = (JOCTET*) dest.buffer;
	dest.free_in_buffer = jpegBufferSize;
	dest.init_destination = jpegWriteInit;
	dest.empty_output_buffer = jpegWriteFlush;
	dest.term_destination = jpegWriteTerminate;

	jpegCompStruct.image_width  = (JDIMENSION) image.getWidth();
	jpegCompStruct.image_height = (JDIMENSION) image.getHeight();
	jpegCompStruct.input_components = 3;
	jpegCompStruct.in_color_space = JCS_RGB;
	jpegCompStruct.write_JFIF_header = 1;

	jpegCompStruct.X_density = 72;
	jpegCompStruct.Y_density = 72;

	jpeg_set_defaults (&jpegCompStruct);

	jpegCompStruct.dct_method = JDCT_FLOAT;
	jpegCompStruct.optimize_coding = 1;

	if (quality < 0.0f)
		quality = 0.85f;

	jpeg_set_quality (&jpegCompStruct, jlimit (0, 100, roundToInt (quality * 100.0f)), TRUE);

	jpeg_start_compress (&jpegCompStruct, TRUE);

	const int strideBytes = (int) (jpegCompStruct.image_width * jpegCompStruct.input_components);

	JSAMPARRAY buffer = (*jpegCompStruct.mem->alloc_sarray) ((j_common_ptr) &jpegCompStruct,
															 JPOOL_IMAGE, (JDIMENSION) strideBytes, 1);

	const Image::BitmapData srcData (image, Image::BitmapData::readOnly);

	while (jpegCompStruct.next_scanline < jpegCompStruct.image_height)
	{
		uint8* dst = *buffer;

		if (srcData.pixelFormat == Image::RGB)
		{
			const uint8* src = srcData.getLinePointer ((int) jpegCompStruct.next_scanline);

			for (int i = srcData.width; --i >= 0;)
			{
				*dst++ = ((const PixelRGB*) src)->getRed();
				*dst++ = ((const PixelRGB*) src)->getGreen();
				*dst++ = ((const PixelRGB*) src)->getBlue();
				src += srcData.pixelStride;
			}
		}
		else
		{
			for (int x = 0; x < srcData.width; ++x)
			{
				const Colour pixel (srcData.getPixelColour (x, (int) jpegCompStruct.next_scanline));
				*dst++ = pixel.getRed();
				*dst++ = pixel.getGreen();
				*dst++ = pixel.getBlue();
			}
		}

		jpeg_write_scanlines (&jpegCompStruct, buffer, 1);
	}

	jpeg_finish_compress (&jpegCompStruct);
	jpeg_destroy_compress (&jpegCompStruct);

	return true;
}

/*** End of inlined file: juce_JPEGLoader.cpp ***/


/*** Start of inlined file: juce_PNGLoader.cpp ***/
#if JUCE_MSVC
 #pragma warning (push)
 #pragma warning (disable: 4390 4611 4365 4267)
 #ifdef __INTEL_COMPILER
  #pragma warning (disable: 2544 2545)
 #endif
#endif

namespace zlibNamespace
{
#if JUCE_INCLUDE_ZLIB_CODE
  #undef OS_CODE
  #undef fdopen

/*** Start of inlined file: zlib.h ***/
#ifndef ZLIB_H
#define ZLIB_H


/*** Start of inlined file: zconf.h ***/
/* @(#) $Id: zconf.h,v 1.1 2007/06/07 17:54:37 jules_rms Exp $ */

#ifndef ZCONF_H
#define ZCONF_H

// *** Just a few hacks here to make it compile nicely with Juce..
#define Z_PREFIX 1
#undef __MACTYPES__

#ifdef _MSC_VER
  #pragma warning (disable : 4131 4127 4244 4267)
#endif

/*
 * If you *really* need a unique prefix for all types and library functions,
 * compile with -DZ_PREFIX. The "standard" zlib should be compiled without it.
 */
#ifdef Z_PREFIX
#  define deflateInit_          z_deflateInit_
#  define deflate               z_deflate
#  define deflateEnd            z_deflateEnd
#  define inflateInit_          z_inflateInit_
#  define inflate               z_inflate
#  define inflateEnd            z_inflateEnd
#  define inflatePrime          z_inflatePrime
#  define inflateGetHeader      z_inflateGetHeader
#  define adler32_combine       z_adler32_combine
#  define crc32_combine         z_crc32_combine
#  define deflateInit2_         z_deflateInit2_
#  define deflateSetDictionary  z_deflateSetDictionary
#  define deflateCopy           z_deflateCopy
#  define deflateReset          z_deflateReset
#  define deflateParams         z_deflateParams
#  define deflateBound          z_deflateBound
#  define deflatePrime          z_deflatePrime
#  define inflateInit2_         z_inflateInit2_
#  define inflateSetDictionary  z_inflateSetDictionary
#  define inflateSync           z_inflateSync
#  define inflateSyncPoint      z_inflateSyncPoint
#  define inflateCopy           z_inflateCopy
#  define inflateReset          z_inflateReset
#  define inflateBack           z_inflateBack
#  define inflateBackEnd        z_inflateBackEnd
#  define compress              z_compress
#  define compress2             z_compress2
#  define compressBound         z_compressBound
#  define uncompress            z_uncompress
#  define adler32               z_adler32
#  define crc32                 z_crc32
#  define get_crc_table         z_get_crc_table
#  define zError                z_zError

#  define alloc_func            z_alloc_func
#  define free_func             z_free_func
#  define in_func               z_in_func
#  define out_func              z_out_func
#  define Byte                  z_Byte
#  define uInt                  z_uInt
#  define uLong                 z_uLong
#  define Bytef                 z_Bytef
#  define charf                 z_charf
#  define intf                  z_intf
#  define uIntf                 z_uIntf
#  define uLongf                z_uLongf
#  define voidpf                z_voidpf
#  define voidp                 z_voidp
#endif

#if defined(__MSDOS__) && !defined(MSDOS)
#  define MSDOS
#endif
#if (defined(OS_2) || defined(__OS2__)) && !defined(OS2)
#  define OS2
#endif
#if defined(_WINDOWS) && !defined(WINDOWS)
#  define WINDOWS
#endif
#if defined(_WIN32) || defined(_WIN32_WCE) || defined(__WIN32__)
#  ifndef WIN32
#    define WIN32
#  endif
#endif
#if (defined(MSDOS) || defined(OS2) || defined(WINDOWS)) && !defined(WIN32)
#  if !defined(__GNUC__) && !defined(__FLAT__) && !defined(__386__)
#    ifndef SYS16BIT
#      define SYS16BIT
#    endif
#  endif
#endif

/*
 * Compile with -DMAXSEG_64K if the alloc function cannot allocate more
 * than 64k bytes at a time (needed on systems with 16-bit int).
 */
#ifdef SYS16BIT
#  define MAXSEG_64K
#endif
#ifdef MSDOS
#  define UNALIGNED_OK
#endif

#ifdef __STDC_VERSION__
#  ifndef STDC
#    define STDC
#  endif
#  if __STDC_VERSION__ >= 199901L
#    ifndef STDC99
#      define STDC99
#    endif
#  endif
#endif
#if !defined(STDC) && (defined(__STDC__) || defined(__cplusplus))
#  define STDC
#endif
#if !defined(STDC) && (defined(__GNUC__) || defined(__BORLANDC__))
#  define STDC
#endif
#if !defined(STDC) && (defined(MSDOS) || defined(WINDOWS) || defined(WIN32))
#  define STDC
#endif
#if !defined(STDC) && (defined(OS2) || defined(__HOS_AIX__))
#  define STDC
#endif

#if defined(__OS400__) && !defined(STDC)    /* iSeries (formerly AS/400). */
#  define STDC
#endif

#ifndef STDC
#  ifndef const /* cannot use !defined(STDC) && !defined(const) on Mac */
#    define const       /* note: need a more gentle solution here */
#  endif
#endif

/* Some Mac compilers merge all .h files incorrectly: */
#if defined(__MWERKS__)||defined(applec)||defined(THINK_C)||defined(__SC__)
#  define NO_DUMMY_DECL
#endif

/* Maximum value for memLevel in deflateInit2 */
#ifndef MAX_MEM_LEVEL
#  ifdef MAXSEG_64K
#    define MAX_MEM_LEVEL 8
#  else
#    define MAX_MEM_LEVEL 9
#  endif
#endif

/* Maximum value for windowBits in deflateInit2 and inflateInit2.
 * WARNING: reducing MAX_WBITS makes minigzip unable to extract .gz files
 * created by gzip. (Files created by minigzip can still be extracted by
 * gzip.)
 */
#ifndef MAX_WBITS
#  define MAX_WBITS   15 /* 32K LZ77 window */
#endif

/* The memory requirements for deflate are (in bytes):
			(1 << (windowBits+2)) +  (1 << (memLevel+9))
 that is: 128K for windowBits=15  +  128K for memLevel = 8  (default values)
 plus a few kilobytes for small objects. For example, if you want to reduce
 the default memory requirements from 256K to 128K, compile with
	 make CFLAGS="-O -DMAX_WBITS=14 -DMAX_MEM_LEVEL=7"
 Of course this will generally degrade compression (there's no free lunch).

   The memory requirements for inflate are (in bytes) 1 << windowBits
 that is, 32K for windowBits=15 (default value) plus a few kilobytes
 for small objects.
*/

						/* Type declarations */

#ifndef OF /* function prototypes */
#  ifdef STDC
#    define OF(args)  args
#  else
#    define OF(args)  ()
#  endif
#endif

/* The following definitions for FAR are needed only for MSDOS mixed
 * model programming (small or medium model with some far allocations).
 * This was tested only with MSC; for other MSDOS compilers you may have
 * to define NO_MEMCPY in zutil.h.  If you don't need the mixed model,
 * just define FAR to be empty.
 */
#ifdef SYS16BIT
#  if defined(M_I86SM) || defined(M_I86MM)
	 /* MSC small or medium model */
#    define SMALL_MEDIUM
#    ifdef _MSC_VER
#      define FAR _far
#    else
#      define FAR far
#    endif
#  endif
#  if (defined(__SMALL__) || defined(__MEDIUM__))
	 /* Turbo C small or medium model */
#    define SMALL_MEDIUM
#    ifdef __BORLANDC__
#      define FAR _far
#    else
#      define FAR far
#    endif
#  endif
#endif

#if defined(WINDOWS) || defined(WIN32)
   /* If building or using zlib as a DLL, define ZLIB_DLL.
	* This is not mandatory, but it offers a little performance increase.
	*/
#  ifdef ZLIB_DLL
#    if defined(WIN32) && (!defined(__BORLANDC__) || (__BORLANDC__ >= 0x500))
#      ifdef ZLIB_INTERNAL
#        define ZEXTERN extern __declspec(dllexport)
#      else
#        define ZEXTERN extern __declspec(dllimport)
#      endif
#    endif
#  endif  /* ZLIB_DLL */
   /* If building or using zlib with the WINAPI/WINAPIV calling convention,
	* define ZLIB_WINAPI.
	* Caution: the standard ZLIB1.DLL is NOT compiled using ZLIB_WINAPI.
	*/
#  ifdef ZLIB_WINAPI
#    ifdef FAR
#      undef FAR
#    endif
#    include <windows.h>
	 /* No need for _export, use ZLIB.DEF instead. */
	 /* For complete Windows compatibility, use WINAPI, not __stdcall. */
#    define ZEXPORT WINAPI
#    ifdef WIN32
#      define ZEXPORTVA WINAPIV
#    else
#      define ZEXPORTVA FAR CDECL
#    endif
#  endif
#endif

#if defined (__BEOS__)
#  ifdef ZLIB_DLL
#    ifdef ZLIB_INTERNAL
#      define ZEXPORT   __declspec(dllexport)
#      define ZEXPORTVA __declspec(dllexport)
#    else
#      define ZEXPORT   __declspec(dllimport)
#      define ZEXPORTVA __declspec(dllimport)
#    endif
#  endif
#endif

#ifndef ZEXTERN
#  define ZEXTERN extern
#endif
#ifndef ZEXPORT
#  define ZEXPORT
#endif
#ifndef ZEXPORTVA
#  define ZEXPORTVA
#endif

#ifndef FAR
#  define FAR
#endif

#if !defined(__MACTYPES__)
typedef unsigned char  Byte;  /* 8 bits */
#endif
typedef unsigned int   uInt;  /* 16 bits or more */
typedef unsigned long  uLong; /* 32 bits or more */

#ifdef SMALL_MEDIUM
   /* Borland C/C++ and some old MSC versions ignore FAR inside typedef */
#  define Bytef Byte FAR
#else
   typedef Byte  FAR Bytef;
#endif
typedef char  FAR charf;
typedef int   FAR intf;
typedef uInt  FAR uIntf;
typedef uLong FAR uLongf;

#ifdef STDC
   typedef void const *voidpc;
   typedef void FAR   *voidpf;
   typedef void       *voidp;
#else
   typedef Byte const *voidpc;
   typedef Byte FAR   *voidpf;
   typedef Byte       *voidp;
#endif

#if 0           /* HAVE_UNISTD_H -- this line is updated by ./configure */
#  include <sys/types.h> /* for off_t */
#  include <unistd.h>    /* for SEEK_* and off_t */
#  ifdef VMS
#    include <unixio.h>   /* for off_t */
#  endif
#  define z_off_t off_t
#endif
#ifndef SEEK_SET
#  define SEEK_SET        0       /* Seek from beginning of file.  */
#  define SEEK_CUR        1       /* Seek from current position.  */
#  define SEEK_END        2       /* Set file pointer to EOF plus "offset" */
#endif
#ifndef z_off_t
#  define z_off_t long
#endif

#if defined(__OS400__)
#  define NO_vsnprintf
#endif

#if defined(__MVS__)
#  define NO_vsnprintf
#  ifdef FAR
#    undef FAR
#  endif
#endif

/* MVS linker does not support external names larger than 8 bytes */
#if defined(__MVS__)
#   pragma map(deflateInit_,"DEIN")
#   pragma map(deflateInit2_,"DEIN2")
#   pragma map(deflateEnd,"DEEND")
#   pragma map(deflateBound,"DEBND")
#   pragma map(inflateInit_,"ININ")
#   pragma map(inflateInit2_,"ININ2")
#   pragma map(inflateEnd,"INEND")
#   pragma map(inflateSync,"INSY")
#   pragma map(inflateSetDictionary,"INSEDI")
#   pragma map(compressBound,"CMBND")
#   pragma map(inflate_table,"INTABL")
#   pragma map(inflate_fast,"INFA")
#   pragma map(inflate_copyright,"INCOPY")
#endif

#endif /* ZCONF_H */

/*** End of inlined file: zconf.h ***/

#ifdef __cplusplus
//extern "C" {
#endif

#define ZLIB_VERSION "1.2.3"
#define ZLIB_VERNUM 0x1230

/*
	 The 'zlib' compression library provides in-memory compression and
  decompression functions, including integrity checks of the uncompressed
  data.  This version of the library supports only one compression method
  (deflation) but other algorithms will be added later and will have the same
  stream interface.

	 Compression can be done in a single step if the buffers are large
  enough (for example if an input file is mmap'ed), or can be done by
  repeated calls of the compression function.  In the latter case, the
  application must provide more input and/or consume the output
  (providing more output space) before each call.

	 The compressed data format used by default by the in-memory functions is
  the zlib format, which is a zlib wrapper documented in RFC 1950, wrapped
  around a deflate stream, which is itself documented in RFC 1951.

	 The library also supports reading and writing files in gzip (.gz) format
  with an interface similar to that of stdio using the functions that start
  with "gz".  The gzip format is different from the zlib format.  gzip is a
  gzip wrapper, documented in RFC 1952, wrapped around a deflate stream.

	 This library can optionally read and write gzip streams in memory as well.

	 The zlib format was designed to be compact and fast for use in memory
  and on communications channels.  The gzip format was designed for single-
  file compression on file systems, has a larger header than zlib to maintain
  directory information, and uses a different, slower check method than zlib.

	 The library does not install any signal handler. The decoder checks
  the consistency of the compressed data, so the library should never
  crash even in case of corrupted input.
*/

typedef voidpf (*alloc_func) OF((voidpf opaque, uInt items, uInt size));
typedef void   (*free_func)  OF((voidpf opaque, voidpf address));

struct internal_state;

typedef struct z_stream_s {
	Bytef    *next_in;  /* next input byte */
	uInt     avail_in;  /* number of bytes available at next_in */
	uLong    total_in;  /* total nb of input bytes read so far */

	Bytef    *next_out; /* next output byte should be put there */
	uInt     avail_out; /* remaining free space at next_out */
	uLong    total_out; /* total nb of bytes output so far */

	char     *msg;      /* last error message, NULL if no error */
	struct internal_state FAR *state; /* not visible by applications */

	alloc_func zalloc;  /* used to allocate the internal state */
	free_func  zfree;   /* used to free the internal state */
	voidpf     opaque;  /* private data object passed to zalloc and zfree */

	int     data_type;  /* best guess about the data type: binary or text */
	uLong   adler;      /* adler32 value of the uncompressed data */
	uLong   reserved;   /* reserved for future use */
} z_stream;

typedef z_stream FAR *z_streamp;

/*
	 gzip header information passed to and from zlib routines.  See RFC 1952
  for more details on the meanings of these fields.
*/
typedef struct gz_header_s {
	int     text;       /* true if compressed data believed to be text */
	uLong   time;       /* modification time */
	int     xflags;     /* extra flags (not used when writing a gzip file) */
	int     os;         /* operating system */
	Bytef   *extra;     /* pointer to extra field or Z_NULL if none */
	uInt    extra_len;  /* extra field length (valid if extra != Z_NULL) */
	uInt    extra_max;  /* space at extra (only when reading header) */
	Bytef   *name;      /* pointer to zero-terminated file name or Z_NULL */
	uInt    name_max;   /* space at name (only when reading header) */
	Bytef   *comment;   /* pointer to zero-terminated comment or Z_NULL */
	uInt    comm_max;   /* space at comment (only when reading header) */
	int     hcrc;       /* true if there was or will be a header crc */
	int     done;       /* true when done reading gzip header (not used
						   when writing a gzip file) */
} gz_header;

typedef gz_header FAR *gz_headerp;

/*
   The application must update next_in and avail_in when avail_in has
   dropped to zero. It must update next_out and avail_out when avail_out
   has dropped to zero. The application must initialize zalloc, zfree and
   opaque before calling the init function. All other fields are set by the
   compression library and must not be updated by the application.

   The opaque value provided by the application will be passed as the first
   parameter for calls of zalloc and zfree. This can be useful for custom
   memory management. The compression library attaches no meaning to the
   opaque value.

   zalloc must return Z_NULL if there is not enough memory for the object.
   If zlib is used in a multi-threaded application, zalloc and zfree must be
   thread safe.

   On 16-bit systems, the functions zalloc and zfree must be able to allocate
   exactly 65536 bytes, but will not be required to allocate more than this
   if the symbol MAXSEG_64K is defined (see zconf.h). WARNING: On MSDOS,
   pointers returned by zalloc for objects of exactly 65536 bytes *must*
   have their offset normalized to zero. The default allocation function
   provided by this library ensures this (see zutil.c). To reduce memory
   requirements and avoid any allocation of 64K objects, at the expense of
   compression ratio, compile the library with -DMAX_WBITS=14 (see zconf.h).

   The fields total_in and total_out can be used for statistics or
   progress reports. After compression, total_in holds the total size of
   the uncompressed data and may be saved for use in the decompressor
   (particularly if the decompressor wants to decompress everything in
   a single step).
*/

						/* constants */

#define Z_NO_FLUSH      0
#define Z_PARTIAL_FLUSH 1 /* will be removed, use Z_SYNC_FLUSH instead */
#define Z_SYNC_FLUSH    2
#define Z_FULL_FLUSH    3
#define Z_FINISH        4
#define Z_BLOCK         5
/* Allowed flush values; see deflate() and inflate() below for details */

#define Z_OK            0
#define Z_STREAM_END    1
#define Z_NEED_DICT     2
#define Z_ERRNO        (-1)
#define Z_STREAM_ERROR (-2)
#define Z_DATA_ERROR   (-3)
#define Z_MEM_ERROR    (-4)
#define Z_BUF_ERROR    (-5)
#define Z_VERSION_ERROR (-6)
/* Return codes for the compression/decompression functions. Negative
 * values are errors, positive values are used for special but normal events.
 */

#define Z_NO_COMPRESSION         0
#define Z_BEST_SPEED             1
#define Z_BEST_COMPRESSION       9
#define Z_DEFAULT_COMPRESSION  (-1)
/* compression levels */

#define Z_FILTERED            1
#define Z_HUFFMAN_ONLY        2
#define Z_RLE                 3
#define Z_FIXED               4
#define Z_DEFAULT_STRATEGY    0
/* compression strategy; see deflateInit2() below for details */

#define Z_BINARY   0
#define Z_TEXT     1
#define Z_ASCII    Z_TEXT   /* for compatibility with 1.2.2 and earlier */
#define Z_UNKNOWN  2
/* Possible values of the data_type field (though see inflate()) */

#define Z_DEFLATED   8
/* The deflate compression method (the only one supported in this version) */

#define Z_NULL  0  /* for initializing zalloc, zfree, opaque */

#define zlib_version zlibVersion()
/* for compatibility with versions < 1.0.2 */

						/* basic functions */

//ZEXTERN const char * ZEXPORT zlibVersion OF((void));
/* The application can compare zlibVersion and ZLIB_VERSION for consistency.
   If the first character differs, the library code actually used is
   not compatible with the zlib.h header file used by the application.
   This check is automatically made by deflateInit and inflateInit.
 */

/*
ZEXTERN int ZEXPORT deflateInit OF((z_streamp strm, int level));

	 Initializes the internal stream state for compression. The fields
   zalloc, zfree and opaque must be initialized before by the caller.
   If zalloc and zfree are set to Z_NULL, deflateInit updates them to
   use default allocation functions.

	 The compression level must be Z_DEFAULT_COMPRESSION, or between 0 and 9:
   1 gives best speed, 9 gives best compression, 0 gives no compression at
   all (the input data is simply copied a block at a time).
   Z_DEFAULT_COMPRESSION requests a default compromise between speed and
   compression (currently equivalent to level 6).

	 deflateInit returns Z_OK if success, Z_MEM_ERROR if there was not
   enough memory, Z_STREAM_ERROR if level is not a valid compression level,
   Z_VERSION_ERROR if the zlib library version (zlib_version) is incompatible
   with the version assumed by the caller (ZLIB_VERSION).
   msg is set to null if there is no error message.  deflateInit does not
   perform any compression: this will be done by deflate().
*/

ZEXTERN int ZEXPORT deflate OF((z_streamp strm, int flush));
/*
	deflate compresses as much data as possible, and stops when the input
  buffer becomes empty or the output buffer becomes full. It may introduce some
  output latency (reading input without producing any output) except when
  forced to flush.

	The detailed semantics are as follows. deflate performs one or both of the
  following actions:

  - Compress more input starting at next_in and update next_in and avail_in
	accordingly. If not all input can be processed (because there is not
	enough room in the output buffer), next_in and avail_in are updated and
	processing will resume at this point for the next call of deflate().

  - Provide more output starting at next_out and update next_out and avail_out
	accordingly. This action is forced if the parameter flush is non zero.
	Forcing flush frequently degrades the compression ratio, so this parameter
	should be set only when necessary (in interactive applications).
	Some output may be provided even if flush is not set.

  Before the call of deflate(), the application should ensure that at least
  one of the actions is possible, by providing more input and/or consuming
  more output, and updating avail_in or avail_out accordingly; avail_out
  should never be zero before the call. The application can consume the
  compressed output when it wants, for example when the output buffer is full
  (avail_out == 0), or after each call of deflate(). If deflate returns Z_OK
  and with zero avail_out, it must be called again after making room in the
  output buffer because there might be more output pending.

	Normally the parameter flush is set to Z_NO_FLUSH, which allows deflate to
  decide how much data to accumualte before producing output, in order to
  maximize compression.

	If the parameter flush is set to Z_SYNC_FLUSH, all pending output is
  flushed to the output buffer and the output is aligned on a byte boundary, so
  that the decompressor can get all input data available so far. (In particular
  avail_in is zero after the call if enough output space has been provided
  before the call.)  Flushing may degrade compression for some compression
  algorithms and so it should be used only when necessary.

	If flush is set to Z_FULL_FLUSH, all output is flushed as with
  Z_SYNC_FLUSH, and the compression state is reset so that decompression can
  restart from this point if previous compressed data has been damaged or if
  random access is desired. Using Z_FULL_FLUSH too often can seriously degrade
  compression.

	If deflate returns with avail_out == 0, this function must be called again
  with the same value of the flush parameter and more output space (updated
  avail_out), until the flush is complete (deflate returns with non-zero
  avail_out). In the case of a Z_FULL_FLUSH or Z_SYNC_FLUSH, make sure that
  avail_out is greater than six to avoid repeated flush markers due to
  avail_out == 0 on return.

	If the parameter flush is set to Z_FINISH, pending input is processed,
  pending output is flushed and deflate returns with Z_STREAM_END if there
  was enough output space; if deflate returns with Z_OK, this function must be
  called again with Z_FINISH and more output space (updated avail_out) but no
  more input data, until it returns with Z_STREAM_END or an error. After
  deflate has returned Z_STREAM_END, the only possible operations on the
  stream are deflateReset or deflateEnd.

	Z_FINISH can be used immediately after deflateInit if all the compression
  is to be done in a single step. In this case, avail_out must be at least
  the value returned by deflateBound (see below). If deflate does not return
  Z_STREAM_END, then it must be called again as described above.

	deflate() sets strm->adler to the adler32 checksum of all input read
  so far (that is, total_in bytes).

	deflate() may update strm->data_type if it can make a good guess about
  the input data type (Z_BINARY or Z_TEXT). In doubt, the data is considered
  binary. This field is only for information purposes and does not affect
  the compression algorithm in any manner.

	deflate() returns Z_OK if some progress has been made (more input
  processed or more output produced), Z_STREAM_END if all input has been
  consumed and all output has been produced (only when flush is set to
  Z_FINISH), Z_STREAM_ERROR if the stream state was inconsistent (for example
  if next_in or next_out was NULL), Z_BUF_ERROR if no progress is possible
  (for example avail_in or avail_out was zero). Note that Z_BUF_ERROR is not
  fatal, and deflate() can be called again with more input and more output
  space to continue compressing.
*/

ZEXTERN int ZEXPORT deflateEnd OF((z_streamp strm));
/*
	 All dynamically allocated data structures for this stream are freed.
   This function discards any unprocessed input and does not flush any
   pending output.

	 deflateEnd returns Z_OK if success, Z_STREAM_ERROR if the
   stream state was inconsistent, Z_DATA_ERROR if the stream was freed
   prematurely (some input or output was discarded). In the error case,
   msg may be set but then points to a static string (which must not be
   deallocated).
*/

/*
ZEXTERN int ZEXPORT inflateInit OF((z_streamp strm));

	 Initializes the internal stream state for decompression. The fields
   next_in, avail_in, zalloc, zfree and opaque must be initialized before by
   the caller. If next_in is not Z_NULL and avail_in is large enough (the exact
   value depends on the compression method), inflateInit determines the
   compression method from the zlib header and allocates all data structures
   accordingly; otherwise the allocation will be deferred to the first call of
   inflate.  If zalloc and zfree are set to Z_NULL, inflateInit updates them to
   use default allocation functions.

	 inflateInit returns Z_OK if success, Z_MEM_ERROR if there was not enough
   memory, Z_VERSION_ERROR if the zlib library version is incompatible with the
   version assumed by the caller.  msg is set to null if there is no error
   message. inflateInit does not perform any decompression apart from reading
   the zlib header if present: this will be done by inflate().  (So next_in and
   avail_in may be modified, but next_out and avail_out are unchanged.)
*/

ZEXTERN int ZEXPORT inflate OF((z_streamp strm, int flush));
/*
	inflate decompresses as much data as possible, and stops when the input
  buffer becomes empty or the output buffer becomes full. It may introduce
  some output latency (reading input without producing any output) except when
  forced to flush.

  The detailed semantics are as follows. inflate performs one or both of the
  following actions:

  - Decompress more input starting at next_in and update next_in and avail_in
	accordingly. If not all input can be processed (because there is not
	enough room in the output buffer), next_in is updated and processing
	will resume at this point for the next call of inflate().

  - Provide more output starting at next_out and update next_out and avail_out
	accordingly.  inflate() provides as much output as possible, until there
	is no more input data or no more space in the output buffer (see below
	about the flush parameter).

  Before the call of inflate(), the application should ensure that at least
  one of the actions is possible, by providing more input and/or consuming
  more output, and updating the next_* and avail_* values accordingly.
  The application can consume the uncompressed output when it wants, for
  example when the output buffer is full (avail_out == 0), or after each
  call of inflate(). If inflate returns Z_OK and with zero avail_out, it
  must be called again after making room in the output buffer because there
  might be more output pending.

	The flush parameter of inflate() can be Z_NO_FLUSH, Z_SYNC_FLUSH,
  Z_FINISH, or Z_BLOCK. Z_SYNC_FLUSH requests that inflate() flush as much
  output as possible to the output buffer. Z_BLOCK requests that inflate() stop
  if and when it gets to the next deflate block boundary. When decoding the
  zlib or gzip format, this will cause inflate() to return immediately after
  the header and before the first block. When doing a raw inflate, inflate()
  will go ahead and process the first block, and will return when it gets to
  the end of that block, or when it runs out of data.

	The Z_BLOCK option assists in appending to or combining deflate streams.
  Also to assist in this, on return inflate() will set strm->data_type to the
  number of unused bits in the last byte taken from strm->next_in, plus 64
  if inflate() is currently decoding the last block in the deflate stream,
  plus 128 if inflate() returned immediately after decoding an end-of-block
  code or decoding the complete header up to just before the first byte of the
  deflate stream. The end-of-block will not be indicated until all of the
  uncompressed data from that block has been written to strm->next_out.  The
  number of unused bits may in general be greater than seven, except when
  bit 7 of data_type is set, in which case the number of unused bits will be
  less than eight.

	inflate() should normally be called until it returns Z_STREAM_END or an
  error. However if all decompression is to be performed in a single step
  (a single call of inflate), the parameter flush should be set to
  Z_FINISH. In this case all pending input is processed and all pending
  output is flushed; avail_out must be large enough to hold all the
  uncompressed data. (The size of the uncompressed data may have been saved
  by the compressor for this purpose.) The next operation on this stream must
  be inflateEnd to deallocate the decompression state. The use of Z_FINISH
  is never required, but can be used to inform inflate that a faster approach
  may be used for the single inflate() call.

	 In this implementation, inflate() always flushes as much output as
  possible to the output buffer, and always uses the faster approach on the
  first call. So the only effect of the flush parameter in this implementation
  is on the return value of inflate(), as noted below, or when it returns early
  because Z_BLOCK is used.

	 If a preset dictionary is needed after this call (see inflateSetDictionary
  below), inflate sets strm->adler to the adler32 checksum of the dictionary
  chosen by the compressor and returns Z_NEED_DICT; otherwise it sets
  strm->adler to the adler32 checksum of all output produced so far (that is,
  total_out bytes) and returns Z_OK, Z_STREAM_END or an error code as described
  below. At the end of the stream, inflate() checks that its computed adler32
  checksum is equal to that saved by the compressor and returns Z_STREAM_END
  only if the checksum is correct.

	inflate() will decompress and check either zlib-wrapped or gzip-wrapped
  deflate data.  The header type is detected automatically.  Any information
  contained in the gzip header is not retained, so applications that need that
  information should instead use raw inflate, see inflateInit2() below, or
  inflateBack() and perform their own processing of the gzip header and
  trailer.

	inflate() returns Z_OK if some progress has been made (more input processed
  or more output produced), Z_STREAM_END if the end of the compressed data has
  been reached and all uncompressed output has been produced, Z_NEED_DICT if a
  preset dictionary is needed at this point, Z_DATA_ERROR if the input data was
  corrupted (input stream not conforming to the zlib format or incorrect check
  value), Z_STREAM_ERROR if the stream structure was inconsistent (for example
  if next_in or next_out was NULL), Z_MEM_ERROR if there was not enough memory,
  Z_BUF_ERROR if no progress is possible or if there was not enough room in the
  output buffer when Z_FINISH is used. Note that Z_BUF_ERROR is not fatal, and
  inflate() can be called again with more input and more output space to
  continue decompressing. If Z_DATA_ERROR is returned, the application may then
  call inflateSync() to look for a good compression block if a partial recovery
  of the data is desired.
*/

ZEXTERN int ZEXPORT inflateEnd OF((z_streamp strm));
/*
	 All dynamically allocated data structures for this stream are freed.
   This function discards any unprocessed input and does not flush any
   pending output.

	 inflateEnd returns Z_OK if success, Z_STREAM_ERROR if the stream state
   was inconsistent. In the error case, msg may be set but then points to a
   static string (which must not be deallocated).
*/

						/* Advanced functions */

/*
	The following functions are needed only in some special applications.
*/

/*
ZEXTERN int ZEXPORT deflateInit2 OF((z_streamp strm,
									 int  level,
									 int  method,
									 int  windowBits,
									 int  memLevel,
									 int  strategy));

	 This is another version of deflateInit with more compression options. The
   fields next_in, zalloc, zfree and opaque must be initialized before by
   the caller.

	 The method parameter is the compression method. It must be Z_DEFLATED in
   this version of the library.

	 The windowBits parameter is the base two logarithm of the window size
   (the size of the history buffer). It should be in the range 8..15 for this
   version of the library. Larger values of this parameter result in better
   compression at the expense of memory usage. The default value is 15 if
   deflateInit is used instead.

	 windowBits can also be -8..-15 for raw deflate. In this case, -windowBits
   determines the window size. deflate() will then generate raw deflate data
   with no zlib header or trailer, and will not compute an adler32 check value.

	 windowBits can also be greater than 15 for optional gzip encoding. Add
   16 to windowBits to write a simple gzip header and trailer around the
   compressed data instead of a zlib wrapper. The gzip header will have no
   file name, no extra data, no comment, no modification time (set to zero),
   no header crc, and the operating system will be set to 255 (unknown).  If a
   gzip stream is being written, strm->adler is a crc32 instead of an adler32.

	 The memLevel parameter specifies how much memory should be allocated
   for the internal compression state. memLevel=1 uses minimum memory but
   is slow and reduces compression ratio; memLevel=9 uses maximum memory
   for optimal speed. The default value is 8. See zconf.h for total memory
   usage as a function of windowBits and memLevel.

	 The strategy parameter is used to tune the compression algorithm. Use the
   value Z_DEFAULT_STRATEGY for normal data, Z_FILTERED for data produced by a
   filter (or predictor), Z_HUFFMAN_ONLY to force Huffman encoding only (no
   string match), or Z_RLE to limit match distances to one (run-length
   encoding). Filtered data consists mostly of small values with a somewhat
   random distribution. In this case, the compression algorithm is tuned to
   compress them better. The effect of Z_FILTERED is to force more Huffman
   coding and less string matching; it is somewhat intermediate between
   Z_DEFAULT and Z_HUFFMAN_ONLY. Z_RLE is designed to be almost as fast as
   Z_HUFFMAN_ONLY, but give better compression for PNG image data. The strategy
   parameter only affects the compression ratio but not the correctness of the
   compressed output even if it is not set appropriately.  Z_FIXED prevents the
   use of dynamic Huffman codes, allowing for a simpler decoder for special
   applications.

	  deflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough
   memory, Z_STREAM_ERROR if a parameter is invalid (such as an invalid
   method). msg is set to null if there is no error message.  deflateInit2 does
   not perform any compression: this will be done by deflate().
*/

ZEXTERN int ZEXPORT deflateSetDictionary OF((z_streamp strm,
											 const Bytef *dictionary,
											 uInt  dictLength));
/*
	 Initializes the compression dictionary from the given byte sequence
   without producing any compressed output. This function must be called
   immediately after deflateInit, deflateInit2 or deflateReset, before any
   call of deflate. The compressor and decompressor must use exactly the same
   dictionary (see inflateSetDictionary).

	 The dictionary should consist of strings (byte sequences) that are likely
   to be encountered later in the data to be compressed, with the most commonly
   used strings preferably put towards the end of the dictionary. Using a
   dictionary is most useful when the data to be compressed is short and can be
   predicted with good accuracy; the data can then be compressed better than
   with the default empty dictionary.

	 Depending on the size of the compression data structures selected by
   deflateInit or deflateInit2, a part of the dictionary may in effect be
   discarded, for example if the dictionary is larger than the window size in
   deflate or deflate2. Thus the strings most likely to be useful should be
   put at the end of the dictionary, not at the front. In addition, the
   current implementation of deflate will use at most the window size minus
   262 bytes of the provided dictionary.

	 Upon return of this function, strm->adler is set to the adler32 value
   of the dictionary; the decompressor may later use this value to determine
   which dictionary has been used by the compressor. (The adler32 value
   applies to the whole dictionary even if only a subset of the dictionary is
   actually used by the compressor.) If a raw deflate was requested, then the
   adler32 value is not computed and strm->adler is not set.

	 deflateSetDictionary returns Z_OK if success, or Z_STREAM_ERROR if a
   parameter is invalid (such as NULL dictionary) or the stream state is
   inconsistent (for example if deflate has already been called for this stream
   or if the compression method is bsort). deflateSetDictionary does not
   perform any compression: this will be done by deflate().
*/

ZEXTERN int ZEXPORT deflateCopy OF((z_streamp dest,
									z_streamp source));
/*
	 Sets the destination stream as a complete copy of the source stream.

	 This function can be useful when several compression strategies will be
   tried, for example when there are several ways of pre-processing the input
   data with a filter. The streams that will be discarded should then be freed
   by calling deflateEnd.  Note that deflateCopy duplicates the internal
   compression state which can be quite large, so this strategy is slow and
   can consume lots of memory.

	 deflateCopy returns Z_OK if success, Z_MEM_ERROR if there was not
   enough memory, Z_STREAM_ERROR if the source stream state was inconsistent
   (such as zalloc being NULL). msg is left unchanged in both source and
   destination.
*/

ZEXTERN int ZEXPORT deflateReset OF((z_streamp strm));
/*
	 This function is equivalent to deflateEnd followed by deflateInit,
   but does not free and reallocate all the internal compression state.
   The stream will keep the same compression level and any other attributes
   that may have been set by deflateInit2.

	  deflateReset returns Z_OK if success, or Z_STREAM_ERROR if the source
   stream state was inconsistent (such as zalloc or state being NULL).
*/

ZEXTERN int ZEXPORT deflateParams OF((z_streamp strm,
									  int level,
									  int strategy));
/*
	 Dynamically update the compression level and compression strategy.  The
   interpretation of level and strategy is as in deflateInit2.  This can be
   used to switch between compression and straight copy of the input data, or
   to switch to a different kind of input data requiring a different
   strategy. If the compression level is changed, the input available so far
   is compressed with the old level (and may be flushed); the new level will
   take effect only at the next call of deflate().

	 Before the call of deflateParams, the stream state must be set as for
   a call of deflate(), since the currently available input may have to
   be compressed and flushed. In particular, strm->avail_out must be non-zero.

	 deflateParams returns Z_OK if success, Z_STREAM_ERROR if the source
   stream state was inconsistent or if a parameter was invalid, Z_BUF_ERROR
   if strm->avail_out was zero.
*/

ZEXTERN int ZEXPORT deflateTune OF((z_streamp strm,
									int good_length,
									int max_lazy,
									int nice_length,
									int max_chain));
/*
	 Fine tune deflate's internal compression parameters.  This should only be
   used by someone who understands the algorithm used by zlib's deflate for
   searching for the best matching string, and even then only by the most
   fanatic optimizer trying to squeeze out the last compressed bit for their
   specific input data.  Read the deflate.c source code for the meaning of the
   max_lazy, good_length, nice_length, and max_chain parameters.

	 deflateTune() can be called after deflateInit() or deflateInit2(), and
   returns Z_OK on success, or Z_STREAM_ERROR for an invalid deflate stream.
 */

ZEXTERN uLong ZEXPORT deflateBound OF((z_streamp strm,
									   uLong sourceLen));
/*
	 deflateBound() returns an upper bound on the compressed size after
   deflation of sourceLen bytes.  It must be called after deflateInit()
   or deflateInit2().  This would be used to allocate an output buffer
   for deflation in a single pass, and so would be called before deflate().
*/

ZEXTERN int ZEXPORT deflatePrime OF((z_streamp strm,
									 int bits,
									 int value));
/*
	 deflatePrime() inserts bits in the deflate output stream.  The intent
  is that this function is used to start off the deflate output with the
  bits leftover from a previous deflate stream when appending to it.  As such,
  this function can only be used for raw deflate, and must be used before the
  first deflate() call after a deflateInit2() or deflateReset().  bits must be
  less than or equal to 16, and that many of the least significant bits of
  value will be inserted in the output.

	  deflatePrime returns Z_OK if success, or Z_STREAM_ERROR if the source
   stream state was inconsistent.
*/

ZEXTERN int ZEXPORT deflateSetHeader OF((z_streamp strm,
										 gz_headerp head));
/*
	  deflateSetHeader() provides gzip header information for when a gzip
   stream is requested by deflateInit2().  deflateSetHeader() may be called
   after deflateInit2() or deflateReset() and before the first call of
   deflate().  The text, time, os, extra field, name, and comment information
   in the provided gz_header structure are written to the gzip header (xflag is
   ignored -- the extra flags are set according to the compression level).  The
   caller must assure that, if not Z_NULL, name and comment are terminated with
   a zero byte, and that if extra is not Z_NULL, that extra_len bytes are
   available there.  If hcrc is true, a gzip header crc is included.  Note that
   the current versions of the command-line version of gzip (up through version
   1.3.x) do not support header crc's, and will report that it is a "multi-part
   gzip file" and give up.

	  If deflateSetHeader is not used, the default gzip header has text false,
   the time set to zero, and os set to 255, with no extra, name, or comment
   fields.  The gzip header is returned to the default state by deflateReset().

	  deflateSetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source
   stream state was inconsistent.
*/

/*
ZEXTERN int ZEXPORT inflateInit2 OF((z_streamp strm,
									 int  windowBits));

	 This is another version of inflateInit with an extra parameter. The
   fields next_in, avail_in, zalloc, zfree and opaque must be initialized
   before by the caller.

	 The windowBits parameter is the base two logarithm of the maximum window
   size (the size of the history buffer).  It should be in the range 8..15 for
   this version of the library. The default value is 15 if inflateInit is used
   instead. windowBits must be greater than or equal to the windowBits value
   provided to deflateInit2() while compressing, or it must be equal to 15 if
   deflateInit2() was not used. If a compressed stream with a larger window
   size is given as input, inflate() will return with the error code
   Z_DATA_ERROR instead of trying to allocate a larger window.

	 windowBits can also be -8..-15 for raw inflate. In this case, -windowBits
   determines the window size. inflate() will then process raw deflate data,
   not looking for a zlib or gzip header, not generating a check value, and not
   looking for any check values for comparison at the end of the stream. This
   is for use with other formats that use the deflate compressed data format
   such as zip.  Those formats provide their own check values. If a custom
   format is developed using the raw deflate format for compressed data, it is
   recommended that a check value such as an adler32 or a crc32 be applied to
   the uncompressed data as is done in the zlib, gzip, and zip formats.  For
   most applications, the zlib format should be used as is. Note that comments
   above on the use in deflateInit2() applies to the magnitude of windowBits.

	 windowBits can also be greater than 15 for optional gzip decoding. Add
   32 to windowBits to enable zlib and gzip decoding with automatic header
   detection, or add 16 to decode only the gzip format (the zlib format will
   return a Z_DATA_ERROR).  If a gzip stream is being decoded, strm->adler is
   a crc32 instead of an adler32.

	 inflateInit2 returns Z_OK if success, Z_MEM_ERROR if there was not enough
   memory, Z_STREAM_ERROR if a parameter is invalid (such as a null strm). msg
   is set to null if there is no error message.  inflateInit2 does not perform
   any decompression apart from reading the zlib header if present: this will
   be done by inflate(). (So next_in and avail_in may be modified, but next_out
   and avail_out are unchanged.)
*/

ZEXTERN int ZEXPORT inflateSetDictionary OF((z_streamp strm,
											 const Bytef *dictionary,
											 uInt  dictLength));
/*
	 Initializes the decompression dictionary from the given uncompressed byte
   sequence. This function must be called immediately after a call of inflate,
   if that call returned Z_NEED_DICT. The dictionary chosen by the compressor
   can be determined from the adler32 value returned by that call of inflate.
   The compressor and decompressor must use exactly the same dictionary (see
   deflateSetDictionary).  For raw inflate, this function can be called
   immediately after inflateInit2() or inflateReset() and before any call of
   inflate() to set the dictionary.  The application must insure that the
   dictionary that was used for compression is provided.

	 inflateSetDictionary returns Z_OK if success, Z_STREAM_ERROR if a
   parameter is invalid (such as NULL dictionary) or the stream state is
   inconsistent, Z_DATA_ERROR if the given dictionary doesn't match the
   expected one (incorrect adler32 value). inflateSetDictionary does not
   perform any decompression: this will be done by subsequent calls of
   inflate().
*/

ZEXTERN int ZEXPORT inflateSync OF((z_streamp strm));
/*
	Skips invalid compressed data until a full flush point (see above the
  description of deflate with Z_FULL_FLUSH) can be found, or until all
  available input is skipped. No output is provided.

	inflateSync returns Z_OK if a full flush point has been found, Z_BUF_ERROR
  if no more input was provided, Z_DATA_ERROR if no flush point has been found,
  or Z_STREAM_ERROR if the stream structure was inconsistent. In the success
  case, the application may save the current current value of total_in which
  indicates where valid compressed data was found. In the error case, the
  application may repeatedly call inflateSync, providing more input each time,
  until success or end of the input data.
*/

ZEXTERN int ZEXPORT inflateCopy OF((z_streamp dest,
									z_streamp source));
/*
	 Sets the destination stream as a complete copy of the source stream.

	 This function can be useful when randomly accessing a large stream.  The
   first pass through the stream can periodically record the inflate state,
   allowing restarting inflate at those points when randomly accessing the
   stream.

	 inflateCopy returns Z_OK if success, Z_MEM_ERROR if there was not
   enough memory, Z_STREAM_ERROR if the source stream state was inconsistent
   (such as zalloc being NULL). msg is left unchanged in both source and
   destination.
*/

ZEXTERN int ZEXPORT inflateReset OF((z_streamp strm));
/*
	 This function is equivalent to inflateEnd followed by inflateInit,
   but does not free and reallocate all the internal decompression state.
   The stream will keep attributes that may have been set by inflateInit2.

	  inflateReset returns Z_OK if success, or Z_STREAM_ERROR if the source
   stream state was inconsistent (such as zalloc or state being NULL).
*/

ZEXTERN int ZEXPORT inflatePrime OF((z_streamp strm,
									 int bits,
									 int value));
/*
	 This function inserts bits in the inflate input stream.  The intent is
  that this function is used to start inflating at a bit position in the
  middle of a byte.  The provided bits will be used before any bytes are used
  from next_in.  This function should only be used with raw inflate, and
  should be used before the first inflate() call after inflateInit2() or
  inflateReset().  bits must be less than or equal to 16, and that many of the
  least significant bits of value will be inserted in the input.

	  inflatePrime returns Z_OK if success, or Z_STREAM_ERROR if the source
   stream state was inconsistent.
*/

ZEXTERN int ZEXPORT inflateGetHeader OF((z_streamp strm,
										 gz_headerp head));
/*
	  inflateGetHeader() requests that gzip header information be stored in the
   provided gz_header structure.  inflateGetHeader() may be called after
   inflateInit2() or inflateReset(), and before the first call of inflate().
   As inflate() processes the gzip stream, head->done is zero until the header
   is completed, at which time head->done is set to one.  If a zlib stream is
   being decoded, then head->done is set to -1 to indicate that there will be
   no gzip header information forthcoming.  Note that Z_BLOCK can be used to
   force inflate() to return immediately after header processing is complete
   and before any actual data is decompressed.

	  The text, time, xflags, and os fields are filled in with the gzip header
   contents.  hcrc is set to true if there is a header CRC.  (The header CRC
   was valid if done is set to one.)  If extra is not Z_NULL, then extra_max
   contains the maximum number of bytes to write to extra.  Once done is true,
   extra_len contains the actual extra field length, and extra contains the
   extra field, or that field truncated if extra_max is less than extra_len.
   If name is not Z_NULL, then up to name_max characters are written there,
   terminated with a zero unless the length is greater than name_max.  If
   comment is not Z_NULL, then up to comm_max characters are written there,
   terminated with a zero unless the length is greater than comm_max.  When
   any of extra, name, or comment are not Z_NULL and the respective field is
   not present in the header, then that field is set to Z_NULL to signal its
   absence.  This allows the use of deflateSetHeader() with the returned
   structure to duplicate the header.  However if those fields are set to
   allocated memory, then the application will need to save those pointers
   elsewhere so that they can be eventually freed.

	  If inflateGetHeader is not used, then the header information is simply
   discarded.  The header is always checked for validity, including the header
   CRC if present.  inflateReset() will reset the process to discard the header
   information.  The application would need to call inflateGetHeader() again to
   retrieve the header from the next gzip stream.

	  inflateGetHeader returns Z_OK if success, or Z_STREAM_ERROR if the source
   stream state was inconsistent.
*/

/*
ZEXTERN int ZEXPORT inflateBackInit OF((z_streamp strm, int windowBits,
										unsigned char FAR *window));

	 Initialize the internal stream state for decompression using inflateBack()
   calls.  The fields zalloc, zfree and opaque in strm must be initialized
   before the call.  If zalloc and zfree are Z_NULL, then the default library-
   derived memory allocation routines are used.  windowBits is the base two
   logarithm of the window size, in the range 8..15.  window is a caller
   supplied buffer of that size.  Except for special applications where it is
   assured that deflate was used with small window sizes, windowBits must be 15
   and a 32K byte window must be supplied to be able to decompress general
   deflate streams.

	 See inflateBack() for the usage of these routines.

	 inflateBackInit will return Z_OK on success, Z_STREAM_ERROR if any of
   the paramaters are invalid, Z_MEM_ERROR if the internal state could not
   be allocated, or Z_VERSION_ERROR if the version of the library does not
   match the version of the header file.
*/

typedef unsigned (*in_func) OF((void FAR *, unsigned char FAR * FAR *));
typedef int (*out_func) OF((void FAR *, unsigned char FAR *, unsigned));

ZEXTERN int ZEXPORT inflateBack OF((z_streamp strm,
									in_func in, void FAR *in_desc,
									out_func out, void FAR *out_desc));
/*
	 inflateBack() does a raw inflate with a single call using a call-back
   interface for input and output.  This is more efficient than inflate() for
   file i/o applications in that it avoids copying between the output and the
   sliding window by simply making the window itself the output buffer.  This
   function trusts the application to not change the output buffer passed by
   the output function, at least until inflateBack() returns.

	 inflateBackInit() must be called first to allocate the internal state
   and to initialize the state with the user-provided window buffer.
   inflateBack() may then be used multiple times to inflate a complete, raw
   deflate stream with each call.  inflateBackEnd() is then called to free
   the allocated state.

	 A raw deflate stream is one with no zlib or gzip header or trailer.
   This routine would normally be used in a utility that reads zip or gzip
   files and writes out uncompressed files.  The utility would decode the
   header and process the trailer on its own, hence this routine expects
   only the raw deflate stream to decompress.  This is different from the
   normal behavior of inflate(), which expects either a zlib or gzip header and
   trailer around the deflate stream.

	 inflateBack() uses two subroutines supplied by the caller that are then
   called by inflateBack() for input and output.  inflateBack() calls those
   routines until it reads a complete deflate stream and writes out all of the
   uncompressed data, or until it encounters an error.  The function's
   parameters and return types are defined above in the in_func and out_func
   typedefs.  inflateBack() will call in(in_desc, &buf) which should return the
   number of bytes of provided input, and a pointer to that input in buf.  If
   there is no input available, in() must return zero--buf is ignored in that
   case--and inflateBack() will return a buffer error.  inflateBack() will call
   out(out_desc, buf, len) to write the uncompressed data buf[0..len-1].  out()
   should return zero on success, or non-zero on failure.  If out() returns
   non-zero, inflateBack() will return with an error.  Neither in() nor out()
   are permitted to change the contents of the window provided to
   inflateBackInit(), which is also the buffer that out() uses to write from.
   The length written by out() will be at most the window size.  Any non-zero
   amount of input may be provided by in().

	 For convenience, inflateBack() can be provided input on the first call by
   setting strm->next_in and strm->avail_in.  If that input is exhausted, then
   in() will be called.  Therefore strm->next_in must be initialized before
   calling inflateBack().  If strm->next_in is Z_NULL, then in() will be called
   immediately for input.  If strm->next_in is not Z_NULL, then strm->avail_in
   must also be initialized, and then if strm->avail_in is not zero, input will
   initially be taken from strm->next_in[0 .. strm->avail_in - 1].

	 The in_desc and out_desc parameters of inflateBack() is passed as the
   first parameter of in() and out() respectively when they are called.  These
   descriptors can be optionally used to pass any information that the caller-
   supplied in() and out() functions need to do their job.

	 On return, inflateBack() will set strm->next_in and strm->avail_in to
   pass back any unused input that was provided by the last in() call.  The
   return values of inflateBack() can be Z_STREAM_END on success, Z_BUF_ERROR
   if in() or out() returned an error, Z_DATA_ERROR if there was a format
   error in the deflate stream (in which case strm->msg is set to indicate the
   nature of the error), or Z_STREAM_ERROR if the stream was not properly
   initialized.  In the case of Z_BUF_ERROR, an input or output error can be
   distinguished using strm->next_in which will be Z_NULL only if in() returned
   an error.  If strm->next is not Z_NULL, then the Z_BUF_ERROR was due to
   out() returning non-zero.  (in() will always be called before out(), so
   strm->next_in is assured to be defined if out() returns non-zero.)  Note
   that inflateBack() cannot return Z_OK.
*/

ZEXTERN int ZEXPORT inflateBackEnd OF((z_streamp strm));
/*
	 All memory allocated by inflateBackInit() is freed.

	 inflateBackEnd() returns Z_OK on success, or Z_STREAM_ERROR if the stream
   state was inconsistent.
*/

//ZEXTERN uLong ZEXPORT zlibCompileFlags OF((void));
/* Return flags indicating compile-time options.

	Type sizes, two bits each, 00 = 16 bits, 01 = 32, 10 = 64, 11 = other:
	 1.0: size of uInt
	 3.2: size of uLong
	 5.4: size of voidpf (pointer)
	 7.6: size of z_off_t

	Compiler, assembler, and debug options:
	 8: DEBUG
	 9: ASMV or ASMINF -- use ASM code
	 10: ZLIB_WINAPI -- exported functions use the WINAPI calling convention
	 11: 0 (reserved)

	One-time table building (smaller code, but not thread-safe if true):
	 12: BUILDFIXED -- build static block decoding tables when needed
	 13: DYNAMIC_CRC_TABLE -- build CRC calculation tables when needed
	 14,15: 0 (reserved)

	Library content (indicates missing functionality):
	 16: NO_GZCOMPRESS -- gz* functions cannot compress (to avoid linking
						  deflate code when not needed)
	 17: NO_GZIP -- deflate can't write gzip streams, and inflate can't detect
					and decode gzip streams (to avoid linking crc code)
	 18-19: 0 (reserved)

	Operation variations (changes in library functionality):
	 20: PKZIP_BUG_WORKAROUND -- slightly more permissive inflate
	 21: FASTEST -- deflate algorithm with only one, lowest compression level
	 22,23: 0 (reserved)

	The sprintf variant used by gzprintf (zero is best):
	 24: 0 = vs*, 1 = s* -- 1 means limited to 20 arguments after the format
	 25: 0 = *nprintf, 1 = *printf -- 1 means gzprintf() not secure!
	 26: 0 = returns value, 1 = void -- 1 means inferred string length returned

	Remainder:
	 27-31: 0 (reserved)
 */

						/* utility functions */

/*
	 The following utility functions are implemented on top of the
   basic stream-oriented functions. To simplify the interface, some
   default options are assumed (compression level and memory usage,
   standard memory allocation functions). The source code of these
   utility functions can easily be modified if you need special options.
*/

ZEXTERN int ZEXPORT compress OF((Bytef *dest,   uLongf *destLen,
								 const Bytef *source, uLong sourceLen));
/*
	 Compresses the source buffer into the destination buffer.  sourceLen is
   the byte length of the source buffer. Upon entry, destLen is the total
   size of the destination buffer, which must be at least the value returned
   by compressBound(sourceLen). Upon exit, destLen is the actual size of the
   compressed buffer.
	 This function can be used to compress a whole file at once if the
   input file is mmap'ed.
	 compress returns Z_OK if success, Z_MEM_ERROR if there was not
   enough memory, Z_BUF_ERROR if there was not enough room in the output
   buffer.
*/

ZEXTERN int ZEXPORT compress2 OF((Bytef *dest,   uLongf *destLen,
								  const Bytef *source, uLong sourceLen,
								  int level));
/*
	 Compresses the source buffer into the destination buffer. The level
   parameter has the same meaning as in deflateInit.  sourceLen is the byte
   length of the source buffer. Upon entry, destLen is the total size of the
   destination buffer, which must be at least the value returned by
   compressBound(sourceLen). Upon exit, destLen is the actual size of the
   compressed buffer.

	 compress2 returns Z_OK if success, Z_MEM_ERROR if there was not enough
   memory, Z_BUF_ERROR if there was not enough room in the output buffer,
   Z_STREAM_ERROR if the level parameter is invalid.
*/

ZEXTERN uLong ZEXPORT compressBound OF((uLong sourceLen));
/*
	 compressBound() returns an upper bound on the compressed size after
   compress() or compress2() on sourceLen bytes.  It would be used before
   a compress() or compress2() call to allocate the destination buffer.
*/

ZEXTERN int ZEXPORT uncompress OF((Bytef *dest,   uLongf *destLen,
								   const Bytef *source, uLong sourceLen));
/*
	 Decompresses the source buffer into the destination buffer.  sourceLen is
   the byte length of the source buffer. Upon entry, destLen is the total
   size of the destination buffer, which must be large enough to hold the
   entire uncompressed data. (The size of the uncompressed data must have
   been saved previously by the compressor and transmitted to the decompressor
   by some mechanism outside the scope of this compression library.)
   Upon exit, destLen is the actual size of the compressed buffer.
	 This function can be used to decompress a whole file at once if the
   input file is mmap'ed.

	 uncompress returns Z_OK if success, Z_MEM_ERROR if there was not
   enough memory, Z_BUF_ERROR if there was not enough room in the output
   buffer, or Z_DATA_ERROR if the input data was corrupted or incomplete.
*/

typedef voidp gzFile;

ZEXTERN gzFile ZEXPORT gzopen  OF((const char *path, const char *mode));
/*
	 Opens a gzip (.gz) file for reading or writing. The mode parameter
   is as in fopen ("rb" or "wb") but can also include a compression level
   ("wb9") or a strategy: 'f' for filtered data as in "wb6f", 'h' for
   Huffman only compression as in "wb1h", or 'R' for run-length encoding
   as in "wb1R". (See the description of deflateInit2 for more information
   about the strategy parameter.)

	 gzopen can be used to read a file which is not in gzip format; in this
   case gzread will directly read from the file without decompression.

	 gzopen returns NULL if the file could not be opened or if there was
   insufficient memory to allocate the (de)compression state; errno
   can be checked to distinguish the two cases (if errno is zero, the
   zlib error is Z_MEM_ERROR).  */

ZEXTERN gzFile ZEXPORT gzdopen  OF((int fd, const char *mode));
/*
	 gzdopen() associates a gzFile with the file descriptor fd.  File
   descriptors are obtained from calls like open, dup, creat, pipe or
   fileno (in the file has been previously opened with fopen).
   The mode parameter is as in gzopen.
	 The next call of gzclose on the returned gzFile will also close the
   file descriptor fd, just like fclose(fdopen(fd), mode) closes the file
   descriptor fd. If you want to keep fd open, use gzdopen(dup(fd), mode).
	 gzdopen returns NULL if there was insufficient memory to allocate
   the (de)compression state.
*/

ZEXTERN int ZEXPORT gzsetparams OF((gzFile file, int level, int strategy));
/*
	 Dynamically update the compression level or strategy. See the description
   of deflateInit2 for the meaning of these parameters.
	 gzsetparams returns Z_OK if success, or Z_STREAM_ERROR if the file was not
   opened for writing.
*/

ZEXTERN int ZEXPORT    gzread  OF((gzFile file, voidp buf, unsigned len));
/*
	 Reads the given number of uncompressed bytes from the compressed file.
   If the input file was not in gzip format, gzread copies the given number
   of bytes into the buffer.
	 gzread returns the number of uncompressed bytes actually read (0 for
   end of file, -1 for error). */

ZEXTERN int ZEXPORT    gzwrite OF((gzFile file,
								   voidpc buf, unsigned len));
/*
	 Writes the given number of uncompressed bytes into the compressed file.
   gzwrite returns the number of uncompressed bytes actually written
   (0 in case of error).
*/

ZEXTERN int ZEXPORTVA   gzprintf OF((gzFile file, const char *format, ...));
/*
	 Converts, formats, and writes the args to the compressed file under
   control of the format string, as in fprintf. gzprintf returns the number of
   uncompressed bytes actually written (0 in case of error).  The number of
   uncompressed bytes written is limited to 4095. The caller should assure that
   this limit is not exceeded. If it is exceeded, then gzprintf() will return
   return an error (0) with nothing written. In this case, there may also be a
   buffer overflow with unpredictable consequences, which is possible only if
   zlib was compiled with the insecure functions sprintf() or vsprintf()
   because the secure snprintf() or vsnprintf() functions were not available.
*/

ZEXTERN int ZEXPORT gzputs OF((gzFile file, const char *s));
/*
	  Writes the given null-terminated string to the compressed file, excluding
   the terminating null character.
	  gzputs returns the number of characters written, or -1 in case of error.
*/

ZEXTERN char * ZEXPORT gzgets OF((gzFile file, char *buf, int len));
/*
	  Reads bytes from the compressed file until len-1 characters are read, or
   a newline character is read and transferred to buf, or an end-of-file
   condition is encountered.  The string is then terminated with a null
   character.
	  gzgets returns buf, or Z_NULL in case of error.
*/

ZEXTERN int ZEXPORT    gzputc OF((gzFile file, int c));
/*
	  Writes c, converted to an unsigned char, into the compressed file.
   gzputc returns the value that was written, or -1 in case of error.
*/

ZEXTERN int ZEXPORT    gzgetc OF((gzFile file));
/*
	  Reads one byte from the compressed file. gzgetc returns this byte
   or -1 in case of end of file or error.
*/

ZEXTERN int ZEXPORT    gzungetc OF((int c, gzFile file));
/*
	  Push one character back onto the stream to be read again later.
   Only one character of push-back is allowed.  gzungetc() returns the
   character pushed, or -1 on failure.  gzungetc() will fail if a
   character has been pushed but not read yet, or if c is -1. The pushed
   character will be discarded if the stream is repositioned with gzseek()
   or gzrewind().
*/

ZEXTERN int ZEXPORT    gzflush OF((gzFile file, int flush));
/*
	 Flushes all pending output into the compressed file. The parameter
   flush is as in the deflate() function. The return value is the zlib
   error number (see function gzerror below). gzflush returns Z_OK if
   the flush parameter is Z_FINISH and all output could be flushed.
	 gzflush should be called only when strictly necessary because it can
   degrade compression.
*/

ZEXTERN z_off_t ZEXPORT    gzseek OF((gzFile file,
									  z_off_t offset, int whence));
/*
	  Sets the starting position for the next gzread or gzwrite on the
   given compressed file. The offset represents a number of bytes in the
   uncompressed data stream. The whence parameter is defined as in lseek(2);
   the value SEEK_END is not supported.
	 If the file is opened for reading, this function is emulated but can be
   extremely slow. If the file is opened for writing, only forward seeks are
   supported; gzseek then compresses a sequence of zeroes up to the new
   starting position.

	  gzseek returns the resulting offset location as measured in bytes from
   the beginning of the uncompressed stream, or -1 in case of error, in
   particular if the file is opened for writing and the new starting position
   would be before the current position.
*/

ZEXTERN int ZEXPORT    gzrewind OF((gzFile file));
/*
	 Rewinds the given file. This function is supported only for reading.

   gzrewind(file) is equivalent to (int)gzseek(file, 0L, SEEK_SET)
*/

ZEXTERN z_off_t ZEXPORT    gztell OF((gzFile file));
/*
	 Returns the starting position for the next gzread or gzwrite on the
   given compressed file. This position represents a number of bytes in the
   uncompressed data stream.

   gztell(file) is equivalent to gzseek(file, 0L, SEEK_CUR)
*/

ZEXTERN int ZEXPORT gzeof OF((gzFile file));
/*
	 Returns 1 when EOF has previously been detected reading the given
   input stream, otherwise zero.
*/

ZEXTERN int ZEXPORT gzdirect OF((gzFile file));
/*
	 Returns 1 if file is being read directly without decompression, otherwise
   zero.
*/

ZEXTERN int ZEXPORT    gzclose OF((gzFile file));
/*
	 Flushes all pending output if necessary, closes the compressed file
   and deallocates all the (de)compression state. The return value is the zlib
   error number (see function gzerror below).
*/

ZEXTERN const char * ZEXPORT gzerror OF((gzFile file, int *errnum));
/*
	 Returns the error message for the last error which occurred on the
   given compressed file. errnum is set to zlib error number. If an
   error occurred in the file system and not in the compression library,
   errnum is set to Z_ERRNO and the application may consult errno
   to get the exact error code.
*/

ZEXTERN void ZEXPORT gzclearerr OF((gzFile file));
/*
	 Clears the error and end-of-file flags for file. This is analogous to the
   clearerr() function in stdio. This is useful for continuing to read a gzip
   file that is being written concurrently.
*/

						/* checksum functions */

/*
	 These functions are not related to compression but are exported
   anyway because they might be useful in applications using the
   compression library.
*/

ZEXTERN uLong ZEXPORT adler32 OF((uLong adler, const Bytef *buf, uInt len));
/*
	 Update a running Adler-32 checksum with the bytes buf[0..len-1] and
   return the updated checksum. If buf is NULL, this function returns
   the required initial value for the checksum.
   An Adler-32 checksum is almost as reliable as a CRC32 but can be computed
   much faster. Usage example:

	 uLong adler = adler32(0L, Z_NULL, 0);

	 while (read_buffer(buffer, length) != EOF) {
	   adler = adler32(adler, buffer, length);
	 }
	 if (adler != original_adler) error();
*/

ZEXTERN uLong ZEXPORT adler32_combine OF((uLong adler1, uLong adler2,
										  z_off_t len2));
/*
	 Combine two Adler-32 checksums into one.  For two sequences of bytes, seq1
   and seq2 with lengths len1 and len2, Adler-32 checksums were calculated for
   each, adler1 and adler2.  adler32_combine() returns the Adler-32 checksum of
   seq1 and seq2 concatenated, requiring only adler1, adler2, and len2.
*/

ZEXTERN uLong ZEXPORT crc32   OF((uLong crc, const Bytef *buf, uInt len));
/*
	 Update a running CRC-32 with the bytes buf[0..len-1] and return the
   updated CRC-32. If buf is NULL, this function returns the required initial
   value for the for the crc. Pre- and post-conditioning (one's complement) is
   performed within this function so it shouldn't be done by the application.
   Usage example:

	 uLong crc = crc32(0L, Z_NULL, 0);

	 while (read_buffer(buffer, length) != EOF) {
	   crc = crc32(crc, buffer, length);
	 }
	 if (crc != original_crc) error();
*/

ZEXTERN uLong ZEXPORT crc32_combine OF((uLong crc1, uLong crc2, z_off_t len2));

/*
	 Combine two CRC-32 check values into one.  For two sequences of bytes,
   seq1 and seq2 with lengths len1 and len2, CRC-32 check values were
   calculated for each, crc1 and crc2.  crc32_combine() returns the CRC-32
   check value of seq1 and seq2 concatenated, requiring only crc1, crc2, and
   len2.
*/

						/* various hacks, don't look :) */

/* deflateInit and inflateInit are macros to allow checking the zlib version
 * and the compiler's view of z_stream:
 */
ZEXTERN int ZEXPORT deflateInit_ OF((z_streamp strm, int level,
									 const char *version, int stream_size));
ZEXTERN int ZEXPORT inflateInit_ OF((z_streamp strm,
									 const char *version, int stream_size));
ZEXTERN int ZEXPORT deflateInit2_ OF((z_streamp strm, int  level, int  method,
									  int windowBits, int memLevel,
									  int strategy, const char *version,
									  int stream_size));
ZEXTERN int ZEXPORT inflateInit2_ OF((z_streamp strm, int  windowBits,
									  const char *version, int stream_size));
ZEXTERN int ZEXPORT inflateBackInit_ OF((z_streamp strm, int windowBits,
										 unsigned char FAR *window,
										 const char *version,
										 int stream_size));
#define deflateInit(strm, level) \
		deflateInit_((strm), (level),       ZLIB_VERSION, sizeof(z_stream))
#define inflateInit(strm) \
		inflateInit_((strm),                ZLIB_VERSION, sizeof(z_stream))
#define deflateInit2(strm, level, method, windowBits, memLevel, strategy) \
		deflateInit2_((strm),(level),(method),(windowBits),(memLevel),\
					  (strategy),           ZLIB_VERSION, sizeof(z_stream))
#define inflateInit2(strm, windowBits) \
		inflateInit2_((strm), (windowBits), ZLIB_VERSION, sizeof(z_stream))
#define inflateBackInit(strm, windowBits, window) \
		inflateBackInit_((strm), (windowBits), (window), \
		ZLIB_VERSION, sizeof(z_stream))

#if !defined(ZUTIL_H) && !defined(NO_DUMMY_DECL)
	struct internal_state {int dummy;}; /* hack for buggy compilers */
#endif

ZEXTERN const char   * ZEXPORT zError           OF((int));
ZEXTERN int            ZEXPORT inflateSyncPoint OF((z_streamp z));
ZEXTERN const uLongf * ZEXPORT get_crc_table    OF((void));

#ifdef __cplusplus
//}
#endif

#endif /* ZLIB_H */

/*** End of inlined file: zlib.h ***/


  #undef OS_CODE
#else
  #include JUCE_ZLIB_INCLUDE_PATH
#endif
}

namespace pnglibNamespace
{
  using namespace zlibNamespace;

#if JUCE_INCLUDE_PNGLIB_CODE || ! defined (JUCE_INCLUDE_PNGLIB_CODE)

  #if _MSC_VER != 1310
   using ::calloc; // (causes conflict in VS.NET 2003)
   using ::malloc;
   using ::free;
  #endif

  using ::abs;
  #define PNG_INTERNAL
  #define NO_DUMMY_DECL
  #define PNG_SETJMP_NOT_SUPPORTED


/*** Start of inlined file: png.h ***/
/* png.h - header file for PNG reference library
 *
 * libpng version 1.2.21 - October 4, 2007
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 *
 * Authors and maintainers:
 *  libpng versions 0.71, May 1995, through 0.88, January 1996: Guy Schalnat
 *  libpng versions 0.89c, June 1996, through 0.96, May 1997: Andreas Dilger
 *  libpng versions 0.97, January 1998, through 1.2.21 - October 4, 2007: Glenn
 *  See also "Contributing Authors", below.
 *
 * Note about libpng version numbers:
 *
 *    Due to various miscommunications, unforeseen code incompatibilities
 *    and occasional factors outside the authors' control, version numbering
 *    on the library has not always been consistent and straightforward.
 *    The following table summarizes matters since version 0.89c, which was
 *    the first widely used release:
 *
 *    source                 png.h  png.h  shared-lib
 *    version                string   int  version
 *    -------                ------ -----  ----------
 *    0.89c "1.0 beta 3"     0.89      89  1.0.89
 *    0.90  "1.0 beta 4"     0.90      90  0.90  [should have been 2.0.90]
 *    0.95  "1.0 beta 5"     0.95      95  0.95  [should have been 2.0.95]
 *    0.96  "1.0 beta 6"     0.96      96  0.96  [should have been 2.0.96]
 *    0.97b "1.00.97 beta 7" 1.00.97   97  1.0.1 [should have been 2.0.97]
 *    0.97c                  0.97      97  2.0.97
 *    0.98                   0.98      98  2.0.98
 *    0.99                   0.99      98  2.0.99
 *    0.99a-m                0.99      99  2.0.99
 *    1.00                   1.00     100  2.1.0 [100 should be 10000]
 *    1.0.0      (from here on, the   100  2.1.0 [100 should be 10000]
 *    1.0.1       png.h string is   10001  2.1.0
 *    1.0.1a-e    identical to the  10002  from here on, the shared library
 *    1.0.2       source version)   10002  is 2.V where V is the source code
 *    1.0.2a-b                      10003  version, except as noted.
 *    1.0.3                         10003
 *    1.0.3a-d                      10004
 *    1.0.4                         10004
 *    1.0.4a-f                      10005
 *    1.0.5 (+ 2 patches)           10005
 *    1.0.5a-d                      10006
 *    1.0.5e-r                      10100 (not source compatible)
 *    1.0.5s-v                      10006 (not binary compatible)
 *    1.0.6 (+ 3 patches)           10006 (still binary incompatible)
 *    1.0.6d-f                      10007 (still binary incompatible)
 *    1.0.6g                        10007
 *    1.0.6h                        10007  10.6h (testing xy.z so-numbering)
 *    1.0.6i                        10007  10.6i
 *    1.0.6j                        10007  2.1.0.6j (incompatible with 1.0.0)
 *    1.0.7beta11-14        DLLNUM  10007  2.1.0.7beta11-14 (binary compatible)
 *    1.0.7beta15-18           1    10007  2.1.0.7beta15-18 (binary compatible)
 *    1.0.7rc1-2               1    10007  2.1.0.7rc1-2 (binary compatible)
 *    1.0.7                    1    10007  (still compatible)
 *    1.0.8beta1-4             1    10008  2.1.0.8beta1-4
 *    1.0.8rc1                 1    10008  2.1.0.8rc1
 *    1.0.8                    1    10008  2.1.0.8
 *    1.0.9beta1-6             1    10009  2.1.0.9beta1-6
 *    1.0.9rc1                 1    10009  2.1.0.9rc1
 *    1.0.9beta7-10            1    10009  2.1.0.9beta7-10
 *    1.0.9rc2                 1    10009  2.1.0.9rc2
 *    1.0.9                    1    10009  2.1.0.9
 *    1.0.10beta1              1    10010  2.1.0.10beta1
 *    1.0.10rc1                1    10010  2.1.0.10rc1
 *    1.0.10                   1    10010  2.1.0.10
 *    1.0.11beta1-3            1    10011  2.1.0.11beta1-3
 *    1.0.11rc1                1    10011  2.1.0.11rc1
 *    1.0.11                   1    10011  2.1.0.11
 *    1.0.12beta1-2            2    10012  2.1.0.12beta1-2
 *    1.0.12rc1                2    10012  2.1.0.12rc1
 *    1.0.12                   2    10012  2.1.0.12
 *    1.1.0a-f                 -    10100  2.1.1.0a-f (branch abandoned)
 *    1.2.0beta1-2             2    10200  2.1.2.0beta1-2
 *    1.2.0beta3-5             3    10200  3.1.2.0beta3-5
 *    1.2.0rc1                 3    10200  3.1.2.0rc1
 *    1.2.0                    3    10200  3.1.2.0
 *    1.2.1beta1-4             3    10201  3.1.2.1beta1-4
 *    1.2.1rc1-2               3    10201  3.1.2.1rc1-2
 *    1.2.1                    3    10201  3.1.2.1
 *    1.2.2beta1-6            12    10202  12.so.0.1.2.2beta1-6
 *    1.0.13beta1             10    10013  10.so.0.1.0.13beta1
 *    1.0.13rc1               10    10013  10.so.0.1.0.13rc1
 *    1.2.2rc1                12    10202  12.so.0.1.2.2rc1
 *    1.0.13                  10    10013  10.so.0.1.0.13
 *    1.2.2                   12    10202  12.so.0.1.2.2
 *    1.2.3rc1-6              12    10203  12.so.0.1.2.3rc1-6
 *    1.2.3                   12    10203  12.so.0.1.2.3
 *    1.2.4beta1-3            13    10204  12.so.0.1.2.4beta1-3
 *    1.0.14rc1               13    10014  10.so.0.1.0.14rc1
 *    1.2.4rc1                13    10204  12.so.0.1.2.4rc1
 *    1.0.14                  10    10014  10.so.0.1.0.14
 *    1.2.4                   13    10204  12.so.0.1.2.4
 *    1.2.5beta1-2            13    10205  12.so.0.1.2.5beta1-2
 *    1.0.15rc1-3             10    10015  10.so.0.1.0.15rc1-3
 *    1.2.5rc1-3              13    10205  12.so.0.1.2.5rc1-3
 *    1.0.15                  10    10015  10.so.0.1.0.15
 *    1.2.5                   13    10205  12.so.0.1.2.5
 *    1.2.6beta1-4            13    10206  12.so.0.1.2.6beta1-4
 *    1.0.16                  10    10016  10.so.0.1.0.16
 *    1.2.6                   13    10206  12.so.0.1.2.6
 *    1.2.7beta1-2            13    10207  12.so.0.1.2.7beta1-2
 *    1.0.17rc1               10    10017  10.so.0.1.0.17rc1
 *    1.2.7rc1                13    10207  12.so.0.1.2.7rc1
 *    1.0.17                  10    10017  10.so.0.1.0.17
 *    1.2.7                   13    10207  12.so.0.1.2.7
 *    1.2.8beta1-5            13    10208  12.so.0.1.2.8beta1-5
 *    1.0.18rc1-5             10    10018  10.so.0.1.0.18rc1-5
 *    1.2.8rc1-5              13    10208  12.so.0.1.2.8rc1-5
 *    1.0.18                  10    10018  10.so.0.1.0.18
 *    1.2.8                   13    10208  12.so.0.1.2.8
 *    1.2.9beta1-3            13    10209  12.so.0.1.2.9beta1-3
 *    1.2.9beta4-11           13    10209  12.so.0.9[.0]
 *    1.2.9rc1                13    10209  12.so.0.9[.0]
 *    1.2.9                   13    10209  12.so.0.9[.0]
 *    1.2.10beta1-8           13    10210  12.so.0.10[.0]
 *    1.2.10rc1-3             13    10210  12.so.0.10[.0]
 *    1.2.10                  13    10210  12.so.0.10[.0]
 *    1.2.11beta1-4           13    10211  12.so.0.11[.0]
 *    1.0.19rc1-5             10    10019  10.so.0.19[.0]
 *    1.2.11rc1-5             13    10211  12.so.0.11[.0]
 *    1.0.19                  10    10019  10.so.0.19[.0]
 *    1.2.11                  13    10211  12.so.0.11[.0]
 *    1.0.20                  10    10020  10.so.0.20[.0]
 *    1.2.12                  13    10212  12.so.0.12[.0]
 *    1.2.13beta1             13    10213  12.so.0.13[.0]
 *    1.0.21                  10    10021  10.so.0.21[.0]
 *    1.2.13                  13    10213  12.so.0.13[.0]
 *    1.2.14beta1-2           13    10214  12.so.0.14[.0]
 *    1.0.22rc1               10    10022  10.so.0.22[.0]
 *    1.2.14rc1               13    10214  12.so.0.14[.0]
 *    1.0.22                  10    10022  10.so.0.22[.0]
 *    1.2.14                  13    10214  12.so.0.14[.0]
 *    1.2.15beta1-6           13    10215  12.so.0.15[.0]
 *    1.0.23rc1-5             10    10023  10.so.0.23[.0]
 *    1.2.15rc1-5             13    10215  12.so.0.15[.0]
 *    1.0.23                  10    10023  10.so.0.23[.0]
 *    1.2.15                  13    10215  12.so.0.15[.0]
 *    1.2.16beta1-2           13    10216  12.so.0.16[.0]
 *    1.2.16rc1               13    10216  12.so.0.16[.0]
 *    1.0.24                  10    10024  10.so.0.24[.0]
 *    1.2.16                  13    10216  12.so.0.16[.0]
 *    1.2.17beta1-2           13    10217  12.so.0.17[.0]
 *    1.0.25rc1               10    10025  10.so.0.25[.0]
 *    1.2.17rc1-3             13    10217  12.so.0.17[.0]
 *    1.0.25                  10    10025  10.so.0.25[.0]
 *    1.2.17                  13    10217  12.so.0.17[.0]
 *    1.0.26                  10    10026  10.so.0.26[.0]
 *    1.2.18                  13    10218  12.so.0.18[.0]
 *    1.2.19beta1-31          13    10219  12.so.0.19[.0]
 *    1.0.27rc1-6             10    10027  10.so.0.27[.0]
 *    1.2.19rc1-6             13    10219  12.so.0.19[.0]
 *    1.0.27                  10    10027  10.so.0.27[.0]
 *    1.2.19                  13    10219  12.so.0.19[.0]
 *    1.2.20beta01-04         13    10220  12.so.0.20[.0]
 *    1.0.28rc1-6             10    10028  10.so.0.28[.0]
 *    1.2.20rc1-6             13    10220  12.so.0.20[.0]
 *    1.0.28                  10    10028  10.so.0.28[.0]
 *    1.2.20                  13    10220  12.so.0.20[.0]
 *    1.2.21beta1-2           13    10221  12.so.0.21[.0]
 *    1.2.21rc1-3             13    10221  12.so.0.21[.0]
 *    1.0.29                  10    10029  10.so.0.29[.0]
 *    1.2.21                  13    10221  12.so.0.21[.0]
 *
 *    Henceforth the source version will match the shared-library major
 *    and minor numbers; the shared-library major version number will be
 *    used for changes in backward compatibility, as it is intended.  The
 *    PNG_LIBPNG_VER macro, which is not used within libpng but is available
 *    for applications, is an unsigned integer of the form xyyzz corresponding
 *    to the source version x.y.z (leading zeros in y and z).  Beta versions
 *    were given the previous public release number plus a letter, until
 *    version 1.0.6j; from then on they were given the upcoming public
 *    release number plus "betaNN" or "rcN".
 *
 *    Binary incompatibility exists only when applications make direct access
 *    to the info_ptr or png_ptr members through png.h, and the compiled
 *    application is loaded with a different version of the library.
 *
 *    DLLNUM will change each time there are forward or backward changes
 *    in binary compatibility (e.g., when a new feature is added).
 *
 * See libpng.txt or libpng.3 for more information.  The PNG specification
 * is available as a W3C Recommendation and as an ISO Specification,
 * <http://www.w3.org/TR/2003/REC-PNG-20031110/
 */

/*
 * COPYRIGHT NOTICE, DISCLAIMER, and LICENSE:
 *
 * If you modify libpng you may insert additional notices immediately following
 * this sentence.
 *
 * libpng versions 1.2.6, August 15, 2004, through 1.2.21, October 4, 2007, are
 * Copyright (c) 2004, 2006-2007 Glenn Randers-Pehrson, and are
 * distributed according to the same disclaimer and license as libpng-1.2.5
 * with the following individual added to the list of Contributing Authors:
 *
 *    Cosmin Truta
 *
 * libpng versions 1.0.7, July 1, 2000, through 1.2.5, October 3, 2002, are
 * Copyright (c) 2000-2002 Glenn Randers-Pehrson, and are
 * distributed according to the same disclaimer and license as libpng-1.0.6
 * with the following individuals added to the list of Contributing Authors:
 *
 *    Simon-Pierre Cadieux
 *    Eric S. Raymond
 *    Gilles Vollant
 *
 * and with the following additions to the disclaimer:
 *
 *    There is no warranty against interference with your enjoyment of the
 *    library or against infringement.  There is no warranty that our
 *    efforts or the library will fulfill any of your particular purposes
 *    or needs.  This library is provided with all faults, and the entire
 *    risk of satisfactory quality, performance, accuracy, and effort is with
 *    the user.
 *
 * libpng versions 0.97, January 1998, through 1.0.6, March 20, 2000, are
 * Copyright (c) 1998, 1999, 2000 Glenn Randers-Pehrson, and are
 * distributed according to the same disclaimer and license as libpng-0.96,
 * with the following individuals added to the list of Contributing Authors:
 *
 *    Tom Lane
 *    Glenn Randers-Pehrson
 *    Willem van Schaik
 *
 * libpng versions 0.89, June 1996, through 0.96, May 1997, are
 * Copyright (c) 1996, 1997 Andreas Dilger
 * Distributed according to the same disclaimer and license as libpng-0.88,
 * with the following individuals added to the list of Contributing Authors:
 *
 *    John Bowler
 *    Kevin Bracey
 *    Sam Bushell
 *    Magnus Holmgren
 *    Greg Roelofs
 *    Tom Tanner
 *
 * libpng versions 0.5, May 1995, through 0.88, January 1996, are
 * Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.
 *
 * For the purposes of this copyright and license, "Contributing Authors"
 * is defined as the following set of individuals:
 *
 *    Andreas Dilger
 *    Dave Martindale
 *    Guy Eric Schalnat
 *    Paul Schmidt
 *    Tim Wegner
 *
 * The PNG Reference Library is supplied "AS IS".  The Contributing Authors
 * and Group 42, Inc. disclaim all warranties, expressed or implied,
 * including, without limitation, the warranties of merchantability and of
 * fitness for any purpose.  The Contributing Authors and Group 42, Inc.
 * assume no liability for direct, indirect, incidental, special, exemplary,
 * or consequential damages, which may result from the use of the PNG
 * Reference Library, even if advised of the possibility of such damage.
 *
 * Permission is hereby granted to use, copy, modify, and distribute this
 * source code, or portions hereof, for any purpose, without fee, subject
 * to the following restrictions:
 *
 * 1. The origin of this source code must not be misrepresented.
 *
 * 2. Altered versions must be plainly marked as such and
 * must not be misrepresented as being the original source.
 *
 * 3. This Copyright notice may not be removed or altered from
 *    any source or altered source distribution.
 *
 * The Contributing Authors and Group 42, Inc. specifically permit, without
 * fee, and encourage the use of this source code as a component to
 * supporting the PNG file format in commercial products.  If you use this
 * source code in a product, acknowledgment is not required but would be
 * appreciated.
 */

/*
 * A "png_get_copyright" function is available, for convenient use in "about"
 * boxes and the like:
 *
 * printf("%s",png_get_copyright(NULL));
 *
 * Also, the PNG logo (in PNG format, of course) is supplied in the
 * files "pngbar.png" and "pngbar.jpg (88x31) and "pngnow.png" (98x31).
 */

/*
 * Libpng is OSI Certified Open Source Software.  OSI Certified is a
 * certification mark of the Open Source Initiative.
 */

/*
 * The contributing authors would like to thank all those who helped
 * with testing, bug fixes, and patience.  This wouldn't have been
 * possible without all of you.
 *
 * Thanks to Frank J. T. Wojcik for helping with the documentation.
 */

/*
 * Y2K compliance in libpng:
 * =========================
 *
 *    October 4, 2007
 *
 *    Since the PNG Development group is an ad-hoc body, we can't make
 *    an official declaration.
 *
 *    This is your unofficial assurance that libpng from version 0.71 and
 *    upward through 1.2.21 are Y2K compliant.  It is my belief that earlier
 *    versions were also Y2K compliant.
 *
 *    Libpng only has three year fields.  One is a 2-byte unsigned integer
 *    that will hold years up to 65535.  The other two hold the date in text
 *    format, and will hold years up to 9999.
 *
 *    The integer is
 *        "png_uint_16 year" in png_time_struct.
 *
 *    The strings are
 *        "png_charp time_buffer" in png_struct and
 *        "near_time_buffer", which is a local character string in png.c.
 *
 *    There are seven time-related functions:
 *        png.c: png_convert_to_rfc_1123() in png.c
 *          (formerly png_convert_to_rfc_1152() in error)
 *        png_convert_from_struct_tm() in pngwrite.c, called in pngwrite.c
 *        png_convert_from_time_t() in pngwrite.c
 *        png_get_tIME() in pngget.c
 *        png_handle_tIME() in pngrutil.c, called in pngread.c
 *        png_set_tIME() in pngset.c
 *        png_write_tIME() in pngwutil.c, called in pngwrite.c
 *
 *    All handle dates properly in a Y2K environment.  The
 *    png_convert_from_time_t() function calls gmtime() to convert from system
 *    clock time, which returns (year - 1900), which we properly convert to
 *    the full 4-digit year.  There is a possibility that applications using
 *    libpng are not passing 4-digit years into the png_convert_to_rfc_1123()
 *    function, or that they are incorrectly passing only a 2-digit year
 *    instead of "year - 1900" into the png_convert_from_struct_tm() function,
 *    but this is not under our control.  The libpng documentation has always
 *    stated that it works with 4-digit years, and the APIs have been
 *    documented as such.
 *
 *    The tIME chunk itself is also Y2K compliant.  It uses a 2-byte unsigned
 *    integer to hold the year, and can hold years as large as 65535.
 *
 *    zlib, upon which libpng depends, is also Y2K compliant.  It contains
 *    no date-related code.
 *
 *       Glenn Randers-Pehrson
 *       libpng maintainer
 *       PNG Development Group
 */

#ifndef PNG_H
#define PNG_H

/* This is not the place to learn how to use libpng.  The file libpng.txt
 * describes how to use libpng, and the file example.c summarizes it
 * with some code on which to build.  This file is useful for looking
 * at the actual function definitions and structure components.
 */

/* Version information for png.h - this should match the version in png.c */
#define PNG_LIBPNG_VER_STRING "1.2.21"
#define PNG_HEADER_VERSION_STRING \
   " libpng version 1.2.21 - October 4, 2007\n"

#define PNG_LIBPNG_VER_SONUM   0
#define PNG_LIBPNG_VER_DLLNUM  13

/* These should match the first 3 components of PNG_LIBPNG_VER_STRING: */
#define PNG_LIBPNG_VER_MAJOR   1
#define PNG_LIBPNG_VER_MINOR   2
#define PNG_LIBPNG_VER_RELEASE 21
/* This should match the numeric part of the final component of
 * PNG_LIBPNG_VER_STRING, omitting any leading zero: */

#define PNG_LIBPNG_VER_BUILD  0

/* Release Status */
#define PNG_LIBPNG_BUILD_ALPHA    1
#define PNG_LIBPNG_BUILD_BETA     2
#define PNG_LIBPNG_BUILD_RC       3
#define PNG_LIBPNG_BUILD_STABLE   4
#define PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK 7

/* Release-Specific Flags */
#define PNG_LIBPNG_BUILD_PATCH    8 /* Can be OR'ed with
									   PNG_LIBPNG_BUILD_STABLE only */
#define PNG_LIBPNG_BUILD_PRIVATE 16 /* Cannot be OR'ed with
									   PNG_LIBPNG_BUILD_SPECIAL */
#define PNG_LIBPNG_BUILD_SPECIAL 32 /* Cannot be OR'ed with
									   PNG_LIBPNG_BUILD_PRIVATE */

#define PNG_LIBPNG_BUILD_BASE_TYPE PNG_LIBPNG_BUILD_STABLE

/* Careful here.  At one time, Guy wanted to use 082, but that would be octal.
 * We must not include leading zeros.
 * Versions 0.7 through 1.0.0 were in the range 0 to 100 here (only
 * version 1.0.0 was mis-numbered 100 instead of 10000).  From
 * version 1.0.1 it's    xxyyzz, where x=major, y=minor, z=release */
#define PNG_LIBPNG_VER 10221 /* 1.2.21 */

#ifndef PNG_VERSION_INFO_ONLY
/* include the compression library's header */

#endif

/* include all user configurable info, including optional assembler routines */

/*** Start of inlined file: pngconf.h ***/
/* pngconf.h - machine configurable file for libpng
 *
 * libpng version 1.2.21 - October 4, 2007
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 */

/* Any machine specific code is near the front of this file, so if you
 * are configuring libpng for a machine, you may want to read the section
 * starting here down to where it starts to typedef png_color, png_text,
 * and png_info.
 */

#ifndef PNGCONF_H
#define PNGCONF_H

#define PNG_1_2_X

// These are some Juce config settings that should remove any unnecessary code bloat..

#define PNG_NO_STDIO 1
#define PNG_DEBUG 0
#define PNG_NO_WARNINGS 1
#define PNG_NO_ERROR_TEXT 1
#define PNG_NO_ERROR_NUMBERS 1
#define PNG_NO_USER_MEM 1
#define PNG_NO_READ_iCCP 1
#define PNG_NO_READ_UNKNOWN_CHUNKS 1
#define PNG_NO_READ_USER_CHUNKS 1
#define PNG_NO_READ_iTXt 1
#define PNG_NO_READ_sCAL 1
#define PNG_NO_READ_sPLT 1

#define png_error(a, b) png_err(a)
#define png_warning(a, b)
#define png_chunk_error(a, b) png_err(a)
#define png_chunk_warning(a, b)

/*
 * PNG_USER_CONFIG has to be defined on the compiler command line. This
 * includes the resource compiler for Windows DLL configurations.
 */
#ifdef PNG_USER_CONFIG
#  ifndef PNG_USER_PRIVATEBUILD
#    define PNG_USER_PRIVATEBUILD
#  endif
#include "pngusr.h"
#endif

/* PNG_CONFIGURE_LIBPNG is set by the "configure" script. */
#ifdef PNG_CONFIGURE_LIBPNG
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
#endif

/*
 * Added at libpng-1.2.8
 *
 * If you create a private DLL you need to define in "pngusr.h" the followings:
 * #define PNG_USER_PRIVATEBUILD <Describes by whom and why this version of
 *        the DLL was built>
 *  e.g. #define PNG_USER_PRIVATEBUILD "Build by MyCompany for xyz reasons."
 * #define PNG_USER_DLLFNAME_POSTFIX <two-letter postfix that serve to
 *        distinguish your DLL from those of the official release. These
 *        correspond to the trailing letters that come after the version
 *        number and must match your private DLL name>
 *  e.g. // private DLL "libpng13gx.dll"
 *       #define PNG_USER_DLLFNAME_POSTFIX "gx"
 *
 * The following macros are also at your disposal if you want to complete the
 * DLL VERSIONINFO structure.
 * - PNG_USER_VERSIONINFO_COMMENTS
 * - PNG_USER_VERSIONINFO_COMPANYNAME
 * - PNG_USER_VERSIONINFO_LEGALTRADEMARKS
 */

#ifdef __STDC__
#ifdef SPECIALBUILD
#  pragma message("PNG_LIBPNG_SPECIALBUILD (and deprecated SPECIALBUILD)\
 are now LIBPNG reserved macros. Use PNG_USER_PRIVATEBUILD instead.")
#endif

#ifdef PRIVATEBUILD
# pragma message("PRIVATEBUILD is deprecated.\
 Use PNG_USER_PRIVATEBUILD instead.")
# define PNG_USER_PRIVATEBUILD PRIVATEBUILD
#endif
#endif /* __STDC__ */

#ifndef PNG_VERSION_INFO_ONLY

/* End of material added to libpng-1.2.8 */

/* Added at libpng-1.2.19, removed at libpng-1.2.20 because it caused trouble
   Restored at libpng-1.2.21 */
#    define PNG_WARN_UNINITIALIZED_ROW 1
/* End of material added at libpng-1.2.19/1.2.21 */

/* This is the size of the compression buffer, and thus the size of
 * an IDAT chunk.  Make this whatever size you feel is best for your
 * machine.  One of these will be allocated per png_struct.  When this
 * is full, it writes the data to the disk, and does some other
 * calculations.  Making this an extremely small size will slow
 * the library down, but you may want to experiment to determine
 * where it becomes significant, if you are concerned with memory
 * usage.  Note that zlib allocates at least 32Kb also.  For readers,
 * this describes the size of the buffer available to read the data in.
 * Unless this gets smaller than the size of a row (compressed),
 * it should not make much difference how big this is.
 */

#ifndef PNG_ZBUF_SIZE
#  define PNG_ZBUF_SIZE 8192
#endif

/* Enable if you want a write-only libpng */

#ifndef PNG_NO_READ_SUPPORTED
#  define PNG_READ_SUPPORTED
#endif

/* Enable if you want a read-only libpng */

#ifndef PNG_NO_WRITE_SUPPORTED
#  define PNG_WRITE_SUPPORTED
#endif

/* Enabled by default in 1.2.0.  You can disable this if you don't need to
   support PNGs that are embedded in MNG datastreams */
#if !defined(PNG_1_0_X) && !defined(PNG_NO_MNG_FEATURES)
#  ifndef PNG_MNG_FEATURES_SUPPORTED
#    define PNG_MNG_FEATURES_SUPPORTED
#  endif
#endif

#ifndef PNG_NO_FLOATING_POINT_SUPPORTED
#  ifndef PNG_FLOATING_POINT_SUPPORTED
#    define PNG_FLOATING_POINT_SUPPORTED
#  endif
#endif

/* If you are running on a machine where you cannot allocate more
 * than 64K of memory at once, uncomment this.  While libpng will not
 * normally need that much memory in a chunk (unless you load up a very
 * large file), zlib needs to know how big of a chunk it can use, and
 * libpng thus makes sure to check any memory allocation to verify it
 * will fit into memory.
#define PNG_MAX_MALLOC_64K
 */
#if defined(MAXSEG_64K) && !defined(PNG_MAX_MALLOC_64K)
#  define PNG_MAX_MALLOC_64K
#endif

/* Special munging to support doing things the 'cygwin' way:
 * 'Normal' png-on-win32 defines/defaults:
 *   PNG_BUILD_DLL -- building dll
 *   PNG_USE_DLL   -- building an application, linking to dll
 *   (no define)   -- building static library, or building an
 *                    application and linking to the static lib
 * 'Cygwin' defines/defaults:
 *   PNG_BUILD_DLL -- (ignored) building the dll
 *   (no define)   -- (ignored) building an application, linking to the dll
 *   PNG_STATIC    -- (ignored) building the static lib, or building an
 *                    application that links to the static lib.
 *   ALL_STATIC    -- (ignored) building various static libs, or building an
 *                    application that links to the static libs.
 * Thus,
 * a cygwin user should define either PNG_BUILD_DLL or PNG_STATIC, and
 * this bit of #ifdefs will define the 'correct' config variables based on
 * that. If a cygwin user *wants* to define 'PNG_USE_DLL' that's okay, but
 * unnecessary.
 *
 * Also, the precedence order is:
 *   ALL_STATIC (since we can't #undef something outside our namespace)
 *   PNG_BUILD_DLL
 *   PNG_STATIC
 *   (nothing) == PNG_USE_DLL
 *
 * CYGWIN (2002-01-20): The preceding is now obsolete. With the advent
 *   of auto-import in binutils, we no longer need to worry about
 *   __declspec(dllexport) / __declspec(dllimport) and friends.  Therefore,
 *   we don't need to worry about PNG_STATIC or ALL_STATIC when it comes
 *   to __declspec() stuff.  However, we DO need to worry about
 *   PNG_BUILD_DLL and PNG_STATIC because those change some defaults
 *   such as CONSOLE_IO and whether GLOBAL_ARRAYS are allowed.
 */
#if defined(__CYGWIN__)
#  if defined(ALL_STATIC)
#    if defined(PNG_BUILD_DLL)
#      undef PNG_BUILD_DLL
#    endif
#    if defined(PNG_USE_DLL)
#      undef PNG_USE_DLL
#    endif
#    if defined(PNG_DLL)
#      undef PNG_DLL
#    endif
#    if !defined(PNG_STATIC)
#      define PNG_STATIC
#    endif
#  else
#    if defined (PNG_BUILD_DLL)
#      if defined(PNG_STATIC)
#        undef PNG_STATIC
#      endif
#      if defined(PNG_USE_DLL)
#        undef PNG_USE_DLL
#      endif
#      if !defined(PNG_DLL)
#        define PNG_DLL
#      endif
#    else
#      if defined(PNG_STATIC)
#        if defined(PNG_USE_DLL)
#          undef PNG_USE_DLL
#        endif
#        if defined(PNG_DLL)
#          undef PNG_DLL
#        endif
#      else
#        if !defined(PNG_USE_DLL)
#          define PNG_USE_DLL
#        endif
#        if !defined(PNG_DLL)
#          define PNG_DLL
#        endif
#      endif
#    endif
#  endif
#endif

/* This protects us against compilers that run on a windowing system
 * and thus don't have or would rather us not use the stdio types:
 * stdin, stdout, and stderr.  The only one currently used is stderr
 * in png_error() and png_warning().  #defining PNG_NO_CONSOLE_IO will
 * prevent these from being compiled and used. #defining PNG_NO_STDIO
 * will also prevent these, plus will prevent the entire set of stdio
 * macros and functions (FILE *, printf, etc.) from being compiled and used,
 * unless (PNG_DEBUG > 0) has been #defined.
 *
 * #define PNG_NO_CONSOLE_IO
 * #define PNG_NO_STDIO
 */

#if defined(_WIN32_WCE)
#  include <windows.h>
   /* Console I/O functions are not supported on WindowsCE */
#  define PNG_NO_CONSOLE_IO
#  ifdef PNG_DEBUG
#    undef PNG_DEBUG
#  endif
#endif

#ifdef PNG_BUILD_DLL
#  ifndef PNG_CONSOLE_IO_SUPPORTED
#    ifndef PNG_NO_CONSOLE_IO
#      define PNG_NO_CONSOLE_IO
#    endif
#  endif
#endif

#  ifdef PNG_NO_STDIO
#    ifndef PNG_NO_CONSOLE_IO
#      define PNG_NO_CONSOLE_IO
#    endif
#    ifdef PNG_DEBUG
#      if (PNG_DEBUG > 0)
#        include <stdio.h>
#      endif
#    endif
#  else
#    if !defined(_WIN32_WCE)
/* "stdio.h" functions are not supported on WindowsCE */
#      include <stdio.h>
#    endif
#  endif

/* This macro protects us against machines that don't have function
 * prototypes (ie K&R style headers).  If your compiler does not handle
 * function prototypes, define this macro and use the included ansi2knr.
 * I've always been able to use _NO_PROTO as the indicator, but you may
 * need to drag the empty declaration out in front of here, or change the
 * ifdef to suit your own needs.
 */
#ifndef PNGARG

#ifdef OF /* zlib prototype munger */
#  define PNGARG(arglist) OF(arglist)
#else

#ifdef _NO_PROTO
#  define PNGARG(arglist) ()
#  ifndef PNG_TYPECAST_NULL
#     define PNG_TYPECAST_NULL
#  endif
#else
#  define PNGARG(arglist) arglist
#endif /* _NO_PROTO */

#endif /* OF */

#endif /* PNGARG */

/* Try to determine if we are compiling on a Mac.  Note that testing for
 * just __MWERKS__ is not good enough, because the Codewarrior is now used
 * on non-Mac platforms.
 */
#ifndef MACOS
#  if (defined(__MWERKS__) && defined(macintosh)) || defined(applec) || \
	  defined(THINK_C) || defined(__SC__) || defined(TARGET_OS_MAC)
#    define MACOS
#  endif
#endif

/* enough people need this for various reasons to include it here */
#if !defined(MACOS) && !defined(RISCOS) && !defined(_WIN32_WCE)
#  include <sys/types.h>
#endif

#if !defined(PNG_SETJMP_NOT_SUPPORTED) && !defined(PNG_NO_SETJMP_SUPPORTED)
#  define PNG_SETJMP_SUPPORTED
#endif

#ifdef PNG_SETJMP_SUPPORTED
/* This is an attempt to force a single setjmp behaviour on Linux.  If
 * the X config stuff didn't define _BSD_SOURCE we wouldn't need this.
 */

#  ifdef __linux__
#    ifdef _BSD_SOURCE
#      define PNG_SAVE_BSD_SOURCE
#      undef _BSD_SOURCE
#    endif
#    ifdef _SETJMP_H
	 /* If you encounter a compiler error here, see the explanation
	  * near the end of INSTALL.
	  */
		 __png.h__ already includes setjmp.h;
		 __dont__ include it again.;
#    endif
#  endif /* __linux__ */

   /* include setjmp.h for error handling */
#  include <setjmp.h>

#  ifdef __linux__
#    ifdef PNG_SAVE_BSD_SOURCE
#      define _BSD_SOURCE
#      undef PNG_SAVE_BSD_SOURCE
#    endif
#  endif /* __linux__ */
#endif /* PNG_SETJMP_SUPPORTED */

#ifdef BSD
#if ! JUCE_MAC
#  include <strings.h>
#endif
#else
#  include <string.h>
#endif

/* Other defines for things like memory and the like can go here.  */
#ifdef PNG_INTERNAL

#include <stdlib.h>

/* The functions exported by PNG_EXTERN are PNG_INTERNAL functions, which
 * aren't usually used outside the library (as far as I know), so it is
 * debatable if they should be exported at all.  In the future, when it is
 * possible to have run-time registry of chunk-handling functions, some of
 * these will be made available again.
#define PNG_EXTERN extern
 */
#define PNG_EXTERN

/* Other defines specific to compilers can go here.  Try to keep
 * them inside an appropriate ifdef/endif pair for portability.
 */

#if defined(PNG_FLOATING_POINT_SUPPORTED)
#  if defined(MACOS)
	 /* We need to check that <math.h> hasn't already been included earlier
	  * as it seems it doesn't agree with <fp.h>, yet we should really use
	  * <fp.h> if possible.
	  */
#    if !defined(__MATH_H__) && !defined(__MATH_H) && !defined(__cmath__)
#      include <fp.h>
#    endif
#  else
#    include <math.h>
#  endif
#  if defined(_AMIGA) && defined(__SASC) && defined(_M68881)
	 /* Amiga SAS/C: We must include builtin FPU functions when compiling using
	  * MATH=68881
	  */
#    include <m68881.h>
#  endif
#endif

/* Codewarrior on NT has linking problems without this. */
#if (defined(__MWERKS__) && defined(WIN32)) || defined(__STDC__)
#  define PNG_ALWAYS_EXTERN
#endif

/* This provides the non-ANSI (far) memory allocation routines. */
#if defined(__TURBOC__) && defined(__MSDOS__)
#  include <mem.h>
#  include <alloc.h>
#endif

/* I have no idea why is this necessary... */
#if defined(_MSC_VER) && (defined(WIN32) || defined(_Windows) || \
	defined(_WINDOWS) || defined(_WIN32) || defined(__WIN32__))
#  include <malloc.h>
#endif

/* This controls how fine the dithering gets.  As this allocates
 * a largish chunk of memory (32K), those who are not as concerned
 * with dithering quality can decrease some or all of these.
 */
#ifndef PNG_DITHER_RED_BITS
#  define PNG_DITHER_RED_BITS 5
#endif
#ifndef PNG_DITHER_GREEN_BITS
#  define PNG_DITHER_GREEN_BITS 5
#endif
#ifndef PNG_DITHER_BLUE_BITS
#  define PNG_DITHER_BLUE_BITS 5
#endif

/* This controls how fine the gamma correction becomes when you
 * are only interested in 8 bits anyway.  Increasing this value
 * results in more memory being used, and more pow() functions
 * being called to fill in the gamma tables.  Don't set this value
 * less then 8, and even that may not work (I haven't tested it).
 */

#ifndef PNG_MAX_GAMMA_8
#  define PNG_MAX_GAMMA_8 11
#endif

/* This controls how much a difference in gamma we can tolerate before
 * we actually start doing gamma conversion.
 */
#ifndef PNG_GAMMA_THRESHOLD
#  define PNG_GAMMA_THRESHOLD 0.05
#endif

#endif /* PNG_INTERNAL */

/* The following uses const char * instead of char * for error
 * and warning message functions, so some compilers won't complain.
 * If you do not want to use const, define PNG_NO_CONST here.
 */

#ifndef PNG_NO_CONST
#  define PNG_CONST const
#else
#  define PNG_CONST
#endif

/* The following defines give you the ability to remove code from the
 * library that you will not be using.  I wish I could figure out how to
 * automate this, but I can't do that without making it seriously hard
 * on the users.  So if you are not using an ability, change the #define
 * to and #undef, and that part of the library will not be compiled.  If
 * your linker can't find a function, you may want to make sure the
 * ability is defined here.  Some of these depend upon some others being
 * defined.  I haven't figured out all the interactions here, so you may
 * have to experiment awhile to get everything to compile.  If you are
 * creating or using a shared library, you probably shouldn't touch this,
 * as it will affect the size of the structures, and this will cause bad
 * things to happen if the library and/or application ever change.
 */

/* Any features you will not be using can be undef'ed here */

/* GR-P, 0.96a: Set "*TRANSFORMS_SUPPORTED as default but allow user
 * to turn it off with "*TRANSFORMS_NOT_SUPPORTED" or *PNG_NO_*_TRANSFORMS
 * on the compile line, then pick and choose which ones to define without
 * having to edit this file. It is safe to use the *TRANSFORMS_NOT_SUPPORTED
 * if you only want to have a png-compliant reader/writer but don't need
 * any of the extra transformations.  This saves about 80 kbytes in a
 * typical installation of the library. (PNG_NO_* form added in version
 * 1.0.1c, for consistency)
 */

/* The size of the png_text structure changed in libpng-1.0.6 when
 * iTXt support was added.  iTXt support was turned off by default through
 * libpng-1.2.x, to support old apps that malloc the png_text structure
 * instead of calling png_set_text() and letting libpng malloc it.  It
 * was turned on by default in libpng-1.3.0.
 */

#if defined(PNG_1_0_X) || defined (PNG_1_2_X)
#  ifndef PNG_NO_iTXt_SUPPORTED
#    define PNG_NO_iTXt_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_iTXt
#    define PNG_NO_READ_iTXt
#  endif
#  ifndef PNG_NO_WRITE_iTXt
#    define PNG_NO_WRITE_iTXt
#  endif
#endif

#if !defined(PNG_NO_iTXt_SUPPORTED)
#  if !defined(PNG_READ_iTXt_SUPPORTED) && !defined(PNG_NO_READ_iTXt)
#    define PNG_READ_iTXt
#  endif
#  if !defined(PNG_WRITE_iTXt_SUPPORTED) && !defined(PNG_NO_WRITE_iTXt)
#    define PNG_WRITE_iTXt
#  endif
#endif

/* The following support, added after version 1.0.0, can be turned off here en
 * masse by defining PNG_LEGACY_SUPPORTED in case you need binary compatibility
 * with old applications that require the length of png_struct and png_info
 * to remain unchanged.
 */

#ifdef PNG_LEGACY_SUPPORTED
#  define PNG_NO_FREE_ME
#  define PNG_NO_READ_UNKNOWN_CHUNKS
#  define PNG_NO_WRITE_UNKNOWN_CHUNKS
#  define PNG_NO_READ_USER_CHUNKS
#  define PNG_NO_READ_iCCP
#  define PNG_NO_WRITE_iCCP
#  define PNG_NO_READ_iTXt
#  define PNG_NO_WRITE_iTXt
#  define PNG_NO_READ_sCAL
#  define PNG_NO_WRITE_sCAL
#  define PNG_NO_READ_sPLT
#  define PNG_NO_WRITE_sPLT
#  define PNG_NO_INFO_IMAGE
#  define PNG_NO_READ_RGB_TO_GRAY
#  define PNG_NO_READ_USER_TRANSFORM
#  define PNG_NO_WRITE_USER_TRANSFORM
#  define PNG_NO_USER_MEM
#  define PNG_NO_READ_EMPTY_PLTE
#  define PNG_NO_MNG_FEATURES
#  define PNG_NO_FIXED_POINT_SUPPORTED
#endif

/* Ignore attempt to turn off both floating and fixed point support */
#if !defined(PNG_FLOATING_POINT_SUPPORTED) || \
	!defined(PNG_NO_FIXED_POINT_SUPPORTED)
#  define PNG_FIXED_POINT_SUPPORTED
#endif

#ifndef PNG_NO_FREE_ME
#  define PNG_FREE_ME_SUPPORTED
#endif

#if defined(PNG_READ_SUPPORTED)

#if !defined(PNG_READ_TRANSFORMS_NOT_SUPPORTED) && \
	  !defined(PNG_NO_READ_TRANSFORMS)
#  define PNG_READ_TRANSFORMS_SUPPORTED
#endif

#ifdef PNG_READ_TRANSFORMS_SUPPORTED
#  ifndef PNG_NO_READ_EXPAND
#    define PNG_READ_EXPAND_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_SHIFT
#    define PNG_READ_SHIFT_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_PACK
#    define PNG_READ_PACK_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_BGR
#    define PNG_READ_BGR_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_SWAP
#    define PNG_READ_SWAP_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_PACKSWAP
#    define PNG_READ_PACKSWAP_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_INVERT
#    define PNG_READ_INVERT_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_DITHER
#    define PNG_READ_DITHER_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_BACKGROUND
#    define PNG_READ_BACKGROUND_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_16_TO_8
#    define PNG_READ_16_TO_8_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_FILLER
#    define PNG_READ_FILLER_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_GAMMA
#    define PNG_READ_GAMMA_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_GRAY_TO_RGB
#    define PNG_READ_GRAY_TO_RGB_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_SWAP_ALPHA
#    define PNG_READ_SWAP_ALPHA_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_INVERT_ALPHA
#    define PNG_READ_INVERT_ALPHA_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_STRIP_ALPHA
#    define PNG_READ_STRIP_ALPHA_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_USER_TRANSFORM
#    define PNG_READ_USER_TRANSFORM_SUPPORTED
#  endif
#  ifndef PNG_NO_READ_RGB_TO_GRAY
#    define PNG_READ_RGB_TO_GRAY_SUPPORTED
#  endif
#endif /* PNG_READ_TRANSFORMS_SUPPORTED */

#if !defined(PNG_NO_PROGRESSIVE_READ) && \
 !defined(PNG_PROGRESSIVE_READ_SUPPORTED) /* if you don't do progressive   */
#  define PNG_PROGRESSIVE_READ_SUPPORTED  /* reading.  This is not talking */
#endif                            /* about interlacing capability!  You'll */
		   /* still have interlacing unless you change the following line: */

#define PNG_READ_INTERLACING_SUPPORTED /* required in PNG-compliant decoders */

#ifndef PNG_NO_READ_COMPOSITE_NODIV
#  ifndef PNG_NO_READ_COMPOSITED_NODIV  /* libpng-1.0.x misspelling */
#    define PNG_READ_COMPOSITE_NODIV_SUPPORTED  /* well tested on Intel, SGI */
#  endif
#endif

#if defined(PNG_1_0_X) || defined (PNG_1_2_X)
/* Deprecated, will be removed from version 2.0.0.
   Use PNG_MNG_FEATURES_SUPPORTED instead. */
#ifndef PNG_NO_READ_EMPTY_PLTE
#  define PNG_READ_EMPTY_PLTE_SUPPORTED
#endif
#endif

#endif /* PNG_READ_SUPPORTED */

#if defined(PNG_WRITE_SUPPORTED)

# if !defined(PNG_WRITE_TRANSFORMS_NOT_SUPPORTED) && \
	!defined(PNG_NO_WRITE_TRANSFORMS)
#  define PNG_WRITE_TRANSFORMS_SUPPORTED
#endif

#ifdef PNG_WRITE_TRANSFORMS_SUPPORTED
#  ifndef PNG_NO_WRITE_SHIFT
#    define PNG_WRITE_SHIFT_SUPPORTED
#  endif
#  ifndef PNG_NO_WRITE_PACK
#    define PNG_WRITE_PACK_SUPPORTED
#  endif
#  ifndef PNG_NO_WRITE_BGR
#    define PNG_WRITE_BGR_SUPPORTED
#  endif
#  ifndef PNG_NO_WRITE_SWAP
#    define PNG_WRITE_SWAP_SUPPORTED
#  endif
#  ifndef PNG_NO_WRITE_PACKSWAP
#    define PNG_WRITE_PACKSWAP_SUPPORTED
#  endif
#  ifndef PNG_NO_WRITE_INVERT
#    define PNG_WRITE_INVERT_SUPPORTED
#  endif
#  ifndef PNG_NO_WRITE_FILLER
#    define PNG_WRITE_FILLER_SUPPORTED   /* same as WRITE_STRIP_ALPHA */
#  endif
#  ifndef PNG_NO_WRITE_SWAP_ALPHA
#    define PNG_WRITE_SWAP_ALPHA_SUPPORTED
#  endif
#  ifndef PNG_NO_WRITE_INVERT_ALPHA
#    define PNG_WRITE_INVERT_ALPHA_SUPPORTED
#  endif
#  ifndef PNG_NO_WRITE_USER_TRANSFORM
#    define PNG_WRITE_USER_TRANSFORM_SUPPORTED
#  endif
#endif /* PNG_WRITE_TRANSFORMS_SUPPORTED */

#if !defined(PNG_NO_WRITE_INTERLACING_SUPPORTED) && \
	!defined(PNG_WRITE_INTERLACING_SUPPORTED)
#define PNG_WRITE_INTERLACING_SUPPORTED  /* not required for PNG-compliant
											encoders, but can cause trouble
											if left undefined */
#endif

#if !defined(PNG_NO_WRITE_WEIGHTED_FILTER) && \
	!defined(PNG_WRITE_WEIGHTED_FILTER) && \
	 defined(PNG_FLOATING_POINT_SUPPORTED)
#  define PNG_WRITE_WEIGHTED_FILTER_SUPPORTED
#endif

#ifndef PNG_NO_WRITE_FLUSH
#  define PNG_WRITE_FLUSH_SUPPORTED
#endif

#if defined(PNG_1_0_X) || defined (PNG_1_2_X)
/* Deprecated, see PNG_MNG_FEATURES_SUPPORTED, above */
#ifndef PNG_NO_WRITE_EMPTY_PLTE
#  define PNG_WRITE_EMPTY_PLTE_SUPPORTED
#endif
#endif

#endif /* PNG_WRITE_SUPPORTED */

#ifndef PNG_1_0_X
#  ifndef PNG_NO_ERROR_NUMBERS
#    define PNG_ERROR_NUMBERS_SUPPORTED
#  endif
#endif /* PNG_1_0_X */

#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)
#  ifndef PNG_NO_USER_TRANSFORM_PTR
#    define PNG_USER_TRANSFORM_PTR_SUPPORTED
#  endif
#endif

#ifndef PNG_NO_STDIO
#  define PNG_TIME_RFC1123_SUPPORTED
#endif

/* This adds extra functions in pngget.c for accessing data from the
 * info pointer (added in version 0.99)
 * png_get_image_width()
 * png_get_image_height()
 * png_get_bit_depth()
 * png_get_color_type()
 * png_get_compression_type()
 * png_get_filter_type()
 * png_get_interlace_type()
 * png_get_pixel_aspect_ratio()
 * png_get_pixels_per_meter()
 * png_get_x_offset_pixels()
 * png_get_y_offset_pixels()
 * png_get_x_offset_microns()
 * png_get_y_offset_microns()
 */
#if !defined(PNG_NO_EASY_ACCESS) && !defined(PNG_EASY_ACCESS_SUPPORTED)
#  define PNG_EASY_ACCESS_SUPPORTED
#endif

/* PNG_ASSEMBLER_CODE was enabled by default in version 1.2.0
 * and removed from version 1.2.20.  The following will be removed
 * from libpng-1.4.0
*/

#if defined(PNG_READ_SUPPORTED) && !defined(PNG_NO_OPTIMIZED_CODE)
#  ifndef PNG_OPTIMIZED_CODE_SUPPORTED
#    define PNG_OPTIMIZED_CODE_SUPPORTED
#  endif
#endif

#if defined(PNG_READ_SUPPORTED) && !defined(PNG_NO_ASSEMBLER_CODE)
#  ifndef PNG_ASSEMBLER_CODE_SUPPORTED
#    define PNG_ASSEMBLER_CODE_SUPPORTED
#  endif

#  if defined(__GNUC__) && defined(__x86_64__) && (__GNUC__ < 4)
	 /* work around 64-bit gcc compiler bugs in gcc-3.x */
#    if !defined(PNG_MMX_CODE_SUPPORTED) && !defined(PNG_NO_MMX_CODE)
#      define PNG_NO_MMX_CODE
#    endif
#  endif

#  if defined(__APPLE__)
#    if !defined(PNG_MMX_CODE_SUPPORTED) && !defined(PNG_NO_MMX_CODE)
#      define PNG_NO_MMX_CODE
#    endif
#  endif

#  if (defined(__MWERKS__) && ((__MWERKS__ < 0x0900) || macintosh))
#    if !defined(PNG_MMX_CODE_SUPPORTED) && !defined(PNG_NO_MMX_CODE)
#      define PNG_NO_MMX_CODE
#    endif
#  endif

#  if !defined(PNG_MMX_CODE_SUPPORTED) && !defined(PNG_NO_MMX_CODE)
#    define PNG_MMX_CODE_SUPPORTED
#  endif

#endif
/* end of obsolete code to be removed from libpng-1.4.0 */

#if !defined(PNG_1_0_X)
#if !defined(PNG_NO_USER_MEM) && !defined(PNG_USER_MEM_SUPPORTED)
#  define PNG_USER_MEM_SUPPORTED
#endif
#endif /* PNG_1_0_X */

/* Added at libpng-1.2.6 */
#if !defined(PNG_1_0_X)
#ifndef PNG_SET_USER_LIMITS_SUPPORTED
#if !defined(PNG_NO_SET_USER_LIMITS) && !defined(PNG_SET_USER_LIMITS_SUPPORTED)
#  define PNG_SET_USER_LIMITS_SUPPORTED
#endif
#endif
#endif /* PNG_1_0_X */

/* Added at libpng-1.0.16 and 1.2.6.  To accept all valid PNGS no matter
 * how large, set these limits to 0x7fffffffL
 */
#ifndef PNG_USER_WIDTH_MAX
#  define PNG_USER_WIDTH_MAX 1000000L
#endif
#ifndef PNG_USER_HEIGHT_MAX
#  define PNG_USER_HEIGHT_MAX 1000000L
#endif

/* These are currently experimental features, define them if you want */

/* very little testing */
/*
#ifdef PNG_READ_SUPPORTED
#  ifndef PNG_READ_16_TO_8_ACCURATE_SCALE_SUPPORTED
#    define PNG_READ_16_TO_8_ACCURATE_SCALE_SUPPORTED
#  endif
#endif
*/

/* This is only for PowerPC big-endian and 680x0 systems */
/* some testing */
/*
#ifndef PNG_READ_BIG_ENDIAN_SUPPORTED
#  define PNG_READ_BIG_ENDIAN_SUPPORTED
#endif
*/

/* Buggy compilers (e.g., gcc 2.7.2.2) need this */
/*
#define PNG_NO_POINTER_INDEXING
*/

/* These functions are turned off by default, as they will be phased out. */
/*
#define  PNG_USELESS_TESTS_SUPPORTED
#define  PNG_CORRECT_PALETTE_SUPPORTED
*/

/* Any chunks you are not interested in, you can undef here.  The
 * ones that allocate memory may be expecially important (hIST,
 * tEXt, zTXt, tRNS, pCAL).  Others will just save time and make png_info
 * a bit smaller.
 */

#if defined(PNG_READ_SUPPORTED) && \
	!defined(PNG_READ_ANCILLARY_CHUNKS_NOT_SUPPORTED) && \
	!defined(PNG_NO_READ_ANCILLARY_CHUNKS)
#  define PNG_READ_ANCILLARY_CHUNKS_SUPPORTED
#endif

#if defined(PNG_WRITE_SUPPORTED) && \
	!defined(PNG_WRITE_ANCILLARY_CHUNKS_NOT_SUPPORTED) && \
	!defined(PNG_NO_WRITE_ANCILLARY_CHUNKS)
#  define PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED
#endif

#ifdef PNG_READ_ANCILLARY_CHUNKS_SUPPORTED

#ifdef PNG_NO_READ_TEXT
#  define PNG_NO_READ_iTXt
#  define PNG_NO_READ_tEXt
#  define PNG_NO_READ_zTXt
#endif
#ifndef PNG_NO_READ_bKGD
#  define PNG_READ_bKGD_SUPPORTED
#  define PNG_bKGD_SUPPORTED
#endif
#ifndef PNG_NO_READ_cHRM
#  define PNG_READ_cHRM_SUPPORTED
#  define PNG_cHRM_SUPPORTED
#endif
#ifndef PNG_NO_READ_gAMA
#  define PNG_READ_gAMA_SUPPORTED
#  define PNG_gAMA_SUPPORTED
#endif
#ifndef PNG_NO_READ_hIST
#  define PNG_READ_hIST_SUPPORTED
#  define PNG_hIST_SUPPORTED
#endif
#ifndef PNG_NO_READ_iCCP
#  define PNG_READ_iCCP_SUPPORTED
#  define PNG_iCCP_SUPPORTED
#endif
#ifndef PNG_NO_READ_iTXt
#  ifndef PNG_READ_iTXt_SUPPORTED
#    define PNG_READ_iTXt_SUPPORTED
#  endif
#  ifndef PNG_iTXt_SUPPORTED
#    define PNG_iTXt_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_READ_oFFs
#  define PNG_READ_oFFs_SUPPORTED
#  define PNG_oFFs_SUPPORTED
#endif
#ifndef PNG_NO_READ_pCAL
#  define PNG_READ_pCAL_SUPPORTED
#  define PNG_pCAL_SUPPORTED
#endif
#ifndef PNG_NO_READ_sCAL
#  define PNG_READ_sCAL_SUPPORTED
#  define PNG_sCAL_SUPPORTED
#endif
#ifndef PNG_NO_READ_pHYs
#  define PNG_READ_pHYs_SUPPORTED
#  define PNG_pHYs_SUPPORTED
#endif
#ifndef PNG_NO_READ_sBIT
#  define PNG_READ_sBIT_SUPPORTED
#  define PNG_sBIT_SUPPORTED
#endif
#ifndef PNG_NO_READ_sPLT
#  define PNG_READ_sPLT_SUPPORTED
#  define PNG_sPLT_SUPPORTED
#endif
#ifndef PNG_NO_READ_sRGB
#  define PNG_READ_sRGB_SUPPORTED
#  define PNG_sRGB_SUPPORTED
#endif
#ifndef PNG_NO_READ_tEXt
#  define PNG_READ_tEXt_SUPPORTED
#  define PNG_tEXt_SUPPORTED
#endif
#ifndef PNG_NO_READ_tIME
#  define PNG_READ_tIME_SUPPORTED
#  define PNG_tIME_SUPPORTED
#endif
#ifndef PNG_NO_READ_tRNS
#  define PNG_READ_tRNS_SUPPORTED
#  define PNG_tRNS_SUPPORTED
#endif
#ifndef PNG_NO_READ_zTXt
#  define PNG_READ_zTXt_SUPPORTED
#  define PNG_zTXt_SUPPORTED
#endif
#ifndef PNG_NO_READ_UNKNOWN_CHUNKS
#  define PNG_READ_UNKNOWN_CHUNKS_SUPPORTED
#  ifndef PNG_UNKNOWN_CHUNKS_SUPPORTED
#    define PNG_UNKNOWN_CHUNKS_SUPPORTED
#  endif
#  ifndef PNG_NO_HANDLE_AS_UNKNOWN
#    define PNG_HANDLE_AS_UNKNOWN_SUPPORTED
#  endif
#endif
#if !defined(PNG_NO_READ_USER_CHUNKS) && \
	 defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
#  define PNG_READ_USER_CHUNKS_SUPPORTED
#  define PNG_USER_CHUNKS_SUPPORTED
#  ifdef PNG_NO_READ_UNKNOWN_CHUNKS
#    undef PNG_NO_READ_UNKNOWN_CHUNKS
#  endif
#  ifdef PNG_NO_HANDLE_AS_UNKNOWN
#    undef PNG_NO_HANDLE_AS_UNKNOWN
#  endif
#endif
#ifndef PNG_NO_READ_OPT_PLTE
#  define PNG_READ_OPT_PLTE_SUPPORTED /* only affects support of the */
#endif                      /* optional PLTE chunk in RGB and RGBA images */
#if defined(PNG_READ_iTXt_SUPPORTED) || defined(PNG_READ_tEXt_SUPPORTED) || \
	defined(PNG_READ_zTXt_SUPPORTED)
#  define PNG_READ_TEXT_SUPPORTED
#  define PNG_TEXT_SUPPORTED
#endif

#endif /* PNG_READ_ANCILLARY_CHUNKS_SUPPORTED */

#ifdef PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED

#ifdef PNG_NO_WRITE_TEXT
#  define PNG_NO_WRITE_iTXt
#  define PNG_NO_WRITE_tEXt
#  define PNG_NO_WRITE_zTXt
#endif
#ifndef PNG_NO_WRITE_bKGD
#  define PNG_WRITE_bKGD_SUPPORTED
#  ifndef PNG_bKGD_SUPPORTED
#    define PNG_bKGD_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_cHRM
#  define PNG_WRITE_cHRM_SUPPORTED
#  ifndef PNG_cHRM_SUPPORTED
#    define PNG_cHRM_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_gAMA
#  define PNG_WRITE_gAMA_SUPPORTED
#  ifndef PNG_gAMA_SUPPORTED
#    define PNG_gAMA_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_hIST
#  define PNG_WRITE_hIST_SUPPORTED
#  ifndef PNG_hIST_SUPPORTED
#    define PNG_hIST_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_iCCP
#  define PNG_WRITE_iCCP_SUPPORTED
#  ifndef PNG_iCCP_SUPPORTED
#    define PNG_iCCP_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_iTXt
#  ifndef PNG_WRITE_iTXt_SUPPORTED
#    define PNG_WRITE_iTXt_SUPPORTED
#  endif
#  ifndef PNG_iTXt_SUPPORTED
#    define PNG_iTXt_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_oFFs
#  define PNG_WRITE_oFFs_SUPPORTED
#  ifndef PNG_oFFs_SUPPORTED
#    define PNG_oFFs_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_pCAL
#  define PNG_WRITE_pCAL_SUPPORTED
#  ifndef PNG_pCAL_SUPPORTED
#    define PNG_pCAL_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_sCAL
#  define PNG_WRITE_sCAL_SUPPORTED
#  ifndef PNG_sCAL_SUPPORTED
#    define PNG_sCAL_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_pHYs
#  define PNG_WRITE_pHYs_SUPPORTED
#  ifndef PNG_pHYs_SUPPORTED
#    define PNG_pHYs_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_sBIT
#  define PNG_WRITE_sBIT_SUPPORTED
#  ifndef PNG_sBIT_SUPPORTED
#    define PNG_sBIT_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_sPLT
#  define PNG_WRITE_sPLT_SUPPORTED
#  ifndef PNG_sPLT_SUPPORTED
#    define PNG_sPLT_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_sRGB
#  define PNG_WRITE_sRGB_SUPPORTED
#  ifndef PNG_sRGB_SUPPORTED
#    define PNG_sRGB_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_tEXt
#  define PNG_WRITE_tEXt_SUPPORTED
#  ifndef PNG_tEXt_SUPPORTED
#    define PNG_tEXt_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_tIME
#  define PNG_WRITE_tIME_SUPPORTED
#  ifndef PNG_tIME_SUPPORTED
#    define PNG_tIME_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_tRNS
#  define PNG_WRITE_tRNS_SUPPORTED
#  ifndef PNG_tRNS_SUPPORTED
#    define PNG_tRNS_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_zTXt
#  define PNG_WRITE_zTXt_SUPPORTED
#  ifndef PNG_zTXt_SUPPORTED
#    define PNG_zTXt_SUPPORTED
#  endif
#endif
#ifndef PNG_NO_WRITE_UNKNOWN_CHUNKS
#  define PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED
#  ifndef PNG_UNKNOWN_CHUNKS_SUPPORTED
#    define PNG_UNKNOWN_CHUNKS_SUPPORTED
#  endif
#  ifndef PNG_NO_HANDLE_AS_UNKNOWN
#     ifndef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
#       define PNG_HANDLE_AS_UNKNOWN_SUPPORTED
#     endif
#  endif
#endif
#if defined(PNG_WRITE_iTXt_SUPPORTED) || defined(PNG_WRITE_tEXt_SUPPORTED) || \
	defined(PNG_WRITE_zTXt_SUPPORTED)
#  define PNG_WRITE_TEXT_SUPPORTED
#  ifndef PNG_TEXT_SUPPORTED
#    define PNG_TEXT_SUPPORTED
#  endif
#endif

#endif /* PNG_WRITE_ANCILLARY_CHUNKS_SUPPORTED */

/* Turn this off to disable png_read_png() and
 * png_write_png() and leave the row_pointers member
 * out of the info structure.
 */
#ifndef PNG_NO_INFO_IMAGE
#  define PNG_INFO_IMAGE_SUPPORTED
#endif

/* need the time information for reading tIME chunks */
#if defined(PNG_tIME_SUPPORTED)
#  if !defined(_WIN32_WCE)
	 /* "time.h" functions are not supported on WindowsCE */
#    include <time.h>
#  endif
#endif

/* Some typedefs to get us started.  These should be safe on most of the
 * common platforms.  The typedefs should be at least as large as the
 * numbers suggest (a png_uint_32 must be at least 32 bits long), but they
 * don't have to be exactly that size.  Some compilers dislike passing
 * unsigned shorts as function parameters, so you may be better off using
 * unsigned int for png_uint_16.  Likewise, for 64-bit systems, you may
 * want to have unsigned int for png_uint_32 instead of unsigned long.
 */

typedef unsigned long png_uint_32;
typedef long png_int_32;
typedef unsigned short png_uint_16;
typedef short png_int_16;
typedef unsigned char png_byte;

/* This is usually size_t.  It is typedef'ed just in case you need it to
   change (I'm not sure if you will or not, so I thought I'd be safe) */
#ifdef PNG_SIZE_T
   typedef PNG_SIZE_T png_size_t;
#  define png_sizeof(x) png_convert_size(sizeof (x))
#else
   typedef size_t png_size_t;
#  define png_sizeof(x) sizeof (x)
#endif

/* The following is needed for medium model support.  It cannot be in the
 * PNG_INTERNAL section.  Needs modification for other compilers besides
 * MSC.  Model independent support declares all arrays and pointers to be
 * large using the far keyword.  The zlib version used must also support
 * model independent data.  As of version zlib 1.0.4, the necessary changes
 * have been made in zlib.  The USE_FAR_KEYWORD define triggers other
 * changes that are needed. (Tim Wegner)
 */

/* Separate compiler dependencies (problem here is that zlib.h always
   defines FAR. (SJT) */
#ifdef __BORLANDC__
#  if defined(__LARGE__) || defined(__HUGE__) || defined(__COMPACT__)
#    define LDATA 1
#  else
#    define LDATA 0
#  endif
   /* GRR:  why is Cygwin in here?  Cygwin is not Borland C... */
#  if !defined(__WIN32__) && !defined(__FLAT__) && !defined(__CYGWIN__)
#    define PNG_MAX_MALLOC_64K
#    if (LDATA != 1)
#      ifndef FAR
#        define FAR __far
#      endif
#      define USE_FAR_KEYWORD
#    endif   /* LDATA != 1 */
	 /* Possibly useful for moving data out of default segment.
	  * Uncomment it if you want. Could also define FARDATA as
	  * const if your compiler supports it. (SJT)
#    define FARDATA FAR
	  */
#  endif  /* __WIN32__, __FLAT__, __CYGWIN__ */
#endif   /* __BORLANDC__ */

/* Suggest testing for specific compiler first before testing for
 * FAR.  The Watcom compiler defines both __MEDIUM__ and M_I86MM,
 * making reliance oncertain keywords suspect. (SJT)
 */

/* MSC Medium model */
#if defined(FAR)
#  if defined(M_I86MM)
#    define USE_FAR_KEYWORD
#    define FARDATA FAR
#    include <dos.h>
#  endif
#endif

/* SJT: default case */
#ifndef FAR
#  define FAR
#endif

/* At this point FAR is always defined */
#ifndef FARDATA
#  define FARDATA
#endif

/* Typedef for floating-point numbers that are converted
   to fixed-point with a multiple of 100,000, e.g., int_gamma */
typedef png_int_32 png_fixed_point;

/* Add typedefs for pointers */
typedef void            FAR * png_voidp;
typedef png_byte        FAR * png_bytep;
typedef png_uint_32     FAR * png_uint_32p;
typedef png_int_32      FAR * png_int_32p;
typedef png_uint_16     FAR * png_uint_16p;
typedef png_int_16      FAR * png_int_16p;
typedef PNG_CONST char  FAR * png_const_charp;
typedef char            FAR * png_charp;
typedef png_fixed_point FAR * png_fixed_point_p;

#ifndef PNG_NO_STDIO
#if defined(_WIN32_WCE)
typedef HANDLE                png_FILE_p;
#else
typedef FILE                * png_FILE_p;
#endif
#endif

#ifdef PNG_FLOATING_POINT_SUPPORTED
typedef double          FAR * png_doublep;
#endif

/* Pointers to pointers; i.e. arrays */
typedef png_byte        FAR * FAR * png_bytepp;
typedef png_uint_32     FAR * FAR * png_uint_32pp;
typedef png_int_32      FAR * FAR * png_int_32pp;
typedef png_uint_16     FAR * FAR * png_uint_16pp;
typedef png_int_16      FAR * FAR * png_int_16pp;
typedef PNG_CONST char  FAR * FAR * png_const_charpp;
typedef char            FAR * FAR * png_charpp;
typedef png_fixed_point FAR * FAR * png_fixed_point_pp;
#ifdef PNG_FLOATING_POINT_SUPPORTED
typedef double          FAR * FAR * png_doublepp;
#endif

/* Pointers to pointers to pointers; i.e., pointer to array */
typedef char            FAR * FAR * FAR * png_charppp;

#if 0
/* SPC -  Is this stuff deprecated? */
/* It'll be removed as of libpng-1.3.0 - GR-P */
/* libpng typedefs for types in zlib. If zlib changes
 * or another compression library is used, then change these.
 * Eliminates need to change all the source files.
 */
typedef charf *         png_zcharp;
typedef charf * FAR *   png_zcharpp;
typedef z_stream FAR *  png_zstreamp;
#endif /* (PNG_1_0_X) || defined(PNG_1_2_X) */

/*
 * Define PNG_BUILD_DLL if the module being built is a Windows
 * LIBPNG DLL.
 *
 * Define PNG_USE_DLL if you want to *link* to the Windows LIBPNG DLL.
 * It is equivalent to Microsoft predefined macro _DLL that is
 * automatically defined when you compile using the share
 * version of the CRT (C Run-Time library)
 *
 * The cygwin mods make this behavior a little different:
 * Define PNG_BUILD_DLL if you are building a dll for use with cygwin
 * Define PNG_STATIC if you are building a static library for use with cygwin,
 *   -or- if you are building an application that you want to link to the
 *   static library.
 * PNG_USE_DLL is defined by default (no user action needed) unless one of
 *   the other flags is defined.
 */

#if !defined(PNG_DLL) && (defined(PNG_BUILD_DLL) || defined(PNG_USE_DLL))
#  define PNG_DLL
#endif
/* If CYGWIN, then disallow GLOBAL ARRAYS unless building a static lib.
 * When building a static lib, default to no GLOBAL ARRAYS, but allow
 * command-line override
 */
#if defined(__CYGWIN__)
#  if !defined(PNG_STATIC)
#    if defined(PNG_USE_GLOBAL_ARRAYS)
#      undef PNG_USE_GLOBAL_ARRAYS
#    endif
#    if !defined(PNG_USE_LOCAL_ARRAYS)
#      define PNG_USE_LOCAL_ARRAYS
#    endif
#  else
#    if defined(PNG_USE_LOCAL_ARRAYS) || defined(PNG_NO_GLOBAL_ARRAYS)
#      if defined(PNG_USE_GLOBAL_ARRAYS)
#        undef PNG_USE_GLOBAL_ARRAYS
#      endif
#    endif
#  endif
#  if !defined(PNG_USE_LOCAL_ARRAYS) && !defined(PNG_USE_GLOBAL_ARRAYS)
#    define PNG_USE_LOCAL_ARRAYS
#  endif
#endif

/* Do not use global arrays (helps with building DLL's)
 * They are no longer used in libpng itself, since version 1.0.5c,
 * but might be required for some pre-1.0.5c applications.
 */
#if !defined(PNG_USE_LOCAL_ARRAYS) && !defined(PNG_USE_GLOBAL_ARRAYS)
#  if defined(PNG_NO_GLOBAL_ARRAYS) || \
	  (defined(__GNUC__) && defined(PNG_DLL)) || defined(_MSC_VER)
#    define PNG_USE_LOCAL_ARRAYS
#  else
#    define PNG_USE_GLOBAL_ARRAYS
#  endif
#endif

#if defined(__CYGWIN__)
#  undef PNGAPI
#  define PNGAPI __cdecl
#  undef PNG_IMPEXP
#  define PNG_IMPEXP
#endif

/* If you define PNGAPI, e.g., with compiler option "-DPNGAPI=__stdcall",
 * you may get warnings regarding the linkage of png_zalloc and png_zfree.
 * Don't ignore those warnings; you must also reset the default calling
 * convention in your compiler to match your PNGAPI, and you must build
 * zlib and your applications the same way you build libpng.
 */

#if defined(__MINGW32__) && !defined(PNG_MODULEDEF)
#  ifndef PNG_NO_MODULEDEF
#    define PNG_NO_MODULEDEF
#  endif
#endif

#if !defined(PNG_IMPEXP) && defined(PNG_BUILD_DLL) && !defined(PNG_NO_MODULEDEF)
#  define PNG_IMPEXP
#endif

#if defined(PNG_DLL) || defined(_DLL) || defined(__DLL__ ) || \
	(( defined(_Windows) || defined(_WINDOWS) || \
	   defined(WIN32) || defined(_WIN32) || defined(__WIN32__) ))

#  ifndef PNGAPI
#     if defined(__GNUC__) || (defined (_MSC_VER) && (_MSC_VER >= 800))
#        define PNGAPI __cdecl
#     else
#        define PNGAPI _cdecl
#     endif
#  endif

#  if !defined(PNG_IMPEXP) && (!defined(PNG_DLL) || \
	   0 /* WINCOMPILER_WITH_NO_SUPPORT_FOR_DECLIMPEXP */)
#     define PNG_IMPEXP
#  endif

#  if !defined(PNG_IMPEXP)

#     define PNG_EXPORT_TYPE1(type,symbol)  PNG_IMPEXP type PNGAPI symbol
#     define PNG_EXPORT_TYPE2(type,symbol)  type PNG_IMPEXP PNGAPI symbol

	  /* Borland/Microsoft */
#     if defined(_MSC_VER) || defined(__BORLANDC__)
#        if (_MSC_VER >= 800) || (__BORLANDC__ >= 0x500)
#           define PNG_EXPORT PNG_EXPORT_TYPE1
#        else
#           define PNG_EXPORT PNG_EXPORT_TYPE2
#           if defined(PNG_BUILD_DLL)
#              define PNG_IMPEXP __export
#           else
#              define PNG_IMPEXP /*__import */ /* doesn't exist AFAIK in
												 VC++ */
#           endif                             /* Exists in Borland C++ for
												 C++ classes (== huge) */
#        endif
#     endif

#     if !defined(PNG_IMPEXP)
#        if defined(PNG_BUILD_DLL)
#           define PNG_IMPEXP __declspec(dllexport)
#        else
#           define PNG_IMPEXP __declspec(dllimport)
#        endif
#     endif
#  endif  /* PNG_IMPEXP */
#else /* !(DLL || non-cygwin WINDOWS) */
#   if (defined(__IBMC__) || defined(__IBMCPP__)) && defined(__OS2__)
#      ifndef PNGAPI
#         define PNGAPI _System
#      endif
#   else
#      if 0 /* ... other platforms, with other meanings */
#      endif
#   endif
#endif

#ifndef PNGAPI
#  define PNGAPI
#endif
#ifndef PNG_IMPEXP
#  define PNG_IMPEXP
#endif

#ifdef PNG_BUILDSYMS
#  ifndef PNG_EXPORT
#    define PNG_EXPORT(type,symbol) PNG_FUNCTION_EXPORT symbol END
#  endif
#  ifdef PNG_USE_GLOBAL_ARRAYS
#    ifndef PNG_EXPORT_VAR
#      define PNG_EXPORT_VAR(type) PNG_DATA_EXPORT
#    endif
#  endif
#endif

#ifndef PNG_EXPORT
#  define PNG_EXPORT(type,symbol) PNG_IMPEXP type PNGAPI symbol
#endif

#ifdef PNG_USE_GLOBAL_ARRAYS
#  ifndef PNG_EXPORT_VAR
#    define PNG_EXPORT_VAR(type) extern PNG_IMPEXP type
#  endif
#endif

/* User may want to use these so they are not in PNG_INTERNAL. Any library
 * functions that are passed far data must be model independent.
 */

#ifndef PNG_ABORT
#  define PNG_ABORT() abort()
#endif

#ifdef PNG_SETJMP_SUPPORTED
#  define png_jmpbuf(png_ptr) ((png_ptr)->jmpbuf)
#else
#  define png_jmpbuf(png_ptr) \
   (LIBPNG_WAS_COMPILED_WITH__PNG_SETJMP_NOT_SUPPORTED)
#endif

#if defined(USE_FAR_KEYWORD)  /* memory model independent fns */
/* use this to make far-to-near assignments */
#  define CHECK   1
#  define NOCHECK 0
#  define CVT_PTR(ptr) (png_far_to_near(png_ptr,ptr,CHECK))
#  define CVT_PTR_NOCHECK(ptr) (png_far_to_near(png_ptr,ptr,NOCHECK))
#  define png_snprintf _fsnprintf   /* Added to v 1.2.19 */
#  define png_strcpy  _fstrcpy
#  define png_strncpy _fstrncpy   /* Added to v 1.2.6 */
#  define png_strlen  _fstrlen
#  define png_memcmp  _fmemcmp    /* SJT: added */
#  define png_memcpy  _fmemcpy
#  define png_memset  _fmemset
#else /* use the usual functions */
#  define CVT_PTR(ptr)         (ptr)
#  define CVT_PTR_NOCHECK(ptr) (ptr)
#  ifndef PNG_NO_SNPRINTF
#    ifdef _MSC_VER
#      define png_snprintf _snprintf   /* Added to v 1.2.19 */
#      define png_snprintf2 _snprintf
#      define png_snprintf6 _snprintf
#    else
#      define png_snprintf snprintf   /* Added to v 1.2.19 */
#      define png_snprintf2 snprintf
#      define png_snprintf6 snprintf
#    endif
#  else
	 /* You don't have or don't want to use snprintf().  Caution: Using
	  * sprintf instead of snprintf exposes your application to accidental
	  * or malevolent buffer overflows.  If you don't have snprintf()
	  * as a general rule you should provide one (you can get one from
	  * Portable OpenSSH). */
#    define png_snprintf(s1,n,fmt,x1) sprintf(s1,fmt,x1)
#    define png_snprintf2(s1,n,fmt,x1,x2) sprintf(s1,fmt,x1,x2)
#    define png_snprintf6(s1,n,fmt,x1,x2,x3,x4,x5,x6) \
		sprintf(s1,fmt,x1,x2,x3,x4,x5,x6)
#  endif
#  define png_strcpy  strcpy
#  define png_strncpy strncpy     /* Added to v 1.2.6 */
#  define png_strlen  strlen
#  define png_memcmp  memcmp      /* SJT: added */
#  define png_memcpy  memcpy
#  define png_memset  memset
#endif
/* End of memory model independent support */

/* Just a little check that someone hasn't tried to define something
 * contradictory.
 */
#if (PNG_ZBUF_SIZE > 65536L) && defined(PNG_MAX_MALLOC_64K)
#  undef PNG_ZBUF_SIZE
#  define PNG_ZBUF_SIZE 65536L
#endif

/* Added at libpng-1.2.8 */
#endif /* PNG_VERSION_INFO_ONLY */

#endif /* PNGCONF_H */

/*** End of inlined file: pngconf.h ***/


#ifdef _MSC_VER
 #pragma warning (disable: 4996 4100)
#endif

/*
 * Added at libpng-1.2.8 */
/* Ref MSDN: Private as priority over Special
 * VS_FF_PRIVATEBUILD File *was not* built using standard release
 * procedures. If this value is given, the StringFileInfo block must
 * contain a PrivateBuild string.
 *
 * VS_FF_SPECIALBUILD File *was* built by the original company using
 * standard release procedures but is a variation of the standard
 * file of the same version number. If this value is given, the
 * StringFileInfo block must contain a SpecialBuild string.
 */

#if defined(PNG_USER_PRIVATEBUILD)
#  define PNG_LIBPNG_BUILD_TYPE \
		  (PNG_LIBPNG_BUILD_BASE_TYPE | PNG_LIBPNG_BUILD_PRIVATE)
#else
#  if defined(PNG_LIBPNG_SPECIALBUILD)
#    define PNG_LIBPNG_BUILD_TYPE \
			(PNG_LIBPNG_BUILD_BASE_TYPE | PNG_LIBPNG_BUILD_SPECIAL)
#  else
#    define PNG_LIBPNG_BUILD_TYPE (PNG_LIBPNG_BUILD_BASE_TYPE)
#  endif
#endif

#ifndef PNG_VERSION_INFO_ONLY

/* Inhibit C++ name-mangling for libpng functions but not for system calls. */
#ifdef __cplusplus
//extern "C" {
#endif /* __cplusplus */

/* This file is arranged in several sections.  The first section contains
 * structure and type definitions.  The second section contains the external
 * library functions, while the third has the internal library functions,
 * which applications aren't expected to use directly.
 */

#ifndef PNG_NO_TYPECAST_NULL
#define int_p_NULL                (int *)NULL
#define png_bytep_NULL            (png_bytep)NULL
#define png_bytepp_NULL           (png_bytepp)NULL
#define png_doublep_NULL          (png_doublep)NULL
#define png_error_ptr_NULL        (png_error_ptr)NULL
#define png_flush_ptr_NULL        (png_flush_ptr)NULL
#define png_free_ptr_NULL         (png_free_ptr)NULL
#define png_infopp_NULL           (png_infopp)NULL
#define png_malloc_ptr_NULL       (png_malloc_ptr)NULL
#define png_read_status_ptr_NULL  (png_read_status_ptr)NULL
#define png_rw_ptr_NULL           (png_rw_ptr)NULL
#define png_structp_NULL          (png_structp)NULL
#define png_uint_16p_NULL         (png_uint_16p)NULL
#define png_voidp_NULL            (png_voidp)NULL
#define png_write_status_ptr_NULL (png_write_status_ptr)NULL
#else
#define int_p_NULL                NULL
#define png_bytep_NULL            NULL
#define png_bytepp_NULL           NULL
#define png_doublep_NULL          NULL
#define png_error_ptr_NULL        NULL
#define png_flush_ptr_NULL        NULL
#define png_free_ptr_NULL         NULL
#define png_infopp_NULL           NULL
#define png_malloc_ptr_NULL       NULL
#define png_read_status_ptr_NULL  NULL
#define png_rw_ptr_NULL           NULL
#define png_structp_NULL          NULL
#define png_uint_16p_NULL         NULL
#define png_voidp_NULL            NULL
#define png_write_status_ptr_NULL NULL
#endif

/* variables declared in png.c - only it needs to define PNG_NO_EXTERN */
#if !defined(PNG_NO_EXTERN) || defined(PNG_ALWAYS_EXTERN)
/* Version information for C files, stored in png.c.  This had better match
 * the version above.
 */
#ifdef PNG_USE_GLOBAL_ARRAYS
PNG_EXPORT_VAR (PNG_CONST char) png_libpng_ver[18];
  /* need room for 99.99.99beta99z */
#else
#define png_libpng_ver png_get_header_ver(NULL)
#endif

#ifdef PNG_USE_GLOBAL_ARRAYS
/* This was removed in version 1.0.5c */
/* Structures to facilitate easy interlacing.  See png.c for more details */
PNG_EXPORT_VAR (PNG_CONST int FARDATA) png_pass_start[7];
PNG_EXPORT_VAR (PNG_CONST int FARDATA) png_pass_inc[7];
PNG_EXPORT_VAR (PNG_CONST int FARDATA) png_pass_ystart[7];
PNG_EXPORT_VAR (PNG_CONST int FARDATA) png_pass_yinc[7];
PNG_EXPORT_VAR (PNG_CONST int FARDATA) png_pass_mask[7];
PNG_EXPORT_VAR (PNG_CONST int FARDATA) png_pass_dsp_mask[7];
/* This isn't currently used.  If you need it, see png.c for more details.
PNG_EXPORT_VAR (PNG_CONST int FARDATA) png_pass_height[7];
*/
#endif

#endif /* PNG_NO_EXTERN */

/* Three color definitions.  The order of the red, green, and blue, (and the
 * exact size) is not important, although the size of the fields need to
 * be png_byte or png_uint_16 (as defined below).
 */
typedef struct png_color_struct
{
   png_byte red;
   png_byte green;
   png_byte blue;
} png_color;
typedef png_color FAR * png_colorp;
typedef png_color FAR * FAR * png_colorpp;

typedef struct png_color_16_struct
{
   png_byte index;    /* used for palette files */
   png_uint_16 red;   /* for use in red green blue files */
   png_uint_16 green;
   png_uint_16 blue;
   png_uint_16 gray;  /* for use in grayscale files */
} png_color_16;
typedef png_color_16 FAR * png_color_16p;
typedef png_color_16 FAR * FAR * png_color_16pp;

typedef struct png_color_8_struct
{
   png_byte red;   /* for use in red green blue files */
   png_byte green;
   png_byte blue;
   png_byte gray;  /* for use in grayscale files */
   png_byte alpha; /* for alpha channel files */
} png_color_8;
typedef png_color_8 FAR * png_color_8p;
typedef png_color_8 FAR * FAR * png_color_8pp;

/*
 * The following two structures are used for the in-core representation
 * of sPLT chunks.
 */
typedef struct png_sPLT_entry_struct
{
   png_uint_16 red;
   png_uint_16 green;
   png_uint_16 blue;
   png_uint_16 alpha;
   png_uint_16 frequency;
} png_sPLT_entry;
typedef png_sPLT_entry FAR * png_sPLT_entryp;
typedef png_sPLT_entry FAR * FAR * png_sPLT_entrypp;

/*  When the depth of the sPLT palette is 8 bits, the color and alpha samples
 *  occupy the LSB of their respective members, and the MSB of each member
 *  is zero-filled.  The frequency member always occupies the full 16 bits.
 */

typedef struct png_sPLT_struct
{
   png_charp name;           /* palette name */
   png_byte depth;           /* depth of palette samples */
   png_sPLT_entryp entries;  /* palette entries */
   png_int_32 nentries;      /* number of palette entries */
} png_sPLT_t;
typedef png_sPLT_t FAR * png_sPLT_tp;
typedef png_sPLT_t FAR * FAR * png_sPLT_tpp;

#ifdef PNG_TEXT_SUPPORTED
/* png_text holds the contents of a text/ztxt/itxt chunk in a PNG file,
 * and whether that contents is compressed or not.  The "key" field
 * points to a regular zero-terminated C string.  The "text", "lang", and
 * "lang_key" fields can be regular C strings, empty strings, or NULL pointers.
 * However, the * structure returned by png_get_text() will always contain
 * regular zero-terminated C strings (possibly empty), never NULL pointers,
 * so they can be safely used in printf() and other string-handling functions.
 */
typedef struct png_text_struct
{
   int  compression;       /* compression value:
							 -1: tEXt, none
							  0: zTXt, deflate
							  1: iTXt, none
							  2: iTXt, deflate  */
   png_charp key;          /* keyword, 1-79 character description of "text" */
   png_charp text;         /* comment, may be an empty string (ie "")
							  or a NULL pointer */
   png_size_t text_length; /* length of the text string */
#ifdef PNG_iTXt_SUPPORTED
   png_size_t itxt_length; /* length of the itxt string */
   png_charp lang;         /* language code, 0-79 characters
							  or a NULL pointer */
   png_charp lang_key;     /* keyword translated UTF-8 string, 0 or more
							  chars or a NULL pointer */
#endif
} png_text;
typedef png_text FAR * png_textp;
typedef png_text FAR * FAR * png_textpp;
#endif

/* Supported compression types for text in PNG files (tEXt, and zTXt).
 * The values of the PNG_TEXT_COMPRESSION_ defines should NOT be changed. */
#define PNG_TEXT_COMPRESSION_NONE_WR -3
#define PNG_TEXT_COMPRESSION_zTXt_WR -2
#define PNG_TEXT_COMPRESSION_NONE    -1
#define PNG_TEXT_COMPRESSION_zTXt     0
#define PNG_ITXT_COMPRESSION_NONE     1
#define PNG_ITXT_COMPRESSION_zTXt     2
#define PNG_TEXT_COMPRESSION_LAST     3  /* Not a valid value */

/* png_time is a way to hold the time in an machine independent way.
 * Two conversions are provided, both from time_t and struct tm.  There
 * is no portable way to convert to either of these structures, as far
 * as I know.  If you know of a portable way, send it to me.  As a side
 * note - PNG has always been Year 2000 compliant!
 */
typedef struct png_time_struct
{
   png_uint_16 year; /* full year, as in, 1995 */
   png_byte month;   /* month of year, 1 - 12 */
   png_byte day;     /* day of month, 1 - 31 */
   png_byte hour;    /* hour of day, 0 - 23 */
   png_byte minute;  /* minute of hour, 0 - 59 */
   png_byte second;  /* second of minute, 0 - 60 (for leap seconds) */
} png_time;
typedef png_time FAR * png_timep;
typedef png_time FAR * FAR * png_timepp;

#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
/* png_unknown_chunk is a structure to hold queued chunks for which there is
 * no specific support.  The idea is that we can use this to queue
 * up private chunks for output even though the library doesn't actually
 * know about their semantics.
 */
typedef struct png_unknown_chunk_t
{
	png_byte name[5];
	png_byte *data;
	png_size_t size;

	/* libpng-using applications should NOT directly modify this byte. */
	png_byte location; /* mode of operation at read time */
}
png_unknown_chunk;
typedef png_unknown_chunk FAR * png_unknown_chunkp;
typedef png_unknown_chunk FAR * FAR * png_unknown_chunkpp;
#endif

/* png_info is a structure that holds the information in a PNG file so
 * that the application can find out the characteristics of the image.
 * If you are reading the file, this structure will tell you what is
 * in the PNG file.  If you are writing the file, fill in the information
 * you want to put into the PNG file, then call png_write_info().
 * The names chosen should be very close to the PNG specification, so
 * consult that document for information about the meaning of each field.
 *
 * With libpng < 0.95, it was only possible to directly set and read the
 * the values in the png_info_struct, which meant that the contents and
 * order of the values had to remain fixed.  With libpng 0.95 and later,
 * however, there are now functions that abstract the contents of
 * png_info_struct from the application, so this makes it easier to use
 * libpng with dynamic libraries, and even makes it possible to use
 * libraries that don't have all of the libpng ancillary chunk-handing
 * functionality.
 *
 * In any case, the order of the parameters in png_info_struct should NOT
 * be changed for as long as possible to keep compatibility with applications
 * that use the old direct-access method with png_info_struct.
 *
 * The following members may have allocated storage attached that should be
 * cleaned up before the structure is discarded: palette, trans, text,
 * pcal_purpose, pcal_units, pcal_params, hist, iccp_name, iccp_profile,
 * splt_palettes, scal_unit, row_pointers, and unknowns.   By default, these
 * are automatically freed when the info structure is deallocated, if they were
 * allocated internally by libpng.  This behavior can be changed by means
 * of the png_data_freer() function.
 *
 * More allocation details: all the chunk-reading functions that
 * change these members go through the corresponding png_set_*
 * functions.  A function to clear these members is available: see
 * png_free_data().  The png_set_* functions do not depend on being
 * able to point info structure members to any of the storage they are
 * passed (they make their own copies), EXCEPT that the png_set_text
 * functions use the same storage passed to them in the text_ptr or
 * itxt_ptr structure argument, and the png_set_rows and png_set_unknowns
 * functions do not make their own copies.
 */
typedef struct png_info_struct
{
   /* the following are necessary for every PNG file */
   png_uint_32 width;       /* width of image in pixels (from IHDR) */
   png_uint_32 height;      /* height of image in pixels (from IHDR) */
   png_uint_32 valid;       /* valid chunk data (see PNG_INFO_ below) */
   png_uint_32 rowbytes;    /* bytes needed to hold an untransformed row */
   png_colorp palette;      /* array of color values (valid & PNG_INFO_PLTE) */
   png_uint_16 num_palette; /* number of color entries in "palette" (PLTE) */
   png_uint_16 num_trans;   /* number of transparent palette color (tRNS) */
   png_byte bit_depth;      /* 1, 2, 4, 8, or 16 bits/channel (from IHDR) */
   png_byte color_type;     /* see PNG_COLOR_TYPE_ below (from IHDR) */
   /* The following three should have been named *_method not *_type */
   png_byte compression_type; /* must be PNG_COMPRESSION_TYPE_BASE (IHDR) */
   png_byte filter_type;    /* must be PNG_FILTER_TYPE_BASE (from IHDR) */
   png_byte interlace_type; /* One of PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7 */

   /* The following is informational only on read, and not used on writes. */
   png_byte channels;       /* number of data channels per pixel (1, 2, 3, 4) */
   png_byte pixel_depth;    /* number of bits per pixel */
   png_byte spare_byte;     /* to align the data, and for future use */
   png_byte signature[8];   /* magic bytes read by libpng from start of file */

   /* The rest of the data is optional.  If you are reading, check the
	* valid field to see if the information in these are valid.  If you
	* are writing, set the valid field to those chunks you want written,
	* and initialize the appropriate fields below.
	*/

#if defined(PNG_gAMA_SUPPORTED) && defined(PNG_FLOATING_POINT_SUPPORTED)
   /* The gAMA chunk describes the gamma characteristics of the system
	* on which the image was created, normally in the range [1.0, 2.5].
	* Data is valid if (valid & PNG_INFO_gAMA) is non-zero.
	*/
   float gamma; /* gamma value of image, if (valid & PNG_INFO_gAMA) */
#endif

#if defined(PNG_sRGB_SUPPORTED)
	/* GR-P, 0.96a */
	/* Data valid if (valid & PNG_INFO_sRGB) non-zero. */
   png_byte srgb_intent; /* sRGB rendering intent [0, 1, 2, or 3] */
#endif

#if defined(PNG_TEXT_SUPPORTED)
   /* The tEXt, and zTXt chunks contain human-readable textual data in
	* uncompressed, compressed, and optionally compressed forms, respectively.
	* The data in "text" is an array of pointers to uncompressed,
	* null-terminated C strings. Each chunk has a keyword that describes the
	* textual data contained in that chunk.  Keywords are not required to be
	* unique, and the text string may be empty.  Any number of text chunks may
	* be in an image.
	*/
   int num_text; /* number of comments read/to write */
   int max_text; /* current size of text array */
   png_textp text; /* array of comments read/to write */
#endif /* PNG_TEXT_SUPPORTED */

#if defined(PNG_tIME_SUPPORTED)
   /* The tIME chunk holds the last time the displayed image data was
	* modified.  See the png_time struct for the contents of this struct.
	*/
   png_time mod_time;
#endif

#if defined(PNG_sBIT_SUPPORTED)
   /* The sBIT chunk specifies the number of significant high-order bits
	* in the pixel data.  Values are in the range [1, bit_depth], and are
	* only specified for the channels in the pixel data.  The contents of
	* the low-order bits is not specified.  Data is valid if
	* (valid & PNG_INFO_sBIT) is non-zero.
	*/
   png_color_8 sig_bit; /* significant bits in color channels */
#endif

#if defined(PNG_tRNS_SUPPORTED) || defined(PNG_READ_EXPAND_SUPPORTED) || \
defined(PNG_READ_BACKGROUND_SUPPORTED)
   /* The tRNS chunk supplies transparency data for paletted images and
	* other image types that don't need a full alpha channel.  There are
	* "num_trans" transparency values for a paletted image, stored in the
	* same order as the palette colors, starting from index 0.  Values
	* for the data are in the range [0, 255], ranging from fully transparent
	* to fully opaque, respectively.  For non-paletted images, there is a
	* single color specified that should be treated as fully transparent.
	* Data is valid if (valid & PNG_INFO_tRNS) is non-zero.
	*/
   png_bytep trans; /* transparent values for paletted image */
   png_color_16 trans_values; /* transparent color for non-palette image */
#endif

#if defined(PNG_bKGD_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
   /* The bKGD chunk gives the suggested image background color if the
	* display program does not have its own background color and the image
	* is needs to composited onto a background before display.  The colors
	* in "background" are normally in the same color space/depth as the
	* pixel data.  Data is valid if (valid & PNG_INFO_bKGD) is non-zero.
	*/
   png_color_16 background;
#endif

#if defined(PNG_oFFs_SUPPORTED)
   /* The oFFs chunk gives the offset in "offset_unit_type" units rightwards
	* and downwards from the top-left corner of the display, page, or other
	* application-specific co-ordinate space.  See the PNG_OFFSET_ defines
	* below for the unit types.  Valid if (valid & PNG_INFO_oFFs) non-zero.
	*/
   png_int_32 x_offset; /* x offset on page */
   png_int_32 y_offset; /* y offset on page */
   png_byte offset_unit_type; /* offset units type */
#endif

#if defined(PNG_pHYs_SUPPORTED)
   /* The pHYs chunk gives the physical pixel density of the image for
	* display or printing in "phys_unit_type" units (see PNG_RESOLUTION_
	* defines below).  Data is valid if (valid & PNG_INFO_pHYs) is non-zero.
	*/
   png_uint_32 x_pixels_per_unit; /* horizontal pixel density */
   png_uint_32 y_pixels_per_unit; /* vertical pixel density */
   png_byte phys_unit_type; /* resolution type (see PNG_RESOLUTION_ below) */
#endif

#if defined(PNG_hIST_SUPPORTED)
   /* The hIST chunk contains the relative frequency or importance of the
	* various palette entries, so that a viewer can intelligently select a
	* reduced-color palette, if required.  Data is an array of "num_palette"
	* values in the range [0,65535]. Data valid if (valid & PNG_INFO_hIST)
	* is non-zero.
	*/
   png_uint_16p hist;
#endif

#ifdef PNG_cHRM_SUPPORTED
   /* The cHRM chunk describes the CIE color characteristics of the monitor
	* on which the PNG was created.  This data allows the viewer to do gamut
	* mapping of the input image to ensure that the viewer sees the same
	* colors in the image as the creator.  Values are in the range
	* [0.0, 0.8].  Data valid if (valid & PNG_INFO_cHRM) non-zero.
	*/
#ifdef PNG_FLOATING_POINT_SUPPORTED
   float x_white;
   float y_white;
   float x_red;
   float y_red;
   float x_green;
   float y_green;
   float x_blue;
   float y_blue;
#endif
#endif

#if defined(PNG_pCAL_SUPPORTED)
   /* The pCAL chunk describes a transformation between the stored pixel
	* values and original physical data values used to create the image.
	* The integer range [0, 2^bit_depth - 1] maps to the floating-point
	* range given by [pcal_X0, pcal_X1], and are further transformed by a
	* (possibly non-linear) transformation function given by "pcal_type"
	* and "pcal_params" into "pcal_units".  Please see the PNG_EQUATION_
	* defines below, and the PNG-Group's PNG extensions document for a
	* complete description of the transformations and how they should be
	* implemented, and for a description of the ASCII parameter strings.
	* Data values are valid if (valid & PNG_INFO_pCAL) non-zero.
	*/
   png_charp pcal_purpose;  /* pCAL chunk description string */
   png_int_32 pcal_X0;      /* minimum value */
   png_int_32 pcal_X1;      /* maximum value */
   png_charp pcal_units;    /* Latin-1 string giving physical units */
   png_charpp pcal_params;  /* ASCII strings containing parameter values */
   png_byte pcal_type;      /* equation type (see PNG_EQUATION_ below) */
   png_byte pcal_nparams;   /* number of parameters given in pcal_params */
#endif

/* New members added in libpng-1.0.6 */
#ifdef PNG_FREE_ME_SUPPORTED
   png_uint_32 free_me;     /* flags items libpng is responsible for freeing */
#endif

#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
   /* storage for unknown chunks that the library doesn't recognize. */
   png_unknown_chunkp unknown_chunks;
   png_size_t unknown_chunks_num;
#endif

#if defined(PNG_iCCP_SUPPORTED)
   /* iCCP chunk data. */
   png_charp iccp_name;     /* profile name */
   png_charp iccp_profile;  /* International Color Consortium profile data */
							/* Note to maintainer: should be png_bytep */
   png_uint_32 iccp_proflen;  /* ICC profile data length */
   png_byte iccp_compression; /* Always zero */
#endif

#if defined(PNG_sPLT_SUPPORTED)
   /* data on sPLT chunks (there may be more than one). */
   png_sPLT_tp splt_palettes;
   png_uint_32 splt_palettes_num;
#endif

#if defined(PNG_sCAL_SUPPORTED)
   /* The sCAL chunk describes the actual physical dimensions of the
	* subject matter of the graphic.  The chunk contains a unit specification
	* a byte value, and two ASCII strings representing floating-point
	* values.  The values are width and height corresponsing to one pixel
	* in the image.  This external representation is converted to double
	* here.  Data values are valid if (valid & PNG_INFO_sCAL) is non-zero.
	*/
   png_byte scal_unit;         /* unit of physical scale */
#ifdef PNG_FLOATING_POINT_SUPPORTED
   double scal_pixel_width;    /* width of one pixel */
   double scal_pixel_height;   /* height of one pixel */
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
   png_charp scal_s_width;     /* string containing height */
   png_charp scal_s_height;    /* string containing width */
#endif
#endif

#if defined(PNG_INFO_IMAGE_SUPPORTED)
   /* Memory has been allocated if (valid & PNG_ALLOCATED_INFO_ROWS) non-zero */
   /* Data valid if (valid & PNG_INFO_IDAT) non-zero */
   png_bytepp row_pointers;        /* the image bits */
#endif

#if defined(PNG_FIXED_POINT_SUPPORTED) && defined(PNG_gAMA_SUPPORTED)
   png_fixed_point int_gamma; /* gamma of image, if (valid & PNG_INFO_gAMA) */
#endif

#if defined(PNG_cHRM_SUPPORTED) && defined(PNG_FIXED_POINT_SUPPORTED)
   png_fixed_point int_x_white;
   png_fixed_point int_y_white;
   png_fixed_point int_x_red;
   png_fixed_point int_y_red;
   png_fixed_point int_x_green;
   png_fixed_point int_y_green;
   png_fixed_point int_x_blue;
   png_fixed_point int_y_blue;
#endif

} png_info;

typedef png_info FAR * png_infop;
typedef png_info FAR * FAR * png_infopp;

/* Maximum positive integer used in PNG is (2^31)-1 */
#define PNG_UINT_31_MAX ((png_uint_32)0x7fffffffL)
#define PNG_UINT_32_MAX ((png_uint_32)(-1))
#define PNG_SIZE_MAX ((png_size_t)(-1))
#if defined(PNG_1_0_X) || defined (PNG_1_2_X)
/* PNG_MAX_UINT is deprecated; use PNG_UINT_31_MAX instead. */
#define PNG_MAX_UINT PNG_UINT_31_MAX
#endif

/* These describe the color_type field in png_info. */
/* color type masks */
#define PNG_COLOR_MASK_PALETTE    1
#define PNG_COLOR_MASK_COLOR      2
#define PNG_COLOR_MASK_ALPHA      4

/* color types.  Note that not all combinations are legal */
#define PNG_COLOR_TYPE_GRAY 0
#define PNG_COLOR_TYPE_PALETTE  (PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_PALETTE)
#define PNG_COLOR_TYPE_RGB        (PNG_COLOR_MASK_COLOR)
#define PNG_COLOR_TYPE_RGB_ALPHA  (PNG_COLOR_MASK_COLOR | PNG_COLOR_MASK_ALPHA)
#define PNG_COLOR_TYPE_GRAY_ALPHA (PNG_COLOR_MASK_ALPHA)
/* aliases */
#define PNG_COLOR_TYPE_RGBA  PNG_COLOR_TYPE_RGB_ALPHA
#define PNG_COLOR_TYPE_GA  PNG_COLOR_TYPE_GRAY_ALPHA

/* This is for compression type. PNG 1.0-1.2 only define the single type. */
#define PNG_COMPRESSION_TYPE_BASE 0 /* Deflate method 8, 32K window */
#define PNG_COMPRESSION_TYPE_DEFAULT PNG_COMPRESSION_TYPE_BASE

/* This is for filter type. PNG 1.0-1.2 only define the single type. */
#define PNG_FILTER_TYPE_BASE      0 /* Single row per-byte filtering */
#define PNG_INTRAPIXEL_DIFFERENCING 64 /* Used only in MNG datastreams */
#define PNG_FILTER_TYPE_DEFAULT   PNG_FILTER_TYPE_BASE

/* These are for the interlacing type.  These values should NOT be changed. */
#define PNG_INTERLACE_NONE        0 /* Non-interlaced image */
#define PNG_INTERLACE_ADAM7       1 /* Adam7 interlacing */
#define PNG_INTERLACE_LAST        2 /* Not a valid value */

/* These are for the oFFs chunk.  These values should NOT be changed. */
#define PNG_OFFSET_PIXEL          0 /* Offset in pixels */
#define PNG_OFFSET_MICROMETER     1 /* Offset in micrometers (1/10^6 meter) */
#define PNG_OFFSET_LAST           2 /* Not a valid value */

/* These are for the pCAL chunk.  These values should NOT be changed. */
#define PNG_EQUATION_LINEAR       0 /* Linear transformation */
#define PNG_EQUATION_BASE_E       1 /* Exponential base e transform */
#define PNG_EQUATION_ARBITRARY    2 /* Arbitrary base exponential transform */
#define PNG_EQUATION_HYPERBOLIC   3 /* Hyperbolic sine transformation */
#define PNG_EQUATION_LAST         4 /* Not a valid value */

/* These are for the sCAL chunk.  These values should NOT be changed. */
#define PNG_SCALE_UNKNOWN         0 /* unknown unit (image scale) */
#define PNG_SCALE_METER           1 /* meters per pixel */
#define PNG_SCALE_RADIAN          2 /* radians per pixel */
#define PNG_SCALE_LAST            3 /* Not a valid value */

/* These are for the pHYs chunk.  These values should NOT be changed. */
#define PNG_RESOLUTION_UNKNOWN    0 /* pixels/unknown unit (aspect ratio) */
#define PNG_RESOLUTION_METER      1 /* pixels/meter */
#define PNG_RESOLUTION_LAST       2 /* Not a valid value */

/* These are for the sRGB chunk.  These values should NOT be changed. */
#define PNG_sRGB_INTENT_PERCEPTUAL 0
#define PNG_sRGB_INTENT_RELATIVE   1
#define PNG_sRGB_INTENT_SATURATION 2
#define PNG_sRGB_INTENT_ABSOLUTE   3
#define PNG_sRGB_INTENT_LAST       4 /* Not a valid value */

/* This is for text chunks */
#define PNG_KEYWORD_MAX_LENGTH     79

/* Maximum number of entries in PLTE/sPLT/tRNS arrays */
#define PNG_MAX_PALETTE_LENGTH    256

/* These determine if an ancillary chunk's data has been successfully read
 * from the PNG header, or if the application has filled in the corresponding
 * data in the info_struct to be written into the output file.  The values
 * of the PNG_INFO_<chunk> defines should NOT be changed.
 */
#define PNG_INFO_gAMA 0x0001
#define PNG_INFO_sBIT 0x0002
#define PNG_INFO_cHRM 0x0004
#define PNG_INFO_PLTE 0x0008
#define PNG_INFO_tRNS 0x0010
#define PNG_INFO_bKGD 0x0020
#define PNG_INFO_hIST 0x0040
#define PNG_INFO_pHYs 0x0080
#define PNG_INFO_oFFs 0x0100
#define PNG_INFO_tIME 0x0200
#define PNG_INFO_pCAL 0x0400
#define PNG_INFO_sRGB 0x0800   /* GR-P, 0.96a */
#define PNG_INFO_iCCP 0x1000   /* ESR, 1.0.6 */
#define PNG_INFO_sPLT 0x2000   /* ESR, 1.0.6 */
#define PNG_INFO_sCAL 0x4000   /* ESR, 1.0.6 */
#define PNG_INFO_IDAT 0x8000L  /* ESR, 1.0.6 */

/* This is used for the transformation routines, as some of them
 * change these values for the row.  It also should enable using
 * the routines for other purposes.
 */
typedef struct png_row_info_struct
{
   png_uint_32 width; /* width of row */
   png_uint_32 rowbytes; /* number of bytes in row */
   png_byte color_type; /* color type of row */
   png_byte bit_depth; /* bit depth of row */
   png_byte channels; /* number of channels (1, 2, 3, or 4) */
   png_byte pixel_depth; /* bits per pixel (depth * channels) */
} png_row_info;

typedef png_row_info FAR * png_row_infop;
typedef png_row_info FAR * FAR * png_row_infopp;

/* These are the function types for the I/O functions and for the functions
 * that allow the user to override the default I/O functions with his or her
 * own.  The png_error_ptr type should match that of user-supplied warning
 * and error functions, while the png_rw_ptr type should match that of the
 * user read/write data functions.
 */
typedef struct png_struct_def png_struct;
typedef png_struct FAR * png_structp;

typedef void (PNGAPI *png_error_ptr) PNGARG((png_structp, png_const_charp));
typedef void (PNGAPI *png_rw_ptr) PNGARG((png_structp, png_bytep, png_size_t));
typedef void (PNGAPI *png_flush_ptr) PNGARG((png_structp));
typedef void (PNGAPI *png_read_status_ptr) PNGARG((png_structp, png_uint_32,
   int));
typedef void (PNGAPI *png_write_status_ptr) PNGARG((png_structp, png_uint_32,
   int));

#ifdef PNG_PROGRESSIVE_READ_SUPPORTED
typedef void (PNGAPI *png_progressive_info_ptr) PNGARG((png_structp, png_infop));
typedef void (PNGAPI *png_progressive_end_ptr) PNGARG((png_structp, png_infop));
typedef void (PNGAPI *png_progressive_row_ptr) PNGARG((png_structp, png_bytep,
   png_uint_32, int));
#endif

#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_LEGACY_SUPPORTED)
typedef void (PNGAPI *png_user_transform_ptr) PNGARG((png_structp,
	png_row_infop, png_bytep));
#endif

#if defined(PNG_USER_CHUNKS_SUPPORTED)
typedef int (PNGAPI *png_user_chunk_ptr) PNGARG((png_structp, png_unknown_chunkp));
#endif
#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
typedef void (PNGAPI *png_unknown_chunk_ptr) PNGARG((png_structp));
#endif

/* Transform masks for the high-level interface */
#define PNG_TRANSFORM_IDENTITY       0x0000    /* read and write */
#define PNG_TRANSFORM_STRIP_16       0x0001    /* read only */
#define PNG_TRANSFORM_STRIP_ALPHA    0x0002    /* read only */
#define PNG_TRANSFORM_PACKING        0x0004    /* read and write */
#define PNG_TRANSFORM_PACKSWAP       0x0008    /* read and write */
#define PNG_TRANSFORM_EXPAND         0x0010    /* read only */
#define PNG_TRANSFORM_INVERT_MONO    0x0020    /* read and write */
#define PNG_TRANSFORM_SHIFT          0x0040    /* read and write */
#define PNG_TRANSFORM_BGR            0x0080    /* read and write */
#define PNG_TRANSFORM_SWAP_ALPHA     0x0100    /* read and write */
#define PNG_TRANSFORM_SWAP_ENDIAN    0x0200    /* read and write */
#define PNG_TRANSFORM_INVERT_ALPHA   0x0400    /* read and write */
#define PNG_TRANSFORM_STRIP_FILLER   0x0800    /* WRITE only */

/* Flags for MNG supported features */
#define PNG_FLAG_MNG_EMPTY_PLTE     0x01
#define PNG_FLAG_MNG_FILTER_64      0x04
#define PNG_ALL_MNG_FEATURES        0x05

typedef png_voidp (*png_malloc_ptr) PNGARG((png_structp, png_size_t));
typedef void (*png_free_ptr) PNGARG((png_structp, png_voidp));

/* The structure that holds the information to read and write PNG files.
 * The only people who need to care about what is inside of this are the
 * people who will be modifying the library for their own special needs.
 * It should NOT be accessed directly by an application, except to store
 * the jmp_buf.
 */

struct png_struct_def
{
#ifdef PNG_SETJMP_SUPPORTED
   jmp_buf jmpbuf;            /* used in png_error */
#endif
   png_error_ptr error_fn;    /* function for printing errors and aborting */
   png_error_ptr warning_fn;  /* function for printing warnings */
   png_voidp error_ptr;       /* user supplied struct for error functions */
   png_rw_ptr write_data_fn;  /* function for writing output data */
   png_rw_ptr read_data_fn;   /* function for reading input data */
   png_voidp io_ptr;          /* ptr to application struct for I/O functions */

#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED)
   png_user_transform_ptr read_user_transform_fn; /* user read transform */
#endif

#if defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)
   png_user_transform_ptr write_user_transform_fn; /* user write transform */
#endif

/* These were added in libpng-1.0.2 */
#if defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)
   png_voidp user_transform_ptr; /* user supplied struct for user transform */
   png_byte user_transform_depth;    /* bit depth of user transformed pixels */
   png_byte user_transform_channels; /* channels in user transformed pixels */
#endif
#endif

   png_uint_32 mode;          /* tells us where we are in the PNG file */
   png_uint_32 flags;         /* flags indicating various things to libpng */
   png_uint_32 transformations; /* which transformations to perform */

   z_stream zstream;          /* pointer to decompression structure (below) */
   png_bytep zbuf;            /* buffer for zlib */
   png_size_t zbuf_size;      /* size of zbuf */
   int zlib_level;            /* holds zlib compression level */
   int zlib_method;           /* holds zlib compression method */
   int zlib_window_bits;      /* holds zlib compression window bits */
   int zlib_mem_level;        /* holds zlib compression memory level */
   int zlib_strategy;         /* holds zlib compression strategy */

   png_uint_32 width;         /* width of image in pixels */
   png_uint_32 height;        /* height of image in pixels */
   png_uint_32 num_rows;      /* number of rows in current pass */
   png_uint_32 usr_width;     /* width of row at start of write */
   png_uint_32 rowbytes;      /* size of row in bytes */
   png_uint_32 irowbytes;     /* size of current interlaced row in bytes */
   png_uint_32 iwidth;        /* width of current interlaced row in pixels */
   png_uint_32 row_number;    /* current row in interlace pass */
   png_bytep prev_row;        /* buffer to save previous (unfiltered) row */
   png_bytep row_buf;         /* buffer to save current (unfiltered) row */
   png_bytep sub_row;         /* buffer to save "sub" row when filtering */
   png_bytep up_row;          /* buffer to save "up" row when filtering */
   png_bytep avg_row;         /* buffer to save "avg" row when filtering */
   png_bytep paeth_row;       /* buffer to save "Paeth" row when filtering */
   png_row_info row_info;     /* used for transformation routines */

   png_uint_32 idat_size;     /* current IDAT size for read */
   png_uint_32 crc;           /* current chunk CRC value */
   png_colorp palette;        /* palette from the input file */
   png_uint_16 num_palette;   /* number of color entries in palette */
   png_uint_16 num_trans;     /* number of transparency values */
   png_byte chunk_name[5];    /* null-terminated name of current chunk */
   png_byte compression;      /* file compression type (always 0) */
   png_byte filter;           /* file filter type (always 0) */
   png_byte interlaced;       /* PNG_INTERLACE_NONE, PNG_INTERLACE_ADAM7 */
   png_byte pass;             /* current interlace pass (0 - 6) */
   png_byte do_filter;        /* row filter flags (see PNG_FILTER_ below ) */
   png_byte color_type;       /* color type of file */
   png_byte bit_depth;        /* bit depth of file */
   png_byte usr_bit_depth;    /* bit depth of users row */
   png_byte pixel_depth;      /* number of bits per pixel */
   png_byte channels;         /* number of channels in file */
   png_byte usr_channels;     /* channels at start of write */
   png_byte sig_bytes;        /* magic bytes read/written from start of file */

#if defined(PNG_READ_FILLER_SUPPORTED) || defined(PNG_WRITE_FILLER_SUPPORTED)
#ifdef PNG_LEGACY_SUPPORTED
   png_byte filler;           /* filler byte for pixel expansion */
#else
   png_uint_16 filler;           /* filler bytes for pixel expansion */
#endif
#endif

#if defined(PNG_bKGD_SUPPORTED)
   png_byte background_gamma_type;
#  ifdef PNG_FLOATING_POINT_SUPPORTED
   float background_gamma;
#  endif
   png_color_16 background;   /* background color in screen gamma space */
#if defined(PNG_READ_GAMMA_SUPPORTED)
   png_color_16 background_1; /* background normalized to gamma 1.0 */
#endif
#endif /* PNG_bKGD_SUPPORTED */

#if defined(PNG_WRITE_FLUSH_SUPPORTED)
   png_flush_ptr output_flush_fn;/* Function for flushing output */
   png_uint_32 flush_dist;    /* how many rows apart to flush, 0 - no flush */
   png_uint_32 flush_rows;    /* number of rows written since last flush */
#endif

#if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
   int gamma_shift;      /* number of "insignificant" bits 16-bit gamma */
#ifdef PNG_FLOATING_POINT_SUPPORTED
   float gamma;          /* file gamma value */
   float screen_gamma;   /* screen gamma value (display_exponent) */
#endif
#endif

#if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
   png_bytep gamma_table;     /* gamma table for 8-bit depth files */
   png_bytep gamma_from_1;    /* converts from 1.0 to screen */
   png_bytep gamma_to_1;      /* converts from file to 1.0 */
   png_uint_16pp gamma_16_table; /* gamma table for 16-bit depth files */
   png_uint_16pp gamma_16_from_1; /* converts from 1.0 to screen */
   png_uint_16pp gamma_16_to_1; /* converts from file to 1.0 */
#endif

#if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_sBIT_SUPPORTED)
   png_color_8 sig_bit;       /* significant bits in each available channel */
#endif

#if defined(PNG_READ_SHIFT_SUPPORTED) || defined(PNG_WRITE_SHIFT_SUPPORTED)
   png_color_8 shift;         /* shift for significant bit tranformation */
#endif

#if defined(PNG_tRNS_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED) \
 || defined(PNG_READ_EXPAND_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
   png_bytep trans;           /* transparency values for paletted files */
   png_color_16 trans_values; /* transparency values for non-paletted files */
#endif

   png_read_status_ptr read_row_fn;   /* called after each row is decoded */
   png_write_status_ptr write_row_fn; /* called after each row is encoded */
#ifdef PNG_PROGRESSIVE_READ_SUPPORTED
   png_progressive_info_ptr info_fn; /* called after header data fully read */
   png_progressive_row_ptr row_fn;   /* called after each prog. row is decoded */
   png_progressive_end_ptr end_fn;   /* called after image is complete */
   png_bytep save_buffer_ptr;        /* current location in save_buffer */
   png_bytep save_buffer;            /* buffer for previously read data */
   png_bytep current_buffer_ptr;     /* current location in current_buffer */
   png_bytep current_buffer;         /* buffer for recently used data */
   png_uint_32 push_length;          /* size of current input chunk */
   png_uint_32 skip_length;          /* bytes to skip in input data */
   png_size_t save_buffer_size;      /* amount of data now in save_buffer */
   png_size_t save_buffer_max;       /* total size of save_buffer */
   png_size_t buffer_size;           /* total amount of available input data */
   png_size_t current_buffer_size;   /* amount of data now in current_buffer */
   int process_mode;                 /* what push library is currently doing */
   int cur_palette;                  /* current push library palette index */

#  if defined(PNG_TEXT_SUPPORTED)
	 png_size_t current_text_size;   /* current size of text input data */
	 png_size_t current_text_left;   /* how much text left to read in input */
	 png_charp current_text;         /* current text chunk buffer */
	 png_charp current_text_ptr;     /* current location in current_text */
#  endif /* PNG_TEXT_SUPPORTED */
#endif /* PNG_PROGRESSIVE_READ_SUPPORTED */

#if defined(__TURBOC__) && !defined(_Windows) && !defined(__FLAT__)
/* for the Borland special 64K segment handler */
   png_bytepp offset_table_ptr;
   png_bytep offset_table;
   png_uint_16 offset_table_number;
   png_uint_16 offset_table_count;
   png_uint_16 offset_table_count_free;
#endif

#if defined(PNG_READ_DITHER_SUPPORTED)
   png_bytep palette_lookup;         /* lookup table for dithering */
   png_bytep dither_index;           /* index translation for palette files */
#endif

#if defined(PNG_READ_DITHER_SUPPORTED) || defined(PNG_hIST_SUPPORTED)
   png_uint_16p hist;                /* histogram */
#endif

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
   png_byte heuristic_method;        /* heuristic for row filter selection */
   png_byte num_prev_filters;        /* number of weights for previous rows */
   png_bytep prev_filters;           /* filter type(s) of previous row(s) */
   png_uint_16p filter_weights;      /* weight(s) for previous line(s) */
   png_uint_16p inv_filter_weights;  /* 1/weight(s) for previous line(s) */
   png_uint_16p filter_costs;        /* relative filter calculation cost */
   png_uint_16p inv_filter_costs;    /* 1/relative filter calculation cost */
#endif

#if defined(PNG_TIME_RFC1123_SUPPORTED)
   png_charp time_buffer;            /* String to hold RFC 1123 time text */
#endif

/* New members added in libpng-1.0.6 */

#ifdef PNG_FREE_ME_SUPPORTED
   png_uint_32 free_me;       /* flags items libpng is responsible for freeing */
#endif

#if defined(PNG_USER_CHUNKS_SUPPORTED)
   png_voidp user_chunk_ptr;
   png_user_chunk_ptr read_user_chunk_fn; /* user read chunk handler */
#endif

#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
   int num_chunk_list;
   png_bytep chunk_list;
#endif

/* New members added in libpng-1.0.3 */
#if defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
   png_byte rgb_to_gray_status;
   /* These were changed from png_byte in libpng-1.0.6 */
   png_uint_16 rgb_to_gray_red_coeff;
   png_uint_16 rgb_to_gray_green_coeff;
   png_uint_16 rgb_to_gray_blue_coeff;
#endif

/* New member added in libpng-1.0.4 (renamed in 1.0.9) */
#if defined(PNG_MNG_FEATURES_SUPPORTED) || \
	defined(PNG_READ_EMPTY_PLTE_SUPPORTED) || \
	defined(PNG_WRITE_EMPTY_PLTE_SUPPORTED)
/* changed from png_byte to png_uint_32 at version 1.2.0 */
#ifdef PNG_1_0_X
   png_byte mng_features_permitted;
#else
   png_uint_32 mng_features_permitted;
#endif /* PNG_1_0_X */
#endif

/* New member added in libpng-1.0.7 */
#if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
   png_fixed_point int_gamma;
#endif

/* New member added in libpng-1.0.9, ifdef'ed out in 1.0.12, enabled in 1.2.0 */
#if defined(PNG_MNG_FEATURES_SUPPORTED)
   png_byte filter_type;
#endif

#if defined(PNG_1_0_X)
/* New member added in libpng-1.0.10, ifdef'ed out in 1.2.0 */
   png_uint_32 row_buf_size;
#endif

/* New members added in libpng-1.2.0 */
#if defined(PNG_ASSEMBLER_CODE_SUPPORTED)
#  if !defined(PNG_1_0_X)
#    if defined(PNG_MMX_CODE_SUPPORTED)
   png_byte     mmx_bitdepth_threshold;
   png_uint_32  mmx_rowbytes_threshold;
#    endif
   png_uint_32  asm_flags;
#  endif
#endif

/* New members added in libpng-1.0.2 but first enabled by default in 1.2.0 */
#ifdef PNG_USER_MEM_SUPPORTED
   png_voidp mem_ptr;                /* user supplied struct for mem functions */
   png_malloc_ptr malloc_fn;         /* function for allocating memory */
   png_free_ptr free_fn;             /* function for freeing memory */
#endif

/* New member added in libpng-1.0.13 and 1.2.0 */
   png_bytep big_row_buf;         /* buffer to save current (unfiltered) row */

#if defined(PNG_READ_DITHER_SUPPORTED)
/* The following three members were added at version 1.0.14 and 1.2.4 */
   png_bytep dither_sort;            /* working sort array */
   png_bytep index_to_palette;       /* where the original index currently is */
									 /* in the palette */
   png_bytep palette_to_index;       /* which original index points to this */
									 /* palette color */
#endif

/* New members added in libpng-1.0.16 and 1.2.6 */
   png_byte compression_type;

#ifdef PNG_SET_USER_LIMITS_SUPPORTED
   png_uint_32 user_width_max;
   png_uint_32 user_height_max;
#endif

/* New member added in libpng-1.0.25 and 1.2.17 */
#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
   /* storage for unknown chunk that the library doesn't recognize. */
   png_unknown_chunk unknown_chunk;
#endif
};

/* This triggers a compiler error in png.c, if png.c and png.h
 * do not agree upon the version number.
 */
typedef png_structp version_1_2_21;

typedef png_struct FAR * FAR * png_structpp;

/* Here are the function definitions most commonly used.  This is not
 * the place to find out how to use libpng.  See libpng.txt for the
 * full explanation, see example.c for the summary.  This just provides
 * a simple one line description of the use of each function.
 */

/* Returns the version number of the library */
extern PNG_EXPORT(png_uint_32,png_access_version_number) PNGARG((void));

/* Tell lib we have already handled the first <num_bytes> magic bytes.
 * Handling more than 8 bytes from the beginning of the file is an error.
 */
extern PNG_EXPORT(void,png_set_sig_bytes) PNGARG((png_structp png_ptr,
   int num_bytes));

/* Check sig[start] through sig[start + num_to_check - 1] to see if it's a
 * PNG file.  Returns zero if the supplied bytes match the 8-byte PNG
 * signature, and non-zero otherwise.  Having num_to_check == 0 or
 * start > 7 will always fail (ie return non-zero).
 */
extern PNG_EXPORT(int,png_sig_cmp) PNGARG((png_bytep sig, png_size_t start,
   png_size_t num_to_check));

/* Simple signature checking function.  This is the same as calling
 * png_check_sig(sig, n) := !png_sig_cmp(sig, 0, n).
 */
extern PNG_EXPORT(int,png_check_sig) PNGARG((png_bytep sig, int num));

/* Allocate and initialize png_ptr struct for reading, and any other memory. */
extern PNG_EXPORT(png_structp,png_create_read_struct)
   PNGARG((png_const_charp user_png_ver, png_voidp error_ptr,
   png_error_ptr error_fn, png_error_ptr warn_fn));

/* Allocate and initialize png_ptr struct for writing, and any other memory */
extern PNG_EXPORT(png_structp,png_create_write_struct)
   PNGARG((png_const_charp user_png_ver, png_voidp error_ptr,
   png_error_ptr error_fn, png_error_ptr warn_fn));

#ifdef PNG_WRITE_SUPPORTED
extern PNG_EXPORT(png_uint_32,png_get_compression_buffer_size)
   PNGARG((png_structp png_ptr));
#endif

#ifdef PNG_WRITE_SUPPORTED
extern PNG_EXPORT(void,png_set_compression_buffer_size)
   PNGARG((png_structp png_ptr, png_uint_32 size));
#endif

/* Reset the compression stream */
extern PNG_EXPORT(int,png_reset_zstream) PNGARG((png_structp png_ptr));

/* New functions added in libpng-1.0.2 (not enabled by default until 1.2.0) */
#ifdef PNG_USER_MEM_SUPPORTED
extern PNG_EXPORT(png_structp,png_create_read_struct_2)
   PNGARG((png_const_charp user_png_ver, png_voidp error_ptr,
   png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,
   png_malloc_ptr malloc_fn, png_free_ptr free_fn));
extern PNG_EXPORT(png_structp,png_create_write_struct_2)
   PNGARG((png_const_charp user_png_ver, png_voidp error_ptr,
   png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,
   png_malloc_ptr malloc_fn, png_free_ptr free_fn));
#endif

/* Write a PNG chunk - size, type, (optional) data, CRC. */
extern PNG_EXPORT(void,png_write_chunk) PNGARG((png_structp png_ptr,
   png_bytep chunk_name, png_bytep data, png_size_t length));

/* Write the start of a PNG chunk - length and chunk name. */
extern PNG_EXPORT(void,png_write_chunk_start) PNGARG((png_structp png_ptr,
   png_bytep chunk_name, png_uint_32 length));

/* Write the data of a PNG chunk started with png_write_chunk_start(). */
extern PNG_EXPORT(void,png_write_chunk_data) PNGARG((png_structp png_ptr,
   png_bytep data, png_size_t length));

/* Finish a chunk started with png_write_chunk_start() (includes CRC). */
extern PNG_EXPORT(void,png_write_chunk_end) PNGARG((png_structp png_ptr));

/* Allocate and initialize the info structure */
extern PNG_EXPORT(png_infop,png_create_info_struct)
   PNGARG((png_structp png_ptr));

#if defined(PNG_1_0_X) || defined (PNG_1_2_X)
/* Initialize the info structure (old interface - DEPRECATED) */
extern PNG_EXPORT(void,png_info_init) PNGARG((png_infop info_ptr));
#undef png_info_init
#define png_info_init(info_ptr) png_info_init_3(&info_ptr,\
	png_sizeof(png_info));
#endif

extern PNG_EXPORT(void,png_info_init_3) PNGARG((png_infopp info_ptr,
	png_size_t png_info_struct_size));

/* Writes all the PNG information before the image. */
extern PNG_EXPORT(void,png_write_info_before_PLTE) PNGARG((png_structp png_ptr,
   png_infop info_ptr));
extern PNG_EXPORT(void,png_write_info) PNGARG((png_structp png_ptr,
   png_infop info_ptr));

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
/* read the information before the actual image data. */
extern PNG_EXPORT(void,png_read_info) PNGARG((png_structp png_ptr,
   png_infop info_ptr));
#endif

#if defined(PNG_TIME_RFC1123_SUPPORTED)
extern PNG_EXPORT(png_charp,png_convert_to_rfc1123)
   PNGARG((png_structp png_ptr, png_timep ptime));
#endif

#if !defined(_WIN32_WCE)
/* "time.h" functions are not supported on WindowsCE */
#if defined(PNG_WRITE_tIME_SUPPORTED)
/* convert from a struct tm to png_time */
extern PNG_EXPORT(void,png_convert_from_struct_tm) PNGARG((png_timep ptime,
   struct tm FAR * ttime));

/* convert from time_t to png_time.  Uses gmtime() */
extern PNG_EXPORT(void,png_convert_from_time_t) PNGARG((png_timep ptime,
   time_t ttime));
#endif /* PNG_WRITE_tIME_SUPPORTED */
#endif /* _WIN32_WCE */

#if defined(PNG_READ_EXPAND_SUPPORTED)
/* Expand data to 24-bit RGB, or 8-bit grayscale, with alpha if available. */
extern PNG_EXPORT(void,png_set_expand) PNGARG((png_structp png_ptr));
#if !defined(PNG_1_0_X)
extern PNG_EXPORT(void,png_set_expand_gray_1_2_4_to_8) PNGARG((png_structp
  png_ptr));
#endif
extern PNG_EXPORT(void,png_set_palette_to_rgb) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(void,png_set_tRNS_to_alpha) PNGARG((png_structp png_ptr));
#if defined(PNG_1_0_X) || defined (PNG_1_2_X)
/* Deprecated */
extern PNG_EXPORT(void,png_set_gray_1_2_4_to_8) PNGARG((png_structp png_ptr));
#endif
#endif

#if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)
/* Use blue, green, red order for pixels. */
extern PNG_EXPORT(void,png_set_bgr) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
/* Expand the grayscale to 24-bit RGB if necessary. */
extern PNG_EXPORT(void,png_set_gray_to_rgb) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
/* Reduce RGB to grayscale. */
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(void,png_set_rgb_to_gray) PNGARG((png_structp png_ptr,
   int error_action, double red, double green ));
#endif
extern PNG_EXPORT(void,png_set_rgb_to_gray_fixed) PNGARG((png_structp png_ptr,
   int error_action, png_fixed_point red, png_fixed_point green ));
extern PNG_EXPORT(png_byte,png_get_rgb_to_gray_status) PNGARG((png_structp
   png_ptr));
#endif

extern PNG_EXPORT(void,png_build_grayscale_palette) PNGARG((int bit_depth,
   png_colorp palette));

#if defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
extern PNG_EXPORT(void,png_set_strip_alpha) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_SWAP_ALPHA_SUPPORTED) || \
	defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
extern PNG_EXPORT(void,png_set_swap_alpha) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_INVERT_ALPHA_SUPPORTED) || \
	defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
extern PNG_EXPORT(void,png_set_invert_alpha) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_FILLER_SUPPORTED) || defined(PNG_WRITE_FILLER_SUPPORTED)
/* Add a filler byte to 8-bit Gray or 24-bit RGB images. */
extern PNG_EXPORT(void,png_set_filler) PNGARG((png_structp png_ptr,
   png_uint_32 filler, int flags));
/* The values of the PNG_FILLER_ defines should NOT be changed */
#define PNG_FILLER_BEFORE 0
#define PNG_FILLER_AFTER 1
/* Add an alpha byte to 8-bit Gray or 24-bit RGB images. */
#if !defined(PNG_1_0_X)
extern PNG_EXPORT(void,png_set_add_alpha) PNGARG((png_structp png_ptr,
   png_uint_32 filler, int flags));
#endif
#endif /* PNG_READ_FILLER_SUPPORTED || PNG_WRITE_FILLER_SUPPORTED */

#if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)
/* Swap bytes in 16-bit depth files. */
extern PNG_EXPORT(void,png_set_swap) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_PACK_SUPPORTED) || defined(PNG_WRITE_PACK_SUPPORTED)
/* Use 1 byte per pixel in 1, 2, or 4-bit depth files. */
extern PNG_EXPORT(void,png_set_packing) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_PACKSWAP_SUPPORTED) || defined(PNG_WRITE_PACKSWAP_SUPPORTED)
/* Swap packing order of pixels in bytes. */
extern PNG_EXPORT(void,png_set_packswap) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_SHIFT_SUPPORTED) || defined(PNG_WRITE_SHIFT_SUPPORTED)
/* Converts files to legal bit depths. */
extern PNG_EXPORT(void,png_set_shift) PNGARG((png_structp png_ptr,
   png_color_8p true_bits));
#endif

#if defined(PNG_READ_INTERLACING_SUPPORTED) || \
	defined(PNG_WRITE_INTERLACING_SUPPORTED)
/* Have the code handle the interlacing.  Returns the number of passes. */
extern PNG_EXPORT(int,png_set_interlace_handling) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_INVERT_SUPPORTED) || defined(PNG_WRITE_INVERT_SUPPORTED)
/* Invert monochrome files */
extern PNG_EXPORT(void,png_set_invert_mono) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_BACKGROUND_SUPPORTED)
/* Handle alpha and tRNS by replacing with a background color. */
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(void,png_set_background) PNGARG((png_structp png_ptr,
   png_color_16p background_color, int background_gamma_code,
   int need_expand, double background_gamma));
#endif
#define PNG_BACKGROUND_GAMMA_UNKNOWN 0
#define PNG_BACKGROUND_GAMMA_SCREEN  1
#define PNG_BACKGROUND_GAMMA_FILE    2
#define PNG_BACKGROUND_GAMMA_UNIQUE  3
#endif

#if defined(PNG_READ_16_TO_8_SUPPORTED)
/* strip the second byte of information from a 16-bit depth file. */
extern PNG_EXPORT(void,png_set_strip_16) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_DITHER_SUPPORTED)
/* Turn on dithering, and reduce the palette to the number of colors available. */
extern PNG_EXPORT(void,png_set_dither) PNGARG((png_structp png_ptr,
   png_colorp palette, int num_palette, int maximum_colors,
   png_uint_16p histogram, int full_dither));
#endif

#if defined(PNG_READ_GAMMA_SUPPORTED)
/* Handle gamma correction. Screen_gamma=(display_exponent) */
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(void,png_set_gamma) PNGARG((png_structp png_ptr,
   double screen_gamma, double default_file_gamma));
#endif
#endif

#if defined(PNG_1_0_X) || defined (PNG_1_2_X)
#if defined(PNG_READ_EMPTY_PLTE_SUPPORTED) || \
	defined(PNG_WRITE_EMPTY_PLTE_SUPPORTED)
/* Permit or disallow empty PLTE (0: not permitted, 1: permitted) */
/* Deprecated and will be removed.  Use png_permit_mng_features() instead. */
extern PNG_EXPORT(void,png_permit_empty_plte) PNGARG((png_structp png_ptr,
   int empty_plte_permitted));
#endif
#endif

#if defined(PNG_WRITE_FLUSH_SUPPORTED)
/* Set how many lines between output flushes - 0 for no flushing */
extern PNG_EXPORT(void,png_set_flush) PNGARG((png_structp png_ptr, int nrows));
/* Flush the current PNG output buffer */
extern PNG_EXPORT(void,png_write_flush) PNGARG((png_structp png_ptr));
#endif

/* optional update palette with requested transformations */
extern PNG_EXPORT(void,png_start_read_image) PNGARG((png_structp png_ptr));

/* optional call to update the users info structure */
extern PNG_EXPORT(void,png_read_update_info) PNGARG((png_structp png_ptr,
   png_infop info_ptr));

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
/* read one or more rows of image data. */
extern PNG_EXPORT(void,png_read_rows) PNGARG((png_structp png_ptr,
   png_bytepp row, png_bytepp display_row, png_uint_32 num_rows));
#endif

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
/* read a row of data. */
extern PNG_EXPORT(void,png_read_row) PNGARG((png_structp png_ptr,
   png_bytep row,
   png_bytep display_row));
#endif

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
/* read the whole image into memory at once. */
extern PNG_EXPORT(void,png_read_image) PNGARG((png_structp png_ptr,
   png_bytepp image));
#endif

/* write a row of image data */
extern PNG_EXPORT(void,png_write_row) PNGARG((png_structp png_ptr,
   png_bytep row));

/* write a few rows of image data */
extern PNG_EXPORT(void,png_write_rows) PNGARG((png_structp png_ptr,
   png_bytepp row, png_uint_32 num_rows));

/* write the image data */
extern PNG_EXPORT(void,png_write_image) PNGARG((png_structp png_ptr,
   png_bytepp image));

/* writes the end of the PNG file. */
extern PNG_EXPORT(void,png_write_end) PNGARG((png_structp png_ptr,
   png_infop info_ptr));

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
/* read the end of the PNG file. */
extern PNG_EXPORT(void,png_read_end) PNGARG((png_structp png_ptr,
   png_infop info_ptr));
#endif

/* free any memory associated with the png_info_struct */
extern PNG_EXPORT(void,png_destroy_info_struct) PNGARG((png_structp png_ptr,
   png_infopp info_ptr_ptr));

/* free any memory associated with the png_struct and the png_info_structs */
extern PNG_EXPORT(void,png_destroy_read_struct) PNGARG((png_structpp
   png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr));

/* free all memory used by the read (old method - NOT DLL EXPORTED) */
extern void png_read_destroy PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_infop end_info_ptr));

/* free any memory associated with the png_struct and the png_info_structs */
extern PNG_EXPORT(void,png_destroy_write_struct)
   PNGARG((png_structpp png_ptr_ptr, png_infopp info_ptr_ptr));

/* free any memory used in png_ptr struct (old method - NOT DLL EXPORTED) */
extern void png_write_destroy PNGARG((png_structp png_ptr));

/* set the libpng method of handling chunk CRC errors */
extern PNG_EXPORT(void,png_set_crc_action) PNGARG((png_structp png_ptr,
   int crit_action, int ancil_action));

/* Values for png_set_crc_action() to say how to handle CRC errors in
 * ancillary and critical chunks, and whether to use the data contained
 * therein.  Note that it is impossible to "discard" data in a critical
 * chunk.  For versions prior to 0.90, the action was always error/quit,
 * whereas in version 0.90 and later, the action for CRC errors in ancillary
 * chunks is warn/discard.  These values should NOT be changed.
 *
 *      value                       action:critical     action:ancillary
 */
#define PNG_CRC_DEFAULT       0  /* error/quit          warn/discard data */
#define PNG_CRC_ERROR_QUIT    1  /* error/quit          error/quit        */
#define PNG_CRC_WARN_DISCARD  2  /* (INVALID)           warn/discard data */
#define PNG_CRC_WARN_USE      3  /* warn/use data       warn/use data     */
#define PNG_CRC_QUIET_USE     4  /* quiet/use data      quiet/use data    */
#define PNG_CRC_NO_CHANGE     5  /* use current value   use current value */

/* These functions give the user control over the scan-line filtering in
 * libpng and the compression methods used by zlib.  These functions are
 * mainly useful for testing, as the defaults should work with most users.
 * Those users who are tight on memory or want faster performance at the
 * expense of compression can modify them.  See the compression library
 * header file (zlib.h) for an explination of the compression functions.
 */

/* set the filtering method(s) used by libpng.  Currently, the only valid
 * value for "method" is 0.
 */
extern PNG_EXPORT(void,png_set_filter) PNGARG((png_structp png_ptr, int method,
   int filters));

/* Flags for png_set_filter() to say which filters to use.  The flags
 * are chosen so that they don't conflict with real filter types
 * below, in case they are supplied instead of the #defined constants.
 * These values should NOT be changed.
 */
#define PNG_NO_FILTERS     0x00
#define PNG_FILTER_NONE    0x08
#define PNG_FILTER_SUB     0x10
#define PNG_FILTER_UP      0x20
#define PNG_FILTER_AVG     0x40
#define PNG_FILTER_PAETH   0x80
#define PNG_ALL_FILTERS (PNG_FILTER_NONE | PNG_FILTER_SUB | PNG_FILTER_UP | \
						 PNG_FILTER_AVG | PNG_FILTER_PAETH)

/* Filter values (not flags) - used in pngwrite.c, pngwutil.c for now.
 * These defines should NOT be changed.
 */
#define PNG_FILTER_VALUE_NONE  0
#define PNG_FILTER_VALUE_SUB   1
#define PNG_FILTER_VALUE_UP    2
#define PNG_FILTER_VALUE_AVG   3
#define PNG_FILTER_VALUE_PAETH 4
#define PNG_FILTER_VALUE_LAST  5

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED) /* EXPERIMENTAL */
/* The "heuristic_method" is given by one of the PNG_FILTER_HEURISTIC_
 * defines, either the default (minimum-sum-of-absolute-differences), or
 * the experimental method (weighted-minimum-sum-of-absolute-differences).
 *
 * Weights are factors >= 1.0, indicating how important it is to keep the
 * filter type consistent between rows.  Larger numbers mean the current
 * filter is that many times as likely to be the same as the "num_weights"
 * previous filters.  This is cumulative for each previous row with a weight.
 * There needs to be "num_weights" values in "filter_weights", or it can be
 * NULL if the weights aren't being specified.  Weights have no influence on
 * the selection of the first row filter.  Well chosen weights can (in theory)
 * improve the compression for a given image.
 *
 * Costs are factors >= 1.0 indicating the relative decoding costs of a
 * filter type.  Higher costs indicate more decoding expense, and are
 * therefore less likely to be selected over a filter with lower computational
 * costs.  There needs to be a value in "filter_costs" for each valid filter
 * type (given by PNG_FILTER_VALUE_LAST), or it can be NULL if you aren't
 * setting the costs.  Costs try to improve the speed of decompression without
 * unduly increasing the compressed image size.
 *
 * A negative weight or cost indicates the default value is to be used, and
 * values in the range [0.0, 1.0) indicate the value is to remain unchanged.
 * The default values for both weights and costs are currently 1.0, but may
 * change if good general weighting/cost heuristics can be found.  If both
 * the weights and costs are set to 1.0, this degenerates the WEIGHTED method
 * to the UNWEIGHTED method, but with added encoding time/computation.
 */
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(void,png_set_filter_heuristics) PNGARG((png_structp png_ptr,
   int heuristic_method, int num_weights, png_doublep filter_weights,
   png_doublep filter_costs));
#endif
#endif /*  PNG_WRITE_WEIGHTED_FILTER_SUPPORTED */

/* Heuristic used for row filter selection.  These defines should NOT be
 * changed.
 */
#define PNG_FILTER_HEURISTIC_DEFAULT    0  /* Currently "UNWEIGHTED" */
#define PNG_FILTER_HEURISTIC_UNWEIGHTED 1  /* Used by libpng < 0.95 */
#define PNG_FILTER_HEURISTIC_WEIGHTED   2  /* Experimental feature */
#define PNG_FILTER_HEURISTIC_LAST       3  /* Not a valid value */

/* Set the library compression level.  Currently, valid values range from
 * 0 - 9, corresponding directly to the zlib compression levels 0 - 9
 * (0 - no compression, 9 - "maximal" compression).  Note that tests have
 * shown that zlib compression levels 3-6 usually perform as well as level 9
 * for PNG images, and do considerably fewer caclulations.  In the future,
 * these values may not correspond directly to the zlib compression levels.
 */
extern PNG_EXPORT(void,png_set_compression_level) PNGARG((png_structp png_ptr,
   int level));

extern PNG_EXPORT(void,png_set_compression_mem_level)
   PNGARG((png_structp png_ptr, int mem_level));

extern PNG_EXPORT(void,png_set_compression_strategy)
   PNGARG((png_structp png_ptr, int strategy));

extern PNG_EXPORT(void,png_set_compression_window_bits)
   PNGARG((png_structp png_ptr, int window_bits));

extern PNG_EXPORT(void,png_set_compression_method) PNGARG((png_structp png_ptr,
   int method));

/* These next functions are called for input/output, memory, and error
 * handling.  They are in the file pngrio.c, pngwio.c, and pngerror.c,
 * and call standard C I/O routines such as fread(), fwrite(), and
 * fprintf().  These functions can be made to use other I/O routines
 * at run time for those applications that need to handle I/O in a
 * different manner by calling png_set_???_fn().  See libpng.txt for
 * more information.
 */

#if !defined(PNG_NO_STDIO)
/* Initialize the input/output for the PNG file to the default functions. */
extern PNG_EXPORT(void,png_init_io) PNGARG((png_structp png_ptr, png_FILE_p fp));
#endif

/* Replace the (error and abort), and warning functions with user
 * supplied functions.  If no messages are to be printed you must still
 * write and use replacement functions. The replacement error_fn should
 * still do a longjmp to the last setjmp location if you are using this
 * method of error handling.  If error_fn or warning_fn is NULL, the
 * default function will be used.
 */

extern PNG_EXPORT(void,png_set_error_fn) PNGARG((png_structp png_ptr,
   png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warning_fn));

/* Return the user pointer associated with the error functions */
extern PNG_EXPORT(png_voidp,png_get_error_ptr) PNGARG((png_structp png_ptr));

/* Replace the default data output functions with a user supplied one(s).
 * If buffered output is not used, then output_flush_fn can be set to NULL.
 * If PNG_WRITE_FLUSH_SUPPORTED is not defined at libpng compile time
 * output_flush_fn will be ignored (and thus can be NULL).
 */
extern PNG_EXPORT(void,png_set_write_fn) PNGARG((png_structp png_ptr,
   png_voidp io_ptr, png_rw_ptr write_data_fn, png_flush_ptr output_flush_fn));

/* Replace the default data input function with a user supplied one. */
extern PNG_EXPORT(void,png_set_read_fn) PNGARG((png_structp png_ptr,
   png_voidp io_ptr, png_rw_ptr read_data_fn));

/* Return the user pointer associated with the I/O functions */
extern PNG_EXPORT(png_voidp,png_get_io_ptr) PNGARG((png_structp png_ptr));

extern PNG_EXPORT(void,png_set_read_status_fn) PNGARG((png_structp png_ptr,
   png_read_status_ptr read_row_fn));

extern PNG_EXPORT(void,png_set_write_status_fn) PNGARG((png_structp png_ptr,
   png_write_status_ptr write_row_fn));

#ifdef PNG_USER_MEM_SUPPORTED
/* Replace the default memory allocation functions with user supplied one(s). */
extern PNG_EXPORT(void,png_set_mem_fn) PNGARG((png_structp png_ptr,
   png_voidp mem_ptr, png_malloc_ptr malloc_fn, png_free_ptr free_fn));
/* Return the user pointer associated with the memory functions */
extern PNG_EXPORT(png_voidp,png_get_mem_ptr) PNGARG((png_structp png_ptr));
#endif

#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_LEGACY_SUPPORTED)
extern PNG_EXPORT(void,png_set_read_user_transform_fn) PNGARG((png_structp
   png_ptr, png_user_transform_ptr read_user_transform_fn));
#endif

#if defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_LEGACY_SUPPORTED)
extern PNG_EXPORT(void,png_set_write_user_transform_fn) PNGARG((png_structp
   png_ptr, png_user_transform_ptr write_user_transform_fn));
#endif

#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_LEGACY_SUPPORTED)
extern PNG_EXPORT(void,png_set_user_transform_info) PNGARG((png_structp
   png_ptr, png_voidp user_transform_ptr, int user_transform_depth,
   int user_transform_channels));
/* Return the user pointer associated with the user transform functions */
extern PNG_EXPORT(png_voidp,png_get_user_transform_ptr)
   PNGARG((png_structp png_ptr));
#endif

#ifdef PNG_USER_CHUNKS_SUPPORTED
extern PNG_EXPORT(void,png_set_read_user_chunk_fn) PNGARG((png_structp png_ptr,
   png_voidp user_chunk_ptr, png_user_chunk_ptr read_user_chunk_fn));
extern PNG_EXPORT(png_voidp,png_get_user_chunk_ptr) PNGARG((png_structp
   png_ptr));
#endif

#ifdef PNG_PROGRESSIVE_READ_SUPPORTED
/* Sets the function callbacks for the push reader, and a pointer to a
 * user-defined structure available to the callback functions.
 */
extern PNG_EXPORT(void,png_set_progressive_read_fn) PNGARG((png_structp png_ptr,
   png_voidp progressive_ptr,
   png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn,
   png_progressive_end_ptr end_fn));

/* returns the user pointer associated with the push read functions */
extern PNG_EXPORT(png_voidp,png_get_progressive_ptr)
   PNGARG((png_structp png_ptr));

/* function to be called when data becomes available */
extern PNG_EXPORT(void,png_process_data) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_bytep buffer, png_size_t buffer_size));

/* function that combines rows.  Not very much different than the
 * png_combine_row() call.  Is this even used?????
 */
extern PNG_EXPORT(void,png_progressive_combine_row) PNGARG((png_structp png_ptr,
   png_bytep old_row, png_bytep new_row));
#endif /* PNG_PROGRESSIVE_READ_SUPPORTED */

extern PNG_EXPORT(png_voidp,png_malloc) PNGARG((png_structp png_ptr,
   png_uint_32 size));

#if defined(PNG_1_0_X)
#  define png_malloc_warn png_malloc
#else
/* Added at libpng version 1.2.4 */
extern PNG_EXPORT(png_voidp,png_malloc_warn) PNGARG((png_structp png_ptr,
   png_uint_32 size));
#endif

/* frees a pointer allocated by png_malloc() */
extern PNG_EXPORT(void,png_free) PNGARG((png_structp png_ptr, png_voidp ptr));

#if defined(PNG_1_0_X)
/* Function to allocate memory for zlib. */
extern PNG_EXPORT(voidpf,png_zalloc) PNGARG((voidpf png_ptr, uInt items,
   uInt size));

/* Function to free memory for zlib */
extern PNG_EXPORT(void,png_zfree) PNGARG((voidpf png_ptr, voidpf ptr));
#endif

/* Free data that was allocated internally */
extern PNG_EXPORT(void,png_free_data) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_32 free_me, int num));
#ifdef PNG_FREE_ME_SUPPORTED
/* Reassign responsibility for freeing existing data, whether allocated
 * by libpng or by the application */
extern PNG_EXPORT(void,png_data_freer) PNGARG((png_structp png_ptr,
   png_infop info_ptr, int freer, png_uint_32 mask));
#endif
/* assignments for png_data_freer */
#define PNG_DESTROY_WILL_FREE_DATA 1
#define PNG_SET_WILL_FREE_DATA 1
#define PNG_USER_WILL_FREE_DATA 2
/* Flags for png_ptr->free_me and info_ptr->free_me */
#define PNG_FREE_HIST 0x0008
#define PNG_FREE_ICCP 0x0010
#define PNG_FREE_SPLT 0x0020
#define PNG_FREE_ROWS 0x0040
#define PNG_FREE_PCAL 0x0080
#define PNG_FREE_SCAL 0x0100
#define PNG_FREE_UNKN 0x0200
#define PNG_FREE_LIST 0x0400
#define PNG_FREE_PLTE 0x1000
#define PNG_FREE_TRNS 0x2000
#define PNG_FREE_TEXT 0x4000
#define PNG_FREE_ALL  0x7fff
#define PNG_FREE_MUL  0x4220 /* PNG_FREE_SPLT|PNG_FREE_TEXT|PNG_FREE_UNKN */

#ifdef PNG_USER_MEM_SUPPORTED
extern PNG_EXPORT(png_voidp,png_malloc_default) PNGARG((png_structp png_ptr,
   png_uint_32 size));
extern PNG_EXPORT(void,png_free_default) PNGARG((png_structp png_ptr,
   png_voidp ptr));
#endif

extern PNG_EXPORT(png_voidp,png_memcpy_check) PNGARG((png_structp png_ptr,
   png_voidp s1, png_voidp s2, png_uint_32 size));

extern PNG_EXPORT(png_voidp,png_memset_check) PNGARG((png_structp png_ptr,
   png_voidp s1, int value, png_uint_32 size));

#if defined(USE_FAR_KEYWORD)  /* memory model conversion function */
extern void *png_far_to_near PNGARG((png_structp png_ptr,png_voidp ptr,
   int check));
#endif /* USE_FAR_KEYWORD */

#ifndef PNG_NO_ERROR_TEXT
/* Fatal error in PNG image of libpng - can't continue */
extern PNG_EXPORT(void,png_error) PNGARG((png_structp png_ptr,
   png_const_charp error_message));

/* The same, but the chunk name is prepended to the error string. */
extern PNG_EXPORT(void,png_chunk_error) PNGARG((png_structp png_ptr,
   png_const_charp error_message));
#else
/* Fatal error in PNG image of libpng - can't continue */
extern PNG_EXPORT(void,png_err) PNGARG((png_structp png_ptr));
#endif

#ifndef PNG_NO_WARNINGS
/* Non-fatal error in libpng.  Can continue, but may have a problem. */
extern PNG_EXPORT(void,png_warning) PNGARG((png_structp png_ptr,
   png_const_charp warning_message));

#ifdef PNG_READ_SUPPORTED
/* Non-fatal error in libpng, chunk name is prepended to message. */
extern PNG_EXPORT(void,png_chunk_warning) PNGARG((png_structp png_ptr,
   png_const_charp warning_message));
#endif /* PNG_READ_SUPPORTED */
#endif /* PNG_NO_WARNINGS */

/* The png_set_<chunk> functions are for storing values in the png_info_struct.
 * Similarly, the png_get_<chunk> calls are used to read values from the
 * png_info_struct, either storing the parameters in the passed variables, or
 * setting pointers into the png_info_struct where the data is stored.  The
 * png_get_<chunk> functions return a non-zero value if the data was available
 * in info_ptr, or return zero and do not change any of the parameters if the
 * data was not available.
 *
 * These functions should be used instead of directly accessing png_info
 * to avoid problems with future changes in the size and internal layout of
 * png_info_struct.
 */
/* Returns "flag" if chunk data is valid in info_ptr. */
extern PNG_EXPORT(png_uint_32,png_get_valid) PNGARG((png_structp png_ptr,
png_infop info_ptr, png_uint_32 flag));

/* Returns number of bytes needed to hold a transformed row. */
extern PNG_EXPORT(png_uint_32,png_get_rowbytes) PNGARG((png_structp png_ptr,
png_infop info_ptr));

#if defined(PNG_INFO_IMAGE_SUPPORTED)
/* Returns row_pointers, which is an array of pointers to scanlines that was
returned from png_read_png(). */
extern PNG_EXPORT(png_bytepp,png_get_rows) PNGARG((png_structp png_ptr,
png_infop info_ptr));
/* Set row_pointers, which is an array of pointers to scanlines for use
by png_write_png(). */
extern PNG_EXPORT(void,png_set_rows) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_bytepp row_pointers));
#endif

/* Returns number of color channels in image. */
extern PNG_EXPORT(png_byte,png_get_channels) PNGARG((png_structp png_ptr,
png_infop info_ptr));

#ifdef PNG_EASY_ACCESS_SUPPORTED
/* Returns image width in pixels. */
extern PNG_EXPORT(png_uint_32, png_get_image_width) PNGARG((png_structp
png_ptr, png_infop info_ptr));

/* Returns image height in pixels. */
extern PNG_EXPORT(png_uint_32, png_get_image_height) PNGARG((png_structp
png_ptr, png_infop info_ptr));

/* Returns image bit_depth. */
extern PNG_EXPORT(png_byte, png_get_bit_depth) PNGARG((png_structp
png_ptr, png_infop info_ptr));

/* Returns image color_type. */
extern PNG_EXPORT(png_byte, png_get_color_type) PNGARG((png_structp
png_ptr, png_infop info_ptr));

/* Returns image filter_type. */
extern PNG_EXPORT(png_byte, png_get_filter_type) PNGARG((png_structp
png_ptr, png_infop info_ptr));

/* Returns image interlace_type. */
extern PNG_EXPORT(png_byte, png_get_interlace_type) PNGARG((png_structp
png_ptr, png_infop info_ptr));

/* Returns image compression_type. */
extern PNG_EXPORT(png_byte, png_get_compression_type) PNGARG((png_structp
png_ptr, png_infop info_ptr));

/* Returns image resolution in pixels per meter, from pHYs chunk data. */
extern PNG_EXPORT(png_uint_32, png_get_pixels_per_meter) PNGARG((png_structp
png_ptr, png_infop info_ptr));
extern PNG_EXPORT(png_uint_32, png_get_x_pixels_per_meter) PNGARG((png_structp
png_ptr, png_infop info_ptr));
extern PNG_EXPORT(png_uint_32, png_get_y_pixels_per_meter) PNGARG((png_structp
png_ptr, png_infop info_ptr));

/* Returns pixel aspect ratio, computed from pHYs chunk data.  */
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(float, png_get_pixel_aspect_ratio) PNGARG((png_structp
png_ptr, png_infop info_ptr));
#endif

/* Returns image x, y offset in pixels or microns, from oFFs chunk data. */
extern PNG_EXPORT(png_int_32, png_get_x_offset_pixels) PNGARG((png_structp
png_ptr, png_infop info_ptr));
extern PNG_EXPORT(png_int_32, png_get_y_offset_pixels) PNGARG((png_structp
png_ptr, png_infop info_ptr));
extern PNG_EXPORT(png_int_32, png_get_x_offset_microns) PNGARG((png_structp
png_ptr, png_infop info_ptr));
extern PNG_EXPORT(png_int_32, png_get_y_offset_microns) PNGARG((png_structp
png_ptr, png_infop info_ptr));

#endif /* PNG_EASY_ACCESS_SUPPORTED */

/* Returns pointer to signature string read from PNG header */
extern PNG_EXPORT(png_bytep,png_get_signature) PNGARG((png_structp png_ptr,
png_infop info_ptr));

#if defined(PNG_bKGD_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_bKGD) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_color_16p *background));
#endif

#if defined(PNG_bKGD_SUPPORTED)
extern PNG_EXPORT(void,png_set_bKGD) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_color_16p background));
#endif

#if defined(PNG_cHRM_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(png_uint_32,png_get_cHRM) PNGARG((png_structp png_ptr,
   png_infop info_ptr, double *white_x, double *white_y, double *red_x,
   double *red_y, double *green_x, double *green_y, double *blue_x,
   double *blue_y));
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
extern PNG_EXPORT(png_uint_32,png_get_cHRM_fixed) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_fixed_point *int_white_x, png_fixed_point
   *int_white_y, png_fixed_point *int_red_x, png_fixed_point *int_red_y,
   png_fixed_point *int_green_x, png_fixed_point *int_green_y, png_fixed_point
   *int_blue_x, png_fixed_point *int_blue_y));
#endif
#endif

#if defined(PNG_cHRM_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(void,png_set_cHRM) PNGARG((png_structp png_ptr,
   png_infop info_ptr, double white_x, double white_y, double red_x,
   double red_y, double green_x, double green_y, double blue_x, double blue_y));
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
extern PNG_EXPORT(void,png_set_cHRM_fixed) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_fixed_point int_white_x, png_fixed_point int_white_y,
   png_fixed_point int_red_x, png_fixed_point int_red_y, png_fixed_point
   int_green_x, png_fixed_point int_green_y, png_fixed_point int_blue_x,
   png_fixed_point int_blue_y));
#endif
#endif

#if defined(PNG_gAMA_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(png_uint_32,png_get_gAMA) PNGARG((png_structp png_ptr,
   png_infop info_ptr, double *file_gamma));
#endif
extern PNG_EXPORT(png_uint_32,png_get_gAMA_fixed) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_fixed_point *int_file_gamma));
#endif

#if defined(PNG_gAMA_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(void,png_set_gAMA) PNGARG((png_structp png_ptr,
   png_infop info_ptr, double file_gamma));
#endif
extern PNG_EXPORT(void,png_set_gAMA_fixed) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_fixed_point int_file_gamma));
#endif

#if defined(PNG_hIST_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_hIST) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_16p *hist));
#endif

#if defined(PNG_hIST_SUPPORTED)
extern PNG_EXPORT(void,png_set_hIST) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_16p hist));
#endif

extern PNG_EXPORT(png_uint_32,png_get_IHDR) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_32 *width, png_uint_32 *height,
   int *bit_depth, int *color_type, int *interlace_method,
   int *compression_method, int *filter_method));

extern PNG_EXPORT(void,png_set_IHDR) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth,
   int color_type, int interlace_method, int compression_method,
   int filter_method));

#if defined(PNG_oFFs_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_oFFs) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_int_32 *offset_x, png_int_32 *offset_y,
   int *unit_type));
#endif

#if defined(PNG_oFFs_SUPPORTED)
extern PNG_EXPORT(void,png_set_oFFs) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_int_32 offset_x, png_int_32 offset_y,
   int unit_type));
#endif

#if defined(PNG_pCAL_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_pCAL) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_charp *purpose, png_int_32 *X0, png_int_32 *X1,
   int *type, int *nparams, png_charp *units, png_charpp *params));
#endif

#if defined(PNG_pCAL_SUPPORTED)
extern PNG_EXPORT(void,png_set_pCAL) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_charp purpose, png_int_32 X0, png_int_32 X1,
   int type, int nparams, png_charp units, png_charpp params));
#endif

#if defined(PNG_pHYs_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_pHYs) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_32 *res_x, png_uint_32 *res_y, int *unit_type));
#endif

#if defined(PNG_pHYs_SUPPORTED)
extern PNG_EXPORT(void,png_set_pHYs) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_32 res_x, png_uint_32 res_y, int unit_type));
#endif

extern PNG_EXPORT(png_uint_32,png_get_PLTE) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_colorp *palette, int *num_palette));

extern PNG_EXPORT(void,png_set_PLTE) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_colorp palette, int num_palette));

#if defined(PNG_sBIT_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_sBIT) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_color_8p *sig_bit));
#endif

#if defined(PNG_sBIT_SUPPORTED)
extern PNG_EXPORT(void,png_set_sBIT) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_color_8p sig_bit));
#endif

#if defined(PNG_sRGB_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_sRGB) PNGARG((png_structp png_ptr,
   png_infop info_ptr, int *intent));
#endif

#if defined(PNG_sRGB_SUPPORTED)
extern PNG_EXPORT(void,png_set_sRGB) PNGARG((png_structp png_ptr,
   png_infop info_ptr, int intent));
extern PNG_EXPORT(void,png_set_sRGB_gAMA_and_cHRM) PNGARG((png_structp png_ptr,
   png_infop info_ptr, int intent));
#endif

#if defined(PNG_iCCP_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_iCCP) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_charpp name, int *compression_type,
   png_charpp profile, png_uint_32 *proflen));
   /* Note to maintainer: profile should be png_bytepp */
#endif

#if defined(PNG_iCCP_SUPPORTED)
extern PNG_EXPORT(void,png_set_iCCP) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_charp name, int compression_type,
   png_charp profile, png_uint_32 proflen));
   /* Note to maintainer: profile should be png_bytep */
#endif

#if defined(PNG_sPLT_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_sPLT) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_sPLT_tpp entries));
#endif

#if defined(PNG_sPLT_SUPPORTED)
extern PNG_EXPORT(void,png_set_sPLT) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_sPLT_tp entries, int nentries));
#endif

#if defined(PNG_TEXT_SUPPORTED)
/* png_get_text also returns the number of text chunks in *num_text */
extern PNG_EXPORT(png_uint_32,png_get_text) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_textp *text_ptr, int *num_text));
#endif

/*
 *  Note while png_set_text() will accept a structure whose text,
 *  language, and  translated keywords are NULL pointers, the structure
 *  returned by png_get_text will always contain regular
 *  zero-terminated C strings.  They might be empty strings but
 *  they will never be NULL pointers.
 */

#if defined(PNG_TEXT_SUPPORTED)
extern PNG_EXPORT(void,png_set_text) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_textp text_ptr, int num_text));
#endif

#if defined(PNG_tIME_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_tIME) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_timep *mod_time));
#endif

#if defined(PNG_tIME_SUPPORTED)
extern PNG_EXPORT(void,png_set_tIME) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_timep mod_time));
#endif

#if defined(PNG_tRNS_SUPPORTED)
extern PNG_EXPORT(png_uint_32,png_get_tRNS) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_bytep *trans, int *num_trans,
   png_color_16p *trans_values));
#endif

#if defined(PNG_tRNS_SUPPORTED)
extern PNG_EXPORT(void,png_set_tRNS) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_bytep trans, int num_trans,
   png_color_16p trans_values));
#endif

#if defined(PNG_tRNS_SUPPORTED)
#endif

#if defined(PNG_sCAL_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(png_uint_32,png_get_sCAL) PNGARG((png_structp png_ptr,
   png_infop info_ptr, int *unit, double *width, double *height));
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
extern PNG_EXPORT(png_uint_32,png_get_sCAL_s) PNGARG((png_structp png_ptr,
   png_infop info_ptr, int *unit, png_charpp swidth, png_charpp sheight));
#endif
#endif
#endif /* PNG_sCAL_SUPPORTED */

#if defined(PNG_sCAL_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
extern PNG_EXPORT(void,png_set_sCAL) PNGARG((png_structp png_ptr,
   png_infop info_ptr, int unit, double width, double height));
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
extern PNG_EXPORT(void,png_set_sCAL_s) PNGARG((png_structp png_ptr,
   png_infop info_ptr, int unit, png_charp swidth, png_charp sheight));
#endif
#endif
#endif /* PNG_sCAL_SUPPORTED || PNG_WRITE_sCAL_SUPPORTED */

#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
/* provide a list of chunks and how they are to be handled, if the built-in
   handling or default unknown chunk handling is not desired.  Any chunks not
   listed will be handled in the default manner.  The IHDR and IEND chunks
   must not be listed.
	  keep = 0: follow default behaviour
		   = 1: do not keep
		   = 2: keep only if safe-to-copy
		   = 3: keep even if unsafe-to-copy
*/
extern PNG_EXPORT(void, png_set_keep_unknown_chunks) PNGARG((png_structp
   png_ptr, int keep, png_bytep chunk_list, int num_chunks));
extern PNG_EXPORT(void, png_set_unknown_chunks) PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_unknown_chunkp unknowns, int num_unknowns));
extern PNG_EXPORT(void, png_set_unknown_chunk_location)
   PNGARG((png_structp png_ptr, png_infop info_ptr, int chunk, int location));
extern PNG_EXPORT(png_uint_32,png_get_unknown_chunks) PNGARG((png_structp
   png_ptr, png_infop info_ptr, png_unknown_chunkpp entries));
#endif
#ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
PNG_EXPORT(int,png_handle_as_unknown) PNGARG((png_structp png_ptr, png_bytep
   chunk_name));
#endif

/* Png_free_data() will turn off the "valid" flag for anything it frees.
   If you need to turn it off for a chunk that your application has freed,
   you can use png_set_invalid(png_ptr, info_ptr, PNG_INFO_CHNK); */
extern PNG_EXPORT(void, png_set_invalid) PNGARG((png_structp png_ptr,
   png_infop info_ptr, int mask));

#if defined(PNG_INFO_IMAGE_SUPPORTED)
/* The "params" pointer is currently not used and is for future expansion. */
extern PNG_EXPORT(void, png_read_png) PNGARG((png_structp png_ptr,
						png_infop info_ptr,
						int transforms,
						png_voidp params));
extern PNG_EXPORT(void, png_write_png) PNGARG((png_structp png_ptr,
						png_infop info_ptr,
						int transforms,
						png_voidp params));
#endif

/* Define PNG_DEBUG at compile time for debugging information.  Higher
 * numbers for PNG_DEBUG mean more debugging information.  This has
 * only been added since version 0.95 so it is not implemented throughout
 * libpng yet, but more support will be added as needed.
 */
#ifdef PNG_DEBUG
#if (PNG_DEBUG > 0)
#if !defined(PNG_DEBUG_FILE) && defined(_MSC_VER)
#include <crtdbg.h>
#if (PNG_DEBUG > 1)
#define png_debug(l,m)  _RPT0(_CRT_WARN,m)
#define png_debug1(l,m,p1)  _RPT1(_CRT_WARN,m,p1)
#define png_debug2(l,m,p1,p2) _RPT2(_CRT_WARN,m,p1,p2)
#endif
#else /* PNG_DEBUG_FILE || !_MSC_VER */
#ifndef PNG_DEBUG_FILE
#define PNG_DEBUG_FILE stderr
#endif /* PNG_DEBUG_FILE */
#if (PNG_DEBUG > 1)
#define png_debug(l,m) \
{ \
	 int num_tabs=l; \
	 fprintf(PNG_DEBUG_FILE,"%s"m,(num_tabs==1 ? "\t" : \
	   (num_tabs==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":"")))); \
}
#define png_debug1(l,m,p1) \
{ \
	 int num_tabs=l; \
	 fprintf(PNG_DEBUG_FILE,"%s"m,(num_tabs==1 ? "\t" : \
	   (num_tabs==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))),p1); \
}
#define png_debug2(l,m,p1,p2) \
{ \
	 int num_tabs=l; \
	 fprintf(PNG_DEBUG_FILE,"%s"m,(num_tabs==1 ? "\t" : \
	   (num_tabs==2 ? "\t\t":(num_tabs>2 ? "\t\t\t":""))),p1,p2); \
}
#endif /* (PNG_DEBUG > 1) */
#endif /* _MSC_VER */
#endif /* (PNG_DEBUG > 0) */
#endif /* PNG_DEBUG */
#ifndef png_debug
#define png_debug(l, m)
#endif
#ifndef png_debug1
#define png_debug1(l, m, p1)
#endif
#ifndef png_debug2
#define png_debug2(l, m, p1, p2)
#endif

extern PNG_EXPORT(png_charp,png_get_copyright) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_charp,png_get_header_ver) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_charp,png_get_header_version) PNGARG((png_structp png_ptr));
extern PNG_EXPORT(png_charp,png_get_libpng_ver) PNGARG((png_structp png_ptr));

#ifdef PNG_MNG_FEATURES_SUPPORTED
extern PNG_EXPORT(png_uint_32,png_permit_mng_features) PNGARG((png_structp
   png_ptr, png_uint_32 mng_features_permitted));
#endif

/* For use in png_set_keep_unknown, added to version 1.2.6 */
#define PNG_HANDLE_CHUNK_AS_DEFAULT   0
#define PNG_HANDLE_CHUNK_NEVER        1
#define PNG_HANDLE_CHUNK_IF_SAFE      2
#define PNG_HANDLE_CHUNK_ALWAYS       3

/* Added to version 1.2.0 */
#if defined(PNG_ASSEMBLER_CODE_SUPPORTED)
#if defined(PNG_MMX_CODE_SUPPORTED)
#define PNG_ASM_FLAG_MMX_SUPPORT_COMPILED  0x01  /* not user-settable */
#define PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU    0x02  /* not user-settable */
#define PNG_ASM_FLAG_MMX_READ_COMBINE_ROW  0x04
#define PNG_ASM_FLAG_MMX_READ_INTERLACE    0x08
#define PNG_ASM_FLAG_MMX_READ_FILTER_SUB   0x10
#define PNG_ASM_FLAG_MMX_READ_FILTER_UP    0x20
#define PNG_ASM_FLAG_MMX_READ_FILTER_AVG   0x40
#define PNG_ASM_FLAG_MMX_READ_FILTER_PAETH 0x80
#define PNG_ASM_FLAGS_INITIALIZED          0x80000000  /* not user-settable */

#define PNG_MMX_READ_FLAGS ( PNG_ASM_FLAG_MMX_READ_COMBINE_ROW  \
						   | PNG_ASM_FLAG_MMX_READ_INTERLACE    \
						   | PNG_ASM_FLAG_MMX_READ_FILTER_SUB   \
						   | PNG_ASM_FLAG_MMX_READ_FILTER_UP    \
						   | PNG_ASM_FLAG_MMX_READ_FILTER_AVG   \
						   | PNG_ASM_FLAG_MMX_READ_FILTER_PAETH )
#define PNG_MMX_WRITE_FLAGS ( 0 )

#define PNG_MMX_FLAGS ( PNG_ASM_FLAG_MMX_SUPPORT_COMPILED \
					  | PNG_ASM_FLAG_MMX_SUPPORT_IN_CPU   \
					  | PNG_MMX_READ_FLAGS                \
					  | PNG_MMX_WRITE_FLAGS )

#define PNG_SELECT_READ   1
#define PNG_SELECT_WRITE  2
#endif /* PNG_MMX_CODE_SUPPORTED */

#if !defined(PNG_1_0_X)
/* pngget.c */
extern PNG_EXPORT(png_uint_32,png_get_mmx_flagmask)
   PNGARG((int flag_select, int *compilerID));

/* pngget.c */
extern PNG_EXPORT(png_uint_32,png_get_asm_flagmask)
   PNGARG((int flag_select));

/* pngget.c */
extern PNG_EXPORT(png_uint_32,png_get_asm_flags)
   PNGARG((png_structp png_ptr));

/* pngget.c */
extern PNG_EXPORT(png_byte,png_get_mmx_bitdepth_threshold)
   PNGARG((png_structp png_ptr));

/* pngget.c */
extern PNG_EXPORT(png_uint_32,png_get_mmx_rowbytes_threshold)
   PNGARG((png_structp png_ptr));

/* pngset.c */
extern PNG_EXPORT(void,png_set_asm_flags)
   PNGARG((png_structp png_ptr, png_uint_32 asm_flags));

/* pngset.c */
extern PNG_EXPORT(void,png_set_mmx_thresholds)
   PNGARG((png_structp png_ptr, png_byte mmx_bitdepth_threshold,
   png_uint_32 mmx_rowbytes_threshold));

#endif /* PNG_1_0_X */

#if !defined(PNG_1_0_X)
/* png.c, pnggccrd.c, or pngvcrd.c */
extern PNG_EXPORT(int,png_mmx_support) PNGARG((void));
#endif /* PNG_ASSEMBLER_CODE_SUPPORTED */

/* Strip the prepended error numbers ("#nnn ") from error and warning
 * messages before passing them to the error or warning handler. */
#ifdef PNG_ERROR_NUMBERS_SUPPORTED
extern PNG_EXPORT(void,png_set_strip_error_numbers) PNGARG((png_structp
   png_ptr, png_uint_32 strip_mode));
#endif

#endif /* PNG_1_0_X */

/* Added at libpng-1.2.6 */
#ifdef PNG_SET_USER_LIMITS_SUPPORTED
extern PNG_EXPORT(void,png_set_user_limits) PNGARG((png_structp
   png_ptr, png_uint_32 user_width_max, png_uint_32 user_height_max));
extern PNG_EXPORT(png_uint_32,png_get_user_width_max) PNGARG((png_structp
   png_ptr));
extern PNG_EXPORT(png_uint_32,png_get_user_height_max) PNGARG((png_structp
   png_ptr));
#endif

/* Maintainer: Put new public prototypes here ^, in libpng.3, and project defs */

#ifdef PNG_READ_COMPOSITE_NODIV_SUPPORTED
/* With these routines we avoid an integer divide, which will be slower on
 * most machines.  However, it does take more operations than the corresponding
 * divide method, so it may be slower on a few RISC systems.  There are two
 * shifts (by 8 or 16 bits) and an addition, versus a single integer divide.
 *
 * Note that the rounding factors are NOT supposed to be the same!  128 and
 * 32768 are correct for the NODIV code; 127 and 32767 are correct for the
 * standard method.
 *
 * [Optimized code by Greg Roelofs and Mark Adler...blame us for bugs. :-) ]
 */

 /* fg and bg should be in `gamma 1.0' space; alpha is the opacity          */

#  define png_composite(composite, fg, alpha, bg)                            \
	 { png_uint_16 temp = (png_uint_16)((png_uint_16)(fg) * (png_uint_16)(alpha) \
						+        (png_uint_16)(bg)*(png_uint_16)(255 -       \
						(png_uint_16)(alpha)) + (png_uint_16)128);           \
	   (composite) = (png_byte)((temp + (temp >> 8)) >> 8); }

#  define png_composite_16(composite, fg, alpha, bg)                         \
	 { png_uint_32 temp = (png_uint_32)((png_uint_32)(fg) * (png_uint_32)(alpha) \
						+ (png_uint_32)(bg)*(png_uint_32)(65535L -           \
						(png_uint_32)(alpha)) + (png_uint_32)32768L);        \
	   (composite) = (png_uint_16)((temp + (temp >> 16)) >> 16); }

#else  /* standard method using integer division */

#  define png_composite(composite, fg, alpha, bg)                            \
	 (composite) = (png_byte)(((png_uint_16)(fg) * (png_uint_16)(alpha) +    \
	   (png_uint_16)(bg) * (png_uint_16)(255 - (png_uint_16)(alpha)) +       \
	   (png_uint_16)127) / 255)

#  define png_composite_16(composite, fg, alpha, bg)                         \
	 (composite) = (png_uint_16)(((png_uint_32)(fg) * (png_uint_32)(alpha) + \
	   (png_uint_32)(bg)*(png_uint_32)(65535L - (png_uint_32)(alpha)) +      \
	   (png_uint_32)32767) / (png_uint_32)65535L)

#endif /* PNG_READ_COMPOSITE_NODIV_SUPPORTED */

/* Inline macros to do direct reads of bytes from the input buffer.  These
 * require that you are using an architecture that uses PNG byte ordering
 * (MSB first) and supports unaligned data storage.  I think that PowerPC
 * in big-endian mode and 680x0 are the only ones that will support this.
 * The x86 line of processors definitely do not.  The png_get_int_32()
 * routine also assumes we are using two's complement format for negative
 * values, which is almost certainly true.
 */
#if defined(PNG_READ_BIG_ENDIAN_SUPPORTED)
#  define png_get_uint_32(buf) ( *((png_uint_32p) (buf)))
#  define png_get_uint_16(buf) ( *((png_uint_16p) (buf)))
#  define png_get_int_32(buf)  ( *((png_int_32p)  (buf)))
#else
extern PNG_EXPORT(png_uint_32,png_get_uint_32) PNGARG((png_bytep buf));
extern PNG_EXPORT(png_uint_16,png_get_uint_16) PNGARG((png_bytep buf));
extern PNG_EXPORT(png_int_32,png_get_int_32) PNGARG((png_bytep buf));
#endif /* !PNG_READ_BIG_ENDIAN_SUPPORTED */
extern PNG_EXPORT(png_uint_32,png_get_uint_31)
  PNGARG((png_structp png_ptr, png_bytep buf));
/* No png_get_int_16 -- may be added if there's a real need for it. */

/* Place a 32-bit number into a buffer in PNG byte order (big-endian).
 */
extern PNG_EXPORT(void,png_save_uint_32)
   PNGARG((png_bytep buf, png_uint_32 i));
extern PNG_EXPORT(void,png_save_int_32)
   PNGARG((png_bytep buf, png_int_32 i));

/* Place a 16-bit number into a buffer in PNG byte order.
 * The parameter is declared unsigned int, not png_uint_16,
 * just to avoid potential problems on pre-ANSI C compilers.
 */
extern PNG_EXPORT(void,png_save_uint_16)
   PNGARG((png_bytep buf, unsigned int i));
/* No png_save_int_16 -- may be added if there's a real need for it. */

/* ************************************************************************* */

/* These next functions are used internally in the code.  They generally
 * shouldn't be used unless you are writing code to add or replace some
 * functionality in libpng.  More information about most functions can
 * be found in the files where the functions are located.
 */

/* Various modes of operation, that are visible to applications because
 * they are used for unknown chunk location.
 */
#define PNG_HAVE_IHDR               0x01
#define PNG_HAVE_PLTE               0x02
#define PNG_HAVE_IDAT               0x04
#define PNG_AFTER_IDAT              0x08 /* Have complete zlib datastream */
#define PNG_HAVE_IEND               0x10

#if defined(PNG_INTERNAL)

/* More modes of operation.  Note that after an init, mode is set to
 * zero automatically when the structure is created.
 */
#define PNG_HAVE_gAMA               0x20
#define PNG_HAVE_cHRM               0x40
#define PNG_HAVE_sRGB               0x80
#define PNG_HAVE_CHUNK_HEADER      0x100
#define PNG_WROTE_tIME             0x200
#define PNG_WROTE_INFO_BEFORE_PLTE 0x400
#define PNG_BACKGROUND_IS_GRAY     0x800
#define PNG_HAVE_PNG_SIGNATURE    0x1000
#define PNG_HAVE_CHUNK_AFTER_IDAT 0x2000 /* Have another chunk after IDAT */

/* flags for the transformations the PNG library does on the image data */
#define PNG_BGR                0x0001
#define PNG_INTERLACE          0x0002
#define PNG_PACK               0x0004
#define PNG_SHIFT              0x0008
#define PNG_SWAP_BYTES         0x0010
#define PNG_INVERT_MONO        0x0020
#define PNG_DITHER             0x0040
#define PNG_BACKGROUND         0x0080
#define PNG_BACKGROUND_EXPAND  0x0100
						  /*   0x0200 unused */
#define PNG_16_TO_8            0x0400
#define PNG_RGBA               0x0800
#define PNG_EXPAND             0x1000
#define PNG_GAMMA              0x2000
#define PNG_GRAY_TO_RGB        0x4000
#define PNG_FILLER             0x8000L
#define PNG_PACKSWAP          0x10000L
#define PNG_SWAP_ALPHA        0x20000L
#define PNG_STRIP_ALPHA       0x40000L
#define PNG_INVERT_ALPHA      0x80000L
#define PNG_USER_TRANSFORM   0x100000L
#define PNG_RGB_TO_GRAY_ERR  0x200000L
#define PNG_RGB_TO_GRAY_WARN 0x400000L
#define PNG_RGB_TO_GRAY      0x600000L  /* two bits, RGB_TO_GRAY_ERR|WARN */
					   /*    0x800000L     Unused */
#define PNG_ADD_ALPHA       0x1000000L  /* Added to libpng-1.2.7 */
#define PNG_EXPAND_tRNS     0x2000000L  /* Added to libpng-1.2.9 */
					   /*   0x4000000L  unused */
					   /*   0x8000000L  unused */
					   /*  0x10000000L  unused */
					   /*  0x20000000L  unused */
					   /*  0x40000000L  unused */

/* flags for png_create_struct */
#define PNG_STRUCT_PNG   0x0001
#define PNG_STRUCT_INFO  0x0002

/* Scaling factor for filter heuristic weighting calculations */
#define PNG_WEIGHT_SHIFT 8
#define PNG_WEIGHT_FACTOR (1<<(PNG_WEIGHT_SHIFT))
#define PNG_COST_SHIFT 3
#define PNG_COST_FACTOR (1<<(PNG_COST_SHIFT))

/* flags for the png_ptr->flags rather than declaring a byte for each one */
#define PNG_FLAG_ZLIB_CUSTOM_STRATEGY     0x0001
#define PNG_FLAG_ZLIB_CUSTOM_LEVEL        0x0002
#define PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL    0x0004
#define PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS  0x0008
#define PNG_FLAG_ZLIB_CUSTOM_METHOD       0x0010
#define PNG_FLAG_ZLIB_FINISHED            0x0020
#define PNG_FLAG_ROW_INIT                 0x0040
#define PNG_FLAG_FILLER_AFTER             0x0080
#define PNG_FLAG_CRC_ANCILLARY_USE        0x0100
#define PNG_FLAG_CRC_ANCILLARY_NOWARN     0x0200
#define PNG_FLAG_CRC_CRITICAL_USE         0x0400
#define PNG_FLAG_CRC_CRITICAL_IGNORE      0x0800
#define PNG_FLAG_FREE_PLTE                0x1000
#define PNG_FLAG_FREE_TRNS                0x2000
#define PNG_FLAG_FREE_HIST                0x4000
#define PNG_FLAG_KEEP_UNKNOWN_CHUNKS      0x8000L
#define PNG_FLAG_KEEP_UNSAFE_CHUNKS       0x10000L
#define PNG_FLAG_LIBRARY_MISMATCH         0x20000L
#define PNG_FLAG_STRIP_ERROR_NUMBERS      0x40000L
#define PNG_FLAG_STRIP_ERROR_TEXT         0x80000L
#define PNG_FLAG_MALLOC_NULL_MEM_OK       0x100000L
#define PNG_FLAG_ADD_ALPHA                0x200000L  /* Added to libpng-1.2.8 */
#define PNG_FLAG_STRIP_ALPHA              0x400000L  /* Added to libpng-1.2.8 */
								  /*      0x800000L  unused */
								  /*     0x1000000L  unused */
								  /*     0x2000000L  unused */
								  /*     0x4000000L  unused */
								  /*     0x8000000L  unused */
								  /*    0x10000000L  unused */
								  /*    0x20000000L  unused */
								  /*    0x40000000L  unused */

#define PNG_FLAG_CRC_ANCILLARY_MASK (PNG_FLAG_CRC_ANCILLARY_USE | \
									 PNG_FLAG_CRC_ANCILLARY_NOWARN)

#define PNG_FLAG_CRC_CRITICAL_MASK  (PNG_FLAG_CRC_CRITICAL_USE | \
									 PNG_FLAG_CRC_CRITICAL_IGNORE)

#define PNG_FLAG_CRC_MASK           (PNG_FLAG_CRC_ANCILLARY_MASK | \
									 PNG_FLAG_CRC_CRITICAL_MASK)

/* save typing and make code easier to understand */

#define PNG_COLOR_DIST(c1, c2) (abs((int)((c1).red) - (int)((c2).red)) + \
   abs((int)((c1).green) - (int)((c2).green)) + \
   abs((int)((c1).blue) - (int)((c2).blue)))

/* Added to libpng-1.2.6 JB */
#define PNG_ROWBYTES(pixel_bits, width) \
	((pixel_bits) >= 8 ? \
	((width) * (((png_uint_32)(pixel_bits)) >> 3)) : \
	(( ((width) * ((png_uint_32)(pixel_bits))) + 7) >> 3) )

/* PNG_OUT_OF_RANGE returns true if value is outside the range
   ideal-delta..ideal+delta.  Each argument is evaluated twice.
   "ideal" and "delta" should be constants, normally simple
   integers, "value" a variable. Added to libpng-1.2.6 JB */
#define PNG_OUT_OF_RANGE(value, ideal, delta) \
		( (value) < (ideal)-(delta) || (value) > (ideal)+(delta) )

/* variables declared in png.c - only it needs to define PNG_NO_EXTERN */
#if !defined(PNG_NO_EXTERN) || defined(PNG_ALWAYS_EXTERN)
/* place to hold the signature string for a PNG file. */
#ifdef PNG_USE_GLOBAL_ARRAYS
   PNG_EXPORT_VAR (PNG_CONST png_byte FARDATA) png_sig[8];
#else
#endif
#endif /* PNG_NO_EXTERN */

/* Constant strings for known chunk types.  If you need to add a chunk,
 * define the name here, and add an invocation of the macro in png.c and
 * wherever it's needed.
 */
#define PNG_IHDR png_byte png_IHDR[5] = { 73,  72,  68,  82, '\0'}
#define PNG_IDAT png_byte png_IDAT[5] = { 73,  68,  65,  84, '\0'}
#define PNG_IEND png_byte png_IEND[5] = { 73,  69,  78,  68, '\0'}
#define PNG_PLTE png_byte png_PLTE[5] = { 80,  76,  84,  69, '\0'}
#define PNG_bKGD png_byte png_bKGD[5] = { 98,  75,  71,  68, '\0'}
#define PNG_cHRM png_byte png_cHRM[5] = { 99,  72,  82,  77, '\0'}
#define PNG_gAMA png_byte png_gAMA[5] = {103,  65,  77,  65, '\0'}
#define PNG_hIST png_byte png_hIST[5] = {104,  73,  83,  84, '\0'}
#define PNG_iCCP png_byte png_iCCP[5] = {105,  67,  67,  80, '\0'}
#define PNG_iTXt png_byte png_iTXt[5] = {105,  84,  88, 116, '\0'}
#define PNG_oFFs png_byte png_oFFs[5] = {111,  70,  70, 115, '\0'}
#define PNG_pCAL png_byte png_pCAL[5] = {112,  67,  65,  76, '\0'}
#define PNG_sCAL png_byte png_sCAL[5] = {115,  67,  65,  76, '\0'}
#define PNG_pHYs png_byte png_pHYs[5] = {112,  72,  89, 115, '\0'}
#define PNG_sBIT png_byte png_sBIT[5] = {115,  66,  73,  84, '\0'}
#define PNG_sPLT png_byte png_sPLT[5] = {115,  80,  76,  84, '\0'}
#define PNG_sRGB png_byte png_sRGB[5] = {115,  82,  71,  66, '\0'}
#define PNG_tEXt png_byte png_tEXt[5] = {116,  69,  88, 116, '\0'}
#define PNG_tIME png_byte png_tIME[5] = {116,  73,  77,  69, '\0'}
#define PNG_tRNS png_byte png_tRNS[5] = {116,  82,  78,  83, '\0'}
#define PNG_zTXt png_byte png_zTXt[5] = {122,  84,  88, 116, '\0'}

#ifdef PNG_USE_GLOBAL_ARRAYS
PNG_EXPORT_VAR (png_byte FARDATA) png_IHDR[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_IDAT[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_IEND[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_PLTE[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_bKGD[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_cHRM[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_gAMA[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_hIST[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_iCCP[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_iTXt[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_oFFs[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_pCAL[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_sCAL[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_pHYs[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_sBIT[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_sPLT[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_sRGB[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_tEXt[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_tIME[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_tRNS[5];
PNG_EXPORT_VAR (png_byte FARDATA) png_zTXt[5];
#endif /* PNG_USE_GLOBAL_ARRAYS */

#if defined(PNG_1_0_X) || defined (PNG_1_2_X)
/* Initialize png_ptr struct for reading, and allocate any other memory.
 * (old interface - DEPRECATED - use png_create_read_struct instead).
 */
extern PNG_EXPORT(void,png_read_init) PNGARG((png_structp png_ptr));
#undef png_read_init
#define png_read_init(png_ptr) png_read_init_3(&png_ptr, \
	PNG_LIBPNG_VER_STRING,  png_sizeof(png_struct));
#endif

extern PNG_EXPORT(void,png_read_init_3) PNGARG((png_structpp ptr_ptr,
	png_const_charp user_png_ver, png_size_t png_struct_size));
#if defined(PNG_1_0_X) || defined (PNG_1_2_X)
extern PNG_EXPORT(void,png_read_init_2) PNGARG((png_structp png_ptr,
	png_const_charp user_png_ver, png_size_t png_struct_size, png_size_t
	png_info_size));
#endif

#if defined(PNG_1_0_X) || defined (PNG_1_2_X)
/* Initialize png_ptr struct for writing, and allocate any other memory.
 * (old interface - DEPRECATED - use png_create_write_struct instead).
 */
extern PNG_EXPORT(void,png_write_init) PNGARG((png_structp png_ptr));
#undef png_write_init
#define png_write_init(png_ptr) png_write_init_3(&png_ptr, \
	PNG_LIBPNG_VER_STRING, png_sizeof(png_struct));
#endif

extern PNG_EXPORT(void,png_write_init_3) PNGARG((png_structpp ptr_ptr,
	png_const_charp user_png_ver, png_size_t png_struct_size));
extern PNG_EXPORT(void,png_write_init_2) PNGARG((png_structp png_ptr,
	png_const_charp user_png_ver, png_size_t png_struct_size, png_size_t
	png_info_size));

/* Allocate memory for an internal libpng struct */
PNG_EXTERN png_voidp png_create_struct PNGARG((int type));

/* Free memory from internal libpng struct */
PNG_EXTERN void png_destroy_struct PNGARG((png_voidp struct_ptr));

PNG_EXTERN png_voidp png_create_struct_2 PNGARG((int type, png_malloc_ptr
  malloc_fn, png_voidp mem_ptr));
PNG_EXTERN void png_destroy_struct_2 PNGARG((png_voidp struct_ptr,
   png_free_ptr free_fn, png_voidp mem_ptr));

/* Free any memory that info_ptr points to and reset struct. */
PNG_EXTERN void png_info_destroy PNGARG((png_structp png_ptr,
   png_infop info_ptr));

#ifndef PNG_1_0_X
/* Function to allocate memory for zlib. */
PNG_EXTERN voidpf png_zalloc PNGARG((voidpf png_ptr, uInt items, uInt size));

/* Function to free memory for zlib */
PNG_EXTERN void png_zfree PNGARG((voidpf png_ptr, voidpf ptr));

#ifdef PNG_SIZE_T
/* Function to convert a sizeof an item to png_sizeof item */
   PNG_EXTERN png_size_t PNGAPI png_convert_size PNGARG((size_t size));
#endif

/* Next four functions are used internally as callbacks.  PNGAPI is required
 * but not PNG_EXPORT.  PNGAPI added at libpng version 1.2.3. */

PNG_EXTERN void PNGAPI png_default_read_data PNGARG((png_structp png_ptr,
   png_bytep data, png_size_t length));

#ifdef PNG_PROGRESSIVE_READ_SUPPORTED
PNG_EXTERN void PNGAPI png_push_fill_buffer PNGARG((png_structp png_ptr,
   png_bytep buffer, png_size_t length));
#endif

PNG_EXTERN void PNGAPI png_default_write_data PNGARG((png_structp png_ptr,
   png_bytep data, png_size_t length));

#if defined(PNG_WRITE_FLUSH_SUPPORTED)
#if !defined(PNG_NO_STDIO)
PNG_EXTERN void PNGAPI png_default_flush PNGARG((png_structp png_ptr));
#endif
#endif
#else /* PNG_1_0_X */
#ifdef PNG_PROGRESSIVE_READ_SUPPORTED
PNG_EXTERN void png_push_fill_buffer PNGARG((png_structp png_ptr,
   png_bytep buffer, png_size_t length));
#endif
#endif /* PNG_1_0_X */

/* Reset the CRC variable */
PNG_EXTERN void png_reset_crc PNGARG((png_structp png_ptr));

/* Write the "data" buffer to whatever output you are using. */
PNG_EXTERN void png_write_data PNGARG((png_structp png_ptr, png_bytep data,
   png_size_t length));

/* Read data from whatever input you are using into the "data" buffer */
PNG_EXTERN void png_read_data PNGARG((png_structp png_ptr, png_bytep data,
   png_size_t length));

/* Read bytes into buf, and update png_ptr->crc */
PNG_EXTERN void png_crc_read PNGARG((png_structp png_ptr, png_bytep buf,
   png_size_t length));

/* Decompress data in a chunk that uses compression */
#if defined(PNG_zTXt_SUPPORTED) || defined(PNG_iTXt_SUPPORTED) || \
	defined(PNG_iCCP_SUPPORTED) || defined(PNG_sPLT_SUPPORTED)
PNG_EXTERN png_charp png_decompress_chunk PNGARG((png_structp png_ptr,
   int comp_type, png_charp chunkdata, png_size_t chunklength,
   png_size_t prefix_length, png_size_t *data_length));
#endif

/* Read "skip" bytes, read the file crc, and (optionally) verify png_ptr->crc */
PNG_EXTERN int png_crc_finish PNGARG((png_structp png_ptr, png_uint_32 skip));

/* Read the CRC from the file and compare it to the libpng calculated CRC */
PNG_EXTERN int png_crc_error PNGARG((png_structp png_ptr));

/* Calculate the CRC over a section of data.  Note that we are only
 * passing a maximum of 64K on systems that have this as a memory limit,
 * since this is the maximum buffer size we can specify.
 */
PNG_EXTERN void png_calculate_crc PNGARG((png_structp png_ptr, png_bytep ptr,
   png_size_t length));

#if defined(PNG_WRITE_FLUSH_SUPPORTED)
PNG_EXTERN void png_flush PNGARG((png_structp png_ptr));
#endif

/* simple function to write the signature */
PNG_EXTERN void png_write_sig PNGARG((png_structp png_ptr));

/* write various chunks */

/* Write the IHDR chunk, and update the png_struct with the necessary
 * information.
 */
PNG_EXTERN void png_write_IHDR PNGARG((png_structp png_ptr, png_uint_32 width,
   png_uint_32 height,
   int bit_depth, int color_type, int compression_method, int filter_method,
   int interlace_method));

PNG_EXTERN void png_write_PLTE PNGARG((png_structp png_ptr, png_colorp palette,
   png_uint_32 num_pal));

PNG_EXTERN void png_write_IDAT PNGARG((png_structp png_ptr, png_bytep data,
   png_size_t length));

PNG_EXTERN void png_write_IEND PNGARG((png_structp png_ptr));

#if defined(PNG_WRITE_gAMA_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
PNG_EXTERN void png_write_gAMA PNGARG((png_structp png_ptr, double file_gamma));
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
PNG_EXTERN void png_write_gAMA_fixed PNGARG((png_structp png_ptr, png_fixed_point
	file_gamma));
#endif
#endif

#if defined(PNG_WRITE_sBIT_SUPPORTED)
PNG_EXTERN void png_write_sBIT PNGARG((png_structp png_ptr, png_color_8p sbit,
   int color_type));
#endif

#if defined(PNG_WRITE_cHRM_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
PNG_EXTERN void png_write_cHRM PNGARG((png_structp png_ptr,
   double white_x, double white_y,
   double red_x, double red_y, double green_x, double green_y,
   double blue_x, double blue_y));
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
PNG_EXTERN void png_write_cHRM_fixed PNGARG((png_structp png_ptr,
   png_fixed_point int_white_x, png_fixed_point int_white_y,
   png_fixed_point int_red_x, png_fixed_point int_red_y, png_fixed_point
   int_green_x, png_fixed_point int_green_y, png_fixed_point int_blue_x,
   png_fixed_point int_blue_y));
#endif
#endif

#if defined(PNG_WRITE_sRGB_SUPPORTED)
PNG_EXTERN void png_write_sRGB PNGARG((png_structp png_ptr,
   int intent));
#endif

#if defined(PNG_WRITE_iCCP_SUPPORTED)
PNG_EXTERN void png_write_iCCP PNGARG((png_structp png_ptr,
   png_charp name, int compression_type,
   png_charp profile, int proflen));
   /* Note to maintainer: profile should be png_bytep */
#endif

#if defined(PNG_WRITE_sPLT_SUPPORTED)
PNG_EXTERN void png_write_sPLT PNGARG((png_structp png_ptr,
   png_sPLT_tp palette));
#endif

#if defined(PNG_WRITE_tRNS_SUPPORTED)
PNG_EXTERN void png_write_tRNS PNGARG((png_structp png_ptr, png_bytep trans,
   png_color_16p values, int number, int color_type));
#endif

#if defined(PNG_WRITE_bKGD_SUPPORTED)
PNG_EXTERN void png_write_bKGD PNGARG((png_structp png_ptr,
   png_color_16p values, int color_type));
#endif

#if defined(PNG_WRITE_hIST_SUPPORTED)
PNG_EXTERN void png_write_hIST PNGARG((png_structp png_ptr, png_uint_16p hist,
   int num_hist));
#endif

#if defined(PNG_WRITE_TEXT_SUPPORTED) || defined(PNG_WRITE_pCAL_SUPPORTED) || \
	defined(PNG_WRITE_iCCP_SUPPORTED) || defined(PNG_WRITE_sPLT_SUPPORTED)
PNG_EXTERN png_size_t png_check_keyword PNGARG((png_structp png_ptr,
   png_charp key, png_charpp new_key));
#endif

#if defined(PNG_WRITE_tEXt_SUPPORTED)
PNG_EXTERN void png_write_tEXt PNGARG((png_structp png_ptr, png_charp key,
   png_charp text, png_size_t text_len));
#endif

#if defined(PNG_WRITE_zTXt_SUPPORTED)
PNG_EXTERN void png_write_zTXt PNGARG((png_structp png_ptr, png_charp key,
   png_charp text, png_size_t text_len, int compression));
#endif

#if defined(PNG_WRITE_iTXt_SUPPORTED)
PNG_EXTERN void png_write_iTXt PNGARG((png_structp png_ptr,
   int compression, png_charp key, png_charp lang, png_charp lang_key,
   png_charp text));
#endif

#if defined(PNG_TEXT_SUPPORTED)  /* Added at version 1.0.14 and 1.2.4 */
PNG_EXTERN int png_set_text_2 PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_textp text_ptr, int num_text));
#endif

#if defined(PNG_WRITE_oFFs_SUPPORTED)
PNG_EXTERN void png_write_oFFs PNGARG((png_structp png_ptr,
   png_int_32 x_offset, png_int_32 y_offset, int unit_type));
#endif

#if defined(PNG_WRITE_pCAL_SUPPORTED)
PNG_EXTERN void png_write_pCAL PNGARG((png_structp png_ptr, png_charp purpose,
   png_int_32 X0, png_int_32 X1, int type, int nparams,
   png_charp units, png_charpp params));
#endif

#if defined(PNG_WRITE_pHYs_SUPPORTED)
PNG_EXTERN void png_write_pHYs PNGARG((png_structp png_ptr,
   png_uint_32 x_pixels_per_unit, png_uint_32 y_pixels_per_unit,
   int unit_type));
#endif

#if defined(PNG_WRITE_tIME_SUPPORTED)
PNG_EXTERN void png_write_tIME PNGARG((png_structp png_ptr,
   png_timep mod_time));
#endif

#if defined(PNG_WRITE_sCAL_SUPPORTED)
#if defined(PNG_FLOATING_POINT_SUPPORTED) && !defined(PNG_NO_STDIO)
PNG_EXTERN void png_write_sCAL PNGARG((png_structp png_ptr,
   int unit, double width, double height));
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
PNG_EXTERN void png_write_sCAL_s PNGARG((png_structp png_ptr,
   int unit, png_charp width, png_charp height));
#endif
#endif
#endif

/* Called when finished processing a row of data */
PNG_EXTERN void png_write_finish_row PNGARG((png_structp png_ptr));

/* Internal use only.   Called before first row of data */
PNG_EXTERN void png_write_start_row PNGARG((png_structp png_ptr));

#if defined(PNG_READ_GAMMA_SUPPORTED)
PNG_EXTERN void png_build_gamma_table PNGARG((png_structp png_ptr));
#endif

/* combine a row of data, dealing with alpha, etc. if requested */
PNG_EXTERN void png_combine_row PNGARG((png_structp png_ptr, png_bytep row,
   int mask));

#if defined(PNG_READ_INTERLACING_SUPPORTED)
/* expand an interlaced row */
/* OLD pre-1.0.9 interface:
PNG_EXTERN void png_do_read_interlace PNGARG((png_row_infop row_info,
   png_bytep row, int pass, png_uint_32 transformations));
 */
PNG_EXTERN void png_do_read_interlace PNGARG((png_structp png_ptr));
#endif

/* GRR TO DO (2.0 or whenever):  simplify other internal calling interfaces */

#if defined(PNG_WRITE_INTERLACING_SUPPORTED)
/* grab pixels out of a row for an interlaced pass */
PNG_EXTERN void png_do_write_interlace PNGARG((png_row_infop row_info,
   png_bytep row, int pass));
#endif

/* unfilter a row */
PNG_EXTERN void png_read_filter_row PNGARG((png_structp png_ptr,
   png_row_infop row_info, png_bytep row, png_bytep prev_row, int filter));

/* Choose the best filter to use and filter the row data */
PNG_EXTERN void png_write_find_filter PNGARG((png_structp png_ptr,
   png_row_infop row_info));

/* Write out the filtered row. */
PNG_EXTERN void png_write_filtered_row PNGARG((png_structp png_ptr,
   png_bytep filtered_row));
/* finish a row while reading, dealing with interlacing passes, etc. */
PNG_EXTERN void png_read_finish_row PNGARG((png_structp png_ptr));

/* initialize the row buffers, etc. */
PNG_EXTERN void png_read_start_row PNGARG((png_structp png_ptr));
/* optional call to update the users info structure */
PNG_EXTERN void png_read_transform_info PNGARG((png_structp png_ptr,
   png_infop info_ptr));

/* these are the functions that do the transformations */
#if defined(PNG_READ_FILLER_SUPPORTED)
PNG_EXTERN void png_do_read_filler PNGARG((png_row_infop row_info,
   png_bytep row, png_uint_32 filler, png_uint_32 flags));
#endif

#if defined(PNG_READ_SWAP_ALPHA_SUPPORTED)
PNG_EXTERN void png_do_read_swap_alpha PNGARG((png_row_infop row_info,
   png_bytep row));
#endif

#if defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
PNG_EXTERN void png_do_write_swap_alpha PNGARG((png_row_infop row_info,
   png_bytep row));
#endif

#if defined(PNG_READ_INVERT_ALPHA_SUPPORTED)
PNG_EXTERN void png_do_read_invert_alpha PNGARG((png_row_infop row_info,
   png_bytep row));
#endif

#if defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
PNG_EXTERN void png_do_write_invert_alpha PNGARG((png_row_infop row_info,
   png_bytep row));
#endif

#if defined(PNG_WRITE_FILLER_SUPPORTED) || \
	defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
PNG_EXTERN void png_do_strip_filler PNGARG((png_row_infop row_info,
   png_bytep row, png_uint_32 flags));
#endif

#if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)
PNG_EXTERN void png_do_swap PNGARG((png_row_infop row_info, png_bytep row));
#endif

#if defined(PNG_READ_PACKSWAP_SUPPORTED) || defined(PNG_WRITE_PACKSWAP_SUPPORTED)
PNG_EXTERN void png_do_packswap PNGARG((png_row_infop row_info, png_bytep row));
#endif

#if defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
PNG_EXTERN int png_do_rgb_to_gray PNGARG((png_structp png_ptr, png_row_infop
   row_info, png_bytep row));
#endif

#if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
PNG_EXTERN void png_do_gray_to_rgb PNGARG((png_row_infop row_info,
   png_bytep row));
#endif

#if defined(PNG_READ_PACK_SUPPORTED)
PNG_EXTERN void png_do_unpack PNGARG((png_row_infop row_info, png_bytep row));
#endif

#if defined(PNG_READ_SHIFT_SUPPORTED)
PNG_EXTERN void png_do_unshift PNGARG((png_row_infop row_info, png_bytep row,
   png_color_8p sig_bits));
#endif

#if defined(PNG_READ_INVERT_SUPPORTED) || defined(PNG_WRITE_INVERT_SUPPORTED)
PNG_EXTERN void png_do_invert PNGARG((png_row_infop row_info, png_bytep row));
#endif

#if defined(PNG_READ_16_TO_8_SUPPORTED)
PNG_EXTERN void png_do_chop PNGARG((png_row_infop row_info, png_bytep row));
#endif

#if defined(PNG_READ_DITHER_SUPPORTED)
PNG_EXTERN void png_do_dither PNGARG((png_row_infop row_info,
   png_bytep row, png_bytep palette_lookup, png_bytep dither_lookup));

#  if defined(PNG_CORRECT_PALETTE_SUPPORTED)
PNG_EXTERN void png_correct_palette PNGARG((png_structp png_ptr,
   png_colorp palette, int num_palette));
#  endif
#endif

#if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)
PNG_EXTERN void png_do_bgr PNGARG((png_row_infop row_info, png_bytep row));
#endif

#if defined(PNG_WRITE_PACK_SUPPORTED)
PNG_EXTERN void png_do_pack PNGARG((png_row_infop row_info,
   png_bytep row, png_uint_32 bit_depth));
#endif

#if defined(PNG_WRITE_SHIFT_SUPPORTED)
PNG_EXTERN void png_do_shift PNGARG((png_row_infop row_info, png_bytep row,
   png_color_8p bit_depth));
#endif

#if defined(PNG_READ_BACKGROUND_SUPPORTED)
#if defined(PNG_READ_GAMMA_SUPPORTED)
PNG_EXTERN void png_do_background PNGARG((png_row_infop row_info, png_bytep row,
   png_color_16p trans_values, png_color_16p background,
   png_color_16p background_1,
   png_bytep gamma_table, png_bytep gamma_from_1, png_bytep gamma_to_1,
   png_uint_16pp gamma_16, png_uint_16pp gamma_16_from_1,
   png_uint_16pp gamma_16_to_1, int gamma_shift));
#else
PNG_EXTERN void png_do_background PNGARG((png_row_infop row_info, png_bytep row,
   png_color_16p trans_values, png_color_16p background));
#endif
#endif

#if defined(PNG_READ_GAMMA_SUPPORTED)
PNG_EXTERN void png_do_gamma PNGARG((png_row_infop row_info, png_bytep row,
   png_bytep gamma_table, png_uint_16pp gamma_16_table,
   int gamma_shift));
#endif

#if defined(PNG_READ_EXPAND_SUPPORTED)
PNG_EXTERN void png_do_expand_palette PNGARG((png_row_infop row_info,
   png_bytep row, png_colorp palette, png_bytep trans, int num_trans));
PNG_EXTERN void png_do_expand PNGARG((png_row_infop row_info,
   png_bytep row, png_color_16p trans_value));
#endif

/* The following decodes the appropriate chunks, and does error correction,
 * then calls the appropriate callback for the chunk if it is valid.
 */

/* decode the IHDR chunk */
PNG_EXTERN void png_handle_IHDR PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
PNG_EXTERN void png_handle_PLTE PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
PNG_EXTERN void png_handle_IEND PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));

#if defined(PNG_READ_bKGD_SUPPORTED)
PNG_EXTERN void png_handle_bKGD PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_cHRM_SUPPORTED)
PNG_EXTERN void png_handle_cHRM PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_gAMA_SUPPORTED)
PNG_EXTERN void png_handle_gAMA PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_hIST_SUPPORTED)
PNG_EXTERN void png_handle_hIST PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_iCCP_SUPPORTED)
extern void png_handle_iCCP PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif /* PNG_READ_iCCP_SUPPORTED */

#if defined(PNG_READ_iTXt_SUPPORTED)
PNG_EXTERN void png_handle_iTXt PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_oFFs_SUPPORTED)
PNG_EXTERN void png_handle_oFFs PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_pCAL_SUPPORTED)
PNG_EXTERN void png_handle_pCAL PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_pHYs_SUPPORTED)
PNG_EXTERN void png_handle_pHYs PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_sBIT_SUPPORTED)
PNG_EXTERN void png_handle_sBIT PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_sCAL_SUPPORTED)
PNG_EXTERN void png_handle_sCAL PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_sPLT_SUPPORTED)
extern void png_handle_sPLT PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif /* PNG_READ_sPLT_SUPPORTED */

#if defined(PNG_READ_sRGB_SUPPORTED)
PNG_EXTERN void png_handle_sRGB PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_tEXt_SUPPORTED)
PNG_EXTERN void png_handle_tEXt PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_tIME_SUPPORTED)
PNG_EXTERN void png_handle_tIME PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_tRNS_SUPPORTED)
PNG_EXTERN void png_handle_tRNS PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

#if defined(PNG_READ_zTXt_SUPPORTED)
PNG_EXTERN void png_handle_zTXt PNGARG((png_structp png_ptr, png_infop info_ptr,
   png_uint_32 length));
#endif

PNG_EXTERN void png_handle_unknown PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_32 length));

PNG_EXTERN void png_check_chunk_name PNGARG((png_structp png_ptr,
   png_bytep chunk_name));

/* handle the transformations for reading and writing */
PNG_EXTERN void png_do_read_transformations PNGARG((png_structp png_ptr));
PNG_EXTERN void png_do_write_transformations PNGARG((png_structp png_ptr));

PNG_EXTERN void png_init_read_transformations PNGARG((png_structp png_ptr));

#ifdef PNG_PROGRESSIVE_READ_SUPPORTED
PNG_EXTERN void png_push_read_chunk PNGARG((png_structp png_ptr,
   png_infop info_ptr));
PNG_EXTERN void png_push_read_sig PNGARG((png_structp png_ptr,
   png_infop info_ptr));
PNG_EXTERN void png_push_check_crc PNGARG((png_structp png_ptr));
PNG_EXTERN void png_push_crc_skip PNGARG((png_structp png_ptr,
   png_uint_32 length));
PNG_EXTERN void png_push_crc_finish PNGARG((png_structp png_ptr));
PNG_EXTERN void png_push_save_buffer PNGARG((png_structp png_ptr));
PNG_EXTERN void png_push_restore_buffer PNGARG((png_structp png_ptr,
   png_bytep buffer, png_size_t buffer_length));
PNG_EXTERN void png_push_read_IDAT PNGARG((png_structp png_ptr));
PNG_EXTERN void png_process_IDAT_data PNGARG((png_structp png_ptr,
   png_bytep buffer, png_size_t buffer_length));
PNG_EXTERN void png_push_process_row PNGARG((png_structp png_ptr));
PNG_EXTERN void png_push_handle_unknown PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_32 length));
PNG_EXTERN void png_push_have_info PNGARG((png_structp png_ptr,
   png_infop info_ptr));
PNG_EXTERN void png_push_have_end PNGARG((png_structp png_ptr,
   png_infop info_ptr));
PNG_EXTERN void png_push_have_row PNGARG((png_structp png_ptr, png_bytep row));
PNG_EXTERN void png_push_read_end PNGARG((png_structp png_ptr,
   png_infop info_ptr));
PNG_EXTERN void png_process_some_data PNGARG((png_structp png_ptr,
   png_infop info_ptr));
PNG_EXTERN void png_read_push_finish_row PNGARG((png_structp png_ptr));
#if defined(PNG_READ_tEXt_SUPPORTED)
PNG_EXTERN void png_push_handle_tEXt PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_32 length));
PNG_EXTERN void png_push_read_tEXt PNGARG((png_structp png_ptr,
   png_infop info_ptr));
#endif
#if defined(PNG_READ_zTXt_SUPPORTED)
PNG_EXTERN void png_push_handle_zTXt PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_32 length));
PNG_EXTERN void png_push_read_zTXt PNGARG((png_structp png_ptr,
   png_infop info_ptr));
#endif
#if defined(PNG_READ_iTXt_SUPPORTED)
PNG_EXTERN void png_push_handle_iTXt PNGARG((png_structp png_ptr,
   png_infop info_ptr, png_uint_32 length));
PNG_EXTERN void png_push_read_iTXt PNGARG((png_structp png_ptr,
   png_infop info_ptr));
#endif

#endif /* PNG_PROGRESSIVE_READ_SUPPORTED */

#ifdef PNG_MNG_FEATURES_SUPPORTED
PNG_EXTERN void png_do_read_intrapixel PNGARG((png_row_infop row_info,
   png_bytep row));
PNG_EXTERN void png_do_write_intrapixel PNGARG((png_row_infop row_info,
   png_bytep row));
#endif

#if defined(PNG_ASSEMBLER_CODE_SUPPORTED)
#if defined(PNG_MMX_CODE_SUPPORTED)
/* png.c */ /* PRIVATE */
PNG_EXTERN void png_init_mmx_flags PNGARG((png_structp png_ptr));
#endif
#endif

#if defined(PNG_INCH_CONVERSIONS) && defined(PNG_FLOATING_POINT_SUPPORTED)
PNG_EXTERN png_uint_32 png_get_pixels_per_inch PNGARG((png_structp png_ptr,
png_infop info_ptr));

PNG_EXTERN png_uint_32 png_get_x_pixels_per_inch PNGARG((png_structp png_ptr,
png_infop info_ptr));

PNG_EXTERN png_uint_32 png_get_y_pixels_per_inch PNGARG((png_structp png_ptr,
png_infop info_ptr));

PNG_EXTERN float png_get_x_offset_inches PNGARG((png_structp png_ptr,
png_infop info_ptr));

PNG_EXTERN float png_get_y_offset_inches PNGARG((png_structp png_ptr,
png_infop info_ptr));

#if defined(PNG_pHYs_SUPPORTED)
PNG_EXTERN png_uint_32 png_get_pHYs_dpi PNGARG((png_structp png_ptr,
png_infop info_ptr, png_uint_32 *res_x, png_uint_32 *res_y, int *unit_type));
#endif /* PNG_pHYs_SUPPORTED */
#endif  /* PNG_INCH_CONVERSIONS && PNG_FLOATING_POINT_SUPPORTED */

/* Maintainer: Put new private prototypes here ^ and in libpngpf.3 */

#endif /* PNG_INTERNAL */

#ifdef __cplusplus
//}
#endif

#endif /* PNG_VERSION_INFO_ONLY */
/* do not put anything past this line */
#endif /* PNG_H */

/*** End of inlined file: png.h ***/

  #define PNG_NO_EXTERN

/*** Start of inlined file: png.c ***/
/* png.c - location for general purpose libpng functions
 *
 * Last changed in libpng 1.2.21 [October 4, 2007]
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 */

#define PNG_INTERNAL
#define PNG_NO_EXTERN

/* Generate a compiler error if there is an old png.h in the search path. */
typedef version_1_2_21 Your_png_h_is_not_version_1_2_21;

/* Version information for C files.  This had better match the version
 * string defined in png.h.  */

#ifdef PNG_USE_GLOBAL_ARRAYS
/* png_libpng_ver was changed to a function in version 1.0.5c */
PNG_CONST char png_libpng_ver[18] = PNG_LIBPNG_VER_STRING;

#ifdef PNG_READ_SUPPORTED

/* png_sig was changed to a function in version 1.0.5c */
/* Place to hold the signature string for a PNG file. */
PNG_CONST png_byte FARDATA png_sig[8] = {137, 80, 78, 71, 13, 10, 26, 10};
#endif /* PNG_READ_SUPPORTED */

/* Invoke global declarations for constant strings for known chunk types */
PNG_IHDR;
PNG_IDAT;
PNG_IEND;
PNG_PLTE;
PNG_bKGD;
PNG_cHRM;
PNG_gAMA;
PNG_hIST;
PNG_iCCP;
PNG_iTXt;
PNG_oFFs;
PNG_pCAL;
PNG_sCAL;
PNG_pHYs;
PNG_sBIT;
PNG_sPLT;
PNG_sRGB;
PNG_tEXt;
PNG_tIME;
PNG_tRNS;
PNG_zTXt;

#ifdef PNG_READ_SUPPORTED
/* arrays to facilitate easy interlacing - use pass (0 - 6) as index */

/* start of interlace block */
PNG_CONST int FARDATA png_pass_start[] = {0, 4, 0, 2, 0, 1, 0};

/* offset to next interlace block */
PNG_CONST int FARDATA png_pass_inc[] = {8, 8, 4, 4, 2, 2, 1};

/* start of interlace block in the y direction */
PNG_CONST int FARDATA png_pass_ystart[] = {0, 0, 4, 0, 2, 0, 1};

/* offset to next interlace block in the y direction */
PNG_CONST int FARDATA png_pass_yinc[] = {8, 8, 8, 4, 4, 2, 2};

/* Height of interlace block.  This is not currently used - if you need
 * it, uncomment it here and in png.h
PNG_CONST int FARDATA png_pass_height[] = {8, 8, 4, 4, 2, 2, 1};
*/

/* Mask to determine which pixels are valid in a pass */
PNG_CONST int FARDATA png_pass_mask[] = {0x80, 0x08, 0x88, 0x22, 0xaa, 0x55, 0xff};

/* Mask to determine which pixels to overwrite while displaying */
PNG_CONST int FARDATA png_pass_dsp_mask[]
   = {0xff, 0x0f, 0xff, 0x33, 0xff, 0x55, 0xff};

#endif /* PNG_READ_SUPPORTED */
#endif /* PNG_USE_GLOBAL_ARRAYS */

/* Tells libpng that we have already handled the first "num_bytes" bytes
 * of the PNG file signature.  If the PNG data is embedded into another
 * stream we can set num_bytes = 8 so that libpng will not attempt to read
 * or write any of the magic bytes before it starts on the IHDR.
 */

#ifdef PNG_READ_SUPPORTED
void PNGAPI
png_set_sig_bytes(png_structp png_ptr, int num_bytes)
{
   if(png_ptr == NULL) return;
   png_debug(1, "in png_set_sig_bytes\n");
   if (num_bytes > 8)
	  png_error(png_ptr, "Too many bytes for PNG signature.");

   png_ptr->sig_bytes = (png_byte)(num_bytes < 0 ? 0 : num_bytes);
}

/* Checks whether the supplied bytes match the PNG signature.  We allow
 * checking less than the full 8-byte signature so that those apps that
 * already read the first few bytes of a file to determine the file type
 * can simply check the remaining bytes for extra assurance.  Returns
 * an integer less than, equal to, or greater than zero if sig is found,
 * respectively, to be less than, to match, or be greater than the correct
 * PNG signature (this is the same behaviour as strcmp, memcmp, etc).
 */
int PNGAPI
png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check)
{
   png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
   if (num_to_check > 8)
	  num_to_check = 8;
   else if (num_to_check < 1)
	  return (-1);

   if (start > 7)
	  return (-1);

   if (start + num_to_check > 8)
	  num_to_check = 8 - start;

   return ((int)(png_memcmp(&sig[start], &png_signature[start], num_to_check)));
}

#if defined(PNG_1_0_X) || defined(PNG_1_2_X)
/* (Obsolete) function to check signature bytes.  It does not allow one
 * to check a partial signature.  This function might be removed in the
 * future - use png_sig_cmp().  Returns true (nonzero) if the file is PNG.
 */
int PNGAPI
png_check_sig(png_bytep sig, int num)
{
  return ((int)!png_sig_cmp(sig, (png_size_t)0, (png_size_t)num));
}
#endif
#endif /* PNG_READ_SUPPORTED */

#if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
/* Function to allocate memory for zlib and clear it to 0. */
#ifdef PNG_1_0_X
voidpf PNGAPI
#else
voidpf /* private */
#endif
png_zalloc(voidpf png_ptr, uInt items, uInt size)
{
   png_voidp ptr;
   png_structp p=(png_structp)png_ptr;
   png_uint_32 save_flags=p->flags;
   png_uint_32 num_bytes;

   if(png_ptr == NULL) return (NULL);
   if (items > PNG_UINT_32_MAX/size)
   {
	 png_warning (p, "Potential overflow in png_zalloc()");
	 return (NULL);
   }
   num_bytes = (png_uint_32)items * size;

   p->flags|=PNG_FLAG_MALLOC_NULL_MEM_OK;
   ptr = (png_voidp)png_malloc((png_structp)png_ptr, num_bytes);
   p->flags=save_flags;

#if defined(PNG_1_0_X) && !defined(PNG_NO_ZALLOC_ZERO)
   if (ptr == NULL)
	   return ((voidpf)ptr);

   if (num_bytes > (png_uint_32)0x8000L)
   {
	  png_memset(ptr, 0, (png_size_t)0x8000L);
	  png_memset((png_bytep)ptr + (png_size_t)0x8000L, 0,
		 (png_size_t)(num_bytes - (png_uint_32)0x8000L));
   }
   else
   {
	  png_memset(ptr, 0, (png_size_t)num_bytes);
   }
#endif
   return ((voidpf)ptr);
}

/* function to free memory for zlib */
#ifdef PNG_1_0_X
void PNGAPI
#else
void /* private */
#endif
png_zfree(voidpf png_ptr, voidpf ptr)
{
   png_free((png_structp)png_ptr, (png_voidp)ptr);
}

/* Reset the CRC variable to 32 bits of 1's.  Care must be taken
 * in case CRC is > 32 bits to leave the top bits 0.
 */
void /* PRIVATE */
png_reset_crc(png_structp png_ptr)
{
   png_ptr->crc = crc32(0, Z_NULL, 0);
}

/* Calculate the CRC over a section of data.  We can only pass as
 * much data to this routine as the largest single buffer size.  We
 * also check that this data will actually be used before going to the
 * trouble of calculating it.
 */
void /* PRIVATE */
png_calculate_crc(png_structp png_ptr, png_bytep ptr, png_size_t length)
{
   int need_crc = 1;

   if (png_ptr->chunk_name[0] & 0x20)                     /* ancillary */
   {
	  if ((png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_MASK) ==
		  (PNG_FLAG_CRC_ANCILLARY_USE | PNG_FLAG_CRC_ANCILLARY_NOWARN))
		 need_crc = 0;
   }
   else                                                    /* critical */
   {
	  if (png_ptr->flags & PNG_FLAG_CRC_CRITICAL_IGNORE)
		 need_crc = 0;
   }

   if (need_crc)
	  png_ptr->crc = crc32(png_ptr->crc, ptr, (uInt)length);
}

/* Allocate the memory for an info_struct for the application.  We don't
 * really need the png_ptr, but it could potentially be useful in the
 * future.  This should be used in favour of malloc(png_sizeof(png_info))
 * and png_info_init() so that applications that want to use a shared
 * libpng don't have to be recompiled if png_info changes size.
 */
png_infop PNGAPI
png_create_info_struct(png_structp png_ptr)
{
   png_infop info_ptr;

   png_debug(1, "in png_create_info_struct\n");
   if(png_ptr == NULL) return (NULL);
#ifdef PNG_USER_MEM_SUPPORTED
   info_ptr = (png_infop)png_create_struct_2(PNG_STRUCT_INFO,
	  png_ptr->malloc_fn, png_ptr->mem_ptr);
#else
   info_ptr = (png_infop)png_create_struct(PNG_STRUCT_INFO);
#endif
   if (info_ptr != NULL)
	  png_info_init_3(&info_ptr, png_sizeof(png_info));

   return (info_ptr);
}

/* This function frees the memory associated with a single info struct.
 * Normally, one would use either png_destroy_read_struct() or
 * png_destroy_write_struct() to free an info struct, but this may be
 * useful for some applications.
 */
void PNGAPI
png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr)
{
   png_infop info_ptr = NULL;
   if(png_ptr == NULL) return;

   png_debug(1, "in png_destroy_info_struct\n");
   if (info_ptr_ptr != NULL)
	  info_ptr = *info_ptr_ptr;

   if (info_ptr != NULL)
   {
	  png_info_destroy(png_ptr, info_ptr);

#ifdef PNG_USER_MEM_SUPPORTED
	  png_destroy_struct_2((png_voidp)info_ptr, png_ptr->free_fn,
		  png_ptr->mem_ptr);
#else
	  png_destroy_struct((png_voidp)info_ptr);
#endif
	  *info_ptr_ptr = NULL;
   }
}

/* Initialize the info structure.  This is now an internal function (0.89)
 * and applications using it are urged to use png_create_info_struct()
 * instead.
 */
#if defined(PNG_1_0_X) || defined(PNG_1_2_X)
#undef png_info_init
void PNGAPI
png_info_init(png_infop info_ptr)
{
   /* We only come here via pre-1.0.12-compiled applications */
   png_info_init_3(&info_ptr, 0);
}
#endif

void PNGAPI
png_info_init_3(png_infopp ptr_ptr, png_size_t png_info_struct_size)
{
   png_infop info_ptr = *ptr_ptr;

   if(info_ptr == NULL) return;

   png_debug(1, "in png_info_init_3\n");

   if(png_sizeof(png_info) > png_info_struct_size)
	 {
	   png_destroy_struct(info_ptr);
	   info_ptr = (png_infop)png_create_struct(PNG_STRUCT_INFO);
	   *ptr_ptr = info_ptr;
	 }

   /* set everything to 0 */
   png_memset(info_ptr, 0, png_sizeof (png_info));
}

#ifdef PNG_FREE_ME_SUPPORTED
void PNGAPI
png_data_freer(png_structp png_ptr, png_infop info_ptr,
   int freer, png_uint_32 mask)
{
   png_debug(1, "in png_data_freer\n");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;
   if(freer == PNG_DESTROY_WILL_FREE_DATA)
	  info_ptr->free_me |= mask;
   else if(freer == PNG_USER_WILL_FREE_DATA)
	  info_ptr->free_me &= ~mask;
   else
	  png_warning(png_ptr,
		 "Unknown freer parameter in png_data_freer.");
}
#endif

void PNGAPI
png_free_data(png_structp png_ptr, png_infop info_ptr, png_uint_32 mask,
   int num)
{
   png_debug(1, "in png_free_data\n");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

#if defined(PNG_TEXT_SUPPORTED)
/* free text item num or (if num == -1) all text items */
#ifdef PNG_FREE_ME_SUPPORTED
if ((mask & PNG_FREE_TEXT) & info_ptr->free_me)
#else
if (mask & PNG_FREE_TEXT)
#endif
{
   if (num != -1)
   {
	 if (info_ptr->text && info_ptr->text[num].key)
	 {
		 png_free(png_ptr, info_ptr->text[num].key);
		 info_ptr->text[num].key = NULL;
	 }
   }
   else
   {
	   int i;
	   for (i = 0; i < info_ptr->num_text; i++)
		   png_free_data(png_ptr, info_ptr, PNG_FREE_TEXT, i);
	   png_free(png_ptr, info_ptr->text);
	   info_ptr->text = NULL;
	   info_ptr->num_text=0;
   }
}
#endif

#if defined(PNG_tRNS_SUPPORTED)
/* free any tRNS entry */
#ifdef PNG_FREE_ME_SUPPORTED
if ((mask & PNG_FREE_TRNS) & info_ptr->free_me)
#else
if ((mask & PNG_FREE_TRNS) && (png_ptr->flags & PNG_FLAG_FREE_TRNS))
#endif
{
	png_free(png_ptr, info_ptr->trans);
	info_ptr->valid &= ~PNG_INFO_tRNS;
#ifndef PNG_FREE_ME_SUPPORTED
	png_ptr->flags &= ~PNG_FLAG_FREE_TRNS;
#endif
	info_ptr->trans = NULL;
}
#endif

#if defined(PNG_sCAL_SUPPORTED)
/* free any sCAL entry */
#ifdef PNG_FREE_ME_SUPPORTED
if ((mask & PNG_FREE_SCAL) & info_ptr->free_me)
#else
if (mask & PNG_FREE_SCAL)
#endif
{
#if defined(PNG_FIXED_POINT_SUPPORTED) && !defined(PNG_FLOATING_POINT_SUPPORTED)
	png_free(png_ptr, info_ptr->scal_s_width);
	png_free(png_ptr, info_ptr->scal_s_height);
	info_ptr->scal_s_width = NULL;
	info_ptr->scal_s_height = NULL;
#endif
	info_ptr->valid &= ~PNG_INFO_sCAL;
}
#endif

#if defined(PNG_pCAL_SUPPORTED)
/* free any pCAL entry */
#ifdef PNG_FREE_ME_SUPPORTED
if ((mask & PNG_FREE_PCAL) & info_ptr->free_me)
#else
if (mask & PNG_FREE_PCAL)
#endif
{
	png_free(png_ptr, info_ptr->pcal_purpose);
	png_free(png_ptr, info_ptr->pcal_units);
	info_ptr->pcal_purpose = NULL;
	info_ptr->pcal_units = NULL;
	if (info_ptr->pcal_params != NULL)
	{
		int i;
		for (i = 0; i < (int)info_ptr->pcal_nparams; i++)
		{
		  png_free(png_ptr, info_ptr->pcal_params[i]);
		  info_ptr->pcal_params[i]=NULL;
		}
		png_free(png_ptr, info_ptr->pcal_params);
		info_ptr->pcal_params = NULL;
	}
	info_ptr->valid &= ~PNG_INFO_pCAL;
}
#endif

#if defined(PNG_iCCP_SUPPORTED)
/* free any iCCP entry */
#ifdef PNG_FREE_ME_SUPPORTED
if ((mask & PNG_FREE_ICCP) & info_ptr->free_me)
#else
if (mask & PNG_FREE_ICCP)
#endif
{
	png_free(png_ptr, info_ptr->iccp_name);
	png_free(png_ptr, info_ptr->iccp_profile);
	info_ptr->iccp_name = NULL;
	info_ptr->iccp_profile = NULL;
	info_ptr->valid &= ~PNG_INFO_iCCP;
}
#endif

#if defined(PNG_sPLT_SUPPORTED)
/* free a given sPLT entry, or (if num == -1) all sPLT entries */
#ifdef PNG_FREE_ME_SUPPORTED
if ((mask & PNG_FREE_SPLT) & info_ptr->free_me)
#else
if (mask & PNG_FREE_SPLT)
#endif
{
   if (num != -1)
   {
	  if(info_ptr->splt_palettes)
	  {
		  png_free(png_ptr, info_ptr->splt_palettes[num].name);
		  png_free(png_ptr, info_ptr->splt_palettes[num].entries);
		  info_ptr->splt_palettes[num].name = NULL;
		  info_ptr->splt_palettes[num].entries = NULL;
	  }
   }
   else
   {
	   if(info_ptr->splt_palettes_num)
	   {
		 int i;
		 for (i = 0; i < (int)info_ptr->splt_palettes_num; i++)
			png_free_data(png_ptr, info_ptr, PNG_FREE_SPLT, i);

		 png_free(png_ptr, info_ptr->splt_palettes);
		 info_ptr->splt_palettes = NULL;
		 info_ptr->splt_palettes_num = 0;
	   }
	   info_ptr->valid &= ~PNG_INFO_sPLT;
   }
}
#endif

#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
  if(png_ptr->unknown_chunk.data)
  {
	png_free(png_ptr, png_ptr->unknown_chunk.data);
	png_ptr->unknown_chunk.data = NULL;
  }
#ifdef PNG_FREE_ME_SUPPORTED
if ((mask & PNG_FREE_UNKN) & info_ptr->free_me)
#else
if (mask & PNG_FREE_UNKN)
#endif
{
   if (num != -1)
   {
	   if(info_ptr->unknown_chunks)
	   {
		  png_free(png_ptr, info_ptr->unknown_chunks[num].data);
		  info_ptr->unknown_chunks[num].data = NULL;
	   }
   }
   else
   {
	   int i;

	   if(info_ptr->unknown_chunks_num)
	   {
		 for (i = 0; i < (int)info_ptr->unknown_chunks_num; i++)
			png_free_data(png_ptr, info_ptr, PNG_FREE_UNKN, i);

		 png_free(png_ptr, info_ptr->unknown_chunks);
		 info_ptr->unknown_chunks = NULL;
		 info_ptr->unknown_chunks_num = 0;
	   }
   }
}
#endif

#if defined(PNG_hIST_SUPPORTED)
/* free any hIST entry */
#ifdef PNG_FREE_ME_SUPPORTED
if ((mask & PNG_FREE_HIST)  & info_ptr->free_me)
#else
if ((mask & PNG_FREE_HIST) && (png_ptr->flags & PNG_FLAG_FREE_HIST))
#endif
{
	png_free(png_ptr, info_ptr->hist);
	info_ptr->hist = NULL;
	info_ptr->valid &= ~PNG_INFO_hIST;
#ifndef PNG_FREE_ME_SUPPORTED
	png_ptr->flags &= ~PNG_FLAG_FREE_HIST;
#endif
}
#endif

/* free any PLTE entry that was internally allocated */
#ifdef PNG_FREE_ME_SUPPORTED
if ((mask & PNG_FREE_PLTE) & info_ptr->free_me)
#else
if ((mask & PNG_FREE_PLTE) && (png_ptr->flags & PNG_FLAG_FREE_PLTE))
#endif
{
	png_zfree(png_ptr, info_ptr->palette);
	info_ptr->palette = NULL;
	info_ptr->valid &= ~PNG_INFO_PLTE;
#ifndef PNG_FREE_ME_SUPPORTED
	png_ptr->flags &= ~PNG_FLAG_FREE_PLTE;
#endif
	info_ptr->num_palette = 0;
}

#if defined(PNG_INFO_IMAGE_SUPPORTED)
/* free any image bits attached to the info structure */
#ifdef PNG_FREE_ME_SUPPORTED
if ((mask & PNG_FREE_ROWS) & info_ptr->free_me)
#else
if (mask & PNG_FREE_ROWS)
#endif
{
	if(info_ptr->row_pointers)
	{
	   int row;
	   for (row = 0; row < (int)info_ptr->height; row++)
	   {
		  png_free(png_ptr, info_ptr->row_pointers[row]);
		  info_ptr->row_pointers[row]=NULL;
	   }
	   png_free(png_ptr, info_ptr->row_pointers);
	   info_ptr->row_pointers=NULL;
	}
	info_ptr->valid &= ~PNG_INFO_IDAT;
}
#endif

#ifdef PNG_FREE_ME_SUPPORTED
   if(num == -1)
	 info_ptr->free_me &= ~mask;
   else
	 info_ptr->free_me &= ~(mask & ~PNG_FREE_MUL);
#endif
}

/* This is an internal routine to free any memory that the info struct is
 * pointing to before re-using it or freeing the struct itself.  Recall
 * that png_free() checks for NULL pointers for us.
 */
void /* PRIVATE */
png_info_destroy(png_structp png_ptr, png_infop info_ptr)
{
   png_debug(1, "in png_info_destroy\n");

   png_free_data(png_ptr, info_ptr, PNG_FREE_ALL, -1);

#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
   if (png_ptr->num_chunk_list)
   {
	   png_free(png_ptr, png_ptr->chunk_list);
	   png_ptr->chunk_list=NULL;
	   png_ptr->num_chunk_list=0;
   }
#endif

   png_info_init_3(&info_ptr, png_sizeof(png_info));
}
#endif /* defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED) */

/* This function returns a pointer to the io_ptr associated with the user
 * functions.  The application should free any memory associated with this
 * pointer before png_write_destroy() or png_read_destroy() are called.
 */
png_voidp PNGAPI
png_get_io_ptr(png_structp png_ptr)
{
   if(png_ptr == NULL) return (NULL);
   return (png_ptr->io_ptr);
}

#if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
#if !defined(PNG_NO_STDIO)
/* Initialize the default input/output functions for the PNG file.  If you
 * use your own read or write routines, you can call either png_set_read_fn()
 * or png_set_write_fn() instead of png_init_io().  If you have defined
 * PNG_NO_STDIO, you must use a function of your own because "FILE *" isn't
 * necessarily available.
 */
void PNGAPI
png_init_io(png_structp png_ptr, png_FILE_p fp)
{
   png_debug(1, "in png_init_io\n");
   if(png_ptr == NULL) return;
   png_ptr->io_ptr = (png_voidp)fp;
}
#endif

#if defined(PNG_TIME_RFC1123_SUPPORTED)
/* Convert the supplied time into an RFC 1123 string suitable for use in
 * a "Creation Time" or other text-based time string.
 */
png_charp PNGAPI
png_convert_to_rfc1123(png_structp png_ptr, png_timep ptime)
{
   static PNG_CONST char short_months[12][4] =
		{"Jan", "Feb", "Mar", "Apr", "May", "Jun",
		 "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};

   if(png_ptr == NULL) return (NULL);
   if (png_ptr->time_buffer == NULL)
   {
	  png_ptr->time_buffer = (png_charp)png_malloc(png_ptr, (png_uint_32)(29*
		 png_sizeof(char)));
   }

#if defined(_WIN32_WCE)
   {
	  wchar_t time_buf[29];
	  wsprintf(time_buf, TEXT("%d %S %d %02d:%02d:%02d +0000"),
		  ptime->day % 32, short_months[(ptime->month - 1) % 12],
		ptime->year, ptime->hour % 24, ptime->minute % 60,
		  ptime->second % 61);
	  WideCharToMultiByte(CP_ACP, 0, time_buf, -1, png_ptr->time_buffer, 29,
		  NULL, NULL);
   }
#else
#ifdef USE_FAR_KEYWORD
   {
	  char near_time_buf[29];
	  png_snprintf6(near_time_buf,29,"%d %s %d %02d:%02d:%02d +0000",
		  ptime->day % 32, short_months[(ptime->month - 1) % 12],
		  ptime->year, ptime->hour % 24, ptime->minute % 60,
		  ptime->second % 61);
	  png_memcpy(png_ptr->time_buffer, near_time_buf,
		  29*png_sizeof(char));
   }
#else
   png_snprintf6(png_ptr->time_buffer,29,"%d %s %d %02d:%02d:%02d +0000",
	   ptime->day % 32, short_months[(ptime->month - 1) % 12],
	   ptime->year, ptime->hour % 24, ptime->minute % 60,
	   ptime->second % 61);
#endif
#endif /* _WIN32_WCE */
   return ((png_charp)png_ptr->time_buffer);
}
#endif /* PNG_TIME_RFC1123_SUPPORTED */

#endif /* defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED) */

png_charp PNGAPI
png_get_copyright(png_structp png_ptr)
{
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
   return ((png_charp) "\n libpng version 1.2.21 - October 4, 2007\n\
   Copyright (c) 1998-2007 Glenn Randers-Pehrson\n\
   Copyright (c) 1996-1997 Andreas Dilger\n\
   Copyright (c) 1995-1996 Guy Eric Schalnat, Group 42, Inc.\n");
}

/* The following return the library version as a short string in the
 * format 1.0.0 through 99.99.99zz.  To get the version of *.h files
 * used with your application, print out PNG_LIBPNG_VER_STRING, which
 * is defined in png.h.
 * Note: now there is no difference between png_get_libpng_ver() and
 * png_get_header_ver().  Due to the version_nn_nn_nn typedef guard,
 * it is guaranteed that png.c uses the correct version of png.h.
 */
png_charp PNGAPI
png_get_libpng_ver(png_structp png_ptr)
{
   /* Version of *.c files used when building libpng */
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
   return ((png_charp) PNG_LIBPNG_VER_STRING);
}

png_charp PNGAPI
png_get_header_ver(png_structp png_ptr)
{
   /* Version of *.h files used when building libpng */
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
   return ((png_charp) PNG_LIBPNG_VER_STRING);
}

png_charp PNGAPI
png_get_header_version(png_structp png_ptr)
{
   /* Returns longer string containing both version and date */
   png_ptr = png_ptr;  /* silence compiler warning about unused png_ptr */
   return ((png_charp) PNG_HEADER_VERSION_STRING
#ifndef PNG_READ_SUPPORTED
   "     (NO READ SUPPORT)"
#endif
   "\n");
}

#if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
#ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
int PNGAPI
png_handle_as_unknown(png_structp png_ptr, png_bytep chunk_name)
{
   /* check chunk_name and return "keep" value if it's on the list, else 0 */
   int i;
   png_bytep p;
   if(png_ptr == NULL || chunk_name == NULL || png_ptr->num_chunk_list<=0)
	  return 0;
   p=png_ptr->chunk_list+png_ptr->num_chunk_list*5-5;
   for (i = png_ptr->num_chunk_list; i; i--, p-=5)
	  if (!png_memcmp(chunk_name, p, 4))
		return ((int)*(p+4));
   return 0;
}
#endif

/* This function, added to libpng-1.0.6g, is untested. */
int PNGAPI
png_reset_zstream(png_structp png_ptr)
{
   if (png_ptr == NULL) return Z_STREAM_ERROR;
   return (inflateReset(&png_ptr->zstream));
}
#endif /* defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED) */

/* This function was added to libpng-1.0.7 */
png_uint_32 PNGAPI
png_access_version_number(void)
{
   /* Version of *.c files used when building libpng */
   return((png_uint_32) PNG_LIBPNG_VER);
}

#if defined(PNG_READ_SUPPORTED) && defined(PNG_ASSEMBLER_CODE_SUPPORTED)
#if !defined(PNG_1_0_X)
/* this function was added to libpng 1.2.0 */
int PNGAPI
png_mmx_support(void)
{
   /* obsolete, to be removed from libpng-1.4.0 */
	return -1;
}
#endif /* PNG_1_0_X */
#endif /* PNG_READ_SUPPORTED && PNG_ASSEMBLER_CODE_SUPPORTED */

#if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
#ifdef PNG_SIZE_T
/* Added at libpng version 1.2.6 */
   PNG_EXTERN png_size_t PNGAPI png_convert_size PNGARG((size_t size));
png_size_t PNGAPI
png_convert_size(size_t size)
{
  if (size > (png_size_t)-1)
	 PNG_ABORT();  /* We haven't got access to png_ptr, so no png_error() */
  return ((png_size_t)size);
}
#endif /* PNG_SIZE_T */
#endif /* defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED) */

/*** End of inlined file: png.c ***/



/*** Start of inlined file: pngerror.c ***/
/* pngerror.c - stub functions for i/o and memory allocation
 *
 * Last changed in libpng 1.2.20 October 4, 2007
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 *
 * This file provides a location for all error handling.  Users who
 * need special error handling are expected to write replacement functions
 * and use png_set_error_fn() to use those functions.  See the instructions
 * at each function.
 */

#define PNG_INTERNAL

#if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
static void /* PRIVATE */
png_default_error PNGARG((png_structp png_ptr,
  png_const_charp error_message));
#ifndef PNG_NO_WARNINGS
static void /* PRIVATE */
png_default_warning PNGARG((png_structp png_ptr,
  png_const_charp warning_message));
#endif /* PNG_NO_WARNINGS */

/* This function is called whenever there is a fatal error.  This function
 * should not be changed.  If there is a need to handle errors differently,
 * you should supply a replacement error function and use png_set_error_fn()
 * to replace the error function at run-time.
 */
#ifndef PNG_NO_ERROR_TEXT
void PNGAPI
png_error(png_structp png_ptr, png_const_charp error_message)
{
#ifdef PNG_ERROR_NUMBERS_SUPPORTED
   char msg[16];
   if (png_ptr != NULL)
   {
	 if (png_ptr->flags&
	   (PNG_FLAG_STRIP_ERROR_NUMBERS|PNG_FLAG_STRIP_ERROR_TEXT))
	 {
	   if (*error_message == '#')
	   {
		   int offset;
		   for (offset=1; offset<15; offset++)
			  if (*(error_message+offset) == ' ')
				  break;
		   if (png_ptr->flags&PNG_FLAG_STRIP_ERROR_TEXT)
		   {
			  int i;
			  for (i=0; i<offset-1; i++)
				 msg[i]=error_message[i+1];
			  msg[i]='\0';
			  error_message=msg;
		   }
		   else
			  error_message+=offset;
	   }
	   else
	   {
		   if (png_ptr->flags&PNG_FLAG_STRIP_ERROR_TEXT)
		   {
			  msg[0]='0';
			  msg[1]='\0';
			  error_message=msg;
		   }
	   }
	 }
   }
#endif
   if (png_ptr != NULL && png_ptr->error_fn != NULL)
	  (*(png_ptr->error_fn))(png_ptr, error_message);

   /* If the custom handler doesn't exist, or if it returns,
	  use the default handler, which will not return. */
   png_default_error(png_ptr, error_message);
}
#else
void PNGAPI
png_err(png_structp png_ptr)
{
   if (png_ptr != NULL && png_ptr->error_fn != NULL)
	  (*(png_ptr->error_fn))(png_ptr, '\0');

   /* If the custom handler doesn't exist, or if it returns,
	  use the default handler, which will not return. */
   png_default_error(png_ptr, '\0');
}
#endif /* PNG_NO_ERROR_TEXT */

#ifndef PNG_NO_WARNINGS
/* This function is called whenever there is a non-fatal error.  This function
 * should not be changed.  If there is a need to handle warnings differently,
 * you should supply a replacement warning function and use
 * png_set_error_fn() to replace the warning function at run-time.
 */
void PNGAPI
png_warning(png_structp png_ptr, png_const_charp warning_message)
{
   int offset = 0;
   if (png_ptr != NULL)
   {
#ifdef PNG_ERROR_NUMBERS_SUPPORTED
   if (png_ptr->flags&
	 (PNG_FLAG_STRIP_ERROR_NUMBERS|PNG_FLAG_STRIP_ERROR_TEXT))
#endif
	 {
	   if (*warning_message == '#')
	   {
		   for (offset=1; offset<15; offset++)
			  if (*(warning_message+offset) == ' ')
				  break;
	   }
	 }
	 if (png_ptr != NULL && png_ptr->warning_fn != NULL)
		(*(png_ptr->warning_fn))(png_ptr, warning_message+offset);
   }
   else
	  png_default_warning(png_ptr, warning_message+offset);
}
#endif /* PNG_NO_WARNINGS */

/* These utilities are used internally to build an error message that relates
 * to the current chunk.  The chunk name comes from png_ptr->chunk_name,
 * this is used to prefix the message.  The message is limited in length
 * to 63 bytes, the name characters are output as hex digits wrapped in []
 * if the character is invalid.
 */
#define isnonalpha(c) ((c) < 65 || (c) > 122 || ((c) > 90 && (c) < 97))
/*static PNG_CONST char png_digit[16] = {
   '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
   'A', 'B', 'C', 'D', 'E', 'F'
};*/

#if !defined(PNG_NO_WARNINGS) || !defined(PNG_NO_ERROR_TEXT)
static void /* PRIVATE */
png_format_buffer(png_structp png_ptr, png_charp buffer, png_const_charp
   error_message)
{
   int iout = 0, iin = 0;

   while (iin < 4)
   {
	  int c = png_ptr->chunk_name[iin++];
	  if (isnonalpha(c))
	  {
		 buffer[iout++] = '[';
		 buffer[iout++] = png_digit[(c & 0xf0) >> 4];
		 buffer[iout++] = png_digit[c & 0x0f];
		 buffer[iout++] = ']';
	  }
	  else
	  {
		 buffer[iout++] = (png_byte)c;
	  }
   }

   if (error_message == NULL)
	  buffer[iout] = 0;
   else
   {
	  buffer[iout++] = ':';
	  buffer[iout++] = ' ';
	  png_strncpy(buffer+iout, error_message, 63);
	  buffer[iout+63] = 0;
   }
}

#ifdef PNG_READ_SUPPORTED
void PNGAPI
png_chunk_error(png_structp png_ptr, png_const_charp error_message)
{
   char msg[18+64];
   if (png_ptr == NULL)
	 png_error(png_ptr, error_message);
   else
   {
	 png_format_buffer(png_ptr, msg, error_message);
	 png_error(png_ptr, msg);
   }
}
#endif /* PNG_READ_SUPPORTED */
#endif /* !defined(PNG_NO_WARNINGS) || !defined(PNG_NO_ERROR_TEXT) */

#ifndef PNG_NO_WARNINGS
void PNGAPI
png_chunk_warning(png_structp png_ptr, png_const_charp warning_message)
{
   char msg[18+64];
   if (png_ptr == NULL)
	 png_warning(png_ptr, warning_message);
   else
   {
	 png_format_buffer(png_ptr, msg, warning_message);
	 png_warning(png_ptr, msg);
   }
}
#endif /* PNG_NO_WARNINGS */

/* This is the default error handling function.  Note that replacements for
 * this function MUST NOT RETURN, or the program will likely crash.  This
 * function is used by default, or if the program supplies NULL for the
 * error function pointer in png_set_error_fn().
 */
static void /* PRIVATE */
png_default_error(png_structp, png_const_charp error_message)
{
#ifndef PNG_NO_CONSOLE_IO
#ifdef PNG_ERROR_NUMBERS_SUPPORTED
   if (*error_message == '#')
   {
	 int offset;
	 char error_number[16];
	 for (offset=0; offset<15; offset++)
	 {
		 error_number[offset] = *(error_message+offset+1);
		 if (*(error_message+offset) == ' ')
			 break;
	 }
	 if((offset > 1) && (offset < 15))
	 {
	   error_number[offset-1]='\0';
	   fprintf(stderr, "libpng error no. %s: %s\n", error_number,
		  error_message+offset);
	 }
	 else
	   fprintf(stderr, "libpng error: %s, offset=%d\n", error_message,offset);
   }
   else
#endif
   fprintf(stderr, "libpng error: %s\n", error_message);
#endif

#ifdef PNG_SETJMP_SUPPORTED
   if (png_ptr)
   {
#  ifdef USE_FAR_KEYWORD
   {
	  jmp_buf jmpbuf;
	  png_memcpy(jmpbuf, png_ptr->jmpbuf, png_sizeof(jmp_buf));
	  longjmp(jmpbuf, 1);
   }
#  else
   longjmp(png_ptr->jmpbuf, 1);
#  endif
   }
#else
   PNG_ABORT();
#endif
#ifdef PNG_NO_CONSOLE_IO
   error_message = error_message; /* make compiler happy */
#endif
}

#ifndef PNG_NO_WARNINGS
/* This function is called when there is a warning, but the library thinks
 * it can continue anyway.  Replacement functions don't have to do anything
 * here if you don't want them to.  In the default configuration, png_ptr is
 * not used, but it is passed in case it may be useful.
 */
static void /* PRIVATE */
png_default_warning(png_structp png_ptr, png_const_charp warning_message)
{
#ifndef PNG_NO_CONSOLE_IO
#  ifdef PNG_ERROR_NUMBERS_SUPPORTED
   if (*warning_message == '#')
   {
	 int offset;
	 char warning_number[16];
	 for (offset=0; offset<15; offset++)
	 {
		warning_number[offset]=*(warning_message+offset+1);
		if (*(warning_message+offset) == ' ')
			break;
	 }
	 if((offset > 1) && (offset < 15))
	 {
	   warning_number[offset-1]='\0';
	   fprintf(stderr, "libpng warning no. %s: %s\n", warning_number,
		  warning_message+offset);
	 }
	 else
	   fprintf(stderr, "libpng warning: %s\n", warning_message);
   }
   else
#  endif
	 fprintf(stderr, "libpng warning: %s\n", warning_message);
#else
   warning_message = warning_message; /* make compiler happy */
#endif
   png_ptr = png_ptr; /* make compiler happy */
}
#endif /* PNG_NO_WARNINGS */

/* This function is called when the application wants to use another method
 * of handling errors and warnings.  Note that the error function MUST NOT
 * return to the calling routine or serious problems will occur.  The return
 * method used in the default routine calls longjmp(png_ptr->jmpbuf, 1)
 */
void PNGAPI
png_set_error_fn(png_structp png_ptr, png_voidp error_ptr,
   png_error_ptr error_fn, png_error_ptr warning_fn)
{
   if (png_ptr == NULL)
	  return;
   png_ptr->error_ptr = error_ptr;
   png_ptr->error_fn = error_fn;
   png_ptr->warning_fn = warning_fn;
}

/* This function returns a pointer to the error_ptr associated with the user
 * functions.  The application should free any memory associated with this
 * pointer before png_write_destroy and png_read_destroy are called.
 */
png_voidp PNGAPI
png_get_error_ptr(png_structp png_ptr)
{
   if (png_ptr == NULL)
	  return NULL;
   return ((png_voidp)png_ptr->error_ptr);
}

#ifdef PNG_ERROR_NUMBERS_SUPPORTED
void PNGAPI
png_set_strip_error_numbers(png_structp png_ptr, png_uint_32 strip_mode)
{
   if(png_ptr != NULL)
   {
	 png_ptr->flags &=
	   ((~(PNG_FLAG_STRIP_ERROR_NUMBERS|PNG_FLAG_STRIP_ERROR_TEXT))&strip_mode);
   }
}
#endif
#endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */

/*** End of inlined file: pngerror.c ***/


/*** Start of inlined file: pngget.c ***/
/* pngget.c - retrieval of values from info struct
 *
 * Last changed in libpng 1.2.15 January 5, 2007
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 */

#define PNG_INTERNAL

#if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)

png_uint_32 PNGAPI
png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag)
{
   if (png_ptr != NULL && info_ptr != NULL)
	  return(info_ptr->valid & flag);
   else
	  return(0);
}

png_uint_32 PNGAPI
png_get_rowbytes(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
	  return(info_ptr->rowbytes);
   else
	  return(0);
}

#if defined(PNG_INFO_IMAGE_SUPPORTED)
png_bytepp PNGAPI
png_get_rows(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
	  return(info_ptr->row_pointers);
   else
	  return(0);
}
#endif

#ifdef PNG_EASY_ACCESS_SUPPORTED
/* easy access to info, added in libpng-0.99 */
png_uint_32 PNGAPI
png_get_image_width(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
   {
	  return info_ptr->width;
   }
   return (0);
}

png_uint_32 PNGAPI
png_get_image_height(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
   {
	  return info_ptr->height;
   }
   return (0);
}

png_byte PNGAPI
png_get_bit_depth(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
   {
	  return info_ptr->bit_depth;
   }
   return (0);
}

png_byte PNGAPI
png_get_color_type(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
   {
	  return info_ptr->color_type;
   }
   return (0);
}

png_byte PNGAPI
png_get_filter_type(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
   {
	  return info_ptr->filter_type;
   }
   return (0);
}

png_byte PNGAPI
png_get_interlace_type(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
   {
	  return info_ptr->interlace_type;
   }
   return (0);
}

png_byte PNGAPI
png_get_compression_type(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
   {
	  return info_ptr->compression_type;
   }
   return (0);
}

png_uint_32 PNGAPI
png_get_x_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
#if defined(PNG_pHYs_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_pHYs)
   {
	  png_debug1(1, "in %s retrieval function\n", "png_get_x_pixels_per_meter");
	  if(info_ptr->phys_unit_type != PNG_RESOLUTION_METER)
		  return (0);
	  else return (info_ptr->x_pixels_per_unit);
   }
#else
   return (0);
#endif
   return (0);
}

png_uint_32 PNGAPI
png_get_y_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
#if defined(PNG_pHYs_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_pHYs)
   {
	  png_debug1(1, "in %s retrieval function\n", "png_get_y_pixels_per_meter");
	  if(info_ptr->phys_unit_type != PNG_RESOLUTION_METER)
		  return (0);
	  else return (info_ptr->y_pixels_per_unit);
   }
#else
   return (0);
#endif
   return (0);
}

png_uint_32 PNGAPI
png_get_pixels_per_meter(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
#if defined(PNG_pHYs_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_pHYs)
   {
	  png_debug1(1, "in %s retrieval function\n", "png_get_pixels_per_meter");
	  if(info_ptr->phys_unit_type != PNG_RESOLUTION_METER ||
		 info_ptr->x_pixels_per_unit != info_ptr->y_pixels_per_unit)
		  return (0);
	  else return (info_ptr->x_pixels_per_unit);
   }
#else
   return (0);
#endif
   return (0);
}

#ifdef PNG_FLOATING_POINT_SUPPORTED
float PNGAPI
png_get_pixel_aspect_ratio(png_structp png_ptr, png_infop info_ptr)
   {
   if (png_ptr != NULL && info_ptr != NULL)
#if defined(PNG_pHYs_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_pHYs)
   {
	  png_debug1(1, "in %s retrieval function\n", "png_get_aspect_ratio");
	  if (info_ptr->x_pixels_per_unit == 0)
		 return ((float)0.0);
	  else
		 return ((float)((float)info_ptr->y_pixels_per_unit
			/(float)info_ptr->x_pixels_per_unit));
   }
#else
   return (0.0);
#endif
   return ((float)0.0);
}
#endif

png_int_32 PNGAPI
png_get_x_offset_microns(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
#if defined(PNG_oFFs_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_oFFs)
   {
	  png_debug1(1, "in %s retrieval function\n", "png_get_x_offset_microns");
	  if(info_ptr->offset_unit_type != PNG_OFFSET_MICROMETER)
		  return (0);
	  else return (info_ptr->x_offset);
   }
#else
   return (0);
#endif
   return (0);
}

png_int_32 PNGAPI
png_get_y_offset_microns(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
#if defined(PNG_oFFs_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_oFFs)
   {
	  png_debug1(1, "in %s retrieval function\n", "png_get_y_offset_microns");
	  if(info_ptr->offset_unit_type != PNG_OFFSET_MICROMETER)
		  return (0);
	  else return (info_ptr->y_offset);
   }
#else
   return (0);
#endif
   return (0);
}

png_int_32 PNGAPI
png_get_x_offset_pixels(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
#if defined(PNG_oFFs_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_oFFs)
   {
	  png_debug1(1, "in %s retrieval function\n", "png_get_x_offset_microns");
	  if(info_ptr->offset_unit_type != PNG_OFFSET_PIXEL)
		  return (0);
	  else return (info_ptr->x_offset);
   }
#else
   return (0);
#endif
   return (0);
}

png_int_32 PNGAPI
png_get_y_offset_pixels(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
#if defined(PNG_oFFs_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_oFFs)
   {
	  png_debug1(1, "in %s retrieval function\n", "png_get_y_offset_microns");
	  if(info_ptr->offset_unit_type != PNG_OFFSET_PIXEL)
		  return (0);
	  else return (info_ptr->y_offset);
   }
#else
   return (0);
#endif
   return (0);
}

#if defined(PNG_INCH_CONVERSIONS) && defined(PNG_FLOATING_POINT_SUPPORTED)
png_uint_32 PNGAPI
png_get_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)
{
   return ((png_uint_32)((float)png_get_pixels_per_meter(png_ptr, info_ptr)
	 *.0254 +.5));
}

png_uint_32 PNGAPI
png_get_x_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)
{
   return ((png_uint_32)((float)png_get_x_pixels_per_meter(png_ptr, info_ptr)
	 *.0254 +.5));
}

png_uint_32 PNGAPI
png_get_y_pixels_per_inch(png_structp png_ptr, png_infop info_ptr)
{
   return ((png_uint_32)((float)png_get_y_pixels_per_meter(png_ptr, info_ptr)
	 *.0254 +.5));
}

float PNGAPI
png_get_x_offset_inches(png_structp png_ptr, png_infop info_ptr)
{
   return ((float)png_get_x_offset_microns(png_ptr, info_ptr)
	 *.00003937);
}

float PNGAPI
png_get_y_offset_inches(png_structp png_ptr, png_infop info_ptr)
{
   return ((float)png_get_y_offset_microns(png_ptr, info_ptr)
	 *.00003937);
}

#if defined(PNG_pHYs_SUPPORTED)
png_uint_32 PNGAPI
png_get_pHYs_dpi(png_structp png_ptr, png_infop info_ptr,
   png_uint_32 *res_x, png_uint_32 *res_y, int *unit_type)
{
   png_uint_32 retval = 0;

   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_pHYs))
   {
	  png_debug1(1, "in %s retrieval function\n", "pHYs");
	  if (res_x != NULL)
	  {
		 *res_x = info_ptr->x_pixels_per_unit;
		 retval |= PNG_INFO_pHYs;
	  }
	  if (res_y != NULL)
	  {
		 *res_y = info_ptr->y_pixels_per_unit;
		 retval |= PNG_INFO_pHYs;
	  }
	  if (unit_type != NULL)
	  {
		 *unit_type = (int)info_ptr->phys_unit_type;
		 retval |= PNG_INFO_pHYs;
		 if(*unit_type == 1)
		 {
			if (res_x != NULL) *res_x = (png_uint_32)(*res_x * .0254 + .50);
			if (res_y != NULL) *res_y = (png_uint_32)(*res_y * .0254 + .50);
		 }
	  }
   }
   return (retval);
}
#endif /* PNG_pHYs_SUPPORTED */
#endif  /* PNG_INCH_CONVERSIONS && PNG_FLOATING_POINT_SUPPORTED */

/* png_get_channels really belongs in here, too, but it's been around longer */

#endif  /* PNG_EASY_ACCESS_SUPPORTED */

png_byte PNGAPI
png_get_channels(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
	  return(info_ptr->channels);
   else
	  return (0);
}

png_bytep PNGAPI
png_get_signature(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr != NULL && info_ptr != NULL)
	  return(info_ptr->signature);
   else
	  return (NULL);
}

#if defined(PNG_bKGD_SUPPORTED)
png_uint_32 PNGAPI
png_get_bKGD(png_structp png_ptr, png_infop info_ptr,
   png_color_16p *background)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_bKGD)
	  && background != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "bKGD");
	  *background = &(info_ptr->background);
	  return (PNG_INFO_bKGD);
   }
   return (0);
}
#endif

#if defined(PNG_cHRM_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
png_uint_32 PNGAPI
png_get_cHRM(png_structp png_ptr, png_infop info_ptr,
   double *white_x, double *white_y, double *red_x, double *red_y,
   double *green_x, double *green_y, double *blue_x, double *blue_y)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_cHRM))
   {
	  png_debug1(1, "in %s retrieval function\n", "cHRM");
	  if (white_x != NULL)
		 *white_x = (double)info_ptr->x_white;
	  if (white_y != NULL)
		 *white_y = (double)info_ptr->y_white;
	  if (red_x != NULL)
		 *red_x = (double)info_ptr->x_red;
	  if (red_y != NULL)
		 *red_y = (double)info_ptr->y_red;
	  if (green_x != NULL)
		 *green_x = (double)info_ptr->x_green;
	  if (green_y != NULL)
		 *green_y = (double)info_ptr->y_green;
	  if (blue_x != NULL)
		 *blue_x = (double)info_ptr->x_blue;
	  if (blue_y != NULL)
		 *blue_y = (double)info_ptr->y_blue;
	  return (PNG_INFO_cHRM);
   }
   return (0);
}
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
png_uint_32 PNGAPI
png_get_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,
   png_fixed_point *white_x, png_fixed_point *white_y, png_fixed_point *red_x,
   png_fixed_point *red_y, png_fixed_point *green_x, png_fixed_point *green_y,
   png_fixed_point *blue_x, png_fixed_point *blue_y)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_cHRM))
   {
	  png_debug1(1, "in %s retrieval function\n", "cHRM");
	  if (white_x != NULL)
		 *white_x = info_ptr->int_x_white;
	  if (white_y != NULL)
		 *white_y = info_ptr->int_y_white;
	  if (red_x != NULL)
		 *red_x = info_ptr->int_x_red;
	  if (red_y != NULL)
		 *red_y = info_ptr->int_y_red;
	  if (green_x != NULL)
		 *green_x = info_ptr->int_x_green;
	  if (green_y != NULL)
		 *green_y = info_ptr->int_y_green;
	  if (blue_x != NULL)
		 *blue_x = info_ptr->int_x_blue;
	  if (blue_y != NULL)
		 *blue_y = info_ptr->int_y_blue;
	  return (PNG_INFO_cHRM);
   }
   return (0);
}
#endif
#endif

#if defined(PNG_gAMA_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
png_uint_32 PNGAPI
png_get_gAMA(png_structp png_ptr, png_infop info_ptr, double *file_gamma)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA)
	  && file_gamma != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "gAMA");
	  *file_gamma = (double)info_ptr->gamma;
	  return (PNG_INFO_gAMA);
   }
   return (0);
}
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
png_uint_32 PNGAPI
png_get_gAMA_fixed(png_structp png_ptr, png_infop info_ptr,
	png_fixed_point *int_file_gamma)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA)
	  && int_file_gamma != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "gAMA");
	  *int_file_gamma = info_ptr->int_gamma;
	  return (PNG_INFO_gAMA);
   }
   return (0);
}
#endif
#endif

#if defined(PNG_sRGB_SUPPORTED)
png_uint_32 PNGAPI
png_get_sRGB(png_structp png_ptr, png_infop info_ptr, int *file_srgb_intent)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_sRGB)
	  && file_srgb_intent != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "sRGB");
	  *file_srgb_intent = (int)info_ptr->srgb_intent;
	  return (PNG_INFO_sRGB);
   }
   return (0);
}
#endif

#if defined(PNG_iCCP_SUPPORTED)
png_uint_32 PNGAPI
png_get_iCCP(png_structp png_ptr, png_infop info_ptr,
			 png_charpp name, int *compression_type,
			 png_charpp profile, png_uint_32 *proflen)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_iCCP)
	  && name != NULL && profile != NULL && proflen != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "iCCP");
	  *name = info_ptr->iccp_name;
	  *profile = info_ptr->iccp_profile;
	  /* compression_type is a dummy so the API won't have to change
		 if we introduce multiple compression types later. */
	  *proflen = (int)info_ptr->iccp_proflen;
	  *compression_type = (int)info_ptr->iccp_compression;
	  return (PNG_INFO_iCCP);
   }
   return (0);
}
#endif

#if defined(PNG_sPLT_SUPPORTED)
png_uint_32 PNGAPI
png_get_sPLT(png_structp png_ptr, png_infop info_ptr,
			 png_sPLT_tpp spalettes)
{
   if (png_ptr != NULL && info_ptr != NULL && spalettes != NULL)
   {
	 *spalettes = info_ptr->splt_palettes;
	 return ((png_uint_32)info_ptr->splt_palettes_num);
   }
   return (0);
}
#endif

#if defined(PNG_hIST_SUPPORTED)
png_uint_32 PNGAPI
png_get_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p *hist)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_hIST)
	  && hist != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "hIST");
	  *hist = info_ptr->hist;
	  return (PNG_INFO_hIST);
   }
   return (0);
}
#endif

png_uint_32 PNGAPI
png_get_IHDR(png_structp png_ptr, png_infop info_ptr,
   png_uint_32 *width, png_uint_32 *height, int *bit_depth,
   int *color_type, int *interlace_type, int *compression_type,
   int *filter_type)

{
   if (png_ptr != NULL && info_ptr != NULL && width != NULL && height != NULL &&
	  bit_depth != NULL && color_type != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "IHDR");
	  *width = info_ptr->width;
	  *height = info_ptr->height;
	  *bit_depth = info_ptr->bit_depth;
	  if (info_ptr->bit_depth < 1 || info_ptr->bit_depth > 16)
		png_error(png_ptr, "Invalid bit depth");
	  *color_type = info_ptr->color_type;
	  if (info_ptr->color_type > 6)
		png_error(png_ptr, "Invalid color type");
	  if (compression_type != NULL)
		 *compression_type = info_ptr->compression_type;
	  if (filter_type != NULL)
		 *filter_type = info_ptr->filter_type;
	  if (interlace_type != NULL)
		 *interlace_type = info_ptr->interlace_type;

	  /* check for potential overflow of rowbytes */
	  if (*width == 0 || *width > PNG_UINT_31_MAX)
		png_error(png_ptr, "Invalid image width");
	  if (*height == 0 || *height > PNG_UINT_31_MAX)
		png_error(png_ptr, "Invalid image height");
	  if (info_ptr->width > (PNG_UINT_32_MAX
				 >> 3)      /* 8-byte RGBA pixels */
				 - 64       /* bigrowbuf hack */
				 - 1        /* filter byte */
				 - 7*8      /* rounding of width to multiple of 8 pixels */
				 - 8)       /* extra max_pixel_depth pad */
	  {
		 png_warning(png_ptr,
			"Width too large for libpng to process image data.");
	  }
	  return (1);
   }
   return (0);
}

#if defined(PNG_oFFs_SUPPORTED)
png_uint_32 PNGAPI
png_get_oFFs(png_structp png_ptr, png_infop info_ptr,
   png_int_32 *offset_x, png_int_32 *offset_y, int *unit_type)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_oFFs)
	  && offset_x != NULL && offset_y != NULL && unit_type != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "oFFs");
	  *offset_x = info_ptr->x_offset;
	  *offset_y = info_ptr->y_offset;
	  *unit_type = (int)info_ptr->offset_unit_type;
	  return (PNG_INFO_oFFs);
   }
   return (0);
}
#endif

#if defined(PNG_pCAL_SUPPORTED)
png_uint_32 PNGAPI
png_get_pCAL(png_structp png_ptr, png_infop info_ptr,
   png_charp *purpose, png_int_32 *X0, png_int_32 *X1, int *type, int *nparams,
   png_charp *units, png_charpp *params)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_pCAL)
	  && purpose != NULL && X0 != NULL && X1 != NULL && type != NULL &&
	  nparams != NULL && units != NULL && params != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "pCAL");
	  *purpose = info_ptr->pcal_purpose;
	  *X0 = info_ptr->pcal_X0;
	  *X1 = info_ptr->pcal_X1;
	  *type = (int)info_ptr->pcal_type;
	  *nparams = (int)info_ptr->pcal_nparams;
	  *units = info_ptr->pcal_units;
	  *params = info_ptr->pcal_params;
	  return (PNG_INFO_pCAL);
   }
   return (0);
}
#endif

#if defined(PNG_sCAL_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
png_uint_32 PNGAPI
png_get_sCAL(png_structp png_ptr, png_infop info_ptr,
			 int *unit, double *width, double *height)
{
	if (png_ptr != NULL && info_ptr != NULL &&
	   (info_ptr->valid & PNG_INFO_sCAL))
	{
		*unit = info_ptr->scal_unit;
		*width = info_ptr->scal_pixel_width;
		*height = info_ptr->scal_pixel_height;
		return (PNG_INFO_sCAL);
	}
	return(0);
}
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
png_uint_32 PNGAPI
png_get_sCAL_s(png_structp png_ptr, png_infop info_ptr,
			 int *unit, png_charpp width, png_charpp height)
{
	if (png_ptr != NULL && info_ptr != NULL &&
	   (info_ptr->valid & PNG_INFO_sCAL))
	{
		*unit = info_ptr->scal_unit;
		*width = info_ptr->scal_s_width;
		*height = info_ptr->scal_s_height;
		return (PNG_INFO_sCAL);
	}
	return(0);
}
#endif
#endif
#endif

#if defined(PNG_pHYs_SUPPORTED)
png_uint_32 PNGAPI
png_get_pHYs(png_structp png_ptr, png_infop info_ptr,
   png_uint_32 *res_x, png_uint_32 *res_y, int *unit_type)
{
   png_uint_32 retval = 0;

   if (png_ptr != NULL && info_ptr != NULL &&
	  (info_ptr->valid & PNG_INFO_pHYs))
   {
	  png_debug1(1, "in %s retrieval function\n", "pHYs");
	  if (res_x != NULL)
	  {
		 *res_x = info_ptr->x_pixels_per_unit;
		 retval |= PNG_INFO_pHYs;
	  }
	  if (res_y != NULL)
	  {
		 *res_y = info_ptr->y_pixels_per_unit;
		 retval |= PNG_INFO_pHYs;
	  }
	  if (unit_type != NULL)
	  {
		 *unit_type = (int)info_ptr->phys_unit_type;
		 retval |= PNG_INFO_pHYs;
	  }
   }
   return (retval);
}
#endif

png_uint_32 PNGAPI
png_get_PLTE(png_structp png_ptr, png_infop info_ptr, png_colorp *palette,
   int *num_palette)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_PLTE)
	   && palette != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "PLTE");
	  *palette = info_ptr->palette;
	  *num_palette = info_ptr->num_palette;
	  png_debug1(3, "num_palette = %d\n", *num_palette);
	  return (PNG_INFO_PLTE);
   }
   return (0);
}

#if defined(PNG_sBIT_SUPPORTED)
png_uint_32 PNGAPI
png_get_sBIT(png_structp png_ptr, png_infop info_ptr, png_color_8p *sig_bit)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_sBIT)
	  && sig_bit != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "sBIT");
	  *sig_bit = &(info_ptr->sig_bit);
	  return (PNG_INFO_sBIT);
   }
   return (0);
}
#endif

#if defined(PNG_TEXT_SUPPORTED)
png_uint_32 PNGAPI
png_get_text(png_structp png_ptr, png_infop info_ptr, png_textp *text_ptr,
   int *num_text)
{
   if (png_ptr != NULL && info_ptr != NULL && info_ptr->num_text > 0)
   {
	  png_debug1(1, "in %s retrieval function\n",
		 (png_ptr->chunk_name[0] == '\0' ? "text"
			 : (png_const_charp)png_ptr->chunk_name));
	  if (text_ptr != NULL)
		 *text_ptr = info_ptr->text;
	  if (num_text != NULL)
		 *num_text = info_ptr->num_text;
	  return ((png_uint_32)info_ptr->num_text);
   }
   if (num_text != NULL)
	 *num_text = 0;
   return(0);
}
#endif

#if defined(PNG_tIME_SUPPORTED)
png_uint_32 PNGAPI
png_get_tIME(png_structp png_ptr, png_infop info_ptr, png_timep *mod_time)
{
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_tIME)
	   && mod_time != NULL)
   {
	  png_debug1(1, "in %s retrieval function\n", "tIME");
	  *mod_time = &(info_ptr->mod_time);
	  return (PNG_INFO_tIME);
   }
   return (0);
}
#endif

#if defined(PNG_tRNS_SUPPORTED)
png_uint_32 PNGAPI
png_get_tRNS(png_structp png_ptr, png_infop info_ptr,
   png_bytep *trans, int *num_trans, png_color_16p *trans_values)
{
   png_uint_32 retval = 0;
   if (png_ptr != NULL && info_ptr != NULL && (info_ptr->valid & PNG_INFO_tRNS))
   {
	  png_debug1(1, "in %s retrieval function\n", "tRNS");
	  if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	  {
		  if (trans != NULL)
		  {
			 *trans = info_ptr->trans;
			 retval |= PNG_INFO_tRNS;
		  }
		  if (trans_values != NULL)
			 *trans_values = &(info_ptr->trans_values);
	  }
	  else /* if (info_ptr->color_type != PNG_COLOR_TYPE_PALETTE) */
	  {
		  if (trans_values != NULL)
		  {
			 *trans_values = &(info_ptr->trans_values);
			 retval |= PNG_INFO_tRNS;
		  }
		  if(trans != NULL)
			 *trans = NULL;
	  }
	  if(num_trans != NULL)
	  {
		 *num_trans = info_ptr->num_trans;
		 retval |= PNG_INFO_tRNS;
	  }
   }
   return (retval);
}
#endif

#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
png_uint_32 PNGAPI
png_get_unknown_chunks(png_structp png_ptr, png_infop info_ptr,
			 png_unknown_chunkpp unknowns)
{
   if (png_ptr != NULL && info_ptr != NULL && unknowns != NULL)
   {
	 *unknowns = info_ptr->unknown_chunks;
	 return ((png_uint_32)info_ptr->unknown_chunks_num);
   }
   return (0);
}
#endif

#if defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
png_byte PNGAPI
png_get_rgb_to_gray_status (png_structp png_ptr)
{
   return (png_byte)(png_ptr? png_ptr->rgb_to_gray_status : 0);
}
#endif

#if defined(PNG_USER_CHUNKS_SUPPORTED)
png_voidp PNGAPI
png_get_user_chunk_ptr(png_structp png_ptr)
{
   return (png_ptr? png_ptr->user_chunk_ptr : NULL);
}
#endif

#ifdef PNG_WRITE_SUPPORTED
png_uint_32 PNGAPI
png_get_compression_buffer_size(png_structp png_ptr)
{
   return (png_uint_32)(png_ptr? png_ptr->zbuf_size : 0L);
}
#endif

#ifdef PNG_ASSEMBLER_CODE_SUPPORTED
#ifndef PNG_1_0_X
/* this function was added to libpng 1.2.0 and should exist by default */
png_uint_32 PNGAPI
png_get_asm_flags (png_structp png_ptr)
{
	/* obsolete, to be removed from libpng-1.4.0 */
	return (png_ptr? 0L: 0L);
}

/* this function was added to libpng 1.2.0 and should exist by default */
png_uint_32 PNGAPI
png_get_asm_flagmask (int flag_select)
{
	/* obsolete, to be removed from libpng-1.4.0 */
	flag_select=flag_select;
	return 0L;
}

	/* GRR:  could add this:   && defined(PNG_MMX_CODE_SUPPORTED) */
/* this function was added to libpng 1.2.0 */
png_uint_32 PNGAPI
png_get_mmx_flagmask (int flag_select, int *compilerID)
{
	/* obsolete, to be removed from libpng-1.4.0 */
	flag_select=flag_select;
	*compilerID = -1;   /* unknown (i.e., no asm/MMX code compiled) */
	return 0L;
}

/* this function was added to libpng 1.2.0 */
png_byte PNGAPI
png_get_mmx_bitdepth_threshold (png_structp png_ptr)
{
	/* obsolete, to be removed from libpng-1.4.0 */
	return (png_ptr? 0: 0);
}

/* this function was added to libpng 1.2.0 */
png_uint_32 PNGAPI
png_get_mmx_rowbytes_threshold (png_structp png_ptr)
{
	/* obsolete, to be removed from libpng-1.4.0 */
	return (png_ptr? 0L: 0L);
}
#endif /* ?PNG_1_0_X */
#endif /* ?PNG_ASSEMBLER_CODE_SUPPORTED */

#ifdef PNG_SET_USER_LIMITS_SUPPORTED
/* these functions were added to libpng 1.2.6 */
png_uint_32 PNGAPI
png_get_user_width_max (png_structp png_ptr)
{
	return (png_ptr? png_ptr->user_width_max : 0);
}
png_uint_32 PNGAPI
png_get_user_height_max (png_structp png_ptr)
{
	return (png_ptr? png_ptr->user_height_max : 0);
}
#endif /* ?PNG_SET_USER_LIMITS_SUPPORTED */

#endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */

/*** End of inlined file: pngget.c ***/


/*** Start of inlined file: pngmem.c ***/
/* pngmem.c - stub functions for memory allocation
 *
 * Last changed in libpng 1.2.13 November 13, 2006
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2006 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 *
 * This file provides a location for all memory allocation.  Users who
 * need special memory handling are expected to supply replacement
 * functions for png_malloc() and png_free(), and to use
 * png_create_read_struct_2() and png_create_write_struct_2() to
 * identify the replacement functions.
 */

#define PNG_INTERNAL

#if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)

/* Borland DOS special memory handler */
#if defined(__TURBOC__) && !defined(_Windows) && !defined(__FLAT__)
/* if you change this, be sure to change the one in png.h also */

/* Allocate memory for a png_struct.  The malloc and memset can be replaced
   by a single call to calloc() if this is thought to improve performance. */
png_voidp /* PRIVATE */
png_create_struct(int type)
{
#ifdef PNG_USER_MEM_SUPPORTED
   return (png_create_struct_2(type, png_malloc_ptr_NULL, png_voidp_NULL));
}

/* Alternate version of png_create_struct, for use with user-defined malloc. */
png_voidp /* PRIVATE */
png_create_struct_2(int type, png_malloc_ptr malloc_fn, png_voidp mem_ptr)
{
#endif /* PNG_USER_MEM_SUPPORTED */
   png_size_t size;
   png_voidp struct_ptr;

   if (type == PNG_STRUCT_INFO)
	 size = png_sizeof(png_info);
   else if (type == PNG_STRUCT_PNG)
	 size = png_sizeof(png_struct);
   else
	 return (png_get_copyright(NULL));

#ifdef PNG_USER_MEM_SUPPORTED
   if(malloc_fn != NULL)
   {
	  png_struct dummy_struct;
	  png_structp png_ptr = &dummy_struct;
	  png_ptr->mem_ptr=mem_ptr;
	  struct_ptr = (*(malloc_fn))(png_ptr, (png_uint_32)size);
   }
   else
#endif /* PNG_USER_MEM_SUPPORTED */
	  struct_ptr = (png_voidp)farmalloc(size);
   if (struct_ptr != NULL)
	  png_memset(struct_ptr, 0, size);
   return (struct_ptr);
}

/* Free memory allocated by a png_create_struct() call */
void /* PRIVATE */
png_destroy_struct(png_voidp struct_ptr)
{
#ifdef PNG_USER_MEM_SUPPORTED
   png_destroy_struct_2(struct_ptr, png_free_ptr_NULL, png_voidp_NULL);
}

/* Free memory allocated by a png_create_struct() call */
void /* PRIVATE */
png_destroy_struct_2(png_voidp struct_ptr, png_free_ptr free_fn,
	png_voidp mem_ptr)
{
#endif
   if (struct_ptr != NULL)
   {
#ifdef PNG_USER_MEM_SUPPORTED
	  if(free_fn != NULL)
	  {
		 png_struct dummy_struct;
		 png_structp png_ptr = &dummy_struct;
		 png_ptr->mem_ptr=mem_ptr;
		 (*(free_fn))(png_ptr, struct_ptr);
		 return;
	  }
#endif /* PNG_USER_MEM_SUPPORTED */
	  farfree (struct_ptr);
   }
}

/* Allocate memory.  For reasonable files, size should never exceed
 * 64K.  However, zlib may allocate more then 64K if you don't tell
 * it not to.  See zconf.h and png.h for more information. zlib does
 * need to allocate exactly 64K, so whatever you call here must
 * have the ability to do that.
 *
 * Borland seems to have a problem in DOS mode for exactly 64K.
 * It gives you a segment with an offset of 8 (perhaps to store its
 * memory stuff).  zlib doesn't like this at all, so we have to
 * detect and deal with it.  This code should not be needed in
 * Windows or OS/2 modes, and only in 16 bit mode.  This code has
 * been updated by Alexander Lehmann for version 0.89 to waste less
 * memory.
 *
 * Note that we can't use png_size_t for the "size" declaration,
 * since on some systems a png_size_t is a 16-bit quantity, and as a
 * result, we would be truncating potentially larger memory requests
 * (which should cause a fatal error) and introducing major problems.
 */

png_voidp PNGAPI
png_malloc(png_structp png_ptr, png_uint_32 size)
{
   png_voidp ret;

   if (png_ptr == NULL || size == 0)
	  return (NULL);

#ifdef PNG_USER_MEM_SUPPORTED
   if(png_ptr->malloc_fn != NULL)
	   ret = ((png_voidp)(*(png_ptr->malloc_fn))(png_ptr, (png_size_t)size));
   else
	   ret = (png_malloc_default(png_ptr, size));
   if (ret == NULL && (png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
	   png_error(png_ptr, "Out of memory!");
   return (ret);
}

png_voidp PNGAPI
png_malloc_default(png_structp png_ptr, png_uint_32 size)
{
   png_voidp ret;
#endif /* PNG_USER_MEM_SUPPORTED */

   if (png_ptr == NULL || size == 0)
	  return (NULL);

#ifdef PNG_MAX_MALLOC_64K
   if (size > (png_uint_32)65536L)
   {
	  png_warning(png_ptr, "Cannot Allocate > 64K");
	  ret = NULL;
   }
   else
#endif

   if (size != (size_t)size)
	 ret = NULL;
   else if (size == (png_uint_32)65536L)
   {
	  if (png_ptr->offset_table == NULL)
	  {
		 /* try to see if we need to do any of this fancy stuff */
		 ret = farmalloc(size);
		 if (ret == NULL || ((png_size_t)ret & 0xffff))
		 {
			int num_blocks;
			png_uint_32 total_size;
			png_bytep table;
			int i;
			png_byte huge * hptr;

			if (ret != NULL)
			{
			   farfree(ret);
			   ret = NULL;
			}

			if(png_ptr->zlib_window_bits > 14)
			   num_blocks = (int)(1 << (png_ptr->zlib_window_bits - 14));
			else
			   num_blocks = 1;
			if (png_ptr->zlib_mem_level >= 7)
			   num_blocks += (int)(1 << (png_ptr->zlib_mem_level - 7));
			else
			   num_blocks++;

			total_size = ((png_uint_32)65536L) * (png_uint_32)num_blocks+16;

			table = farmalloc(total_size);

			if (table == NULL)
			{
#ifndef PNG_USER_MEM_SUPPORTED
			   if ((png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
				  png_error(png_ptr, "Out Of Memory."); /* Note "O" and "M" */
			   else
				  png_warning(png_ptr, "Out Of Memory.");
#endif
			   return (NULL);
			}

			if ((png_size_t)table & 0xfff0)
			{
#ifndef PNG_USER_MEM_SUPPORTED
			   if ((png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
				  png_error(png_ptr,
					"Farmalloc didn't return normalized pointer");
			   else
				  png_warning(png_ptr,
					"Farmalloc didn't return normalized pointer");
#endif
			   return (NULL);
			}

			png_ptr->offset_table = table;
			png_ptr->offset_table_ptr = farmalloc(num_blocks *
			   png_sizeof (png_bytep));

			if (png_ptr->offset_table_ptr == NULL)
			{
#ifndef PNG_USER_MEM_SUPPORTED
			   if ((png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
				  png_error(png_ptr, "Out Of memory."); /* Note "O" and "M" */
			   else
				  png_warning(png_ptr, "Out Of memory.");
#endif
			   return (NULL);
			}

			hptr = (png_byte huge *)table;
			if ((png_size_t)hptr & 0xf)
			{
			   hptr = (png_byte huge *)((long)(hptr) & 0xfffffff0L);
			   hptr = hptr + 16L;  /* "hptr += 16L" fails on Turbo C++ 3.0 */
			}
			for (i = 0; i < num_blocks; i++)
			{
			   png_ptr->offset_table_ptr[i] = (png_bytep)hptr;
			   hptr = hptr + (png_uint_32)65536L;  /* "+=" fails on TC++3.0 */
			}

			png_ptr->offset_table_number = num_blocks;
			png_ptr->offset_table_count = 0;
			png_ptr->offset_table_count_free = 0;
		 }
	  }

	  if (png_ptr->offset_table_count >= png_ptr->offset_table_number)
	  {
#ifndef PNG_USER_MEM_SUPPORTED
		 if ((png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
			png_error(png_ptr, "Out of Memory."); /* Note "o" and "M" */
		 else
			png_warning(png_ptr, "Out of Memory.");
#endif
		 return (NULL);
	  }

	  ret = png_ptr->offset_table_ptr[png_ptr->offset_table_count++];
   }
   else
	  ret = farmalloc(size);

#ifndef PNG_USER_MEM_SUPPORTED
   if (ret == NULL)
   {
	  if ((png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
		 png_error(png_ptr, "Out of memory."); /* Note "o" and "m" */
	  else
		 png_warning(png_ptr, "Out of memory."); /* Note "o" and "m" */
   }
#endif

   return (ret);
}

/* free a pointer allocated by png_malloc().  In the default
   configuration, png_ptr is not used, but is passed in case it
   is needed.  If ptr is NULL, return without taking any action. */
void PNGAPI
png_free(png_structp png_ptr, png_voidp ptr)
{
   if (png_ptr == NULL || ptr == NULL)
	  return;

#ifdef PNG_USER_MEM_SUPPORTED
   if (png_ptr->free_fn != NULL)
   {
	  (*(png_ptr->free_fn))(png_ptr, ptr);
	  return;
   }
   else png_free_default(png_ptr, ptr);
}

void PNGAPI
png_free_default(png_structp png_ptr, png_voidp ptr)
{
#endif /* PNG_USER_MEM_SUPPORTED */

   if(png_ptr == NULL) return;

   if (png_ptr->offset_table != NULL)
   {
	  int i;

	  for (i = 0; i < png_ptr->offset_table_count; i++)
	  {
		 if (ptr == png_ptr->offset_table_ptr[i])
		 {
			ptr = NULL;
			png_ptr->offset_table_count_free++;
			break;
		 }
	  }
	  if (png_ptr->offset_table_count_free == png_ptr->offset_table_count)
	  {
		 farfree(png_ptr->offset_table);
		 farfree(png_ptr->offset_table_ptr);
		 png_ptr->offset_table = NULL;
		 png_ptr->offset_table_ptr = NULL;
	  }
   }

   if (ptr != NULL)
   {
	  farfree(ptr);
   }
}

#else /* Not the Borland DOS special memory handler */

/* Allocate memory for a png_struct or a png_info.  The malloc and
   memset can be replaced by a single call to calloc() if this is thought
   to improve performance noticably. */
png_voidp /* PRIVATE */
png_create_struct(int type)
{
#ifdef PNG_USER_MEM_SUPPORTED
   return (png_create_struct_2(type, png_malloc_ptr_NULL, png_voidp_NULL));
}

/* Allocate memory for a png_struct or a png_info.  The malloc and
   memset can be replaced by a single call to calloc() if this is thought
   to improve performance noticably. */
png_voidp /* PRIVATE */
png_create_struct_2(int type, png_malloc_ptr malloc_fn, png_voidp mem_ptr)
{
#endif /* PNG_USER_MEM_SUPPORTED */
   png_size_t size;
   png_voidp struct_ptr;

   if (type == PNG_STRUCT_INFO)
	  size = png_sizeof(png_info);
   else if (type == PNG_STRUCT_PNG)
	  size = png_sizeof(png_struct);
   else
	  return (NULL);

#ifdef PNG_USER_MEM_SUPPORTED
   if(malloc_fn != NULL)
   {
	  png_struct dummy_struct;
	  png_structp png_ptr = &dummy_struct;
	  png_ptr->mem_ptr=mem_ptr;
	  struct_ptr = (*(malloc_fn))(png_ptr, size);
	  if (struct_ptr != NULL)
		 png_memset(struct_ptr, 0, size);
	  return (struct_ptr);
   }
#endif /* PNG_USER_MEM_SUPPORTED */

#if defined(__TURBOC__) && !defined(__FLAT__)
   struct_ptr = (png_voidp)farmalloc(size);
#else
# if defined(_MSC_VER) && defined(MAXSEG_64K)
   struct_ptr = (png_voidp)halloc(size,1);
# else
   struct_ptr = (png_voidp)malloc(size);
# endif
#endif
   if (struct_ptr != NULL)
	  png_memset(struct_ptr, 0, size);

   return (struct_ptr);
}

/* Free memory allocated by a png_create_struct() call */
void /* PRIVATE */
png_destroy_struct(png_voidp struct_ptr)
{
#ifdef PNG_USER_MEM_SUPPORTED
   png_destroy_struct_2(struct_ptr, png_free_ptr_NULL, png_voidp_NULL);
}

/* Free memory allocated by a png_create_struct() call */
void /* PRIVATE */
png_destroy_struct_2(png_voidp struct_ptr, png_free_ptr free_fn,
	png_voidp mem_ptr)
{
#endif /* PNG_USER_MEM_SUPPORTED */
   if (struct_ptr != NULL)
   {
#ifdef PNG_USER_MEM_SUPPORTED
	  if(free_fn != NULL)
	  {
		 png_struct dummy_struct;
		 png_structp png_ptr = &dummy_struct;
		 png_ptr->mem_ptr=mem_ptr;
		 (*(free_fn))(png_ptr, struct_ptr);
		 return;
	  }
#endif /* PNG_USER_MEM_SUPPORTED */
#if defined(__TURBOC__) && !defined(__FLAT__)
	  farfree(struct_ptr);
#else
# if defined(_MSC_VER) && defined(MAXSEG_64K)
	  hfree(struct_ptr);
# else
	  free(struct_ptr);
# endif
#endif
   }
}

/* Allocate memory.  For reasonable files, size should never exceed
   64K.  However, zlib may allocate more then 64K if you don't tell
   it not to.  See zconf.h and png.h for more information.  zlib does
   need to allocate exactly 64K, so whatever you call here must
   have the ability to do that. */

png_voidp PNGAPI
png_malloc(png_structp png_ptr, png_uint_32 size)
{
   png_voidp ret;

#ifdef PNG_USER_MEM_SUPPORTED
   if (png_ptr == NULL || size == 0)
	  return (NULL);

   if(png_ptr->malloc_fn != NULL)
	   ret = ((png_voidp)(*(png_ptr->malloc_fn))(png_ptr, (png_size_t)size));
   else
	   ret = (png_malloc_default(png_ptr, size));
   if (ret == NULL && (png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
	   png_error(png_ptr, "Out of Memory!");
   return (ret);
}

png_voidp PNGAPI
png_malloc_default(png_structp png_ptr, png_uint_32 size)
{
   png_voidp ret;
#endif /* PNG_USER_MEM_SUPPORTED */

   if (png_ptr == NULL || size == 0)
	  return (NULL);

#ifdef PNG_MAX_MALLOC_64K
   if (size > (png_uint_32)65536L)
   {
#ifndef PNG_USER_MEM_SUPPORTED
	  if(png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
		 png_error(png_ptr, "Cannot Allocate > 64K");
	  else
#endif
		 return NULL;
   }
#endif

 /* Check for overflow */
#if defined(__TURBOC__) && !defined(__FLAT__)
 if (size != (unsigned long)size)
   ret = NULL;
 else
   ret = farmalloc(size);
#else
# if defined(_MSC_VER) && defined(MAXSEG_64K)
 if (size != (unsigned long)size)
   ret = NULL;
 else
   ret = halloc(size, 1);
# else
 if (size != (size_t)size)
   ret = NULL;
 else
   ret = malloc((size_t)size);
# endif
#endif

#ifndef PNG_USER_MEM_SUPPORTED
   if (ret == NULL && (png_ptr->flags&PNG_FLAG_MALLOC_NULL_MEM_OK) == 0)
	  png_error(png_ptr, "Out of Memory");
#endif

   return (ret);
}

/* Free a pointer allocated by png_malloc().  If ptr is NULL, return
   without taking any action. */
void PNGAPI
png_free(png_structp png_ptr, png_voidp ptr)
{
   if (png_ptr == NULL || ptr == NULL)
	  return;

#ifdef PNG_USER_MEM_SUPPORTED
   if (png_ptr->free_fn != NULL)
   {
	  (*(png_ptr->free_fn))(png_ptr, ptr);
	  return;
   }
   else png_free_default(png_ptr, ptr);
}
void PNGAPI
png_free_default(png_structp png_ptr, png_voidp ptr)
{
   if (png_ptr == NULL || ptr == NULL)
	  return;

#endif /* PNG_USER_MEM_SUPPORTED */

#if defined(__TURBOC__) && !defined(__FLAT__)
   farfree(ptr);
#else
# if defined(_MSC_VER) && defined(MAXSEG_64K)
   hfree(ptr);
# else
   free(ptr);
# endif
#endif
}

#endif /* Not Borland DOS special memory handler */

#if defined(PNG_1_0_X)
#  define png_malloc_warn png_malloc
#else
/* This function was added at libpng version 1.2.3.  The png_malloc_warn()
 * function will set up png_malloc() to issue a png_warning and return NULL
 * instead of issuing a png_error, if it fails to allocate the requested
 * memory.
 */
png_voidp PNGAPI
png_malloc_warn(png_structp png_ptr, png_uint_32 size)
{
   png_voidp ptr;
   png_uint_32 save_flags;
   if(png_ptr == NULL) return (NULL);

   save_flags=png_ptr->flags;
   png_ptr->flags|=PNG_FLAG_MALLOC_NULL_MEM_OK;
   ptr = (png_voidp)png_malloc((png_structp)png_ptr, size);
   png_ptr->flags=save_flags;
   return(ptr);
}
#endif

png_voidp PNGAPI
png_memcpy_check (png_structp png_ptr, png_voidp s1, png_voidp s2,
   png_uint_32 length)
{
   png_size_t size;

   size = (png_size_t)length;
   if ((png_uint_32)size != length)
	  png_error(png_ptr,"Overflow in png_memcpy_check.");

   return(png_memcpy (s1, s2, size));
}

png_voidp PNGAPI
png_memset_check (png_structp png_ptr, png_voidp s1, int value,
   png_uint_32 length)
{
   png_size_t size;

   size = (png_size_t)length;
   if ((png_uint_32)size != length)
	  png_error(png_ptr,"Overflow in png_memset_check.");

   return (png_memset (s1, value, size));

}

#ifdef PNG_USER_MEM_SUPPORTED
/* This function is called when the application wants to use another method
 * of allocating and freeing memory.
 */
void PNGAPI
png_set_mem_fn(png_structp png_ptr, png_voidp mem_ptr, png_malloc_ptr
  malloc_fn, png_free_ptr free_fn)
{
   if(png_ptr != NULL) {
   png_ptr->mem_ptr = mem_ptr;
   png_ptr->malloc_fn = malloc_fn;
   png_ptr->free_fn = free_fn;
   }
}

/* This function returns a pointer to the mem_ptr associated with the user
 * functions.  The application should free any memory associated with this
 * pointer before png_write_destroy and png_read_destroy are called.
 */
png_voidp PNGAPI
png_get_mem_ptr(png_structp png_ptr)
{
   if(png_ptr == NULL) return (NULL);
   return ((png_voidp)png_ptr->mem_ptr);
}
#endif /* PNG_USER_MEM_SUPPORTED */
#endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */

/*** End of inlined file: pngmem.c ***/


/*** Start of inlined file: pngread.c ***/
/* pngread.c - read a PNG file
 *
 * Last changed in libpng 1.2.20 September 7, 2007
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 *
 * This file contains routines that an application calls directly to
 * read a PNG file or stream.
 */

#define PNG_INTERNAL

#if defined(PNG_READ_SUPPORTED)

/* Create a PNG structure for reading, and allocate any memory needed. */
png_structp PNGAPI
png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr,
   png_error_ptr error_fn, png_error_ptr warn_fn)
{

#ifdef PNG_USER_MEM_SUPPORTED
   return (png_create_read_struct_2(user_png_ver, error_ptr, error_fn,
	  warn_fn, png_voidp_NULL, png_malloc_ptr_NULL, png_free_ptr_NULL));
}

/* Alternate create PNG structure for reading, and allocate any memory needed. */
png_structp PNGAPI
png_create_read_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,
   png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,
   png_malloc_ptr malloc_fn, png_free_ptr free_fn)
{
#endif /* PNG_USER_MEM_SUPPORTED */

   png_structp png_ptr;

#ifdef PNG_SETJMP_SUPPORTED
#ifdef USE_FAR_KEYWORD
   jmp_buf jmpbuf;
#endif
#endif

   int i;

   png_debug(1, "in png_create_read_struct\n");
#ifdef PNG_USER_MEM_SUPPORTED
   png_ptr = (png_structp)png_create_struct_2(PNG_STRUCT_PNG,
	  (png_malloc_ptr)malloc_fn, (png_voidp)mem_ptr);
#else
   png_ptr = (png_structp)png_create_struct(PNG_STRUCT_PNG);
#endif
   if (png_ptr == NULL)
	  return (NULL);

   /* added at libpng-1.2.6 */
#ifdef PNG_SET_USER_LIMITS_SUPPORTED
   png_ptr->user_width_max=PNG_USER_WIDTH_MAX;
   png_ptr->user_height_max=PNG_USER_HEIGHT_MAX;
#endif

#ifdef PNG_SETJMP_SUPPORTED
#ifdef USE_FAR_KEYWORD
   if (setjmp(jmpbuf))
#else
   if (setjmp(png_ptr->jmpbuf))
#endif
   {
	  png_free(png_ptr, png_ptr->zbuf);
	  png_ptr->zbuf=NULL;
#ifdef PNG_USER_MEM_SUPPORTED
	  png_destroy_struct_2((png_voidp)png_ptr,
		 (png_free_ptr)free_fn, (png_voidp)mem_ptr);
#else
	  png_destroy_struct((png_voidp)png_ptr);
#endif
	  return (NULL);
   }
#ifdef USE_FAR_KEYWORD
   png_memcpy(png_ptr->jmpbuf,jmpbuf,png_sizeof(jmp_buf));
#endif
#endif

#ifdef PNG_USER_MEM_SUPPORTED
   png_set_mem_fn(png_ptr, mem_ptr, malloc_fn, free_fn);
#endif

   png_set_error_fn(png_ptr, error_ptr, error_fn, warn_fn);

   i=0;
   do
   {
	 if(user_png_ver[i] != png_libpng_ver[i])
		png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
   } while (png_libpng_ver[i++]);

   if (png_ptr->flags & PNG_FLAG_LIBRARY_MISMATCH)
   {
	 /* Libpng 0.90 and later are binary incompatible with libpng 0.89, so
	  * we must recompile any applications that use any older library version.
	  * For versions after libpng 1.0, we will be compatible, so we need
	  * only check the first digit.
	  */
	 if (user_png_ver == NULL || user_png_ver[0] != png_libpng_ver[0] ||
		 (user_png_ver[0] == '1' && user_png_ver[2] != png_libpng_ver[2]) ||
		 (user_png_ver[0] == '0' && user_png_ver[2] < '9'))
	 {
#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
		char msg[80];
		if (user_png_ver)
		{
		  png_snprintf(msg, 80,
			 "Application was compiled with png.h from libpng-%.20s",
			 user_png_ver);
		  png_warning(png_ptr, msg);
		}
		png_snprintf(msg, 80,
			 "Application  is  running with png.c from libpng-%.20s",
		   png_libpng_ver);
		png_warning(png_ptr, msg);
#endif
#ifdef PNG_ERROR_NUMBERS_SUPPORTED
		png_ptr->flags=0;
#endif
		png_error(png_ptr,
		   "Incompatible libpng version in application and library");
	 }
   }

   /* initialize zbuf - compression buffer */
   png_ptr->zbuf_size = PNG_ZBUF_SIZE;
   png_ptr->zbuf = (png_bytep)png_malloc(png_ptr,
	 (png_uint_32)png_ptr->zbuf_size);
   png_ptr->zstream.zalloc = png_zalloc;
   png_ptr->zstream.zfree = png_zfree;
   png_ptr->zstream.opaque = (voidpf)png_ptr;

   switch (inflateInit(&png_ptr->zstream))
   {
	 case Z_OK: /* Do nothing */ break;
	 case Z_MEM_ERROR:
	 case Z_STREAM_ERROR: png_error(png_ptr, "zlib memory error"); break;
	 case Z_VERSION_ERROR: png_error(png_ptr, "zlib version error"); break;
	 default: png_error(png_ptr, "Unknown zlib error");
   }

   png_ptr->zstream.next_out = png_ptr->zbuf;
   png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;

   png_set_read_fn(png_ptr, png_voidp_NULL, png_rw_ptr_NULL);

#ifdef PNG_SETJMP_SUPPORTED
/* Applications that neglect to set up their own setjmp() and then encounter
   a png_error() will longjmp here.  Since the jmpbuf is then meaningless we
   abort instead of returning. */
#ifdef USE_FAR_KEYWORD
   if (setjmp(jmpbuf))
	  PNG_ABORT();
   png_memcpy(png_ptr->jmpbuf,jmpbuf,png_sizeof(jmp_buf));
#else
   if (setjmp(png_ptr->jmpbuf))
	  PNG_ABORT();
#endif
#endif
   return (png_ptr);
}

#if defined(PNG_1_0_X) || defined(PNG_1_2_X)
/* Initialize PNG structure for reading, and allocate any memory needed.
   This interface is deprecated in favour of the png_create_read_struct(),
   and it will disappear as of libpng-1.3.0. */
#undef png_read_init
void PNGAPI
png_read_init(png_structp png_ptr)
{
   /* We only come here via pre-1.0.7-compiled applications */
   png_read_init_2(png_ptr, "1.0.6 or earlier", 0, 0);
}

void PNGAPI
png_read_init_2(png_structp png_ptr, png_const_charp user_png_ver,
   png_size_t png_struct_size, png_size_t png_info_size)
{
   /* We only come here via pre-1.0.12-compiled applications */
   if(png_ptr == NULL) return;
#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
   if(png_sizeof(png_struct) > png_struct_size ||
	  png_sizeof(png_info) > png_info_size)
   {
	  char msg[80];
	  png_ptr->warning_fn=NULL;
	  if (user_png_ver)
	  {
		png_snprintf(msg, 80,
		   "Application was compiled with png.h from libpng-%.20s",
		   user_png_ver);
		png_warning(png_ptr, msg);
	  }
	  png_snprintf(msg, 80,
		 "Application  is  running with png.c from libpng-%.20s",
		 png_libpng_ver);
	  png_warning(png_ptr, msg);
   }
#endif
   if(png_sizeof(png_struct) > png_struct_size)
	 {
	   png_ptr->error_fn=NULL;
#ifdef PNG_ERROR_NUMBERS_SUPPORTED
	   png_ptr->flags=0;
#endif
	   png_error(png_ptr,
	   "The png struct allocated by the application for reading is too small.");
	 }
   if(png_sizeof(png_info) > png_info_size)
	 {
	   png_ptr->error_fn=NULL;
#ifdef PNG_ERROR_NUMBERS_SUPPORTED
	   png_ptr->flags=0;
#endif
	   png_error(png_ptr,
		 "The info struct allocated by application for reading is too small.");
	 }
   png_read_init_3(&png_ptr, user_png_ver, png_struct_size);
}
#endif /* PNG_1_0_X || PNG_1_2_X */

void PNGAPI
png_read_init_3(png_structpp ptr_ptr, png_const_charp user_png_ver,
   png_size_t png_struct_size)
{
#ifdef PNG_SETJMP_SUPPORTED
   jmp_buf tmp_jmp;  /* to save current jump buffer */
#endif

   int i=0;

   png_structp png_ptr=*ptr_ptr;

   if(png_ptr == NULL) return;

   do
   {
	 if(user_png_ver[i] != png_libpng_ver[i])
	 {
#ifdef PNG_LEGACY_SUPPORTED
	   png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
#else
	   png_ptr->warning_fn=NULL;
	   png_warning(png_ptr,
		"Application uses deprecated png_read_init() and should be recompiled.");
	   break;
#endif
	 }
   } while (png_libpng_ver[i++]);

   png_debug(1, "in png_read_init_3\n");

#ifdef PNG_SETJMP_SUPPORTED
   /* save jump buffer and error functions */
   png_memcpy(tmp_jmp, png_ptr->jmpbuf, png_sizeof (jmp_buf));
#endif

   if(png_sizeof(png_struct) > png_struct_size)
	 {
	   png_destroy_struct(png_ptr);
	   *ptr_ptr = (png_structp)png_create_struct(PNG_STRUCT_PNG);
	   png_ptr = *ptr_ptr;
	 }

   /* reset all variables to 0 */
   png_memset(png_ptr, 0, png_sizeof (png_struct));

#ifdef PNG_SETJMP_SUPPORTED
   /* restore jump buffer */
   png_memcpy(png_ptr->jmpbuf, tmp_jmp, png_sizeof (jmp_buf));
#endif

   /* added at libpng-1.2.6 */
#ifdef PNG_SET_USER_LIMITS_SUPPORTED
   png_ptr->user_width_max=PNG_USER_WIDTH_MAX;
   png_ptr->user_height_max=PNG_USER_HEIGHT_MAX;
#endif

   /* initialize zbuf - compression buffer */
   png_ptr->zbuf_size = PNG_ZBUF_SIZE;
   png_ptr->zbuf = (png_bytep)png_malloc(png_ptr,
	 (png_uint_32)png_ptr->zbuf_size);
   png_ptr->zstream.zalloc = png_zalloc;
   png_ptr->zstream.zfree = png_zfree;
   png_ptr->zstream.opaque = (voidpf)png_ptr;

   switch (inflateInit(&png_ptr->zstream))
   {
	 case Z_OK: /* Do nothing */ break;
	 case Z_MEM_ERROR:
	 case Z_STREAM_ERROR: png_error(png_ptr, "zlib memory"); break;
	 case Z_VERSION_ERROR: png_error(png_ptr, "zlib version"); break;
	 default: png_error(png_ptr, "Unknown zlib error");
   }

   png_ptr->zstream.next_out = png_ptr->zbuf;
   png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;

   png_set_read_fn(png_ptr, png_voidp_NULL, png_rw_ptr_NULL);
}

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
/* Read the information before the actual image data.  This has been
 * changed in v0.90 to allow reading a file that already has the magic
 * bytes read from the stream.  You can tell libpng how many bytes have
 * been read from the beginning of the stream (up to the maximum of 8)
 * via png_set_sig_bytes(), and we will only check the remaining bytes
 * here.  The application can then have access to the signature bytes we
 * read if it is determined that this isn't a valid PNG file.
 */
void PNGAPI
png_read_info(png_structp png_ptr, png_infop info_ptr)
{
   if(png_ptr == NULL) return;
   png_debug(1, "in png_read_info\n");
   /* If we haven't checked all of the PNG signature bytes, do so now. */
   if (png_ptr->sig_bytes < 8)
   {
	  png_size_t num_checked = png_ptr->sig_bytes,
				 num_to_check = 8 - num_checked;

	  png_read_data(png_ptr, &(info_ptr->signature[num_checked]), num_to_check);
	  png_ptr->sig_bytes = 8;

	  if (png_sig_cmp(info_ptr->signature, num_checked, num_to_check))
	  {
		 if (num_checked < 4 &&
			 png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))
			png_error(png_ptr, "Not a PNG file");
		 else
			png_error(png_ptr, "PNG file corrupted by ASCII conversion");
	  }
	  if (num_checked < 3)
		 png_ptr->mode |= PNG_HAVE_PNG_SIGNATURE;
   }

   for(;;)
   {
#ifdef PNG_USE_LOCAL_ARRAYS
	  PNG_CONST PNG_IHDR;
	  PNG_CONST PNG_IDAT;
	  PNG_CONST PNG_IEND;
	  PNG_CONST PNG_PLTE;
#if defined(PNG_READ_bKGD_SUPPORTED)
	  PNG_CONST PNG_bKGD;
#endif
#if defined(PNG_READ_cHRM_SUPPORTED)
	  PNG_CONST PNG_cHRM;
#endif
#if defined(PNG_READ_gAMA_SUPPORTED)
	  PNG_CONST PNG_gAMA;
#endif
#if defined(PNG_READ_hIST_SUPPORTED)
	  PNG_CONST PNG_hIST;
#endif
#if defined(PNG_READ_iCCP_SUPPORTED)
	  PNG_CONST PNG_iCCP;
#endif
#if defined(PNG_READ_iTXt_SUPPORTED)
	  PNG_CONST PNG_iTXt;
#endif
#if defined(PNG_READ_oFFs_SUPPORTED)
	  PNG_CONST PNG_oFFs;
#endif
#if defined(PNG_READ_pCAL_SUPPORTED)
	  PNG_CONST PNG_pCAL;
#endif
#if defined(PNG_READ_pHYs_SUPPORTED)
	  PNG_CONST PNG_pHYs;
#endif
#if defined(PNG_READ_sBIT_SUPPORTED)
	  PNG_CONST PNG_sBIT;
#endif
#if defined(PNG_READ_sCAL_SUPPORTED)
	  PNG_CONST PNG_sCAL;
#endif
#if defined(PNG_READ_sPLT_SUPPORTED)
	  PNG_CONST PNG_sPLT;
#endif
#if defined(PNG_READ_sRGB_SUPPORTED)
	  PNG_CONST PNG_sRGB;
#endif
#if defined(PNG_READ_tEXt_SUPPORTED)
	  PNG_CONST PNG_tEXt;
#endif
#if defined(PNG_READ_tIME_SUPPORTED)
	  PNG_CONST PNG_tIME;
#endif
#if defined(PNG_READ_tRNS_SUPPORTED)
	  PNG_CONST PNG_tRNS;
#endif
#if defined(PNG_READ_zTXt_SUPPORTED)
	  PNG_CONST PNG_zTXt;
#endif
#endif /* PNG_USE_LOCAL_ARRAYS */
	  png_byte chunk_length[4];
	  png_uint_32 length;

	  png_read_data(png_ptr, chunk_length, 4);
	  length = png_get_uint_31(png_ptr,chunk_length);

	  png_reset_crc(png_ptr);
	  png_crc_read(png_ptr, png_ptr->chunk_name, 4);

	  png_debug2(0, "Reading %s chunk, length=%lu.\n", png_ptr->chunk_name,
		 length);

	  /* This should be a binary subdivision search or a hash for
	   * matching the chunk name rather than a linear search.
	   */
	  if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
		if(png_ptr->mode & PNG_AFTER_IDAT)
		  png_ptr->mode |= PNG_HAVE_CHUNK_AFTER_IDAT;

	  if (!png_memcmp(png_ptr->chunk_name, png_IHDR, 4))
		 png_handle_IHDR(png_ptr, info_ptr, length);
	  else if (!png_memcmp(png_ptr->chunk_name, png_IEND, 4))
		 png_handle_IEND(png_ptr, info_ptr, length);
#ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
	  else if (png_handle_as_unknown(png_ptr, png_ptr->chunk_name))
	  {
		 if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
			png_ptr->mode |= PNG_HAVE_IDAT;
		 png_handle_unknown(png_ptr, info_ptr, length);
		 if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
			png_ptr->mode |= PNG_HAVE_PLTE;
		 else if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
		 {
			if (!(png_ptr->mode & PNG_HAVE_IHDR))
			   png_error(png_ptr, "Missing IHDR before IDAT");
			else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
					 !(png_ptr->mode & PNG_HAVE_PLTE))
			   png_error(png_ptr, "Missing PLTE before IDAT");
			break;
		 }
	  }
#endif
	  else if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
		 png_handle_PLTE(png_ptr, info_ptr, length);
	  else if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
	  {
		 if (!(png_ptr->mode & PNG_HAVE_IHDR))
			png_error(png_ptr, "Missing IHDR before IDAT");
		 else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
				  !(png_ptr->mode & PNG_HAVE_PLTE))
			png_error(png_ptr, "Missing PLTE before IDAT");

		 png_ptr->idat_size = length;
		 png_ptr->mode |= PNG_HAVE_IDAT;
		 break;
	  }
#if defined(PNG_READ_bKGD_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_bKGD, 4))
		 png_handle_bKGD(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_cHRM_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_cHRM, 4))
		 png_handle_cHRM(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_gAMA_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_gAMA, 4))
		 png_handle_gAMA(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_hIST_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_hIST, 4))
		 png_handle_hIST(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_oFFs_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_oFFs, 4))
		 png_handle_oFFs(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_pCAL_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_pCAL, 4))
		 png_handle_pCAL(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_sCAL_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_sCAL, 4))
		 png_handle_sCAL(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_pHYs_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_pHYs, 4))
		 png_handle_pHYs(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_sBIT_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_sBIT, 4))
		 png_handle_sBIT(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_sRGB_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_sRGB, 4))
		 png_handle_sRGB(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_iCCP_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_iCCP, 4))
		 png_handle_iCCP(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_sPLT_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_sPLT, 4))
		 png_handle_sPLT(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_tEXt_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_tEXt, 4))
		 png_handle_tEXt(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_tIME_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_tIME, 4))
		 png_handle_tIME(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_tRNS_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_tRNS, 4))
		 png_handle_tRNS(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_zTXt_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_zTXt, 4))
		 png_handle_zTXt(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_iTXt_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_iTXt, 4))
		 png_handle_iTXt(png_ptr, info_ptr, length);
#endif
	  else
		 png_handle_unknown(png_ptr, info_ptr, length);
   }
}
#endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */

/* optional call to update the users info_ptr structure */
void PNGAPI
png_read_update_info(png_structp png_ptr, png_infop info_ptr)
{
   png_debug(1, "in png_read_update_info\n");
   if(png_ptr == NULL) return;
   if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))
	  png_read_start_row(png_ptr);
   else
	  png_warning(png_ptr,
	  "Ignoring extra png_read_update_info() call; row buffer not reallocated");
   png_read_transform_info(png_ptr, info_ptr);
}

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
/* Initialize palette, background, etc, after transformations
 * are set, but before any reading takes place.  This allows
 * the user to obtain a gamma-corrected palette, for example.
 * If the user doesn't call this, we will do it ourselves.
 */
void PNGAPI
png_start_read_image(png_structp png_ptr)
{
   png_debug(1, "in png_start_read_image\n");
   if(png_ptr == NULL) return;
   if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))
	  png_read_start_row(png_ptr);
}
#endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
void PNGAPI
png_read_row(png_structp png_ptr, png_bytep row, png_bytep dsp_row)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_CONST PNG_IDAT;
   PNG_CONST int png_pass_dsp_mask[7] = {0xff, 0x0f, 0xff, 0x33, 0xff, 0x55,
	 0xff};
   PNG_CONST int png_pass_mask[7] = {0x80, 0x08, 0x88, 0x22, 0xaa, 0x55, 0xff};
#endif
   int ret;
   if(png_ptr == NULL) return;
   png_debug2(1, "in png_read_row (row %lu, pass %d)\n",
	  png_ptr->row_number, png_ptr->pass);
   if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))
	  png_read_start_row(png_ptr);
   if (png_ptr->row_number == 0 && png_ptr->pass == 0)
   {
   /* check for transforms that have been set but were defined out */
#if defined(PNG_WRITE_INVERT_SUPPORTED) && !defined(PNG_READ_INVERT_SUPPORTED)
   if (png_ptr->transformations & PNG_INVERT_MONO)
	  png_warning(png_ptr, "PNG_READ_INVERT_SUPPORTED is not defined.");
#endif
#if defined(PNG_WRITE_FILLER_SUPPORTED) && !defined(PNG_READ_FILLER_SUPPORTED)
   if (png_ptr->transformations & PNG_FILLER)
	  png_warning(png_ptr, "PNG_READ_FILLER_SUPPORTED is not defined.");
#endif
#if defined(PNG_WRITE_PACKSWAP_SUPPORTED) && !defined(PNG_READ_PACKSWAP_SUPPORTED)
   if (png_ptr->transformations & PNG_PACKSWAP)
	  png_warning(png_ptr, "PNG_READ_PACKSWAP_SUPPORTED is not defined.");
#endif
#if defined(PNG_WRITE_PACK_SUPPORTED) && !defined(PNG_READ_PACK_SUPPORTED)
   if (png_ptr->transformations & PNG_PACK)
	  png_warning(png_ptr, "PNG_READ_PACK_SUPPORTED is not defined.");
#endif
#if defined(PNG_WRITE_SHIFT_SUPPORTED) && !defined(PNG_READ_SHIFT_SUPPORTED)
   if (png_ptr->transformations & PNG_SHIFT)
	  png_warning(png_ptr, "PNG_READ_SHIFT_SUPPORTED is not defined.");
#endif
#if defined(PNG_WRITE_BGR_SUPPORTED) && !defined(PNG_READ_BGR_SUPPORTED)
   if (png_ptr->transformations & PNG_BGR)
	  png_warning(png_ptr, "PNG_READ_BGR_SUPPORTED is not defined.");
#endif
#if defined(PNG_WRITE_SWAP_SUPPORTED) && !defined(PNG_READ_SWAP_SUPPORTED)
   if (png_ptr->transformations & PNG_SWAP_BYTES)
	  png_warning(png_ptr, "PNG_READ_SWAP_SUPPORTED is not defined.");
#endif
   }

#if defined(PNG_READ_INTERLACING_SUPPORTED)
   /* if interlaced and we do not need a new row, combine row and return */
   if (png_ptr->interlaced && (png_ptr->transformations & PNG_INTERLACE))
   {
	  switch (png_ptr->pass)
	  {
		 case 0:
			if (png_ptr->row_number & 0x07)
			{
			   if (dsp_row != NULL)
				  png_combine_row(png_ptr, dsp_row,
					 png_pass_dsp_mask[png_ptr->pass]);
			   png_read_finish_row(png_ptr);
			   return;
			}
			break;
		 case 1:
			if ((png_ptr->row_number & 0x07) || png_ptr->width < 5)
			{
			   if (dsp_row != NULL)
				  png_combine_row(png_ptr, dsp_row,
					 png_pass_dsp_mask[png_ptr->pass]);
			   png_read_finish_row(png_ptr);
			   return;
			}
			break;
		 case 2:
			if ((png_ptr->row_number & 0x07) != 4)
			{
			   if (dsp_row != NULL && (png_ptr->row_number & 4))
				  png_combine_row(png_ptr, dsp_row,
					 png_pass_dsp_mask[png_ptr->pass]);
			   png_read_finish_row(png_ptr);
			   return;
			}
			break;
		 case 3:
			if ((png_ptr->row_number & 3) || png_ptr->width < 3)
			{
			   if (dsp_row != NULL)
				  png_combine_row(png_ptr, dsp_row,
					 png_pass_dsp_mask[png_ptr->pass]);
			   png_read_finish_row(png_ptr);
			   return;
			}
			break;
		 case 4:
			if ((png_ptr->row_number & 3) != 2)
			{
			   if (dsp_row != NULL && (png_ptr->row_number & 2))
				  png_combine_row(png_ptr, dsp_row,
					 png_pass_dsp_mask[png_ptr->pass]);
			   png_read_finish_row(png_ptr);
			   return;
			}
			break;
		 case 5:
			if ((png_ptr->row_number & 1) || png_ptr->width < 2)
			{
			   if (dsp_row != NULL)
				  png_combine_row(png_ptr, dsp_row,
					 png_pass_dsp_mask[png_ptr->pass]);
			   png_read_finish_row(png_ptr);
			   return;
			}
			break;
		 case 6:
			if (!(png_ptr->row_number & 1))
			{
			   png_read_finish_row(png_ptr);
			   return;
			}
			break;
	  }
   }
#endif

   if (!(png_ptr->mode & PNG_HAVE_IDAT))
	  png_error(png_ptr, "Invalid attempt to read row data");

   png_ptr->zstream.next_out = png_ptr->row_buf;
   png_ptr->zstream.avail_out = (uInt)png_ptr->irowbytes;
   do
   {
	  if (!(png_ptr->zstream.avail_in))
	  {
		 while (!png_ptr->idat_size)
		 {
			png_byte chunk_length[4];

			png_crc_finish(png_ptr, 0);

			png_read_data(png_ptr, chunk_length, 4);
			png_ptr->idat_size = png_get_uint_31(png_ptr,chunk_length);

			png_reset_crc(png_ptr);
			png_crc_read(png_ptr, png_ptr->chunk_name, 4);
			if (png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
			   png_error(png_ptr, "Not enough image data");
		 }
		 png_ptr->zstream.avail_in = (uInt)png_ptr->zbuf_size;
		 png_ptr->zstream.next_in = png_ptr->zbuf;
		 if (png_ptr->zbuf_size > png_ptr->idat_size)
			png_ptr->zstream.avail_in = (uInt)png_ptr->idat_size;
		 png_crc_read(png_ptr, png_ptr->zbuf,
			(png_size_t)png_ptr->zstream.avail_in);
		 png_ptr->idat_size -= png_ptr->zstream.avail_in;
	  }
	  ret = inflate(&png_ptr->zstream, Z_PARTIAL_FLUSH);
	  if (ret == Z_STREAM_END)
	  {
		 if (png_ptr->zstream.avail_out || png_ptr->zstream.avail_in ||
			png_ptr->idat_size)
			png_error(png_ptr, "Extra compressed data");
		 png_ptr->mode |= PNG_AFTER_IDAT;
		 png_ptr->flags |= PNG_FLAG_ZLIB_FINISHED;
		 break;
	  }
	  if (ret != Z_OK)
		 png_error(png_ptr, png_ptr->zstream.msg ? png_ptr->zstream.msg :
				   "Decompression error");

   } while (png_ptr->zstream.avail_out);

   png_ptr->row_info.color_type = png_ptr->color_type;
   png_ptr->row_info.width = png_ptr->iwidth;
   png_ptr->row_info.channels = png_ptr->channels;
   png_ptr->row_info.bit_depth = png_ptr->bit_depth;
   png_ptr->row_info.pixel_depth = png_ptr->pixel_depth;
   png_ptr->row_info.rowbytes = PNG_ROWBYTES(png_ptr->row_info.pixel_depth,
	   png_ptr->row_info.width);

   if(png_ptr->row_buf[0])
   png_read_filter_row(png_ptr, &(png_ptr->row_info),
	  png_ptr->row_buf + 1, png_ptr->prev_row + 1,
	  (int)(png_ptr->row_buf[0]));

   png_memcpy_check(png_ptr, png_ptr->prev_row, png_ptr->row_buf,
	  png_ptr->rowbytes + 1);

#if defined(PNG_MNG_FEATURES_SUPPORTED)
   if((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) &&
	  (png_ptr->filter_type == PNG_INTRAPIXEL_DIFFERENCING))
   {
	  /* Intrapixel differencing */
	  png_do_read_intrapixel(&(png_ptr->row_info), png_ptr->row_buf + 1);
   }
#endif

   if (png_ptr->transformations || (png_ptr->flags&PNG_FLAG_STRIP_ALPHA))
	  png_do_read_transformations(png_ptr);

#if defined(PNG_READ_INTERLACING_SUPPORTED)
   /* blow up interlaced rows to full size */
   if (png_ptr->interlaced &&
	  (png_ptr->transformations & PNG_INTERLACE))
   {
	  if (png_ptr->pass < 6)
/*       old interface (pre-1.0.9):
		 png_do_read_interlace(&(png_ptr->row_info),
			png_ptr->row_buf + 1, png_ptr->pass, png_ptr->transformations);
 */
		 png_do_read_interlace(png_ptr);

	  if (dsp_row != NULL)
		 png_combine_row(png_ptr, dsp_row,
			png_pass_dsp_mask[png_ptr->pass]);
	  if (row != NULL)
		 png_combine_row(png_ptr, row,
			png_pass_mask[png_ptr->pass]);
   }
   else
#endif
   {
	  if (row != NULL)
		 png_combine_row(png_ptr, row, 0xff);
	  if (dsp_row != NULL)
		 png_combine_row(png_ptr, dsp_row, 0xff);
   }
   png_read_finish_row(png_ptr);

   if (png_ptr->read_row_fn != NULL)
	  (*(png_ptr->read_row_fn))(png_ptr, png_ptr->row_number, png_ptr->pass);
}
#endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
/* Read one or more rows of image data.  If the image is interlaced,
 * and png_set_interlace_handling() has been called, the rows need to
 * contain the contents of the rows from the previous pass.  If the
 * image has alpha or transparency, and png_handle_alpha()[*] has been
 * called, the rows contents must be initialized to the contents of the
 * screen.
 *
 * "row" holds the actual image, and pixels are placed in it
 * as they arrive.  If the image is displayed after each pass, it will
 * appear to "sparkle" in.  "display_row" can be used to display a
 * "chunky" progressive image, with finer detail added as it becomes
 * available.  If you do not want this "chunky" display, you may pass
 * NULL for display_row.  If you do not want the sparkle display, and
 * you have not called png_handle_alpha(), you may pass NULL for rows.
 * If you have called png_handle_alpha(), and the image has either an
 * alpha channel or a transparency chunk, you must provide a buffer for
 * rows.  In this case, you do not have to provide a display_row buffer
 * also, but you may.  If the image is not interlaced, or if you have
 * not called png_set_interlace_handling(), the display_row buffer will
 * be ignored, so pass NULL to it.
 *
 * [*] png_handle_alpha() does not exist yet, as of this version of libpng
 */

void PNGAPI
png_read_rows(png_structp png_ptr, png_bytepp row,
   png_bytepp display_row, png_uint_32 num_rows)
{
   png_uint_32 i;
   png_bytepp rp;
   png_bytepp dp;

   png_debug(1, "in png_read_rows\n");
   if(png_ptr == NULL) return;
   rp = row;
   dp = display_row;
   if (rp != NULL && dp != NULL)
	  for (i = 0; i < num_rows; i++)
	  {
		 png_bytep rptr = *rp++;
		 png_bytep dptr = *dp++;

		 png_read_row(png_ptr, rptr, dptr);
	  }
   else if(rp != NULL)
	  for (i = 0; i < num_rows; i++)
	  {
		 png_bytep rptr = *rp;
		 png_read_row(png_ptr, rptr, png_bytep_NULL);
		 rp++;
	  }
   else if(dp != NULL)
	  for (i = 0; i < num_rows; i++)
	  {
		 png_bytep dptr = *dp;
		 png_read_row(png_ptr, png_bytep_NULL, dptr);
		 dp++;
	  }
}
#endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
/* Read the entire image.  If the image has an alpha channel or a tRNS
 * chunk, and you have called png_handle_alpha()[*], you will need to
 * initialize the image to the current image that PNG will be overlaying.
 * We set the num_rows again here, in case it was incorrectly set in
 * png_read_start_row() by a call to png_read_update_info() or
 * png_start_read_image() if png_set_interlace_handling() wasn't called
 * prior to either of these functions like it should have been.  You can
 * only call this function once.  If you desire to have an image for
 * each pass of a interlaced image, use png_read_rows() instead.
 *
 * [*] png_handle_alpha() does not exist yet, as of this version of libpng
 */
void PNGAPI
png_read_image(png_structp png_ptr, png_bytepp image)
{
   png_uint_32 i,image_height;
   int pass, j;
   png_bytepp rp;

   png_debug(1, "in png_read_image\n");
   if(png_ptr == NULL) return;

#ifdef PNG_READ_INTERLACING_SUPPORTED
   pass = png_set_interlace_handling(png_ptr);
#else
   if (png_ptr->interlaced)
	  png_error(png_ptr,
		"Cannot read interlaced image -- interlace handler disabled.");
   pass = 1;
#endif

   image_height=png_ptr->height;
   png_ptr->num_rows = image_height; /* Make sure this is set correctly */

   for (j = 0; j < pass; j++)
   {
	  rp = image;
	  for (i = 0; i < image_height; i++)
	  {
		 png_read_row(png_ptr, *rp, png_bytep_NULL);
		 rp++;
	  }
   }
}
#endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
/* Read the end of the PNG file.  Will not read past the end of the
 * file, will verify the end is accurate, and will read any comments
 * or time information at the end of the file, if info is not NULL.
 */
void PNGAPI
png_read_end(png_structp png_ptr, png_infop info_ptr)
{
   png_byte chunk_length[4];
   png_uint_32 length;

   png_debug(1, "in png_read_end\n");
   if(png_ptr == NULL) return;
   png_crc_finish(png_ptr, 0); /* Finish off CRC from last IDAT chunk */

   do
   {
#ifdef PNG_USE_LOCAL_ARRAYS
	  PNG_CONST PNG_IHDR;
	  PNG_CONST PNG_IDAT;
	  PNG_CONST PNG_IEND;
	  PNG_CONST PNG_PLTE;
#if defined(PNG_READ_bKGD_SUPPORTED)
	  PNG_CONST PNG_bKGD;
#endif
#if defined(PNG_READ_cHRM_SUPPORTED)
	  PNG_CONST PNG_cHRM;
#endif
#if defined(PNG_READ_gAMA_SUPPORTED)
	  PNG_CONST PNG_gAMA;
#endif
#if defined(PNG_READ_hIST_SUPPORTED)
	  PNG_CONST PNG_hIST;
#endif
#if defined(PNG_READ_iCCP_SUPPORTED)
	  PNG_CONST PNG_iCCP;
#endif
#if defined(PNG_READ_iTXt_SUPPORTED)
	  PNG_CONST PNG_iTXt;
#endif
#if defined(PNG_READ_oFFs_SUPPORTED)
	  PNG_CONST PNG_oFFs;
#endif
#if defined(PNG_READ_pCAL_SUPPORTED)
	  PNG_CONST PNG_pCAL;
#endif
#if defined(PNG_READ_pHYs_SUPPORTED)
	  PNG_CONST PNG_pHYs;
#endif
#if defined(PNG_READ_sBIT_SUPPORTED)
	  PNG_CONST PNG_sBIT;
#endif
#if defined(PNG_READ_sCAL_SUPPORTED)
	  PNG_CONST PNG_sCAL;
#endif
#if defined(PNG_READ_sPLT_SUPPORTED)
	  PNG_CONST PNG_sPLT;
#endif
#if defined(PNG_READ_sRGB_SUPPORTED)
	  PNG_CONST PNG_sRGB;
#endif
#if defined(PNG_READ_tEXt_SUPPORTED)
	  PNG_CONST PNG_tEXt;
#endif
#if defined(PNG_READ_tIME_SUPPORTED)
	  PNG_CONST PNG_tIME;
#endif
#if defined(PNG_READ_tRNS_SUPPORTED)
	  PNG_CONST PNG_tRNS;
#endif
#if defined(PNG_READ_zTXt_SUPPORTED)
	  PNG_CONST PNG_zTXt;
#endif
#endif /* PNG_USE_LOCAL_ARRAYS */

	  png_read_data(png_ptr, chunk_length, 4);
	  length = png_get_uint_31(png_ptr,chunk_length);

	  png_reset_crc(png_ptr);
	  png_crc_read(png_ptr, png_ptr->chunk_name, 4);

	  png_debug1(0, "Reading %s chunk.\n", png_ptr->chunk_name);

	  if (!png_memcmp(png_ptr->chunk_name, png_IHDR, 4))
		 png_handle_IHDR(png_ptr, info_ptr, length);
	  else if (!png_memcmp(png_ptr->chunk_name, png_IEND, 4))
		 png_handle_IEND(png_ptr, info_ptr, length);
#ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
	  else if (png_handle_as_unknown(png_ptr, png_ptr->chunk_name))
	  {
		 if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
		 {
			if ((length > 0) || (png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT))
			   png_error(png_ptr, "Too many IDAT's found");
		 }
		 png_handle_unknown(png_ptr, info_ptr, length);
		 if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
			png_ptr->mode |= PNG_HAVE_PLTE;
	  }
#endif
	  else if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
	  {
		 /* Zero length IDATs are legal after the last IDAT has been
		  * read, but not after other chunks have been read.
		  */
		 if ((length > 0) || (png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT))
			png_error(png_ptr, "Too many IDAT's found");
		 png_crc_finish(png_ptr, length);
	  }
	  else if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
		 png_handle_PLTE(png_ptr, info_ptr, length);
#if defined(PNG_READ_bKGD_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_bKGD, 4))
		 png_handle_bKGD(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_cHRM_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_cHRM, 4))
		 png_handle_cHRM(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_gAMA_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_gAMA, 4))
		 png_handle_gAMA(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_hIST_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_hIST, 4))
		 png_handle_hIST(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_oFFs_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_oFFs, 4))
		 png_handle_oFFs(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_pCAL_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_pCAL, 4))
		 png_handle_pCAL(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_sCAL_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_sCAL, 4))
		 png_handle_sCAL(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_pHYs_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_pHYs, 4))
		 png_handle_pHYs(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_sBIT_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_sBIT, 4))
		 png_handle_sBIT(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_sRGB_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_sRGB, 4))
		 png_handle_sRGB(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_iCCP_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_iCCP, 4))
		 png_handle_iCCP(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_sPLT_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_sPLT, 4))
		 png_handle_sPLT(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_tEXt_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_tEXt, 4))
		 png_handle_tEXt(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_tIME_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_tIME, 4))
		 png_handle_tIME(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_tRNS_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_tRNS, 4))
		 png_handle_tRNS(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_zTXt_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_zTXt, 4))
		 png_handle_zTXt(png_ptr, info_ptr, length);
#endif
#if defined(PNG_READ_iTXt_SUPPORTED)
	  else if (!png_memcmp(png_ptr->chunk_name, png_iTXt, 4))
		 png_handle_iTXt(png_ptr, info_ptr, length);
#endif
	  else
		 png_handle_unknown(png_ptr, info_ptr, length);
   } while (!(png_ptr->mode & PNG_HAVE_IEND));
}
#endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */

/* free all memory used by the read */
void PNGAPI
png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr,
   png_infopp end_info_ptr_ptr)
{
   png_structp png_ptr = NULL;
   png_infop info_ptr = NULL, end_info_ptr = NULL;
#ifdef PNG_USER_MEM_SUPPORTED
   png_free_ptr free_fn;
   png_voidp mem_ptr;
#endif

   png_debug(1, "in png_destroy_read_struct\n");
   if (png_ptr_ptr != NULL)
	  png_ptr = *png_ptr_ptr;

   if (info_ptr_ptr != NULL)
	  info_ptr = *info_ptr_ptr;

   if (end_info_ptr_ptr != NULL)
	  end_info_ptr = *end_info_ptr_ptr;

#ifdef PNG_USER_MEM_SUPPORTED
   free_fn = png_ptr->free_fn;
   mem_ptr = png_ptr->mem_ptr;
#endif

   png_read_destroy(png_ptr, info_ptr, end_info_ptr);

   if (info_ptr != NULL)
   {
#if defined(PNG_TEXT_SUPPORTED)
	  png_free_data(png_ptr, info_ptr, PNG_FREE_TEXT, -1);
#endif

#ifdef PNG_USER_MEM_SUPPORTED
	  png_destroy_struct_2((png_voidp)info_ptr, (png_free_ptr)free_fn,
		  (png_voidp)mem_ptr);
#else
	  png_destroy_struct((png_voidp)info_ptr);
#endif
	  *info_ptr_ptr = NULL;
   }

   if (end_info_ptr != NULL)
   {
#if defined(PNG_READ_TEXT_SUPPORTED)
	  png_free_data(png_ptr, end_info_ptr, PNG_FREE_TEXT, -1);
#endif
#ifdef PNG_USER_MEM_SUPPORTED
	  png_destroy_struct_2((png_voidp)end_info_ptr, (png_free_ptr)free_fn,
		 (png_voidp)mem_ptr);
#else
	  png_destroy_struct((png_voidp)end_info_ptr);
#endif
	  *end_info_ptr_ptr = NULL;
   }

   if (png_ptr != NULL)
   {
#ifdef PNG_USER_MEM_SUPPORTED
	  png_destroy_struct_2((png_voidp)png_ptr, (png_free_ptr)free_fn,
		  (png_voidp)mem_ptr);
#else
	  png_destroy_struct((png_voidp)png_ptr);
#endif
	  *png_ptr_ptr = NULL;
   }
}

/* free all memory used by the read (old method) */
void /* PRIVATE */
png_read_destroy(png_structp png_ptr, png_infop info_ptr, png_infop end_info_ptr)
{
#ifdef PNG_SETJMP_SUPPORTED
   jmp_buf tmp_jmp;
#endif
   png_error_ptr error_fn;
   png_error_ptr warning_fn;
   png_voidp error_ptr;
#ifdef PNG_USER_MEM_SUPPORTED
   png_free_ptr free_fn;
#endif

   png_debug(1, "in png_read_destroy\n");
   if (info_ptr != NULL)
	  png_info_destroy(png_ptr, info_ptr);

   if (end_info_ptr != NULL)
	  png_info_destroy(png_ptr, end_info_ptr);

   png_free(png_ptr, png_ptr->zbuf);
   png_free(png_ptr, png_ptr->big_row_buf);
   png_free(png_ptr, png_ptr->prev_row);
#if defined(PNG_READ_DITHER_SUPPORTED)
   png_free(png_ptr, png_ptr->palette_lookup);
   png_free(png_ptr, png_ptr->dither_index);
#endif
#if defined(PNG_READ_GAMMA_SUPPORTED)
   png_free(png_ptr, png_ptr->gamma_table);
#endif
#if defined(PNG_READ_BACKGROUND_SUPPORTED)
   png_free(png_ptr, png_ptr->gamma_from_1);
   png_free(png_ptr, png_ptr->gamma_to_1);
#endif
#ifdef PNG_FREE_ME_SUPPORTED
   if (png_ptr->free_me & PNG_FREE_PLTE)
	  png_zfree(png_ptr, png_ptr->palette);
   png_ptr->free_me &= ~PNG_FREE_PLTE;
#else
   if (png_ptr->flags & PNG_FLAG_FREE_PLTE)
	  png_zfree(png_ptr, png_ptr->palette);
   png_ptr->flags &= ~PNG_FLAG_FREE_PLTE;
#endif
#if defined(PNG_tRNS_SUPPORTED) || \
	defined(PNG_READ_EXPAND_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
#ifdef PNG_FREE_ME_SUPPORTED
   if (png_ptr->free_me & PNG_FREE_TRNS)
	  png_free(png_ptr, png_ptr->trans);
   png_ptr->free_me &= ~PNG_FREE_TRNS;
#else
   if (png_ptr->flags & PNG_FLAG_FREE_TRNS)
	  png_free(png_ptr, png_ptr->trans);
   png_ptr->flags &= ~PNG_FLAG_FREE_TRNS;
#endif
#endif
#if defined(PNG_READ_hIST_SUPPORTED)
#ifdef PNG_FREE_ME_SUPPORTED
   if (png_ptr->free_me & PNG_FREE_HIST)
	  png_free(png_ptr, png_ptr->hist);
   png_ptr->free_me &= ~PNG_FREE_HIST;
#else
   if (png_ptr->flags & PNG_FLAG_FREE_HIST)
	  png_free(png_ptr, png_ptr->hist);
   png_ptr->flags &= ~PNG_FLAG_FREE_HIST;
#endif
#endif
#if defined(PNG_READ_GAMMA_SUPPORTED)
   if (png_ptr->gamma_16_table != NULL)
   {
	  int i;
	  int istop = (1 << (8 - png_ptr->gamma_shift));
	  for (i = 0; i < istop; i++)
	  {
		 png_free(png_ptr, png_ptr->gamma_16_table[i]);
	  }
   png_free(png_ptr, png_ptr->gamma_16_table);
   }
#if defined(PNG_READ_BACKGROUND_SUPPORTED)
   if (png_ptr->gamma_16_from_1 != NULL)
   {
	  int i;
	  int istop = (1 << (8 - png_ptr->gamma_shift));
	  for (i = 0; i < istop; i++)
	  {
		 png_free(png_ptr, png_ptr->gamma_16_from_1[i]);
	  }
   png_free(png_ptr, png_ptr->gamma_16_from_1);
   }
   if (png_ptr->gamma_16_to_1 != NULL)
   {
	  int i;
	  int istop = (1 << (8 - png_ptr->gamma_shift));
	  for (i = 0; i < istop; i++)
	  {
		 png_free(png_ptr, png_ptr->gamma_16_to_1[i]);
	  }
   png_free(png_ptr, png_ptr->gamma_16_to_1);
   }
#endif
#endif
#if defined(PNG_TIME_RFC1123_SUPPORTED)
   png_free(png_ptr, png_ptr->time_buffer);
#endif

   inflateEnd(&png_ptr->zstream);
#ifdef PNG_PROGRESSIVE_READ_SUPPORTED
   png_free(png_ptr, png_ptr->save_buffer);
#endif

#ifdef PNG_PROGRESSIVE_READ_SUPPORTED
#ifdef PNG_TEXT_SUPPORTED
   png_free(png_ptr, png_ptr->current_text);
#endif /* PNG_TEXT_SUPPORTED */
#endif /* PNG_PROGRESSIVE_READ_SUPPORTED */

   /* Save the important info out of the png_struct, in case it is
	* being used again.
	*/
#ifdef PNG_SETJMP_SUPPORTED
   png_memcpy(tmp_jmp, png_ptr->jmpbuf, png_sizeof (jmp_buf));
#endif

   error_fn = png_ptr->error_fn;
   warning_fn = png_ptr->warning_fn;
   error_ptr = png_ptr->error_ptr;
#ifdef PNG_USER_MEM_SUPPORTED
   free_fn = png_ptr->free_fn;
#endif

   png_memset(png_ptr, 0, png_sizeof (png_struct));

   png_ptr->error_fn = error_fn;
   png_ptr->warning_fn = warning_fn;
   png_ptr->error_ptr = error_ptr;
#ifdef PNG_USER_MEM_SUPPORTED
   png_ptr->free_fn = free_fn;
#endif

#ifdef PNG_SETJMP_SUPPORTED
   png_memcpy(png_ptr->jmpbuf, tmp_jmp, png_sizeof (jmp_buf));
#endif

}

void PNGAPI
png_set_read_status_fn(png_structp png_ptr, png_read_status_ptr read_row_fn)
{
   if(png_ptr == NULL) return;
   png_ptr->read_row_fn = read_row_fn;
}

#ifndef PNG_NO_SEQUENTIAL_READ_SUPPORTED
#if defined(PNG_INFO_IMAGE_SUPPORTED)
void PNGAPI
png_read_png(png_structp png_ptr, png_infop info_ptr,
						   int transforms,
						   voidp params)
{
   int row;

   if(png_ptr == NULL) return;
#if defined(PNG_READ_INVERT_ALPHA_SUPPORTED)
   /* invert the alpha channel from opacity to transparency
	*/
   if (transforms & PNG_TRANSFORM_INVERT_ALPHA)
	   png_set_invert_alpha(png_ptr);
#endif

   /* png_read_info() gives us all of the information from the
	* PNG file before the first IDAT (image data chunk).
	*/
   png_read_info(png_ptr, info_ptr);
   if (info_ptr->height > PNG_UINT_32_MAX/png_sizeof(png_bytep))
	  png_error(png_ptr,"Image is too high to process with png_read_png()");

   /* -------------- image transformations start here ------------------- */

#if defined(PNG_READ_16_TO_8_SUPPORTED)
   /* tell libpng to strip 16 bit/color files down to 8 bits per color
	*/
   if (transforms & PNG_TRANSFORM_STRIP_16)
	   png_set_strip_16(png_ptr);
#endif

#if defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
   /* Strip alpha bytes from the input data without combining with
	* the background (not recommended).
	*/
   if (transforms & PNG_TRANSFORM_STRIP_ALPHA)
	   png_set_strip_alpha(png_ptr);
#endif

#if defined(PNG_READ_PACK_SUPPORTED) && !defined(PNG_READ_EXPAND_SUPPORTED)
   /* Extract multiple pixels with bit depths of 1, 2, or 4 from a single
	* byte into separate bytes (useful for paletted and grayscale images).
	*/
   if (transforms & PNG_TRANSFORM_PACKING)
	   png_set_packing(png_ptr);
#endif

#if defined(PNG_READ_PACKSWAP_SUPPORTED)
   /* Change the order of packed pixels to least significant bit first
	* (not useful if you are using png_set_packing).
	*/
   if (transforms & PNG_TRANSFORM_PACKSWAP)
	   png_set_packswap(png_ptr);
#endif

#if defined(PNG_READ_EXPAND_SUPPORTED)
   /* Expand paletted colors into true RGB triplets
	* Expand grayscale images to full 8 bits from 1, 2, or 4 bits/pixel
	* Expand paletted or RGB images with transparency to full alpha
	* channels so the data will be available as RGBA quartets.
	*/
   if (transforms & PNG_TRANSFORM_EXPAND)
	   if ((png_ptr->bit_depth < 8) ||
		   (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE) ||
		   (png_get_valid(png_ptr, info_ptr, PNG_INFO_tRNS)))
		 png_set_expand(png_ptr);
#endif

   /* We don't handle background color or gamma transformation or dithering.
	*/

#if defined(PNG_READ_INVERT_SUPPORTED)
   /* invert monochrome files to have 0 as white and 1 as black
	*/
   if (transforms & PNG_TRANSFORM_INVERT_MONO)
	   png_set_invert_mono(png_ptr);
#endif

#if defined(PNG_READ_SHIFT_SUPPORTED)
   /* If you want to shift the pixel values from the range [0,255] or
	* [0,65535] to the original [0,7] or [0,31], or whatever range the
	* colors were originally in:
	*/
   if ((transforms & PNG_TRANSFORM_SHIFT)
	   && png_get_valid(png_ptr, info_ptr, PNG_INFO_sBIT))
   {
	  png_color_8p sig_bit;

	  png_get_sBIT(png_ptr, info_ptr, &sig_bit);
	  png_set_shift(png_ptr, sig_bit);
   }
#endif

#if defined(PNG_READ_BGR_SUPPORTED)
   /* flip the RGB pixels to BGR (or RGBA to BGRA)
	*/
   if (transforms & PNG_TRANSFORM_BGR)
	   png_set_bgr(png_ptr);
#endif

#if defined(PNG_READ_SWAP_ALPHA_SUPPORTED)
   /* swap the RGBA or GA data to ARGB or AG (or BGRA to ABGR)
	*/
   if (transforms & PNG_TRANSFORM_SWAP_ALPHA)
	   png_set_swap_alpha(png_ptr);
#endif

#if defined(PNG_READ_SWAP_SUPPORTED)
   /* swap bytes of 16 bit files to least significant byte first
	*/
   if (transforms & PNG_TRANSFORM_SWAP_ENDIAN)
	   png_set_swap(png_ptr);
#endif

   /* We don't handle adding filler bytes */

   /* Optional call to gamma correct and add the background to the palette
	* and update info structure.  REQUIRED if you are expecting libpng to
	* update the palette for you (i.e., you selected such a transform above).
	*/
   png_read_update_info(png_ptr, info_ptr);

   /* -------------- image transformations end here ------------------- */

#ifdef PNG_FREE_ME_SUPPORTED
   png_free_data(png_ptr, info_ptr, PNG_FREE_ROWS, 0);
#endif
   if(info_ptr->row_pointers == NULL)
   {
	  info_ptr->row_pointers = (png_bytepp)png_malloc(png_ptr,
		 info_ptr->height * png_sizeof(png_bytep));
#ifdef PNG_FREE_ME_SUPPORTED
	  info_ptr->free_me |= PNG_FREE_ROWS;
#endif
	  for (row = 0; row < (int)info_ptr->height; row++)
	  {
		 info_ptr->row_pointers[row] = (png_bytep)png_malloc(png_ptr,
			png_get_rowbytes(png_ptr, info_ptr));
	  }
   }

   png_read_image(png_ptr, info_ptr->row_pointers);
   info_ptr->valid |= PNG_INFO_IDAT;

   /* read rest of file, and get additional chunks in info_ptr - REQUIRED */
   png_read_end(png_ptr, info_ptr);

   transforms = transforms; /* quiet compiler warnings */
   params = params;

}
#endif /* PNG_INFO_IMAGE_SUPPORTED */
#endif /* PNG_NO_SEQUENTIAL_READ_SUPPORTED */
#endif /* PNG_READ_SUPPORTED */

/*** End of inlined file: pngread.c ***/


/*** Start of inlined file: pngpread.c ***/
/* pngpread.c - read a png file in push mode
 *
 * Last changed in libpng 1.2.21 October 4, 2007
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 */

#define PNG_INTERNAL

#ifdef PNG_PROGRESSIVE_READ_SUPPORTED

/* push model modes */
#define PNG_READ_SIG_MODE   0
#define PNG_READ_CHUNK_MODE 1
#define PNG_READ_IDAT_MODE  2
#define PNG_SKIP_MODE       3
#define PNG_READ_tEXt_MODE  4
#define PNG_READ_zTXt_MODE  5
#define PNG_READ_DONE_MODE  6
#define PNG_READ_iTXt_MODE  7
#define PNG_ERROR_MODE      8

void PNGAPI
png_process_data(png_structp png_ptr, png_infop info_ptr,
   png_bytep buffer, png_size_t buffer_size)
{
   if(png_ptr == NULL) return;
   png_push_restore_buffer(png_ptr, buffer, buffer_size);

   while (png_ptr->buffer_size)
   {
	  png_process_some_data(png_ptr, info_ptr);
   }
}

/* What we do with the incoming data depends on what we were previously
 * doing before we ran out of data...
 */
void /* PRIVATE */
png_process_some_data(png_structp png_ptr, png_infop info_ptr)
{
   if(png_ptr == NULL) return;
   switch (png_ptr->process_mode)
   {
	  case PNG_READ_SIG_MODE:
	  {
		 png_push_read_sig(png_ptr, info_ptr);
		 break;
	  }
	  case PNG_READ_CHUNK_MODE:
	  {
		 png_push_read_chunk(png_ptr, info_ptr);
		 break;
	  }
	  case PNG_READ_IDAT_MODE:
	  {
		 png_push_read_IDAT(png_ptr);
		 break;
	  }
#if defined(PNG_READ_tEXt_SUPPORTED)
	  case PNG_READ_tEXt_MODE:
	  {
		 png_push_read_tEXt(png_ptr, info_ptr);
		 break;
	  }
#endif
#if defined(PNG_READ_zTXt_SUPPORTED)
	  case PNG_READ_zTXt_MODE:
	  {
		 png_push_read_zTXt(png_ptr, info_ptr);
		 break;
	  }
#endif
#if defined(PNG_READ_iTXt_SUPPORTED)
	  case PNG_READ_iTXt_MODE:
	  {
		 png_push_read_iTXt(png_ptr, info_ptr);
		 break;
	  }
#endif
	  case PNG_SKIP_MODE:
	  {
		 png_push_crc_finish(png_ptr);
		 break;
	  }
	  default:
	  {
		 png_ptr->buffer_size = 0;
		 break;
	  }
   }
}

/* Read any remaining signature bytes from the stream and compare them with
 * the correct PNG signature.  It is possible that this routine is called
 * with bytes already read from the signature, either because they have been
 * checked by the calling application, or because of multiple calls to this
 * routine.
 */
void /* PRIVATE */
png_push_read_sig(png_structp png_ptr, png_infop info_ptr)
{
   png_size_t num_checked = png_ptr->sig_bytes,
			 num_to_check = 8 - num_checked;

   if (png_ptr->buffer_size < num_to_check)
   {
	  num_to_check = png_ptr->buffer_size;
   }

   png_push_fill_buffer(png_ptr, &(info_ptr->signature[num_checked]),
	  num_to_check);
   png_ptr->sig_bytes = (png_byte)(png_ptr->sig_bytes+num_to_check);

   if (png_sig_cmp(info_ptr->signature, num_checked, num_to_check))
   {
	  if (num_checked < 4 &&
		  png_sig_cmp(info_ptr->signature, num_checked, num_to_check - 4))
		 png_error(png_ptr, "Not a PNG file");
	  else
		 png_error(png_ptr, "PNG file corrupted by ASCII conversion");
   }
   else
   {
	  if (png_ptr->sig_bytes >= 8)
	  {
		 png_ptr->process_mode = PNG_READ_CHUNK_MODE;
	  }
   }
}

void /* PRIVATE */
png_push_read_chunk(png_structp png_ptr, png_infop info_ptr)
{
#ifdef PNG_USE_LOCAL_ARRAYS
	  PNG_CONST PNG_IHDR;
	  PNG_CONST PNG_IDAT;
	  PNG_CONST PNG_IEND;
	  PNG_CONST PNG_PLTE;
#if defined(PNG_READ_bKGD_SUPPORTED)
	  PNG_CONST PNG_bKGD;
#endif
#if defined(PNG_READ_cHRM_SUPPORTED)
	  PNG_CONST PNG_cHRM;
#endif
#if defined(PNG_READ_gAMA_SUPPORTED)
	  PNG_CONST PNG_gAMA;
#endif
#if defined(PNG_READ_hIST_SUPPORTED)
	  PNG_CONST PNG_hIST;
#endif
#if defined(PNG_READ_iCCP_SUPPORTED)
	  PNG_CONST PNG_iCCP;
#endif
#if defined(PNG_READ_iTXt_SUPPORTED)
	  PNG_CONST PNG_iTXt;
#endif
#if defined(PNG_READ_oFFs_SUPPORTED)
	  PNG_CONST PNG_oFFs;
#endif
#if defined(PNG_READ_pCAL_SUPPORTED)
	  PNG_CONST PNG_pCAL;
#endif
#if defined(PNG_READ_pHYs_SUPPORTED)
	  PNG_CONST PNG_pHYs;
#endif
#if defined(PNG_READ_sBIT_SUPPORTED)
	  PNG_CONST PNG_sBIT;
#endif
#if defined(PNG_READ_sCAL_SUPPORTED)
	  PNG_CONST PNG_sCAL;
#endif
#if defined(PNG_READ_sRGB_SUPPORTED)
	  PNG_CONST PNG_sRGB;
#endif
#if defined(PNG_READ_sPLT_SUPPORTED)
	  PNG_CONST PNG_sPLT;
#endif
#if defined(PNG_READ_tEXt_SUPPORTED)
	  PNG_CONST PNG_tEXt;
#endif
#if defined(PNG_READ_tIME_SUPPORTED)
	  PNG_CONST PNG_tIME;
#endif
#if defined(PNG_READ_tRNS_SUPPORTED)
	  PNG_CONST PNG_tRNS;
#endif
#if defined(PNG_READ_zTXt_SUPPORTED)
	  PNG_CONST PNG_zTXt;
#endif
#endif /* PNG_USE_LOCAL_ARRAYS */
   /* First we make sure we have enough data for the 4 byte chunk name
	* and the 4 byte chunk length before proceeding with decoding the
	* chunk data.  To fully decode each of these chunks, we also make
	* sure we have enough data in the buffer for the 4 byte CRC at the
	* end of every chunk (except IDAT, which is handled separately).
	*/
   if (!(png_ptr->mode & PNG_HAVE_CHUNK_HEADER))
   {
	  png_byte chunk_length[4];

	  if (png_ptr->buffer_size < 8)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }

	  png_push_fill_buffer(png_ptr, chunk_length, 4);
	  png_ptr->push_length = png_get_uint_31(png_ptr,chunk_length);
	  png_reset_crc(png_ptr);
	  png_crc_read(png_ptr, png_ptr->chunk_name, 4);
	  png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;
   }

   if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
	 if(png_ptr->mode & PNG_AFTER_IDAT)
		png_ptr->mode |= PNG_HAVE_CHUNK_AFTER_IDAT;

   if (!png_memcmp(png_ptr->chunk_name, png_IHDR, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_IHDR(png_ptr, info_ptr, png_ptr->push_length);
   }
   else if (!png_memcmp(png_ptr->chunk_name, png_IEND, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_IEND(png_ptr, info_ptr, png_ptr->push_length);

	  png_ptr->process_mode = PNG_READ_DONE_MODE;
	  png_push_have_end(png_ptr, info_ptr);
   }
#ifdef PNG_HANDLE_AS_UNKNOWN_SUPPORTED
   else if (png_handle_as_unknown(png_ptr, png_ptr->chunk_name))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
		 png_ptr->mode |= PNG_HAVE_IDAT;
	  png_handle_unknown(png_ptr, info_ptr, png_ptr->push_length);
	  if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
		 png_ptr->mode |= PNG_HAVE_PLTE;
	  else if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
	  {
		 if (!(png_ptr->mode & PNG_HAVE_IHDR))
			png_error(png_ptr, "Missing IHDR before IDAT");
		 else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
				  !(png_ptr->mode & PNG_HAVE_PLTE))
			png_error(png_ptr, "Missing PLTE before IDAT");
	  }
   }
#endif
   else if (!png_memcmp(png_ptr->chunk_name, png_PLTE, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_PLTE(png_ptr, info_ptr, png_ptr->push_length);
   }
   else if (!png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
   {
	  /* If we reach an IDAT chunk, this means we have read all of the
	   * header chunks, and we can start reading the image (or if this
	   * is called after the image has been read - we have an error).
	   */
	 if (!(png_ptr->mode & PNG_HAVE_IHDR))
	   png_error(png_ptr, "Missing IHDR before IDAT");
	 else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
		 !(png_ptr->mode & PNG_HAVE_PLTE))
	   png_error(png_ptr, "Missing PLTE before IDAT");

	  if (png_ptr->mode & PNG_HAVE_IDAT)
	  {
		 if (!(png_ptr->mode & PNG_HAVE_CHUNK_AFTER_IDAT))
		   if (png_ptr->push_length == 0)
			  return;

		 if (png_ptr->mode & PNG_AFTER_IDAT)
			png_error(png_ptr, "Too many IDAT's found");
	  }

	  png_ptr->idat_size = png_ptr->push_length;
	  png_ptr->mode |= PNG_HAVE_IDAT;
	  png_ptr->process_mode = PNG_READ_IDAT_MODE;
	  png_push_have_info(png_ptr, info_ptr);
	  png_ptr->zstream.avail_out = (uInt)png_ptr->irowbytes;
	  png_ptr->zstream.next_out = png_ptr->row_buf;
	  return;
   }
#if defined(PNG_READ_gAMA_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_gAMA, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_gAMA(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_sBIT_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_sBIT, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_sBIT(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_cHRM_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_cHRM, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_cHRM(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_sRGB_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_sRGB, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_sRGB(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_iCCP_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_iCCP, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_iCCP(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_sPLT_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_sPLT, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_sPLT(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_tRNS_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_tRNS, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_tRNS(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_bKGD_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_bKGD, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_bKGD(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_hIST_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_hIST, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_hIST(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_pHYs_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_pHYs, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_pHYs(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_oFFs_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_oFFs, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_oFFs(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_pCAL_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_pCAL, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_pCAL(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_sCAL_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_sCAL, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_sCAL(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_tIME_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_tIME, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_handle_tIME(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_tEXt_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_tEXt, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_push_handle_tEXt(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_zTXt_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_zTXt, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_push_handle_zTXt(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
#if defined(PNG_READ_iTXt_SUPPORTED)
   else if (!png_memcmp(png_ptr->chunk_name, png_iTXt, 4))
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_push_handle_iTXt(png_ptr, info_ptr, png_ptr->push_length);
   }
#endif
   else
   {
	  if (png_ptr->push_length + 4 > png_ptr->buffer_size)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }
	  png_push_handle_unknown(png_ptr, info_ptr, png_ptr->push_length);
   }

   png_ptr->mode &= ~PNG_HAVE_CHUNK_HEADER;
}

void /* PRIVATE */
png_push_crc_skip(png_structp png_ptr, png_uint_32 skip)
{
   png_ptr->process_mode = PNG_SKIP_MODE;
   png_ptr->skip_length = skip;
}

void /* PRIVATE */
png_push_crc_finish(png_structp png_ptr)
{
   if (png_ptr->skip_length && png_ptr->save_buffer_size)
   {
	  png_size_t save_size;

	  if (png_ptr->skip_length < (png_uint_32)png_ptr->save_buffer_size)
		 save_size = (png_size_t)png_ptr->skip_length;
	  else
		 save_size = png_ptr->save_buffer_size;

	  png_calculate_crc(png_ptr, png_ptr->save_buffer_ptr, save_size);

	  png_ptr->skip_length -= save_size;
	  png_ptr->buffer_size -= save_size;
	  png_ptr->save_buffer_size -= save_size;
	  png_ptr->save_buffer_ptr += save_size;
   }
   if (png_ptr->skip_length && png_ptr->current_buffer_size)
   {
	  png_size_t save_size;

	  if (png_ptr->skip_length < (png_uint_32)png_ptr->current_buffer_size)
		 save_size = (png_size_t)png_ptr->skip_length;
	  else
		 save_size = png_ptr->current_buffer_size;

	  png_calculate_crc(png_ptr, png_ptr->current_buffer_ptr, save_size);

	  png_ptr->skip_length -= save_size;
	  png_ptr->buffer_size -= save_size;
	  png_ptr->current_buffer_size -= save_size;
	  png_ptr->current_buffer_ptr += save_size;
   }
   if (!png_ptr->skip_length)
   {
	  if (png_ptr->buffer_size < 4)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }

	  png_crc_finish(png_ptr, 0);
	  png_ptr->process_mode = PNG_READ_CHUNK_MODE;
   }
}

void PNGAPI
png_push_fill_buffer(png_structp png_ptr, png_bytep buffer, png_size_t length)
{
   png_bytep ptr;

   if(png_ptr == NULL) return;
   ptr = buffer;
   if (png_ptr->save_buffer_size)
   {
	  png_size_t save_size;

	  if (length < png_ptr->save_buffer_size)
		 save_size = length;
	  else
		 save_size = png_ptr->save_buffer_size;

	  png_memcpy(ptr, png_ptr->save_buffer_ptr, save_size);
	  length -= save_size;
	  ptr += save_size;
	  png_ptr->buffer_size -= save_size;
	  png_ptr->save_buffer_size -= save_size;
	  png_ptr->save_buffer_ptr += save_size;
   }
   if (length && png_ptr->current_buffer_size)
   {
	  png_size_t save_size;

	  if (length < png_ptr->current_buffer_size)
		 save_size = length;
	  else
		 save_size = png_ptr->current_buffer_size;

	  png_memcpy(ptr, png_ptr->current_buffer_ptr, save_size);
	  png_ptr->buffer_size -= save_size;
	  png_ptr->current_buffer_size -= save_size;
	  png_ptr->current_buffer_ptr += save_size;
   }
}

void /* PRIVATE */
png_push_save_buffer(png_structp png_ptr)
{
   if (png_ptr->save_buffer_size)
   {
	  if (png_ptr->save_buffer_ptr != png_ptr->save_buffer)
	  {
		 png_size_t i,istop;
		 png_bytep sp;
		 png_bytep dp;

		 istop = png_ptr->save_buffer_size;
		 for (i = 0, sp = png_ptr->save_buffer_ptr, dp = png_ptr->save_buffer;
			i < istop; i++, sp++, dp++)
		 {
			*dp = *sp;
		 }
	  }
   }
   if (png_ptr->save_buffer_size + png_ptr->current_buffer_size >
	  png_ptr->save_buffer_max)
   {
	  png_size_t new_max;
	  png_bytep old_buffer;

	  if (png_ptr->save_buffer_size > PNG_SIZE_MAX -
		 (png_ptr->current_buffer_size + 256))
	  {
		png_error(png_ptr, "Potential overflow of save_buffer");
	  }
	  new_max = png_ptr->save_buffer_size + png_ptr->current_buffer_size + 256;
	  old_buffer = png_ptr->save_buffer;
	  png_ptr->save_buffer = (png_bytep)png_malloc(png_ptr,
		 (png_uint_32)new_max);
	  png_memcpy(png_ptr->save_buffer, old_buffer, png_ptr->save_buffer_size);
	  png_free(png_ptr, old_buffer);
	  png_ptr->save_buffer_max = new_max;
   }
   if (png_ptr->current_buffer_size)
   {
	  png_memcpy(png_ptr->save_buffer + png_ptr->save_buffer_size,
		 png_ptr->current_buffer_ptr, png_ptr->current_buffer_size);
	  png_ptr->save_buffer_size += png_ptr->current_buffer_size;
	  png_ptr->current_buffer_size = 0;
   }
   png_ptr->save_buffer_ptr = png_ptr->save_buffer;
   png_ptr->buffer_size = 0;
}

void /* PRIVATE */
png_push_restore_buffer(png_structp png_ptr, png_bytep buffer,
   png_size_t buffer_length)
{
   png_ptr->current_buffer = buffer;
   png_ptr->current_buffer_size = buffer_length;
   png_ptr->buffer_size = buffer_length + png_ptr->save_buffer_size;
   png_ptr->current_buffer_ptr = png_ptr->current_buffer;
}

void /* PRIVATE */
png_push_read_IDAT(png_structp png_ptr)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_CONST PNG_IDAT;
#endif
   if (!(png_ptr->mode & PNG_HAVE_CHUNK_HEADER))
   {
	  png_byte chunk_length[4];

	  if (png_ptr->buffer_size < 8)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }

	  png_push_fill_buffer(png_ptr, chunk_length, 4);
	  png_ptr->push_length = png_get_uint_31(png_ptr,chunk_length);
	  png_reset_crc(png_ptr);
	  png_crc_read(png_ptr, png_ptr->chunk_name, 4);
	  png_ptr->mode |= PNG_HAVE_CHUNK_HEADER;

	  if (png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
	  {
		 png_ptr->process_mode = PNG_READ_CHUNK_MODE;
		 if (!(png_ptr->flags & PNG_FLAG_ZLIB_FINISHED))
			png_error(png_ptr, "Not enough compressed data");
		 return;
	  }

	  png_ptr->idat_size = png_ptr->push_length;
   }
   if (png_ptr->idat_size && png_ptr->save_buffer_size)
   {
	  png_size_t save_size;

	  if (png_ptr->idat_size < (png_uint_32)png_ptr->save_buffer_size)
	  {
		 save_size = (png_size_t)png_ptr->idat_size;
		 /* check for overflow */
		 if((png_uint_32)save_size != png_ptr->idat_size)
			png_error(png_ptr, "save_size overflowed in pngpread");
	  }
	  else
		 save_size = png_ptr->save_buffer_size;

	  png_calculate_crc(png_ptr, png_ptr->save_buffer_ptr, save_size);
	  if (!(png_ptr->flags & PNG_FLAG_ZLIB_FINISHED))
		 png_process_IDAT_data(png_ptr, png_ptr->save_buffer_ptr, save_size);
	  png_ptr->idat_size -= save_size;
	  png_ptr->buffer_size -= save_size;
	  png_ptr->save_buffer_size -= save_size;
	  png_ptr->save_buffer_ptr += save_size;
   }
   if (png_ptr->idat_size && png_ptr->current_buffer_size)
   {
	  png_size_t save_size;

	  if (png_ptr->idat_size < (png_uint_32)png_ptr->current_buffer_size)
	  {
		 save_size = (png_size_t)png_ptr->idat_size;
		 /* check for overflow */
		 if((png_uint_32)save_size != png_ptr->idat_size)
			png_error(png_ptr, "save_size overflowed in pngpread");
	  }
	  else
		 save_size = png_ptr->current_buffer_size;

	  png_calculate_crc(png_ptr, png_ptr->current_buffer_ptr, save_size);
	  if (!(png_ptr->flags & PNG_FLAG_ZLIB_FINISHED))
		png_process_IDAT_data(png_ptr, png_ptr->current_buffer_ptr, save_size);

	  png_ptr->idat_size -= save_size;
	  png_ptr->buffer_size -= save_size;
	  png_ptr->current_buffer_size -= save_size;
	  png_ptr->current_buffer_ptr += save_size;
   }
   if (!png_ptr->idat_size)
   {
	  if (png_ptr->buffer_size < 4)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }

	  png_crc_finish(png_ptr, 0);
	  png_ptr->mode &= ~PNG_HAVE_CHUNK_HEADER;
	  png_ptr->mode |= PNG_AFTER_IDAT;
   }
}

void /* PRIVATE */
png_process_IDAT_data(png_structp png_ptr, png_bytep buffer,
   png_size_t buffer_length)
{
   int ret;

   if ((png_ptr->flags & PNG_FLAG_ZLIB_FINISHED) && buffer_length)
	  png_error(png_ptr, "Extra compression data");

   png_ptr->zstream.next_in = buffer;
   png_ptr->zstream.avail_in = (uInt)buffer_length;
   for(;;)
   {
	  ret = inflate(&png_ptr->zstream, Z_PARTIAL_FLUSH);
	  if (ret != Z_OK)
	  {
		 if (ret == Z_STREAM_END)
		 {
			if (png_ptr->zstream.avail_in)
			   png_error(png_ptr, "Extra compressed data");
			if (!(png_ptr->zstream.avail_out))
			{
			   png_push_process_row(png_ptr);
			}

			png_ptr->mode |= PNG_AFTER_IDAT;
			png_ptr->flags |= PNG_FLAG_ZLIB_FINISHED;
			break;
		 }
		 else if (ret == Z_BUF_ERROR)
			break;
		 else
			png_error(png_ptr, "Decompression Error");
	  }
	  if (!(png_ptr->zstream.avail_out))
	  {
		 if ((
#if defined(PNG_READ_INTERLACING_SUPPORTED)
			 png_ptr->interlaced && png_ptr->pass > 6) ||
			 (!png_ptr->interlaced &&
#endif
			 png_ptr->row_number == png_ptr->num_rows))
		 {
		   if (png_ptr->zstream.avail_in)
		   {
			 png_warning(png_ptr, "Too much data in IDAT chunks");
		   }

		   png_ptr->flags |= PNG_FLAG_ZLIB_FINISHED;
		   break;
		 }
		 png_push_process_row(png_ptr);
		 png_ptr->zstream.avail_out = (uInt)png_ptr->irowbytes;
		 png_ptr->zstream.next_out = png_ptr->row_buf;
	  }
	  else
		 break;
   }
}

void /* PRIVATE */
png_push_process_row(png_structp png_ptr)
{
   png_ptr->row_info.color_type = png_ptr->color_type;
   png_ptr->row_info.width = png_ptr->iwidth;
   png_ptr->row_info.channels = png_ptr->channels;
   png_ptr->row_info.bit_depth = png_ptr->bit_depth;
   png_ptr->row_info.pixel_depth = png_ptr->pixel_depth;

   png_ptr->row_info.rowbytes = PNG_ROWBYTES(png_ptr->row_info.pixel_depth,
	   png_ptr->row_info.width);

   png_read_filter_row(png_ptr, &(png_ptr->row_info),
	  png_ptr->row_buf + 1, png_ptr->prev_row + 1,
	  (int)(png_ptr->row_buf[0]));

   png_memcpy_check(png_ptr, png_ptr->prev_row, png_ptr->row_buf,
	  png_ptr->rowbytes + 1);

   if (png_ptr->transformations || (png_ptr->flags&PNG_FLAG_STRIP_ALPHA))
	  png_do_read_transformations(png_ptr);

#if defined(PNG_READ_INTERLACING_SUPPORTED)
   /* blow up interlaced rows to full size */
   if (png_ptr->interlaced && (png_ptr->transformations & PNG_INTERLACE))
   {
	  if (png_ptr->pass < 6)
/*       old interface (pre-1.0.9):
		 png_do_read_interlace(&(png_ptr->row_info),
			png_ptr->row_buf + 1, png_ptr->pass, png_ptr->transformations);
 */
		 png_do_read_interlace(png_ptr);

	switch (png_ptr->pass)
	{
		 case 0:
		 {
			int i;
			for (i = 0; i < 8 && png_ptr->pass == 0; i++)
			{
			   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
			   png_read_push_finish_row(png_ptr); /* updates png_ptr->pass */
			}
			if (png_ptr->pass == 2) /* pass 1 might be empty */
			{
			   for (i = 0; i < 4 && png_ptr->pass == 2; i++)
			   {
				  png_push_have_row(png_ptr, png_bytep_NULL);
				  png_read_push_finish_row(png_ptr);
			   }
			}
			if (png_ptr->pass == 4 && png_ptr->height <= 4)
			{
			   for (i = 0; i < 2 && png_ptr->pass == 4; i++)
			   {
				  png_push_have_row(png_ptr, png_bytep_NULL);
				  png_read_push_finish_row(png_ptr);
			   }
			}
			if (png_ptr->pass == 6 && png_ptr->height <= 4)
			{
				png_push_have_row(png_ptr, png_bytep_NULL);
				png_read_push_finish_row(png_ptr);
			}
			break;
		 }
		 case 1:
		 {
			int i;
			for (i = 0; i < 8 && png_ptr->pass == 1; i++)
			{
			   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
			   png_read_push_finish_row(png_ptr);
			}
			if (png_ptr->pass == 2) /* skip top 4 generated rows */
			{
			   for (i = 0; i < 4 && png_ptr->pass == 2; i++)
			   {
				  png_push_have_row(png_ptr, png_bytep_NULL);
				  png_read_push_finish_row(png_ptr);
			   }
			}
			break;
		 }
		 case 2:
		 {
			int i;
			for (i = 0; i < 4 && png_ptr->pass == 2; i++)
			{
			   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
			   png_read_push_finish_row(png_ptr);
			}
			for (i = 0; i < 4 && png_ptr->pass == 2; i++)
			{
			   png_push_have_row(png_ptr, png_bytep_NULL);
			   png_read_push_finish_row(png_ptr);
			}
			if (png_ptr->pass == 4) /* pass 3 might be empty */
			{
			   for (i = 0; i < 2 && png_ptr->pass == 4; i++)
			   {
				  png_push_have_row(png_ptr, png_bytep_NULL);
				  png_read_push_finish_row(png_ptr);
			   }
			}
			break;
		 }
		 case 3:
		 {
			int i;
			for (i = 0; i < 4 && png_ptr->pass == 3; i++)
			{
			   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
			   png_read_push_finish_row(png_ptr);
			}
			if (png_ptr->pass == 4) /* skip top two generated rows */
			{
			   for (i = 0; i < 2 && png_ptr->pass == 4; i++)
			   {
				  png_push_have_row(png_ptr, png_bytep_NULL);
				  png_read_push_finish_row(png_ptr);
			   }
			}
			break;
		 }
		 case 4:
		 {
			int i;
			for (i = 0; i < 2 && png_ptr->pass == 4; i++)
			{
			   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
			   png_read_push_finish_row(png_ptr);
			}
			for (i = 0; i < 2 && png_ptr->pass == 4; i++)
			{
			   png_push_have_row(png_ptr, png_bytep_NULL);
			   png_read_push_finish_row(png_ptr);
			}
			if (png_ptr->pass == 6) /* pass 5 might be empty */
			{
			   png_push_have_row(png_ptr, png_bytep_NULL);
			   png_read_push_finish_row(png_ptr);
			}
			break;
		 }
		 case 5:
		 {
			int i;
			for (i = 0; i < 2 && png_ptr->pass == 5; i++)
			{
			   png_push_have_row(png_ptr, png_ptr->row_buf + 1);
			   png_read_push_finish_row(png_ptr);
			}
			if (png_ptr->pass == 6) /* skip top generated row */
			{
			   png_push_have_row(png_ptr, png_bytep_NULL);
			   png_read_push_finish_row(png_ptr);
			}
			break;
		 }
		 case 6:
		 {
			png_push_have_row(png_ptr, png_ptr->row_buf + 1);
			png_read_push_finish_row(png_ptr);
			if (png_ptr->pass != 6)
			   break;
			png_push_have_row(png_ptr, png_bytep_NULL);
			png_read_push_finish_row(png_ptr);
		 }
	  }
   }
   else
#endif
   {
	  png_push_have_row(png_ptr, png_ptr->row_buf + 1);
	  png_read_push_finish_row(png_ptr);
   }
}

void /* PRIVATE */
png_read_push_finish_row(png_structp png_ptr)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */

   /* start of interlace block */
   PNG_CONST int FARDATA png_pass_start[] = {0, 4, 0, 2, 0, 1, 0};

   /* offset to next interlace block */
   PNG_CONST int FARDATA png_pass_inc[] = {8, 8, 4, 4, 2, 2, 1};

   /* start of interlace block in the y direction */
   PNG_CONST int FARDATA png_pass_ystart[] = {0, 0, 4, 0, 2, 0, 1};

   /* offset to next interlace block in the y direction */
   PNG_CONST int FARDATA png_pass_yinc[] = {8, 8, 8, 4, 4, 2, 2};

   /* Height of interlace block.  This is not currently used - if you need
	* it, uncomment it here and in png.h
   PNG_CONST int FARDATA png_pass_height[] = {8, 8, 4, 4, 2, 2, 1};
   */
#endif

   png_ptr->row_number++;
   if (png_ptr->row_number < png_ptr->num_rows)
	  return;

   if (png_ptr->interlaced)
   {
	  png_ptr->row_number = 0;
	  png_memset_check(png_ptr, png_ptr->prev_row, 0,
		 png_ptr->rowbytes + 1);
	  do
	  {
		 png_ptr->pass++;
		 if ((png_ptr->pass == 1 && png_ptr->width < 5) ||
			 (png_ptr->pass == 3 && png_ptr->width < 3) ||
			 (png_ptr->pass == 5 && png_ptr->width < 2))
		   png_ptr->pass++;

		 if (png_ptr->pass > 7)
			png_ptr->pass--;
		 if (png_ptr->pass >= 7)
			break;

		 png_ptr->iwidth = (png_ptr->width +
			png_pass_inc[png_ptr->pass] - 1 -
			png_pass_start[png_ptr->pass]) /
			png_pass_inc[png_ptr->pass];

		 png_ptr->irowbytes = PNG_ROWBYTES(png_ptr->pixel_depth,
			png_ptr->iwidth) + 1;

		 if (png_ptr->transformations & PNG_INTERLACE)
			break;

		 png_ptr->num_rows = (png_ptr->height +
			png_pass_yinc[png_ptr->pass] - 1 -
			png_pass_ystart[png_ptr->pass]) /
			png_pass_yinc[png_ptr->pass];

	  } while (png_ptr->iwidth == 0 || png_ptr->num_rows == 0);
   }
}

#if defined(PNG_READ_tEXt_SUPPORTED)
void /* PRIVATE */
png_push_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32
   length)
{
   if (!(png_ptr->mode & PNG_HAVE_IHDR) || (png_ptr->mode & PNG_HAVE_IEND))
	  {
		 png_error(png_ptr, "Out of place tEXt");
		 info_ptr = info_ptr; /* to quiet some compiler warnings */
	  }

#ifdef PNG_MAX_MALLOC_64K
   png_ptr->skip_length = 0;  /* This may not be necessary */

   if (length > (png_uint_32)65535L) /* Can't hold entire string in memory */
   {
	  png_warning(png_ptr, "tEXt chunk too large to fit in memory");
	  png_ptr->skip_length = length - (png_uint_32)65535L;
	  length = (png_uint_32)65535L;
   }
#endif

   png_ptr->current_text = (png_charp)png_malloc(png_ptr,
		 (png_uint_32)(length+1));
   png_ptr->current_text[length] = '\0';
   png_ptr->current_text_ptr = png_ptr->current_text;
   png_ptr->current_text_size = (png_size_t)length;
   png_ptr->current_text_left = (png_size_t)length;
   png_ptr->process_mode = PNG_READ_tEXt_MODE;
}

void /* PRIVATE */
png_push_read_tEXt(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr->buffer_size && png_ptr->current_text_left)
   {
	  png_size_t text_size;

	  if (png_ptr->buffer_size < png_ptr->current_text_left)
		 text_size = png_ptr->buffer_size;
	  else
		 text_size = png_ptr->current_text_left;
	  png_crc_read(png_ptr, (png_bytep)png_ptr->current_text_ptr, text_size);
	  png_ptr->current_text_left -= text_size;
	  png_ptr->current_text_ptr += text_size;
   }
   if (!(png_ptr->current_text_left))
   {
	  png_textp text_ptr;
	  png_charp text;
	  png_charp key;
	  int ret;

	  if (png_ptr->buffer_size < 4)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }

	  png_push_crc_finish(png_ptr);

#if defined(PNG_MAX_MALLOC_64K)
	  if (png_ptr->skip_length)
		 return;
#endif

	  key = png_ptr->current_text;

	  for (text = key; *text; text++)
		 /* empty loop */ ;

	  if (text < key + png_ptr->current_text_size)
		 text++;

	  text_ptr = (png_textp)png_malloc(png_ptr,
		 (png_uint_32)png_sizeof(png_text));
	  text_ptr->compression = PNG_TEXT_COMPRESSION_NONE;
	  text_ptr->key = key;
#ifdef PNG_iTXt_SUPPORTED
	  text_ptr->lang = NULL;
	  text_ptr->lang_key = NULL;
#endif
	  text_ptr->text = text;

	  ret = png_set_text_2(png_ptr, info_ptr, text_ptr, 1);

	  png_free(png_ptr, key);
	  png_free(png_ptr, text_ptr);
	  png_ptr->current_text = NULL;

	  if (ret)
		png_warning(png_ptr, "Insufficient memory to store text chunk.");
   }
}
#endif

#if defined(PNG_READ_zTXt_SUPPORTED)
void /* PRIVATE */
png_push_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32
   length)
{
   if (!(png_ptr->mode & PNG_HAVE_IHDR) || (png_ptr->mode & PNG_HAVE_IEND))
	  {
		 png_error(png_ptr, "Out of place zTXt");
		 info_ptr = info_ptr; /* to quiet some compiler warnings */
	  }

#ifdef PNG_MAX_MALLOC_64K
   /* We can't handle zTXt chunks > 64K, since we don't have enough space
	* to be able to store the uncompressed data.  Actually, the threshold
	* is probably around 32K, but it isn't as definite as 64K is.
	*/
   if (length > (png_uint_32)65535L)
   {
	  png_warning(png_ptr, "zTXt chunk too large to fit in memory");
	  png_push_crc_skip(png_ptr, length);
	  return;
   }
#endif

   png_ptr->current_text = (png_charp)png_malloc(png_ptr,
	   (png_uint_32)(length+1));
   png_ptr->current_text[length] = '\0';
   png_ptr->current_text_ptr = png_ptr->current_text;
   png_ptr->current_text_size = (png_size_t)length;
   png_ptr->current_text_left = (png_size_t)length;
   png_ptr->process_mode = PNG_READ_zTXt_MODE;
}

void /* PRIVATE */
png_push_read_zTXt(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr->buffer_size && png_ptr->current_text_left)
   {
	  png_size_t text_size;

	  if (png_ptr->buffer_size < (png_uint_32)png_ptr->current_text_left)
		 text_size = png_ptr->buffer_size;
	  else
		 text_size = png_ptr->current_text_left;
	  png_crc_read(png_ptr, (png_bytep)png_ptr->current_text_ptr, text_size);
	  png_ptr->current_text_left -= text_size;
	  png_ptr->current_text_ptr += text_size;
   }
   if (!(png_ptr->current_text_left))
   {
	  png_textp text_ptr;
	  png_charp text;
	  png_charp key;
	  int ret;
	  png_size_t text_size, key_size;

	  if (png_ptr->buffer_size < 4)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }

	  png_push_crc_finish(png_ptr);

	  key = png_ptr->current_text;

	  for (text = key; *text; text++)
		 /* empty loop */ ;

	  /* zTXt can't have zero text */
	  if (text >= key + png_ptr->current_text_size)
	  {
		 png_ptr->current_text = NULL;
		 png_free(png_ptr, key);
		 return;
	  }

	  text++;

	  if (*text != PNG_TEXT_COMPRESSION_zTXt) /* check compression byte */
	  {
		 png_ptr->current_text = NULL;
		 png_free(png_ptr, key);
		 return;
	  }

	  text++;

	  png_ptr->zstream.next_in = (png_bytep )text;
	  png_ptr->zstream.avail_in = (uInt)(png_ptr->current_text_size -
		 (text - key));
	  png_ptr->zstream.next_out = png_ptr->zbuf;
	  png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;

	  key_size = text - key;
	  text_size = 0;
	  text = NULL;
	  ret = Z_STREAM_END;

	  while (png_ptr->zstream.avail_in)
	  {
		 ret = inflate(&png_ptr->zstream, Z_PARTIAL_FLUSH);
		 if (ret != Z_OK && ret != Z_STREAM_END)
		 {
			inflateReset(&png_ptr->zstream);
			png_ptr->zstream.avail_in = 0;
			png_ptr->current_text = NULL;
			png_free(png_ptr, key);
			png_free(png_ptr, text);
			return;
		 }
		 if (!(png_ptr->zstream.avail_out) || ret == Z_STREAM_END)
		 {
			if (text == NULL)
			{
			   text = (png_charp)png_malloc(png_ptr,
				  (png_uint_32)(png_ptr->zbuf_size - png_ptr->zstream.avail_out
					 + key_size + 1));
			   png_memcpy(text + key_size, png_ptr->zbuf,
				  png_ptr->zbuf_size - png_ptr->zstream.avail_out);
			   png_memcpy(text, key, key_size);
			   text_size = key_size + png_ptr->zbuf_size -
				  png_ptr->zstream.avail_out;
			   *(text + text_size) = '\0';
			}
			else
			{
			   png_charp tmp;

			   tmp = text;
			   text = (png_charp)png_malloc(png_ptr, text_size +
				  (png_uint_32)(png_ptr->zbuf_size - png_ptr->zstream.avail_out
				   + 1));
			   png_memcpy(text, tmp, text_size);
			   png_free(png_ptr, tmp);
			   png_memcpy(text + text_size, png_ptr->zbuf,
				  png_ptr->zbuf_size - png_ptr->zstream.avail_out);
			   text_size += png_ptr->zbuf_size - png_ptr->zstream.avail_out;
			   *(text + text_size) = '\0';
			}
			if (ret != Z_STREAM_END)
			{
			   png_ptr->zstream.next_out = png_ptr->zbuf;
			   png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
			}
		 }
		 else
		 {
			break;
		 }

		 if (ret == Z_STREAM_END)
			break;
	  }

	  inflateReset(&png_ptr->zstream);
	  png_ptr->zstream.avail_in = 0;

	  if (ret != Z_STREAM_END)
	  {
		 png_ptr->current_text = NULL;
		 png_free(png_ptr, key);
		 png_free(png_ptr, text);
		 return;
	  }

	  png_ptr->current_text = NULL;
	  png_free(png_ptr, key);
	  key = text;
	  text += key_size;

	  text_ptr = (png_textp)png_malloc(png_ptr,
		  (png_uint_32)png_sizeof(png_text));
	  text_ptr->compression = PNG_TEXT_COMPRESSION_zTXt;
	  text_ptr->key = key;
#ifdef PNG_iTXt_SUPPORTED
	  text_ptr->lang = NULL;
	  text_ptr->lang_key = NULL;
#endif
	  text_ptr->text = text;

	  ret = png_set_text_2(png_ptr, info_ptr, text_ptr, 1);

	  png_free(png_ptr, key);
	  png_free(png_ptr, text_ptr);

	  if (ret)
		png_warning(png_ptr, "Insufficient memory to store text chunk.");
   }
}
#endif

#if defined(PNG_READ_iTXt_SUPPORTED)
void /* PRIVATE */
png_push_handle_iTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32
   length)
{
   if (!(png_ptr->mode & PNG_HAVE_IHDR) || (png_ptr->mode & PNG_HAVE_IEND))
	  {
		 png_error(png_ptr, "Out of place iTXt");
		 info_ptr = info_ptr; /* to quiet some compiler warnings */
	  }

#ifdef PNG_MAX_MALLOC_64K
   png_ptr->skip_length = 0;  /* This may not be necessary */

   if (length > (png_uint_32)65535L) /* Can't hold entire string in memory */
   {
	  png_warning(png_ptr, "iTXt chunk too large to fit in memory");
	  png_ptr->skip_length = length - (png_uint_32)65535L;
	  length = (png_uint_32)65535L;
   }
#endif

   png_ptr->current_text = (png_charp)png_malloc(png_ptr,
		 (png_uint_32)(length+1));
   png_ptr->current_text[length] = '\0';
   png_ptr->current_text_ptr = png_ptr->current_text;
   png_ptr->current_text_size = (png_size_t)length;
   png_ptr->current_text_left = (png_size_t)length;
   png_ptr->process_mode = PNG_READ_iTXt_MODE;
}

void /* PRIVATE */
png_push_read_iTXt(png_structp png_ptr, png_infop info_ptr)
{

   if (png_ptr->buffer_size && png_ptr->current_text_left)
   {
	  png_size_t text_size;

	  if (png_ptr->buffer_size < png_ptr->current_text_left)
		 text_size = png_ptr->buffer_size;
	  else
		 text_size = png_ptr->current_text_left;
	  png_crc_read(png_ptr, (png_bytep)png_ptr->current_text_ptr, text_size);
	  png_ptr->current_text_left -= text_size;
	  png_ptr->current_text_ptr += text_size;
   }
   if (!(png_ptr->current_text_left))
   {
	  png_textp text_ptr;
	  png_charp key;
	  int comp_flag;
	  png_charp lang;
	  png_charp lang_key;
	  png_charp text;
	  int ret;

	  if (png_ptr->buffer_size < 4)
	  {
		 png_push_save_buffer(png_ptr);
		 return;
	  }

	  png_push_crc_finish(png_ptr);

#if defined(PNG_MAX_MALLOC_64K)
	  if (png_ptr->skip_length)
		 return;
#endif

	  key = png_ptr->current_text;

	  for (lang = key; *lang; lang++)
		 /* empty loop */ ;

	  if (lang < key + png_ptr->current_text_size - 3)
		 lang++;

	  comp_flag = *lang++;
	  lang++;     /* skip comp_type, always zero */

	  for (lang_key = lang; *lang_key; lang_key++)
		 /* empty loop */ ;
	  lang_key++;        /* skip NUL separator */

	  text=lang_key;
	  if (lang_key < key + png_ptr->current_text_size - 1)
	  {
		for (; *text; text++)
		   /* empty loop */ ;
	  }

	  if (text < key + png_ptr->current_text_size)
		 text++;

	  text_ptr = (png_textp)png_malloc(png_ptr,
		 (png_uint_32)png_sizeof(png_text));
	  text_ptr->compression = comp_flag + 2;
	  text_ptr->key = key;
	  text_ptr->lang = lang;
	  text_ptr->lang_key = lang_key;
	  text_ptr->text = text;
	  text_ptr->text_length = 0;
	  text_ptr->itxt_length = png_strlen(text);

	  ret = png_set_text_2(png_ptr, info_ptr, text_ptr, 1);

	  png_ptr->current_text = NULL;

	  png_free(png_ptr, text_ptr);
	  if (ret)
		png_warning(png_ptr, "Insufficient memory to store iTXt chunk.");
   }
}
#endif

/* This function is called when we haven't found a handler for this
 * chunk.  If there isn't a problem with the chunk itself (ie a bad chunk
 * name or a critical chunk), the chunk is (currently) silently ignored.
 */
void /* PRIVATE */
png_push_handle_unknown(png_structp png_ptr, png_infop info_ptr, png_uint_32
   length)
{
   png_uint_32 skip=0;
   png_check_chunk_name(png_ptr, png_ptr->chunk_name);

   if (!(png_ptr->chunk_name[0] & 0x20))
   {
#if defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
	 if(png_handle_as_unknown(png_ptr, png_ptr->chunk_name) !=
		  PNG_HANDLE_CHUNK_ALWAYS
#if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
		  && png_ptr->read_user_chunk_fn == NULL
#endif
		)
#endif
		png_chunk_error(png_ptr, "unknown critical chunk");

	 info_ptr = info_ptr; /* to quiet some compiler warnings */
   }

#if defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
   if (png_ptr->flags & PNG_FLAG_KEEP_UNKNOWN_CHUNKS)
   {
#ifdef PNG_MAX_MALLOC_64K
	  if (length > (png_uint_32)65535L)
	  {
		  png_warning(png_ptr, "unknown chunk too large to fit in memory");
		  skip = length - (png_uint_32)65535L;
		  length = (png_uint_32)65535L;
	  }
#endif
	  png_strncpy((png_charp)png_ptr->unknown_chunk.name,
	 (png_charp)png_ptr->chunk_name, 5);
	  png_ptr->unknown_chunk.data = (png_bytep)png_malloc(png_ptr, length);
	  png_ptr->unknown_chunk.size = (png_size_t)length;
	  png_crc_read(png_ptr, (png_bytep)png_ptr->unknown_chunk.data, length);
#if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
	  if(png_ptr->read_user_chunk_fn != NULL)
	  {
		 /* callback to user unknown chunk handler */
		 int ret;
		 ret = (*(png_ptr->read_user_chunk_fn))
		   (png_ptr, &png_ptr->unknown_chunk);
		 if (ret < 0)
			png_chunk_error(png_ptr, "error in user chunk");
		 if (ret == 0)
		 {
			if (!(png_ptr->chunk_name[0] & 0x20))
			   if(png_handle_as_unknown(png_ptr, png_ptr->chunk_name) !=
					PNG_HANDLE_CHUNK_ALWAYS)
				  png_chunk_error(png_ptr, "unknown critical chunk");
			png_set_unknown_chunks(png_ptr, info_ptr,
			   &png_ptr->unknown_chunk, 1);
		 }
	  }
#else
	  png_set_unknown_chunks(png_ptr, info_ptr, &png_ptr->unknown_chunk, 1);
#endif
	  png_free(png_ptr, png_ptr->unknown_chunk.data);
	  png_ptr->unknown_chunk.data = NULL;
   }
   else
#endif
	  skip=length;
   png_push_crc_skip(png_ptr, skip);
}

void /* PRIVATE */
png_push_have_info(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr->info_fn != NULL)
	  (*(png_ptr->info_fn))(png_ptr, info_ptr);
}

void /* PRIVATE */
png_push_have_end(png_structp png_ptr, png_infop info_ptr)
{
   if (png_ptr->end_fn != NULL)
	  (*(png_ptr->end_fn))(png_ptr, info_ptr);
}

void /* PRIVATE */
png_push_have_row(png_structp png_ptr, png_bytep row)
{
   if (png_ptr->row_fn != NULL)
	  (*(png_ptr->row_fn))(png_ptr, row, png_ptr->row_number,
		 (int)png_ptr->pass);
}

void PNGAPI
png_progressive_combine_row (png_structp png_ptr,
   png_bytep old_row, png_bytep new_row)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_CONST int FARDATA png_pass_dsp_mask[7] =
	  {0xff, 0x0f, 0xff, 0x33, 0xff, 0x55, 0xff};
#endif
   if(png_ptr == NULL) return;
   if (new_row != NULL)    /* new_row must == png_ptr->row_buf here. */
	  png_combine_row(png_ptr, old_row, png_pass_dsp_mask[png_ptr->pass]);
}

void PNGAPI
png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr,
   png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn,
   png_progressive_end_ptr end_fn)
{
   if(png_ptr == NULL) return;
   png_ptr->info_fn = info_fn;
   png_ptr->row_fn = row_fn;
   png_ptr->end_fn = end_fn;

   png_set_read_fn(png_ptr, progressive_ptr, png_push_fill_buffer);
}

png_voidp PNGAPI
png_get_progressive_ptr(png_structp png_ptr)
{
   if(png_ptr == NULL) return (NULL);
   return png_ptr->io_ptr;
}
#endif /* PNG_PROGRESSIVE_READ_SUPPORTED */

/*** End of inlined file: pngpread.c ***/


/*** Start of inlined file: pngrio.c ***/
/* pngrio.c - functions for data input
 *
 * Last changed in libpng 1.2.13 November 13, 2006
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2006 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 *
 * This file provides a location for all input.  Users who need
 * special handling are expected to write a function that has the same
 * arguments as this and performs a similar function, but that possibly
 * has a different input method.  Note that you shouldn't change this
 * function, but rather write a replacement function and then make
 * libpng use it at run time with png_set_read_fn(...).
 */

#define PNG_INTERNAL

#if defined(PNG_READ_SUPPORTED)

/* Read the data from whatever input you are using.  The default routine
   reads from a file pointer.  Note that this routine sometimes gets called
   with very small lengths, so you should implement some kind of simple
   buffering if you are using unbuffered reads.  This should never be asked
   to read more then 64K on a 16 bit machine. */
void /* PRIVATE */
png_read_data(png_structp png_ptr, png_bytep data, png_size_t length)
{
   png_debug1(4,"reading %d bytes\n", (int)length);
   if (png_ptr->read_data_fn != NULL)
	  (*(png_ptr->read_data_fn))(png_ptr, data, length);
   else
	  png_error(png_ptr, "Call to NULL read function");
}

#if !defined(PNG_NO_STDIO)
/* This is the function that does the actual reading of data.  If you are
   not reading from a standard C stream, you should create a replacement
   read_data function and use it at run time with png_set_read_fn(), rather
   than changing the library. */
#ifndef USE_FAR_KEYWORD
void PNGAPI
png_default_read_data(png_structp png_ptr, png_bytep data, png_size_t length)
{
   png_size_t check;

   if(png_ptr == NULL) return;
   /* fread() returns 0 on error, so it is OK to store this in a png_size_t
	* instead of an int, which is what fread() actually returns.
	*/
#if defined(_WIN32_WCE)
   if ( !ReadFile((HANDLE)(png_ptr->io_ptr), data, length, &check, NULL) )
	  check = 0;
#else
   check = (png_size_t)fread(data, (png_size_t)1, length,
	  (png_FILE_p)png_ptr->io_ptr);
#endif

   if (check != length)
	  png_error(png_ptr, "Read Error");
}
#else
/* this is the model-independent version. Since the standard I/O library
   can't handle far buffers in the medium and small models, we have to copy
   the data.
*/

#define NEAR_BUF_SIZE 1024
#define MIN(a,b) (a <= b ? a : b)

static void PNGAPI
png_default_read_data(png_structp png_ptr, png_bytep data, png_size_t length)
{
   int check;
   png_byte *n_data;
   png_FILE_p io_ptr;

   if(png_ptr == NULL) return;
   /* Check if data really is near. If so, use usual code. */
   n_data = (png_byte *)CVT_PTR_NOCHECK(data);
   io_ptr = (png_FILE_p)CVT_PTR(png_ptr->io_ptr);
   if ((png_bytep)n_data == data)
   {
#if defined(_WIN32_WCE)
	  if ( !ReadFile((HANDLE)(png_ptr->io_ptr), data, length, &check, NULL) )
		 check = 0;
#else
	  check = fread(n_data, 1, length, io_ptr);
#endif
   }
   else
   {
	  png_byte buf[NEAR_BUF_SIZE];
	  png_size_t read, remaining, err;
	  check = 0;
	  remaining = length;
	  do
	  {
		 read = MIN(NEAR_BUF_SIZE, remaining);
#if defined(_WIN32_WCE)
		 if ( !ReadFile((HANDLE)(io_ptr), buf, read, &err, NULL) )
			err = 0;
#else
		 err = fread(buf, (png_size_t)1, read, io_ptr);
#endif
		 png_memcpy(data, buf, read); /* copy far buffer to near buffer */
		 if(err != read)
			break;
		 else
			check += err;
		 data += read;
		 remaining -= read;
	  }
	  while (remaining != 0);
   }
   if ((png_uint_32)check != (png_uint_32)length)
	  png_error(png_ptr, "read Error");
}
#endif
#endif

/* This function allows the application to supply a new input function
   for libpng if standard C streams aren't being used.

   This function takes as its arguments:
   png_ptr      - pointer to a png input data structure
   io_ptr       - pointer to user supplied structure containing info about
				  the input functions.  May be NULL.
   read_data_fn - pointer to a new input function that takes as its
				  arguments a pointer to a png_struct, a pointer to
				  a location where input data can be stored, and a 32-bit
				  unsigned int that is the number of bytes to be read.
				  To exit and output any fatal error messages the new write
				  function should call png_error(png_ptr, "Error msg"). */
void PNGAPI
png_set_read_fn(png_structp png_ptr, png_voidp io_ptr,
   png_rw_ptr read_data_fn)
{
   if(png_ptr == NULL) return;
   png_ptr->io_ptr = io_ptr;

#if !defined(PNG_NO_STDIO)
   if (read_data_fn != NULL)
	  png_ptr->read_data_fn = read_data_fn;
   else
	  png_ptr->read_data_fn = png_default_read_data;
#else
   png_ptr->read_data_fn = read_data_fn;
#endif

   /* It is an error to write to a read device */
   if (png_ptr->write_data_fn != NULL)
   {
	  png_ptr->write_data_fn = NULL;
	  png_warning(png_ptr,
		 "It's an error to set both read_data_fn and write_data_fn in the ");
	  png_warning(png_ptr,
		 "same structure.  Resetting write_data_fn to NULL.");
   }

#if defined(PNG_WRITE_FLUSH_SUPPORTED)
   png_ptr->output_flush_fn = NULL;
#endif
}
#endif /* PNG_READ_SUPPORTED */

/*** End of inlined file: pngrio.c ***/


/*** Start of inlined file: pngrtran.c ***/
/* pngrtran.c - transforms the data in a row for PNG readers
 *
 * Last changed in libpng 1.2.21 [October 4, 2007]
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 *
 * This file contains functions optionally called by an application
 * in order to tell libpng how to handle data when reading a PNG.
 * Transformations that are used in both reading and writing are
 * in pngtrans.c.
 */

#define PNG_INTERNAL

#if defined(PNG_READ_SUPPORTED)

/* Set the action on getting a CRC error for an ancillary or critical chunk. */
void PNGAPI
png_set_crc_action(png_structp png_ptr, int crit_action, int ancil_action)
{
   png_debug(1, "in png_set_crc_action\n");
   /* Tell libpng how we react to CRC errors in critical chunks */
   if(png_ptr == NULL) return;
   switch (crit_action)
   {
	  case PNG_CRC_NO_CHANGE:                        /* leave setting as is */
		 break;
	  case PNG_CRC_WARN_USE:                               /* warn/use data */
		 png_ptr->flags &= ~PNG_FLAG_CRC_CRITICAL_MASK;
		 png_ptr->flags |= PNG_FLAG_CRC_CRITICAL_USE;
		 break;
	  case PNG_CRC_QUIET_USE:                             /* quiet/use data */
		 png_ptr->flags &= ~PNG_FLAG_CRC_CRITICAL_MASK;
		 png_ptr->flags |= PNG_FLAG_CRC_CRITICAL_USE |
						   PNG_FLAG_CRC_CRITICAL_IGNORE;
		 break;
	  case PNG_CRC_WARN_DISCARD:    /* not a valid action for critical data */
		 png_warning(png_ptr, "Can't discard critical data on CRC error.");
	  case PNG_CRC_ERROR_QUIT:                                /* error/quit */
	  case PNG_CRC_DEFAULT:
	  default:
		 png_ptr->flags &= ~PNG_FLAG_CRC_CRITICAL_MASK;
		 break;
   }

   switch (ancil_action)
   {
	  case PNG_CRC_NO_CHANGE:                       /* leave setting as is */
		 break;
	  case PNG_CRC_WARN_USE:                              /* warn/use data */
		 png_ptr->flags &= ~PNG_FLAG_CRC_ANCILLARY_MASK;
		 png_ptr->flags |= PNG_FLAG_CRC_ANCILLARY_USE;
		 break;
	  case PNG_CRC_QUIET_USE:                            /* quiet/use data */
		 png_ptr->flags &= ~PNG_FLAG_CRC_ANCILLARY_MASK;
		 png_ptr->flags |= PNG_FLAG_CRC_ANCILLARY_USE |
						   PNG_FLAG_CRC_ANCILLARY_NOWARN;
		 break;
	  case PNG_CRC_ERROR_QUIT:                               /* error/quit */
		 png_ptr->flags &= ~PNG_FLAG_CRC_ANCILLARY_MASK;
		 png_ptr->flags |= PNG_FLAG_CRC_ANCILLARY_NOWARN;
		 break;
	  case PNG_CRC_WARN_DISCARD:                      /* warn/discard data */
	  case PNG_CRC_DEFAULT:
	  default:
		 png_ptr->flags &= ~PNG_FLAG_CRC_ANCILLARY_MASK;
		 break;
   }
}

#if defined(PNG_READ_BACKGROUND_SUPPORTED) && \
	defined(PNG_FLOATING_POINT_SUPPORTED)
/* handle alpha and tRNS via a background color */
void PNGAPI
png_set_background(png_structp png_ptr,
   png_color_16p background_color, int background_gamma_code,
   int need_expand, double background_gamma)
{
   png_debug(1, "in png_set_background\n");
   if(png_ptr == NULL) return;
   if (background_gamma_code == PNG_BACKGROUND_GAMMA_UNKNOWN)
   {
	  png_warning(png_ptr, "Application must supply a known background gamma");
	  return;
   }

   png_ptr->transformations |= PNG_BACKGROUND;
   png_memcpy(&(png_ptr->background), background_color,
	  png_sizeof(png_color_16));
   png_ptr->background_gamma = (float)background_gamma;
   png_ptr->background_gamma_type = (png_byte)(background_gamma_code);
   png_ptr->transformations |= (need_expand ? PNG_BACKGROUND_EXPAND : 0);
}
#endif

#if defined(PNG_READ_16_TO_8_SUPPORTED)
/* strip 16 bit depth files to 8 bit depth */
void PNGAPI
png_set_strip_16(png_structp png_ptr)
{
   png_debug(1, "in png_set_strip_16\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= PNG_16_TO_8;
}
#endif

#if defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
void PNGAPI
png_set_strip_alpha(png_structp png_ptr)
{
   png_debug(1, "in png_set_strip_alpha\n");
   if(png_ptr == NULL) return;
   png_ptr->flags |= PNG_FLAG_STRIP_ALPHA;
}
#endif

#if defined(PNG_READ_DITHER_SUPPORTED)
/* Dither file to 8 bit.  Supply a palette, the current number
 * of elements in the palette, the maximum number of elements
 * allowed, and a histogram if possible.  If the current number
 * of colors is greater then the maximum number, the palette will be
 * modified to fit in the maximum number.  "full_dither" indicates
 * whether we need a dithering cube set up for RGB images, or if we
 * simply are reducing the number of colors in a paletted image.
 */

typedef struct png_dsort_struct
{
   struct png_dsort_struct FAR * next;
   png_byte left;
   png_byte right;
} png_dsort;
typedef png_dsort FAR *       png_dsortp;
typedef png_dsort FAR * FAR * png_dsortpp;

void PNGAPI
png_set_dither(png_structp png_ptr, png_colorp palette,
   int num_palette, int maximum_colors, png_uint_16p histogram,
   int full_dither)
{
   png_debug(1, "in png_set_dither\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= PNG_DITHER;

   if (!full_dither)
   {
	  int i;

	  png_ptr->dither_index = (png_bytep)png_malloc(png_ptr,
		 (png_uint_32)(num_palette * png_sizeof (png_byte)));
	  for (i = 0; i < num_palette; i++)
		 png_ptr->dither_index[i] = (png_byte)i;
   }

   if (num_palette > maximum_colors)
   {
	  if (histogram != NULL)
	  {
		 /* This is easy enough, just throw out the least used colors.
			Perhaps not the best solution, but good enough. */

		 int i;

		 /* initialize an array to sort colors */
		 png_ptr->dither_sort = (png_bytep)png_malloc(png_ptr,
			(png_uint_32)(num_palette * png_sizeof (png_byte)));

		 /* initialize the dither_sort array */
		 for (i = 0; i < num_palette; i++)
			png_ptr->dither_sort[i] = (png_byte)i;

		 /* Find the least used palette entries by starting a
			bubble sort, and running it until we have sorted
			out enough colors.  Note that we don't care about
			sorting all the colors, just finding which are
			least used. */

		 for (i = num_palette - 1; i >= maximum_colors; i--)
		 {
			int done; /* to stop early if the list is pre-sorted */
			int j;

			done = 1;
			for (j = 0; j < i; j++)
			{
			   if (histogram[png_ptr->dither_sort[j]]
				   < histogram[png_ptr->dither_sort[j + 1]])
			   {
				  png_byte t;

				  t = png_ptr->dither_sort[j];
				  png_ptr->dither_sort[j] = png_ptr->dither_sort[j + 1];
				  png_ptr->dither_sort[j + 1] = t;
				  done = 0;
			   }
			}
			if (done)
			   break;
		 }

		 /* swap the palette around, and set up a table, if necessary */
		 if (full_dither)
		 {
			int j = num_palette;

			/* put all the useful colors within the max, but don't
			   move the others */
			for (i = 0; i < maximum_colors; i++)
			{
			   if ((int)png_ptr->dither_sort[i] >= maximum_colors)
			   {
				  do
					 j--;
				  while ((int)png_ptr->dither_sort[j] >= maximum_colors);
				  palette[i] = palette[j];
			   }
			}
		 }
		 else
		 {
			int j = num_palette;

			/* move all the used colors inside the max limit, and
			   develop a translation table */
			for (i = 0; i < maximum_colors; i++)
			{
			   /* only move the colors we need to */
			   if ((int)png_ptr->dither_sort[i] >= maximum_colors)
			   {
				  png_color tmp_color;

				  do
					 j--;
				  while ((int)png_ptr->dither_sort[j] >= maximum_colors);

				  tmp_color = palette[j];
				  palette[j] = palette[i];
				  palette[i] = tmp_color;
				  /* indicate where the color went */
				  png_ptr->dither_index[j] = (png_byte)i;
				  png_ptr->dither_index[i] = (png_byte)j;
			   }
			}

			/* find closest color for those colors we are not using */
			for (i = 0; i < num_palette; i++)
			{
			   if ((int)png_ptr->dither_index[i] >= maximum_colors)
			   {
				  int min_d, k, min_k, d_index;

				  /* find the closest color to one we threw out */
				  d_index = png_ptr->dither_index[i];
				  min_d = PNG_COLOR_DIST(palette[d_index], palette[0]);
				  for (k = 1, min_k = 0; k < maximum_colors; k++)
				  {
					 int d;

					 d = PNG_COLOR_DIST(palette[d_index], palette[k]);

					 if (d < min_d)
					 {
						min_d = d;
						min_k = k;
					 }
				  }
				  /* point to closest color */
				  png_ptr->dither_index[i] = (png_byte)min_k;
			   }
			}
		 }
		 png_free(png_ptr, png_ptr->dither_sort);
		 png_ptr->dither_sort=NULL;
	  }
	  else
	  {
		 /* This is much harder to do simply (and quickly).  Perhaps
			we need to go through a median cut routine, but those
			don't always behave themselves with only a few colors
			as input.  So we will just find the closest two colors,
			and throw out one of them (chosen somewhat randomly).
			[We don't understand this at all, so if someone wants to
			 work on improving it, be our guest - AED, GRP]
			*/
		 int i;
		 int max_d;
		 int num_new_palette;
		 png_dsortp t;
		 png_dsortpp hash;

		 t=NULL;

		 /* initialize palette index arrays */
		 png_ptr->index_to_palette = (png_bytep)png_malloc(png_ptr,
			(png_uint_32)(num_palette * png_sizeof (png_byte)));
		 png_ptr->palette_to_index = (png_bytep)png_malloc(png_ptr,
			(png_uint_32)(num_palette * png_sizeof (png_byte)));

		 /* initialize the sort array */
		 for (i = 0; i < num_palette; i++)
		 {
			png_ptr->index_to_palette[i] = (png_byte)i;
			png_ptr->palette_to_index[i] = (png_byte)i;
		 }

		 hash = (png_dsortpp)png_malloc(png_ptr, (png_uint_32)(769 *
			png_sizeof (png_dsortp)));
		 for (i = 0; i < 769; i++)
			hash[i] = NULL;
/*         png_memset(hash, 0, 769 * png_sizeof (png_dsortp)); */

		 num_new_palette = num_palette;

		 /* initial wild guess at how far apart the farthest pixel
			pair we will be eliminating will be.  Larger
			numbers mean more areas will be allocated, Smaller
			numbers run the risk of not saving enough data, and
			having to do this all over again.

			I have not done extensive checking on this number.
			*/
		 max_d = 96;

		 while (num_new_palette > maximum_colors)
		 {
			for (i = 0; i < num_new_palette - 1; i++)
			{
			   int j;

			   for (j = i + 1; j < num_new_palette; j++)
			   {
				  int d;

				  d = PNG_COLOR_DIST(palette[i], palette[j]);

				  if (d <= max_d)
				  {

					 t = (png_dsortp)png_malloc_warn(png_ptr,
						 (png_uint_32)(png_sizeof(png_dsort)));
					 if (t == NULL)
						 break;
					 t->next = hash[d];
					 t->left = (png_byte)i;
					 t->right = (png_byte)j;
					 hash[d] = t;
				  }
			   }
			   if (t == NULL)
				  break;
			}

			if (t != NULL)
			for (i = 0; i <= max_d; i++)
			{
			   if (hash[i] != NULL)
			   {
				  png_dsortp p;

				  for (p = hash[i]; p; p = p->next)
				  {
					 if ((int)png_ptr->index_to_palette[p->left]
						< num_new_palette &&
						(int)png_ptr->index_to_palette[p->right]
						< num_new_palette)
					 {
						int j, next_j;

						if (num_new_palette & 0x01)
						{
						   j = p->left;
						   next_j = p->right;
						}
						else
						{
						   j = p->right;
						   next_j = p->left;
						}

						num_new_palette--;
						palette[png_ptr->index_to_palette[j]]
						  = palette[num_new_palette];
						if (!full_dither)
						{
						   int k;

						   for (k = 0; k < num_palette; k++)
						   {
							  if (png_ptr->dither_index[k] ==
								 png_ptr->index_to_palette[j])
								 png_ptr->dither_index[k] =
									png_ptr->index_to_palette[next_j];
							  if ((int)png_ptr->dither_index[k] ==
								 num_new_palette)
								 png_ptr->dither_index[k] =
									png_ptr->index_to_palette[j];
						   }
						}

						png_ptr->index_to_palette[png_ptr->palette_to_index
						   [num_new_palette]] = png_ptr->index_to_palette[j];
						png_ptr->palette_to_index[png_ptr->index_to_palette[j]]
						   = png_ptr->palette_to_index[num_new_palette];

						png_ptr->index_to_palette[j] = (png_byte)num_new_palette;
						png_ptr->palette_to_index[num_new_palette] = (png_byte)j;
					 }
					 if (num_new_palette <= maximum_colors)
						break;
				  }
				  if (num_new_palette <= maximum_colors)
					 break;
			   }
			}

			for (i = 0; i < 769; i++)
			{
			   if (hash[i] != NULL)
			   {
				  png_dsortp p = hash[i];
				  while (p)
				  {
					 t = p->next;
					 png_free(png_ptr, p);
					 p = t;
				  }
			   }
			   hash[i] = 0;
			}
			max_d += 96;
		 }
		 png_free(png_ptr, hash);
		 png_free(png_ptr, png_ptr->palette_to_index);
		 png_free(png_ptr, png_ptr->index_to_palette);
		 png_ptr->palette_to_index=NULL;
		 png_ptr->index_to_palette=NULL;
	  }
	  num_palette = maximum_colors;
   }
   if (png_ptr->palette == NULL)
   {
	  png_ptr->palette = palette;
   }
   png_ptr->num_palette = (png_uint_16)num_palette;

   if (full_dither)
   {
	  int i;
	  png_bytep distance;
	  int total_bits = PNG_DITHER_RED_BITS + PNG_DITHER_GREEN_BITS +
		 PNG_DITHER_BLUE_BITS;
	  int num_red = (1 << PNG_DITHER_RED_BITS);
	  int num_green = (1 << PNG_DITHER_GREEN_BITS);
	  int num_blue = (1 << PNG_DITHER_BLUE_BITS);
	  png_size_t num_entries = ((png_size_t)1 << total_bits);

	  png_ptr->palette_lookup = (png_bytep )png_malloc(png_ptr,
		 (png_uint_32)(num_entries * png_sizeof (png_byte)));

	  png_memset(png_ptr->palette_lookup, 0, num_entries *
		 png_sizeof (png_byte));

	  distance = (png_bytep)png_malloc(png_ptr, (png_uint_32)(num_entries *
		 png_sizeof(png_byte)));

	  png_memset(distance, 0xff, num_entries * png_sizeof(png_byte));

	  for (i = 0; i < num_palette; i++)
	  {
		 int ir, ig, ib;
		 int r = (palette[i].red >> (8 - PNG_DITHER_RED_BITS));
		 int g = (palette[i].green >> (8 - PNG_DITHER_GREEN_BITS));
		 int b = (palette[i].blue >> (8 - PNG_DITHER_BLUE_BITS));

		 for (ir = 0; ir < num_red; ir++)
		 {
			/* int dr = abs(ir - r); */
			int dr = ((ir > r) ? ir - r : r - ir);
			int index_r = (ir << (PNG_DITHER_BLUE_BITS + PNG_DITHER_GREEN_BITS));

			for (ig = 0; ig < num_green; ig++)
			{
			   /* int dg = abs(ig - g); */
			   int dg = ((ig > g) ? ig - g : g - ig);
			   int dt = dr + dg;
			   int dm = ((dr > dg) ? dr : dg);
			   int index_g = index_r | (ig << PNG_DITHER_BLUE_BITS);

			   for (ib = 0; ib < num_blue; ib++)
			   {
				  int d_index = index_g | ib;
				  /* int db = abs(ib - b); */
				  int db = ((ib > b) ? ib - b : b - ib);
				  int dmax = ((dm > db) ? dm : db);
				  int d = dmax + dt + db;

				  if (d < (int)distance[d_index])
				  {
					 distance[d_index] = (png_byte)d;
					 png_ptr->palette_lookup[d_index] = (png_byte)i;
				  }
			   }
			}
		 }
	  }

	  png_free(png_ptr, distance);
   }
}
#endif

#if defined(PNG_READ_GAMMA_SUPPORTED) && defined(PNG_FLOATING_POINT_SUPPORTED)
/* Transform the image from the file_gamma to the screen_gamma.  We
 * only do transformations on images where the file_gamma and screen_gamma
 * are not close reciprocals, otherwise it slows things down slightly, and
 * also needlessly introduces small errors.
 *
 * We will turn off gamma transformation later if no semitransparent entries
 * are present in the tRNS array for palette images.  We can't do it here
 * because we don't necessarily have the tRNS chunk yet.
 */
void PNGAPI
png_set_gamma(png_structp png_ptr, double scrn_gamma, double file_gamma)
{
   png_debug(1, "in png_set_gamma\n");
   if(png_ptr == NULL) return;
   if ((fabs(scrn_gamma * file_gamma - 1.0) > PNG_GAMMA_THRESHOLD) ||
	   (png_ptr->color_type & PNG_COLOR_MASK_ALPHA) ||
	   (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE))
	 png_ptr->transformations |= PNG_GAMMA;
   png_ptr->gamma = (float)file_gamma;
   png_ptr->screen_gamma = (float)scrn_gamma;
}
#endif

#if defined(PNG_READ_EXPAND_SUPPORTED)
/* Expand paletted images to RGB, expand grayscale images of
 * less than 8-bit depth to 8-bit depth, and expand tRNS chunks
 * to alpha channels.
 */
void PNGAPI
png_set_expand(png_structp png_ptr)
{
   png_debug(1, "in png_set_expand\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= (PNG_EXPAND | PNG_EXPAND_tRNS);
#ifdef PNG_WARN_UNINITIALIZED_ROW
   png_ptr->flags &= ~PNG_FLAG_ROW_INIT;
#endif
}

/* GRR 19990627:  the following three functions currently are identical
 *  to png_set_expand().  However, it is entirely reasonable that someone
 *  might wish to expand an indexed image to RGB but *not* expand a single,
 *  fully transparent palette entry to a full alpha channel--perhaps instead
 *  convert tRNS to the grayscale/RGB format (16-bit RGB value), or replace
 *  the transparent color with a particular RGB value, or drop tRNS entirely.
 *  IOW, a future version of the library may make the transformations flag
 *  a bit more fine-grained, with separate bits for each of these three
 *  functions.
 *
 *  More to the point, these functions make it obvious what libpng will be
 *  doing, whereas "expand" can (and does) mean any number of things.
 *
 *  GRP 20060307: In libpng-1.4.0, png_set_gray_1_2_4_to_8() was modified
 *  to expand only the sample depth but not to expand the tRNS to alpha.
 */

/* Expand paletted images to RGB. */
void PNGAPI
png_set_palette_to_rgb(png_structp png_ptr)
{
   png_debug(1, "in png_set_palette_to_rgb\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= (PNG_EXPAND | PNG_EXPAND_tRNS);
#ifdef PNG_WARN_UNINITIALIZED_ROW
   png_ptr->flags &= !(PNG_FLAG_ROW_INIT);
   png_ptr->flags &= ~PNG_FLAG_ROW_INIT;
#endif
}

#if !defined(PNG_1_0_X)
/* Expand grayscale images of less than 8-bit depth to 8 bits. */
void PNGAPI
png_set_expand_gray_1_2_4_to_8(png_structp png_ptr)
{
   png_debug(1, "in png_set_expand_gray_1_2_4_to_8\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= PNG_EXPAND;
#ifdef PNG_WARN_UNINITIALIZED_ROW
   png_ptr->flags &= ~PNG_FLAG_ROW_INIT;
#endif
}
#endif

#if defined(PNG_1_0_X) || defined(PNG_1_2_X)
/* Expand grayscale images of less than 8-bit depth to 8 bits. */
/* Deprecated as of libpng-1.2.9 */
void PNGAPI
png_set_gray_1_2_4_to_8(png_structp png_ptr)
{
   png_debug(1, "in png_set_gray_1_2_4_to_8\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= (PNG_EXPAND | PNG_EXPAND_tRNS);
}
#endif

/* Expand tRNS chunks to alpha channels. */
void PNGAPI
png_set_tRNS_to_alpha(png_structp png_ptr)
{
   png_debug(1, "in png_set_tRNS_to_alpha\n");
   png_ptr->transformations |= (PNG_EXPAND | PNG_EXPAND_tRNS);
#ifdef PNG_WARN_UNINITIALIZED_ROW
   png_ptr->flags &= ~PNG_FLAG_ROW_INIT;
#endif
}
#endif /* defined(PNG_READ_EXPAND_SUPPORTED) */

#if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
void PNGAPI
png_set_gray_to_rgb(png_structp png_ptr)
{
   png_debug(1, "in png_set_gray_to_rgb\n");
   png_ptr->transformations |= PNG_GRAY_TO_RGB;
#ifdef PNG_WARN_UNINITIALIZED_ROW
   png_ptr->flags &= ~PNG_FLAG_ROW_INIT;
#endif
}
#endif

#if defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
#if defined(PNG_FLOATING_POINT_SUPPORTED)
/* Convert a RGB image to a grayscale of the same width.  This allows us,
 * for example, to convert a 24 bpp RGB image into an 8 bpp grayscale image.
 */

void PNGAPI
png_set_rgb_to_gray(png_structp png_ptr, int error_action, double red,
   double green)
{
	  int red_fixed = (int)((float)red*100000.0 + 0.5);
	  int green_fixed = (int)((float)green*100000.0 + 0.5);
	  if(png_ptr == NULL) return;
	  png_set_rgb_to_gray_fixed(png_ptr, error_action, red_fixed, green_fixed);
}
#endif

void PNGAPI
png_set_rgb_to_gray_fixed(png_structp png_ptr, int error_action,
   png_fixed_point red, png_fixed_point green)
{
   png_debug(1, "in png_set_rgb_to_gray\n");
   if(png_ptr == NULL) return;
   switch(error_action)
   {
	  case 1: png_ptr->transformations |= PNG_RGB_TO_GRAY;
			  break;
	  case 2: png_ptr->transformations |= PNG_RGB_TO_GRAY_WARN;
			  break;
	  case 3: png_ptr->transformations |= PNG_RGB_TO_GRAY_ERR;
   }
   if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
#if defined(PNG_READ_EXPAND_SUPPORTED)
	  png_ptr->transformations |= PNG_EXPAND;
#else
   {
	  png_warning(png_ptr, "Cannot do RGB_TO_GRAY without EXPAND_SUPPORTED.");
	  png_ptr->transformations &= ~PNG_RGB_TO_GRAY;
   }
#endif
   {
	  png_uint_16 red_int, green_int;
	  if(red < 0 || green < 0)
	  {
		 red_int   =  6968; /* .212671 * 32768 + .5 */
		 green_int = 23434; /* .715160 * 32768 + .5 */
	  }
	  else if(red + green < 100000L)
	  {
		red_int = (png_uint_16)(((png_uint_32)red*32768L)/100000L);
		green_int = (png_uint_16)(((png_uint_32)green*32768L)/100000L);
	  }
	  else
	  {
		 png_warning(png_ptr, "ignoring out of range rgb_to_gray coefficients");
		 red_int   =  6968;
		 green_int = 23434;
	  }
	  png_ptr->rgb_to_gray_red_coeff   = red_int;
	  png_ptr->rgb_to_gray_green_coeff = green_int;
	  png_ptr->rgb_to_gray_blue_coeff  = (png_uint_16)(32768-red_int-green_int);
   }
}
#endif

#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_LEGACY_SUPPORTED)
void PNGAPI
png_set_read_user_transform_fn(png_structp png_ptr, png_user_transform_ptr
   read_user_transform_fn)
{
   png_debug(1, "in png_set_read_user_transform_fn\n");
   if(png_ptr == NULL) return;
#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED)
   png_ptr->transformations |= PNG_USER_TRANSFORM;
   png_ptr->read_user_transform_fn = read_user_transform_fn;
#endif
#ifdef PNG_LEGACY_SUPPORTED
   if(read_user_transform_fn)
	  png_warning(png_ptr,
		"This version of libpng does not support user transforms");
#endif
}
#endif

/* Initialize everything needed for the read.  This includes modifying
 * the palette.
 */
void /* PRIVATE */
png_init_read_transformations(png_structp png_ptr)
{
   png_debug(1, "in png_init_read_transformations\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if(png_ptr != NULL)
#endif
  {
#if defined(PNG_READ_BACKGROUND_SUPPORTED) || defined(PNG_READ_SHIFT_SUPPORTED) \
 || defined(PNG_READ_GAMMA_SUPPORTED)
   int color_type = png_ptr->color_type;
#endif

#if defined(PNG_READ_EXPAND_SUPPORTED) && defined(PNG_READ_BACKGROUND_SUPPORTED)

#if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
   /* Detect gray background and attempt to enable optimization
	* for gray --> RGB case */
   /* Note:  if PNG_BACKGROUND_EXPAND is set and color_type is either RGB or
	* RGB_ALPHA (in which case need_expand is superfluous anyway), the
	* background color might actually be gray yet not be flagged as such.
	* This is not a problem for the current code, which uses
	* PNG_BACKGROUND_IS_GRAY only to decide when to do the
	* png_do_gray_to_rgb() transformation.
	*/
   if ((png_ptr->transformations & PNG_BACKGROUND_EXPAND) &&
	   !(color_type & PNG_COLOR_MASK_COLOR))
   {
		  png_ptr->mode |= PNG_BACKGROUND_IS_GRAY;
   } else if ((png_ptr->transformations & PNG_BACKGROUND) &&
			  !(png_ptr->transformations & PNG_BACKGROUND_EXPAND) &&
			  (png_ptr->transformations & PNG_GRAY_TO_RGB) &&
			  png_ptr->background.red == png_ptr->background.green &&
			  png_ptr->background.red == png_ptr->background.blue)
   {
		  png_ptr->mode |= PNG_BACKGROUND_IS_GRAY;
		  png_ptr->background.gray = png_ptr->background.red;
   }
#endif

   if ((png_ptr->transformations & PNG_BACKGROUND_EXPAND) &&
	   (png_ptr->transformations & PNG_EXPAND))
   {
	  if (!(color_type & PNG_COLOR_MASK_COLOR))  /* i.e., GRAY or GRAY_ALPHA */
	  {
		 /* expand background and tRNS chunks */
		 switch (png_ptr->bit_depth)
		 {
			case 1:
			   png_ptr->background.gray *= (png_uint_16)0xff;
			   png_ptr->background.red = png_ptr->background.green
				 =  png_ptr->background.blue = png_ptr->background.gray;
			   if (!(png_ptr->transformations & PNG_EXPAND_tRNS))
			   {
				 png_ptr->trans_values.gray *= (png_uint_16)0xff;
				 png_ptr->trans_values.red = png_ptr->trans_values.green
				   = png_ptr->trans_values.blue = png_ptr->trans_values.gray;
			   }
			   break;
			case 2:
			   png_ptr->background.gray *= (png_uint_16)0x55;
			   png_ptr->background.red = png_ptr->background.green
				 = png_ptr->background.blue = png_ptr->background.gray;
			   if (!(png_ptr->transformations & PNG_EXPAND_tRNS))
			   {
				 png_ptr->trans_values.gray *= (png_uint_16)0x55;
				 png_ptr->trans_values.red = png_ptr->trans_values.green
				   = png_ptr->trans_values.blue = png_ptr->trans_values.gray;
			   }
			   break;
			case 4:
			   png_ptr->background.gray *= (png_uint_16)0x11;
			   png_ptr->background.red = png_ptr->background.green
				 = png_ptr->background.blue = png_ptr->background.gray;
			   if (!(png_ptr->transformations & PNG_EXPAND_tRNS))
			   {
				 png_ptr->trans_values.gray *= (png_uint_16)0x11;
				 png_ptr->trans_values.red = png_ptr->trans_values.green
				   = png_ptr->trans_values.blue = png_ptr->trans_values.gray;
			   }
			   break;
			case 8:
			case 16:
			   png_ptr->background.red = png_ptr->background.green
				 = png_ptr->background.blue = png_ptr->background.gray;
			   break;
		 }
	  }
	  else if (color_type == PNG_COLOR_TYPE_PALETTE)
	  {
		 png_ptr->background.red   =
			png_ptr->palette[png_ptr->background.index].red;
		 png_ptr->background.green =
			png_ptr->palette[png_ptr->background.index].green;
		 png_ptr->background.blue  =
			png_ptr->palette[png_ptr->background.index].blue;

#if defined(PNG_READ_INVERT_ALPHA_SUPPORTED)
		if (png_ptr->transformations & PNG_INVERT_ALPHA)
		{
#if defined(PNG_READ_EXPAND_SUPPORTED)
		   if (!(png_ptr->transformations & PNG_EXPAND_tRNS))
#endif
		   {
		   /* invert the alpha channel (in tRNS) unless the pixels are
			  going to be expanded, in which case leave it for later */
			  int i,istop;
			  istop=(int)png_ptr->num_trans;
			  for (i=0; i<istop; i++)
				 png_ptr->trans[i] = (png_byte)(255 - png_ptr->trans[i]);
		   }
		}
#endif

	  }
   }
#endif

#if defined(PNG_READ_BACKGROUND_SUPPORTED) && defined(PNG_READ_GAMMA_SUPPORTED)
   png_ptr->background_1 = png_ptr->background;
#endif
#if defined(PNG_READ_GAMMA_SUPPORTED) && defined(PNG_FLOATING_POINT_SUPPORTED)

   if ((color_type == PNG_COLOR_TYPE_PALETTE && png_ptr->num_trans != 0)
	   && (fabs(png_ptr->screen_gamma * png_ptr->gamma - 1.0)
		 < PNG_GAMMA_THRESHOLD))
   {
	int i,k;
	k=0;
	for (i=0; i<png_ptr->num_trans; i++)
	{
	  if (png_ptr->trans[i] != 0 && png_ptr->trans[i] != 0xff)
		k=1; /* partial transparency is present */
	}
	if (k == 0)
	  png_ptr->transformations &= (~PNG_GAMMA);
   }

   if ((png_ptr->transformations & (PNG_GAMMA | PNG_RGB_TO_GRAY)) &&
		png_ptr->gamma != 0.0)
   {
	  png_build_gamma_table(png_ptr);
#if defined(PNG_READ_BACKGROUND_SUPPORTED)
	  if (png_ptr->transformations & PNG_BACKGROUND)
	  {
		 if (color_type == PNG_COLOR_TYPE_PALETTE)
		 {
		   /* could skip if no transparency and
		   */
			png_color back, back_1;
			png_colorp palette = png_ptr->palette;
			int num_palette = png_ptr->num_palette;
			int i;
			if (png_ptr->background_gamma_type == PNG_BACKGROUND_GAMMA_FILE)
			{
			   back.red = png_ptr->gamma_table[png_ptr->background.red];
			   back.green = png_ptr->gamma_table[png_ptr->background.green];
			   back.blue = png_ptr->gamma_table[png_ptr->background.blue];

			   back_1.red = png_ptr->gamma_to_1[png_ptr->background.red];
			   back_1.green = png_ptr->gamma_to_1[png_ptr->background.green];
			   back_1.blue = png_ptr->gamma_to_1[png_ptr->background.blue];
			}
			else
			{
			   double g, gs;

			   switch (png_ptr->background_gamma_type)
			   {
				  case PNG_BACKGROUND_GAMMA_SCREEN:
					 g = (png_ptr->screen_gamma);
					 gs = 1.0;
					 break;
				  case PNG_BACKGROUND_GAMMA_FILE:
					 g = 1.0 / (png_ptr->gamma);
					 gs = 1.0 / (png_ptr->gamma * png_ptr->screen_gamma);
					 break;
				  case PNG_BACKGROUND_GAMMA_UNIQUE:
					 g = 1.0 / (png_ptr->background_gamma);
					 gs = 1.0 / (png_ptr->background_gamma *
								 png_ptr->screen_gamma);
					 break;
				  default:
					 g = 1.0;    /* back_1 */
					 gs = 1.0;   /* back */
			   }

			   if ( fabs(gs - 1.0) < PNG_GAMMA_THRESHOLD)
			   {
				  back.red   = (png_byte)png_ptr->background.red;
				  back.green = (png_byte)png_ptr->background.green;
				  back.blue  = (png_byte)png_ptr->background.blue;
			   }
			   else
			   {
				  back.red = (png_byte)(pow(
					 (double)png_ptr->background.red/255, gs) * 255.0 + .5);
				  back.green = (png_byte)(pow(
					 (double)png_ptr->background.green/255, gs) * 255.0 + .5);
				  back.blue = (png_byte)(pow(
					 (double)png_ptr->background.blue/255, gs) * 255.0 + .5);
			   }

			   back_1.red = (png_byte)(pow(
				  (double)png_ptr->background.red/255, g) * 255.0 + .5);
			   back_1.green = (png_byte)(pow(
				  (double)png_ptr->background.green/255, g) * 255.0 + .5);
			   back_1.blue = (png_byte)(pow(
				  (double)png_ptr->background.blue/255, g) * 255.0 + .5);
			}
			for (i = 0; i < num_palette; i++)
			{
			   if (i < (int)png_ptr->num_trans && png_ptr->trans[i] != 0xff)
			   {
				  if (png_ptr->trans[i] == 0)
				  {
					 palette[i] = back;
				  }
				  else /* if (png_ptr->trans[i] != 0xff) */
				  {
					 png_byte v, w;

					 v = png_ptr->gamma_to_1[palette[i].red];
					 png_composite(w, v, png_ptr->trans[i], back_1.red);
					 palette[i].red = png_ptr->gamma_from_1[w];

					 v = png_ptr->gamma_to_1[palette[i].green];
					 png_composite(w, v, png_ptr->trans[i], back_1.green);
					 palette[i].green = png_ptr->gamma_from_1[w];

					 v = png_ptr->gamma_to_1[palette[i].blue];
					 png_composite(w, v, png_ptr->trans[i], back_1.blue);
					 palette[i].blue = png_ptr->gamma_from_1[w];
				  }
			   }
			   else
			   {
				  palette[i].red = png_ptr->gamma_table[palette[i].red];
				  palette[i].green = png_ptr->gamma_table[palette[i].green];
				  palette[i].blue = png_ptr->gamma_table[palette[i].blue];
			   }
			}
		 }
		 /* if (png_ptr->background_gamma_type!=PNG_BACKGROUND_GAMMA_UNKNOWN) */
		 else
		 /* color_type != PNG_COLOR_TYPE_PALETTE */
		 {
			double m = (double)(((png_uint_32)1 << png_ptr->bit_depth) - 1);
			double g = 1.0;
			double gs = 1.0;

			switch (png_ptr->background_gamma_type)
			{
			   case PNG_BACKGROUND_GAMMA_SCREEN:
				  g = (png_ptr->screen_gamma);
				  gs = 1.0;
				  break;
			   case PNG_BACKGROUND_GAMMA_FILE:
				  g = 1.0 / (png_ptr->gamma);
				  gs = 1.0 / (png_ptr->gamma * png_ptr->screen_gamma);
				  break;
			   case PNG_BACKGROUND_GAMMA_UNIQUE:
				  g = 1.0 / (png_ptr->background_gamma);
				  gs = 1.0 / (png_ptr->background_gamma *
					 png_ptr->screen_gamma);
				  break;
			}

			png_ptr->background_1.gray = (png_uint_16)(pow(
			   (double)png_ptr->background.gray / m, g) * m + .5);
			png_ptr->background.gray = (png_uint_16)(pow(
			   (double)png_ptr->background.gray / m, gs) * m + .5);

			if ((png_ptr->background.red != png_ptr->background.green) ||
				(png_ptr->background.red != png_ptr->background.blue) ||
				(png_ptr->background.red != png_ptr->background.gray))
			{
			   /* RGB or RGBA with color background */
			   png_ptr->background_1.red = (png_uint_16)(pow(
				  (double)png_ptr->background.red / m, g) * m + .5);
			   png_ptr->background_1.green = (png_uint_16)(pow(
				  (double)png_ptr->background.green / m, g) * m + .5);
			   png_ptr->background_1.blue = (png_uint_16)(pow(
				  (double)png_ptr->background.blue / m, g) * m + .5);
			   png_ptr->background.red = (png_uint_16)(pow(
				  (double)png_ptr->background.red / m, gs) * m + .5);
			   png_ptr->background.green = (png_uint_16)(pow(
				  (double)png_ptr->background.green / m, gs) * m + .5);
			   png_ptr->background.blue = (png_uint_16)(pow(
				  (double)png_ptr->background.blue / m, gs) * m + .5);
			}
			else
			{
			   /* GRAY, GRAY ALPHA, RGB, or RGBA with gray background */
			   png_ptr->background_1.red = png_ptr->background_1.green
				 = png_ptr->background_1.blue = png_ptr->background_1.gray;
			   png_ptr->background.red = png_ptr->background.green
				 = png_ptr->background.blue = png_ptr->background.gray;
			}
		 }
	  }
	  else
	  /* transformation does not include PNG_BACKGROUND */
#endif /* PNG_READ_BACKGROUND_SUPPORTED */
	  if (color_type == PNG_COLOR_TYPE_PALETTE)
	  {
		 png_colorp palette = png_ptr->palette;
		 int num_palette = png_ptr->num_palette;
		 int i;

		 for (i = 0; i < num_palette; i++)
		 {
			palette[i].red = png_ptr->gamma_table[palette[i].red];
			palette[i].green = png_ptr->gamma_table[palette[i].green];
			palette[i].blue = png_ptr->gamma_table[palette[i].blue];
		 }
	  }
   }
#if defined(PNG_READ_BACKGROUND_SUPPORTED)
   else
#endif
#endif /* PNG_READ_GAMMA_SUPPORTED && PNG_FLOATING_POINT_SUPPORTED */
#if defined(PNG_READ_BACKGROUND_SUPPORTED)
   /* No GAMMA transformation */
   if ((png_ptr->transformations & PNG_BACKGROUND) &&
	   (color_type == PNG_COLOR_TYPE_PALETTE))
   {
	  int i;
	  int istop = (int)png_ptr->num_trans;
	  png_color back;
	  png_colorp palette = png_ptr->palette;

	  back.red   = (png_byte)png_ptr->background.red;
	  back.green = (png_byte)png_ptr->background.green;
	  back.blue  = (png_byte)png_ptr->background.blue;

	  for (i = 0; i < istop; i++)
	  {
		 if (png_ptr->trans[i] == 0)
		 {
			palette[i] = back;
		 }
		 else if (png_ptr->trans[i] != 0xff)
		 {
			/* The png_composite() macro is defined in png.h */
			png_composite(palette[i].red, palette[i].red,
			   png_ptr->trans[i], back.red);
			png_composite(palette[i].green, palette[i].green,
			   png_ptr->trans[i], back.green);
			png_composite(palette[i].blue, palette[i].blue,
			   png_ptr->trans[i], back.blue);
		 }
	  }
   }
#endif /* PNG_READ_BACKGROUND_SUPPORTED */

#if defined(PNG_READ_SHIFT_SUPPORTED)
   if ((png_ptr->transformations & PNG_SHIFT) &&
	  (color_type == PNG_COLOR_TYPE_PALETTE))
   {
	  png_uint_16 i;
	  png_uint_16 istop = png_ptr->num_palette;
	  int sr = 8 - png_ptr->sig_bit.red;
	  int sg = 8 - png_ptr->sig_bit.green;
	  int sb = 8 - png_ptr->sig_bit.blue;

	  if (sr < 0 || sr > 8)
		 sr = 0;
	  if (sg < 0 || sg > 8)
		 sg = 0;
	  if (sb < 0 || sb > 8)
		 sb = 0;
	  for (i = 0; i < istop; i++)
	  {
		 png_ptr->palette[i].red >>= sr;
		 png_ptr->palette[i].green >>= sg;
		 png_ptr->palette[i].blue >>= sb;
	  }
   }
#endif  /* PNG_READ_SHIFT_SUPPORTED */
 }
#if !defined(PNG_READ_GAMMA_SUPPORTED) && !defined(PNG_READ_SHIFT_SUPPORTED) \
 && !defined(PNG_READ_BACKGROUND_SUPPORTED)
   if(png_ptr)
	  return;
#endif
}

/* Modify the info structure to reflect the transformations.  The
 * info should be updated so a PNG file could be written with it,
 * assuming the transformations result in valid PNG data.
 */
void /* PRIVATE */
png_read_transform_info(png_structp png_ptr, png_infop info_ptr)
{
   png_debug(1, "in png_read_transform_info\n");
#if defined(PNG_READ_EXPAND_SUPPORTED)
   if (png_ptr->transformations & PNG_EXPAND)
   {
	  if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	  {
		 if (png_ptr->num_trans && (png_ptr->transformations & PNG_EXPAND_tRNS))
			info_ptr->color_type = PNG_COLOR_TYPE_RGB_ALPHA;
		 else
			info_ptr->color_type = PNG_COLOR_TYPE_RGB;
		 info_ptr->bit_depth = 8;
		 info_ptr->num_trans = 0;
	  }
	  else
	  {
		 if (png_ptr->num_trans)
		 {
			if (png_ptr->transformations & PNG_EXPAND_tRNS)
			  info_ptr->color_type |= PNG_COLOR_MASK_ALPHA;
			else
			  info_ptr->color_type |= PNG_COLOR_MASK_COLOR;
		 }
		 if (info_ptr->bit_depth < 8)
			info_ptr->bit_depth = 8;
		 info_ptr->num_trans = 0;
	  }
   }
#endif

#if defined(PNG_READ_BACKGROUND_SUPPORTED)
   if (png_ptr->transformations & PNG_BACKGROUND)
   {
	  info_ptr->color_type &= ~PNG_COLOR_MASK_ALPHA;
	  info_ptr->num_trans = 0;
	  info_ptr->background = png_ptr->background;
   }
#endif

#if defined(PNG_READ_GAMMA_SUPPORTED)
   if (png_ptr->transformations & PNG_GAMMA)
   {
#ifdef PNG_FLOATING_POINT_SUPPORTED
	  info_ptr->gamma = png_ptr->gamma;
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
	  info_ptr->int_gamma = png_ptr->int_gamma;
#endif
   }
#endif

#if defined(PNG_READ_16_TO_8_SUPPORTED)
   if ((png_ptr->transformations & PNG_16_TO_8) && (info_ptr->bit_depth == 16))
	  info_ptr->bit_depth = 8;
#endif

#if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
   if (png_ptr->transformations & PNG_GRAY_TO_RGB)
	  info_ptr->color_type |= PNG_COLOR_MASK_COLOR;
#endif

#if defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
   if (png_ptr->transformations & PNG_RGB_TO_GRAY)
	  info_ptr->color_type &= ~PNG_COLOR_MASK_COLOR;
#endif

#if defined(PNG_READ_DITHER_SUPPORTED)
   if (png_ptr->transformations & PNG_DITHER)
   {
	  if (((info_ptr->color_type == PNG_COLOR_TYPE_RGB) ||
		 (info_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA)) &&
		 png_ptr->palette_lookup && info_ptr->bit_depth == 8)
	  {
		 info_ptr->color_type = PNG_COLOR_TYPE_PALETTE;
	  }
   }
#endif

#if defined(PNG_READ_PACK_SUPPORTED)
   if ((png_ptr->transformations & PNG_PACK) && (info_ptr->bit_depth < 8))
	  info_ptr->bit_depth = 8;
#endif

   if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	  info_ptr->channels = 1;
   else if (info_ptr->color_type & PNG_COLOR_MASK_COLOR)
	  info_ptr->channels = 3;
   else
	  info_ptr->channels = 1;

#if defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
   if (png_ptr->flags & PNG_FLAG_STRIP_ALPHA)
	  info_ptr->color_type &= ~PNG_COLOR_MASK_ALPHA;
#endif

   if (info_ptr->color_type & PNG_COLOR_MASK_ALPHA)
	  info_ptr->channels++;

#if defined(PNG_READ_FILLER_SUPPORTED)
   /* STRIP_ALPHA and FILLER allowed:  MASK_ALPHA bit stripped above */
   if ((png_ptr->transformations & PNG_FILLER) &&
	   ((info_ptr->color_type == PNG_COLOR_TYPE_RGB) ||
	   (info_ptr->color_type == PNG_COLOR_TYPE_GRAY)))
   {
	  info_ptr->channels++;
	  /* if adding a true alpha channel not just filler */
#if !defined(PNG_1_0_X)
	  if (png_ptr->transformations & PNG_ADD_ALPHA)
		info_ptr->color_type |= PNG_COLOR_MASK_ALPHA;
#endif
   }
#endif

#if defined(PNG_USER_TRANSFORM_PTR_SUPPORTED) && \
defined(PNG_READ_USER_TRANSFORM_SUPPORTED)
   if(png_ptr->transformations & PNG_USER_TRANSFORM)
	 {
	   if(info_ptr->bit_depth < png_ptr->user_transform_depth)
		 info_ptr->bit_depth = png_ptr->user_transform_depth;
	   if(info_ptr->channels < png_ptr->user_transform_channels)
		 info_ptr->channels = png_ptr->user_transform_channels;
	 }
#endif

   info_ptr->pixel_depth = (png_byte)(info_ptr->channels *
	  info_ptr->bit_depth);

   info_ptr->rowbytes = PNG_ROWBYTES(info_ptr->pixel_depth,info_ptr->width);

#if !defined(PNG_READ_EXPAND_SUPPORTED)
   if(png_ptr)
	  return;
#endif
}

/* Transform the row.  The order of transformations is significant,
 * and is very touchy.  If you add a transformation, take care to
 * decide how it fits in with the other transformations here.
 */
void /* PRIVATE */
png_do_read_transformations(png_structp png_ptr)
{
   png_debug(1, "in png_do_read_transformations\n");
   if (png_ptr->row_buf == NULL)
   {
#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
	  char msg[50];

	  png_snprintf2(msg, 50,
		 "NULL row buffer for row %ld, pass %d", png_ptr->row_number,
		 png_ptr->pass);
	  png_error(png_ptr, msg);
#else
	  png_error(png_ptr, "NULL row buffer");
#endif
   }
#ifdef PNG_WARN_UNINITIALIZED_ROW
   if (!(png_ptr->flags & PNG_FLAG_ROW_INIT))
	  /* Application has failed to call either png_read_start_image()
	   * or png_read_update_info() after setting transforms that expand
	   * pixels.  This check added to libpng-1.2.19 */
#if (PNG_WARN_UNINITIALIZED_ROW==1)
	  png_error(png_ptr, "Uninitialized row");
#else
	  png_warning(png_ptr, "Uninitialized row");
#endif
#endif

#if defined(PNG_READ_EXPAND_SUPPORTED)
   if (png_ptr->transformations & PNG_EXPAND)
   {
	  if (png_ptr->row_info.color_type == PNG_COLOR_TYPE_PALETTE)
	  {
		 png_do_expand_palette(&(png_ptr->row_info), png_ptr->row_buf + 1,
			png_ptr->palette, png_ptr->trans, png_ptr->num_trans);
	  }
	  else
	  {
		 if (png_ptr->num_trans &&
			 (png_ptr->transformations & PNG_EXPAND_tRNS))
			png_do_expand(&(png_ptr->row_info), png_ptr->row_buf + 1,
			   &(png_ptr->trans_values));
		 else
			png_do_expand(&(png_ptr->row_info), png_ptr->row_buf + 1,
			   NULL);
	  }
   }
#endif

#if defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
   if (png_ptr->flags & PNG_FLAG_STRIP_ALPHA)
	  png_do_strip_filler(&(png_ptr->row_info), png_ptr->row_buf + 1,
		 PNG_FLAG_FILLER_AFTER | (png_ptr->flags & PNG_FLAG_STRIP_ALPHA));
#endif

#if defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
   if (png_ptr->transformations & PNG_RGB_TO_GRAY)
   {
	  int rgb_error =
		 png_do_rgb_to_gray(png_ptr, &(png_ptr->row_info), png_ptr->row_buf + 1);
	  if(rgb_error)
	  {
		 png_ptr->rgb_to_gray_status=1;
		 if((png_ptr->transformations & PNG_RGB_TO_GRAY) ==
			 PNG_RGB_TO_GRAY_WARN)
			png_warning(png_ptr, "png_do_rgb_to_gray found nongray pixel");
		 if((png_ptr->transformations & PNG_RGB_TO_GRAY) ==
			 PNG_RGB_TO_GRAY_ERR)
			png_error(png_ptr, "png_do_rgb_to_gray found nongray pixel");
	  }
   }
#endif

/*
From Andreas Dilger e-mail to png-implement, 26 March 1998:

  In most cases, the "simple transparency" should be done prior to doing
  gray-to-RGB, or you will have to test 3x as many bytes to check if a
  pixel is transparent.  You would also need to make sure that the
  transparency information is upgraded to RGB.

  To summarize, the current flow is:
  - Gray + simple transparency -> compare 1 or 2 gray bytes and composite
								  with background "in place" if transparent,
								  convert to RGB if necessary
  - Gray + alpha -> composite with gray background and remove alpha bytes,
								  convert to RGB if necessary

  To support RGB backgrounds for gray images we need:
  - Gray + simple transparency -> convert to RGB + simple transparency, compare
								  3 or 6 bytes and composite with background
								  "in place" if transparent (3x compare/pixel
								  compared to doing composite with gray bkgrnd)
  - Gray + alpha -> convert to RGB + alpha, composite with background and
								  remove alpha bytes (3x float operations/pixel
								  compared with composite on gray background)

  Greg's change will do this.  The reason it wasn't done before is for
  performance, as this increases the per-pixel operations.  If we would check
  in advance if the background was gray or RGB, and position the gray-to-RGB
  transform appropriately, then it would save a lot of work/time.
 */

#if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
   /* if gray -> RGB, do so now only if background is non-gray; else do later
	* for performance reasons */
   if ((png_ptr->transformations & PNG_GRAY_TO_RGB) &&
	   !(png_ptr->mode & PNG_BACKGROUND_IS_GRAY))
	  png_do_gray_to_rgb(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif

#if defined(PNG_READ_BACKGROUND_SUPPORTED)
   if ((png_ptr->transformations & PNG_BACKGROUND) &&
	  ((png_ptr->num_trans != 0 ) ||
	  (png_ptr->color_type & PNG_COLOR_MASK_ALPHA)))
	  png_do_background(&(png_ptr->row_info), png_ptr->row_buf + 1,
		 &(png_ptr->trans_values), &(png_ptr->background)
#if defined(PNG_READ_GAMMA_SUPPORTED)
		 , &(png_ptr->background_1),
		 png_ptr->gamma_table, png_ptr->gamma_from_1,
		 png_ptr->gamma_to_1, png_ptr->gamma_16_table,
		 png_ptr->gamma_16_from_1, png_ptr->gamma_16_to_1,
		 png_ptr->gamma_shift
#endif
);
#endif

#if defined(PNG_READ_GAMMA_SUPPORTED)
   if ((png_ptr->transformations & PNG_GAMMA) &&
#if defined(PNG_READ_BACKGROUND_SUPPORTED)
	  !((png_ptr->transformations & PNG_BACKGROUND) &&
	  ((png_ptr->num_trans != 0) ||
	  (png_ptr->color_type & PNG_COLOR_MASK_ALPHA))) &&
#endif
	  (png_ptr->color_type != PNG_COLOR_TYPE_PALETTE))
	  png_do_gamma(&(png_ptr->row_info), png_ptr->row_buf + 1,
		 png_ptr->gamma_table, png_ptr->gamma_16_table,
		 png_ptr->gamma_shift);
#endif

#if defined(PNG_READ_16_TO_8_SUPPORTED)
   if (png_ptr->transformations & PNG_16_TO_8)
	  png_do_chop(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif

#if defined(PNG_READ_DITHER_SUPPORTED)
   if (png_ptr->transformations & PNG_DITHER)
   {
	  png_do_dither((png_row_infop)&(png_ptr->row_info), png_ptr->row_buf + 1,
		 png_ptr->palette_lookup, png_ptr->dither_index);
	  if(png_ptr->row_info.rowbytes == (png_uint_32)0)
		 png_error(png_ptr, "png_do_dither returned rowbytes=0");
   }
#endif

#if defined(PNG_READ_INVERT_SUPPORTED)
   if (png_ptr->transformations & PNG_INVERT_MONO)
	  png_do_invert(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif

#if defined(PNG_READ_SHIFT_SUPPORTED)
   if (png_ptr->transformations & PNG_SHIFT)
	  png_do_unshift(&(png_ptr->row_info), png_ptr->row_buf + 1,
		 &(png_ptr->shift));
#endif

#if defined(PNG_READ_PACK_SUPPORTED)
   if (png_ptr->transformations & PNG_PACK)
	  png_do_unpack(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif

#if defined(PNG_READ_BGR_SUPPORTED)
   if (png_ptr->transformations & PNG_BGR)
	  png_do_bgr(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif

#if defined(PNG_READ_PACKSWAP_SUPPORTED)
   if (png_ptr->transformations & PNG_PACKSWAP)
	  png_do_packswap(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif

#if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
   /* if gray -> RGB, do so now only if we did not do so above */
   if ((png_ptr->transformations & PNG_GRAY_TO_RGB) &&
	   (png_ptr->mode & PNG_BACKGROUND_IS_GRAY))
	  png_do_gray_to_rgb(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif

#if defined(PNG_READ_FILLER_SUPPORTED)
   if (png_ptr->transformations & PNG_FILLER)
	  png_do_read_filler(&(png_ptr->row_info), png_ptr->row_buf + 1,
		 (png_uint_32)png_ptr->filler, png_ptr->flags);
#endif

#if defined(PNG_READ_INVERT_ALPHA_SUPPORTED)
   if (png_ptr->transformations & PNG_INVERT_ALPHA)
	  png_do_read_invert_alpha(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif

#if defined(PNG_READ_SWAP_ALPHA_SUPPORTED)
   if (png_ptr->transformations & PNG_SWAP_ALPHA)
	  png_do_read_swap_alpha(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif

#if defined(PNG_READ_SWAP_SUPPORTED)
   if (png_ptr->transformations & PNG_SWAP_BYTES)
	  png_do_swap(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif

#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED)
   if (png_ptr->transformations & PNG_USER_TRANSFORM)
	{
	  if(png_ptr->read_user_transform_fn != NULL)
		(*(png_ptr->read_user_transform_fn)) /* user read transform function */
		  (png_ptr,                    /* png_ptr */
		   &(png_ptr->row_info),       /* row_info:     */
			 /*  png_uint_32 width;          width of row */
			 /*  png_uint_32 rowbytes;       number of bytes in row */
			 /*  png_byte color_type;        color type of pixels */
			 /*  png_byte bit_depth;         bit depth of samples */
			 /*  png_byte channels;          number of channels (1-4) */
			 /*  png_byte pixel_depth;       bits per pixel (depth*channels) */
		   png_ptr->row_buf + 1);      /* start of pixel data for row */
#if defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
	  if(png_ptr->user_transform_depth)
		 png_ptr->row_info.bit_depth = png_ptr->user_transform_depth;
	  if(png_ptr->user_transform_channels)
		 png_ptr->row_info.channels = png_ptr->user_transform_channels;
#endif
	  png_ptr->row_info.pixel_depth = (png_byte)(png_ptr->row_info.bit_depth *
		 png_ptr->row_info.channels);
	  png_ptr->row_info.rowbytes = PNG_ROWBYTES(png_ptr->row_info.pixel_depth,
		 png_ptr->row_info.width);
   }
#endif

}

#if defined(PNG_READ_PACK_SUPPORTED)
/* Unpack pixels of 1, 2, or 4 bits per pixel into 1 byte per pixel,
 * without changing the actual values.  Thus, if you had a row with
 * a bit depth of 1, you would end up with bytes that only contained
 * the numbers 0 or 1.  If you would rather they contain 0 and 255, use
 * png_do_shift() after this.
 */
void /* PRIVATE */
png_do_unpack(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_unpack\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL && row_info->bit_depth < 8)
#else
   if (row_info->bit_depth < 8)
#endif
   {
	  png_uint_32 i;
	  png_uint_32 row_width=row_info->width;

	  switch (row_info->bit_depth)
	  {
		 case 1:
		 {
			png_bytep sp = row + (png_size_t)((row_width - 1) >> 3);
			png_bytep dp = row + (png_size_t)row_width - 1;
			png_uint_32 shift = 7 - (int)((row_width + 7) & 0x07);
			for (i = 0; i < row_width; i++)
			{
			   *dp = (png_byte)((*sp >> shift) & 0x01);
			   if (shift == 7)
			   {
				  shift = 0;
				  sp--;
			   }
			   else
				  shift++;

			   dp--;
			}
			break;
		 }
		 case 2:
		 {

			png_bytep sp = row + (png_size_t)((row_width - 1) >> 2);
			png_bytep dp = row + (png_size_t)row_width - 1;
			png_uint_32 shift = (int)((3 - ((row_width + 3) & 0x03)) << 1);
			for (i = 0; i < row_width; i++)
			{
			   *dp = (png_byte)((*sp >> shift) & 0x03);
			   if (shift == 6)
			   {
				  shift = 0;
				  sp--;
			   }
			   else
				  shift += 2;

			   dp--;
			}
			break;
		 }
		 case 4:
		 {
			png_bytep sp = row + (png_size_t)((row_width - 1) >> 1);
			png_bytep dp = row + (png_size_t)row_width - 1;
			png_uint_32 shift = (int)((1 - ((row_width + 1) & 0x01)) << 2);
			for (i = 0; i < row_width; i++)
			{
			   *dp = (png_byte)((*sp >> shift) & 0x0f);
			   if (shift == 4)
			   {
				  shift = 0;
				  sp--;
			   }
			   else
				  shift = 4;

			   dp--;
			}
			break;
		 }
	  }
	  row_info->bit_depth = 8;
	  row_info->pixel_depth = (png_byte)(8 * row_info->channels);
	  row_info->rowbytes = row_width * row_info->channels;
   }
}
#endif

#if defined(PNG_READ_SHIFT_SUPPORTED)
/* Reverse the effects of png_do_shift.  This routine merely shifts the
 * pixels back to their significant bits values.  Thus, if you have
 * a row of bit depth 8, but only 5 are significant, this will shift
 * the values back to 0 through 31.
 */
void /* PRIVATE */
png_do_unshift(png_row_infop row_info, png_bytep row, png_color_8p sig_bits)
{
   png_debug(1, "in png_do_unshift\n");
   if (
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL && sig_bits != NULL &&
#endif
	   row_info->color_type != PNG_COLOR_TYPE_PALETTE)
   {
	  int shift[4];
	  int channels = 0;
	  int c;
	  png_uint_16 value = 0;
	  png_uint_32 row_width = row_info->width;

	  if (row_info->color_type & PNG_COLOR_MASK_COLOR)
	  {
		 shift[channels++] = row_info->bit_depth - sig_bits->red;
		 shift[channels++] = row_info->bit_depth - sig_bits->green;
		 shift[channels++] = row_info->bit_depth - sig_bits->blue;
	  }
	  else
	  {
		 shift[channels++] = row_info->bit_depth - sig_bits->gray;
	  }
	  if (row_info->color_type & PNG_COLOR_MASK_ALPHA)
	  {
		 shift[channels++] = row_info->bit_depth - sig_bits->alpha;
	  }

	  for (c = 0; c < channels; c++)
	  {
		 if (shift[c] <= 0)
			shift[c] = 0;
		 else
			value = 1;
	  }

	  if (!value)
		 return;

	  switch (row_info->bit_depth)
	  {
		 case 2:
		 {
			png_bytep bp;
			png_uint_32 i;
			png_uint_32 istop = row_info->rowbytes;

			for (bp = row, i = 0; i < istop; i++)
			{
			   *bp >>= 1;
			   *bp++ &= 0x55;
			}
			break;
		 }
		 case 4:
		 {
			png_bytep bp = row;
			png_uint_32 i;
			png_uint_32 istop = row_info->rowbytes;
			png_byte mask = (png_byte)((((int)0xf0 >> shift[0]) & (int)0xf0) |
			   (png_byte)((int)0xf >> shift[0]));

			for (i = 0; i < istop; i++)
			{
			   *bp >>= shift[0];
			   *bp++ &= mask;
			}
			break;
		 }
		 case 8:
		 {
			png_bytep bp = row;
			png_uint_32 i;
			png_uint_32 istop = row_width * channels;

			for (i = 0; i < istop; i++)
			{
			   *bp++ >>= shift[i%channels];
			}
			break;
		 }
		 case 16:
		 {
			png_bytep bp = row;
			png_uint_32 i;
			png_uint_32 istop = channels * row_width;

			for (i = 0; i < istop; i++)
			{
			   value = (png_uint_16)((*bp << 8) + *(bp + 1));
			   value >>= shift[i%channels];
			   *bp++ = (png_byte)(value >> 8);
			   *bp++ = (png_byte)(value & 0xff);
			}
			break;
		 }
	  }
   }
}
#endif

#if defined(PNG_READ_16_TO_8_SUPPORTED)
/* chop rows of bit depth 16 down to 8 */
void /* PRIVATE */
png_do_chop(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_chop\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL && row_info->bit_depth == 16)
#else
   if (row_info->bit_depth == 16)
#endif
   {
	  png_bytep sp = row;
	  png_bytep dp = row;
	  png_uint_32 i;
	  png_uint_32 istop = row_info->width * row_info->channels;

	  for (i = 0; i<istop; i++, sp += 2, dp++)
	  {
#if defined(PNG_READ_16_TO_8_ACCURATE_SCALE_SUPPORTED)
	  /* This does a more accurate scaling of the 16-bit color
	   * value, rather than a simple low-byte truncation.
	   *
	   * What the ideal calculation should be:
	   *   *dp = (((((png_uint_32)(*sp) << 8) |
	   *          (png_uint_32)(*(sp + 1))) * 255 + 127) / (png_uint_32)65535L;
	   *
	   * GRR: no, I think this is what it really should be:
	   *   *dp = (((((png_uint_32)(*sp) << 8) |
	   *           (png_uint_32)(*(sp + 1))) + 128L) / (png_uint_32)257L;
	   *
	   * GRR: here's the exact calculation with shifts:
	   *   temp = (((png_uint_32)(*sp) << 8) | (png_uint_32)(*(sp + 1))) + 128L;
	   *   *dp = (temp - (temp >> 8)) >> 8;
	   *
	   * Approximate calculation with shift/add instead of multiply/divide:
	   *   *dp = ((((png_uint_32)(*sp) << 8) |
	   *          (png_uint_32)((int)(*(sp + 1)) - *sp)) + 128) >> 8;
	   *
	   * What we actually do to avoid extra shifting and conversion:
	   */

		 *dp = *sp + ((((int)(*(sp + 1)) - *sp) > 128) ? 1 : 0);
#else
	   /* Simply discard the low order byte */
		 *dp = *sp;
#endif
	  }
	  row_info->bit_depth = 8;
	  row_info->pixel_depth = (png_byte)(8 * row_info->channels);
	  row_info->rowbytes = row_info->width * row_info->channels;
   }
}
#endif

#if defined(PNG_READ_SWAP_ALPHA_SUPPORTED)
void /* PRIVATE */
png_do_read_swap_alpha(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_read_swap_alpha\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL)
#endif
   {
	  png_uint_32 row_width = row_info->width;
	  if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
	  {
		 /* This converts from RGBA to ARGB */
		 if (row_info->bit_depth == 8)
		 {
			png_bytep sp = row + row_info->rowbytes;
			png_bytep dp = sp;
			png_byte save;
			png_uint_32 i;

			for (i = 0; i < row_width; i++)
			{
			   save = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = save;
			}
		 }
		 /* This converts from RRGGBBAA to AARRGGBB */
		 else
		 {
			png_bytep sp = row + row_info->rowbytes;
			png_bytep dp = sp;
			png_byte save[2];
			png_uint_32 i;

			for (i = 0; i < row_width; i++)
			{
			   save[0] = *(--sp);
			   save[1] = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = save[0];
			   *(--dp) = save[1];
			}
		 }
	  }
	  else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
	  {
		 /* This converts from GA to AG */
		 if (row_info->bit_depth == 8)
		 {
			png_bytep sp = row + row_info->rowbytes;
			png_bytep dp = sp;
			png_byte save;
			png_uint_32 i;

			for (i = 0; i < row_width; i++)
			{
			   save = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = save;
			}
		 }
		 /* This converts from GGAA to AAGG */
		 else
		 {
			png_bytep sp = row + row_info->rowbytes;
			png_bytep dp = sp;
			png_byte save[2];
			png_uint_32 i;

			for (i = 0; i < row_width; i++)
			{
			   save[0] = *(--sp);
			   save[1] = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = save[0];
			   *(--dp) = save[1];
			}
		 }
	  }
   }
}
#endif

#if defined(PNG_READ_INVERT_ALPHA_SUPPORTED)
void /* PRIVATE */
png_do_read_invert_alpha(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_read_invert_alpha\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL)
#endif
   {
	  png_uint_32 row_width = row_info->width;
	  if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
	  {
		 /* This inverts the alpha channel in RGBA */
		 if (row_info->bit_depth == 8)
		 {
			png_bytep sp = row + row_info->rowbytes;
			png_bytep dp = sp;
			png_uint_32 i;

			for (i = 0; i < row_width; i++)
			{
			   *(--dp) = (png_byte)(255 - *(--sp));

/*             This does nothing:
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   We can replace it with:
*/
			   sp-=3;
			   dp=sp;
			}
		 }
		 /* This inverts the alpha channel in RRGGBBAA */
		 else
		 {
			png_bytep sp = row + row_info->rowbytes;
			png_bytep dp = sp;
			png_uint_32 i;

			for (i = 0; i < row_width; i++)
			{
			   *(--dp) = (png_byte)(255 - *(--sp));
			   *(--dp) = (png_byte)(255 - *(--sp));

/*             This does nothing:
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   We can replace it with:
*/
			   sp-=6;
			   dp=sp;
			}
		 }
	  }
	  else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
	  {
		 /* This inverts the alpha channel in GA */
		 if (row_info->bit_depth == 8)
		 {
			png_bytep sp = row + row_info->rowbytes;
			png_bytep dp = sp;
			png_uint_32 i;

			for (i = 0; i < row_width; i++)
			{
			   *(--dp) = (png_byte)(255 - *(--sp));
			   *(--dp) = *(--sp);
			}
		 }
		 /* This inverts the alpha channel in GGAA */
		 else
		 {
			png_bytep sp  = row + row_info->rowbytes;
			png_bytep dp = sp;
			png_uint_32 i;

			for (i = 0; i < row_width; i++)
			{
			   *(--dp) = (png_byte)(255 - *(--sp));
			   *(--dp) = (png_byte)(255 - *(--sp));
/*
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
*/
			   sp-=2;
			   dp=sp;
			}
		 }
	  }
   }
}
#endif

#if defined(PNG_READ_FILLER_SUPPORTED)
/* Add filler channel if we have RGB color */
void /* PRIVATE */
png_do_read_filler(png_row_infop row_info, png_bytep row,
   png_uint_32 filler, png_uint_32 flags)
{
   png_uint_32 i;
   png_uint_32 row_width = row_info->width;

   png_byte hi_filler = (png_byte)((filler>>8) & 0xff);
   png_byte lo_filler = (png_byte)(filler & 0xff);

   png_debug(1, "in png_do_read_filler\n");
   if (
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL  && row_info != NULL &&
#endif
	   row_info->color_type == PNG_COLOR_TYPE_GRAY)
   {
	  if(row_info->bit_depth == 8)
	  {
		 /* This changes the data from G to GX */
		 if (flags & PNG_FLAG_FILLER_AFTER)
		 {
			png_bytep sp = row + (png_size_t)row_width;
			png_bytep dp =  sp + (png_size_t)row_width;
			for (i = 1; i < row_width; i++)
			{
			   *(--dp) = lo_filler;
			   *(--dp) = *(--sp);
			}
			*(--dp) = lo_filler;
			row_info->channels = 2;
			row_info->pixel_depth = 16;
			row_info->rowbytes = row_width * 2;
		 }
	  /* This changes the data from G to XG */
		 else
		 {
			png_bytep sp = row + (png_size_t)row_width;
			png_bytep dp = sp  + (png_size_t)row_width;
			for (i = 0; i < row_width; i++)
			{
			   *(--dp) = *(--sp);
			   *(--dp) = lo_filler;
			}
			row_info->channels = 2;
			row_info->pixel_depth = 16;
			row_info->rowbytes = row_width * 2;
		 }
	  }
	  else if(row_info->bit_depth == 16)
	  {
		 /* This changes the data from GG to GGXX */
		 if (flags & PNG_FLAG_FILLER_AFTER)
		 {
			png_bytep sp = row + (png_size_t)row_width * 2;
			png_bytep dp = sp  + (png_size_t)row_width * 2;
			for (i = 1; i < row_width; i++)
			{
			   *(--dp) = hi_filler;
			   *(--dp) = lo_filler;
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			}
			*(--dp) = hi_filler;
			*(--dp) = lo_filler;
			row_info->channels = 2;
			row_info->pixel_depth = 32;
			row_info->rowbytes = row_width * 4;
		 }
		 /* This changes the data from GG to XXGG */
		 else
		 {
			png_bytep sp = row + (png_size_t)row_width * 2;
			png_bytep dp = sp  + (png_size_t)row_width * 2;
			for (i = 0; i < row_width; i++)
			{
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = hi_filler;
			   *(--dp) = lo_filler;
			}
			row_info->channels = 2;
			row_info->pixel_depth = 32;
			row_info->rowbytes = row_width * 4;
		 }
	  }
   } /* COLOR_TYPE == GRAY */
   else if (row_info->color_type == PNG_COLOR_TYPE_RGB)
   {
	  if(row_info->bit_depth == 8)
	  {
		 /* This changes the data from RGB to RGBX */
		 if (flags & PNG_FLAG_FILLER_AFTER)
		 {
			png_bytep sp = row + (png_size_t)row_width * 3;
			png_bytep dp = sp  + (png_size_t)row_width;
			for (i = 1; i < row_width; i++)
			{
			   *(--dp) = lo_filler;
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			}
			*(--dp) = lo_filler;
			row_info->channels = 4;
			row_info->pixel_depth = 32;
			row_info->rowbytes = row_width * 4;
		 }
	  /* This changes the data from RGB to XRGB */
		 else
		 {
			png_bytep sp = row + (png_size_t)row_width * 3;
			png_bytep dp = sp + (png_size_t)row_width;
			for (i = 0; i < row_width; i++)
			{
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = lo_filler;
			}
			row_info->channels = 4;
			row_info->pixel_depth = 32;
			row_info->rowbytes = row_width * 4;
		 }
	  }
	  else if(row_info->bit_depth == 16)
	  {
		 /* This changes the data from RRGGBB to RRGGBBXX */
		 if (flags & PNG_FLAG_FILLER_AFTER)
		 {
			png_bytep sp = row + (png_size_t)row_width * 6;
			png_bytep dp = sp  + (png_size_t)row_width * 2;
			for (i = 1; i < row_width; i++)
			{
			   *(--dp) = hi_filler;
			   *(--dp) = lo_filler;
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			}
			*(--dp) = hi_filler;
			*(--dp) = lo_filler;
			row_info->channels = 4;
			row_info->pixel_depth = 64;
			row_info->rowbytes = row_width * 8;
		 }
		 /* This changes the data from RRGGBB to XXRRGGBB */
		 else
		 {
			png_bytep sp = row + (png_size_t)row_width * 6;
			png_bytep dp = sp  + (png_size_t)row_width * 2;
			for (i = 0; i < row_width; i++)
			{
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = *(--sp);
			   *(--dp) = hi_filler;
			   *(--dp) = lo_filler;
			}
			row_info->channels = 4;
			row_info->pixel_depth = 64;
			row_info->rowbytes = row_width * 8;
		 }
	  }
   } /* COLOR_TYPE == RGB */
}
#endif

#if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
/* expand grayscale files to RGB, with or without alpha */
void /* PRIVATE */
png_do_gray_to_rgb(png_row_infop row_info, png_bytep row)
{
   png_uint_32 i;
   png_uint_32 row_width = row_info->width;

   png_debug(1, "in png_do_gray_to_rgb\n");
   if (row_info->bit_depth >= 8 &&
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL &&
#endif
	  !(row_info->color_type & PNG_COLOR_MASK_COLOR))
   {
	  if (row_info->color_type == PNG_COLOR_TYPE_GRAY)
	  {
		 if (row_info->bit_depth == 8)
		 {
			png_bytep sp = row + (png_size_t)row_width - 1;
			png_bytep dp = sp  + (png_size_t)row_width * 2;
			for (i = 0; i < row_width; i++)
			{
			   *(dp--) = *sp;
			   *(dp--) = *sp;
			   *(dp--) = *(sp--);
			}
		 }
		 else
		 {
			png_bytep sp = row + (png_size_t)row_width * 2 - 1;
			png_bytep dp = sp  + (png_size_t)row_width * 4;
			for (i = 0; i < row_width; i++)
			{
			   *(dp--) = *sp;
			   *(dp--) = *(sp - 1);
			   *(dp--) = *sp;
			   *(dp--) = *(sp - 1);
			   *(dp--) = *(sp--);
			   *(dp--) = *(sp--);
			}
		 }
	  }
	  else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
	  {
		 if (row_info->bit_depth == 8)
		 {
			png_bytep sp = row + (png_size_t)row_width * 2 - 1;
			png_bytep dp = sp  + (png_size_t)row_width * 2;
			for (i = 0; i < row_width; i++)
			{
			   *(dp--) = *(sp--);
			   *(dp--) = *sp;
			   *(dp--) = *sp;
			   *(dp--) = *(sp--);
			}
		 }
		 else
		 {
			png_bytep sp = row + (png_size_t)row_width * 4 - 1;
			png_bytep dp = sp  + (png_size_t)row_width * 4;
			for (i = 0; i < row_width; i++)
			{
			   *(dp--) = *(sp--);
			   *(dp--) = *(sp--);
			   *(dp--) = *sp;
			   *(dp--) = *(sp - 1);
			   *(dp--) = *sp;
			   *(dp--) = *(sp - 1);
			   *(dp--) = *(sp--);
			   *(dp--) = *(sp--);
			}
		 }
	  }
	  row_info->channels += (png_byte)2;
	  row_info->color_type |= PNG_COLOR_MASK_COLOR;
	  row_info->pixel_depth = (png_byte)(row_info->channels *
		 row_info->bit_depth);
	  row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
   }
}
#endif

#if defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
/* reduce RGB files to grayscale, with or without alpha
 * using the equation given in Poynton's ColorFAQ at
 * <http://www.inforamp.net/~poynton/>
 * Copyright (c) 1998-01-04 Charles Poynton poynton at inforamp.net
 *
 *     Y = 0.212671 * R + 0.715160 * G + 0.072169 * B
 *
 *  We approximate this with
 *
 *     Y = 0.21268 * R    + 0.7151 * G    + 0.07217 * B
 *
 *  which can be expressed with integers as
 *
 *     Y = (6969 * R + 23434 * G + 2365 * B)/32768
 *
 *  The calculation is to be done in a linear colorspace.
 *
 *  Other integer coefficents can be used via png_set_rgb_to_gray().
 */
int /* PRIVATE */
png_do_rgb_to_gray(png_structp png_ptr, png_row_infop row_info, png_bytep row)

{
   png_uint_32 i;

   png_uint_32 row_width = row_info->width;
   int rgb_error = 0;

   png_debug(1, "in png_do_rgb_to_gray\n");
   if (
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL &&
#endif
	  (row_info->color_type & PNG_COLOR_MASK_COLOR))
   {
	  png_uint_32 rc = png_ptr->rgb_to_gray_red_coeff;
	  png_uint_32 gc = png_ptr->rgb_to_gray_green_coeff;
	  png_uint_32 bc = png_ptr->rgb_to_gray_blue_coeff;

	  if (row_info->color_type == PNG_COLOR_TYPE_RGB)
	  {
		 if (row_info->bit_depth == 8)
		 {
#if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
			if (png_ptr->gamma_from_1 != NULL && png_ptr->gamma_to_1 != NULL)
			{
			   png_bytep sp = row;
			   png_bytep dp = row;

			   for (i = 0; i < row_width; i++)
			   {
				  png_byte red   = png_ptr->gamma_to_1[*(sp++)];
				  png_byte green = png_ptr->gamma_to_1[*(sp++)];
				  png_byte blue  = png_ptr->gamma_to_1[*(sp++)];
				  if(red != green || red != blue)
				  {
					 rgb_error |= 1;
					 *(dp++) = png_ptr->gamma_from_1[
					   (rc*red+gc*green+bc*blue)>>15];
				  }
				  else
					 *(dp++) = *(sp-1);
			   }
			}
			else
#endif
			{
			   png_bytep sp = row;
			   png_bytep dp = row;
			   for (i = 0; i < row_width; i++)
			   {
				  png_byte red   = *(sp++);
				  png_byte green = *(sp++);
				  png_byte blue  = *(sp++);
				  if(red != green || red != blue)
				  {
					 rgb_error |= 1;
					 *(dp++) = (png_byte)((rc*red+gc*green+bc*blue)>>15);
				  }
				  else
					 *(dp++) = *(sp-1);
			   }
			}
		 }

		 else /* RGB bit_depth == 16 */
		 {
#if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
			if (png_ptr->gamma_16_to_1 != NULL &&
				png_ptr->gamma_16_from_1 != NULL)
			{
			   png_bytep sp = row;
			   png_bytep dp = row;
			   for (i = 0; i < row_width; i++)
			   {
				  png_uint_16 red, green, blue, w;

				  red   = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
				  green = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
				  blue  = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;

				  if(red == green && red == blue)
					 w = red;
				  else
				  {
					 png_uint_16 red_1   = png_ptr->gamma_16_to_1[(red&0xff) >>
								  png_ptr->gamma_shift][red>>8];
					 png_uint_16 green_1 = png_ptr->gamma_16_to_1[(green&0xff) >>
								  png_ptr->gamma_shift][green>>8];
					 png_uint_16 blue_1  = png_ptr->gamma_16_to_1[(blue&0xff) >>
								  png_ptr->gamma_shift][blue>>8];
					 png_uint_16 gray16  = (png_uint_16)((rc*red_1 + gc*green_1
								  + bc*blue_1)>>15);
					 w = png_ptr->gamma_16_from_1[(gray16&0xff) >>
						 png_ptr->gamma_shift][gray16 >> 8];
					 rgb_error |= 1;
				  }

				  *(dp++) = (png_byte)((w>>8) & 0xff);
				  *(dp++) = (png_byte)(w & 0xff);
			   }
			}
			else
#endif
			{
			   png_bytep sp = row;
			   png_bytep dp = row;
			   for (i = 0; i < row_width; i++)
			   {
				  png_uint_16 red, green, blue, gray16;

				  red   = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
				  green = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
				  blue  = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;

				  if(red != green || red != blue)
					 rgb_error |= 1;
				  gray16  = (png_uint_16)((rc*red + gc*green + bc*blue)>>15);
				  *(dp++) = (png_byte)((gray16>>8) & 0xff);
				  *(dp++) = (png_byte)(gray16 & 0xff);
			   }
			}
		 }
	  }
	  if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
	  {
		 if (row_info->bit_depth == 8)
		 {
#if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
			if (png_ptr->gamma_from_1 != NULL && png_ptr->gamma_to_1 != NULL)
			{
			   png_bytep sp = row;
			   png_bytep dp = row;
			   for (i = 0; i < row_width; i++)
			   {
				  png_byte red   = png_ptr->gamma_to_1[*(sp++)];
				  png_byte green = png_ptr->gamma_to_1[*(sp++)];
				  png_byte blue  = png_ptr->gamma_to_1[*(sp++)];
				  if(red != green || red != blue)
					 rgb_error |= 1;
				  *(dp++) =  png_ptr->gamma_from_1
							 [(rc*red + gc*green + bc*blue)>>15];
				  *(dp++) = *(sp++);  /* alpha */
			   }
			}
			else
#endif
			{
			   png_bytep sp = row;
			   png_bytep dp = row;
			   for (i = 0; i < row_width; i++)
			   {
				  png_byte red   = *(sp++);
				  png_byte green = *(sp++);
				  png_byte blue  = *(sp++);
				  if(red != green || red != blue)
					 rgb_error |= 1;
				  *(dp++) =  (png_byte)((rc*red + gc*green + bc*blue)>>15);
				  *(dp++) = *(sp++);  /* alpha */
			   }
			}
		 }
		 else /* RGBA bit_depth == 16 */
		 {
#if defined(PNG_READ_GAMMA_SUPPORTED) || defined(PNG_READ_BACKGROUND_SUPPORTED)
			if (png_ptr->gamma_16_to_1 != NULL &&
				png_ptr->gamma_16_from_1 != NULL)
			{
			   png_bytep sp = row;
			   png_bytep dp = row;
			   for (i = 0; i < row_width; i++)
			   {
				  png_uint_16 red, green, blue, w;

				  red   = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
				  green = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;
				  blue  = (png_uint_16)(((*(sp))<<8) | *(sp+1)); sp+=2;

				  if(red == green && red == blue)
					 w = red;
				  else
				  {
					 png_uint_16 red_1   = png_ptr->gamma_16_to_1[(red&0xff) >>
								  png_ptr->gamma_shift][red>>8];
					 png_uint_16 green_1 = png_ptr->gamma_16_to_1[(green&0xff) >>
								  png_ptr->gamma_shift][green>>8];
					 png_uint_16 blue_1  = png_ptr->gamma_16_to_1[(blue&0xff) >>
								  png_ptr->gamma_shift][blue>>8];
					 png_uint_16 gray16  = (png_uint_16)((rc * red_1
								  + gc * green_1 + bc * blue_1)>>15);
					 w = png_ptr->gamma_16_from_1[(gray16&0xff) >>
						 png_ptr->gamma_shift][gray16 >> 8];
					 rgb_error |= 1;
				  }

				  *(dp++) = (png_byte)((w>>8) & 0xff);
				  *(dp++) = (png_byte)(w & 0xff);
				  *(dp++) = *(sp++);  /* alpha */
				  *(dp++) = *(sp++);
			   }
			}
			else
#endif
			{
			   png_bytep sp = row;
			   png_bytep dp = row;
			   for (i = 0; i < row_width; i++)
			   {
				  png_uint_16 red, green, blue, gray16;
				  red   = (png_uint_16)((*(sp)<<8) | *(sp+1)); sp+=2;
				  green = (png_uint_16)((*(sp)<<8) | *(sp+1)); sp+=2;
				  blue  = (png_uint_16)((*(sp)<<8) | *(sp+1)); sp+=2;
				  if(red != green || red != blue)
					 rgb_error |= 1;
				  gray16  = (png_uint_16)((rc*red + gc*green + bc*blue)>>15);
				  *(dp++) = (png_byte)((gray16>>8) & 0xff);
				  *(dp++) = (png_byte)(gray16 & 0xff);
				  *(dp++) = *(sp++);  /* alpha */
				  *(dp++) = *(sp++);
			   }
			}
		 }
	  }
   row_info->channels -= (png_byte)2;
	  row_info->color_type &= ~PNG_COLOR_MASK_COLOR;
	  row_info->pixel_depth = (png_byte)(row_info->channels *
		 row_info->bit_depth);
	  row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
   }
   return rgb_error;
}
#endif

/* Build a grayscale palette.  Palette is assumed to be 1 << bit_depth
 * large of png_color.  This lets grayscale images be treated as
 * paletted.  Most useful for gamma correction and simplification
 * of code.
 */
void PNGAPI
png_build_grayscale_palette(int bit_depth, png_colorp palette)
{
   int num_palette;
   int color_inc;
   int i;
   int v;

   png_debug(1, "in png_do_build_grayscale_palette\n");
   if (palette == NULL)
	  return;

   switch (bit_depth)
   {
	  case 1:
		 num_palette = 2;
		 color_inc = 0xff;
		 break;
	  case 2:
		 num_palette = 4;
		 color_inc = 0x55;
		 break;
	  case 4:
		 num_palette = 16;
		 color_inc = 0x11;
		 break;
	  case 8:
		 num_palette = 256;
		 color_inc = 1;
		 break;
	  default:
		 num_palette = 0;
		 color_inc = 0;
		 break;
   }

   for (i = 0, v = 0; i < num_palette; i++, v += color_inc)
   {
	  palette[i].red = (png_byte)v;
	  palette[i].green = (png_byte)v;
	  palette[i].blue = (png_byte)v;
   }
}

/* This function is currently unused.  Do we really need it? */
#if defined(PNG_READ_DITHER_SUPPORTED) && defined(PNG_CORRECT_PALETTE_SUPPORTED)
void /* PRIVATE */
png_correct_palette(png_structp png_ptr, png_colorp palette,
   int num_palette)
{
   png_debug(1, "in png_correct_palette\n");
#if defined(PNG_READ_BACKGROUND_SUPPORTED) && \
	defined(PNG_READ_GAMMA_SUPPORTED) && defined(PNG_FLOATING_POINT_SUPPORTED)
   if (png_ptr->transformations & (PNG_GAMMA | PNG_BACKGROUND))
   {
	  png_color back, back_1;

	  if (png_ptr->background_gamma_type == PNG_BACKGROUND_GAMMA_FILE)
	  {
		 back.red = png_ptr->gamma_table[png_ptr->background.red];
		 back.green = png_ptr->gamma_table[png_ptr->background.green];
		 back.blue = png_ptr->gamma_table[png_ptr->background.blue];

		 back_1.red = png_ptr->gamma_to_1[png_ptr->background.red];
		 back_1.green = png_ptr->gamma_to_1[png_ptr->background.green];
		 back_1.blue = png_ptr->gamma_to_1[png_ptr->background.blue];
	  }
	  else
	  {
		 double g;

		 g = 1.0 / (png_ptr->background_gamma * png_ptr->screen_gamma);

		 if (png_ptr->background_gamma_type == PNG_BACKGROUND_GAMMA_SCREEN ||
			 fabs(g - 1.0) < PNG_GAMMA_THRESHOLD)
		 {
			back.red = png_ptr->background.red;
			back.green = png_ptr->background.green;
			back.blue = png_ptr->background.blue;
		 }
		 else
		 {
			back.red =
			   (png_byte)(pow((double)png_ptr->background.red/255, g) *
				255.0 + 0.5);
			back.green =
			   (png_byte)(pow((double)png_ptr->background.green/255, g) *
				255.0 + 0.5);
			back.blue =
			   (png_byte)(pow((double)png_ptr->background.blue/255, g) *
				255.0 + 0.5);
		 }

		 g = 1.0 / png_ptr->background_gamma;

		 back_1.red =
			(png_byte)(pow((double)png_ptr->background.red/255, g) *
			 255.0 + 0.5);
		 back_1.green =
			(png_byte)(pow((double)png_ptr->background.green/255, g) *
			 255.0 + 0.5);
		 back_1.blue =
			(png_byte)(pow((double)png_ptr->background.blue/255, g) *
			 255.0 + 0.5);
	  }

	  if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	  {
		 png_uint_32 i;

		 for (i = 0; i < (png_uint_32)num_palette; i++)
		 {
			if (i < png_ptr->num_trans && png_ptr->trans[i] == 0)
			{
			   palette[i] = back;
			}
			else if (i < png_ptr->num_trans && png_ptr->trans[i] != 0xff)
			{
			   png_byte v, w;

			   v = png_ptr->gamma_to_1[png_ptr->palette[i].red];
			   png_composite(w, v, png_ptr->trans[i], back_1.red);
			   palette[i].red = png_ptr->gamma_from_1[w];

			   v = png_ptr->gamma_to_1[png_ptr->palette[i].green];
			   png_composite(w, v, png_ptr->trans[i], back_1.green);
			   palette[i].green = png_ptr->gamma_from_1[w];

			   v = png_ptr->gamma_to_1[png_ptr->palette[i].blue];
			   png_composite(w, v, png_ptr->trans[i], back_1.blue);
			   palette[i].blue = png_ptr->gamma_from_1[w];
			}
			else
			{
			   palette[i].red = png_ptr->gamma_table[palette[i].red];
			   palette[i].green = png_ptr->gamma_table[palette[i].green];
			   palette[i].blue = png_ptr->gamma_table[palette[i].blue];
			}
		 }
	  }
	  else
	  {
		 int i;

		 for (i = 0; i < num_palette; i++)
		 {
			if (palette[i].red == (png_byte)png_ptr->trans_values.gray)
			{
			   palette[i] = back;
			}
			else
			{
			   palette[i].red = png_ptr->gamma_table[palette[i].red];
			   palette[i].green = png_ptr->gamma_table[palette[i].green];
			   palette[i].blue = png_ptr->gamma_table[palette[i].blue];
			}
		 }
	  }
   }
   else
#endif
#if defined(PNG_READ_GAMMA_SUPPORTED)
   if (png_ptr->transformations & PNG_GAMMA)
   {
	  int i;

	  for (i = 0; i < num_palette; i++)
	  {
		 palette[i].red = png_ptr->gamma_table[palette[i].red];
		 palette[i].green = png_ptr->gamma_table[palette[i].green];
		 palette[i].blue = png_ptr->gamma_table[palette[i].blue];
	  }
   }
#if defined(PNG_READ_BACKGROUND_SUPPORTED)
   else
#endif
#endif
#if defined(PNG_READ_BACKGROUND_SUPPORTED)
   if (png_ptr->transformations & PNG_BACKGROUND)
   {
	  if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	  {
		 png_color back;

		 back.red   = (png_byte)png_ptr->background.red;
		 back.green = (png_byte)png_ptr->background.green;
		 back.blue  = (png_byte)png_ptr->background.blue;

		 for (i = 0; i < (int)png_ptr->num_trans; i++)
		 {
			if (png_ptr->trans[i] == 0)
			{
			   palette[i].red = back.red;
			   palette[i].green = back.green;
			   palette[i].blue = back.blue;
			}
			else if (png_ptr->trans[i] != 0xff)
			{
			   png_composite(palette[i].red, png_ptr->palette[i].red,
				  png_ptr->trans[i], back.red);
			   png_composite(palette[i].green, png_ptr->palette[i].green,
				  png_ptr->trans[i], back.green);
			   png_composite(palette[i].blue, png_ptr->palette[i].blue,
				  png_ptr->trans[i], back.blue);
			}
		 }
	  }
	  else /* assume grayscale palette (what else could it be?) */
	  {
		 int i;

		 for (i = 0; i < num_palette; i++)
		 {
			if (i == (png_byte)png_ptr->trans_values.gray)
			{
			   palette[i].red = (png_byte)png_ptr->background.red;
			   palette[i].green = (png_byte)png_ptr->background.green;
			   palette[i].blue = (png_byte)png_ptr->background.blue;
			}
		 }
	  }
   }
#endif
}
#endif

#if defined(PNG_READ_BACKGROUND_SUPPORTED)
/* Replace any alpha or transparency with the supplied background color.
 * "background" is already in the screen gamma, while "background_1" is
 * at a gamma of 1.0.  Paletted files have already been taken care of.
 */
void /* PRIVATE */
png_do_background(png_row_infop row_info, png_bytep row,
   png_color_16p trans_values, png_color_16p background
#if defined(PNG_READ_GAMMA_SUPPORTED)
   , png_color_16p background_1,
   png_bytep gamma_table, png_bytep gamma_from_1, png_bytep gamma_to_1,
   png_uint_16pp gamma_16, png_uint_16pp gamma_16_from_1,
   png_uint_16pp gamma_16_to_1, int gamma_shift
#endif
   )
{
   png_bytep sp, dp;
   png_uint_32 i;
   png_uint_32 row_width=row_info->width;
   int shift;

   png_debug(1, "in png_do_background\n");
   if (background != NULL &&
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL &&
#endif
	  (!(row_info->color_type & PNG_COLOR_MASK_ALPHA) ||
	  (row_info->color_type != PNG_COLOR_TYPE_PALETTE && trans_values)))
   {
	  switch (row_info->color_type)
	  {
		 case PNG_COLOR_TYPE_GRAY:
		 {
			switch (row_info->bit_depth)
			{
			   case 1:
			   {
				  sp = row;
				  shift = 7;
				  for (i = 0; i < row_width; i++)
				  {
					 if ((png_uint_16)((*sp >> shift) & 0x01)
						== trans_values->gray)
					 {
						*sp &= (png_byte)((0x7f7f >> (7 - shift)) & 0xff);
						*sp |= (png_byte)(background->gray << shift);
					 }
					 if (!shift)
					 {
						shift = 7;
						sp++;
					 }
					 else
						shift--;
				  }
				  break;
			   }
			   case 2:
			   {
#if defined(PNG_READ_GAMMA_SUPPORTED)
				  if (gamma_table != NULL)
				  {
					 sp = row;
					 shift = 6;
					 for (i = 0; i < row_width; i++)
					 {
						if ((png_uint_16)((*sp >> shift) & 0x03)
							== trans_values->gray)
						{
						   *sp &= (png_byte)((0x3f3f >> (6 - shift)) & 0xff);
						   *sp |= (png_byte)(background->gray << shift);
						}
						else
						{
						   png_byte p = (png_byte)((*sp >> shift) & 0x03);
						   png_byte g = (png_byte)((gamma_table [p | (p << 2) |
							   (p << 4) | (p << 6)] >> 6) & 0x03);
						   *sp &= (png_byte)((0x3f3f >> (6 - shift)) & 0xff);
						   *sp |= (png_byte)(g << shift);
						}
						if (!shift)
						{
						   shift = 6;
						   sp++;
						}
						else
						   shift -= 2;
					 }
				  }
				  else
#endif
				  {
					 sp = row;
					 shift = 6;
					 for (i = 0; i < row_width; i++)
					 {
						if ((png_uint_16)((*sp >> shift) & 0x03)
							== trans_values->gray)
						{
						   *sp &= (png_byte)((0x3f3f >> (6 - shift)) & 0xff);
						   *sp |= (png_byte)(background->gray << shift);
						}
						if (!shift)
						{
						   shift = 6;
						   sp++;
						}
						else
						   shift -= 2;
					 }
				  }
				  break;
			   }
			   case 4:
			   {
#if defined(PNG_READ_GAMMA_SUPPORTED)
				  if (gamma_table != NULL)
				  {
					 sp = row;
					 shift = 4;
					 for (i = 0; i < row_width; i++)
					 {
						if ((png_uint_16)((*sp >> shift) & 0x0f)
							== trans_values->gray)
						{
						   *sp &= (png_byte)((0xf0f >> (4 - shift)) & 0xff);
						   *sp |= (png_byte)(background->gray << shift);
						}
						else
						{
						   png_byte p = (png_byte)((*sp >> shift) & 0x0f);
						   png_byte g = (png_byte)((gamma_table[p |
							 (p << 4)] >> 4) & 0x0f);
						   *sp &= (png_byte)((0xf0f >> (4 - shift)) & 0xff);
						   *sp |= (png_byte)(g << shift);
						}
						if (!shift)
						{
						   shift = 4;
						   sp++;
						}
						else
						   shift -= 4;
					 }
				  }
				  else
#endif
				  {
					 sp = row;
					 shift = 4;
					 for (i = 0; i < row_width; i++)
					 {
						if ((png_uint_16)((*sp >> shift) & 0x0f)
							== trans_values->gray)
						{
						   *sp &= (png_byte)((0xf0f >> (4 - shift)) & 0xff);
						   *sp |= (png_byte)(background->gray << shift);
						}
						if (!shift)
						{
						   shift = 4;
						   sp++;
						}
						else
						   shift -= 4;
					 }
				  }
				  break;
			   }
			   case 8:
			   {
#if defined(PNG_READ_GAMMA_SUPPORTED)
				  if (gamma_table != NULL)
				  {
					 sp = row;
					 for (i = 0; i < row_width; i++, sp++)
					 {
						if (*sp == trans_values->gray)
						{
						   *sp = (png_byte)background->gray;
						}
						else
						{
						   *sp = gamma_table[*sp];
						}
					 }
				  }
				  else
#endif
				  {
					 sp = row;
					 for (i = 0; i < row_width; i++, sp++)
					 {
						if (*sp == trans_values->gray)
						{
						   *sp = (png_byte)background->gray;
						}
					 }
				  }
				  break;
			   }
			   case 16:
			   {
#if defined(PNG_READ_GAMMA_SUPPORTED)
				  if (gamma_16 != NULL)
				  {
					 sp = row;
					 for (i = 0; i < row_width; i++, sp += 2)
					 {
						png_uint_16 v;

						v = (png_uint_16)(((*sp) << 8) + *(sp + 1));
						if (v == trans_values->gray)
						{
						   /* background is already in screen gamma */
						   *sp = (png_byte)((background->gray >> 8) & 0xff);
						   *(sp + 1) = (png_byte)(background->gray & 0xff);
						}
						else
						{
						   v = gamma_16[*(sp + 1) >> gamma_shift][*sp];
						   *sp = (png_byte)((v >> 8) & 0xff);
						   *(sp + 1) = (png_byte)(v & 0xff);
						}
					 }
				  }
				  else
#endif
				  {
					 sp = row;
					 for (i = 0; i < row_width; i++, sp += 2)
					 {
						png_uint_16 v;

						v = (png_uint_16)(((*sp) << 8) + *(sp + 1));
						if (v == trans_values->gray)
						{
						   *sp = (png_byte)((background->gray >> 8) & 0xff);
						   *(sp + 1) = (png_byte)(background->gray & 0xff);
						}
					 }
				  }
				  break;
			   }
			}
			break;
		 }
		 case PNG_COLOR_TYPE_RGB:
		 {
			if (row_info->bit_depth == 8)
			{
#if defined(PNG_READ_GAMMA_SUPPORTED)
			   if (gamma_table != NULL)
			   {
				  sp = row;
				  for (i = 0; i < row_width; i++, sp += 3)
				  {
					 if (*sp == trans_values->red &&
						*(sp + 1) == trans_values->green &&
						*(sp + 2) == trans_values->blue)
					 {
						*sp = (png_byte)background->red;
						*(sp + 1) = (png_byte)background->green;
						*(sp + 2) = (png_byte)background->blue;
					 }
					 else
					 {
						*sp = gamma_table[*sp];
						*(sp + 1) = gamma_table[*(sp + 1)];
						*(sp + 2) = gamma_table[*(sp + 2)];
					 }
				  }
			   }
			   else
#endif
			   {
				  sp = row;
				  for (i = 0; i < row_width; i++, sp += 3)
				  {
					 if (*sp == trans_values->red &&
						*(sp + 1) == trans_values->green &&
						*(sp + 2) == trans_values->blue)
					 {
						*sp = (png_byte)background->red;
						*(sp + 1) = (png_byte)background->green;
						*(sp + 2) = (png_byte)background->blue;
					 }
				  }
			   }
			}
			else /* if (row_info->bit_depth == 16) */
			{
#if defined(PNG_READ_GAMMA_SUPPORTED)
			   if (gamma_16 != NULL)
			   {
				  sp = row;
				  for (i = 0; i < row_width; i++, sp += 6)
				  {
					 png_uint_16 r = (png_uint_16)(((*sp) << 8) + *(sp + 1));
					 png_uint_16 g = (png_uint_16)(((*(sp+2)) << 8) + *(sp+3));
					 png_uint_16 b = (png_uint_16)(((*(sp+4)) << 8) + *(sp+5));
					 if (r == trans_values->red && g == trans_values->green &&
						b == trans_values->blue)
					 {
						/* background is already in screen gamma */
						*sp = (png_byte)((background->red >> 8) & 0xff);
						*(sp + 1) = (png_byte)(background->red & 0xff);
						*(sp + 2) = (png_byte)((background->green >> 8) & 0xff);
						*(sp + 3) = (png_byte)(background->green & 0xff);
						*(sp + 4) = (png_byte)((background->blue >> 8) & 0xff);
						*(sp + 5) = (png_byte)(background->blue & 0xff);
					 }
					 else
					 {
						png_uint_16 v = gamma_16[*(sp + 1) >> gamma_shift][*sp];
						*sp = (png_byte)((v >> 8) & 0xff);
						*(sp + 1) = (png_byte)(v & 0xff);
						v = gamma_16[*(sp + 3) >> gamma_shift][*(sp + 2)];
						*(sp + 2) = (png_byte)((v >> 8) & 0xff);
						*(sp + 3) = (png_byte)(v & 0xff);
						v = gamma_16[*(sp + 5) >> gamma_shift][*(sp + 4)];
						*(sp + 4) = (png_byte)((v >> 8) & 0xff);
						*(sp + 5) = (png_byte)(v & 0xff);
					 }
				  }
			   }
			   else
#endif
			   {
				  sp = row;
				  for (i = 0; i < row_width; i++, sp += 6)
				  {
					 png_uint_16 r = (png_uint_16)(((*sp) << 8) + *(sp+1));
					 png_uint_16 g = (png_uint_16)(((*(sp+2)) << 8) + *(sp+3));
					 png_uint_16 b = (png_uint_16)(((*(sp+4)) << 8) + *(sp+5));

					 if (r == trans_values->red && g == trans_values->green &&
						b == trans_values->blue)
					 {
						*sp = (png_byte)((background->red >> 8) & 0xff);
						*(sp + 1) = (png_byte)(background->red & 0xff);
						*(sp + 2) = (png_byte)((background->green >> 8) & 0xff);
						*(sp + 3) = (png_byte)(background->green & 0xff);
						*(sp + 4) = (png_byte)((background->blue >> 8) & 0xff);
						*(sp + 5) = (png_byte)(background->blue & 0xff);
					 }
				  }
			   }
			}
			break;
		 }
		 case PNG_COLOR_TYPE_GRAY_ALPHA:
		 {
			if (row_info->bit_depth == 8)
			{
#if defined(PNG_READ_GAMMA_SUPPORTED)
			   if (gamma_to_1 != NULL && gamma_from_1 != NULL &&
				   gamma_table != NULL)
			   {
				  sp = row;
				  dp = row;
				  for (i = 0; i < row_width; i++, sp += 2, dp++)
				  {
					 png_uint_16 a = *(sp + 1);

					 if (a == 0xff)
					 {
						*dp = gamma_table[*sp];
					 }
					 else if (a == 0)
					 {
						/* background is already in screen gamma */
						*dp = (png_byte)background->gray;
					 }
					 else
					 {
						png_byte v, w;

						v = gamma_to_1[*sp];
						png_composite(w, v, a, background_1->gray);
						*dp = gamma_from_1[w];
					 }
				  }
			   }
			   else
#endif
			   {
				  sp = row;
				  dp = row;
				  for (i = 0; i < row_width; i++, sp += 2, dp++)
				  {
					 png_byte a = *(sp + 1);

					 if (a == 0xff)
					 {
						*dp = *sp;
					 }
#if defined(PNG_READ_GAMMA_SUPPORTED)
					 else if (a == 0)
					 {
						*dp = (png_byte)background->gray;
					 }
					 else
					 {
						png_composite(*dp, *sp, a, background_1->gray);
					 }
#else
					 *dp = (png_byte)background->gray;
#endif
				  }
			   }
			}
			else /* if (png_ptr->bit_depth == 16) */
			{
#if defined(PNG_READ_GAMMA_SUPPORTED)
			   if (gamma_16 != NULL && gamma_16_from_1 != NULL &&
				   gamma_16_to_1 != NULL)
			   {
				  sp = row;
				  dp = row;
				  for (i = 0; i < row_width; i++, sp += 4, dp += 2)
				  {
					 png_uint_16 a = (png_uint_16)(((*(sp+2)) << 8) + *(sp+3));

					 if (a == (png_uint_16)0xffff)
					 {
						png_uint_16 v;

						v = gamma_16[*(sp + 1) >> gamma_shift][*sp];
						*dp = (png_byte)((v >> 8) & 0xff);
						*(dp + 1) = (png_byte)(v & 0xff);
					 }
#if defined(PNG_READ_GAMMA_SUPPORTED)
					 else if (a == 0)
#else
					 else
#endif
					 {
						/* background is already in screen gamma */
						*dp = (png_byte)((background->gray >> 8) & 0xff);
						*(dp + 1) = (png_byte)(background->gray & 0xff);
					 }
#if defined(PNG_READ_GAMMA_SUPPORTED)
					 else
					 {
						png_uint_16 g, v, w;

						g = gamma_16_to_1[*(sp + 1) >> gamma_shift][*sp];
						png_composite_16(v, g, a, background_1->gray);
						w = gamma_16_from_1[(v&0xff) >> gamma_shift][v >> 8];
						*dp = (png_byte)((w >> 8) & 0xff);
						*(dp + 1) = (png_byte)(w & 0xff);
					 }
#endif
				  }
			   }
			   else
#endif
			   {
				  sp = row;
				  dp = row;
				  for (i = 0; i < row_width; i++, sp += 4, dp += 2)
				  {
					 png_uint_16 a = (png_uint_16)(((*(sp+2)) << 8) + *(sp+3));
					 if (a == (png_uint_16)0xffff)
					 {
						png_memcpy(dp, sp, 2);
					 }
#if defined(PNG_READ_GAMMA_SUPPORTED)
					 else if (a == 0)
#else
					 else
#endif
					 {
						*dp = (png_byte)((background->gray >> 8) & 0xff);
						*(dp + 1) = (png_byte)(background->gray & 0xff);
					 }
#if defined(PNG_READ_GAMMA_SUPPORTED)
					 else
					 {
						png_uint_16 g, v;

						g = (png_uint_16)(((*sp) << 8) + *(sp + 1));
						png_composite_16(v, g, a, background_1->gray);
						*dp = (png_byte)((v >> 8) & 0xff);
						*(dp + 1) = (png_byte)(v & 0xff);
					 }
#endif
				  }
			   }
			}
			break;
		 }
		 case PNG_COLOR_TYPE_RGB_ALPHA:
		 {
			if (row_info->bit_depth == 8)
			{
#if defined(PNG_READ_GAMMA_SUPPORTED)
			   if (gamma_to_1 != NULL && gamma_from_1 != NULL &&
				   gamma_table != NULL)
			   {
				  sp = row;
				  dp = row;
				  for (i = 0; i < row_width; i++, sp += 4, dp += 3)
				  {
					 png_byte a = *(sp + 3);

					 if (a == 0xff)
					 {
						*dp = gamma_table[*sp];
						*(dp + 1) = gamma_table[*(sp + 1)];
						*(dp + 2) = gamma_table[*(sp + 2)];
					 }
					 else if (a == 0)
					 {
						/* background is already in screen gamma */
						*dp = (png_byte)background->red;
						*(dp + 1) = (png_byte)background->green;
						*(dp + 2) = (png_byte)background->blue;
					 }
					 else
					 {
						png_byte v, w;

						v = gamma_to_1[*sp];
						png_composite(w, v, a, background_1->red);
						*dp = gamma_from_1[w];
						v = gamma_to_1[*(sp + 1)];
						png_composite(w, v, a, background_1->green);
						*(dp + 1) = gamma_from_1[w];
						v = gamma_to_1[*(sp + 2)];
						png_composite(w, v, a, background_1->blue);
						*(dp + 2) = gamma_from_1[w];
					 }
				  }
			   }
			   else
#endif
			   {
				  sp = row;
				  dp = row;
				  for (i = 0; i < row_width; i++, sp += 4, dp += 3)
				  {
					 png_byte a = *(sp + 3);

					 if (a == 0xff)
					 {
						*dp = *sp;
						*(dp + 1) = *(sp + 1);
						*(dp + 2) = *(sp + 2);
					 }
					 else if (a == 0)
					 {
						*dp = (png_byte)background->red;
						*(dp + 1) = (png_byte)background->green;
						*(dp + 2) = (png_byte)background->blue;
					 }
					 else
					 {
						png_composite(*dp, *sp, a, background->red);
						png_composite(*(dp + 1), *(sp + 1), a,
						   background->green);
						png_composite(*(dp + 2), *(sp + 2), a,
						   background->blue);
					 }
				  }
			   }
			}
			else /* if (row_info->bit_depth == 16) */
			{
#if defined(PNG_READ_GAMMA_SUPPORTED)
			   if (gamma_16 != NULL && gamma_16_from_1 != NULL &&
				   gamma_16_to_1 != NULL)
			   {
				  sp = row;
				  dp = row;
				  for (i = 0; i < row_width; i++, sp += 8, dp += 6)
				  {
					 png_uint_16 a = (png_uint_16)(((png_uint_16)(*(sp + 6))
						 << 8) + (png_uint_16)(*(sp + 7)));
					 if (a == (png_uint_16)0xffff)
					 {
						png_uint_16 v;

						v = gamma_16[*(sp + 1) >> gamma_shift][*sp];
						*dp = (png_byte)((v >> 8) & 0xff);
						*(dp + 1) = (png_byte)(v & 0xff);
						v = gamma_16[*(sp + 3) >> gamma_shift][*(sp + 2)];
						*(dp + 2) = (png_byte)((v >> 8) & 0xff);
						*(dp + 3) = (png_byte)(v & 0xff);
						v = gamma_16[*(sp + 5) >> gamma_shift][*(sp + 4)];
						*(dp + 4) = (png_byte)((v >> 8) & 0xff);
						*(dp + 5) = (png_byte)(v & 0xff);
					 }
					 else if (a == 0)
					 {
						/* background is already in screen gamma */
						*dp = (png_byte)((background->red >> 8) & 0xff);
						*(dp + 1) = (png_byte)(background->red & 0xff);
						*(dp + 2) = (png_byte)((background->green >> 8) & 0xff);
						*(dp + 3) = (png_byte)(background->green & 0xff);
						*(dp + 4) = (png_byte)((background->blue >> 8) & 0xff);
						*(dp + 5) = (png_byte)(background->blue & 0xff);
					 }
					 else
					 {
						png_uint_16 v, w, x;

						v = gamma_16_to_1[*(sp + 1) >> gamma_shift][*sp];
						png_composite_16(w, v, a, background_1->red);
						x = gamma_16_from_1[((w&0xff) >> gamma_shift)][w >> 8];
						*dp = (png_byte)((x >> 8) & 0xff);
						*(dp + 1) = (png_byte)(x & 0xff);
						v = gamma_16_to_1[*(sp + 3) >> gamma_shift][*(sp + 2)];
						png_composite_16(w, v, a, background_1->green);
						x = gamma_16_from_1[((w&0xff) >> gamma_shift)][w >> 8];
						*(dp + 2) = (png_byte)((x >> 8) & 0xff);
						*(dp + 3) = (png_byte)(x & 0xff);
						v = gamma_16_to_1[*(sp + 5) >> gamma_shift][*(sp + 4)];
						png_composite_16(w, v, a, background_1->blue);
						x = gamma_16_from_1[(w & 0xff) >> gamma_shift][w >> 8];
						*(dp + 4) = (png_byte)((x >> 8) & 0xff);
						*(dp + 5) = (png_byte)(x & 0xff);
					 }
				  }
			   }
			   else
#endif
			   {
				  sp = row;
				  dp = row;
				  for (i = 0; i < row_width; i++, sp += 8, dp += 6)
				  {
					 png_uint_16 a = (png_uint_16)(((png_uint_16)(*(sp + 6))
						<< 8) + (png_uint_16)(*(sp + 7)));
					 if (a == (png_uint_16)0xffff)
					 {
						png_memcpy(dp, sp, 6);
					 }
					 else if (a == 0)
					 {
						*dp = (png_byte)((background->red >> 8) & 0xff);
						*(dp + 1) = (png_byte)(background->red & 0xff);
						*(dp + 2) = (png_byte)((background->green >> 8) & 0xff);
						*(dp + 3) = (png_byte)(background->green & 0xff);
						*(dp + 4) = (png_byte)((background->blue >> 8) & 0xff);
						*(dp + 5) = (png_byte)(background->blue & 0xff);
					 }
					 else
					 {
						png_uint_16 v;

						png_uint_16 r = (png_uint_16)(((*sp) << 8) + *(sp + 1));
						png_uint_16 g = (png_uint_16)(((*(sp + 2)) << 8)
							+ *(sp + 3));
						png_uint_16 b = (png_uint_16)(((*(sp + 4)) << 8)
							+ *(sp + 5));

						png_composite_16(v, r, a, background->red);
						*dp = (png_byte)((v >> 8) & 0xff);
						*(dp + 1) = (png_byte)(v & 0xff);
						png_composite_16(v, g, a, background->green);
						*(dp + 2) = (png_byte)((v >> 8) & 0xff);
						*(dp + 3) = (png_byte)(v & 0xff);
						png_composite_16(v, b, a, background->blue);
						*(dp + 4) = (png_byte)((v >> 8) & 0xff);
						*(dp + 5) = (png_byte)(v & 0xff);
					 }
				  }
			   }
			}
			break;
		 }
	  }

	  if (row_info->color_type & PNG_COLOR_MASK_ALPHA)
	  {
		 row_info->color_type &= ~PNG_COLOR_MASK_ALPHA;
		 row_info->channels--;
		 row_info->pixel_depth = (png_byte)(row_info->channels *
			row_info->bit_depth);
		 row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
	  }
   }
}
#endif

#if defined(PNG_READ_GAMMA_SUPPORTED)
/* Gamma correct the image, avoiding the alpha channel.  Make sure
 * you do this after you deal with the transparency issue on grayscale
 * or RGB images. If your bit depth is 8, use gamma_table, if it
 * is 16, use gamma_16_table and gamma_shift.  Build these with
 * build_gamma_table().
 */

// (Note: the reason I've pulled this block of code out of png_do_gamma and into its own function
// is because the android NDK compiler was crashing when it tried to compile it)
static void doGamma_RGB (png_uint_32 row_width, png_row_infop row_info, png_bytep row, png_bytep gamma_table, png_uint_16pp gamma_16_table, int gamma_shift)
{
	if (row_info->bit_depth == 8)
	{
	   png_bytep sp = row;
	   for (png_uint_32 i = 0; i < row_width; i++)
	   {
		  *sp = gamma_table[*sp];
		  sp++;
		  *sp = gamma_table[*sp];
		  sp++;
		  *sp = gamma_table[*sp];
		  sp++;
	   }
	}
	else /* if (row_info->bit_depth == 16) */
	{
	   png_bytep sp = row;
	   for (png_uint_32 i = 0; i < row_width; i++)
	   {
		  png_uint_16 v;

		  v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
		  *sp = (png_byte)((v >> 8) & 0xff);
		  *(sp + 1) = (png_byte)(v & 0xff);
		  sp += 2;
		  v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
		  *sp = (png_byte)((v >> 8) & 0xff);
		  *(sp + 1) = (png_byte)(v & 0xff);
		  sp += 2;
		  v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
		  *sp = (png_byte)((v >> 8) & 0xff);
		  *(sp + 1) = (png_byte)(v & 0xff);
		  sp += 2;
	   }
	}
}

void /* PRIVATE */
png_do_gamma(png_row_infop row_info, png_bytep row,
   png_bytep gamma_table, png_uint_16pp gamma_16_table,
   int gamma_shift)
{
   png_bytep sp;
   const png_uint_32 row_width=row_info->width;

   png_debug(1, "in png_do_gamma\n");
   if (((row_info->bit_depth <= 8 && gamma_table != NULL) ||
		(row_info->bit_depth == 16 && gamma_16_table != NULL)))
   {
	  switch (row_info->color_type)
	  {
		  case PNG_COLOR_TYPE_RGB:
			  doGamma_RGB (row_width, row_info, row, gamma_table, gamma_16_table, gamma_shift);
			  break;

		  case PNG_COLOR_TYPE_RGB_ALPHA:
		 {
			if (row_info->bit_depth == 8)
			{
			   sp = row;
			   for (png_uint_32 i = 0; i < row_width; i++)
			   {
				  *sp = gamma_table[*sp];
				  sp++;
				  *sp = gamma_table[*sp];
				  sp++;
				  *sp = gamma_table[*sp];
				  sp++;
				  sp++;
			   }
			}
			else /* if (row_info->bit_depth == 16) */
			{
			   sp = row;
			   for (png_uint_32 i = 0; i < row_width; i++)
			   {
				  png_uint_16 v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
				  *sp = (png_byte)((v >> 8) & 0xff);
				  *(sp + 1) = (png_byte)(v & 0xff);
				  sp += 2;
				  v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
				  *sp = (png_byte)((v >> 8) & 0xff);
				  *(sp + 1) = (png_byte)(v & 0xff);
				  sp += 2;
				  v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
				  *sp = (png_byte)((v >> 8) & 0xff);
				  *(sp + 1) = (png_byte)(v & 0xff);
				  sp += 4;
			   }
			}
			break;
		 }
		 case PNG_COLOR_TYPE_GRAY_ALPHA:
		 {
			if (row_info->bit_depth == 8)
			{
			   sp = row;
			   for (png_uint_32 i = 0; i < row_width; i++)
			   {
				  *sp = gamma_table[*sp];
				  sp += 2;
			   }
			}
			else /* if (row_info->bit_depth == 16) */
			{
			   sp = row;
			   for (png_uint_32 i = 0; i < row_width; i++)
			   {
				  png_uint_16 v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
				  *sp = (png_byte)((v >> 8) & 0xff);
				  *(sp + 1) = (png_byte)(v & 0xff);
				  sp += 4;
			   }
			}
			break;
		 }
		 case PNG_COLOR_TYPE_GRAY:
		 {
			if (row_info->bit_depth == 2)
			{
			   sp = row;
			   for (png_uint_32 i = 0; i < row_width; i += 4)
			   {
				  int a = *sp & 0xc0;
				  int b = *sp & 0x30;
				  int c = *sp & 0x0c;
				  int d = *sp & 0x03;

				  *sp = (png_byte)(
						((((int)gamma_table[a|(a>>2)|(a>>4)|(a>>6)])   ) & 0xc0)|
						((((int)gamma_table[(b<<2)|b|(b>>2)|(b>>4)])>>2) & 0x30)|
						((((int)gamma_table[(c<<4)|(c<<2)|c|(c>>2)])>>4) & 0x0c)|
						((((int)gamma_table[(d<<6)|(d<<4)|(d<<2)|d])>>6) ));
				  sp++;
			   }
			}
			if (row_info->bit_depth == 4)
			{
			   sp = row;
			   for (png_uint_32 i = 0; i < row_width; i += 2)
			   {
				  int msb = *sp & 0xf0;
				  int lsb = *sp & 0x0f;

				  *sp = (png_byte)((((int)gamma_table[msb | (msb >> 4)]) & 0xf0)
						  | (((int)gamma_table[(lsb << 4) | lsb]) >> 4));
				  sp++;
			   }
			}
			else if (row_info->bit_depth == 8)
			{
			   sp = row;
			   for (png_uint_32 i = 0; i < row_width; i++)
			   {
				  *sp = gamma_table[*sp];
				  sp++;
			   }
			}
			else if (row_info->bit_depth == 16)
			{
			   sp = row;
			   for (png_uint_32 i = 0; i < row_width; i++)
			   {
				  png_uint_16 v = gamma_16_table[*(sp + 1) >> gamma_shift][*sp];
				  *sp = (png_byte)((v >> 8) & 0xff);
				  *(sp + 1) = (png_byte)(v & 0xff);
				  sp += 2;
			   }
			}
			break;
		 }
	  }
   }
}
#endif

#if defined(PNG_READ_EXPAND_SUPPORTED)
/* Expands a palette row to an RGB or RGBA row depending
 * upon whether you supply trans and num_trans.
 */
void /* PRIVATE */
png_do_expand_palette(png_row_infop row_info, png_bytep row,
   png_colorp palette, png_bytep trans, int num_trans)
{
   int shift, value;
   png_bytep sp, dp;
   png_uint_32 i;
   png_uint_32 row_width=row_info->width;

   png_debug(1, "in png_do_expand_palette\n");
   if (
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL &&
#endif
	   row_info->color_type == PNG_COLOR_TYPE_PALETTE)
   {
	  if (row_info->bit_depth < 8)
	  {
		 switch (row_info->bit_depth)
		 {
			case 1:
			{
			   sp = row + (png_size_t)((row_width - 1) >> 3);
			   dp = row + (png_size_t)row_width - 1;
			   shift = 7 - (int)((row_width + 7) & 0x07);
			   for (i = 0; i < row_width; i++)
			   {
				  if ((*sp >> shift) & 0x01)
					 *dp = 1;
				  else
					 *dp = 0;
				  if (shift == 7)
				  {
					 shift = 0;
					 sp--;
				  }
				  else
					 shift++;

				  dp--;
			   }
			   break;
			}
			case 2:
			{
			   sp = row + (png_size_t)((row_width - 1) >> 2);
			   dp = row + (png_size_t)row_width - 1;
			   shift = (int)((3 - ((row_width + 3) & 0x03)) << 1);
			   for (i = 0; i < row_width; i++)
			   {
				  value = (*sp >> shift) & 0x03;
				  *dp = (png_byte)value;
				  if (shift == 6)
				  {
					 shift = 0;
					 sp--;
				  }
				  else
					 shift += 2;

				  dp--;
			   }
			   break;
			}
			case 4:
			{
			   sp = row + (png_size_t)((row_width - 1) >> 1);
			   dp = row + (png_size_t)row_width - 1;
			   shift = (int)((row_width & 0x01) << 2);
			   for (i = 0; i < row_width; i++)
			   {
				  value = (*sp >> shift) & 0x0f;
				  *dp = (png_byte)value;
				  if (shift == 4)
				  {
					 shift = 0;
					 sp--;
				  }
				  else
					 shift += 4;

				  dp--;
			   }
			   break;
			}
		 }
		 row_info->bit_depth = 8;
		 row_info->pixel_depth = 8;
		 row_info->rowbytes = row_width;
	  }
	  switch (row_info->bit_depth)
	  {
		 case 8:
		 {
			if (trans != NULL)
			{
			   sp = row + (png_size_t)row_width - 1;
			   dp = row + (png_size_t)(row_width << 2) - 1;

			   for (i = 0; i < row_width; i++)
			   {
				  if ((int)(*sp) >= num_trans)
					 *dp-- = 0xff;
				  else
					 *dp-- = trans[*sp];
				  *dp-- = palette[*sp].blue;
				  *dp-- = palette[*sp].green;
				  *dp-- = palette[*sp].red;
				  sp--;
			   }
			   row_info->bit_depth = 8;
			   row_info->pixel_depth = 32;
			   row_info->rowbytes = row_width * 4;
			   row_info->color_type = 6;
			   row_info->channels = 4;
			}
			else
			{
			   sp = row + (png_size_t)row_width - 1;
			   dp = row + (png_size_t)(row_width * 3) - 1;

			   for (i = 0; i < row_width; i++)
			   {
				  *dp-- = palette[*sp].blue;
				  *dp-- = palette[*sp].green;
				  *dp-- = palette[*sp].red;
				  sp--;
			   }
			   row_info->bit_depth = 8;
			   row_info->pixel_depth = 24;
			   row_info->rowbytes = row_width * 3;
			   row_info->color_type = 2;
			   row_info->channels = 3;
			}
			break;
		 }
	  }
   }
}

/* If the bit depth < 8, it is expanded to 8.  Also, if the already
 * expanded transparency value is supplied, an alpha channel is built.
 */
void /* PRIVATE */
png_do_expand(png_row_infop row_info, png_bytep row,
   png_color_16p trans_value)
{
   int shift, value;
   png_bytep sp, dp;
   png_uint_32 i;
   png_uint_32 row_width=row_info->width;

   png_debug(1, "in png_do_expand\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL)
#endif
   {
	  if (row_info->color_type == PNG_COLOR_TYPE_GRAY)
	  {
		 png_uint_16 gray = (png_uint_16)(trans_value ? trans_value->gray : 0);

		 if (row_info->bit_depth < 8)
		 {
			switch (row_info->bit_depth)
			{
			   case 1:
			   {
				  gray = (png_uint_16)((gray&0x01)*0xff);
				  sp = row + (png_size_t)((row_width - 1) >> 3);
				  dp = row + (png_size_t)row_width - 1;
				  shift = 7 - (int)((row_width + 7) & 0x07);
				  for (i = 0; i < row_width; i++)
				  {
					 if ((*sp >> shift) & 0x01)
						*dp = 0xff;
					 else
						*dp = 0;
					 if (shift == 7)
					 {
						shift = 0;
						sp--;
					 }
					 else
						shift++;

					 dp--;
				  }
				  break;
			   }
			   case 2:
			   {
				  gray = (png_uint_16)((gray&0x03)*0x55);
				  sp = row + (png_size_t)((row_width - 1) >> 2);
				  dp = row + (png_size_t)row_width - 1;
				  shift = (int)((3 - ((row_width + 3) & 0x03)) << 1);
				  for (i = 0; i < row_width; i++)
				  {
					 value = (*sp >> shift) & 0x03;
					 *dp = (png_byte)(value | (value << 2) | (value << 4) |
						(value << 6));
					 if (shift == 6)
					 {
						shift = 0;
						sp--;
					 }
					 else
						shift += 2;

					 dp--;
				  }
				  break;
			   }
			   case 4:
			   {
				  gray = (png_uint_16)((gray&0x0f)*0x11);
				  sp = row + (png_size_t)((row_width - 1) >> 1);
				  dp = row + (png_size_t)row_width - 1;
				  shift = (int)((1 - ((row_width + 1) & 0x01)) << 2);
				  for (i = 0; i < row_width; i++)
				  {
					 value = (*sp >> shift) & 0x0f;
					 *dp = (png_byte)(value | (value << 4));
					 if (shift == 4)
					 {
						shift = 0;
						sp--;
					 }
					 else
						shift = 4;

					 dp--;
				  }
				  break;
			   }
			}
			row_info->bit_depth = 8;
			row_info->pixel_depth = 8;
			row_info->rowbytes = row_width;
		 }

		 if (trans_value != NULL)
		 {
			if (row_info->bit_depth == 8)
			{
			   gray = gray & 0xff;
			   sp = row + (png_size_t)row_width - 1;
			   dp = row + (png_size_t)(row_width << 1) - 1;
			   for (i = 0; i < row_width; i++)
			   {
				  if (*sp == gray)
					 *dp-- = 0;
				  else
					 *dp-- = 0xff;
				  *dp-- = *sp--;
			   }
			}
			else if (row_info->bit_depth == 16)
			{
			   png_byte gray_high = (gray >> 8) & 0xff;
			   png_byte gray_low = gray & 0xff;
			   sp = row + row_info->rowbytes - 1;
			   dp = row + (row_info->rowbytes << 1) - 1;
			   for (i = 0; i < row_width; i++)
			   {
				  if (*(sp-1) == gray_high && *(sp) == gray_low)
				  {
					 *dp-- = 0;
					 *dp-- = 0;
				  }
				  else
				  {
					 *dp-- = 0xff;
					 *dp-- = 0xff;
				  }
				  *dp-- = *sp--;
				  *dp-- = *sp--;
			   }
			}
			row_info->color_type = PNG_COLOR_TYPE_GRAY_ALPHA;
			row_info->channels = 2;
			row_info->pixel_depth = (png_byte)(row_info->bit_depth << 1);
			row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,
			   row_width);
		 }
	  }
	  else if (row_info->color_type == PNG_COLOR_TYPE_RGB && trans_value)
	  {
		 if (row_info->bit_depth == 8)
		 {
			png_byte red = trans_value->red & 0xff;
			png_byte green = trans_value->green & 0xff;
			png_byte blue = trans_value->blue & 0xff;
			sp = row + (png_size_t)row_info->rowbytes - 1;
			dp = row + (png_size_t)(row_width << 2) - 1;
			for (i = 0; i < row_width; i++)
			{
			   if (*(sp - 2) == red && *(sp - 1) == green && *(sp) == blue)
				  *dp-- = 0;
			   else
				  *dp-- = 0xff;
			   *dp-- = *sp--;
			   *dp-- = *sp--;
			   *dp-- = *sp--;
			}
		 }
		 else if (row_info->bit_depth == 16)
		 {
			png_byte red_high = (trans_value->red >> 8) & 0xff;
			png_byte green_high = (trans_value->green >> 8) & 0xff;
			png_byte blue_high = (trans_value->blue >> 8) & 0xff;
			png_byte red_low = trans_value->red & 0xff;
			png_byte green_low = trans_value->green & 0xff;
			png_byte blue_low = trans_value->blue & 0xff;
			sp = row + row_info->rowbytes - 1;
			dp = row + (png_size_t)(row_width << 3) - 1;
			for (i = 0; i < row_width; i++)
			{
			   if (*(sp - 5) == red_high &&
				  *(sp - 4) == red_low &&
				  *(sp - 3) == green_high &&
				  *(sp - 2) == green_low &&
				  *(sp - 1) == blue_high &&
				  *(sp    ) == blue_low)
			   {
				  *dp-- = 0;
				  *dp-- = 0;
			   }
			   else
			   {
				  *dp-- = 0xff;
				  *dp-- = 0xff;
			   }
			   *dp-- = *sp--;
			   *dp-- = *sp--;
			   *dp-- = *sp--;
			   *dp-- = *sp--;
			   *dp-- = *sp--;
			   *dp-- = *sp--;
			}
		 }
		 row_info->color_type = PNG_COLOR_TYPE_RGB_ALPHA;
		 row_info->channels = 4;
		 row_info->pixel_depth = (png_byte)(row_info->bit_depth << 2);
		 row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
	  }
   }
}
#endif

#if defined(PNG_READ_DITHER_SUPPORTED)
void /* PRIVATE */
png_do_dither(png_row_infop row_info, png_bytep row,
	png_bytep palette_lookup, png_bytep dither_lookup)
{
   png_bytep sp, dp;
   png_uint_32 i;
   png_uint_32 row_width=row_info->width;

   png_debug(1, "in png_do_dither\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL)
#endif
   {
	  if (row_info->color_type == PNG_COLOR_TYPE_RGB &&
		 palette_lookup && row_info->bit_depth == 8)
	  {
		 int r, g, b, p;
		 sp = row;
		 dp = row;
		 for (i = 0; i < row_width; i++)
		 {
			r = *sp++;
			g = *sp++;
			b = *sp++;

			/* this looks real messy, but the compiler will reduce
			   it down to a reasonable formula.  For example, with
			   5 bits per color, we get:
			   p = (((r >> 3) & 0x1f) << 10) |
				  (((g >> 3) & 0x1f) << 5) |
				  ((b >> 3) & 0x1f);
			   */
			p = (((r >> (8 - PNG_DITHER_RED_BITS)) &
			   ((1 << PNG_DITHER_RED_BITS) - 1)) <<
			   (PNG_DITHER_GREEN_BITS + PNG_DITHER_BLUE_BITS)) |
			   (((g >> (8 - PNG_DITHER_GREEN_BITS)) &
			   ((1 << PNG_DITHER_GREEN_BITS) - 1)) <<
			   (PNG_DITHER_BLUE_BITS)) |
			   ((b >> (8 - PNG_DITHER_BLUE_BITS)) &
			   ((1 << PNG_DITHER_BLUE_BITS) - 1));

			*dp++ = palette_lookup[p];
		 }
		 row_info->color_type = PNG_COLOR_TYPE_PALETTE;
		 row_info->channels = 1;
		 row_info->pixel_depth = row_info->bit_depth;
		 row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
	  }
	  else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA &&
		 palette_lookup != NULL && row_info->bit_depth == 8)
	  {
		 int r, g, b, p;
		 sp = row;
		 dp = row;
		 for (i = 0; i < row_width; i++)
		 {
			r = *sp++;
			g = *sp++;
			b = *sp++;
			sp++;

			p = (((r >> (8 - PNG_DITHER_RED_BITS)) &
			   ((1 << PNG_DITHER_RED_BITS) - 1)) <<
			   (PNG_DITHER_GREEN_BITS + PNG_DITHER_BLUE_BITS)) |
			   (((g >> (8 - PNG_DITHER_GREEN_BITS)) &
			   ((1 << PNG_DITHER_GREEN_BITS) - 1)) <<
			   (PNG_DITHER_BLUE_BITS)) |
			   ((b >> (8 - PNG_DITHER_BLUE_BITS)) &
			   ((1 << PNG_DITHER_BLUE_BITS) - 1));

			*dp++ = palette_lookup[p];
		 }
		 row_info->color_type = PNG_COLOR_TYPE_PALETTE;
		 row_info->channels = 1;
		 row_info->pixel_depth = row_info->bit_depth;
		 row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,row_width);
	  }
	  else if (row_info->color_type == PNG_COLOR_TYPE_PALETTE &&
		 dither_lookup && row_info->bit_depth == 8)
	  {
		 sp = row;
		 for (i = 0; i < row_width; i++, sp++)
		 {
			*sp = dither_lookup[*sp];
		 }
	  }
   }
}
#endif

#ifdef PNG_FLOATING_POINT_SUPPORTED
#if defined(PNG_READ_GAMMA_SUPPORTED)
static PNG_CONST int png_gamma_shift[] =
   {0x10, 0x21, 0x42, 0x84, 0x110, 0x248, 0x550, 0xff0, 0x00};

/* We build the 8- or 16-bit gamma tables here.  Note that for 16-bit
 * tables, we don't make a full table if we are reducing to 8-bit in
 * the future.  Note also how the gamma_16 tables are segmented so that
 * we don't need to allocate > 64K chunks for a full 16-bit table.
 */
void /* PRIVATE */
png_build_gamma_table(png_structp png_ptr)
{
  png_debug(1, "in png_build_gamma_table\n");

  if (png_ptr->bit_depth <= 8)
  {
	 int i;
	 double g;

	 if (png_ptr->screen_gamma > .000001)
		g = 1.0 / (png_ptr->gamma * png_ptr->screen_gamma);
	 else
		g = 1.0;

	 png_ptr->gamma_table = (png_bytep)png_malloc(png_ptr,
		(png_uint_32)256);

	 for (i = 0; i < 256; i++)
	 {
		png_ptr->gamma_table[i] = (png_byte)(pow((double)i / 255.0,
		   g) * 255.0 + .5);
	 }

#if defined(PNG_READ_BACKGROUND_SUPPORTED) || \
   defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
	 if (png_ptr->transformations & ((PNG_BACKGROUND) | PNG_RGB_TO_GRAY))
	 {

		g = 1.0 / (png_ptr->gamma);

		png_ptr->gamma_to_1 = (png_bytep)png_malloc(png_ptr,
		   (png_uint_32)256);

		for (i = 0; i < 256; i++)
		{
		   png_ptr->gamma_to_1[i] = (png_byte)(pow((double)i / 255.0,
			  g) * 255.0 + .5);
		}

		png_ptr->gamma_from_1 = (png_bytep)png_malloc(png_ptr,
		   (png_uint_32)256);

		if(png_ptr->screen_gamma > 0.000001)
		   g = 1.0 / png_ptr->screen_gamma;
		else
		   g = png_ptr->gamma;   /* probably doing rgb_to_gray */

		for (i = 0; i < 256; i++)
		{
		   png_ptr->gamma_from_1[i] = (png_byte)(pow((double)i / 255.0,
			  g) * 255.0 + .5);

		}
	 }
#endif /* PNG_READ_BACKGROUND_SUPPORTED || PNG_RGB_TO_GRAY_SUPPORTED */
  }
  else
  {
	 double g;
	 int i, j, shift, num;
	 int sig_bit;
	 png_uint_32 ig;

	 if (png_ptr->color_type & PNG_COLOR_MASK_COLOR)
	 {
		sig_bit = (int)png_ptr->sig_bit.red;
		if ((int)png_ptr->sig_bit.green > sig_bit)
		   sig_bit = png_ptr->sig_bit.green;
		if ((int)png_ptr->sig_bit.blue > sig_bit)
		   sig_bit = png_ptr->sig_bit.blue;
	 }
	 else
	 {
		sig_bit = (int)png_ptr->sig_bit.gray;
	 }

	 if (sig_bit > 0)
		shift = 16 - sig_bit;
	 else
		shift = 0;

	 if (png_ptr->transformations & PNG_16_TO_8)
	 {
		if (shift < (16 - PNG_MAX_GAMMA_8))
		   shift = (16 - PNG_MAX_GAMMA_8);
	 }

	 if (shift > 8)
		shift = 8;
	 if (shift < 0)
		shift = 0;

	 png_ptr->gamma_shift = (png_byte)shift;

	 num = (1 << (8 - shift));

	 if (png_ptr->screen_gamma > .000001)
		g = 1.0 / (png_ptr->gamma * png_ptr->screen_gamma);
	 else
		g = 1.0;

	 png_ptr->gamma_16_table = (png_uint_16pp)png_malloc(png_ptr,
		(png_uint_32)(num * png_sizeof (png_uint_16p)));

	 if (png_ptr->transformations & (PNG_16_TO_8 | PNG_BACKGROUND))
	 {
		double fin, fout;
		png_uint_32 last, max;

		for (i = 0; i < num; i++)
		{
		   png_ptr->gamma_16_table[i] = (png_uint_16p)png_malloc(png_ptr,
			  (png_uint_32)(256 * png_sizeof (png_uint_16)));
		}

		g = 1.0 / g;
		last = 0;
		for (i = 0; i < 256; i++)
		{
		   fout = ((double)i + 0.5) / 256.0;
		   fin = pow(fout, g);
		   max = (png_uint_32)(fin * (double)((png_uint_32)num << 8));
		   while (last <= max)
		   {
			  png_ptr->gamma_16_table[(int)(last & (0xff >> shift))]
				 [(int)(last >> (8 - shift))] = (png_uint_16)(
				 (png_uint_16)i | ((png_uint_16)i << 8));
			  last++;
		   }
		}
		while (last < ((png_uint_32)num << 8))
		{
		   png_ptr->gamma_16_table[(int)(last & (0xff >> shift))]
			  [(int)(last >> (8 - shift))] = (png_uint_16)65535L;
		   last++;
		}
	 }
	 else
	 {
		for (i = 0; i < num; i++)
		{
		   png_ptr->gamma_16_table[i] = (png_uint_16p)png_malloc(png_ptr,
			  (png_uint_32)(256 * png_sizeof (png_uint_16)));

		   ig = (((png_uint_32)i * (png_uint_32)png_gamma_shift[shift]) >> 4);
		   for (j = 0; j < 256; j++)
		   {
			  png_ptr->gamma_16_table[i][j] =
				 (png_uint_16)(pow((double)(ig + ((png_uint_32)j << 8)) /
					65535.0, g) * 65535.0 + .5);
		   }
		}
	 }

#if defined(PNG_READ_BACKGROUND_SUPPORTED) || \
   defined(PNG_READ_RGB_TO_GRAY_SUPPORTED)
	 if (png_ptr->transformations & (PNG_BACKGROUND | PNG_RGB_TO_GRAY))
	 {

		g = 1.0 / (png_ptr->gamma);

		png_ptr->gamma_16_to_1 = (png_uint_16pp)png_malloc(png_ptr,
		   (png_uint_32)(num * png_sizeof (png_uint_16p )));

		for (i = 0; i < num; i++)
		{
		   png_ptr->gamma_16_to_1[i] = (png_uint_16p)png_malloc(png_ptr,
			  (png_uint_32)(256 * png_sizeof (png_uint_16)));

		   ig = (((png_uint_32)i *
			  (png_uint_32)png_gamma_shift[shift]) >> 4);
		   for (j = 0; j < 256; j++)
		   {
			  png_ptr->gamma_16_to_1[i][j] =
				 (png_uint_16)(pow((double)(ig + ((png_uint_32)j << 8)) /
					65535.0, g) * 65535.0 + .5);
		   }
		}

		if(png_ptr->screen_gamma > 0.000001)
		   g = 1.0 / png_ptr->screen_gamma;
		else
		   g = png_ptr->gamma;   /* probably doing rgb_to_gray */

		png_ptr->gamma_16_from_1 = (png_uint_16pp)png_malloc(png_ptr,
		   (png_uint_32)(num * png_sizeof (png_uint_16p)));

		for (i = 0; i < num; i++)
		{
		   png_ptr->gamma_16_from_1[i] = (png_uint_16p)png_malloc(png_ptr,
			  (png_uint_32)(256 * png_sizeof (png_uint_16)));

		   ig = (((png_uint_32)i *
			  (png_uint_32)png_gamma_shift[shift]) >> 4);
		   for (j = 0; j < 256; j++)
		   {
			  png_ptr->gamma_16_from_1[i][j] =
				 (png_uint_16)(pow((double)(ig + ((png_uint_32)j << 8)) /
					65535.0, g) * 65535.0 + .5);
		   }
		}
	 }
#endif /* PNG_READ_BACKGROUND_SUPPORTED || PNG_RGB_TO_GRAY_SUPPORTED */
  }
}
#endif
/* To do: install integer version of png_build_gamma_table here */
#endif

#if defined(PNG_MNG_FEATURES_SUPPORTED)
/* undoes intrapixel differencing  */
void /* PRIVATE */
png_do_read_intrapixel(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_read_intrapixel\n");
   if (
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL &&
#endif
	   (row_info->color_type & PNG_COLOR_MASK_COLOR))
   {
	  int bytes_per_pixel;
	  png_uint_32 row_width = row_info->width;
	  if (row_info->bit_depth == 8)
	  {
		 png_bytep rp;
		 png_uint_32 i;

		 if (row_info->color_type == PNG_COLOR_TYPE_RGB)
			bytes_per_pixel = 3;
		 else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
			bytes_per_pixel = 4;
		 else
			return;

		 for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
		 {
			*(rp) = (png_byte)((256 + *rp + *(rp+1))&0xff);
			*(rp+2) = (png_byte)((256 + *(rp+2) + *(rp+1))&0xff);
		 }
	  }
	  else if (row_info->bit_depth == 16)
	  {
		 png_bytep rp;
		 png_uint_32 i;

		 if (row_info->color_type == PNG_COLOR_TYPE_RGB)
			bytes_per_pixel = 6;
		 else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
			bytes_per_pixel = 8;
		 else
			return;

		 for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
		 {
			png_uint_32 s0   = (*(rp  ) << 8) | *(rp+1);
			png_uint_32 s1   = (*(rp+2) << 8) | *(rp+3);
			png_uint_32 s2   = (*(rp+4) << 8) | *(rp+5);
			png_uint_32 red  = (png_uint_32)((s0+s1+65536L) & 0xffffL);
			png_uint_32 blue = (png_uint_32)((s2+s1+65536L) & 0xffffL);
			*(rp  ) = (png_byte)((red >> 8) & 0xff);
			*(rp+1) = (png_byte)(red & 0xff);
			*(rp+4) = (png_byte)((blue >> 8) & 0xff);
			*(rp+5) = (png_byte)(blue & 0xff);
		 }
	  }
   }
}
#endif /* PNG_MNG_FEATURES_SUPPORTED */
#endif /* PNG_READ_SUPPORTED */

/*** End of inlined file: pngrtran.c ***/


/*** Start of inlined file: pngrutil.c ***/
/* pngrutil.c - utilities to read a PNG file
 *
 * Last changed in libpng 1.2.21 [October 4, 2007]
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 *
 * This file contains routines that are only called from within
 * libpng itself during the course of reading an image.
 */

#define PNG_INTERNAL

#if defined(PNG_READ_SUPPORTED)

#if defined(_WIN32_WCE) && (_WIN32_WCE<0x500)
#  define WIN32_WCE_OLD
#endif

#ifdef PNG_FLOATING_POINT_SUPPORTED
#  if defined(WIN32_WCE_OLD)
/* strtod() function is not supported on WindowsCE */
__inline double png_strtod(png_structp png_ptr, PNG_CONST char *nptr, char **endptr)
{
   double result = 0;
   int len;
   wchar_t *str, *end;

   len = MultiByteToWideChar(CP_ACP, 0, nptr, -1, NULL, 0);
   str = (wchar_t *)png_malloc(png_ptr, len * sizeof(wchar_t));
   if ( NULL != str )
   {
	  MultiByteToWideChar(CP_ACP, 0, nptr, -1, str, len);
	  result = wcstod(str, &end);
	  len = WideCharToMultiByte(CP_ACP, 0, end, -1, NULL, 0, NULL, NULL);
	  *endptr = (char *)nptr + (png_strlen(nptr) - len + 1);
	  png_free(png_ptr, str);
   }
   return result;
}
#  else
#    define png_strtod(p,a,b) strtod(a,b)
#  endif
#endif

png_uint_32 PNGAPI
png_get_uint_31(png_structp png_ptr, png_bytep buf)
{
   png_uint_32 i = png_get_uint_32(buf);
   if (i > PNG_UINT_31_MAX)
	 png_error(png_ptr, "PNG unsigned integer out of range.");
   return (i);
}
#ifndef PNG_READ_BIG_ENDIAN_SUPPORTED
/* Grab an unsigned 32-bit integer from a buffer in big-endian format. */
png_uint_32 PNGAPI
png_get_uint_32(png_bytep buf)
{
   png_uint_32 i = ((png_uint_32)(*buf) << 24) +
	  ((png_uint_32)(*(buf + 1)) << 16) +
	  ((png_uint_32)(*(buf + 2)) << 8) +
	  (png_uint_32)(*(buf + 3));

   return (i);
}

/* Grab a signed 32-bit integer from a buffer in big-endian format.  The
 * data is stored in the PNG file in two's complement format, and it is
 * assumed that the machine format for signed integers is the same. */
png_int_32 PNGAPI
png_get_int_32(png_bytep buf)
{
   png_int_32 i = ((png_int_32)(*buf) << 24) +
	  ((png_int_32)(*(buf + 1)) << 16) +
	  ((png_int_32)(*(buf + 2)) << 8) +
	  (png_int_32)(*(buf + 3));

   return (i);
}

/* Grab an unsigned 16-bit integer from a buffer in big-endian format. */
png_uint_16 PNGAPI
png_get_uint_16(png_bytep buf)
{
   png_uint_16 i = (png_uint_16)(((png_uint_16)(*buf) << 8) +
	  (png_uint_16)(*(buf + 1)));

   return (i);
}
#endif /* PNG_READ_BIG_ENDIAN_SUPPORTED */

/* Read data, and (optionally) run it through the CRC. */
void /* PRIVATE */
png_crc_read(png_structp png_ptr, png_bytep buf, png_size_t length)
{
   if(png_ptr == NULL) return;
   png_read_data(png_ptr, buf, length);
   png_calculate_crc(png_ptr, buf, length);
}

/* Optionally skip data and then check the CRC.  Depending on whether we
   are reading a ancillary or critical chunk, and how the program has set
   things up, we may calculate the CRC on the data and print a message.
   Returns '1' if there was a CRC error, '0' otherwise. */
int /* PRIVATE */
png_crc_finish(png_structp png_ptr, png_uint_32 skip)
{
   png_size_t i;
   png_size_t istop = png_ptr->zbuf_size;

   for (i = (png_size_t)skip; i > istop; i -= istop)
   {
	  png_crc_read(png_ptr, png_ptr->zbuf, png_ptr->zbuf_size);
   }
   if (i)
   {
	  png_crc_read(png_ptr, png_ptr->zbuf, i);
   }

   if (png_crc_error(png_ptr))
   {
	  if (((png_ptr->chunk_name[0] & 0x20) &&                /* Ancillary */
		   !(png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN)) ||
		  (!(png_ptr->chunk_name[0] & 0x20) &&             /* Critical  */
		  (png_ptr->flags & PNG_FLAG_CRC_CRITICAL_USE)))
	  {
		 png_chunk_warning(png_ptr, "CRC error");
	  }
	  else
	  {
		 png_chunk_error(png_ptr, "CRC error");
	  }
	  return (1);
   }

   return (0);
}

/* Compare the CRC stored in the PNG file with that calculated by libpng from
   the data it has read thus far. */
int /* PRIVATE */
png_crc_error(png_structp png_ptr)
{
   png_byte crc_bytes[4];
   png_uint_32 crc;
   int need_crc = 1;

   if (png_ptr->chunk_name[0] & 0x20)                     /* ancillary */
   {
	  if ((png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_MASK) ==
		  (PNG_FLAG_CRC_ANCILLARY_USE | PNG_FLAG_CRC_ANCILLARY_NOWARN))
		 need_crc = 0;
   }
   else                                                    /* critical */
   {
	  if (png_ptr->flags & PNG_FLAG_CRC_CRITICAL_IGNORE)
		 need_crc = 0;
   }

   png_read_data(png_ptr, crc_bytes, 4);

   if (need_crc)
   {
	  crc = png_get_uint_32(crc_bytes);
	  return ((int)(crc != png_ptr->crc));
   }
   else
	  return (0);
}

#if defined(PNG_READ_zTXt_SUPPORTED) || defined(PNG_READ_iTXt_SUPPORTED) || \
	defined(PNG_READ_iCCP_SUPPORTED)
/*
 * Decompress trailing data in a chunk.  The assumption is that chunkdata
 * points at an allocated area holding the contents of a chunk with a
 * trailing compressed part.  What we get back is an allocated area
 * holding the original prefix part and an uncompressed version of the
 * trailing part (the malloc area passed in is freed).
 */
png_charp /* PRIVATE */
png_decompress_chunk(png_structp png_ptr, int comp_type,
							  png_charp chunkdata, png_size_t chunklength,
							  png_size_t prefix_size, png_size_t *newlength)
{
   static PNG_CONST char msg[] = "Error decoding compressed text";
   png_charp text;
   png_size_t text_size;

   if (comp_type == PNG_COMPRESSION_TYPE_BASE)
   {
	  int ret = Z_OK;
	  png_ptr->zstream.next_in = (png_bytep)(chunkdata + prefix_size);
	  png_ptr->zstream.avail_in = (uInt)(chunklength - prefix_size);
	  png_ptr->zstream.next_out = png_ptr->zbuf;
	  png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;

	  text_size = 0;
	  text = NULL;

	  while (png_ptr->zstream.avail_in)
	  {
		 ret = inflate(&png_ptr->zstream, Z_PARTIAL_FLUSH);
		 if (ret != Z_OK && ret != Z_STREAM_END)
		 {
			if (png_ptr->zstream.msg != NULL)
			   png_warning(png_ptr, png_ptr->zstream.msg);
			else
			   png_warning(png_ptr, msg);
			inflateReset(&png_ptr->zstream);
			png_ptr->zstream.avail_in = 0;

			if (text ==  NULL)
			{
			   text_size = prefix_size + png_sizeof(msg) + 1;
			   text = (png_charp)png_malloc_warn(png_ptr, text_size);
			   if (text ==  NULL)
				 {
					png_free(png_ptr,chunkdata);
					png_error(png_ptr,"Not enough memory to decompress chunk");
				 }
			   png_memcpy(text, chunkdata, prefix_size);
			}

			text[text_size - 1] = 0x00;

			/* Copy what we can of the error message into the text chunk */
			text_size = (png_size_t)(chunklength - (text - chunkdata) - 1);
			text_size = png_sizeof(msg) > text_size ? text_size :
			   png_sizeof(msg);
			png_memcpy(text + prefix_size, msg, text_size + 1);
			break;
		 }
		 if (!png_ptr->zstream.avail_out || ret == Z_STREAM_END)
		 {
			if (text == NULL)
			{
			   text_size = prefix_size +
				   png_ptr->zbuf_size - png_ptr->zstream.avail_out;
			   text = (png_charp)png_malloc_warn(png_ptr, text_size + 1);
			   if (text ==  NULL)
				 {
					png_free(png_ptr,chunkdata);
					png_error(png_ptr,"Not enough memory to decompress chunk.");
				 }
			   png_memcpy(text + prefix_size, png_ptr->zbuf,
					text_size - prefix_size);
			   png_memcpy(text, chunkdata, prefix_size);
			   *(text + text_size) = 0x00;
			}
			else
			{
			   png_charp tmp;

			   tmp = text;
			   text = (png_charp)png_malloc_warn(png_ptr,
				  (png_uint_32)(text_size +
				  png_ptr->zbuf_size - png_ptr->zstream.avail_out + 1));
			   if (text == NULL)
			   {
				  png_free(png_ptr, tmp);
				  png_free(png_ptr, chunkdata);
				  png_error(png_ptr,"Not enough memory to decompress chunk..");
			   }
			   png_memcpy(text, tmp, text_size);
			   png_free(png_ptr, tmp);
			   png_memcpy(text + text_size, png_ptr->zbuf,
				  (png_ptr->zbuf_size - png_ptr->zstream.avail_out));
			   text_size += png_ptr->zbuf_size - png_ptr->zstream.avail_out;
			   *(text + text_size) = 0x00;
			}
			if (ret == Z_STREAM_END)
			   break;
			else
			{
			   png_ptr->zstream.next_out = png_ptr->zbuf;
			   png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
			}
		 }
	  }
	  if (ret != Z_STREAM_END)
	  {
#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
		 char umsg[52];

		 if (ret == Z_BUF_ERROR)
			png_snprintf(umsg, 52,
				"Buffer error in compressed datastream in %s chunk",
				png_ptr->chunk_name);
		 else if (ret == Z_DATA_ERROR)
			png_snprintf(umsg, 52,
				"Data error in compressed datastream in %s chunk",
				png_ptr->chunk_name);
		 else
			png_snprintf(umsg, 52,
				"Incomplete compressed datastream in %s chunk",
				png_ptr->chunk_name);
		 png_warning(png_ptr, umsg);
#else
		 png_warning(png_ptr,
			"Incomplete compressed datastream in chunk other than IDAT");
#endif
		 text_size=prefix_size;
		 if (text ==  NULL)
		 {
			text = (png_charp)png_malloc_warn(png_ptr, text_size+1);
			if (text == NULL)
			  {
				png_free(png_ptr, chunkdata);
				png_error(png_ptr,"Not enough memory for text.");
			  }
			png_memcpy(text, chunkdata, prefix_size);
		 }
		 *(text + text_size) = 0x00;
	  }

	  inflateReset(&png_ptr->zstream);
	  png_ptr->zstream.avail_in = 0;

	  png_free(png_ptr, chunkdata);
	  chunkdata = text;
	  *newlength=text_size;
   }
   else /* if (comp_type != PNG_COMPRESSION_TYPE_BASE) */
   {
#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
	  char umsg[50];

	  png_snprintf(umsg, 50,
		 "Unknown zTXt compression type %d", comp_type);
	  png_warning(png_ptr, umsg);
#else
	  png_warning(png_ptr, "Unknown zTXt compression type");
#endif

	  *(chunkdata + prefix_size) = 0x00;
	  *newlength=prefix_size;
   }

   return chunkdata;
}
#endif

/* read and check the IDHR chunk */
void /* PRIVATE */
png_handle_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_byte buf[13];
   png_uint_32 width, height;
   int bit_depth, color_type, compression_type, filter_type;
   int interlace_type;

   png_debug(1, "in png_handle_IHDR\n");

   if (png_ptr->mode & PNG_HAVE_IHDR)
	  png_error(png_ptr, "Out of place IHDR");

   /* check the length */
   if (length != 13)
	  png_error(png_ptr, "Invalid IHDR chunk");

   png_ptr->mode |= PNG_HAVE_IHDR;

   png_crc_read(png_ptr, buf, 13);
   png_crc_finish(png_ptr, 0);

   width = png_get_uint_31(png_ptr, buf);
   height = png_get_uint_31(png_ptr, buf + 4);
   bit_depth = buf[8];
   color_type = buf[9];
   compression_type = buf[10];
   filter_type = buf[11];
   interlace_type = buf[12];

   /* set internal variables */
   png_ptr->width = width;
   png_ptr->height = height;
   png_ptr->bit_depth = (png_byte)bit_depth;
   png_ptr->interlaced = (png_byte)interlace_type;
   png_ptr->color_type = (png_byte)color_type;
#if defined(PNG_MNG_FEATURES_SUPPORTED)
   png_ptr->filter_type = (png_byte)filter_type;
#endif
   png_ptr->compression_type = (png_byte)compression_type;

   /* find number of channels */
   switch (png_ptr->color_type)
   {
	  case PNG_COLOR_TYPE_GRAY:
	  case PNG_COLOR_TYPE_PALETTE:
		 png_ptr->channels = 1;
		 break;
	  case PNG_COLOR_TYPE_RGB:
		 png_ptr->channels = 3;
		 break;
	  case PNG_COLOR_TYPE_GRAY_ALPHA:
		 png_ptr->channels = 2;
		 break;
	  case PNG_COLOR_TYPE_RGB_ALPHA:
		 png_ptr->channels = 4;
		 break;
   }

   /* set up other useful info */
   png_ptr->pixel_depth = (png_byte)(png_ptr->bit_depth *
   png_ptr->channels);
   png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth,png_ptr->width);
   png_debug1(3,"bit_depth = %d\n", png_ptr->bit_depth);
   png_debug1(3,"channels = %d\n", png_ptr->channels);
   png_debug1(3,"rowbytes = %lu\n", png_ptr->rowbytes);
   png_set_IHDR(png_ptr, info_ptr, width, height, bit_depth,
	  color_type, interlace_type, compression_type, filter_type);
}

/* read and check the palette */
void /* PRIVATE */
png_handle_PLTE(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_color palette[PNG_MAX_PALETTE_LENGTH];
   int num, i;
#ifndef PNG_NO_POINTER_INDEXING
   png_colorp pal_ptr;
#endif

   png_debug(1, "in png_handle_PLTE\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before PLTE");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid PLTE after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (png_ptr->mode & PNG_HAVE_PLTE)
	  png_error(png_ptr, "Duplicate PLTE chunk");

   png_ptr->mode |= PNG_HAVE_PLTE;

   if (!(png_ptr->color_type&PNG_COLOR_MASK_COLOR))
   {
	  png_warning(png_ptr,
		"Ignoring PLTE chunk in grayscale PNG");
	  png_crc_finish(png_ptr, length);
	  return;
   }
#if !defined(PNG_READ_OPT_PLTE_SUPPORTED)
   if (png_ptr->color_type != PNG_COLOR_TYPE_PALETTE)
   {
	  png_crc_finish(png_ptr, length);
	  return;
   }
#endif

   if (length > 3*PNG_MAX_PALETTE_LENGTH || length % 3)
   {
	  if (png_ptr->color_type != PNG_COLOR_TYPE_PALETTE)
	  {
		 png_warning(png_ptr, "Invalid palette chunk");
		 png_crc_finish(png_ptr, length);
		 return;
	  }
	  else
	  {
		 png_error(png_ptr, "Invalid palette chunk");
	  }
   }

   num = (int)length / 3;

#ifndef PNG_NO_POINTER_INDEXING
   for (i = 0, pal_ptr = palette; i < num; i++, pal_ptr++)
   {
	  png_byte buf[3];

	  png_crc_read(png_ptr, buf, 3);
	  pal_ptr->red = buf[0];
	  pal_ptr->green = buf[1];
	  pal_ptr->blue = buf[2];
   }
#else
   for (i = 0; i < num; i++)
   {
	  png_byte buf[3];

	  png_crc_read(png_ptr, buf, 3);
	  /* don't depend upon png_color being any order */
	  palette[i].red = buf[0];
	  palette[i].green = buf[1];
	  palette[i].blue = buf[2];
   }
#endif

   /* If we actually NEED the PLTE chunk (ie for a paletted image), we do
	  whatever the normal CRC configuration tells us.  However, if we
	  have an RGB image, the PLTE can be considered ancillary, so
	  we will act as though it is. */
#if !defined(PNG_READ_OPT_PLTE_SUPPORTED)
   if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
#endif
   {
	  png_crc_finish(png_ptr, 0);
   }
#if !defined(PNG_READ_OPT_PLTE_SUPPORTED)
   else if (png_crc_error(png_ptr))  /* Only if we have a CRC error */
   {
	  /* If we don't want to use the data from an ancillary chunk,
		 we have two options: an error abort, or a warning and we
		 ignore the data in this chunk (which should be OK, since
		 it's considered ancillary for a RGB or RGBA image). */
	  if (!(png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_USE))
	  {
		 if (png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN)
		 {
			png_chunk_error(png_ptr, "CRC error");
		 }
		 else
		 {
			png_chunk_warning(png_ptr, "CRC error");
			return;
		 }
	  }
	  /* Otherwise, we (optionally) emit a warning and use the chunk. */
	  else if (!(png_ptr->flags & PNG_FLAG_CRC_ANCILLARY_NOWARN))
	  {
		 png_chunk_warning(png_ptr, "CRC error");
	  }
   }
#endif

   png_set_PLTE(png_ptr, info_ptr, palette, num);

#if defined(PNG_READ_tRNS_SUPPORTED)
   if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
   {
	  if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tRNS))
	  {
		 if (png_ptr->num_trans > (png_uint_16)num)
		 {
			png_warning(png_ptr, "Truncating incorrect tRNS chunk length");
			png_ptr->num_trans = (png_uint_16)num;
		 }
		 if (info_ptr->num_trans > (png_uint_16)num)
		 {
			png_warning(png_ptr, "Truncating incorrect info tRNS chunk length");
			info_ptr->num_trans = (png_uint_16)num;
		 }
	  }
   }
#endif

}

void /* PRIVATE */
png_handle_IEND(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_debug(1, "in png_handle_IEND\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR) || !(png_ptr->mode & PNG_HAVE_IDAT))
   {
	  png_error(png_ptr, "No image in file");
   }

   png_ptr->mode |= (PNG_AFTER_IDAT | PNG_HAVE_IEND);

   if (length != 0)
   {
	  png_warning(png_ptr, "Incorrect IEND chunk length");
   }
   png_crc_finish(png_ptr, length);

   info_ptr =info_ptr; /* quiet compiler warnings about unused info_ptr */
}

#if defined(PNG_READ_gAMA_SUPPORTED)
void /* PRIVATE */
png_handle_gAMA(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_fixed_point igamma;
#ifdef PNG_FLOATING_POINT_SUPPORTED
   float file_gamma;
#endif
   png_byte buf[4];

   png_debug(1, "in png_handle_gAMA\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before gAMA");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid gAMA after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (png_ptr->mode & PNG_HAVE_PLTE)
	  /* Should be an error, but we can cope with it */
	  png_warning(png_ptr, "Out of place gAMA chunk");

   if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA)
#if defined(PNG_READ_sRGB_SUPPORTED)
	  && !(info_ptr->valid & PNG_INFO_sRGB)
#endif
	  )
   {
	  png_warning(png_ptr, "Duplicate gAMA chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   if (length != 4)
   {
	  png_warning(png_ptr, "Incorrect gAMA chunk length");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   png_crc_read(png_ptr, buf, 4);
   if (png_crc_finish(png_ptr, 0))
	  return;

   igamma = (png_fixed_point)png_get_uint_32(buf);
   /* check for zero gamma */
   if (igamma == 0)
	  {
		 png_warning(png_ptr,
		   "Ignoring gAMA chunk with gamma=0");
		 return;
	  }

#if defined(PNG_READ_sRGB_SUPPORTED)
   if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sRGB))
	  if (PNG_OUT_OF_RANGE(igamma, 45500L, 500))
	  {
		 png_warning(png_ptr,
		   "Ignoring incorrect gAMA value when sRGB is also present");
#ifndef PNG_NO_CONSOLE_IO
		 fprintf(stderr, "gamma = (%d/100000)\n", (int)igamma);
#endif
		 return;
	  }
#endif /* PNG_READ_sRGB_SUPPORTED */

#ifdef PNG_FLOATING_POINT_SUPPORTED
   file_gamma = (float)igamma / (float)100000.0;
#  ifdef PNG_READ_GAMMA_SUPPORTED
	 png_ptr->gamma = file_gamma;
#  endif
	 png_set_gAMA(png_ptr, info_ptr, file_gamma);
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
   png_set_gAMA_fixed(png_ptr, info_ptr, igamma);
#endif
}
#endif

#if defined(PNG_READ_sBIT_SUPPORTED)
void /* PRIVATE */
png_handle_sBIT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_size_t truelen;
   png_byte buf[4];

   png_debug(1, "in png_handle_sBIT\n");

   buf[0] = buf[1] = buf[2] = buf[3] = 0;

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before sBIT");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid sBIT after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (png_ptr->mode & PNG_HAVE_PLTE)
   {
	  /* Should be an error, but we can cope with it */
	  png_warning(png_ptr, "Out of place sBIT chunk");
   }
   if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sBIT))
   {
	  png_warning(png_ptr, "Duplicate sBIT chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	  truelen = 3;
   else
	  truelen = (png_size_t)png_ptr->channels;

   if (length != truelen || length > 4)
   {
	  png_warning(png_ptr, "Incorrect sBIT chunk length");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   png_crc_read(png_ptr, buf, truelen);
   if (png_crc_finish(png_ptr, 0))
	  return;

   if (png_ptr->color_type & PNG_COLOR_MASK_COLOR)
   {
	  png_ptr->sig_bit.red = buf[0];
	  png_ptr->sig_bit.green = buf[1];
	  png_ptr->sig_bit.blue = buf[2];
	  png_ptr->sig_bit.alpha = buf[3];
   }
   else
   {
	  png_ptr->sig_bit.gray = buf[0];
	  png_ptr->sig_bit.red = buf[0];
	  png_ptr->sig_bit.green = buf[0];
	  png_ptr->sig_bit.blue = buf[0];
	  png_ptr->sig_bit.alpha = buf[1];
   }
   png_set_sBIT(png_ptr, info_ptr, &(png_ptr->sig_bit));
}
#endif

#if defined(PNG_READ_cHRM_SUPPORTED)
void /* PRIVATE */
png_handle_cHRM(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_byte buf[4];
#ifdef PNG_FLOATING_POINT_SUPPORTED
   float white_x, white_y, red_x, red_y, green_x, green_y, blue_x, blue_y;
#endif
   png_fixed_point int_x_white, int_y_white, int_x_red, int_y_red, int_x_green,
	  int_y_green, int_x_blue, int_y_blue;

   png_uint_32 uint_x, uint_y;

   png_debug(1, "in png_handle_cHRM\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before cHRM");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid cHRM after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (png_ptr->mode & PNG_HAVE_PLTE)
	  /* Should be an error, but we can cope with it */
	  png_warning(png_ptr, "Missing PLTE before cHRM");

   if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_cHRM)
#if defined(PNG_READ_sRGB_SUPPORTED)
	  && !(info_ptr->valid & PNG_INFO_sRGB)
#endif
	  )
   {
	  png_warning(png_ptr, "Duplicate cHRM chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   if (length != 32)
   {
	  png_warning(png_ptr, "Incorrect cHRM chunk length");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   png_crc_read(png_ptr, buf, 4);
   uint_x = png_get_uint_32(buf);

   png_crc_read(png_ptr, buf, 4);
   uint_y = png_get_uint_32(buf);

   if (uint_x > 80000L || uint_y > 80000L ||
	  uint_x + uint_y > 100000L)
   {
	  png_warning(png_ptr, "Invalid cHRM white point");
	  png_crc_finish(png_ptr, 24);
	  return;
   }
   int_x_white = (png_fixed_point)uint_x;
   int_y_white = (png_fixed_point)uint_y;

   png_crc_read(png_ptr, buf, 4);
   uint_x = png_get_uint_32(buf);

   png_crc_read(png_ptr, buf, 4);
   uint_y = png_get_uint_32(buf);

   if (uint_x + uint_y > 100000L)
   {
	  png_warning(png_ptr, "Invalid cHRM red point");
	  png_crc_finish(png_ptr, 16);
	  return;
   }
   int_x_red = (png_fixed_point)uint_x;
   int_y_red = (png_fixed_point)uint_y;

   png_crc_read(png_ptr, buf, 4);
   uint_x = png_get_uint_32(buf);

   png_crc_read(png_ptr, buf, 4);
   uint_y = png_get_uint_32(buf);

   if (uint_x + uint_y > 100000L)
   {
	  png_warning(png_ptr, "Invalid cHRM green point");
	  png_crc_finish(png_ptr, 8);
	  return;
   }
   int_x_green = (png_fixed_point)uint_x;
   int_y_green = (png_fixed_point)uint_y;

   png_crc_read(png_ptr, buf, 4);
   uint_x = png_get_uint_32(buf);

   png_crc_read(png_ptr, buf, 4);
   uint_y = png_get_uint_32(buf);

   if (uint_x + uint_y > 100000L)
   {
	  png_warning(png_ptr, "Invalid cHRM blue point");
	  png_crc_finish(png_ptr, 0);
	  return;
   }
   int_x_blue = (png_fixed_point)uint_x;
   int_y_blue = (png_fixed_point)uint_y;

#ifdef PNG_FLOATING_POINT_SUPPORTED
   white_x = (float)int_x_white / (float)100000.0;
   white_y = (float)int_y_white / (float)100000.0;
   red_x   = (float)int_x_red   / (float)100000.0;
   red_y   = (float)int_y_red   / (float)100000.0;
   green_x = (float)int_x_green / (float)100000.0;
   green_y = (float)int_y_green / (float)100000.0;
   blue_x  = (float)int_x_blue  / (float)100000.0;
   blue_y  = (float)int_y_blue  / (float)100000.0;
#endif

#if defined(PNG_READ_sRGB_SUPPORTED)
   if ((info_ptr != NULL) && (info_ptr->valid & PNG_INFO_sRGB))
	  {
	  if (PNG_OUT_OF_RANGE(int_x_white, 31270,  1000) ||
		  PNG_OUT_OF_RANGE(int_y_white, 32900,  1000) ||
		  PNG_OUT_OF_RANGE(int_x_red,   64000L, 1000) ||
		  PNG_OUT_OF_RANGE(int_y_red,   33000,  1000) ||
		  PNG_OUT_OF_RANGE(int_x_green, 30000,  1000) ||
		  PNG_OUT_OF_RANGE(int_y_green, 60000L, 1000) ||
		  PNG_OUT_OF_RANGE(int_x_blue,  15000,  1000) ||
		  PNG_OUT_OF_RANGE(int_y_blue,   6000,  1000))
		 {
			png_warning(png_ptr,
			  "Ignoring incorrect cHRM value when sRGB is also present");
#ifndef PNG_NO_CONSOLE_IO
#ifdef PNG_FLOATING_POINT_SUPPORTED
			fprintf(stderr,"wx=%f, wy=%f, rx=%f, ry=%f\n",
			   white_x, white_y, red_x, red_y);
			fprintf(stderr,"gx=%f, gy=%f, bx=%f, by=%f\n",
			   green_x, green_y, blue_x, blue_y);
#else
			fprintf(stderr,"wx=%ld, wy=%ld, rx=%ld, ry=%ld\n",
			   int_x_white, int_y_white, int_x_red, int_y_red);
			fprintf(stderr,"gx=%ld, gy=%ld, bx=%ld, by=%ld\n",
			   int_x_green, int_y_green, int_x_blue, int_y_blue);
#endif
#endif /* PNG_NO_CONSOLE_IO */
		 }
		 png_crc_finish(png_ptr, 0);
		 return;
	  }
#endif /* PNG_READ_sRGB_SUPPORTED */

#ifdef PNG_FLOATING_POINT_SUPPORTED
   png_set_cHRM(png_ptr, info_ptr,
	  white_x, white_y, red_x, red_y, green_x, green_y, blue_x, blue_y);
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
   png_set_cHRM_fixed(png_ptr, info_ptr,
	  int_x_white, int_y_white, int_x_red, int_y_red, int_x_green,
	  int_y_green, int_x_blue, int_y_blue);
#endif
   if (png_crc_finish(png_ptr, 0))
	  return;
}
#endif

#if defined(PNG_READ_sRGB_SUPPORTED)
void /* PRIVATE */
png_handle_sRGB(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   int intent;
   png_byte buf[1];

   png_debug(1, "in png_handle_sRGB\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before sRGB");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid sRGB after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (png_ptr->mode & PNG_HAVE_PLTE)
	  /* Should be an error, but we can cope with it */
	  png_warning(png_ptr, "Out of place sRGB chunk");

   if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sRGB))
   {
	  png_warning(png_ptr, "Duplicate sRGB chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   if (length != 1)
   {
	  png_warning(png_ptr, "Incorrect sRGB chunk length");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   png_crc_read(png_ptr, buf, 1);
   if (png_crc_finish(png_ptr, 0))
	  return;

   intent = buf[0];
   /* check for bad intent */
   if (intent >= PNG_sRGB_INTENT_LAST)
   {
	  png_warning(png_ptr, "Unknown sRGB intent");
	  return;
   }

#if defined(PNG_READ_gAMA_SUPPORTED) && defined(PNG_READ_GAMMA_SUPPORTED)
   if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_gAMA))
   {
   png_fixed_point igamma;
#ifdef PNG_FIXED_POINT_SUPPORTED
	  igamma=info_ptr->int_gamma;
#else
#  ifdef PNG_FLOATING_POINT_SUPPORTED
	  igamma=(png_fixed_point)(info_ptr->gamma * 100000.);
#  endif
#endif
	  if (PNG_OUT_OF_RANGE(igamma, 45500L, 500))
	  {
		 png_warning(png_ptr,
		   "Ignoring incorrect gAMA value when sRGB is also present");
#ifndef PNG_NO_CONSOLE_IO
#  ifdef PNG_FIXED_POINT_SUPPORTED
		 fprintf(stderr,"incorrect gamma=(%d/100000)\n",(int)png_ptr->int_gamma);
#  else
#    ifdef PNG_FLOATING_POINT_SUPPORTED
		 fprintf(stderr,"incorrect gamma=%f\n",png_ptr->gamma);
#    endif
#  endif
#endif
	  }
   }
#endif /* PNG_READ_gAMA_SUPPORTED */

#ifdef PNG_READ_cHRM_SUPPORTED
#ifdef PNG_FIXED_POINT_SUPPORTED
   if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_cHRM))
	  if (PNG_OUT_OF_RANGE(info_ptr->int_x_white, 31270,  1000) ||
		  PNG_OUT_OF_RANGE(info_ptr->int_y_white, 32900,  1000) ||
		  PNG_OUT_OF_RANGE(info_ptr->int_x_red,   64000L, 1000) ||
		  PNG_OUT_OF_RANGE(info_ptr->int_y_red,   33000,  1000) ||
		  PNG_OUT_OF_RANGE(info_ptr->int_x_green, 30000,  1000) ||
		  PNG_OUT_OF_RANGE(info_ptr->int_y_green, 60000L, 1000) ||
		  PNG_OUT_OF_RANGE(info_ptr->int_x_blue,  15000,  1000) ||
		  PNG_OUT_OF_RANGE(info_ptr->int_y_blue,   6000,  1000))
		 {
			png_warning(png_ptr,
			  "Ignoring incorrect cHRM value when sRGB is also present");
		 }
#endif /* PNG_FIXED_POINT_SUPPORTED */
#endif /* PNG_READ_cHRM_SUPPORTED */

   png_set_sRGB_gAMA_and_cHRM(png_ptr, info_ptr, intent);
}
#endif /* PNG_READ_sRGB_SUPPORTED */

#if defined(PNG_READ_iCCP_SUPPORTED)
void /* PRIVATE */
png_handle_iCCP(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
/* Note: this does not properly handle chunks that are > 64K under DOS */
{
   png_charp chunkdata;
   png_byte compression_type;
   png_bytep pC;
   png_charp profile;
   png_uint_32 skip = 0;
   png_uint_32 profile_size, profile_length;
   png_size_t slength, prefix_length, data_length;

   png_debug(1, "in png_handle_iCCP\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before iCCP");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid iCCP after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (png_ptr->mode & PNG_HAVE_PLTE)
	  /* Should be an error, but we can cope with it */
	  png_warning(png_ptr, "Out of place iCCP chunk");

   if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_iCCP))
   {
	  png_warning(png_ptr, "Duplicate iCCP chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

#ifdef PNG_MAX_MALLOC_64K
   if (length > (png_uint_32)65535L)
   {
	  png_warning(png_ptr, "iCCP chunk too large to fit in memory");
	  skip = length - (png_uint_32)65535L;
	  length = (png_uint_32)65535L;
   }
#endif

   chunkdata = (png_charp)png_malloc(png_ptr, length + 1);
   slength = (png_size_t)length;
   png_crc_read(png_ptr, (png_bytep)chunkdata, slength);

   if (png_crc_finish(png_ptr, skip))
   {
	  png_free(png_ptr, chunkdata);
	  return;
   }

   chunkdata[slength] = 0x00;

   for (profile = chunkdata; *profile; profile++)
	  /* empty loop to find end of name */ ;

   ++profile;

   /* there should be at least one zero (the compression type byte)
	  following the separator, and we should be on it  */
   if ( profile >= chunkdata + slength - 1)
   {
	  png_free(png_ptr, chunkdata);
	  png_warning(png_ptr, "Malformed iCCP chunk");
	  return;
   }

   /* compression_type should always be zero */
   compression_type = *profile++;
   if (compression_type)
   {
	  png_warning(png_ptr, "Ignoring nonzero compression type in iCCP chunk");
	  compression_type=0x00;  /* Reset it to zero (libpng-1.0.6 through 1.0.8
								 wrote nonzero) */
   }

   prefix_length = profile - chunkdata;
   chunkdata = png_decompress_chunk(png_ptr, compression_type, chunkdata,
									slength, prefix_length, &data_length);

   profile_length = data_length - prefix_length;

   if ( prefix_length > data_length || profile_length < 4)
   {
	  png_free(png_ptr, chunkdata);
	  png_warning(png_ptr, "Profile size field missing from iCCP chunk");
	  return;
   }

   /* Check the profile_size recorded in the first 32 bits of the ICC profile */
   pC = (png_bytep)(chunkdata+prefix_length);
   profile_size = ((*(pC  ))<<24) |
				  ((*(pC+1))<<16) |
				  ((*(pC+2))<< 8) |
				  ((*(pC+3))    );

   if(profile_size < profile_length)
	  profile_length = profile_size;

   if(profile_size > profile_length)
   {
	  png_free(png_ptr, chunkdata);
	  png_warning(png_ptr, "Ignoring truncated iCCP profile.");
	  return;
   }

   png_set_iCCP(png_ptr, info_ptr, chunkdata, compression_type,
				chunkdata + prefix_length, profile_length);
   png_free(png_ptr, chunkdata);
}
#endif /* PNG_READ_iCCP_SUPPORTED */

#if defined(PNG_READ_sPLT_SUPPORTED)
void /* PRIVATE */
png_handle_sPLT(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
/* Note: this does not properly handle chunks that are > 64K under DOS */
{
   png_bytep chunkdata;
   png_bytep entry_start;
   png_sPLT_t new_palette;
#ifdef PNG_NO_POINTER_INDEXING
   png_sPLT_entryp pp;
#endif
   int data_length, entry_size, i;
   png_uint_32 skip = 0;
   png_size_t slength;

   png_debug(1, "in png_handle_sPLT\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before sPLT");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid sPLT after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }

#ifdef PNG_MAX_MALLOC_64K
   if (length > (png_uint_32)65535L)
   {
	  png_warning(png_ptr, "sPLT chunk too large to fit in memory");
	  skip = length - (png_uint_32)65535L;
	  length = (png_uint_32)65535L;
   }
#endif

   chunkdata = (png_bytep)png_malloc(png_ptr, length + 1);
   slength = (png_size_t)length;
   png_crc_read(png_ptr, (png_bytep)chunkdata, slength);

   if (png_crc_finish(png_ptr, skip))
   {
	  png_free(png_ptr, chunkdata);
	  return;
   }

   chunkdata[slength] = 0x00;

   for (entry_start = chunkdata; *entry_start; entry_start++)
	  /* empty loop to find end of name */ ;
   ++entry_start;

   /* a sample depth should follow the separator, and we should be on it  */
   if (entry_start > chunkdata + slength - 2)
   {
	  png_free(png_ptr, chunkdata);
	  png_warning(png_ptr, "malformed sPLT chunk");
	  return;
   }

   new_palette.depth = *entry_start++;
   entry_size = (new_palette.depth == 8 ? 6 : 10);
   data_length = (slength - (entry_start - chunkdata));

   /* integrity-check the data length */
   if (data_length % entry_size)
   {
	  png_free(png_ptr, chunkdata);
	  png_warning(png_ptr, "sPLT chunk has bad length");
	  return;
   }

   new_palette.nentries = (png_int_32) ( data_length / entry_size);
   if ((png_uint_32) new_palette.nentries > (png_uint_32) (PNG_SIZE_MAX /
	   png_sizeof(png_sPLT_entry)))
   {
	   png_warning(png_ptr, "sPLT chunk too long");
	   return;
   }
   new_palette.entries = (png_sPLT_entryp)png_malloc_warn(
	   png_ptr, new_palette.nentries * png_sizeof(png_sPLT_entry));
   if (new_palette.entries == NULL)
   {
	   png_warning(png_ptr, "sPLT chunk requires too much memory");
	   return;
   }

#ifndef PNG_NO_POINTER_INDEXING
   for (i = 0; i < new_palette.nentries; i++)
   {
	  png_sPLT_entryp pp = new_palette.entries + i;

	  if (new_palette.depth == 8)
	  {
		  pp->red = *entry_start++;
		  pp->green = *entry_start++;
		  pp->blue = *entry_start++;
		  pp->alpha = *entry_start++;
	  }
	  else
	  {
		  pp->red   = png_get_uint_16(entry_start); entry_start += 2;
		  pp->green = png_get_uint_16(entry_start); entry_start += 2;
		  pp->blue  = png_get_uint_16(entry_start); entry_start += 2;
		  pp->alpha = png_get_uint_16(entry_start); entry_start += 2;
	  }
	  pp->frequency = png_get_uint_16(entry_start); entry_start += 2;
   }
#else
   pp = new_palette.entries;
   for (i = 0; i < new_palette.nentries; i++)
   {

	  if (new_palette.depth == 8)
	  {
		  pp[i].red   = *entry_start++;
		  pp[i].green = *entry_start++;
		  pp[i].blue  = *entry_start++;
		  pp[i].alpha = *entry_start++;
	  }
	  else
	  {
		  pp[i].red   = png_get_uint_16(entry_start); entry_start += 2;
		  pp[i].green = png_get_uint_16(entry_start); entry_start += 2;
		  pp[i].blue  = png_get_uint_16(entry_start); entry_start += 2;
		  pp[i].alpha = png_get_uint_16(entry_start); entry_start += 2;
	  }
	  pp->frequency = png_get_uint_16(entry_start); entry_start += 2;
   }
#endif

   /* discard all chunk data except the name and stash that */
   new_palette.name = (png_charp)chunkdata;

   png_set_sPLT(png_ptr, info_ptr, &new_palette, 1);

   png_free(png_ptr, chunkdata);
   png_free(png_ptr, new_palette.entries);
}
#endif /* PNG_READ_sPLT_SUPPORTED */

#if defined(PNG_READ_tRNS_SUPPORTED)
void /* PRIVATE */
png_handle_tRNS(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_byte readbuf[PNG_MAX_PALETTE_LENGTH];
   int bit_mask;

   png_debug(1, "in png_handle_tRNS\n");

   /* For non-indexed color, mask off any bits in the tRNS value that
	* exceed the bit depth.  Some creators were writing extra bits there.
	* This is not needed for indexed color. */
   bit_mask = (1 << png_ptr->bit_depth) - 1;

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before tRNS");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid tRNS after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tRNS))
   {
	  png_warning(png_ptr, "Duplicate tRNS chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY)
   {
	  png_byte buf[2];

	  if (length != 2)
	  {
		 png_warning(png_ptr, "Incorrect tRNS chunk length");
		 png_crc_finish(png_ptr, length);
		 return;
	  }

	  png_crc_read(png_ptr, buf, 2);
	  png_ptr->num_trans = 1;
	  png_ptr->trans_values.gray = png_get_uint_16(buf) & bit_mask;
   }
   else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB)
   {
	  png_byte buf[6];

	  if (length != 6)
	  {
		 png_warning(png_ptr, "Incorrect tRNS chunk length");
		 png_crc_finish(png_ptr, length);
		 return;
	  }
	  png_crc_read(png_ptr, buf, (png_size_t)length);
	  png_ptr->num_trans = 1;
	  png_ptr->trans_values.red = png_get_uint_16(buf) & bit_mask;
	  png_ptr->trans_values.green = png_get_uint_16(buf + 2) & bit_mask;
	  png_ptr->trans_values.blue = png_get_uint_16(buf + 4) & bit_mask;
   }
   else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
   {
	  if (!(png_ptr->mode & PNG_HAVE_PLTE))
	  {
		 /* Should be an error, but we can cope with it. */
		 png_warning(png_ptr, "Missing PLTE before tRNS");
	  }
	  if (length > (png_uint_32)png_ptr->num_palette ||
		  length > PNG_MAX_PALETTE_LENGTH)
	  {
		 png_warning(png_ptr, "Incorrect tRNS chunk length");
		 png_crc_finish(png_ptr, length);
		 return;
	  }
	  if (length == 0)
	  {
		 png_warning(png_ptr, "Zero length tRNS chunk");
		 png_crc_finish(png_ptr, length);
		 return;
	  }
	  png_crc_read(png_ptr, readbuf, (png_size_t)length);
	  png_ptr->num_trans = (png_uint_16)length;
   }
   else
   {
	  png_warning(png_ptr, "tRNS chunk not allowed with alpha channel");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   if (png_crc_finish(png_ptr, 0))
   {
	  png_ptr->num_trans = 0;
	  return;
   }

   png_set_tRNS(png_ptr, info_ptr, readbuf, png_ptr->num_trans,
	  &(png_ptr->trans_values));
}
#endif

#if defined(PNG_READ_bKGD_SUPPORTED)
void /* PRIVATE */
png_handle_bKGD(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_size_t truelen;
   png_byte buf[6];

   png_debug(1, "in png_handle_bKGD\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before bKGD");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid bKGD after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE &&
			!(png_ptr->mode & PNG_HAVE_PLTE))
   {
	  png_warning(png_ptr, "Missing PLTE before bKGD");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_bKGD))
   {
	  png_warning(png_ptr, "Duplicate bKGD chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	  truelen = 1;
   else if (png_ptr->color_type & PNG_COLOR_MASK_COLOR)
	  truelen = 6;
   else
	  truelen = 2;

   if (length != truelen)
   {
	  png_warning(png_ptr, "Incorrect bKGD chunk length");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   png_crc_read(png_ptr, buf, truelen);
   if (png_crc_finish(png_ptr, 0))
	  return;

   /* We convert the index value into RGB components so that we can allow
	* arbitrary RGB values for background when we have transparency, and
	* so it is easy to determine the RGB values of the background color
	* from the info_ptr struct. */
   if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
   {
	  png_ptr->background.index = buf[0];
	  if(info_ptr->num_palette)
	  {
		  if(buf[0] > info_ptr->num_palette)
		  {
			 png_warning(png_ptr, "Incorrect bKGD chunk index value");
			 return;
		  }
		  png_ptr->background.red =
			 (png_uint_16)png_ptr->palette[buf[0]].red;
		  png_ptr->background.green =
			 (png_uint_16)png_ptr->palette[buf[0]].green;
		  png_ptr->background.blue =
			 (png_uint_16)png_ptr->palette[buf[0]].blue;
	  }
   }
   else if (!(png_ptr->color_type & PNG_COLOR_MASK_COLOR)) /* GRAY */
   {
	  png_ptr->background.red =
	  png_ptr->background.green =
	  png_ptr->background.blue =
	  png_ptr->background.gray = png_get_uint_16(buf);
   }
   else
   {
	  png_ptr->background.red = png_get_uint_16(buf);
	  png_ptr->background.green = png_get_uint_16(buf + 2);
	  png_ptr->background.blue = png_get_uint_16(buf + 4);
   }

   png_set_bKGD(png_ptr, info_ptr, &(png_ptr->background));
}
#endif

#if defined(PNG_READ_hIST_SUPPORTED)
void /* PRIVATE */
png_handle_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   unsigned int num, i;
   png_uint_16 readbuf[PNG_MAX_PALETTE_LENGTH];

   png_debug(1, "in png_handle_hIST\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before hIST");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid hIST after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (!(png_ptr->mode & PNG_HAVE_PLTE))
   {
	  png_warning(png_ptr, "Missing PLTE before hIST");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_hIST))
   {
	  png_warning(png_ptr, "Duplicate hIST chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   num = length / 2 ;
   if (num != (unsigned int) png_ptr->num_palette || num >
	  (unsigned int) PNG_MAX_PALETTE_LENGTH)
   {
	  png_warning(png_ptr, "Incorrect hIST chunk length");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   for (i = 0; i < num; i++)
   {
	  png_byte buf[2];

	  png_crc_read(png_ptr, buf, 2);
	  readbuf[i] = png_get_uint_16(buf);
   }

   if (png_crc_finish(png_ptr, 0))
	  return;

   png_set_hIST(png_ptr, info_ptr, readbuf);
}
#endif

#if defined(PNG_READ_pHYs_SUPPORTED)
void /* PRIVATE */
png_handle_pHYs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_byte buf[9];
   png_uint_32 res_x, res_y;
   int unit_type;

   png_debug(1, "in png_handle_pHYs\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before pHYs");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid pHYs after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_pHYs))
   {
	  png_warning(png_ptr, "Duplicate pHYs chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   if (length != 9)
   {
	  png_warning(png_ptr, "Incorrect pHYs chunk length");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   png_crc_read(png_ptr, buf, 9);
   if (png_crc_finish(png_ptr, 0))
	  return;

   res_x = png_get_uint_32(buf);
   res_y = png_get_uint_32(buf + 4);
   unit_type = buf[8];
   png_set_pHYs(png_ptr, info_ptr, res_x, res_y, unit_type);
}
#endif

#if defined(PNG_READ_oFFs_SUPPORTED)
void /* PRIVATE */
png_handle_oFFs(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_byte buf[9];
   png_int_32 offset_x, offset_y;
   int unit_type;

   png_debug(1, "in png_handle_oFFs\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before oFFs");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid oFFs after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_oFFs))
   {
	  png_warning(png_ptr, "Duplicate oFFs chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   if (length != 9)
   {
	  png_warning(png_ptr, "Incorrect oFFs chunk length");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   png_crc_read(png_ptr, buf, 9);
   if (png_crc_finish(png_ptr, 0))
	  return;

   offset_x = png_get_int_32(buf);
   offset_y = png_get_int_32(buf + 4);
   unit_type = buf[8];
   png_set_oFFs(png_ptr, info_ptr, offset_x, offset_y, unit_type);
}
#endif

#if defined(PNG_READ_pCAL_SUPPORTED)
/* read the pCAL chunk (described in the PNG Extensions document) */
void /* PRIVATE */
png_handle_pCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_charp purpose;
   png_int_32 X0, X1;
   png_byte type, nparams;
   png_charp buf, units, endptr;
   png_charpp params;
   png_size_t slength;
   int i;

   png_debug(1, "in png_handle_pCAL\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before pCAL");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid pCAL after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_pCAL))
   {
	  png_warning(png_ptr, "Duplicate pCAL chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   png_debug1(2, "Allocating and reading pCAL chunk data (%lu bytes)\n",
	  length + 1);
   purpose = (png_charp)png_malloc_warn(png_ptr, length + 1);
   if (purpose == NULL)
	 {
	   png_warning(png_ptr, "No memory for pCAL purpose.");
	   return;
	 }
   slength = (png_size_t)length;
   png_crc_read(png_ptr, (png_bytep)purpose, slength);

   if (png_crc_finish(png_ptr, 0))
   {
	  png_free(png_ptr, purpose);
	  return;
   }

   purpose[slength] = 0x00; /* null terminate the last string */

   png_debug(3, "Finding end of pCAL purpose string\n");
   for (buf = purpose; *buf; buf++)
	  /* empty loop */ ;

   endptr = purpose + slength;

   /* We need to have at least 12 bytes after the purpose string
	  in order to get the parameter information. */
   if (endptr <= buf + 12)
   {
	  png_warning(png_ptr, "Invalid pCAL data");
	  png_free(png_ptr, purpose);
	  return;
   }

   png_debug(3, "Reading pCAL X0, X1, type, nparams, and units\n");
   X0 = png_get_int_32((png_bytep)buf+1);
   X1 = png_get_int_32((png_bytep)buf+5);
   type = buf[9];
   nparams = buf[10];
   units = buf + 11;

   png_debug(3, "Checking pCAL equation type and number of parameters\n");
   /* Check that we have the right number of parameters for known
	  equation types. */
   if ((type == PNG_EQUATION_LINEAR && nparams != 2) ||
	   (type == PNG_EQUATION_BASE_E && nparams != 3) ||
	   (type == PNG_EQUATION_ARBITRARY && nparams != 3) ||
	   (type == PNG_EQUATION_HYPERBOLIC && nparams != 4))
   {
	  png_warning(png_ptr, "Invalid pCAL parameters for equation type");
	  png_free(png_ptr, purpose);
	  return;
   }
   else if (type >= PNG_EQUATION_LAST)
   {
	  png_warning(png_ptr, "Unrecognized equation type for pCAL chunk");
   }

   for (buf = units; *buf; buf++)
	  /* Empty loop to move past the units string. */ ;

   png_debug(3, "Allocating pCAL parameters array\n");
   params = (png_charpp)png_malloc_warn(png_ptr, (png_uint_32)(nparams
	  *png_sizeof(png_charp))) ;
   if (params == NULL)
	 {
	   png_free(png_ptr, purpose);
	   png_warning(png_ptr, "No memory for pCAL params.");
	   return;
	 }

   /* Get pointers to the start of each parameter string. */
   for (i = 0; i < (int)nparams; i++)
   {
	  buf++; /* Skip the null string terminator from previous parameter. */

	  png_debug1(3, "Reading pCAL parameter %d\n", i);
	  for (params[i] = buf; buf <= endptr && *buf != 0x00; buf++)
		 /* Empty loop to move past each parameter string */ ;

	  /* Make sure we haven't run out of data yet */
	  if (buf > endptr)
	  {
		 png_warning(png_ptr, "Invalid pCAL data");
		 png_free(png_ptr, purpose);
		 png_free(png_ptr, params);
		 return;
	  }
   }

   png_set_pCAL(png_ptr, info_ptr, purpose, X0, X1, type, nparams,
	  units, params);

   png_free(png_ptr, purpose);
   png_free(png_ptr, params);
}
#endif

#if defined(PNG_READ_sCAL_SUPPORTED)
/* read the sCAL chunk */
void /* PRIVATE */
png_handle_sCAL(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_charp buffer, ep;
#ifdef PNG_FLOATING_POINT_SUPPORTED
   double width, height;
   png_charp vp;
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
   png_charp swidth, sheight;
#endif
#endif
   png_size_t slength;

   png_debug(1, "in png_handle_sCAL\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before sCAL");
   else if (png_ptr->mode & PNG_HAVE_IDAT)
   {
	  png_warning(png_ptr, "Invalid sCAL after IDAT");
	  png_crc_finish(png_ptr, length);
	  return;
   }
   else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_sCAL))
   {
	  png_warning(png_ptr, "Duplicate sCAL chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   png_debug1(2, "Allocating and reading sCAL chunk data (%lu bytes)\n",
	  length + 1);
   buffer = (png_charp)png_malloc_warn(png_ptr, length + 1);
   if (buffer == NULL)
	 {
	   png_warning(png_ptr, "Out of memory while processing sCAL chunk");
	   return;
	 }
   slength = (png_size_t)length;
   png_crc_read(png_ptr, (png_bytep)buffer, slength);

   if (png_crc_finish(png_ptr, 0))
   {
	  png_free(png_ptr, buffer);
	  return;
   }

   buffer[slength] = 0x00; /* null terminate the last string */

   ep = buffer + 1;        /* skip unit byte */

#ifdef PNG_FLOATING_POINT_SUPPORTED
   width = png_strtod(png_ptr, ep, &vp);
   if (*vp)
   {
	   png_warning(png_ptr, "malformed width string in sCAL chunk");
	   return;
   }
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
   swidth = (png_charp)png_malloc_warn(png_ptr, png_strlen(ep) + 1);
   if (swidth == NULL)
	 {
	   png_warning(png_ptr, "Out of memory while processing sCAL chunk width");
	   return;
	 }
   png_memcpy(swidth, ep, (png_size_t)png_strlen(ep));
#endif
#endif

   for (ep = buffer; *ep; ep++)
	  /* empty loop */ ;
   ep++;

   if (buffer + slength < ep)
   {
	   png_warning(png_ptr, "Truncated sCAL chunk");
#if defined(PNG_FIXED_POINT_SUPPORTED) && \
	!defined(PNG_FLOATING_POINT_SUPPORTED)
	   png_free(png_ptr, swidth);
#endif
	  png_free(png_ptr, buffer);
	   return;
   }

#ifdef PNG_FLOATING_POINT_SUPPORTED
   height = png_strtod(png_ptr, ep, &vp);
   if (*vp)
   {
	   png_warning(png_ptr, "malformed height string in sCAL chunk");
	   return;
   }
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
   sheight = (png_charp)png_malloc_warn(png_ptr, png_strlen(ep) + 1);
   if (swidth == NULL)
	 {
	   png_warning(png_ptr, "Out of memory while processing sCAL chunk height");
	   return;
	 }
   png_memcpy(sheight, ep, (png_size_t)png_strlen(ep));
#endif
#endif

   if (buffer + slength < ep
#ifdef PNG_FLOATING_POINT_SUPPORTED
	  || width <= 0. || height <= 0.
#endif
	  )
   {
	  png_warning(png_ptr, "Invalid sCAL data");
	  png_free(png_ptr, buffer);
#if defined(PNG_FIXED_POINT_SUPPORTED) && !defined(PNG_FLOATING_POINT_SUPPORTED)
	  png_free(png_ptr, swidth);
	  png_free(png_ptr, sheight);
#endif
	  return;
   }

#ifdef PNG_FLOATING_POINT_SUPPORTED
   png_set_sCAL(png_ptr, info_ptr, buffer[0], width, height);
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
   png_set_sCAL_s(png_ptr, info_ptr, buffer[0], swidth, sheight);
#endif
#endif

   png_free(png_ptr, buffer);
#if defined(PNG_FIXED_POINT_SUPPORTED) && !defined(PNG_FLOATING_POINT_SUPPORTED)
   png_free(png_ptr, swidth);
   png_free(png_ptr, sheight);
#endif
}
#endif

#if defined(PNG_READ_tIME_SUPPORTED)
void /* PRIVATE */
png_handle_tIME(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_byte buf[7];
   png_time mod_time;

   png_debug(1, "in png_handle_tIME\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Out of place tIME chunk");
   else if (info_ptr != NULL && (info_ptr->valid & PNG_INFO_tIME))
   {
	  png_warning(png_ptr, "Duplicate tIME chunk");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   if (png_ptr->mode & PNG_HAVE_IDAT)
	  png_ptr->mode |= PNG_AFTER_IDAT;

   if (length != 7)
   {
	  png_warning(png_ptr, "Incorrect tIME chunk length");
	  png_crc_finish(png_ptr, length);
	  return;
   }

   png_crc_read(png_ptr, buf, 7);
   if (png_crc_finish(png_ptr, 0))
	  return;

   mod_time.second = buf[6];
   mod_time.minute = buf[5];
   mod_time.hour = buf[4];
   mod_time.day = buf[3];
   mod_time.month = buf[2];
   mod_time.year = png_get_uint_16(buf);

   png_set_tIME(png_ptr, info_ptr, &mod_time);
}
#endif

#if defined(PNG_READ_tEXt_SUPPORTED)
/* Note: this does not properly handle chunks that are > 64K under DOS */
void /* PRIVATE */
png_handle_tEXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_textp text_ptr;
   png_charp key;
   png_charp text;
   png_uint_32 skip = 0;
   png_size_t slength;
   int ret;

   png_debug(1, "in png_handle_tEXt\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before tEXt");

   if (png_ptr->mode & PNG_HAVE_IDAT)
	  png_ptr->mode |= PNG_AFTER_IDAT;

#ifdef PNG_MAX_MALLOC_64K
   if (length > (png_uint_32)65535L)
   {
	  png_warning(png_ptr, "tEXt chunk too large to fit in memory");
	  skip = length - (png_uint_32)65535L;
	  length = (png_uint_32)65535L;
   }
#endif

   key = (png_charp)png_malloc_warn(png_ptr, length + 1);
   if (key == NULL)
   {
	 png_warning(png_ptr, "No memory to process text chunk.");
	 return;
   }
   slength = (png_size_t)length;
   png_crc_read(png_ptr, (png_bytep)key, slength);

   if (png_crc_finish(png_ptr, skip))
   {
	  png_free(png_ptr, key);
	  return;
   }

   key[slength] = 0x00;

   for (text = key; *text; text++)
	  /* empty loop to find end of key */ ;

   if (text != key + slength)
	  text++;

   text_ptr = (png_textp)png_malloc_warn(png_ptr,
	  (png_uint_32)png_sizeof(png_text));
   if (text_ptr == NULL)
   {
	 png_warning(png_ptr, "Not enough memory to process text chunk.");
	 png_free(png_ptr, key);
	 return;
   }
   text_ptr->compression = PNG_TEXT_COMPRESSION_NONE;
   text_ptr->key = key;
#ifdef PNG_iTXt_SUPPORTED
   text_ptr->lang = NULL;
   text_ptr->lang_key = NULL;
   text_ptr->itxt_length = 0;
#endif
   text_ptr->text = text;
   text_ptr->text_length = png_strlen(text);

   ret=png_set_text_2(png_ptr, info_ptr, text_ptr, 1);

   png_free(png_ptr, key);
   png_free(png_ptr, text_ptr);
   if (ret)
	 png_warning(png_ptr, "Insufficient memory to process text chunk.");
}
#endif

#if defined(PNG_READ_zTXt_SUPPORTED)
/* note: this does not correctly handle chunks that are > 64K under DOS */
void /* PRIVATE */
png_handle_zTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_textp text_ptr;
   png_charp chunkdata;
   png_charp text;
   int comp_type;
   int ret;
   png_size_t slength, prefix_len, data_len;

   png_debug(1, "in png_handle_zTXt\n");
   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before zTXt");

   if (png_ptr->mode & PNG_HAVE_IDAT)
	  png_ptr->mode |= PNG_AFTER_IDAT;

#ifdef PNG_MAX_MALLOC_64K
   /* We will no doubt have problems with chunks even half this size, but
	  there is no hard and fast rule to tell us where to stop. */
   if (length > (png_uint_32)65535L)
   {
	 png_warning(png_ptr,"zTXt chunk too large to fit in memory");
	 png_crc_finish(png_ptr, length);
	 return;
   }
#endif

   chunkdata = (png_charp)png_malloc_warn(png_ptr, length + 1);
   if (chunkdata == NULL)
   {
	 png_warning(png_ptr,"Out of memory processing zTXt chunk.");
	 return;
   }
   slength = (png_size_t)length;
   png_crc_read(png_ptr, (png_bytep)chunkdata, slength);
   if (png_crc_finish(png_ptr, 0))
   {
	  png_free(png_ptr, chunkdata);
	  return;
   }

   chunkdata[slength] = 0x00;

   for (text = chunkdata; *text; text++)
	  /* empty loop */ ;

   /* zTXt must have some text after the chunkdataword */
   if (text >= chunkdata + slength - 2)
   {
	  png_warning(png_ptr, "Truncated zTXt chunk");
	  png_free(png_ptr, chunkdata);
	  return;
   }
   else
   {
	   comp_type = *(++text);
	   if (comp_type != PNG_TEXT_COMPRESSION_zTXt)
	   {
		  png_warning(png_ptr, "Unknown compression type in zTXt chunk");
		  comp_type = PNG_TEXT_COMPRESSION_zTXt;
	   }
	   text++;        /* skip the compression_method byte */
   }
   prefix_len = text - chunkdata;

   chunkdata = (png_charp)png_decompress_chunk(png_ptr, comp_type, chunkdata,
									(png_size_t)length, prefix_len, &data_len);

   text_ptr = (png_textp)png_malloc_warn(png_ptr,
	 (png_uint_32)png_sizeof(png_text));
   if (text_ptr == NULL)
   {
	 png_warning(png_ptr,"Not enough memory to process zTXt chunk.");
	 png_free(png_ptr, chunkdata);
	 return;
   }
   text_ptr->compression = comp_type;
   text_ptr->key = chunkdata;
#ifdef PNG_iTXt_SUPPORTED
   text_ptr->lang = NULL;
   text_ptr->lang_key = NULL;
   text_ptr->itxt_length = 0;
#endif
   text_ptr->text = chunkdata + prefix_len;
   text_ptr->text_length = data_len;

   ret=png_set_text_2(png_ptr, info_ptr, text_ptr, 1);

   png_free(png_ptr, text_ptr);
   png_free(png_ptr, chunkdata);
   if (ret)
	 png_error(png_ptr, "Insufficient memory to store zTXt chunk.");
}
#endif

#if defined(PNG_READ_iTXt_SUPPORTED)
/* note: this does not correctly handle chunks that are > 64K under DOS */
void /* PRIVATE */
png_handle_iTXt(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_textp text_ptr;
   png_charp chunkdata;
   png_charp key, lang, text, lang_key;
   int comp_flag;
   int comp_type = 0;
   int ret;
   png_size_t slength, prefix_len, data_len;

   png_debug(1, "in png_handle_iTXt\n");

   if (!(png_ptr->mode & PNG_HAVE_IHDR))
	  png_error(png_ptr, "Missing IHDR before iTXt");

   if (png_ptr->mode & PNG_HAVE_IDAT)
	  png_ptr->mode |= PNG_AFTER_IDAT;

#ifdef PNG_MAX_MALLOC_64K
   /* We will no doubt have problems with chunks even half this size, but
	  there is no hard and fast rule to tell us where to stop. */
   if (length > (png_uint_32)65535L)
   {
	 png_warning(png_ptr,"iTXt chunk too large to fit in memory");
	 png_crc_finish(png_ptr, length);
	 return;
   }
#endif

   chunkdata = (png_charp)png_malloc_warn(png_ptr, length + 1);
   if (chunkdata == NULL)
   {
	 png_warning(png_ptr, "No memory to process iTXt chunk.");
	 return;
   }
   slength = (png_size_t)length;
   png_crc_read(png_ptr, (png_bytep)chunkdata, slength);
   if (png_crc_finish(png_ptr, 0))
   {
	  png_free(png_ptr, chunkdata);
	  return;
   }

   chunkdata[slength] = 0x00;

   for (lang = chunkdata; *lang; lang++)
	  /* empty loop */ ;
   lang++;        /* skip NUL separator */

   /* iTXt must have a language tag (possibly empty), two compression bytes,
	  translated keyword (possibly empty), and possibly some text after the
	  keyword */

   if (lang >= chunkdata + slength - 3)
   {
	  png_warning(png_ptr, "Truncated iTXt chunk");
	  png_free(png_ptr, chunkdata);
	  return;
   }
   else
   {
	   comp_flag = *lang++;
	   comp_type = *lang++;
   }

   for (lang_key = lang; *lang_key; lang_key++)
	  /* empty loop */ ;
   lang_key++;        /* skip NUL separator */

   if (lang_key >= chunkdata + slength)
   {
	  png_warning(png_ptr, "Truncated iTXt chunk");
	  png_free(png_ptr, chunkdata);
	  return;
   }

   for (text = lang_key; *text; text++)
	  /* empty loop */ ;
   text++;        /* skip NUL separator */
   if (text >= chunkdata + slength)
   {
	  png_warning(png_ptr, "Malformed iTXt chunk");
	  png_free(png_ptr, chunkdata);
	  return;
   }

   prefix_len = text - chunkdata;

   key=chunkdata;
   if (comp_flag)
	   chunkdata = png_decompress_chunk(png_ptr, comp_type, chunkdata,
		  (size_t)length, prefix_len, &data_len);
   else
	   data_len=png_strlen(chunkdata + prefix_len);
   text_ptr = (png_textp)png_malloc_warn(png_ptr,
	  (png_uint_32)png_sizeof(png_text));
   if (text_ptr == NULL)
   {
	 png_warning(png_ptr,"Not enough memory to process iTXt chunk.");
	 png_free(png_ptr, chunkdata);
	 return;
   }
   text_ptr->compression = (int)comp_flag + 1;
   text_ptr->lang_key = chunkdata+(lang_key-key);
   text_ptr->lang = chunkdata+(lang-key);
   text_ptr->itxt_length = data_len;
   text_ptr->text_length = 0;
   text_ptr->key = chunkdata;
   text_ptr->text = chunkdata + prefix_len;

   ret=png_set_text_2(png_ptr, info_ptr, text_ptr, 1);

   png_free(png_ptr, text_ptr);
   png_free(png_ptr, chunkdata);
   if (ret)
	 png_error(png_ptr, "Insufficient memory to store iTXt chunk.");
}
#endif

/* This function is called when we haven't found a handler for a
   chunk.  If there isn't a problem with the chunk itself (ie bad
   chunk name, CRC, or a critical chunk), the chunk is silently ignored
   -- unless the PNG_FLAG_UNKNOWN_CHUNKS_SUPPORTED flag is on in which
   case it will be saved away to be written out later. */
void /* PRIVATE */
png_handle_unknown(png_structp png_ptr, png_infop info_ptr, png_uint_32 length)
{
   png_uint_32 skip = 0;

   png_debug(1, "in png_handle_unknown\n");

   if (png_ptr->mode & PNG_HAVE_IDAT)
   {
#ifdef PNG_USE_LOCAL_ARRAYS
	  PNG_CONST PNG_IDAT;
#endif
	  if (png_memcmp(png_ptr->chunk_name, png_IDAT, 4))  /* not an IDAT */
		 png_ptr->mode |= PNG_AFTER_IDAT;
   }

   png_check_chunk_name(png_ptr, png_ptr->chunk_name);

   if (!(png_ptr->chunk_name[0] & 0x20))
   {
#if defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
	  if(png_handle_as_unknown(png_ptr, png_ptr->chunk_name) !=
		   PNG_HANDLE_CHUNK_ALWAYS
#if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
		   && png_ptr->read_user_chunk_fn == NULL
#endif
		)
#endif
		  png_chunk_error(png_ptr, "unknown critical chunk");
   }

#if defined(PNG_READ_UNKNOWN_CHUNKS_SUPPORTED)
   if ((png_ptr->flags & PNG_FLAG_KEEP_UNKNOWN_CHUNKS) ||
	   (png_ptr->read_user_chunk_fn != NULL))
   {
#ifdef PNG_MAX_MALLOC_64K
	   if (length > (png_uint_32)65535L)
	   {
		   png_warning(png_ptr, "unknown chunk too large to fit in memory");
		   skip = length - (png_uint_32)65535L;
		   length = (png_uint_32)65535L;
	   }
#endif
	   png_strncpy((png_charp)png_ptr->unknown_chunk.name,
	 (png_charp)png_ptr->chunk_name, 5);
	   png_ptr->unknown_chunk.data = (png_bytep)png_malloc(png_ptr, length);
	   png_ptr->unknown_chunk.size = (png_size_t)length;
	   png_crc_read(png_ptr, (png_bytep)png_ptr->unknown_chunk.data, length);
#if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
	   if(png_ptr->read_user_chunk_fn != NULL)
	   {
		  /* callback to user unknown chunk handler */
		  int ret;
		  ret = (*(png_ptr->read_user_chunk_fn))
			(png_ptr, &png_ptr->unknown_chunk);
		  if (ret < 0)
			 png_chunk_error(png_ptr, "error in user chunk");
		  if (ret == 0)
		  {
			 if (!(png_ptr->chunk_name[0] & 0x20))
				if(png_handle_as_unknown(png_ptr, png_ptr->chunk_name) !=
					 PNG_HANDLE_CHUNK_ALWAYS)
				   png_chunk_error(png_ptr, "unknown critical chunk");
			 png_set_unknown_chunks(png_ptr, info_ptr,
			   &png_ptr->unknown_chunk, 1);
		  }
	   }
#else
	   png_set_unknown_chunks(png_ptr, info_ptr, &png_ptr->unknown_chunk, 1);
#endif
	   png_free(png_ptr, png_ptr->unknown_chunk.data);
	   png_ptr->unknown_chunk.data = NULL;
   }
   else
#endif
	  skip = length;

   png_crc_finish(png_ptr, skip);

#if !defined(PNG_READ_USER_CHUNKS_SUPPORTED)
   info_ptr = info_ptr; /* quiet compiler warnings about unused info_ptr */
#endif
}

/* This function is called to verify that a chunk name is valid.
   This function can't have the "critical chunk check" incorporated
   into it, since in the future we will need to be able to call user
   functions to handle unknown critical chunks after we check that
   the chunk name itself is valid. */

#define isnonalpha(c) ((c) < 65 || (c) > 122 || ((c) > 90 && (c) < 97))

void /* PRIVATE */
png_check_chunk_name(png_structp png_ptr, png_bytep chunk_name)
{
   png_debug(1, "in png_check_chunk_name\n");
   if (isnonalpha(chunk_name[0]) || isnonalpha(chunk_name[1]) ||
	   isnonalpha(chunk_name[2]) || isnonalpha(chunk_name[3]))
   {
	  png_chunk_error(png_ptr, "invalid chunk type");
   }
}

/* Combines the row recently read in with the existing pixels in the
   row.  This routine takes care of alpha and transparency if requested.
   This routine also handles the two methods of progressive display
   of interlaced images, depending on the mask value.
   The mask value describes which pixels are to be combined with
   the row.  The pattern always repeats every 8 pixels, so just 8
   bits are needed.  A one indicates the pixel is to be combined,
   a zero indicates the pixel is to be skipped.  This is in addition
   to any alpha or transparency value associated with the pixel.  If
   you want all pixels to be combined, pass 0xff (255) in mask.  */

void /* PRIVATE */
png_combine_row(png_structp png_ptr, png_bytep row, int mask)
{
   png_debug(1,"in png_combine_row\n");
   if (mask == 0xff)
   {
	  png_memcpy(row, png_ptr->row_buf + 1,
		 PNG_ROWBYTES(png_ptr->row_info.pixel_depth, png_ptr->width));
   }
   else
   {
	  switch (png_ptr->row_info.pixel_depth)
	  {
		 case 1:
		 {
			png_bytep sp = png_ptr->row_buf + 1;
			png_bytep dp = row;
			int s_inc, s_start, s_end;
			int m = 0x80;
			int shift;
			png_uint_32 i;
			png_uint_32 row_width = png_ptr->width;

#if defined(PNG_READ_PACKSWAP_SUPPORTED)
			if (png_ptr->transformations & PNG_PACKSWAP)
			{
				s_start = 0;
				s_end = 7;
				s_inc = 1;
			}
			else
#endif
			{
				s_start = 7;
				s_end = 0;
				s_inc = -1;
			}

			shift = s_start;

			for (i = 0; i < row_width; i++)
			{
			   if (m & mask)
			   {
				  int value;

				  value = (*sp >> shift) & 0x01;
				  *dp &= (png_byte)((0x7f7f >> (7 - shift)) & 0xff);
				  *dp |= (png_byte)(value << shift);
			   }

			   if (shift == s_end)
			   {
				  shift = s_start;
				  sp++;
				  dp++;
			   }
			   else
				  shift += s_inc;

			   if (m == 1)
				  m = 0x80;
			   else
				  m >>= 1;
			}
			break;
		 }
		 case 2:
		 {
			png_bytep sp = png_ptr->row_buf + 1;
			png_bytep dp = row;
			int s_start, s_end, s_inc;
			int m = 0x80;
			int shift;
			png_uint_32 i;
			png_uint_32 row_width = png_ptr->width;
			int value;

#if defined(PNG_READ_PACKSWAP_SUPPORTED)
			if (png_ptr->transformations & PNG_PACKSWAP)
			{
			   s_start = 0;
			   s_end = 6;
			   s_inc = 2;
			}
			else
#endif
			{
			   s_start = 6;
			   s_end = 0;
			   s_inc = -2;
			}

			shift = s_start;

			for (i = 0; i < row_width; i++)
			{
			   if (m & mask)
			   {
				  value = (*sp >> shift) & 0x03;
				  *dp &= (png_byte)((0x3f3f >> (6 - shift)) & 0xff);
				  *dp |= (png_byte)(value << shift);
			   }

			   if (shift == s_end)
			   {
				  shift = s_start;
				  sp++;
				  dp++;
			   }
			   else
				  shift += s_inc;
			   if (m == 1)
				  m = 0x80;
			   else
				  m >>= 1;
			}
			break;
		 }
		 case 4:
		 {
			png_bytep sp = png_ptr->row_buf + 1;
			png_bytep dp = row;
			int s_start, s_end, s_inc;
			int m = 0x80;
			int shift;
			png_uint_32 i;
			png_uint_32 row_width = png_ptr->width;
			int value;

#if defined(PNG_READ_PACKSWAP_SUPPORTED)
			if (png_ptr->transformations & PNG_PACKSWAP)
			{
			   s_start = 0;
			   s_end = 4;
			   s_inc = 4;
			}
			else
#endif
			{
			   s_start = 4;
			   s_end = 0;
			   s_inc = -4;
			}
			shift = s_start;

			for (i = 0; i < row_width; i++)
			{
			   if (m & mask)
			   {
				  value = (*sp >> shift) & 0xf;
				  *dp &= (png_byte)((0xf0f >> (4 - shift)) & 0xff);
				  *dp |= (png_byte)(value << shift);
			   }

			   if (shift == s_end)
			   {
				  shift = s_start;
				  sp++;
				  dp++;
			   }
			   else
				  shift += s_inc;
			   if (m == 1)
				  m = 0x80;
			   else
				  m >>= 1;
			}
			break;
		 }
		 default:
		 {
			png_bytep sp = png_ptr->row_buf + 1;
			png_bytep dp = row;
			png_size_t pixel_bytes = (png_ptr->row_info.pixel_depth >> 3);
			png_uint_32 i;
			png_uint_32 row_width = png_ptr->width;
			png_byte m = 0x80;

			for (i = 0; i < row_width; i++)
			{
			   if (m & mask)
			   {
				  png_memcpy(dp, sp, pixel_bytes);
			   }

			   sp += pixel_bytes;
			   dp += pixel_bytes;

			   if (m == 1)
				  m = 0x80;
			   else
				  m >>= 1;
			}
			break;
		 }
	  }
   }
}

#ifdef PNG_READ_INTERLACING_SUPPORTED
/* OLD pre-1.0.9 interface:
void png_do_read_interlace(png_row_infop row_info, png_bytep row, int pass,
   png_uint_32 transformations)
 */
void /* PRIVATE */
png_do_read_interlace(png_structp png_ptr)
{
   png_row_infop row_info = &(png_ptr->row_info);
   png_bytep row = png_ptr->row_buf + 1;
   int pass = png_ptr->pass;
   png_uint_32 transformations = png_ptr->transformations;
#ifdef PNG_USE_LOCAL_ARRAYS
   /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */
   /* offset to next interlace block */
   PNG_CONST int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
#endif

   png_debug(1,"in png_do_read_interlace\n");
   if (row != NULL && row_info != NULL)
   {
	  png_uint_32 final_width;

	  final_width = row_info->width * png_pass_inc[pass];

	  switch (row_info->pixel_depth)
	  {
		 case 1:
		 {
			png_bytep sp = row + (png_size_t)((row_info->width - 1) >> 3);
			png_bytep dp = row + (png_size_t)((final_width - 1) >> 3);
			int sshift, dshift;
			int s_start, s_end, s_inc;
			int jstop = png_pass_inc[pass];
			png_byte v;
			png_uint_32 i;
			int j;

#if defined(PNG_READ_PACKSWAP_SUPPORTED)
			if (transformations & PNG_PACKSWAP)
			{
				sshift = (int)((row_info->width + 7) & 0x07);
				dshift = (int)((final_width + 7) & 0x07);
				s_start = 7;
				s_end = 0;
				s_inc = -1;
			}
			else
#endif
			{
				sshift = 7 - (int)((row_info->width + 7) & 0x07);
				dshift = 7 - (int)((final_width + 7) & 0x07);
				s_start = 0;
				s_end = 7;
				s_inc = 1;
			}

			for (i = 0; i < row_info->width; i++)
			{
			   v = (png_byte)((*sp >> sshift) & 0x01);
			   for (j = 0; j < jstop; j++)
			   {
				  *dp &= (png_byte)((0x7f7f >> (7 - dshift)) & 0xff);
				  *dp |= (png_byte)(v << dshift);
				  if (dshift == s_end)
				  {
					 dshift = s_start;
					 dp--;
				  }
				  else
					 dshift += s_inc;
			   }
			   if (sshift == s_end)
			   {
				  sshift = s_start;
				  sp--;
			   }
			   else
				  sshift += s_inc;
			}
			break;
		 }
		 case 2:
		 {
			png_bytep sp = row + (png_uint_32)((row_info->width - 1) >> 2);
			png_bytep dp = row + (png_uint_32)((final_width - 1) >> 2);
			int sshift, dshift;
			int s_start, s_end, s_inc;
			int jstop = png_pass_inc[pass];
			png_uint_32 i;

#if defined(PNG_READ_PACKSWAP_SUPPORTED)
			if (transformations & PNG_PACKSWAP)
			{
			   sshift = (int)(((row_info->width + 3) & 0x03) << 1);
			   dshift = (int)(((final_width + 3) & 0x03) << 1);
			   s_start = 6;
			   s_end = 0;
			   s_inc = -2;
			}
			else
#endif
			{
			   sshift = (int)((3 - ((row_info->width + 3) & 0x03)) << 1);
			   dshift = (int)((3 - ((final_width + 3) & 0x03)) << 1);
			   s_start = 0;
			   s_end = 6;
			   s_inc = 2;
			}

			for (i = 0; i < row_info->width; i++)
			{
			   png_byte v;
			   int j;

			   v = (png_byte)((*sp >> sshift) & 0x03);
			   for (j = 0; j < jstop; j++)
			   {
				  *dp &= (png_byte)((0x3f3f >> (6 - dshift)) & 0xff);
				  *dp |= (png_byte)(v << dshift);
				  if (dshift == s_end)
				  {
					 dshift = s_start;
					 dp--;
				  }
				  else
					 dshift += s_inc;
			   }
			   if (sshift == s_end)
			   {
				  sshift = s_start;
				  sp--;
			   }
			   else
				  sshift += s_inc;
			}
			break;
		 }
		 case 4:
		 {
			png_bytep sp = row + (png_size_t)((row_info->width - 1) >> 1);
			png_bytep dp = row + (png_size_t)((final_width - 1) >> 1);
			int sshift, dshift;
			int s_start, s_end, s_inc;
			png_uint_32 i;
			int jstop = png_pass_inc[pass];

#if defined(PNG_READ_PACKSWAP_SUPPORTED)
			if (transformations & PNG_PACKSWAP)
			{
			   sshift = (int)(((row_info->width + 1) & 0x01) << 2);
			   dshift = (int)(((final_width + 1) & 0x01) << 2);
			   s_start = 4;
			   s_end = 0;
			   s_inc = -4;
			}
			else
#endif
			{
			   sshift = (int)((1 - ((row_info->width + 1) & 0x01)) << 2);
			   dshift = (int)((1 - ((final_width + 1) & 0x01)) << 2);
			   s_start = 0;
			   s_end = 4;
			   s_inc = 4;
			}

			for (i = 0; i < row_info->width; i++)
			{
			   png_byte v = (png_byte)((*sp >> sshift) & 0xf);
			   int j;

			   for (j = 0; j < jstop; j++)
			   {
				  *dp &= (png_byte)((0xf0f >> (4 - dshift)) & 0xff);
				  *dp |= (png_byte)(v << dshift);
				  if (dshift == s_end)
				  {
					 dshift = s_start;
					 dp--;
				  }
				  else
					 dshift += s_inc;
			   }
			   if (sshift == s_end)
			   {
				  sshift = s_start;
				  sp--;
			   }
			   else
				  sshift += s_inc;
			}
			break;
		 }
		 default:
		 {
			png_size_t pixel_bytes = (row_info->pixel_depth >> 3);
			png_bytep sp = row + (png_size_t)(row_info->width - 1) * pixel_bytes;
			png_bytep dp = row + (png_size_t)(final_width - 1) * pixel_bytes;

			int jstop = png_pass_inc[pass];
			png_uint_32 i;

			for (i = 0; i < row_info->width; i++)
			{
			   png_byte v[8];
			   int j;

			   png_memcpy(v, sp, pixel_bytes);
			   for (j = 0; j < jstop; j++)
			   {
				  png_memcpy(dp, v, pixel_bytes);
				  dp -= pixel_bytes;
			   }
			   sp -= pixel_bytes;
			}
			break;
		 }
	  }
	  row_info->width = final_width;
	  row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,final_width);
   }
#if !defined(PNG_READ_PACKSWAP_SUPPORTED)
   transformations = transformations; /* silence compiler warning */
#endif
}
#endif /* PNG_READ_INTERLACING_SUPPORTED */

void /* PRIVATE */
png_read_filter_row(png_structp, png_row_infop row_info, png_bytep row,
   png_bytep prev_row, int filter)
{
   png_debug(1, "in png_read_filter_row\n");
   png_debug2(2,"row = %lu, filter = %d\n", png_ptr->row_number, filter);
   switch (filter)
   {
	  case PNG_FILTER_VALUE_NONE:
		 break;
	  case PNG_FILTER_VALUE_SUB:
	  {
		 png_uint_32 i;
		 png_uint_32 istop = row_info->rowbytes;
		 png_uint_32 bpp = (row_info->pixel_depth + 7) >> 3;
		 png_bytep rp = row + bpp;
		 png_bytep lp = row;

		 for (i = bpp; i < istop; i++)
		 {
			*rp = (png_byte)(((int)(*rp) + (int)(*lp++)) & 0xff);
			rp++;
		 }
		 break;
	  }
	  case PNG_FILTER_VALUE_UP:
	  {
		 png_uint_32 i;
		 png_uint_32 istop = row_info->rowbytes;
		 png_bytep rp = row;
		 png_bytep pp = prev_row;

		 for (i = 0; i < istop; i++)
		 {
			*rp = (png_byte)(((int)(*rp) + (int)(*pp++)) & 0xff);
			rp++;
		 }
		 break;
	  }
	  case PNG_FILTER_VALUE_AVG:
	  {
		 png_uint_32 i;
		 png_bytep rp = row;
		 png_bytep pp = prev_row;
		 png_bytep lp = row;
		 png_uint_32 bpp = (row_info->pixel_depth + 7) >> 3;
		 png_uint_32 istop = row_info->rowbytes - bpp;

		 for (i = 0; i < bpp; i++)
		 {
			*rp = (png_byte)(((int)(*rp) +
			   ((int)(*pp++) / 2 )) & 0xff);
			rp++;
		 }

		 for (i = 0; i < istop; i++)
		 {
			*rp = (png_byte)(((int)(*rp) +
			   (int)(*pp++ + *lp++) / 2 ) & 0xff);
			rp++;
		 }
		 break;
	  }
	  case PNG_FILTER_VALUE_PAETH:
	  {
		 png_uint_32 i;
		 png_bytep rp = row;
		 png_bytep pp = prev_row;
		 png_bytep lp = row;
		 png_bytep cp = prev_row;
		 png_uint_32 bpp = (row_info->pixel_depth + 7) >> 3;
		 png_uint_32 istop=row_info->rowbytes - bpp;

		 for (i = 0; i < bpp; i++)
		 {
			*rp = (png_byte)(((int)(*rp) + (int)(*pp++)) & 0xff);
			rp++;
		 }

		 for (i = 0; i < istop; i++)   /* use leftover rp,pp */
		 {
			int a, b, c, pa, pb, pc, p;

			a = *lp++;
			b = *pp++;
			c = *cp++;

			p = b - c;
			pc = a - c;

#ifdef PNG_USE_ABS
			pa = abs(p);
			pb = abs(pc);
			pc = abs(p + pc);
#else
			pa = p < 0 ? -p : p;
			pb = pc < 0 ? -pc : pc;
			pc = (p + pc) < 0 ? -(p + pc) : p + pc;
#endif

			/*
			   if (pa <= pb && pa <= pc)
				  p = a;
			   else if (pb <= pc)
				  p = b;
			   else
				  p = c;
			 */

			p = (pa <= pb && pa <=pc) ? a : (pb <= pc) ? b : c;

			*rp = (png_byte)(((int)(*rp) + p) & 0xff);
			rp++;
		 }
		 break;
	  }
	  default:
		 png_warning(png_ptr, "Ignoring bad adaptive filter type");
		 *row=0;
		 break;
   }
}

void /* PRIVATE */
png_read_finish_row(png_structp png_ptr)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */

   /* start of interlace block */
   PNG_CONST int png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};

   /* offset to next interlace block */
   PNG_CONST int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};

   /* start of interlace block in the y direction */
   PNG_CONST int png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};

   /* offset to next interlace block in the y direction */
   PNG_CONST int png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
#endif

   png_debug(1, "in png_read_finish_row\n");
   png_ptr->row_number++;
   if (png_ptr->row_number < png_ptr->num_rows)
	  return;

   if (png_ptr->interlaced)
   {
	  png_ptr->row_number = 0;
	  png_memset_check(png_ptr, png_ptr->prev_row, 0,
		 png_ptr->rowbytes + 1);
	  do
	  {
		 png_ptr->pass++;
		 if (png_ptr->pass >= 7)
			break;
		 png_ptr->iwidth = (png_ptr->width +
			png_pass_inc[png_ptr->pass] - 1 -
			png_pass_start[png_ptr->pass]) /
			png_pass_inc[png_ptr->pass];

		 png_ptr->irowbytes = PNG_ROWBYTES(png_ptr->pixel_depth,
			png_ptr->iwidth) + 1;

		 if (!(png_ptr->transformations & PNG_INTERLACE))
		 {
			png_ptr->num_rows = (png_ptr->height +
			   png_pass_yinc[png_ptr->pass] - 1 -
			   png_pass_ystart[png_ptr->pass]) /
			   png_pass_yinc[png_ptr->pass];
			if (!(png_ptr->num_rows))
			   continue;
		 }
		 else  /* if (png_ptr->transformations & PNG_INTERLACE) */
			break;
	  } while (png_ptr->iwidth == 0);

	  if (png_ptr->pass < 7)
		 return;
   }

   if (!(png_ptr->flags & PNG_FLAG_ZLIB_FINISHED))
   {
#ifdef PNG_USE_LOCAL_ARRAYS
	  PNG_CONST PNG_IDAT;
#endif
	  char extra;
	  int ret;

	  png_ptr->zstream.next_out = (Bytef *)&extra;
	  png_ptr->zstream.avail_out = (uInt)1;
	  for(;;)
	  {
		 if (!(png_ptr->zstream.avail_in))
		 {
			while (!png_ptr->idat_size)
			{
			   png_byte chunk_length[4];

			   png_crc_finish(png_ptr, 0);

			   png_read_data(png_ptr, chunk_length, 4);
			   png_ptr->idat_size = png_get_uint_31(png_ptr, chunk_length);
			   png_reset_crc(png_ptr);
			   png_crc_read(png_ptr, png_ptr->chunk_name, 4);
			   if (png_memcmp(png_ptr->chunk_name, png_IDAT, 4))
				  png_error(png_ptr, "Not enough image data");

			}
			png_ptr->zstream.avail_in = (uInt)png_ptr->zbuf_size;
			png_ptr->zstream.next_in = png_ptr->zbuf;
			if (png_ptr->zbuf_size > png_ptr->idat_size)
			   png_ptr->zstream.avail_in = (uInt)png_ptr->idat_size;
			png_crc_read(png_ptr, png_ptr->zbuf, png_ptr->zstream.avail_in);
			png_ptr->idat_size -= png_ptr->zstream.avail_in;
		 }
		 ret = inflate(&png_ptr->zstream, Z_PARTIAL_FLUSH);
		 if (ret == Z_STREAM_END)
		 {
			if (!(png_ptr->zstream.avail_out) || png_ptr->zstream.avail_in ||
			   png_ptr->idat_size)
			   png_warning(png_ptr, "Extra compressed data");
			png_ptr->mode |= PNG_AFTER_IDAT;
			png_ptr->flags |= PNG_FLAG_ZLIB_FINISHED;
			break;
		 }
		 if (ret != Z_OK)
			png_error(png_ptr, png_ptr->zstream.msg ? png_ptr->zstream.msg :
					  "Decompression Error");

		 if (!(png_ptr->zstream.avail_out))
		 {
			png_warning(png_ptr, "Extra compressed data.");
			png_ptr->mode |= PNG_AFTER_IDAT;
			png_ptr->flags |= PNG_FLAG_ZLIB_FINISHED;
			break;
		 }

	  }
	  png_ptr->zstream.avail_out = 0;
   }

   if (png_ptr->idat_size || png_ptr->zstream.avail_in)
	  png_warning(png_ptr, "Extra compression data");

   inflateReset(&png_ptr->zstream);

   png_ptr->mode |= PNG_AFTER_IDAT;
}

void /* PRIVATE */
png_read_start_row(png_structp png_ptr)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */

   /* start of interlace block */
   PNG_CONST int png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};

   /* offset to next interlace block */
   PNG_CONST int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};

   /* start of interlace block in the y direction */
   PNG_CONST int png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};

   /* offset to next interlace block in the y direction */
   PNG_CONST int png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
#endif

   int max_pixel_depth;
   png_uint_32 row_bytes;

   png_debug(1, "in png_read_start_row\n");
   png_ptr->zstream.avail_in = 0;
   png_init_read_transformations(png_ptr);
   if (png_ptr->interlaced)
   {
	  if (!(png_ptr->transformations & PNG_INTERLACE))
		 png_ptr->num_rows = (png_ptr->height + png_pass_yinc[0] - 1 -
			png_pass_ystart[0]) / png_pass_yinc[0];
	  else
		 png_ptr->num_rows = png_ptr->height;

	  png_ptr->iwidth = (png_ptr->width +
		 png_pass_inc[png_ptr->pass] - 1 -
		 png_pass_start[png_ptr->pass]) /
		 png_pass_inc[png_ptr->pass];

		 row_bytes = PNG_ROWBYTES(png_ptr->pixel_depth,png_ptr->iwidth) + 1;

		 png_ptr->irowbytes = (png_size_t)row_bytes;
		 if((png_uint_32)png_ptr->irowbytes != row_bytes)
			png_error(png_ptr, "Rowbytes overflow in png_read_start_row");
   }
   else
   {
	  png_ptr->num_rows = png_ptr->height;
	  png_ptr->iwidth = png_ptr->width;
	  png_ptr->irowbytes = png_ptr->rowbytes + 1;
   }
   max_pixel_depth = png_ptr->pixel_depth;

#if defined(PNG_READ_PACK_SUPPORTED)
   if ((png_ptr->transformations & PNG_PACK) && png_ptr->bit_depth < 8)
	  max_pixel_depth = 8;
#endif

#if defined(PNG_READ_EXPAND_SUPPORTED)
   if (png_ptr->transformations & PNG_EXPAND)
   {
	  if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	  {
		 if (png_ptr->num_trans)
			max_pixel_depth = 32;
		 else
			max_pixel_depth = 24;
	  }
	  else if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY)
	  {
		 if (max_pixel_depth < 8)
			max_pixel_depth = 8;
		 if (png_ptr->num_trans)
			max_pixel_depth *= 2;
	  }
	  else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB)
	  {
		 if (png_ptr->num_trans)
		 {
			max_pixel_depth *= 4;
			max_pixel_depth /= 3;
		 }
	  }
   }
#endif

#if defined(PNG_READ_FILLER_SUPPORTED)
   if (png_ptr->transformations & (PNG_FILLER))
   {
	  if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
		 max_pixel_depth = 32;
	  else if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY)
	  {
		 if (max_pixel_depth <= 8)
			max_pixel_depth = 16;
		 else
			max_pixel_depth = 32;
	  }
	  else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB)
	  {
		 if (max_pixel_depth <= 32)
			max_pixel_depth = 32;
		 else
			max_pixel_depth = 64;
	  }
   }
#endif

#if defined(PNG_READ_GRAY_TO_RGB_SUPPORTED)
   if (png_ptr->transformations & PNG_GRAY_TO_RGB)
   {
	  if (
#if defined(PNG_READ_EXPAND_SUPPORTED)
		(png_ptr->num_trans && (png_ptr->transformations & PNG_EXPAND)) ||
#endif
#if defined(PNG_READ_FILLER_SUPPORTED)
		(png_ptr->transformations & (PNG_FILLER)) ||
#endif
		png_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
	  {
		 if (max_pixel_depth <= 16)
			max_pixel_depth = 32;
		 else
			max_pixel_depth = 64;
	  }
	  else
	  {
		 if (max_pixel_depth <= 8)
		   {
			 if (png_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
			   max_pixel_depth = 32;
			 else
			   max_pixel_depth = 24;
		   }
		 else if (png_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
			max_pixel_depth = 64;
		 else
			max_pixel_depth = 48;
	  }
   }
#endif

#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) && \
defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
   if(png_ptr->transformations & PNG_USER_TRANSFORM)
	 {
	   int user_pixel_depth=png_ptr->user_transform_depth*
		 png_ptr->user_transform_channels;
	   if(user_pixel_depth > max_pixel_depth)
		 max_pixel_depth=user_pixel_depth;
	 }
#endif

   /* align the width on the next larger 8 pixels.  Mainly used
	  for interlacing */
   row_bytes = ((png_ptr->width + 7) & ~((png_uint_32)7));
   /* calculate the maximum bytes needed, adding a byte and a pixel
	  for safety's sake */
   row_bytes = PNG_ROWBYTES(max_pixel_depth,row_bytes) +
	  1 + ((max_pixel_depth + 7) >> 3);
#ifdef PNG_MAX_MALLOC_64K
   if (row_bytes > (png_uint_32)65536L)
	  png_error(png_ptr, "This image requires a row greater than 64KB");
#endif
   png_ptr->big_row_buf = (png_bytep)png_malloc(png_ptr, row_bytes+64);
   png_ptr->row_buf = png_ptr->big_row_buf+32;

#ifdef PNG_MAX_MALLOC_64K
   if ((png_uint_32)png_ptr->rowbytes + 1 > (png_uint_32)65536L)
	  png_error(png_ptr, "This image requires a row greater than 64KB");
#endif
   if ((png_uint_32)png_ptr->rowbytes > (png_uint_32) -2)
	  png_error(png_ptr, "Row has too many bytes to allocate in memory.");
   png_ptr->prev_row = (png_bytep)png_malloc(png_ptr, (png_uint_32)(
	  png_ptr->rowbytes + 1));

   png_memset_check(png_ptr, png_ptr->prev_row, 0, png_ptr->rowbytes + 1);

   png_debug1(3, "width = %lu,\n", png_ptr->width);
   png_debug1(3, "height = %lu,\n", png_ptr->height);
   png_debug1(3, "iwidth = %lu,\n", png_ptr->iwidth);
   png_debug1(3, "num_rows = %lu\n", png_ptr->num_rows);
   png_debug1(3, "rowbytes = %lu,\n", png_ptr->rowbytes);
   png_debug1(3, "irowbytes = %lu,\n", png_ptr->irowbytes);

   png_ptr->flags |= PNG_FLAG_ROW_INIT;
}
#endif /* PNG_READ_SUPPORTED */

/*** End of inlined file: pngrutil.c ***/


/*** Start of inlined file: pngset.c ***/
/* pngset.c - storage of image information into info struct
 *
 * Last changed in libpng 1.2.21 [October 4, 2007]
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 *
 * The functions here are used during reads to store data from the file
 * into the info struct, and during writes to store application data
 * into the info struct for writing into the file.  This abstracts the
 * info struct and allows us to change the structure in the future.
 */

#define PNG_INTERNAL

#if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)

#if defined(PNG_bKGD_SUPPORTED)
void PNGAPI
png_set_bKGD(png_structp png_ptr, png_infop info_ptr, png_color_16p background)
{
   png_debug1(1, "in %s storage function\n", "bKGD");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   png_memcpy(&(info_ptr->background), background, png_sizeof(png_color_16));
   info_ptr->valid |= PNG_INFO_bKGD;
}
#endif

#if defined(PNG_cHRM_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
void PNGAPI
png_set_cHRM(png_structp png_ptr, png_infop info_ptr,
   double white_x, double white_y, double red_x, double red_y,
   double green_x, double green_y, double blue_x, double blue_y)
{
   png_debug1(1, "in %s storage function\n", "cHRM");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   if (white_x < 0.0 || white_y < 0.0 ||
		 red_x < 0.0 ||   red_y < 0.0 ||
	   green_x < 0.0 || green_y < 0.0 ||
		blue_x < 0.0 ||  blue_y < 0.0)
   {
	  png_warning(png_ptr,
		"Ignoring attempt to set negative chromaticity value");
	  return;
   }
   if (white_x > 21474.83 || white_y > 21474.83 ||
		 red_x > 21474.83 ||   red_y > 21474.83 ||
	   green_x > 21474.83 || green_y > 21474.83 ||
		blue_x > 21474.83 ||  blue_y > 21474.83)
   {
	  png_warning(png_ptr,
		"Ignoring attempt to set chromaticity value exceeding 21474.83");
	  return;
   }

   info_ptr->x_white = (float)white_x;
   info_ptr->y_white = (float)white_y;
   info_ptr->x_red   = (float)red_x;
   info_ptr->y_red   = (float)red_y;
   info_ptr->x_green = (float)green_x;
   info_ptr->y_green = (float)green_y;
   info_ptr->x_blue  = (float)blue_x;
   info_ptr->y_blue  = (float)blue_y;
#ifdef PNG_FIXED_POINT_SUPPORTED
   info_ptr->int_x_white = (png_fixed_point)(white_x*100000.+0.5);
   info_ptr->int_y_white = (png_fixed_point)(white_y*100000.+0.5);
   info_ptr->int_x_red   = (png_fixed_point)(  red_x*100000.+0.5);
   info_ptr->int_y_red   = (png_fixed_point)(  red_y*100000.+0.5);
   info_ptr->int_x_green = (png_fixed_point)(green_x*100000.+0.5);
   info_ptr->int_y_green = (png_fixed_point)(green_y*100000.+0.5);
   info_ptr->int_x_blue  = (png_fixed_point)( blue_x*100000.+0.5);
   info_ptr->int_y_blue  = (png_fixed_point)( blue_y*100000.+0.5);
#endif
   info_ptr->valid |= PNG_INFO_cHRM;
}
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
void PNGAPI
png_set_cHRM_fixed(png_structp png_ptr, png_infop info_ptr,
   png_fixed_point white_x, png_fixed_point white_y, png_fixed_point red_x,
   png_fixed_point red_y, png_fixed_point green_x, png_fixed_point green_y,
   png_fixed_point blue_x, png_fixed_point blue_y)
{
   png_debug1(1, "in %s storage function\n", "cHRM");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   if (white_x < 0 || white_y < 0 ||
		 red_x < 0 ||   red_y < 0 ||
	   green_x < 0 || green_y < 0 ||
		blue_x < 0 ||  blue_y < 0)
   {
	  png_warning(png_ptr,
		"Ignoring attempt to set negative chromaticity value");
	  return;
   }
#ifdef PNG_FLOATING_POINT_SUPPORTED
   if (white_x > (double) PNG_UINT_31_MAX ||
	   white_y > (double) PNG_UINT_31_MAX ||
		 red_x > (double) PNG_UINT_31_MAX ||
		 red_y > (double) PNG_UINT_31_MAX ||
	   green_x > (double) PNG_UINT_31_MAX ||
	   green_y > (double) PNG_UINT_31_MAX ||
		blue_x > (double) PNG_UINT_31_MAX ||
		blue_y > (double) PNG_UINT_31_MAX)
#else
   if (white_x > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
	   white_y > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
		 red_x > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
		 red_y > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
	   green_x > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
	   green_y > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
		blue_x > (png_fixed_point) PNG_UINT_31_MAX/100000L ||
		blue_y > (png_fixed_point) PNG_UINT_31_MAX/100000L)
#endif
   {
	  png_warning(png_ptr,
		"Ignoring attempt to set chromaticity value exceeding 21474.83");
	  return;
   }
   info_ptr->int_x_white = white_x;
   info_ptr->int_y_white = white_y;
   info_ptr->int_x_red   = red_x;
   info_ptr->int_y_red   = red_y;
   info_ptr->int_x_green = green_x;
   info_ptr->int_y_green = green_y;
   info_ptr->int_x_blue  = blue_x;
   info_ptr->int_y_blue  = blue_y;
#ifdef PNG_FLOATING_POINT_SUPPORTED
   info_ptr->x_white = (float)(white_x/100000.);
   info_ptr->y_white = (float)(white_y/100000.);
   info_ptr->x_red   = (float)(  red_x/100000.);
   info_ptr->y_red   = (float)(  red_y/100000.);
   info_ptr->x_green = (float)(green_x/100000.);
   info_ptr->y_green = (float)(green_y/100000.);
   info_ptr->x_blue  = (float)( blue_x/100000.);
   info_ptr->y_blue  = (float)( blue_y/100000.);
#endif
   info_ptr->valid |= PNG_INFO_cHRM;
}
#endif
#endif

#if defined(PNG_gAMA_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
void PNGAPI
png_set_gAMA(png_structp png_ptr, png_infop info_ptr, double file_gamma)
{
   double gamma;
   png_debug1(1, "in %s storage function\n", "gAMA");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   /* Check for overflow */
   if (file_gamma > 21474.83)
   {
	  png_warning(png_ptr, "Limiting gamma to 21474.83");
	  gamma=21474.83;
   }
   else
	  gamma=file_gamma;
   info_ptr->gamma = (float)gamma;
#ifdef PNG_FIXED_POINT_SUPPORTED
   info_ptr->int_gamma = (int)(gamma*100000.+.5);
#endif
   info_ptr->valid |= PNG_INFO_gAMA;
   if(gamma == 0.0)
	  png_warning(png_ptr, "Setting gamma=0");
}
#endif
void PNGAPI
png_set_gAMA_fixed(png_structp png_ptr, png_infop info_ptr, png_fixed_point
   int_gamma)
{
   png_fixed_point gamma;

   png_debug1(1, "in %s storage function\n", "gAMA");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   if (int_gamma > (png_fixed_point) PNG_UINT_31_MAX)
   {
	 png_warning(png_ptr, "Limiting gamma to 21474.83");
	 gamma=PNG_UINT_31_MAX;
   }
   else
   {
	 if (int_gamma < 0)
	 {
	   png_warning(png_ptr, "Setting negative gamma to zero");
	   gamma=0;
	 }
	 else
	   gamma=int_gamma;
   }
#ifdef PNG_FLOATING_POINT_SUPPORTED
   info_ptr->gamma = (float)(gamma/100000.);
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
   info_ptr->int_gamma = gamma;
#endif
   info_ptr->valid |= PNG_INFO_gAMA;
   if(gamma == 0)
	  png_warning(png_ptr, "Setting gamma=0");
}
#endif

#if defined(PNG_hIST_SUPPORTED)
void PNGAPI
png_set_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p hist)
{
   int i;

   png_debug1(1, "in %s storage function\n", "hIST");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;
   if (info_ptr->num_palette == 0 || info_ptr->num_palette
	   > PNG_MAX_PALETTE_LENGTH)
   {
	   png_warning(png_ptr,
		  "Invalid palette size, hIST allocation skipped.");
	   return;
   }

#ifdef PNG_FREE_ME_SUPPORTED
   png_free_data(png_ptr, info_ptr, PNG_FREE_HIST, 0);
#endif
   /* Changed from info->num_palette to PNG_MAX_PALETTE_LENGTH in version
	  1.2.1 */
   png_ptr->hist = (png_uint_16p)png_malloc_warn(png_ptr,
	  (png_uint_32)(PNG_MAX_PALETTE_LENGTH * png_sizeof (png_uint_16)));
   if (png_ptr->hist == NULL)
	 {
	   png_warning(png_ptr, "Insufficient memory for hIST chunk data.");
	   return;
	 }

   for (i = 0; i < info_ptr->num_palette; i++)
	   png_ptr->hist[i] = hist[i];
   info_ptr->hist = png_ptr->hist;
   info_ptr->valid |= PNG_INFO_hIST;

#ifdef PNG_FREE_ME_SUPPORTED
   info_ptr->free_me |= PNG_FREE_HIST;
#else
   png_ptr->flags |= PNG_FLAG_FREE_HIST;
#endif
}
#endif

void PNGAPI
png_set_IHDR(png_structp png_ptr, png_infop info_ptr,
   png_uint_32 width, png_uint_32 height, int bit_depth,
   int color_type, int interlace_type, int compression_type,
   int filter_type)
{
   png_debug1(1, "in %s storage function\n", "IHDR");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   /* check for width and height valid values */
   if (width == 0 || height == 0)
	  png_error(png_ptr, "Image width or height is zero in IHDR");
#ifdef PNG_SET_USER_LIMITS_SUPPORTED
   if (width > png_ptr->user_width_max || height > png_ptr->user_height_max)
	  png_error(png_ptr, "image size exceeds user limits in IHDR");
#else
   if (width > PNG_USER_WIDTH_MAX || height > PNG_USER_HEIGHT_MAX)
	  png_error(png_ptr, "image size exceeds user limits in IHDR");
#endif
   if (width > PNG_UINT_31_MAX || height > PNG_UINT_31_MAX)
	  png_error(png_ptr, "Invalid image size in IHDR");
   if ( width > (PNG_UINT_32_MAX
				 >> 3)      /* 8-byte RGBA pixels */
				 - 64       /* bigrowbuf hack */
				 - 1        /* filter byte */
				 - 7*8      /* rounding of width to multiple of 8 pixels */
				 - 8)       /* extra max_pixel_depth pad */
	  png_warning(png_ptr, "Width is too large for libpng to process pixels");

   /* check other values */
   if (bit_depth != 1 && bit_depth != 2 && bit_depth != 4 &&
	  bit_depth != 8 && bit_depth != 16)
	  png_error(png_ptr, "Invalid bit depth in IHDR");

   if (color_type < 0 || color_type == 1 ||
	  color_type == 5 || color_type > 6)
	  png_error(png_ptr, "Invalid color type in IHDR");

   if (((color_type == PNG_COLOR_TYPE_PALETTE) && bit_depth > 8) ||
	   ((color_type == PNG_COLOR_TYPE_RGB ||
		 color_type == PNG_COLOR_TYPE_GRAY_ALPHA ||
		 color_type == PNG_COLOR_TYPE_RGB_ALPHA) && bit_depth < 8))
	  png_error(png_ptr, "Invalid color type/bit depth combination in IHDR");

   if (interlace_type >= PNG_INTERLACE_LAST)
	  png_error(png_ptr, "Unknown interlace method in IHDR");

   if (compression_type != PNG_COMPRESSION_TYPE_BASE)
	  png_error(png_ptr, "Unknown compression method in IHDR");

#if defined(PNG_MNG_FEATURES_SUPPORTED)
   /* Accept filter_method 64 (intrapixel differencing) only if
	* 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and
	* 2. Libpng did not read a PNG signature (this filter_method is only
	*    used in PNG datastreams that are embedded in MNG datastreams) and
	* 3. The application called png_permit_mng_features with a mask that
	*    included PNG_FLAG_MNG_FILTER_64 and
	* 4. The filter_method is 64 and
	* 5. The color_type is RGB or RGBA
	*/
   if((png_ptr->mode&PNG_HAVE_PNG_SIGNATURE)&&png_ptr->mng_features_permitted)
	  png_warning(png_ptr,"MNG features are not allowed in a PNG datastream");
   if(filter_type != PNG_FILTER_TYPE_BASE)
   {
	 if(!((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) &&
		(filter_type == PNG_INTRAPIXEL_DIFFERENCING) &&
		((png_ptr->mode&PNG_HAVE_PNG_SIGNATURE) == 0) &&
		(color_type == PNG_COLOR_TYPE_RGB ||
		 color_type == PNG_COLOR_TYPE_RGB_ALPHA)))
		png_error(png_ptr, "Unknown filter method in IHDR");
	 if(png_ptr->mode&PNG_HAVE_PNG_SIGNATURE)
		png_warning(png_ptr, "Invalid filter method in IHDR");
   }
#else
   if(filter_type != PNG_FILTER_TYPE_BASE)
	  png_error(png_ptr, "Unknown filter method in IHDR");
#endif

   info_ptr->width = width;
   info_ptr->height = height;
   info_ptr->bit_depth = (png_byte)bit_depth;
   info_ptr->color_type =(png_byte) color_type;
   info_ptr->compression_type = (png_byte)compression_type;
   info_ptr->filter_type = (png_byte)filter_type;
   info_ptr->interlace_type = (png_byte)interlace_type;
   if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	  info_ptr->channels = 1;
   else if (info_ptr->color_type & PNG_COLOR_MASK_COLOR)
	  info_ptr->channels = 3;
   else
	  info_ptr->channels = 1;
   if (info_ptr->color_type & PNG_COLOR_MASK_ALPHA)
	  info_ptr->channels++;
   info_ptr->pixel_depth = (png_byte)(info_ptr->channels * info_ptr->bit_depth);

   /* check for potential overflow */
   if (width > (PNG_UINT_32_MAX
				 >> 3)      /* 8-byte RGBA pixels */
				 - 64       /* bigrowbuf hack */
				 - 1        /* filter byte */
				 - 7*8      /* rounding of width to multiple of 8 pixels */
				 - 8)       /* extra max_pixel_depth pad */
	  info_ptr->rowbytes = (png_size_t)0;
   else
	  info_ptr->rowbytes = PNG_ROWBYTES(info_ptr->pixel_depth,width);
}

#if defined(PNG_oFFs_SUPPORTED)
void PNGAPI
png_set_oFFs(png_structp png_ptr, png_infop info_ptr,
   png_int_32 offset_x, png_int_32 offset_y, int unit_type)
{
   png_debug1(1, "in %s storage function\n", "oFFs");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   info_ptr->x_offset = offset_x;
   info_ptr->y_offset = offset_y;
   info_ptr->offset_unit_type = (png_byte)unit_type;
   info_ptr->valid |= PNG_INFO_oFFs;
}
#endif

#if defined(PNG_pCAL_SUPPORTED)
void PNGAPI
png_set_pCAL(png_structp png_ptr, png_infop info_ptr,
   png_charp purpose, png_int_32 X0, png_int_32 X1, int type, int nparams,
   png_charp units, png_charpp params)
{
   png_uint_32 length;
   int i;

   png_debug1(1, "in %s storage function\n", "pCAL");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   length = png_strlen(purpose) + 1;
   png_debug1(3, "allocating purpose for info (%lu bytes)\n", length);
   info_ptr->pcal_purpose = (png_charp)png_malloc_warn(png_ptr, length);
   if (info_ptr->pcal_purpose == NULL)
	 {
	   png_warning(png_ptr, "Insufficient memory for pCAL purpose.");
	   return;
	 }
   png_memcpy(info_ptr->pcal_purpose, purpose, (png_size_t)length);

   png_debug(3, "storing X0, X1, type, and nparams in info\n");
   info_ptr->pcal_X0 = X0;
   info_ptr->pcal_X1 = X1;
   info_ptr->pcal_type = (png_byte)type;
   info_ptr->pcal_nparams = (png_byte)nparams;

   length = png_strlen(units) + 1;
   png_debug1(3, "allocating units for info (%lu bytes)\n", length);
   info_ptr->pcal_units = (png_charp)png_malloc_warn(png_ptr, length);
   if (info_ptr->pcal_units == NULL)
	 {
	   png_warning(png_ptr, "Insufficient memory for pCAL units.");
	   return;
	 }
   png_memcpy(info_ptr->pcal_units, units, (png_size_t)length);

   info_ptr->pcal_params = (png_charpp)png_malloc_warn(png_ptr,
	  (png_uint_32)((nparams + 1) * png_sizeof(png_charp)));
   if (info_ptr->pcal_params == NULL)
	 {
	   png_warning(png_ptr, "Insufficient memory for pCAL params.");
	   return;
	 }

   info_ptr->pcal_params[nparams] = NULL;

   for (i = 0; i < nparams; i++)
   {
	  length = png_strlen(params[i]) + 1;
	  png_debug2(3, "allocating parameter %d for info (%lu bytes)\n", i, length);
	  info_ptr->pcal_params[i] = (png_charp)png_malloc_warn(png_ptr, length);
	  if (info_ptr->pcal_params[i] == NULL)
		{
		  png_warning(png_ptr, "Insufficient memory for pCAL parameter.");
		  return;
		}
	  png_memcpy(info_ptr->pcal_params[i], params[i], (png_size_t)length);
   }

   info_ptr->valid |= PNG_INFO_pCAL;
#ifdef PNG_FREE_ME_SUPPORTED
   info_ptr->free_me |= PNG_FREE_PCAL;
#endif
}
#endif

#if defined(PNG_READ_sCAL_SUPPORTED) || defined(PNG_WRITE_sCAL_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
void PNGAPI
png_set_sCAL(png_structp png_ptr, png_infop info_ptr,
			 int unit, double width, double height)
{
   png_debug1(1, "in %s storage function\n", "sCAL");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   info_ptr->scal_unit = (png_byte)unit;
   info_ptr->scal_pixel_width = width;
   info_ptr->scal_pixel_height = height;

   info_ptr->valid |= PNG_INFO_sCAL;
}
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
void PNGAPI
png_set_sCAL_s(png_structp png_ptr, png_infop info_ptr,
			 int unit, png_charp swidth, png_charp sheight)
{
   png_uint_32 length;

   png_debug1(1, "in %s storage function\n", "sCAL");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   info_ptr->scal_unit = (png_byte)unit;

   length = png_strlen(swidth) + 1;
   png_debug1(3, "allocating unit for info (%d bytes)\n", length);
   info_ptr->scal_s_width = (png_charp)png_malloc_warn(png_ptr, length);
   if (info_ptr->scal_s_width == NULL)
   {
	  png_warning(png_ptr,
	   "Memory allocation failed while processing sCAL.");
   }
   png_memcpy(info_ptr->scal_s_width, swidth, (png_size_t)length);

   length = png_strlen(sheight) + 1;
   png_debug1(3, "allocating unit for info (%d bytes)\n", length);
   info_ptr->scal_s_height = (png_charp)png_malloc_warn(png_ptr, length);
   if (info_ptr->scal_s_height == NULL)
   {
	  png_free (png_ptr, info_ptr->scal_s_width);
	  png_warning(png_ptr,
	   "Memory allocation failed while processing sCAL.");
   }
   png_memcpy(info_ptr->scal_s_height, sheight, (png_size_t)length);

   info_ptr->valid |= PNG_INFO_sCAL;
#ifdef PNG_FREE_ME_SUPPORTED
   info_ptr->free_me |= PNG_FREE_SCAL;
#endif
}
#endif
#endif
#endif

#if defined(PNG_pHYs_SUPPORTED)
void PNGAPI
png_set_pHYs(png_structp png_ptr, png_infop info_ptr,
   png_uint_32 res_x, png_uint_32 res_y, int unit_type)
{
   png_debug1(1, "in %s storage function\n", "pHYs");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   info_ptr->x_pixels_per_unit = res_x;
   info_ptr->y_pixels_per_unit = res_y;
   info_ptr->phys_unit_type = (png_byte)unit_type;
   info_ptr->valid |= PNG_INFO_pHYs;
}
#endif

void PNGAPI
png_set_PLTE(png_structp png_ptr, png_infop info_ptr,
   png_colorp palette, int num_palette)
{

   png_debug1(1, "in %s storage function\n", "PLTE");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   if (num_palette < 0 || num_palette > PNG_MAX_PALETTE_LENGTH)
	 {
	   if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
		 png_error(png_ptr, "Invalid palette length");
	   else
	   {
		 png_warning(png_ptr, "Invalid palette length");
		 return;
	   }
	 }

   /*
	* It may not actually be necessary to set png_ptr->palette here;
	* we do it for backward compatibility with the way the png_handle_tRNS
	* function used to do the allocation.
	*/
#ifdef PNG_FREE_ME_SUPPORTED
   png_free_data(png_ptr, info_ptr, PNG_FREE_PLTE, 0);
#endif

   /* Changed in libpng-1.2.1 to allocate PNG_MAX_PALETTE_LENGTH instead
	  of num_palette entries,
	  in case of an invalid PNG file that has too-large sample values. */
   png_ptr->palette = (png_colorp)png_malloc(png_ptr,
	  PNG_MAX_PALETTE_LENGTH * png_sizeof(png_color));
   png_memset(png_ptr->palette, 0, PNG_MAX_PALETTE_LENGTH *
	  png_sizeof(png_color));
   png_memcpy(png_ptr->palette, palette, num_palette * png_sizeof (png_color));
   info_ptr->palette = png_ptr->palette;
   info_ptr->num_palette = png_ptr->num_palette = (png_uint_16)num_palette;

#ifdef PNG_FREE_ME_SUPPORTED
   info_ptr->free_me |= PNG_FREE_PLTE;
#else
   png_ptr->flags |= PNG_FLAG_FREE_PLTE;
#endif

   info_ptr->valid |= PNG_INFO_PLTE;
}

#if defined(PNG_sBIT_SUPPORTED)
void PNGAPI
png_set_sBIT(png_structp png_ptr, png_infop info_ptr,
   png_color_8p sig_bit)
{
   png_debug1(1, "in %s storage function\n", "sBIT");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   png_memcpy(&(info_ptr->sig_bit), sig_bit, png_sizeof (png_color_8));
   info_ptr->valid |= PNG_INFO_sBIT;
}
#endif

#if defined(PNG_sRGB_SUPPORTED)
void PNGAPI
png_set_sRGB(png_structp png_ptr, png_infop info_ptr, int intent)
{
   png_debug1(1, "in %s storage function\n", "sRGB");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   info_ptr->srgb_intent = (png_byte)intent;
   info_ptr->valid |= PNG_INFO_sRGB;
}

void PNGAPI
png_set_sRGB_gAMA_and_cHRM(png_structp png_ptr, png_infop info_ptr,
   int intent)
{
#if defined(PNG_gAMA_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
   float file_gamma;
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
   png_fixed_point int_file_gamma;
#endif
#endif
#if defined(PNG_cHRM_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
   float white_x, white_y, red_x, red_y, green_x, green_y, blue_x, blue_y;
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
   png_fixed_point int_white_x, int_white_y, int_red_x, int_red_y, int_green_x,
	  int_green_y, int_blue_x, int_blue_y;
#endif
#endif
   png_debug1(1, "in %s storage function\n", "sRGB_gAMA_and_cHRM");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   png_set_sRGB(png_ptr, info_ptr, intent);

#if defined(PNG_gAMA_SUPPORTED)
#ifdef PNG_FLOATING_POINT_SUPPORTED
   file_gamma = (float).45455;
   png_set_gAMA(png_ptr, info_ptr, file_gamma);
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
   int_file_gamma = 45455L;
   png_set_gAMA_fixed(png_ptr, info_ptr, int_file_gamma);
#endif
#endif

#if defined(PNG_cHRM_SUPPORTED)
#ifdef PNG_FIXED_POINT_SUPPORTED
   int_white_x = 31270L;
   int_white_y = 32900L;
   int_red_x   = 64000L;
   int_red_y   = 33000L;
   int_green_x = 30000L;
   int_green_y = 60000L;
   int_blue_x  = 15000L;
   int_blue_y  =  6000L;

   png_set_cHRM_fixed(png_ptr, info_ptr,
	  int_white_x, int_white_y, int_red_x, int_red_y, int_green_x, int_green_y,
	  int_blue_x, int_blue_y);
#endif
#ifdef PNG_FLOATING_POINT_SUPPORTED
   white_x = (float).3127;
   white_y = (float).3290;
   red_x   = (float).64;
   red_y   = (float).33;
   green_x = (float).30;
   green_y = (float).60;
   blue_x  = (float).15;
   blue_y  = (float).06;

   png_set_cHRM(png_ptr, info_ptr,
	  white_x, white_y, red_x, red_y, green_x, green_y, blue_x, blue_y);
#endif
#endif
}
#endif

#if defined(PNG_iCCP_SUPPORTED)
void PNGAPI
png_set_iCCP(png_structp png_ptr, png_infop info_ptr,
			 png_charp name, int compression_type,
			 png_charp profile, png_uint_32 proflen)
{
   png_charp new_iccp_name;
   png_charp new_iccp_profile;

   png_debug1(1, "in %s storage function\n", "iCCP");
   if (png_ptr == NULL || info_ptr == NULL || name == NULL || profile == NULL)
	  return;

   new_iccp_name = (png_charp)png_malloc_warn(png_ptr, png_strlen(name)+1);
   if (new_iccp_name == NULL)
   {
	  png_warning(png_ptr, "Insufficient memory to process iCCP chunk.");
	  return;
   }
   png_strncpy(new_iccp_name, name, png_strlen(name)+1);
   new_iccp_profile = (png_charp)png_malloc_warn(png_ptr, proflen);
   if (new_iccp_profile == NULL)
   {
	  png_free (png_ptr, new_iccp_name);
	  png_warning(png_ptr, "Insufficient memory to process iCCP profile.");
	  return;
   }
   png_memcpy(new_iccp_profile, profile, (png_size_t)proflen);

   png_free_data(png_ptr, info_ptr, PNG_FREE_ICCP, 0);

   info_ptr->iccp_proflen = proflen;
   info_ptr->iccp_name = new_iccp_name;
   info_ptr->iccp_profile = new_iccp_profile;
   /* Compression is always zero but is here so the API and info structure
	* does not have to change if we introduce multiple compression types */
   info_ptr->iccp_compression = (png_byte)compression_type;
#ifdef PNG_FREE_ME_SUPPORTED
   info_ptr->free_me |= PNG_FREE_ICCP;
#endif
   info_ptr->valid |= PNG_INFO_iCCP;
}
#endif

#if defined(PNG_TEXT_SUPPORTED)
void PNGAPI
png_set_text(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr,
   int num_text)
{
   int ret;
   ret=png_set_text_2(png_ptr, info_ptr, text_ptr, num_text);
   if (ret)
	 png_error(png_ptr, "Insufficient memory to store text");
}

int /* PRIVATE */
png_set_text_2(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr,
   int num_text)
{
   int i;

   png_debug1(1, "in %s storage function\n", (png_ptr->chunk_name[0] == '\0' ?
	  "text" : (png_const_charp)png_ptr->chunk_name));

   if (png_ptr == NULL || info_ptr == NULL || num_text == 0)
	  return(0);

   /* Make sure we have enough space in the "text" array in info_struct
	* to hold all of the incoming text_ptr objects.
	*/
   if (info_ptr->num_text + num_text > info_ptr->max_text)
   {
	  if (info_ptr->text != NULL)
	  {
		 png_textp old_text;
		 int old_max;

		 old_max = info_ptr->max_text;
		 info_ptr->max_text = info_ptr->num_text + num_text + 8;
		 old_text = info_ptr->text;
		 info_ptr->text = (png_textp)png_malloc_warn(png_ptr,
			(png_uint_32)(info_ptr->max_text * png_sizeof (png_text)));
		 if (info_ptr->text == NULL)
		   {
			 png_free(png_ptr, old_text);
			 return(1);
		   }
		 png_memcpy(info_ptr->text, old_text, (png_size_t)(old_max *
			png_sizeof(png_text)));
		 png_free(png_ptr, old_text);
	  }
	  else
	  {
		 info_ptr->max_text = num_text + 8;
		 info_ptr->num_text = 0;
		 info_ptr->text = (png_textp)png_malloc_warn(png_ptr,
			(png_uint_32)(info_ptr->max_text * png_sizeof (png_text)));
		 if (info_ptr->text == NULL)
		   return(1);
#ifdef PNG_FREE_ME_SUPPORTED
		 info_ptr->free_me |= PNG_FREE_TEXT;
#endif
	  }
	  png_debug1(3, "allocated %d entries for info_ptr->text\n",
		 info_ptr->max_text);
   }
   for (i = 0; i < num_text; i++)
   {
	  png_size_t text_length,key_len;
	  png_size_t lang_len,lang_key_len;
	  png_textp textp = &(info_ptr->text[info_ptr->num_text]);

	  if (text_ptr[i].key == NULL)
		  continue;

	  key_len = png_strlen(text_ptr[i].key);

	  if(text_ptr[i].compression <= 0)
	  {
		lang_len = 0;
		lang_key_len = 0;
	  }
	  else
#ifdef PNG_iTXt_SUPPORTED
	  {
		/* set iTXt data */
		if (text_ptr[i].lang != NULL)
		  lang_len = png_strlen(text_ptr[i].lang);
		else
		  lang_len = 0;
		if (text_ptr[i].lang_key != NULL)
		  lang_key_len = png_strlen(text_ptr[i].lang_key);
		else
		  lang_key_len = 0;
	  }
#else
	  {
		png_warning(png_ptr, "iTXt chunk not supported.");
		continue;
	  }
#endif

	  if (text_ptr[i].text == NULL || text_ptr[i].text[0] == '\0')
	  {
		 text_length = 0;
#ifdef PNG_iTXt_SUPPORTED
		 if(text_ptr[i].compression > 0)
			textp->compression = PNG_ITXT_COMPRESSION_NONE;
		 else
#endif
			textp->compression = PNG_TEXT_COMPRESSION_NONE;
	  }
	  else
	  {
		 text_length = png_strlen(text_ptr[i].text);
		 textp->compression = text_ptr[i].compression;
	  }

	  textp->key = (png_charp)png_malloc_warn(png_ptr,
		 (png_uint_32)(key_len + text_length + lang_len + lang_key_len + 4));
	  if (textp->key == NULL)
		return(1);
	  png_debug2(2, "Allocated %lu bytes at %x in png_set_text\n",
		 (png_uint_32)(key_len + lang_len + lang_key_len + text_length + 4),
		 (int)textp->key);

	  png_memcpy(textp->key, text_ptr[i].key,
		 (png_size_t)(key_len));
	  *(textp->key+key_len) = '\0';
#ifdef PNG_iTXt_SUPPORTED
	  if (text_ptr[i].compression > 0)
	  {
		 textp->lang=textp->key + key_len + 1;
		 png_memcpy(textp->lang, text_ptr[i].lang, lang_len);
		 *(textp->lang+lang_len) = '\0';
		 textp->lang_key=textp->lang + lang_len + 1;
		 png_memcpy(textp->lang_key, text_ptr[i].lang_key, lang_key_len);
		 *(textp->lang_key+lang_key_len) = '\0';
		 textp->text=textp->lang_key + lang_key_len + 1;
	  }
	  else
#endif
	  {
#ifdef PNG_iTXt_SUPPORTED
		 textp->lang=NULL;
		 textp->lang_key=NULL;
#endif
		 textp->text=textp->key + key_len + 1;
	  }
	  if(text_length)
		 png_memcpy(textp->text, text_ptr[i].text,
			(png_size_t)(text_length));
	  *(textp->text+text_length) = '\0';

#ifdef PNG_iTXt_SUPPORTED
	  if(textp->compression > 0)
	  {
		 textp->text_length = 0;
		 textp->itxt_length = text_length;
	  }
	  else
#endif
	  {
		 textp->text_length = text_length;
#ifdef PNG_iTXt_SUPPORTED
		 textp->itxt_length = 0;
#endif
	  }
	  info_ptr->num_text++;
	  png_debug1(3, "transferred text chunk %d\n", info_ptr->num_text);
   }
   return(0);
}
#endif

#if defined(PNG_tIME_SUPPORTED)
void PNGAPI
png_set_tIME(png_structp png_ptr, png_infop info_ptr, png_timep mod_time)
{
   png_debug1(1, "in %s storage function\n", "tIME");
   if (png_ptr == NULL || info_ptr == NULL ||
	   (png_ptr->mode & PNG_WROTE_tIME))
	  return;

   png_memcpy(&(info_ptr->mod_time), mod_time, png_sizeof (png_time));
   info_ptr->valid |= PNG_INFO_tIME;
}
#endif

#if defined(PNG_tRNS_SUPPORTED)
void PNGAPI
png_set_tRNS(png_structp png_ptr, png_infop info_ptr,
   png_bytep trans, int num_trans, png_color_16p trans_values)
{
   png_debug1(1, "in %s storage function\n", "tRNS");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   if (trans != NULL)
   {
	   /*
		* It may not actually be necessary to set png_ptr->trans here;
		* we do it for backward compatibility with the way the png_handle_tRNS
		* function used to do the allocation.
		*/
#ifdef PNG_FREE_ME_SUPPORTED
	   png_free_data(png_ptr, info_ptr, PNG_FREE_TRNS, 0);
#endif
	   /* Changed from num_trans to PNG_MAX_PALETTE_LENGTH in version 1.2.1 */
	   png_ptr->trans = info_ptr->trans = (png_bytep)png_malloc(png_ptr,
		   (png_uint_32)PNG_MAX_PALETTE_LENGTH);
	   if (num_trans <= PNG_MAX_PALETTE_LENGTH)
		 png_memcpy(info_ptr->trans, trans, (png_size_t)num_trans);
#ifdef PNG_FREE_ME_SUPPORTED
	   info_ptr->free_me |= PNG_FREE_TRNS;
#else
	   png_ptr->flags |= PNG_FLAG_FREE_TRNS;
#endif
   }

   if (trans_values != NULL)
   {
	  png_memcpy(&(info_ptr->trans_values), trans_values,
		 png_sizeof(png_color_16));
	  if (num_trans == 0)
		num_trans = 1;
   }
   info_ptr->num_trans = (png_uint_16)num_trans;
   info_ptr->valid |= PNG_INFO_tRNS;
}
#endif

#if defined(PNG_sPLT_SUPPORTED)
void PNGAPI
png_set_sPLT(png_structp png_ptr,
			 png_infop info_ptr, png_sPLT_tp entries, int nentries)
{
	png_sPLT_tp np;
	int i;

	if (png_ptr == NULL || info_ptr == NULL)
	   return;

	np = (png_sPLT_tp)png_malloc_warn(png_ptr,
		(info_ptr->splt_palettes_num + nentries) * png_sizeof(png_sPLT_t));
	if (np == NULL)
	{
	  png_warning(png_ptr, "No memory for sPLT palettes.");
	  return;
	}

	png_memcpy(np, info_ptr->splt_palettes,
		   info_ptr->splt_palettes_num * png_sizeof(png_sPLT_t));
	png_free(png_ptr, info_ptr->splt_palettes);
	info_ptr->splt_palettes=NULL;

	for (i = 0; i < nentries; i++)
	{
		png_sPLT_tp to = np + info_ptr->splt_palettes_num + i;
		png_sPLT_tp from = entries + i;

		to->name = (png_charp)png_malloc_warn(png_ptr,
		  png_strlen(from->name) + 1);
		if (to->name == NULL)
		{
		   png_warning(png_ptr,
			 "Out of memory while processing sPLT chunk");
		}
		/* TODO: use png_malloc_warn */
		png_strncpy(to->name, from->name, png_strlen(from->name)+1);
		to->entries = (png_sPLT_entryp)png_malloc_warn(png_ptr,
			from->nentries * png_sizeof(png_sPLT_entry));
		/* TODO: use png_malloc_warn */
		png_memcpy(to->entries, from->entries,
			from->nentries * png_sizeof(png_sPLT_entry));
		if (to->entries == NULL)
		{
		   png_warning(png_ptr,
			 "Out of memory while processing sPLT chunk");
		   png_free(png_ptr,to->name);
		   to->name = NULL;
		}
		to->nentries = from->nentries;
		to->depth = from->depth;
	}

	info_ptr->splt_palettes = np;
	info_ptr->splt_palettes_num += nentries;
	info_ptr->valid |= PNG_INFO_sPLT;
#ifdef PNG_FREE_ME_SUPPORTED
	info_ptr->free_me |= PNG_FREE_SPLT;
#endif
}
#endif /* PNG_sPLT_SUPPORTED */

#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
void PNGAPI
png_set_unknown_chunks(png_structp png_ptr,
   png_infop info_ptr, png_unknown_chunkp unknowns, int num_unknowns)
{
	png_unknown_chunkp np;
	int i;

	if (png_ptr == NULL || info_ptr == NULL || num_unknowns == 0)
		return;

	np = (png_unknown_chunkp)png_malloc_warn(png_ptr,
		(info_ptr->unknown_chunks_num + num_unknowns) *
		png_sizeof(png_unknown_chunk));
	if (np == NULL)
	{
	   png_warning(png_ptr,
		  "Out of memory while processing unknown chunk.");
	   return;
	}

	png_memcpy(np, info_ptr->unknown_chunks,
		   info_ptr->unknown_chunks_num * png_sizeof(png_unknown_chunk));
	png_free(png_ptr, info_ptr->unknown_chunks);
	info_ptr->unknown_chunks=NULL;

	for (i = 0; i < num_unknowns; i++)
	{
		png_unknown_chunkp to = np + info_ptr->unknown_chunks_num + i;
		png_unknown_chunkp from = unknowns + i;

		png_strncpy((png_charp)to->name, (png_charp)from->name, 5);
		to->data = (png_bytep)png_malloc_warn(png_ptr, from->size);
		if (to->data == NULL)
		{
		   png_warning(png_ptr,
			  "Out of memory while processing unknown chunk.");
		}
		else
		{
		   png_memcpy(to->data, from->data, from->size);
		   to->size = from->size;

		   /* note our location in the read or write sequence */
		   to->location = (png_byte)(png_ptr->mode & 0xff);
		}
	}

	info_ptr->unknown_chunks = np;
	info_ptr->unknown_chunks_num += num_unknowns;
#ifdef PNG_FREE_ME_SUPPORTED
	info_ptr->free_me |= PNG_FREE_UNKN;
#endif
}
void PNGAPI
png_set_unknown_chunk_location(png_structp png_ptr, png_infop info_ptr,
   int chunk, int location)
{
   if(png_ptr != NULL && info_ptr != NULL && chunk >= 0 && chunk <
		 (int)info_ptr->unknown_chunks_num)
	  info_ptr->unknown_chunks[chunk].location = (png_byte)location;
}
#endif

#if defined(PNG_1_0_X) || defined(PNG_1_2_X)
#if defined(PNG_READ_EMPTY_PLTE_SUPPORTED) || \
	defined(PNG_WRITE_EMPTY_PLTE_SUPPORTED)
void PNGAPI
png_permit_empty_plte (png_structp png_ptr, int empty_plte_permitted)
{
   /* This function is deprecated in favor of png_permit_mng_features()
	  and will be removed from libpng-1.3.0 */
   png_debug(1, "in png_permit_empty_plte, DEPRECATED.\n");
   if (png_ptr == NULL)
	  return;
   png_ptr->mng_features_permitted = (png_byte)
	 ((png_ptr->mng_features_permitted & (~(PNG_FLAG_MNG_EMPTY_PLTE))) |
	 ((empty_plte_permitted & PNG_FLAG_MNG_EMPTY_PLTE)));
}
#endif
#endif

#if defined(PNG_MNG_FEATURES_SUPPORTED)
png_uint_32 PNGAPI
png_permit_mng_features (png_structp png_ptr, png_uint_32 mng_features)
{
   png_debug(1, "in png_permit_mng_features\n");
   if (png_ptr == NULL)
	  return (png_uint_32)0;
   png_ptr->mng_features_permitted =
	 (png_byte)(mng_features & PNG_ALL_MNG_FEATURES);
   return (png_uint_32)png_ptr->mng_features_permitted;
}
#endif

#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
void PNGAPI
png_set_keep_unknown_chunks(png_structp png_ptr, int keep, png_bytep
   chunk_list, int num_chunks)
{
	png_bytep new_list, p;
	int i, old_num_chunks;
	if (png_ptr == NULL)
	   return;
	if (num_chunks == 0)
	{
	  if(keep == PNG_HANDLE_CHUNK_ALWAYS || keep == PNG_HANDLE_CHUNK_IF_SAFE)
		png_ptr->flags |= PNG_FLAG_KEEP_UNKNOWN_CHUNKS;
	  else
		png_ptr->flags &= ~PNG_FLAG_KEEP_UNKNOWN_CHUNKS;

	  if(keep == PNG_HANDLE_CHUNK_ALWAYS)
		png_ptr->flags |= PNG_FLAG_KEEP_UNSAFE_CHUNKS;
	  else
		png_ptr->flags &= ~PNG_FLAG_KEEP_UNSAFE_CHUNKS;
	  return;
	}
	if (chunk_list == NULL)
	  return;
	old_num_chunks=png_ptr->num_chunk_list;
	new_list=(png_bytep)png_malloc(png_ptr,
	   (png_uint_32)(5*(num_chunks+old_num_chunks)));
	if(png_ptr->chunk_list != NULL)
	{
	   png_memcpy(new_list, png_ptr->chunk_list,
		  (png_size_t)(5*old_num_chunks));
	   png_free(png_ptr, png_ptr->chunk_list);
	   png_ptr->chunk_list=NULL;
	}
	png_memcpy(new_list+5*old_num_chunks, chunk_list,
	   (png_size_t)(5*num_chunks));
	for (p=new_list+5*old_num_chunks+4, i=0; i<num_chunks; i++, p+=5)
	   *p=(png_byte)keep;
	png_ptr->num_chunk_list=old_num_chunks+num_chunks;
	png_ptr->chunk_list=new_list;
#ifdef PNG_FREE_ME_SUPPORTED
	png_ptr->free_me |= PNG_FREE_LIST;
#endif
}
#endif

#if defined(PNG_READ_USER_CHUNKS_SUPPORTED)
void PNGAPI
png_set_read_user_chunk_fn(png_structp png_ptr, png_voidp user_chunk_ptr,
   png_user_chunk_ptr read_user_chunk_fn)
{
   png_debug(1, "in png_set_read_user_chunk_fn\n");
   if (png_ptr == NULL)
	  return;
   png_ptr->read_user_chunk_fn = read_user_chunk_fn;
   png_ptr->user_chunk_ptr = user_chunk_ptr;
}
#endif

#if defined(PNG_INFO_IMAGE_SUPPORTED)
void PNGAPI
png_set_rows(png_structp png_ptr, png_infop info_ptr, png_bytepp row_pointers)
{
   png_debug1(1, "in %s storage function\n", "rows");

   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   if(info_ptr->row_pointers && (info_ptr->row_pointers != row_pointers))
	  png_free_data(png_ptr, info_ptr, PNG_FREE_ROWS, 0);
   info_ptr->row_pointers = row_pointers;
   if(row_pointers)
	  info_ptr->valid |= PNG_INFO_IDAT;
}
#endif

#ifdef PNG_WRITE_SUPPORTED
void PNGAPI
png_set_compression_buffer_size(png_structp png_ptr, png_uint_32 size)
{
	if (png_ptr == NULL)
	   return;
	if(png_ptr->zbuf)
	   png_free(png_ptr, png_ptr->zbuf);
	png_ptr->zbuf_size = (png_size_t)size;
	png_ptr->zbuf = (png_bytep)png_malloc(png_ptr, size);
	png_ptr->zstream.next_out = png_ptr->zbuf;
	png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
}
#endif

void PNGAPI
png_set_invalid(png_structp png_ptr, png_infop info_ptr, int mask)
{
   if (png_ptr && info_ptr)
	  info_ptr->valid &= ~(mask);
}

#ifndef PNG_1_0_X
#ifdef PNG_ASSEMBLER_CODE_SUPPORTED
/* function was added to libpng 1.2.0 and should always exist by default */
void PNGAPI
png_set_asm_flags (png_structp png_ptr, png_uint_32)
{
/* Obsolete as of libpng-1.2.20 and will be removed from libpng-1.4.0 */
	if (png_ptr != NULL)
	png_ptr->asm_flags = 0;
}

/* this function was added to libpng 1.2.0 */
void PNGAPI
png_set_mmx_thresholds (png_structp png_ptr,
						png_byte,
						png_uint_32)
{
/* Obsolete as of libpng-1.2.20 and will be removed from libpng-1.4.0 */
	if (png_ptr == NULL)
	   return;
}
#endif /* ?PNG_ASSEMBLER_CODE_SUPPORTED */

#ifdef PNG_SET_USER_LIMITS_SUPPORTED
/* this function was added to libpng 1.2.6 */
void PNGAPI
png_set_user_limits (png_structp png_ptr, png_uint_32 user_width_max,
	png_uint_32 user_height_max)
{
	/* Images with dimensions larger than these limits will be
	 * rejected by png_set_IHDR().  To accept any PNG datastream
	 * regardless of dimensions, set both limits to 0x7ffffffL.
	 */
	if(png_ptr == NULL) return;
	png_ptr->user_width_max = user_width_max;
	png_ptr->user_height_max = user_height_max;
}
#endif /* ?PNG_SET_USER_LIMITS_SUPPORTED */

#endif /* ?PNG_1_0_X */
#endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */

/*** End of inlined file: pngset.c ***/


/*** Start of inlined file: pngtrans.c ***/
/* pngtrans.c - transforms the data in a row (used by both readers and writers)
 *
 * Last changed in libpng 1.2.17 May 15, 2007
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 */

#define PNG_INTERNAL

#if defined(PNG_READ_SUPPORTED) || defined(PNG_WRITE_SUPPORTED)
#if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)
/* turn on BGR-to-RGB mapping */
void PNGAPI
png_set_bgr(png_structp png_ptr)
{
   png_debug(1, "in png_set_bgr\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= PNG_BGR;
}
#endif

#if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)
/* turn on 16 bit byte swapping */
void PNGAPI
png_set_swap(png_structp png_ptr)
{
   png_debug(1, "in png_set_swap\n");
   if(png_ptr == NULL) return;
   if (png_ptr->bit_depth == 16)
	  png_ptr->transformations |= PNG_SWAP_BYTES;
}
#endif

#if defined(PNG_READ_PACK_SUPPORTED) || defined(PNG_WRITE_PACK_SUPPORTED)
/* turn on pixel packing */
void PNGAPI
png_set_packing(png_structp png_ptr)
{
   png_debug(1, "in png_set_packing\n");
   if(png_ptr == NULL) return;
   if (png_ptr->bit_depth < 8)
   {
	  png_ptr->transformations |= PNG_PACK;
	  png_ptr->usr_bit_depth = 8;
   }
}
#endif

#if defined(PNG_READ_PACKSWAP_SUPPORTED)||defined(PNG_WRITE_PACKSWAP_SUPPORTED)
/* turn on packed pixel swapping */
void PNGAPI
png_set_packswap(png_structp png_ptr)
{
   png_debug(1, "in png_set_packswap\n");
   if(png_ptr == NULL) return;
   if (png_ptr->bit_depth < 8)
	  png_ptr->transformations |= PNG_PACKSWAP;
}
#endif

#if defined(PNG_READ_SHIFT_SUPPORTED) || defined(PNG_WRITE_SHIFT_SUPPORTED)
void PNGAPI
png_set_shift(png_structp png_ptr, png_color_8p true_bits)
{
   png_debug(1, "in png_set_shift\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= PNG_SHIFT;
   png_ptr->shift = *true_bits;
}
#endif

#if defined(PNG_READ_INTERLACING_SUPPORTED) || \
	defined(PNG_WRITE_INTERLACING_SUPPORTED)
int PNGAPI
png_set_interlace_handling(png_structp png_ptr)
{
   png_debug(1, "in png_set_interlace handling\n");
   if (png_ptr && png_ptr->interlaced)
   {
	  png_ptr->transformations |= PNG_INTERLACE;
	  return (7);
   }

   return (1);
}
#endif

#if defined(PNG_READ_FILLER_SUPPORTED) || defined(PNG_WRITE_FILLER_SUPPORTED)
/* Add a filler byte on read, or remove a filler or alpha byte on write.
 * The filler type has changed in v0.95 to allow future 2-byte fillers
 * for 48-bit input data, as well as to avoid problems with some compilers
 * that don't like bytes as parameters.
 */
void PNGAPI
png_set_filler(png_structp png_ptr, png_uint_32 filler, int filler_loc)
{
   png_debug(1, "in png_set_filler\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= PNG_FILLER;
   png_ptr->filler = (png_byte)filler;
   if (filler_loc == PNG_FILLER_AFTER)
	  png_ptr->flags |= PNG_FLAG_FILLER_AFTER;
   else
	  png_ptr->flags &= ~PNG_FLAG_FILLER_AFTER;

   /* This should probably go in the "do_read_filler" routine.
	* I attempted to do that in libpng-1.0.1a but that caused problems
	* so I restored it in libpng-1.0.2a
   */

   if (png_ptr->color_type == PNG_COLOR_TYPE_RGB)
   {
	  png_ptr->usr_channels = 4;
   }

   /* Also I added this in libpng-1.0.2a (what happens when we expand
	* a less-than-8-bit grayscale to GA? */

   if (png_ptr->color_type == PNG_COLOR_TYPE_GRAY && png_ptr->bit_depth >= 8)
   {
	  png_ptr->usr_channels = 2;
   }
}

#if !defined(PNG_1_0_X)
/* Added to libpng-1.2.7 */
void PNGAPI
png_set_add_alpha(png_structp png_ptr, png_uint_32 filler, int filler_loc)
{
   png_debug(1, "in png_set_add_alpha\n");
   if(png_ptr == NULL) return;
   png_set_filler(png_ptr, filler, filler_loc);
   png_ptr->transformations |= PNG_ADD_ALPHA;
}
#endif

#endif

#if defined(PNG_READ_SWAP_ALPHA_SUPPORTED) || \
	defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
void PNGAPI
png_set_swap_alpha(png_structp png_ptr)
{
   png_debug(1, "in png_set_swap_alpha\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= PNG_SWAP_ALPHA;
}
#endif

#if defined(PNG_READ_INVERT_ALPHA_SUPPORTED) || \
	defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
void PNGAPI
png_set_invert_alpha(png_structp png_ptr)
{
   png_debug(1, "in png_set_invert_alpha\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= PNG_INVERT_ALPHA;
}
#endif

#if defined(PNG_READ_INVERT_SUPPORTED) || defined(PNG_WRITE_INVERT_SUPPORTED)
void PNGAPI
png_set_invert_mono(png_structp png_ptr)
{
   png_debug(1, "in png_set_invert_mono\n");
   if(png_ptr == NULL) return;
   png_ptr->transformations |= PNG_INVERT_MONO;
}

/* invert monochrome grayscale data */
void /* PRIVATE */
png_do_invert(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_invert\n");
  /* This test removed from libpng version 1.0.13 and 1.2.0:
   *   if (row_info->bit_depth == 1 &&
   */
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row == NULL || row_info == NULL)
	 return;
#endif
   if (row_info->color_type == PNG_COLOR_TYPE_GRAY)
   {
	  png_bytep rp = row;
	  png_uint_32 i;
	  png_uint_32 istop = row_info->rowbytes;

	  for (i = 0; i < istop; i++)
	  {
		 *rp = (png_byte)(~(*rp));
		 rp++;
	  }
   }
   else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA &&
	  row_info->bit_depth == 8)
   {
	  png_bytep rp = row;
	  png_uint_32 i;
	  png_uint_32 istop = row_info->rowbytes;

	  for (i = 0; i < istop; i+=2)
	  {
		 *rp = (png_byte)(~(*rp));
		 rp+=2;
	  }
   }
   else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA &&
	  row_info->bit_depth == 16)
   {
	  png_bytep rp = row;
	  png_uint_32 i;
	  png_uint_32 istop = row_info->rowbytes;

	  for (i = 0; i < istop; i+=4)
	  {
		 *rp = (png_byte)(~(*rp));
		 *(rp+1) = (png_byte)(~(*(rp+1)));
		 rp+=4;
	  }
   }
}
#endif

#if defined(PNG_READ_SWAP_SUPPORTED) || defined(PNG_WRITE_SWAP_SUPPORTED)
/* swaps byte order on 16 bit depth images */
void /* PRIVATE */
png_do_swap(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_swap\n");
   if (
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL &&
#endif
	   row_info->bit_depth == 16)
   {
	  png_bytep rp = row;
	  png_uint_32 i;
	  png_uint_32 istop= row_info->width * row_info->channels;

	  for (i = 0; i < istop; i++, rp += 2)
	  {
		 png_byte t = *rp;
		 *rp = *(rp + 1);
		 *(rp + 1) = t;
	  }
   }
}
#endif

#if defined(PNG_READ_PACKSWAP_SUPPORTED)||defined(PNG_WRITE_PACKSWAP_SUPPORTED)
static PNG_CONST png_byte onebppswaptable[256] = {
   0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0,
   0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,
   0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8,
   0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,
   0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4,
   0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
   0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC,
   0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,
   0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2,
   0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,
   0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA,
   0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
   0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6,
   0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,
   0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE,
   0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
   0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1,
   0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
   0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9,
   0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,
   0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5,
   0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
   0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED,
   0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
   0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3,
   0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,
   0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB,
   0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
   0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7,
   0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
   0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF,
   0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
};

static PNG_CONST png_byte twobppswaptable[256] = {
   0x00, 0x40, 0x80, 0xC0, 0x10, 0x50, 0x90, 0xD0,
   0x20, 0x60, 0xA0, 0xE0, 0x30, 0x70, 0xB0, 0xF0,
   0x04, 0x44, 0x84, 0xC4, 0x14, 0x54, 0x94, 0xD4,
   0x24, 0x64, 0xA4, 0xE4, 0x34, 0x74, 0xB4, 0xF4,
   0x08, 0x48, 0x88, 0xC8, 0x18, 0x58, 0x98, 0xD8,
   0x28, 0x68, 0xA8, 0xE8, 0x38, 0x78, 0xB8, 0xF8,
   0x0C, 0x4C, 0x8C, 0xCC, 0x1C, 0x5C, 0x9C, 0xDC,
   0x2C, 0x6C, 0xAC, 0xEC, 0x3C, 0x7C, 0xBC, 0xFC,
   0x01, 0x41, 0x81, 0xC1, 0x11, 0x51, 0x91, 0xD1,
   0x21, 0x61, 0xA1, 0xE1, 0x31, 0x71, 0xB1, 0xF1,
   0x05, 0x45, 0x85, 0xC5, 0x15, 0x55, 0x95, 0xD5,
   0x25, 0x65, 0xA5, 0xE5, 0x35, 0x75, 0xB5, 0xF5,
   0x09, 0x49, 0x89, 0xC9, 0x19, 0x59, 0x99, 0xD9,
   0x29, 0x69, 0xA9, 0xE9, 0x39, 0x79, 0xB9, 0xF9,
   0x0D, 0x4D, 0x8D, 0xCD, 0x1D, 0x5D, 0x9D, 0xDD,
   0x2D, 0x6D, 0xAD, 0xED, 0x3D, 0x7D, 0xBD, 0xFD,
   0x02, 0x42, 0x82, 0xC2, 0x12, 0x52, 0x92, 0xD2,
   0x22, 0x62, 0xA2, 0xE2, 0x32, 0x72, 0xB2, 0xF2,
   0x06, 0x46, 0x86, 0xC6, 0x16, 0x56, 0x96, 0xD6,
   0x26, 0x66, 0xA6, 0xE6, 0x36, 0x76, 0xB6, 0xF6,
   0x0A, 0x4A, 0x8A, 0xCA, 0x1A, 0x5A, 0x9A, 0xDA,
   0x2A, 0x6A, 0xAA, 0xEA, 0x3A, 0x7A, 0xBA, 0xFA,
   0x0E, 0x4E, 0x8E, 0xCE, 0x1E, 0x5E, 0x9E, 0xDE,
   0x2E, 0x6E, 0xAE, 0xEE, 0x3E, 0x7E, 0xBE, 0xFE,
   0x03, 0x43, 0x83, 0xC3, 0x13, 0x53, 0x93, 0xD3,
   0x23, 0x63, 0xA3, 0xE3, 0x33, 0x73, 0xB3, 0xF3,
   0x07, 0x47, 0x87, 0xC7, 0x17, 0x57, 0x97, 0xD7,
   0x27, 0x67, 0xA7, 0xE7, 0x37, 0x77, 0xB7, 0xF7,
   0x0B, 0x4B, 0x8B, 0xCB, 0x1B, 0x5B, 0x9B, 0xDB,
   0x2B, 0x6B, 0xAB, 0xEB, 0x3B, 0x7B, 0xBB, 0xFB,
   0x0F, 0x4F, 0x8F, 0xCF, 0x1F, 0x5F, 0x9F, 0xDF,
   0x2F, 0x6F, 0xAF, 0xEF, 0x3F, 0x7F, 0xBF, 0xFF
};

static PNG_CONST png_byte fourbppswaptable[256] = {
   0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70,
   0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xF0,
   0x01, 0x11, 0x21, 0x31, 0x41, 0x51, 0x61, 0x71,
   0x81, 0x91, 0xA1, 0xB1, 0xC1, 0xD1, 0xE1, 0xF1,
   0x02, 0x12, 0x22, 0x32, 0x42, 0x52, 0x62, 0x72,
   0x82, 0x92, 0xA2, 0xB2, 0xC2, 0xD2, 0xE2, 0xF2,
   0x03, 0x13, 0x23, 0x33, 0x43, 0x53, 0x63, 0x73,
   0x83, 0x93, 0xA3, 0xB3, 0xC3, 0xD3, 0xE3, 0xF3,
   0x04, 0x14, 0x24, 0x34, 0x44, 0x54, 0x64, 0x74,
   0x84, 0x94, 0xA4, 0xB4, 0xC4, 0xD4, 0xE4, 0xF4,
   0x05, 0x15, 0x25, 0x35, 0x45, 0x55, 0x65, 0x75,
   0x85, 0x95, 0xA5, 0xB5, 0xC5, 0xD5, 0xE5, 0xF5,
   0x06, 0x16, 0x26, 0x36, 0x46, 0x56, 0x66, 0x76,
   0x86, 0x96, 0xA6, 0xB6, 0xC6, 0xD6, 0xE6, 0xF6,
   0x07, 0x17, 0x27, 0x37, 0x47, 0x57, 0x67, 0x77,
   0x87, 0x97, 0xA7, 0xB7, 0xC7, 0xD7, 0xE7, 0xF7,
   0x08, 0x18, 0x28, 0x38, 0x48, 0x58, 0x68, 0x78,
   0x88, 0x98, 0xA8, 0xB8, 0xC8, 0xD8, 0xE8, 0xF8,
   0x09, 0x19, 0x29, 0x39, 0x49, 0x59, 0x69, 0x79,
   0x89, 0x99, 0xA9, 0xB9, 0xC9, 0xD9, 0xE9, 0xF9,
   0x0A, 0x1A, 0x2A, 0x3A, 0x4A, 0x5A, 0x6A, 0x7A,
   0x8A, 0x9A, 0xAA, 0xBA, 0xCA, 0xDA, 0xEA, 0xFA,
   0x0B, 0x1B, 0x2B, 0x3B, 0x4B, 0x5B, 0x6B, 0x7B,
   0x8B, 0x9B, 0xAB, 0xBB, 0xCB, 0xDB, 0xEB, 0xFB,
   0x0C, 0x1C, 0x2C, 0x3C, 0x4C, 0x5C, 0x6C, 0x7C,
   0x8C, 0x9C, 0xAC, 0xBC, 0xCC, 0xDC, 0xEC, 0xFC,
   0x0D, 0x1D, 0x2D, 0x3D, 0x4D, 0x5D, 0x6D, 0x7D,
   0x8D, 0x9D, 0xAD, 0xBD, 0xCD, 0xDD, 0xED, 0xFD,
   0x0E, 0x1E, 0x2E, 0x3E, 0x4E, 0x5E, 0x6E, 0x7E,
   0x8E, 0x9E, 0xAE, 0xBE, 0xCE, 0xDE, 0xEE, 0xFE,
   0x0F, 0x1F, 0x2F, 0x3F, 0x4F, 0x5F, 0x6F, 0x7F,
   0x8F, 0x9F, 0xAF, 0xBF, 0xCF, 0xDF, 0xEF, 0xFF
};

/* swaps pixel packing order within bytes */
void /* PRIVATE */
png_do_packswap(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_packswap\n");
   if (
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL &&
#endif
	   row_info->bit_depth < 8)
   {
	  png_bytep rp, end, table;

	  end = row + row_info->rowbytes;

	  if (row_info->bit_depth == 1)
		 table = (png_bytep)onebppswaptable;
	  else if (row_info->bit_depth == 2)
		 table = (png_bytep)twobppswaptable;
	  else if (row_info->bit_depth == 4)
		 table = (png_bytep)fourbppswaptable;
	  else
		 return;

	  for (rp = row; rp < end; rp++)
		 *rp = table[*rp];
   }
}
#endif /* PNG_READ_PACKSWAP_SUPPORTED or PNG_WRITE_PACKSWAP_SUPPORTED */

#if defined(PNG_WRITE_FILLER_SUPPORTED) || \
	defined(PNG_READ_STRIP_ALPHA_SUPPORTED)
/* remove filler or alpha byte(s) */
void /* PRIVATE */
png_do_strip_filler(png_row_infop row_info, png_bytep row, png_uint_32 flags)
{
   png_debug(1, "in png_do_strip_filler\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL)
#endif
   {
	  png_bytep sp=row;
	  png_bytep dp=row;
	  png_uint_32 row_width=row_info->width;
	  png_uint_32 i;

	  if ((row_info->color_type == PNG_COLOR_TYPE_RGB ||
		 (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA &&
		 (flags & PNG_FLAG_STRIP_ALPHA))) &&
		 row_info->channels == 4)
	  {
		 if (row_info->bit_depth == 8)
		 {
			/* This converts from RGBX or RGBA to RGB */
			if (flags & PNG_FLAG_FILLER_AFTER)
			{
			   dp+=3; sp+=4;
			   for (i = 1; i < row_width; i++)
			   {
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  sp++;
			   }
			}
			/* This converts from XRGB or ARGB to RGB */
			else
			{
			   for (i = 0; i < row_width; i++)
			   {
				  sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
			   }
			}
			row_info->pixel_depth = 24;
			row_info->rowbytes = row_width * 3;
		 }
		 else /* if (row_info->bit_depth == 16) */
		 {
			if (flags & PNG_FLAG_FILLER_AFTER)
			{
			   /* This converts from RRGGBBXX or RRGGBBAA to RRGGBB */
			   sp += 8; dp += 6;
			   for (i = 1; i < row_width; i++)
			   {
				  /* This could be (although png_memcpy is probably slower):
				  png_memcpy(dp, sp, 6);
				  sp += 8;
				  dp += 6;
				  */

				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  sp += 2;
			   }
			}
			else
			{
			   /* This converts from XXRRGGBB or AARRGGBB to RRGGBB */
			   for (i = 0; i < row_width; i++)
			   {
				  /* This could be (although png_memcpy is probably slower):
				  png_memcpy(dp, sp, 6);
				  sp += 8;
				  dp += 6;
				  */

				  sp+=2;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
			   }
			}
			row_info->pixel_depth = 48;
			row_info->rowbytes = row_width * 6;
		 }
		 row_info->channels = 3;
	  }
	  else if ((row_info->color_type == PNG_COLOR_TYPE_GRAY ||
		 (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA &&
		 (flags & PNG_FLAG_STRIP_ALPHA))) &&
		  row_info->channels == 2)
	  {
		 if (row_info->bit_depth == 8)
		 {
			/* This converts from GX or GA to G */
			if (flags & PNG_FLAG_FILLER_AFTER)
			{
			   for (i = 0; i < row_width; i++)
			   {
				  *dp++ = *sp++;
				  sp++;
			   }
			}
			/* This converts from XG or AG to G */
			else
			{
			   for (i = 0; i < row_width; i++)
			   {
				  sp++;
				  *dp++ = *sp++;
			   }
			}
			row_info->pixel_depth = 8;
			row_info->rowbytes = row_width;
		 }
		 else /* if (row_info->bit_depth == 16) */
		 {
			if (flags & PNG_FLAG_FILLER_AFTER)
			{
			   /* This converts from GGXX or GGAA to GG */
			   sp += 4; dp += 2;
			   for (i = 1; i < row_width; i++)
			   {
				  *dp++ = *sp++;
				  *dp++ = *sp++;
				  sp += 2;
			   }
			}
			else
			{
			   /* This converts from XXGG or AAGG to GG */
			   for (i = 0; i < row_width; i++)
			   {
				  sp += 2;
				  *dp++ = *sp++;
				  *dp++ = *sp++;
			   }
			}
			row_info->pixel_depth = 16;
			row_info->rowbytes = row_width * 2;
		 }
		 row_info->channels = 1;
	  }
	  if (flags & PNG_FLAG_STRIP_ALPHA)
		row_info->color_type &= ~PNG_COLOR_MASK_ALPHA;
   }
}
#endif

#if defined(PNG_READ_BGR_SUPPORTED) || defined(PNG_WRITE_BGR_SUPPORTED)
/* swaps red and blue bytes within a pixel */
void /* PRIVATE */
png_do_bgr(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_bgr\n");
   if (
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL &&
#endif
	   (row_info->color_type & PNG_COLOR_MASK_COLOR))
   {
	  png_uint_32 row_width = row_info->width;
	  if (row_info->bit_depth == 8)
	  {
		 if (row_info->color_type == PNG_COLOR_TYPE_RGB)
		 {
			png_bytep rp;
			png_uint_32 i;

			for (i = 0, rp = row; i < row_width; i++, rp += 3)
			{
			   png_byte save = *rp;
			   *rp = *(rp + 2);
			   *(rp + 2) = save;
			}
		 }
		 else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
		 {
			png_bytep rp;
			png_uint_32 i;

			for (i = 0, rp = row; i < row_width; i++, rp += 4)
			{
			   png_byte save = *rp;
			   *rp = *(rp + 2);
			   *(rp + 2) = save;
			}
		 }
	  }
	  else if (row_info->bit_depth == 16)
	  {
		 if (row_info->color_type == PNG_COLOR_TYPE_RGB)
		 {
			png_bytep rp;
			png_uint_32 i;

			for (i = 0, rp = row; i < row_width; i++, rp += 6)
			{
			   png_byte save = *rp;
			   *rp = *(rp + 4);
			   *(rp + 4) = save;
			   save = *(rp + 1);
			   *(rp + 1) = *(rp + 5);
			   *(rp + 5) = save;
			}
		 }
		 else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
		 {
			png_bytep rp;
			png_uint_32 i;

			for (i = 0, rp = row; i < row_width; i++, rp += 8)
			{
			   png_byte save = *rp;
			   *rp = *(rp + 4);
			   *(rp + 4) = save;
			   save = *(rp + 1);
			   *(rp + 1) = *(rp + 5);
			   *(rp + 5) = save;
			}
		 }
	  }
   }
}
#endif /* PNG_READ_BGR_SUPPORTED or PNG_WRITE_BGR_SUPPORTED */

#if defined(PNG_READ_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED) || \
	defined(PNG_LEGACY_SUPPORTED)
void PNGAPI
png_set_user_transform_info(png_structp png_ptr, png_voidp
   user_transform_ptr, int user_transform_depth, int user_transform_channels)
{
   png_debug(1, "in png_set_user_transform_info\n");
   if(png_ptr == NULL) return;
#if defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
   png_ptr->user_transform_ptr = user_transform_ptr;
   png_ptr->user_transform_depth = (png_byte)user_transform_depth;
   png_ptr->user_transform_channels = (png_byte)user_transform_channels;
#else
   if(user_transform_ptr || user_transform_depth || user_transform_channels)
	  png_warning(png_ptr,
		"This version of libpng does not support user transform info");
#endif
}
#endif

/* This function returns a pointer to the user_transform_ptr associated with
 * the user transform functions.  The application should free any memory
 * associated with this pointer before png_write_destroy and png_read_destroy
 * are called.
 */
png_voidp PNGAPI
png_get_user_transform_ptr(png_structp png_ptr)
{
#if defined(PNG_USER_TRANSFORM_PTR_SUPPORTED)
   if (png_ptr == NULL) return (NULL);
   return ((png_voidp)png_ptr->user_transform_ptr);
#else
   return (NULL);
#endif
}
#endif /* PNG_READ_SUPPORTED || PNG_WRITE_SUPPORTED */

/*** End of inlined file: pngtrans.c ***/


/*** Start of inlined file: pngwio.c ***/
/* pngwio.c - functions for data output
 *
 * Last changed in libpng 1.2.13 November 13, 2006
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2006 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 *
 * This file provides a location for all output.  Users who need
 * special handling are expected to write functions that have the same
 * arguments as these and perform similar functions, but that possibly
 * use different output methods.  Note that you shouldn't change these
 * functions, but rather write replacement functions and then change
 * them at run time with png_set_write_fn(...).
 */

#define PNG_INTERNAL

#ifdef PNG_WRITE_SUPPORTED

/* Write the data to whatever output you are using.  The default routine
   writes to a file pointer.  Note that this routine sometimes gets called
   with very small lengths, so you should implement some kind of simple
   buffering if you are using unbuffered writes.  This should never be asked
   to write more than 64K on a 16 bit machine.  */

void /* PRIVATE */
png_write_data(png_structp png_ptr, png_bytep data, png_size_t length)
{
   if (png_ptr->write_data_fn != NULL )
	  (*(png_ptr->write_data_fn))(png_ptr, data, length);
   else
	  png_error(png_ptr, "Call to NULL write function");
}

#if !defined(PNG_NO_STDIO)
/* This is the function that does the actual writing of data.  If you are
   not writing to a standard C stream, you should create a replacement
   write_data function and use it at run time with png_set_write_fn(), rather
   than changing the library. */
#ifndef USE_FAR_KEYWORD
void PNGAPI
png_default_write_data(png_structp png_ptr, png_bytep data, png_size_t length)
{
   png_uint_32 check;

   if(png_ptr == NULL) return;
#if defined(_WIN32_WCE)
   if ( !WriteFile((HANDLE)(png_ptr->io_ptr), data, length, &check, NULL) )
	  check = 0;
#else
   check = fwrite(data, 1, length, (png_FILE_p)(png_ptr->io_ptr));
#endif
   if (check != length)
	  png_error(png_ptr, "Write Error");
}
#else
/* this is the model-independent version. Since the standard I/O library
   can't handle far buffers in the medium and small models, we have to copy
   the data.
*/

#define NEAR_BUF_SIZE 1024
#define MIN(a,b) (a <= b ? a : b)

void PNGAPI
png_default_write_data(png_structp png_ptr, png_bytep data, png_size_t length)
{
   png_uint_32 check;
   png_byte *near_data;  /* Needs to be "png_byte *" instead of "png_bytep" */
   png_FILE_p io_ptr;

   if(png_ptr == NULL) return;
   /* Check if data really is near. If so, use usual code. */
   near_data = (png_byte *)CVT_PTR_NOCHECK(data);
   io_ptr = (png_FILE_p)CVT_PTR(png_ptr->io_ptr);
   if ((png_bytep)near_data == data)
   {
#if defined(_WIN32_WCE)
	  if ( !WriteFile(io_ptr, near_data, length, &check, NULL) )
		 check = 0;
#else
	  check = fwrite(near_data, 1, length, io_ptr);
#endif
   }
   else
   {
	  png_byte buf[NEAR_BUF_SIZE];
	  png_size_t written, remaining, err;
	  check = 0;
	  remaining = length;
	  do
	  {
		 written = MIN(NEAR_BUF_SIZE, remaining);
		 png_memcpy(buf, data, written); /* copy far buffer to near buffer */
#if defined(_WIN32_WCE)
		 if ( !WriteFile(io_ptr, buf, written, &err, NULL) )
			err = 0;
#else
		 err = fwrite(buf, 1, written, io_ptr);
#endif
		 if (err != written)
			break;
		 else
			check += err;
		 data += written;
		 remaining -= written;
	  }
	  while (remaining != 0);
   }
   if (check != length)
	  png_error(png_ptr, "Write Error");
}

#endif
#endif

/* This function is called to output any data pending writing (normally
   to disk).  After png_flush is called, there should be no data pending
   writing in any buffers. */
#if defined(PNG_WRITE_FLUSH_SUPPORTED)
void /* PRIVATE */
png_flush(png_structp png_ptr)
{
   if (png_ptr->output_flush_fn != NULL)
	  (*(png_ptr->output_flush_fn))(png_ptr);
}

#if !defined(PNG_NO_STDIO)
void PNGAPI
png_default_flush(png_structp png_ptr)
{
#if !defined(_WIN32_WCE)
   png_FILE_p io_ptr;
#endif
   if(png_ptr == NULL) return;
#if !defined(_WIN32_WCE)
   io_ptr = (png_FILE_p)CVT_PTR((png_ptr->io_ptr));
   if (io_ptr != NULL)
	  fflush(io_ptr);
#endif
}
#endif
#endif

/* This function allows the application to supply new output functions for
   libpng if standard C streams aren't being used.

   This function takes as its arguments:
   png_ptr       - pointer to a png output data structure
   io_ptr        - pointer to user supplied structure containing info about
				   the output functions.  May be NULL.
   write_data_fn - pointer to a new output function that takes as its
				   arguments a pointer to a png_struct, a pointer to
				   data to be written, and a 32-bit unsigned int that is
				   the number of bytes to be written.  The new write
				   function should call png_error(png_ptr, "Error msg")
				   to exit and output any fatal error messages.
   flush_data_fn - pointer to a new flush function that takes as its
				   arguments a pointer to a png_struct.  After a call to
				   the flush function, there should be no data in any buffers
				   or pending transmission.  If the output method doesn't do
				   any buffering of ouput, a function prototype must still be
				   supplied although it doesn't have to do anything.  If
				   PNG_WRITE_FLUSH_SUPPORTED is not defined at libpng compile
				   time, output_flush_fn will be ignored, although it must be
				   supplied for compatibility. */
void PNGAPI
png_set_write_fn(png_structp png_ptr, png_voidp io_ptr,
   png_rw_ptr write_data_fn, png_flush_ptr output_flush_fn)
{
   if(png_ptr == NULL) return;
   png_ptr->io_ptr = io_ptr;

#if !defined(PNG_NO_STDIO)
   if (write_data_fn != NULL)
	  png_ptr->write_data_fn = write_data_fn;
   else
	  png_ptr->write_data_fn = png_default_write_data;
#else
   png_ptr->write_data_fn = write_data_fn;
#endif

#if defined(PNG_WRITE_FLUSH_SUPPORTED)
#if !defined(PNG_NO_STDIO)
   if (output_flush_fn != NULL)
	  png_ptr->output_flush_fn = output_flush_fn;
   else
	  png_ptr->output_flush_fn = png_default_flush;
#else
   png_ptr->output_flush_fn = output_flush_fn;
#endif
#endif /* PNG_WRITE_FLUSH_SUPPORTED */

   /* It is an error to read while writing a png file */
   if (png_ptr->read_data_fn != NULL)
   {
	  png_ptr->read_data_fn = NULL;
	  png_warning(png_ptr,
		 "Attempted to set both read_data_fn and write_data_fn in");
	  png_warning(png_ptr,
		 "the same structure.  Resetting read_data_fn to NULL.");
   }
}

#if defined(USE_FAR_KEYWORD)
#if defined(_MSC_VER)
void *png_far_to_near(png_structp png_ptr,png_voidp ptr, int check)
{
   void *near_ptr;
   void FAR *far_ptr;
   FP_OFF(near_ptr) = FP_OFF(ptr);
   far_ptr = (void FAR *)near_ptr;
   if(check != 0)
	  if(FP_SEG(ptr) != FP_SEG(far_ptr))
		 png_error(png_ptr,"segment lost in conversion");
   return(near_ptr);
}
#  else
void *png_far_to_near(png_structp png_ptr,png_voidp ptr, int check)
{
   void *near_ptr;
   void FAR *far_ptr;
   near_ptr = (void FAR *)ptr;
   far_ptr = (void FAR *)near_ptr;
   if(check != 0)
	  if(far_ptr != ptr)
		 png_error(png_ptr,"segment lost in conversion");
   return(near_ptr);
}
#   endif
#   endif
#endif /* PNG_WRITE_SUPPORTED */

/*** End of inlined file: pngwio.c ***/


/*** Start of inlined file: pngwrite.c ***/
/* pngwrite.c - general routines to write a PNG file
 *
 * Last changed in libpng 1.2.15 January 5, 2007
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 */

/* get internal access to png.h */
#define PNG_INTERNAL

#ifdef PNG_WRITE_SUPPORTED

/* Writes all the PNG information.  This is the suggested way to use the
 * library.  If you have a new chunk to add, make a function to write it,
 * and put it in the correct location here.  If you want the chunk written
 * after the image data, put it in png_write_end().  I strongly encourage
 * you to supply a PNG_INFO_ flag, and check info_ptr->valid before writing
 * the chunk, as that will keep the code from breaking if you want to just
 * write a plain PNG file.  If you have long comments, I suggest writing
 * them in png_write_end(), and compressing them.
 */
void PNGAPI
png_write_info_before_PLTE(png_structp png_ptr, png_infop info_ptr)
{
   png_debug(1, "in png_write_info_before_PLTE\n");
   if (png_ptr == NULL || info_ptr == NULL)
	  return;
   if (!(png_ptr->mode & PNG_WROTE_INFO_BEFORE_PLTE))
   {
   png_write_sig(png_ptr); /* write PNG signature */
#if defined(PNG_MNG_FEATURES_SUPPORTED)
   if((png_ptr->mode&PNG_HAVE_PNG_SIGNATURE)&&(png_ptr->mng_features_permitted))
   {
	  png_warning(png_ptr,"MNG features are not allowed in a PNG datastream");
	  png_ptr->mng_features_permitted=0;
   }
#endif
   /* write IHDR information. */
   png_write_IHDR(png_ptr, info_ptr->width, info_ptr->height,
	  info_ptr->bit_depth, info_ptr->color_type, info_ptr->compression_type,
	  info_ptr->filter_type,
#if defined(PNG_WRITE_INTERLACING_SUPPORTED)
	  info_ptr->interlace_type);
#else
	  0);
#endif
   /* the rest of these check to see if the valid field has the appropriate
	  flag set, and if it does, writes the chunk. */
#if defined(PNG_WRITE_gAMA_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_gAMA)
   {
#  ifdef PNG_FLOATING_POINT_SUPPORTED
	  png_write_gAMA(png_ptr, info_ptr->gamma);
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
	  png_write_gAMA_fixed(png_ptr, info_ptr->int_gamma);
#  endif
#endif
   }
#endif
#if defined(PNG_WRITE_sRGB_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_sRGB)
	  png_write_sRGB(png_ptr, (int)info_ptr->srgb_intent);
#endif
#if defined(PNG_WRITE_iCCP_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_iCCP)
	  png_write_iCCP(png_ptr, info_ptr->iccp_name, PNG_COMPRESSION_TYPE_BASE,
					 info_ptr->iccp_profile, (int)info_ptr->iccp_proflen);
#endif
#if defined(PNG_WRITE_sBIT_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_sBIT)
	  png_write_sBIT(png_ptr, &(info_ptr->sig_bit), info_ptr->color_type);
#endif
#if defined(PNG_WRITE_cHRM_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_cHRM)
   {
#ifdef PNG_FLOATING_POINT_SUPPORTED
	  png_write_cHRM(png_ptr,
		 info_ptr->x_white, info_ptr->y_white,
		 info_ptr->x_red, info_ptr->y_red,
		 info_ptr->x_green, info_ptr->y_green,
		 info_ptr->x_blue, info_ptr->y_blue);
#else
#  ifdef PNG_FIXED_POINT_SUPPORTED
	  png_write_cHRM_fixed(png_ptr,
		 info_ptr->int_x_white, info_ptr->int_y_white,
		 info_ptr->int_x_red, info_ptr->int_y_red,
		 info_ptr->int_x_green, info_ptr->int_y_green,
		 info_ptr->int_x_blue, info_ptr->int_y_blue);
#  endif
#endif
   }
#endif
#if defined(PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED)
   if (info_ptr->unknown_chunks_num)
   {
	   png_unknown_chunk *up;

	   png_debug(5, "writing extra chunks\n");

	   for (up = info_ptr->unknown_chunks;
			up < info_ptr->unknown_chunks + info_ptr->unknown_chunks_num;
			up++)
	   {
		 int keep=png_handle_as_unknown(png_ptr, up->name);
		 if (keep != PNG_HANDLE_CHUNK_NEVER &&
			up->location && !(up->location & PNG_HAVE_PLTE) &&
			!(up->location & PNG_HAVE_IDAT) &&
			((up->name[3] & 0x20) || keep == PNG_HANDLE_CHUNK_ALWAYS ||
			(png_ptr->flags & PNG_FLAG_KEEP_UNSAFE_CHUNKS)))
		 {
			png_write_chunk(png_ptr, up->name, up->data, up->size);
		 }
	   }
   }
#endif
	  png_ptr->mode |= PNG_WROTE_INFO_BEFORE_PLTE;
   }
}

void PNGAPI
png_write_info(png_structp png_ptr, png_infop info_ptr)
{
#if defined(PNG_WRITE_TEXT_SUPPORTED) || defined(PNG_WRITE_sPLT_SUPPORTED)
   int i;
#endif

   png_debug(1, "in png_write_info\n");

   if (png_ptr == NULL || info_ptr == NULL)
	  return;

   png_write_info_before_PLTE(png_ptr, info_ptr);

   if (info_ptr->valid & PNG_INFO_PLTE)
	  png_write_PLTE(png_ptr, info_ptr->palette,
		 (png_uint_32)info_ptr->num_palette);
   else if (info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	  png_error(png_ptr, "Valid palette required for paletted images");

#if defined(PNG_WRITE_tRNS_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_tRNS)
	  {
#if defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
		 /* invert the alpha channel (in tRNS) */
		 if ((png_ptr->transformations & PNG_INVERT_ALPHA) &&
			info_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
		 {
			int j;
			for (j=0; j<(int)info_ptr->num_trans; j++)
			   info_ptr->trans[j] = (png_byte)(255 - info_ptr->trans[j]);
		 }
#endif
	  png_write_tRNS(png_ptr, info_ptr->trans, &(info_ptr->trans_values),
		 info_ptr->num_trans, info_ptr->color_type);
	  }
#endif
#if defined(PNG_WRITE_bKGD_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_bKGD)
	  png_write_bKGD(png_ptr, &(info_ptr->background), info_ptr->color_type);
#endif
#if defined(PNG_WRITE_hIST_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_hIST)
	  png_write_hIST(png_ptr, info_ptr->hist, info_ptr->num_palette);
#endif
#if defined(PNG_WRITE_oFFs_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_oFFs)
	  png_write_oFFs(png_ptr, info_ptr->x_offset, info_ptr->y_offset,
		 info_ptr->offset_unit_type);
#endif
#if defined(PNG_WRITE_pCAL_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_pCAL)
	  png_write_pCAL(png_ptr, info_ptr->pcal_purpose, info_ptr->pcal_X0,
		 info_ptr->pcal_X1, info_ptr->pcal_type, info_ptr->pcal_nparams,
		 info_ptr->pcal_units, info_ptr->pcal_params);
#endif
#if defined(PNG_WRITE_sCAL_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_sCAL)
#if defined(PNG_FLOATING_POINT_SUPPORTED) && !defined(PNG_NO_STDIO)
	  png_write_sCAL(png_ptr, (int)info_ptr->scal_unit,
		  info_ptr->scal_pixel_width, info_ptr->scal_pixel_height);
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
	  png_write_sCAL_s(png_ptr, (int)info_ptr->scal_unit,
		  info_ptr->scal_s_width, info_ptr->scal_s_height);
#else
	  png_warning(png_ptr,
		  "png_write_sCAL not supported; sCAL chunk not written.");
#endif
#endif
#endif
#if defined(PNG_WRITE_pHYs_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_pHYs)
	  png_write_pHYs(png_ptr, info_ptr->x_pixels_per_unit,
		 info_ptr->y_pixels_per_unit, info_ptr->phys_unit_type);
#endif
#if defined(PNG_WRITE_tIME_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_tIME)
   {
	  png_write_tIME(png_ptr, &(info_ptr->mod_time));
	  png_ptr->mode |= PNG_WROTE_tIME;
   }
#endif
#if defined(PNG_WRITE_sPLT_SUPPORTED)
   if (info_ptr->valid & PNG_INFO_sPLT)
	 for (i = 0; i < (int)info_ptr->splt_palettes_num; i++)
	   png_write_sPLT(png_ptr, info_ptr->splt_palettes + i);
#endif
#if defined(PNG_WRITE_TEXT_SUPPORTED)
   /* Check to see if we need to write text chunks */
   for (i = 0; i < info_ptr->num_text; i++)
   {
	  png_debug2(2, "Writing header text chunk %d, type %d\n", i,
		 info_ptr->text[i].compression);
	  /* an internationalized chunk? */
	  if (info_ptr->text[i].compression > 0)
	  {
#if defined(PNG_WRITE_iTXt_SUPPORTED)
		  /* write international chunk */
		  png_write_iTXt(png_ptr,
						 info_ptr->text[i].compression,
						 info_ptr->text[i].key,
						 info_ptr->text[i].lang,
						 info_ptr->text[i].lang_key,
						 info_ptr->text[i].text);
#else
		  png_warning(png_ptr, "Unable to write international text");
#endif
		  /* Mark this chunk as written */
		  info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
	  }
	  /* If we want a compressed text chunk */
	  else if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_zTXt)
	  {
#if defined(PNG_WRITE_zTXt_SUPPORTED)
		 /* write compressed chunk */
		 png_write_zTXt(png_ptr, info_ptr->text[i].key,
			info_ptr->text[i].text, 0,
			info_ptr->text[i].compression);
#else
		 png_warning(png_ptr, "Unable to write compressed text");
#endif
		 /* Mark this chunk as written */
		 info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_zTXt_WR;
	  }
	  else if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_NONE)
	  {
#if defined(PNG_WRITE_tEXt_SUPPORTED)
		 /* write uncompressed chunk */
		 png_write_tEXt(png_ptr, info_ptr->text[i].key,
						 info_ptr->text[i].text,
						 0);
#else
		 png_warning(png_ptr, "Unable to write uncompressed text");
#endif
		 /* Mark this chunk as written */
		 info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
	  }
   }
#endif
#if defined(PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED)
   if (info_ptr->unknown_chunks_num)
   {
	   png_unknown_chunk *up;

	   png_debug(5, "writing extra chunks\n");

	   for (up = info_ptr->unknown_chunks;
			up < info_ptr->unknown_chunks + info_ptr->unknown_chunks_num;
			up++)
	   {
		 int keep=png_handle_as_unknown(png_ptr, up->name);
		 if (keep != PNG_HANDLE_CHUNK_NEVER &&
			up->location && (up->location & PNG_HAVE_PLTE) &&
			!(up->location & PNG_HAVE_IDAT) &&
			((up->name[3] & 0x20) || keep == PNG_HANDLE_CHUNK_ALWAYS ||
			(png_ptr->flags & PNG_FLAG_KEEP_UNSAFE_CHUNKS)))
		 {
			png_write_chunk(png_ptr, up->name, up->data, up->size);
		 }
	   }
   }
#endif
}

/* Writes the end of the PNG file.  If you don't want to write comments or
 * time information, you can pass NULL for info.  If you already wrote these
 * in png_write_info(), do not write them again here.  If you have long
 * comments, I suggest writing them here, and compressing them.
 */
void PNGAPI
png_write_end(png_structp png_ptr, png_infop info_ptr)
{
   png_debug(1, "in png_write_end\n");
   if (png_ptr == NULL)
	  return;
   if (!(png_ptr->mode & PNG_HAVE_IDAT))
	  png_error(png_ptr, "No IDATs written into file");

   /* see if user wants us to write information chunks */
   if (info_ptr != NULL)
   {
#if defined(PNG_WRITE_TEXT_SUPPORTED)
	  int i; /* local index variable */
#endif
#if defined(PNG_WRITE_tIME_SUPPORTED)
	  /* check to see if user has supplied a time chunk */
	  if ((info_ptr->valid & PNG_INFO_tIME) &&
		 !(png_ptr->mode & PNG_WROTE_tIME))
		 png_write_tIME(png_ptr, &(info_ptr->mod_time));
#endif
#if defined(PNG_WRITE_TEXT_SUPPORTED)
	  /* loop through comment chunks */
	  for (i = 0; i < info_ptr->num_text; i++)
	  {
		 png_debug2(2, "Writing trailer text chunk %d, type %d\n", i,
			info_ptr->text[i].compression);
		 /* an internationalized chunk? */
		 if (info_ptr->text[i].compression > 0)
		 {
#if defined(PNG_WRITE_iTXt_SUPPORTED)
			 /* write international chunk */
			 png_write_iTXt(png_ptr,
						 info_ptr->text[i].compression,
						 info_ptr->text[i].key,
						 info_ptr->text[i].lang,
						 info_ptr->text[i].lang_key,
						 info_ptr->text[i].text);
#else
			 png_warning(png_ptr, "Unable to write international text");
#endif
			 /* Mark this chunk as written */
			 info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
		 }
		 else if (info_ptr->text[i].compression >= PNG_TEXT_COMPRESSION_zTXt)
		 {
#if defined(PNG_WRITE_zTXt_SUPPORTED)
			/* write compressed chunk */
			png_write_zTXt(png_ptr, info_ptr->text[i].key,
			   info_ptr->text[i].text, 0,
			   info_ptr->text[i].compression);
#else
			png_warning(png_ptr, "Unable to write compressed text");
#endif
			/* Mark this chunk as written */
			info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_zTXt_WR;
		 }
		 else if (info_ptr->text[i].compression == PNG_TEXT_COMPRESSION_NONE)
		 {
#if defined(PNG_WRITE_tEXt_SUPPORTED)
			/* write uncompressed chunk */
			png_write_tEXt(png_ptr, info_ptr->text[i].key,
			   info_ptr->text[i].text, 0);
#else
			png_warning(png_ptr, "Unable to write uncompressed text");
#endif

			/* Mark this chunk as written */
			info_ptr->text[i].compression = PNG_TEXT_COMPRESSION_NONE_WR;
		 }
	  }
#endif
#if defined(PNG_WRITE_UNKNOWN_CHUNKS_SUPPORTED)
   if (info_ptr->unknown_chunks_num)
   {
	   png_unknown_chunk *up;

	   png_debug(5, "writing extra chunks\n");

	   for (up = info_ptr->unknown_chunks;
			up < info_ptr->unknown_chunks + info_ptr->unknown_chunks_num;
			up++)
	   {
		 int keep=png_handle_as_unknown(png_ptr, up->name);
		 if (keep != PNG_HANDLE_CHUNK_NEVER &&
			up->location && (up->location & PNG_AFTER_IDAT) &&
			((up->name[3] & 0x20) || keep == PNG_HANDLE_CHUNK_ALWAYS ||
			(png_ptr->flags & PNG_FLAG_KEEP_UNSAFE_CHUNKS)))
		 {
			png_write_chunk(png_ptr, up->name, up->data, up->size);
		 }
	   }
   }
#endif
   }

   png_ptr->mode |= PNG_AFTER_IDAT;

   /* write end of PNG file */
   png_write_IEND(png_ptr);
}

#if defined(PNG_WRITE_tIME_SUPPORTED)
#if !defined(_WIN32_WCE)
/* "time.h" functions are not supported on WindowsCE */
void PNGAPI
png_convert_from_struct_tm(png_timep ptime, struct tm FAR * ttime)
{
   png_debug(1, "in png_convert_from_struct_tm\n");
   ptime->year = (png_uint_16)(1900 + ttime->tm_year);
   ptime->month = (png_byte)(ttime->tm_mon + 1);
   ptime->day = (png_byte)ttime->tm_mday;
   ptime->hour = (png_byte)ttime->tm_hour;
   ptime->minute = (png_byte)ttime->tm_min;
   ptime->second = (png_byte)ttime->tm_sec;
}

void PNGAPI
png_convert_from_time_t(png_timep ptime, time_t ttime)
{
   struct tm *tbuf;

   png_debug(1, "in png_convert_from_time_t\n");
   tbuf = gmtime(&ttime);
   png_convert_from_struct_tm(ptime, tbuf);
}
#endif
#endif

/* Initialize png_ptr structure, and allocate any memory needed */
png_structp PNGAPI
png_create_write_struct(png_const_charp user_png_ver, png_voidp error_ptr,
   png_error_ptr error_fn, png_error_ptr warn_fn)
{
#ifdef PNG_USER_MEM_SUPPORTED
   return (png_create_write_struct_2(user_png_ver, error_ptr, error_fn,
	  warn_fn, png_voidp_NULL, png_malloc_ptr_NULL, png_free_ptr_NULL));
}

/* Alternate initialize png_ptr structure, and allocate any memory needed */
png_structp PNGAPI
png_create_write_struct_2(png_const_charp user_png_ver, png_voidp error_ptr,
   png_error_ptr error_fn, png_error_ptr warn_fn, png_voidp mem_ptr,
   png_malloc_ptr malloc_fn, png_free_ptr free_fn)
{
#endif /* PNG_USER_MEM_SUPPORTED */
   png_structp png_ptr;
#ifdef PNG_SETJMP_SUPPORTED
#ifdef USE_FAR_KEYWORD
   jmp_buf jmpbuf;
#endif
#endif
   int i;
   png_debug(1, "in png_create_write_struct\n");
#ifdef PNG_USER_MEM_SUPPORTED
   png_ptr = (png_structp)png_create_struct_2(PNG_STRUCT_PNG,
	  (png_malloc_ptr)malloc_fn, (png_voidp)mem_ptr);
#else
   png_ptr = (png_structp)png_create_struct(PNG_STRUCT_PNG);
#endif /* PNG_USER_MEM_SUPPORTED */
   if (png_ptr == NULL)
	  return (NULL);

   /* added at libpng-1.2.6 */
#ifdef PNG_SET_USER_LIMITS_SUPPORTED
   png_ptr->user_width_max=PNG_USER_WIDTH_MAX;
   png_ptr->user_height_max=PNG_USER_HEIGHT_MAX;
#endif

#ifdef PNG_SETJMP_SUPPORTED
#ifdef USE_FAR_KEYWORD
   if (setjmp(jmpbuf))
#else
   if (setjmp(png_ptr->jmpbuf))
#endif
   {
	  png_free(png_ptr, png_ptr->zbuf);
	  png_ptr->zbuf=NULL;
	  png_destroy_struct(png_ptr);
	  return (NULL);
   }
#ifdef USE_FAR_KEYWORD
   png_memcpy(png_ptr->jmpbuf,jmpbuf,png_sizeof(jmp_buf));
#endif
#endif

#ifdef PNG_USER_MEM_SUPPORTED
   png_set_mem_fn(png_ptr, mem_ptr, malloc_fn, free_fn);
#endif /* PNG_USER_MEM_SUPPORTED */
   png_set_error_fn(png_ptr, error_ptr, error_fn, warn_fn);

   i=0;
   do
   {
	 if(user_png_ver[i] != png_libpng_ver[i])
		png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
   } while (png_libpng_ver[i++]);

   if (png_ptr->flags & PNG_FLAG_LIBRARY_MISMATCH)
   {
	 /* Libpng 0.90 and later are binary incompatible with libpng 0.89, so
	  * we must recompile any applications that use any older library version.
	  * For versions after libpng 1.0, we will be compatible, so we need
	  * only check the first digit.
	  */
	 if (user_png_ver == NULL || user_png_ver[0] != png_libpng_ver[0] ||
		 (user_png_ver[0] == '1' && user_png_ver[2] != png_libpng_ver[2]) ||
		 (user_png_ver[0] == '0' && user_png_ver[2] < '9'))
	 {
#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
		char msg[80];
		if (user_png_ver)
		{
		  png_snprintf(msg, 80,
			 "Application was compiled with png.h from libpng-%.20s",
			 user_png_ver);
		  png_warning(png_ptr, msg);
		}
		png_snprintf(msg, 80,
		   "Application  is  running with png.c from libpng-%.20s",
		   png_libpng_ver);
		png_warning(png_ptr, msg);
#endif
#ifdef PNG_ERROR_NUMBERS_SUPPORTED
		png_ptr->flags=0;
#endif
		png_error(png_ptr,
		   "Incompatible libpng version in application and library");
	 }
   }

   /* initialize zbuf - compression buffer */
   png_ptr->zbuf_size = PNG_ZBUF_SIZE;
   png_ptr->zbuf = (png_bytep)png_malloc(png_ptr,
	  (png_uint_32)png_ptr->zbuf_size);

   png_set_write_fn(png_ptr, png_voidp_NULL, png_rw_ptr_NULL,
	  png_flush_ptr_NULL);

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
   png_set_filter_heuristics(png_ptr, PNG_FILTER_HEURISTIC_DEFAULT,
	  1, png_doublep_NULL, png_doublep_NULL);
#endif

#ifdef PNG_SETJMP_SUPPORTED
/* Applications that neglect to set up their own setjmp() and then encounter
   a png_error() will longjmp here.  Since the jmpbuf is then meaningless we
   abort instead of returning. */
#ifdef USE_FAR_KEYWORD
   if (setjmp(jmpbuf))
	  PNG_ABORT();
   png_memcpy(png_ptr->jmpbuf,jmpbuf,png_sizeof(jmp_buf));
#else
   if (setjmp(png_ptr->jmpbuf))
	  PNG_ABORT();
#endif
#endif
   return (png_ptr);
}

/* Initialize png_ptr structure, and allocate any memory needed */
#if defined(PNG_1_0_X) || defined(PNG_1_2_X)
/* Deprecated. */
#undef png_write_init
void PNGAPI
png_write_init(png_structp png_ptr)
{
   /* We only come here via pre-1.0.7-compiled applications */
   png_write_init_2(png_ptr, "1.0.6 or earlier", 0, 0);
}

void PNGAPI
png_write_init_2(png_structp png_ptr, png_const_charp user_png_ver,
   png_size_t png_struct_size, png_size_t png_info_size)
{
   /* We only come here via pre-1.0.12-compiled applications */
   if(png_ptr == NULL) return;
#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
   if(png_sizeof(png_struct) > png_struct_size ||
	  png_sizeof(png_info) > png_info_size)
   {
	  char msg[80];
	  png_ptr->warning_fn=NULL;
	  if (user_png_ver)
	  {
		png_snprintf(msg, 80,
		   "Application was compiled with png.h from libpng-%.20s",
		   user_png_ver);
		png_warning(png_ptr, msg);
	  }
	  png_snprintf(msg, 80,
		 "Application  is  running with png.c from libpng-%.20s",
		 png_libpng_ver);
	  png_warning(png_ptr, msg);
   }
#endif
   if(png_sizeof(png_struct) > png_struct_size)
	 {
	   png_ptr->error_fn=NULL;
#ifdef PNG_ERROR_NUMBERS_SUPPORTED
	   png_ptr->flags=0;
#endif
	   png_error(png_ptr,
	   "The png struct allocated by the application for writing is too small.");
	 }
   if(png_sizeof(png_info) > png_info_size)
	 {
	   png_ptr->error_fn=NULL;
#ifdef PNG_ERROR_NUMBERS_SUPPORTED
	   png_ptr->flags=0;
#endif
	   png_error(png_ptr,
	   "The info struct allocated by the application for writing is too small.");
	 }
   png_write_init_3(&png_ptr, user_png_ver, png_struct_size);
}
#endif /* PNG_1_0_X || PNG_1_2_X */

void PNGAPI
png_write_init_3(png_structpp ptr_ptr, png_const_charp user_png_ver,
   png_size_t png_struct_size)
{
   png_structp png_ptr=*ptr_ptr;
#ifdef PNG_SETJMP_SUPPORTED
   jmp_buf tmp_jmp; /* to save current jump buffer */
#endif

   int i = 0;

   if (png_ptr == NULL)
	  return;

   do
   {
	 if (user_png_ver[i] != png_libpng_ver[i])
	 {
#ifdef PNG_LEGACY_SUPPORTED
	   png_ptr->flags |= PNG_FLAG_LIBRARY_MISMATCH;
#else
	   png_ptr->warning_fn=NULL;
	   png_warning(png_ptr,
	 "Application uses deprecated png_write_init() and should be recompiled.");
	   break;
#endif
	 }
   } while (png_libpng_ver[i++]);

   png_debug(1, "in png_write_init_3\n");

#ifdef PNG_SETJMP_SUPPORTED
   /* save jump buffer and error functions */
   png_memcpy(tmp_jmp, png_ptr->jmpbuf, png_sizeof (jmp_buf));
#endif

   if (png_sizeof(png_struct) > png_struct_size)
	 {
	   png_destroy_struct(png_ptr);
	   png_ptr = (png_structp)png_create_struct(PNG_STRUCT_PNG);
	   *ptr_ptr = png_ptr;
	 }

   /* reset all variables to 0 */
   png_memset(png_ptr, 0, png_sizeof (png_struct));

   /* added at libpng-1.2.6 */
#ifdef PNG_SET_USER_LIMITS_SUPPORTED
   png_ptr->user_width_max=PNG_USER_WIDTH_MAX;
   png_ptr->user_height_max=PNG_USER_HEIGHT_MAX;
#endif

#ifdef PNG_SETJMP_SUPPORTED
   /* restore jump buffer */
   png_memcpy(png_ptr->jmpbuf, tmp_jmp, png_sizeof (jmp_buf));
#endif

   png_set_write_fn(png_ptr, png_voidp_NULL, png_rw_ptr_NULL,
	  png_flush_ptr_NULL);

   /* initialize zbuf - compression buffer */
   png_ptr->zbuf_size = PNG_ZBUF_SIZE;
   png_ptr->zbuf = (png_bytep)png_malloc(png_ptr,
	  (png_uint_32)png_ptr->zbuf_size);

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
   png_set_filter_heuristics(png_ptr, PNG_FILTER_HEURISTIC_DEFAULT,
	  1, png_doublep_NULL, png_doublep_NULL);
#endif
}

/* Write a few rows of image data.  If the image is interlaced,
 * either you will have to write the 7 sub images, or, if you
 * have called png_set_interlace_handling(), you will have to
 * "write" the image seven times.
 */
void PNGAPI
png_write_rows(png_structp png_ptr, png_bytepp row,
   png_uint_32 num_rows)
{
   png_uint_32 i; /* row counter */
   png_bytepp rp; /* row pointer */

   png_debug(1, "in png_write_rows\n");

   if (png_ptr == NULL)
	  return;

   /* loop through the rows */
   for (i = 0, rp = row; i < num_rows; i++, rp++)
   {
	  png_write_row(png_ptr, *rp);
   }
}

/* Write the image.  You only need to call this function once, even
 * if you are writing an interlaced image.
 */
void PNGAPI
png_write_image(png_structp png_ptr, png_bytepp image)
{
   png_uint_32 i; /* row index */
   int pass, num_pass; /* pass variables */
   png_bytepp rp; /* points to current row */

   if (png_ptr == NULL)
	  return;

   png_debug(1, "in png_write_image\n");
#if defined(PNG_WRITE_INTERLACING_SUPPORTED)
   /* intialize interlace handling.  If image is not interlaced,
	  this will set pass to 1 */
   num_pass = png_set_interlace_handling(png_ptr);
#else
   num_pass = 1;
#endif
   /* loop through passes */
   for (pass = 0; pass < num_pass; pass++)
   {
	  /* loop through image */
	  for (i = 0, rp = image; i < png_ptr->height; i++, rp++)
	  {
		 png_write_row(png_ptr, *rp);
	  }
   }
}

/* called by user to write a row of image data */
void PNGAPI
png_write_row(png_structp png_ptr, png_bytep row)
{
   if (png_ptr == NULL)
	  return;
   png_debug2(1, "in png_write_row (row %ld, pass %d)\n",
	  png_ptr->row_number, png_ptr->pass);

   /* initialize transformations and other stuff if first time */
   if (png_ptr->row_number == 0 && png_ptr->pass == 0)
   {
   /* make sure we wrote the header info */
   if (!(png_ptr->mode & PNG_WROTE_INFO_BEFORE_PLTE))
	  png_error(png_ptr,
		 "png_write_info was never called before png_write_row.");

   /* check for transforms that have been set but were defined out */
#if !defined(PNG_WRITE_INVERT_SUPPORTED) && defined(PNG_READ_INVERT_SUPPORTED)
   if (png_ptr->transformations & PNG_INVERT_MONO)
	  png_warning(png_ptr, "PNG_WRITE_INVERT_SUPPORTED is not defined.");
#endif
#if !defined(PNG_WRITE_FILLER_SUPPORTED) && defined(PNG_READ_FILLER_SUPPORTED)
   if (png_ptr->transformations & PNG_FILLER)
	  png_warning(png_ptr, "PNG_WRITE_FILLER_SUPPORTED is not defined.");
#endif
#if !defined(PNG_WRITE_PACKSWAP_SUPPORTED) && defined(PNG_READ_PACKSWAP_SUPPORTED)
   if (png_ptr->transformations & PNG_PACKSWAP)
	  png_warning(png_ptr, "PNG_WRITE_PACKSWAP_SUPPORTED is not defined.");
#endif
#if !defined(PNG_WRITE_PACK_SUPPORTED) && defined(PNG_READ_PACK_SUPPORTED)
   if (png_ptr->transformations & PNG_PACK)
	  png_warning(png_ptr, "PNG_WRITE_PACK_SUPPORTED is not defined.");
#endif
#if !defined(PNG_WRITE_SHIFT_SUPPORTED) && defined(PNG_READ_SHIFT_SUPPORTED)
   if (png_ptr->transformations & PNG_SHIFT)
	  png_warning(png_ptr, "PNG_WRITE_SHIFT_SUPPORTED is not defined.");
#endif
#if !defined(PNG_WRITE_BGR_SUPPORTED) && defined(PNG_READ_BGR_SUPPORTED)
   if (png_ptr->transformations & PNG_BGR)
	  png_warning(png_ptr, "PNG_WRITE_BGR_SUPPORTED is not defined.");
#endif
#if !defined(PNG_WRITE_SWAP_SUPPORTED) && defined(PNG_READ_SWAP_SUPPORTED)
   if (png_ptr->transformations & PNG_SWAP_BYTES)
	  png_warning(png_ptr, "PNG_WRITE_SWAP_SUPPORTED is not defined.");
#endif

	  png_write_start_row(png_ptr);
   }

#if defined(PNG_WRITE_INTERLACING_SUPPORTED)
   /* if interlaced and not interested in row, return */
   if (png_ptr->interlaced && (png_ptr->transformations & PNG_INTERLACE))
   {
	  switch (png_ptr->pass)
	  {
		 case 0:
			if (png_ptr->row_number & 0x07)
			{
			   png_write_finish_row(png_ptr);
			   return;
			}
			break;
		 case 1:
			if ((png_ptr->row_number & 0x07) || png_ptr->width < 5)
			{
			   png_write_finish_row(png_ptr);
			   return;
			}
			break;
		 case 2:
			if ((png_ptr->row_number & 0x07) != 4)
			{
			   png_write_finish_row(png_ptr);
			   return;
			}
			break;
		 case 3:
			if ((png_ptr->row_number & 0x03) || png_ptr->width < 3)
			{
			   png_write_finish_row(png_ptr);
			   return;
			}
			break;
		 case 4:
			if ((png_ptr->row_number & 0x03) != 2)
			{
			   png_write_finish_row(png_ptr);
			   return;
			}
			break;
		 case 5:
			if ((png_ptr->row_number & 0x01) || png_ptr->width < 2)
			{
			   png_write_finish_row(png_ptr);
			   return;
			}
			break;
		 case 6:
			if (!(png_ptr->row_number & 0x01))
			{
			   png_write_finish_row(png_ptr);
			   return;
			}
			break;
	  }
   }
#endif

   /* set up row info for transformations */
   png_ptr->row_info.color_type = png_ptr->color_type;
   png_ptr->row_info.width = png_ptr->usr_width;
   png_ptr->row_info.channels = png_ptr->usr_channels;
   png_ptr->row_info.bit_depth = png_ptr->usr_bit_depth;
   png_ptr->row_info.pixel_depth = (png_byte)(png_ptr->row_info.bit_depth *
	  png_ptr->row_info.channels);

   png_ptr->row_info.rowbytes = PNG_ROWBYTES(png_ptr->row_info.pixel_depth,
	  png_ptr->row_info.width);

   png_debug1(3, "row_info->color_type = %d\n", png_ptr->row_info.color_type);
   png_debug1(3, "row_info->width = %lu\n", png_ptr->row_info.width);
   png_debug1(3, "row_info->channels = %d\n", png_ptr->row_info.channels);
   png_debug1(3, "row_info->bit_depth = %d\n", png_ptr->row_info.bit_depth);
   png_debug1(3, "row_info->pixel_depth = %d\n", png_ptr->row_info.pixel_depth);
   png_debug1(3, "row_info->rowbytes = %lu\n", png_ptr->row_info.rowbytes);

   /* Copy user's row into buffer, leaving room for filter byte. */
   png_memcpy_check(png_ptr, png_ptr->row_buf + 1, row,
	  png_ptr->row_info.rowbytes);

#if defined(PNG_WRITE_INTERLACING_SUPPORTED)
   /* handle interlacing */
   if (png_ptr->interlaced && png_ptr->pass < 6 &&
	  (png_ptr->transformations & PNG_INTERLACE))
   {
	  png_do_write_interlace(&(png_ptr->row_info),
		 png_ptr->row_buf + 1, png_ptr->pass);
	  /* this should always get caught above, but still ... */
	  if (!(png_ptr->row_info.width))
	  {
		 png_write_finish_row(png_ptr);
		 return;
	  }
   }
#endif

   /* handle other transformations */
   if (png_ptr->transformations)
	  png_do_write_transformations(png_ptr);

#if defined(PNG_MNG_FEATURES_SUPPORTED)
   /* Write filter_method 64 (intrapixel differencing) only if
	* 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and
	* 2. Libpng did not write a PNG signature (this filter_method is only
	*    used in PNG datastreams that are embedded in MNG datastreams) and
	* 3. The application called png_permit_mng_features with a mask that
	*    included PNG_FLAG_MNG_FILTER_64 and
	* 4. The filter_method is 64 and
	* 5. The color_type is RGB or RGBA
	*/
   if((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) &&
	  (png_ptr->filter_type == PNG_INTRAPIXEL_DIFFERENCING))
   {
	  /* Intrapixel differencing */
	  png_do_write_intrapixel(&(png_ptr->row_info), png_ptr->row_buf + 1);
   }
#endif

   /* Find a filter if necessary, filter the row and write it out. */
   png_write_find_filter(png_ptr, &(png_ptr->row_info));

   if (png_ptr->write_row_fn != NULL)
	  (*(png_ptr->write_row_fn))(png_ptr, png_ptr->row_number, png_ptr->pass);
}

#if defined(PNG_WRITE_FLUSH_SUPPORTED)
/* Set the automatic flush interval or 0 to turn flushing off */
void PNGAPI
png_set_flush(png_structp png_ptr, int nrows)
{
   png_debug(1, "in png_set_flush\n");
   if (png_ptr == NULL)
	  return;
   png_ptr->flush_dist = (nrows < 0 ? 0 : nrows);
}

/* flush the current output buffers now */
void PNGAPI
png_write_flush(png_structp png_ptr)
{
   int wrote_IDAT;

   png_debug(1, "in png_write_flush\n");
   if (png_ptr == NULL)
	  return;
   /* We have already written out all of the data */
   if (png_ptr->row_number >= png_ptr->num_rows)
	 return;

   do
   {
	  int ret;

	  /* compress the data */
	  ret = deflate(&png_ptr->zstream, Z_SYNC_FLUSH);
	  wrote_IDAT = 0;

	  /* check for compression errors */
	  if (ret != Z_OK)
	  {
		 if (png_ptr->zstream.msg != NULL)
			png_error(png_ptr, png_ptr->zstream.msg);
		 else
			png_error(png_ptr, "zlib error");
	  }

	  if (!(png_ptr->zstream.avail_out))
	  {
		 /* write the IDAT and reset the zlib output buffer */
		 png_write_IDAT(png_ptr, png_ptr->zbuf,
						png_ptr->zbuf_size);
		 png_ptr->zstream.next_out = png_ptr->zbuf;
		 png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
		 wrote_IDAT = 1;
	  }
   } while(wrote_IDAT == 1);

   /* If there is any data left to be output, write it into a new IDAT */
   if (png_ptr->zbuf_size != png_ptr->zstream.avail_out)
   {
	  /* write the IDAT and reset the zlib output buffer */
	  png_write_IDAT(png_ptr, png_ptr->zbuf,
					 png_ptr->zbuf_size - png_ptr->zstream.avail_out);
	  png_ptr->zstream.next_out = png_ptr->zbuf;
	  png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
   }
   png_ptr->flush_rows = 0;
   png_flush(png_ptr);
}
#endif /* PNG_WRITE_FLUSH_SUPPORTED */

/* free all memory used by the write */
void PNGAPI
png_destroy_write_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr)
{
   png_structp png_ptr = NULL;
   png_infop info_ptr = NULL;
#ifdef PNG_USER_MEM_SUPPORTED
   png_free_ptr free_fn = NULL;
   png_voidp mem_ptr = NULL;
#endif

   png_debug(1, "in png_destroy_write_struct\n");
   if (png_ptr_ptr != NULL)
   {
	  png_ptr = *png_ptr_ptr;
#ifdef PNG_USER_MEM_SUPPORTED
	  free_fn = png_ptr->free_fn;
	  mem_ptr = png_ptr->mem_ptr;
#endif
   }

   if (info_ptr_ptr != NULL)
	  info_ptr = *info_ptr_ptr;

   if (info_ptr != NULL)
   {
	  png_free_data(png_ptr, info_ptr, PNG_FREE_ALL, -1);

#if defined(PNG_UNKNOWN_CHUNKS_SUPPORTED)
	  if (png_ptr->num_chunk_list)
	  {
		 png_free(png_ptr, png_ptr->chunk_list);
		 png_ptr->chunk_list=NULL;
		 png_ptr->num_chunk_list=0;
	  }
#endif

#ifdef PNG_USER_MEM_SUPPORTED
	  png_destroy_struct_2((png_voidp)info_ptr, (png_free_ptr)free_fn,
		 (png_voidp)mem_ptr);
#else
	  png_destroy_struct((png_voidp)info_ptr);
#endif
	  *info_ptr_ptr = NULL;
   }

   if (png_ptr != NULL)
   {
	  png_write_destroy(png_ptr);
#ifdef PNG_USER_MEM_SUPPORTED
	  png_destroy_struct_2((png_voidp)png_ptr, (png_free_ptr)free_fn,
		 (png_voidp)mem_ptr);
#else
	  png_destroy_struct((png_voidp)png_ptr);
#endif
	  *png_ptr_ptr = NULL;
   }
}

/* Free any memory used in png_ptr struct (old method) */
void /* PRIVATE */
png_write_destroy(png_structp png_ptr)
{
#ifdef PNG_SETJMP_SUPPORTED
   jmp_buf tmp_jmp; /* save jump buffer */
#endif
   png_error_ptr error_fn;
   png_error_ptr warning_fn;
   png_voidp error_ptr;
#ifdef PNG_USER_MEM_SUPPORTED
   png_free_ptr free_fn;
#endif

   png_debug(1, "in png_write_destroy\n");
   /* free any memory zlib uses */
   deflateEnd(&png_ptr->zstream);

   /* free our memory.  png_free checks NULL for us. */
   png_free(png_ptr, png_ptr->zbuf);
   png_free(png_ptr, png_ptr->row_buf);
   png_free(png_ptr, png_ptr->prev_row);
   png_free(png_ptr, png_ptr->sub_row);
   png_free(png_ptr, png_ptr->up_row);
   png_free(png_ptr, png_ptr->avg_row);
   png_free(png_ptr, png_ptr->paeth_row);

#if defined(PNG_TIME_RFC1123_SUPPORTED)
   png_free(png_ptr, png_ptr->time_buffer);
#endif

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
   png_free(png_ptr, png_ptr->prev_filters);
   png_free(png_ptr, png_ptr->filter_weights);
   png_free(png_ptr, png_ptr->inv_filter_weights);
   png_free(png_ptr, png_ptr->filter_costs);
   png_free(png_ptr, png_ptr->inv_filter_costs);
#endif

#ifdef PNG_SETJMP_SUPPORTED
   /* reset structure */
   png_memcpy(tmp_jmp, png_ptr->jmpbuf, png_sizeof (jmp_buf));
#endif

   error_fn = png_ptr->error_fn;
   warning_fn = png_ptr->warning_fn;
   error_ptr = png_ptr->error_ptr;
#ifdef PNG_USER_MEM_SUPPORTED
   free_fn = png_ptr->free_fn;
#endif

   png_memset(png_ptr, 0, png_sizeof (png_struct));

   png_ptr->error_fn = error_fn;
   png_ptr->warning_fn = warning_fn;
   png_ptr->error_ptr = error_ptr;
#ifdef PNG_USER_MEM_SUPPORTED
   png_ptr->free_fn = free_fn;
#endif

#ifdef PNG_SETJMP_SUPPORTED
   png_memcpy(png_ptr->jmpbuf, tmp_jmp, png_sizeof (jmp_buf));
#endif
}

/* Allow the application to select one or more row filters to use. */
void PNGAPI
png_set_filter(png_structp png_ptr, int method, int filters)
{
   png_debug(1, "in png_set_filter\n");
   if (png_ptr == NULL)
	  return;
#if defined(PNG_MNG_FEATURES_SUPPORTED)
   if((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) &&
	  (method == PNG_INTRAPIXEL_DIFFERENCING))
		 method = PNG_FILTER_TYPE_BASE;
#endif
   if (method == PNG_FILTER_TYPE_BASE)
   {
	  switch (filters & (PNG_ALL_FILTERS | 0x07))
	  {
#ifndef PNG_NO_WRITE_FILTER
		 case 5:
		 case 6:
		 case 7: png_warning(png_ptr, "Unknown row filter for method 0");
#endif /* PNG_NO_WRITE_FILTER */
		 case PNG_FILTER_VALUE_NONE:
			  png_ptr->do_filter=PNG_FILTER_NONE; break;
#ifndef PNG_NO_WRITE_FILTER
		 case PNG_FILTER_VALUE_SUB:
			  png_ptr->do_filter=PNG_FILTER_SUB; break;
		 case PNG_FILTER_VALUE_UP:
			  png_ptr->do_filter=PNG_FILTER_UP; break;
		 case PNG_FILTER_VALUE_AVG:
			  png_ptr->do_filter=PNG_FILTER_AVG; break;
		 case PNG_FILTER_VALUE_PAETH:
			  png_ptr->do_filter=PNG_FILTER_PAETH; break;
		 default: png_ptr->do_filter = (png_byte)filters; break;
#else
		 default: png_warning(png_ptr, "Unknown row filter for method 0");
#endif /* PNG_NO_WRITE_FILTER */
	  }

	  /* If we have allocated the row_buf, this means we have already started
	   * with the image and we should have allocated all of the filter buffers
	   * that have been selected.  If prev_row isn't already allocated, then
	   * it is too late to start using the filters that need it, since we
	   * will be missing the data in the previous row.  If an application
	   * wants to start and stop using particular filters during compression,
	   * it should start out with all of the filters, and then add and
	   * remove them after the start of compression.
	   */
	  if (png_ptr->row_buf != NULL)
	  {
#ifndef PNG_NO_WRITE_FILTER
		 if ((png_ptr->do_filter & PNG_FILTER_SUB) && png_ptr->sub_row == NULL)
		 {
			png_ptr->sub_row = (png_bytep)png_malloc(png_ptr,
			  (png_ptr->rowbytes + 1));
			png_ptr->sub_row[0] = PNG_FILTER_VALUE_SUB;
		 }

		 if ((png_ptr->do_filter & PNG_FILTER_UP) && png_ptr->up_row == NULL)
		 {
			if (png_ptr->prev_row == NULL)
			{
			   png_warning(png_ptr, "Can't add Up filter after starting");
			   png_ptr->do_filter &= ~PNG_FILTER_UP;
			}
			else
			{
			   png_ptr->up_row = (png_bytep)png_malloc(png_ptr,
				  (png_ptr->rowbytes + 1));
			   png_ptr->up_row[0] = PNG_FILTER_VALUE_UP;
			}
		 }

		 if ((png_ptr->do_filter & PNG_FILTER_AVG) && png_ptr->avg_row == NULL)
		 {
			if (png_ptr->prev_row == NULL)
			{
			   png_warning(png_ptr, "Can't add Average filter after starting");
			   png_ptr->do_filter &= ~PNG_FILTER_AVG;
			}
			else
			{
			   png_ptr->avg_row = (png_bytep)png_malloc(png_ptr,
				  (png_ptr->rowbytes + 1));
			   png_ptr->avg_row[0] = PNG_FILTER_VALUE_AVG;
			}
		 }

		 if ((png_ptr->do_filter & PNG_FILTER_PAETH) &&
			 png_ptr->paeth_row == NULL)
		 {
			if (png_ptr->prev_row == NULL)
			{
			   png_warning(png_ptr, "Can't add Paeth filter after starting");
			   png_ptr->do_filter &= (png_byte)(~PNG_FILTER_PAETH);
			}
			else
			{
			   png_ptr->paeth_row = (png_bytep)png_malloc(png_ptr,
				  (png_ptr->rowbytes + 1));
			   png_ptr->paeth_row[0] = PNG_FILTER_VALUE_PAETH;
			}
		 }

		 if (png_ptr->do_filter == PNG_NO_FILTERS)
#endif /* PNG_NO_WRITE_FILTER */
			png_ptr->do_filter = PNG_FILTER_NONE;
	  }
   }
   else
	  png_error(png_ptr, "Unknown custom filter method");
}

/* This allows us to influence the way in which libpng chooses the "best"
 * filter for the current scanline.  While the "minimum-sum-of-absolute-
 * differences metric is relatively fast and effective, there is some
 * question as to whether it can be improved upon by trying to keep the
 * filtered data going to zlib more consistent, hopefully resulting in
 * better compression.
 */
#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)      /* GRR 970116 */
void PNGAPI
png_set_filter_heuristics(png_structp png_ptr, int heuristic_method,
   int num_weights, png_doublep filter_weights,
   png_doublep filter_costs)
{
   int i;

   png_debug(1, "in png_set_filter_heuristics\n");
   if (png_ptr == NULL)
	  return;
   if (heuristic_method >= PNG_FILTER_HEURISTIC_LAST)
   {
	  png_warning(png_ptr, "Unknown filter heuristic method");
	  return;
   }

   if (heuristic_method == PNG_FILTER_HEURISTIC_DEFAULT)
   {
	  heuristic_method = PNG_FILTER_HEURISTIC_UNWEIGHTED;
   }

   if (num_weights < 0 || filter_weights == NULL ||
	  heuristic_method == PNG_FILTER_HEURISTIC_UNWEIGHTED)
   {
	  num_weights = 0;
   }

   png_ptr->num_prev_filters = (png_byte)num_weights;
   png_ptr->heuristic_method = (png_byte)heuristic_method;

   if (num_weights > 0)
   {
	  if (png_ptr->prev_filters == NULL)
	  {
		 png_ptr->prev_filters = (png_bytep)png_malloc(png_ptr,
			(png_uint_32)(png_sizeof(png_byte) * num_weights));

		 /* To make sure that the weighting starts out fairly */
		 for (i = 0; i < num_weights; i++)
		 {
			png_ptr->prev_filters[i] = 255;
		 }
	  }

	  if (png_ptr->filter_weights == NULL)
	  {
		 png_ptr->filter_weights = (png_uint_16p)png_malloc(png_ptr,
			(png_uint_32)(png_sizeof(png_uint_16) * num_weights));

		 png_ptr->inv_filter_weights = (png_uint_16p)png_malloc(png_ptr,
			(png_uint_32)(png_sizeof(png_uint_16) * num_weights));
		 for (i = 0; i < num_weights; i++)
		 {
			png_ptr->inv_filter_weights[i] =
			png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
		 }
	  }

	  for (i = 0; i < num_weights; i++)
	  {
		 if (filter_weights[i] < 0.0)
		 {
			png_ptr->inv_filter_weights[i] =
			png_ptr->filter_weights[i] = PNG_WEIGHT_FACTOR;
		 }
		 else
		 {
			png_ptr->inv_filter_weights[i] =
			   (png_uint_16)((double)PNG_WEIGHT_FACTOR*filter_weights[i]+0.5);
			png_ptr->filter_weights[i] =
			   (png_uint_16)((double)PNG_WEIGHT_FACTOR/filter_weights[i]+0.5);
		 }
	  }
   }

   /* If, in the future, there are other filter methods, this would
	* need to be based on png_ptr->filter.
	*/
   if (png_ptr->filter_costs == NULL)
   {
	  png_ptr->filter_costs = (png_uint_16p)png_malloc(png_ptr,
		 (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST));

	  png_ptr->inv_filter_costs = (png_uint_16p)png_malloc(png_ptr,
		 (png_uint_32)(png_sizeof(png_uint_16) * PNG_FILTER_VALUE_LAST));

	  for (i = 0; i < PNG_FILTER_VALUE_LAST; i++)
	  {
		 png_ptr->inv_filter_costs[i] =
		 png_ptr->filter_costs[i] = PNG_COST_FACTOR;
	  }
   }

   /* Here is where we set the relative costs of the different filters.  We
	* should take the desired compression level into account when setting
	* the costs, so that Paeth, for instance, has a high relative cost at low
	* compression levels, while it has a lower relative cost at higher
	* compression settings.  The filter types are in order of increasing
	* relative cost, so it would be possible to do this with an algorithm.
	*/
   for (i = 0; i < PNG_FILTER_VALUE_LAST; i++)
   {
	  if (filter_costs == NULL || filter_costs[i] < 0.0)
	  {
		 png_ptr->inv_filter_costs[i] =
		 png_ptr->filter_costs[i] = PNG_COST_FACTOR;
	  }
	  else if (filter_costs[i] >= 1.0)
	  {
		 png_ptr->inv_filter_costs[i] =
			(png_uint_16)((double)PNG_COST_FACTOR / filter_costs[i] + 0.5);
		 png_ptr->filter_costs[i] =
			(png_uint_16)((double)PNG_COST_FACTOR * filter_costs[i] + 0.5);
	  }
   }
}
#endif /* PNG_WRITE_WEIGHTED_FILTER_SUPPORTED */

void PNGAPI
png_set_compression_level(png_structp png_ptr, int level)
{
   png_debug(1, "in png_set_compression_level\n");
   if (png_ptr == NULL)
	  return;
   png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_LEVEL;
   png_ptr->zlib_level = level;
}

void PNGAPI
png_set_compression_mem_level(png_structp png_ptr, int mem_level)
{
   png_debug(1, "in png_set_compression_mem_level\n");
   if (png_ptr == NULL)
	  return;
   png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL;
   png_ptr->zlib_mem_level = mem_level;
}

void PNGAPI
png_set_compression_strategy(png_structp png_ptr, int strategy)
{
   png_debug(1, "in png_set_compression_strategy\n");
   if (png_ptr == NULL)
	  return;
   png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_STRATEGY;
   png_ptr->zlib_strategy = strategy;
}

void PNGAPI
png_set_compression_window_bits(png_structp png_ptr, int window_bits)
{
   if (png_ptr == NULL)
	  return;
   if (window_bits > 15)
	  png_warning(png_ptr, "Only compression windows <= 32k supported by PNG");
   else if (window_bits < 8)
	  png_warning(png_ptr, "Only compression windows >= 256 supported by PNG");
#ifndef WBITS_8_OK
   /* avoid libpng bug with 256-byte windows */
   if (window_bits == 8)
	 {
	   png_warning(png_ptr, "Compression window is being reset to 512");
	   window_bits=9;
	 }
#endif
   png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS;
   png_ptr->zlib_window_bits = window_bits;
}

void PNGAPI
png_set_compression_method(png_structp png_ptr, int method)
{
   png_debug(1, "in png_set_compression_method\n");
   if (png_ptr == NULL)
	  return;
   if (method != 8)
	  png_warning(png_ptr, "Only compression method 8 is supported by PNG");
   png_ptr->flags |= PNG_FLAG_ZLIB_CUSTOM_METHOD;
   png_ptr->zlib_method = method;
}

void PNGAPI
png_set_write_status_fn(png_structp png_ptr, png_write_status_ptr write_row_fn)
{
   if (png_ptr == NULL)
	  return;
   png_ptr->write_row_fn = write_row_fn;
}

#if defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)
void PNGAPI
png_set_write_user_transform_fn(png_structp png_ptr, png_user_transform_ptr
   write_user_transform_fn)
{
   png_debug(1, "in png_set_write_user_transform_fn\n");
   if (png_ptr == NULL)
	  return;
   png_ptr->transformations |= PNG_USER_TRANSFORM;
   png_ptr->write_user_transform_fn = write_user_transform_fn;
}
#endif

#if defined(PNG_INFO_IMAGE_SUPPORTED)
void PNGAPI
png_write_png(png_structp png_ptr, png_infop info_ptr,
			  int transforms, voidp params)
{
   if (png_ptr == NULL || info_ptr == NULL)
	  return;
#if defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
   /* invert the alpha channel from opacity to transparency */
   if (transforms & PNG_TRANSFORM_INVERT_ALPHA)
	   png_set_invert_alpha(png_ptr);
#endif

   /* Write the file header information. */
   png_write_info(png_ptr, info_ptr);

   /* ------ these transformations don't touch the info structure ------- */

#if defined(PNG_WRITE_INVERT_SUPPORTED)
   /* invert monochrome pixels */
   if (transforms & PNG_TRANSFORM_INVERT_MONO)
	   png_set_invert_mono(png_ptr);
#endif

#if defined(PNG_WRITE_SHIFT_SUPPORTED)
   /* Shift the pixels up to a legal bit depth and fill in
	* as appropriate to correctly scale the image.
	*/
   if ((transforms & PNG_TRANSFORM_SHIFT)
			   && (info_ptr->valid & PNG_INFO_sBIT))
	   png_set_shift(png_ptr, &info_ptr->sig_bit);
#endif

#if defined(PNG_WRITE_PACK_SUPPORTED)
   /* pack pixels into bytes */
   if (transforms & PNG_TRANSFORM_PACKING)
	   png_set_packing(png_ptr);
#endif

#if defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
   /* swap location of alpha bytes from ARGB to RGBA */
   if (transforms & PNG_TRANSFORM_SWAP_ALPHA)
	   png_set_swap_alpha(png_ptr);
#endif

#if defined(PNG_WRITE_FILLER_SUPPORTED)
   /* Get rid of filler (OR ALPHA) bytes, pack XRGB/RGBX/ARGB/RGBA into
	* RGB (4 channels -> 3 channels). The second parameter is not used.
	*/
   if (transforms & PNG_TRANSFORM_STRIP_FILLER)
	   png_set_filler(png_ptr, 0, PNG_FILLER_BEFORE);
#endif

#if defined(PNG_WRITE_BGR_SUPPORTED)
   /* flip BGR pixels to RGB */
   if (transforms & PNG_TRANSFORM_BGR)
	   png_set_bgr(png_ptr);
#endif

#if defined(PNG_WRITE_SWAP_SUPPORTED)
   /* swap bytes of 16-bit files to most significant byte first */
   if (transforms & PNG_TRANSFORM_SWAP_ENDIAN)
	   png_set_swap(png_ptr);
#endif

#if defined(PNG_WRITE_PACKSWAP_SUPPORTED)
   /* swap bits of 1, 2, 4 bit packed pixel formats */
   if (transforms & PNG_TRANSFORM_PACKSWAP)
	   png_set_packswap(png_ptr);
#endif

   /* ----------------------- end of transformations ------------------- */

   /* write the bits */
   if (info_ptr->valid & PNG_INFO_IDAT)
	   png_write_image(png_ptr, info_ptr->row_pointers);

   /* It is REQUIRED to call this to finish writing the rest of the file */
   png_write_end(png_ptr, info_ptr);

   transforms = transforms; /* quiet compiler warnings */
   params = params;
}
#endif
#endif /* PNG_WRITE_SUPPORTED */

/*** End of inlined file: pngwrite.c ***/


/*** Start of inlined file: pngwtran.c ***/
/* pngwtran.c - transforms the data in a row for PNG writers
 *
 * Last changed in libpng 1.2.9 April 14, 2006
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2006 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 */

#define PNG_INTERNAL

#ifdef PNG_WRITE_SUPPORTED

/* Transform the data according to the user's wishes.  The order of
 * transformations is significant.
 */
void /* PRIVATE */
png_do_write_transformations(png_structp png_ptr)
{
   png_debug(1, "in png_do_write_transformations\n");

   if (png_ptr == NULL)
	  return;

#if defined(PNG_WRITE_USER_TRANSFORM_SUPPORTED)
   if (png_ptr->transformations & PNG_USER_TRANSFORM)
	  if(png_ptr->write_user_transform_fn != NULL)
		(*(png_ptr->write_user_transform_fn)) /* user write transform function */
		  (png_ptr,                    /* png_ptr */
		   &(png_ptr->row_info),       /* row_info:     */
			 /*  png_uint_32 width;          width of row */
			 /*  png_uint_32 rowbytes;       number of bytes in row */
			 /*  png_byte color_type;        color type of pixels */
			 /*  png_byte bit_depth;         bit depth of samples */
			 /*  png_byte channels;          number of channels (1-4) */
			 /*  png_byte pixel_depth;       bits per pixel (depth*channels) */
		   png_ptr->row_buf + 1);      /* start of pixel data for row */
#endif
#if defined(PNG_WRITE_FILLER_SUPPORTED)
   if (png_ptr->transformations & PNG_FILLER)
	  png_do_strip_filler(&(png_ptr->row_info), png_ptr->row_buf + 1,
		 png_ptr->flags);
#endif
#if defined(PNG_WRITE_PACKSWAP_SUPPORTED)
   if (png_ptr->transformations & PNG_PACKSWAP)
	  png_do_packswap(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif
#if defined(PNG_WRITE_PACK_SUPPORTED)
   if (png_ptr->transformations & PNG_PACK)
	  png_do_pack(&(png_ptr->row_info), png_ptr->row_buf + 1,
		 (png_uint_32)png_ptr->bit_depth);
#endif
#if defined(PNG_WRITE_SWAP_SUPPORTED)
   if (png_ptr->transformations & PNG_SWAP_BYTES)
	  png_do_swap(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif
#if defined(PNG_WRITE_SHIFT_SUPPORTED)
   if (png_ptr->transformations & PNG_SHIFT)
	  png_do_shift(&(png_ptr->row_info), png_ptr->row_buf + 1,
		 &(png_ptr->shift));
#endif
#if defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
   if (png_ptr->transformations & PNG_SWAP_ALPHA)
	  png_do_write_swap_alpha(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif
#if defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
   if (png_ptr->transformations & PNG_INVERT_ALPHA)
	  png_do_write_invert_alpha(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif
#if defined(PNG_WRITE_BGR_SUPPORTED)
   if (png_ptr->transformations & PNG_BGR)
	  png_do_bgr(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif
#if defined(PNG_WRITE_INVERT_SUPPORTED)
   if (png_ptr->transformations & PNG_INVERT_MONO)
	  png_do_invert(&(png_ptr->row_info), png_ptr->row_buf + 1);
#endif
}

#if defined(PNG_WRITE_PACK_SUPPORTED)
/* Pack pixels into bytes.  Pass the true bit depth in bit_depth.  The
 * row_info bit depth should be 8 (one pixel per byte).  The channels
 * should be 1 (this only happens on grayscale and paletted images).
 */
void /* PRIVATE */
png_do_pack(png_row_infop row_info, png_bytep row, png_uint_32 bit_depth)
{
   png_debug(1, "in png_do_pack\n");
   if (row_info->bit_depth == 8 &&
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL &&
#endif
	  row_info->channels == 1)
   {
	  switch ((int)bit_depth)
	  {
		 case 1:
		 {
			png_bytep sp, dp;
			int mask, v;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			sp = row;
			dp = row;
			mask = 0x80;
			v = 0;

			for (i = 0; i < row_width; i++)
			{
			   if (*sp != 0)
				  v |= mask;
			   sp++;
			   if (mask > 1)
				  mask >>= 1;
			   else
			   {
				  mask = 0x80;
				  *dp = (png_byte)v;
				  dp++;
				  v = 0;
			   }
			}
			if (mask != 0x80)
			   *dp = (png_byte)v;
			break;
		 }
		 case 2:
		 {
			png_bytep sp, dp;
			int shift, v;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			sp = row;
			dp = row;
			shift = 6;
			v = 0;
			for (i = 0; i < row_width; i++)
			{
			   png_byte value;

			   value = (png_byte)(*sp & 0x03);
			   v |= (value << shift);
			   if (shift == 0)
			   {
				  shift = 6;
				  *dp = (png_byte)v;
				  dp++;
				  v = 0;
			   }
			   else
				  shift -= 2;
			   sp++;
			}
			if (shift != 6)
			   *dp = (png_byte)v;
			break;
		 }
		 case 4:
		 {
			png_bytep sp, dp;
			int shift, v;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			sp = row;
			dp = row;
			shift = 4;
			v = 0;
			for (i = 0; i < row_width; i++)
			{
			   png_byte value;

			   value = (png_byte)(*sp & 0x0f);
			   v |= (value << shift);

			   if (shift == 0)
			   {
				  shift = 4;
				  *dp = (png_byte)v;
				  dp++;
				  v = 0;
			   }
			   else
				  shift -= 4;

			   sp++;
			}
			if (shift != 4)
			   *dp = (png_byte)v;
			break;
		 }
	  }
	  row_info->bit_depth = (png_byte)bit_depth;
	  row_info->pixel_depth = (png_byte)(bit_depth * row_info->channels);
	  row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,
		 row_info->width);
   }
}
#endif

#if defined(PNG_WRITE_SHIFT_SUPPORTED)
/* Shift pixel values to take advantage of whole range.  Pass the
 * true number of bits in bit_depth.  The row should be packed
 * according to row_info->bit_depth.  Thus, if you had a row of
 * bit depth 4, but the pixels only had values from 0 to 7, you
 * would pass 3 as bit_depth, and this routine would translate the
 * data to 0 to 15.
 */
void /* PRIVATE */
png_do_shift(png_row_infop row_info, png_bytep row, png_color_8p bit_depth)
{
   png_debug(1, "in png_do_shift\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL &&
#else
   if (
#endif
	  row_info->color_type != PNG_COLOR_TYPE_PALETTE)
   {
	  int shift_start[4], shift_dec[4];
	  int channels = 0;

	  if (row_info->color_type & PNG_COLOR_MASK_COLOR)
	  {
		 shift_start[channels] = row_info->bit_depth - bit_depth->red;
		 shift_dec[channels] = bit_depth->red;
		 channels++;
		 shift_start[channels] = row_info->bit_depth - bit_depth->green;
		 shift_dec[channels] = bit_depth->green;
		 channels++;
		 shift_start[channels] = row_info->bit_depth - bit_depth->blue;
		 shift_dec[channels] = bit_depth->blue;
		 channels++;
	  }
	  else
	  {
		 shift_start[channels] = row_info->bit_depth - bit_depth->gray;
		 shift_dec[channels] = bit_depth->gray;
		 channels++;
	  }
	  if (row_info->color_type & PNG_COLOR_MASK_ALPHA)
	  {
		 shift_start[channels] = row_info->bit_depth - bit_depth->alpha;
		 shift_dec[channels] = bit_depth->alpha;
		 channels++;
	  }

	  /* with low row depths, could only be grayscale, so one channel */
	  if (row_info->bit_depth < 8)
	  {
		 png_bytep bp = row;
		 png_uint_32 i;
		 png_byte mask;
		 png_uint_32 row_bytes = row_info->rowbytes;

		 if (bit_depth->gray == 1 && row_info->bit_depth == 2)
			mask = 0x55;
		 else if (row_info->bit_depth == 4 && bit_depth->gray == 3)
			mask = 0x11;
		 else
			mask = 0xff;

		 for (i = 0; i < row_bytes; i++, bp++)
		 {
			png_uint_16 v;
			int j;

			v = *bp;
			*bp = 0;
			for (j = shift_start[0]; j > -shift_dec[0]; j -= shift_dec[0])
			{
			   if (j > 0)
				  *bp |= (png_byte)((v << j) & 0xff);
			   else
				  *bp |= (png_byte)((v >> (-j)) & mask);
			}
		 }
	  }
	  else if (row_info->bit_depth == 8)
	  {
		 png_bytep bp = row;
		 png_uint_32 i;
		 png_uint_32 istop = channels * row_info->width;

		 for (i = 0; i < istop; i++, bp++)
		 {

			png_uint_16 v;
			int j;
			int c = (int)(i%channels);

			v = *bp;
			*bp = 0;
			for (j = shift_start[c]; j > -shift_dec[c]; j -= shift_dec[c])
			{
			   if (j > 0)
				  *bp |= (png_byte)((v << j) & 0xff);
			   else
				  *bp |= (png_byte)((v >> (-j)) & 0xff);
			}
		 }
	  }
	  else
	  {
		 png_bytep bp;
		 png_uint_32 i;
		 png_uint_32 istop = channels * row_info->width;

		 for (bp = row, i = 0; i < istop; i++)
		 {
			int c = (int)(i%channels);
			png_uint_16 value, v;
			int j;

			v = (png_uint_16)(((png_uint_16)(*bp) << 8) + *(bp + 1));
			value = 0;
			for (j = shift_start[c]; j > -shift_dec[c]; j -= shift_dec[c])
			{
			   if (j > 0)
				  value |= (png_uint_16)((v << j) & (png_uint_16)0xffff);
			   else
				  value |= (png_uint_16)((v >> (-j)) & (png_uint_16)0xffff);
			}
			*bp++ = (png_byte)(value >> 8);
			*bp++ = (png_byte)(value & 0xff);
		 }
	  }
   }
}
#endif

#if defined(PNG_WRITE_SWAP_ALPHA_SUPPORTED)
void /* PRIVATE */
png_do_write_swap_alpha(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_write_swap_alpha\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL)
#endif
   {
	  if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
	  {
		 /* This converts from ARGB to RGBA */
		 if (row_info->bit_depth == 8)
		 {
			png_bytep sp, dp;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;
			for (i = 0, sp = dp = row; i < row_width; i++)
			{
			   png_byte save = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = save;
			}
		 }
		 /* This converts from AARRGGBB to RRGGBBAA */
		 else
		 {
			png_bytep sp, dp;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			for (i = 0, sp = dp = row; i < row_width; i++)
			{
			   png_byte save[2];
			   save[0] = *(sp++);
			   save[1] = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = save[0];
			   *(dp++) = save[1];
			}
		 }
	  }
	  else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
	  {
		 /* This converts from AG to GA */
		 if (row_info->bit_depth == 8)
		 {
			png_bytep sp, dp;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			for (i = 0, sp = dp = row; i < row_width; i++)
			{
			   png_byte save = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = save;
			}
		 }
		 /* This converts from AAGG to GGAA */
		 else
		 {
			png_bytep sp, dp;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			for (i = 0, sp = dp = row; i < row_width; i++)
			{
			   png_byte save[2];
			   save[0] = *(sp++);
			   save[1] = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = save[0];
			   *(dp++) = save[1];
			}
		 }
	  }
   }
}
#endif

#if defined(PNG_WRITE_INVERT_ALPHA_SUPPORTED)
void /* PRIVATE */
png_do_write_invert_alpha(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_write_invert_alpha\n");
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL)
#endif
   {
	  if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
	  {
		 /* This inverts the alpha channel in RGBA */
		 if (row_info->bit_depth == 8)
		 {
			png_bytep sp, dp;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;
			for (i = 0, sp = dp = row; i < row_width; i++)
			{
			   /* does nothing
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   */
			   sp+=3; dp = sp;
			   *(dp++) = (png_byte)(255 - *(sp++));
			}
		 }
		 /* This inverts the alpha channel in RRGGBBAA */
		 else
		 {
			png_bytep sp, dp;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			for (i = 0, sp = dp = row; i < row_width; i++)
			{
			   /* does nothing
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   */
			   sp+=6; dp = sp;
			   *(dp++) = (png_byte)(255 - *(sp++));
			   *(dp++) = (png_byte)(255 - *(sp++));
			}
		 }
	  }
	  else if (row_info->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
	  {
		 /* This inverts the alpha channel in GA */
		 if (row_info->bit_depth == 8)
		 {
			png_bytep sp, dp;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			for (i = 0, sp = dp = row; i < row_width; i++)
			{
			   *(dp++) = *(sp++);
			   *(dp++) = (png_byte)(255 - *(sp++));
			}
		 }
		 /* This inverts the alpha channel in GGAA */
		 else
		 {
			png_bytep sp, dp;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			for (i = 0, sp = dp = row; i < row_width; i++)
			{
			   /* does nothing
			   *(dp++) = *(sp++);
			   *(dp++) = *(sp++);
			   */
			   sp+=2; dp = sp;
			   *(dp++) = (png_byte)(255 - *(sp++));
			   *(dp++) = (png_byte)(255 - *(sp++));
			}
		 }
	  }
   }
}
#endif

#if defined(PNG_MNG_FEATURES_SUPPORTED)
/* undoes intrapixel differencing  */
void /* PRIVATE */
png_do_write_intrapixel(png_row_infop row_info, png_bytep row)
{
   png_debug(1, "in png_do_write_intrapixel\n");
   if (
#if defined(PNG_USELESS_TESTS_SUPPORTED)
	   row != NULL && row_info != NULL &&
#endif
	   (row_info->color_type & PNG_COLOR_MASK_COLOR))
   {
	  int bytes_per_pixel;
	  png_uint_32 row_width = row_info->width;
	  if (row_info->bit_depth == 8)
	  {
		 png_bytep rp;
		 png_uint_32 i;

		 if (row_info->color_type == PNG_COLOR_TYPE_RGB)
			bytes_per_pixel = 3;
		 else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
			bytes_per_pixel = 4;
		 else
			return;

		 for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
		 {
			*(rp)   = (png_byte)((*rp     - *(rp+1))&0xff);
			*(rp+2) = (png_byte)((*(rp+2) - *(rp+1))&0xff);
		 }
	  }
	  else if (row_info->bit_depth == 16)
	  {
		 png_bytep rp;
		 png_uint_32 i;

		 if (row_info->color_type == PNG_COLOR_TYPE_RGB)
			bytes_per_pixel = 6;
		 else if (row_info->color_type == PNG_COLOR_TYPE_RGB_ALPHA)
			bytes_per_pixel = 8;
		 else
			return;

		 for (i = 0, rp = row; i < row_width; i++, rp += bytes_per_pixel)
		 {
			png_uint_32 s0   = (*(rp  ) << 8) | *(rp+1);
			png_uint_32 s1   = (*(rp+2) << 8) | *(rp+3);
			png_uint_32 s2   = (*(rp+4) << 8) | *(rp+5);
			png_uint_32 red  = (png_uint_32)((s0-s1) & 0xffffL);
			png_uint_32 blue = (png_uint_32)((s2-s1) & 0xffffL);
			*(rp  ) = (png_byte)((red >> 8) & 0xff);
			*(rp+1) = (png_byte)(red & 0xff);
			*(rp+4) = (png_byte)((blue >> 8) & 0xff);
			*(rp+5) = (png_byte)(blue & 0xff);
		 }
	  }
   }
}
#endif /* PNG_MNG_FEATURES_SUPPORTED */
#endif /* PNG_WRITE_SUPPORTED */

/*** End of inlined file: pngwtran.c ***/


/*** Start of inlined file: pngwutil.c ***/
/* pngwutil.c - utilities to write a PNG file
 *
 * Last changed in libpng 1.2.20 Septhember 3, 2007
 * For conditions of distribution and use, see copyright notice in png.h
 * Copyright (c) 1998-2007 Glenn Randers-Pehrson
 * (Version 0.96 Copyright (c) 1996, 1997 Andreas Dilger)
 * (Version 0.88 Copyright (c) 1995, 1996 Guy Eric Schalnat, Group 42, Inc.)
 */

#define PNG_INTERNAL

#ifdef PNG_WRITE_SUPPORTED

/* Place a 32-bit number into a buffer in PNG byte order.  We work
 * with unsigned numbers for convenience, although one supported
 * ancillary chunk uses signed (two's complement) numbers.
 */
void PNGAPI
png_save_uint_32(png_bytep buf, png_uint_32 i)
{
   buf[0] = (png_byte)((i >> 24) & 0xff);
   buf[1] = (png_byte)((i >> 16) & 0xff);
   buf[2] = (png_byte)((i >> 8) & 0xff);
   buf[3] = (png_byte)(i & 0xff);
}

/* The png_save_int_32 function assumes integers are stored in two's
 * complement format.  If this isn't the case, then this routine needs to
 * be modified to write data in two's complement format.
 */
void PNGAPI
png_save_int_32(png_bytep buf, png_int_32 i)
{
   buf[0] = (png_byte)((i >> 24) & 0xff);
   buf[1] = (png_byte)((i >> 16) & 0xff);
   buf[2] = (png_byte)((i >> 8) & 0xff);
   buf[3] = (png_byte)(i & 0xff);
}

/* Place a 16-bit number into a buffer in PNG byte order.
 * The parameter is declared unsigned int, not png_uint_16,
 * just to avoid potential problems on pre-ANSI C compilers.
 */
void PNGAPI
png_save_uint_16(png_bytep buf, unsigned int i)
{
   buf[0] = (png_byte)((i >> 8) & 0xff);
   buf[1] = (png_byte)(i & 0xff);
}

/* Write a PNG chunk all at once.  The type is an array of ASCII characters
 * representing the chunk name.  The array must be at least 4 bytes in
 * length, and does not need to be null terminated.  To be safe, pass the
 * pre-defined chunk names here, and if you need a new one, define it
 * where the others are defined.  The length is the length of the data.
 * All the data must be present.  If that is not possible, use the
 * png_write_chunk_start(), png_write_chunk_data(), and png_write_chunk_end()
 * functions instead.
 */
void PNGAPI
png_write_chunk(png_structp png_ptr, png_bytep chunk_name,
   png_bytep data, png_size_t length)
{
   if(png_ptr == NULL) return;
   png_write_chunk_start(png_ptr, chunk_name, (png_uint_32)length);
   png_write_chunk_data(png_ptr, data, length);
   png_write_chunk_end(png_ptr);
}

/* Write the start of a PNG chunk.  The type is the chunk type.
 * The total_length is the sum of the lengths of all the data you will be
 * passing in png_write_chunk_data().
 */
void PNGAPI
png_write_chunk_start(png_structp png_ptr, png_bytep chunk_name,
   png_uint_32 length)
{
   png_byte buf[4];
   png_debug2(0, "Writing %s chunk (%lu bytes)\n", chunk_name, length);
   if(png_ptr == NULL) return;

   /* write the length */
   png_save_uint_32(buf, length);
   png_write_data(png_ptr, buf, (png_size_t)4);

   /* write the chunk name */
   png_write_data(png_ptr, chunk_name, (png_size_t)4);
   /* reset the crc and run it over the chunk name */
   png_reset_crc(png_ptr);
   png_calculate_crc(png_ptr, chunk_name, (png_size_t)4);
}

/* Write the data of a PNG chunk started with png_write_chunk_start().
 * Note that multiple calls to this function are allowed, and that the
 * sum of the lengths from these calls *must* add up to the total_length
 * given to png_write_chunk_start().
 */
void PNGAPI
png_write_chunk_data(png_structp png_ptr, png_bytep data, png_size_t length)
{
   /* write the data, and run the CRC over it */
   if(png_ptr == NULL) return;
   if (data != NULL && length > 0)
   {
	  png_calculate_crc(png_ptr, data, length);
	  png_write_data(png_ptr, data, length);
   }
}

/* Finish a chunk started with png_write_chunk_start(). */
void PNGAPI
png_write_chunk_end(png_structp png_ptr)
{
   png_byte buf[4];

   if(png_ptr == NULL) return;

   /* write the crc */
   png_save_uint_32(buf, png_ptr->crc);

   png_write_data(png_ptr, buf, (png_size_t)4);
}

/* Simple function to write the signature.  If we have already written
 * the magic bytes of the signature, or more likely, the PNG stream is
 * being embedded into another stream and doesn't need its own signature,
 * we should call png_set_sig_bytes() to tell libpng how many of the
 * bytes have already been written.
 */
void /* PRIVATE */
png_write_sig(png_structp png_ptr)
{
   png_byte png_signature[8] = {137, 80, 78, 71, 13, 10, 26, 10};
   /* write the rest of the 8 byte signature */
   png_write_data(png_ptr, &png_signature[png_ptr->sig_bytes],
	  (png_size_t)8 - png_ptr->sig_bytes);
   if(png_ptr->sig_bytes < 3)
	  png_ptr->mode |= PNG_HAVE_PNG_SIGNATURE;
}

#if defined(PNG_WRITE_TEXT_SUPPORTED) || defined(PNG_WRITE_iCCP_SUPPORTED)
/*
 * This pair of functions encapsulates the operation of (a) compressing a
 * text string, and (b) issuing it later as a series of chunk data writes.
 * The compression_state structure is shared context for these functions
 * set up by the caller in order to make the whole mess thread-safe.
 */

typedef struct
{
	char *input;   /* the uncompressed input data */
	int input_len;   /* its length */
	int num_output_ptr; /* number of output pointers used */
	int max_output_ptr; /* size of output_ptr */
	png_charpp output_ptr; /* array of pointers to output */
} compression_state;

/* compress given text into storage in the png_ptr structure */
static int /* PRIVATE */
png_text_compress(png_structp png_ptr,
		png_charp text, png_size_t text_len, int compression,
		compression_state *comp)
{
   int ret;

   comp->num_output_ptr = 0;
   comp->max_output_ptr = 0;
   comp->output_ptr = NULL;
   comp->input = NULL;
   comp->input_len = 0;

   /* we may just want to pass the text right through */
   if (compression == PNG_TEXT_COMPRESSION_NONE)
   {
	   comp->input = text;
	   comp->input_len = text_len;
	   return((int)text_len);
   }

   if (compression >= PNG_TEXT_COMPRESSION_LAST)
   {
#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
	  char msg[50];
	  png_snprintf(msg, 50, "Unknown compression type %d", compression);
	  png_warning(png_ptr, msg);
#else
	  png_warning(png_ptr, "Unknown compression type");
#endif
   }

   /* We can't write the chunk until we find out how much data we have,
	* which means we need to run the compressor first and save the
	* output.  This shouldn't be a problem, as the vast majority of
	* comments should be reasonable, but we will set up an array of
	* malloc'd pointers to be sure.
	*
	* If we knew the application was well behaved, we could simplify this
	* greatly by assuming we can always malloc an output buffer large
	* enough to hold the compressed text ((1001 * text_len / 1000) + 12)
	* and malloc this directly.  The only time this would be a bad idea is
	* if we can't malloc more than 64K and we have 64K of random input
	* data, or if the input string is incredibly large (although this
	* wouldn't cause a failure, just a slowdown due to swapping).
	*/

   /* set up the compression buffers */
   png_ptr->zstream.avail_in = (uInt)text_len;
   png_ptr->zstream.next_in = (Bytef *)text;
   png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
   png_ptr->zstream.next_out = (Bytef *)png_ptr->zbuf;

   /* this is the same compression loop as in png_write_row() */
   do
   {
	  /* compress the data */
	  ret = deflate(&png_ptr->zstream, Z_NO_FLUSH);
	  if (ret != Z_OK)
	  {
		 /* error */
		 if (png_ptr->zstream.msg != NULL)
			png_error(png_ptr, png_ptr->zstream.msg);
		 else
			png_error(png_ptr, "zlib error");
	  }
	  /* check to see if we need more room */
	  if (!(png_ptr->zstream.avail_out))
	  {
		 /* make sure the output array has room */
		 if (comp->num_output_ptr >= comp->max_output_ptr)
		 {
			int old_max;

			old_max = comp->max_output_ptr;
			comp->max_output_ptr = comp->num_output_ptr + 4;
			if (comp->output_ptr != NULL)
			{
			   png_charpp old_ptr;

			   old_ptr = comp->output_ptr;
			   comp->output_ptr = (png_charpp)png_malloc(png_ptr,
				  (png_uint_32)(comp->max_output_ptr *
				  png_sizeof (png_charpp)));
			   png_memcpy(comp->output_ptr, old_ptr, old_max
				  * png_sizeof (png_charp));
			   png_free(png_ptr, old_ptr);
			}
			else
			   comp->output_ptr = (png_charpp)png_malloc(png_ptr,
				  (png_uint_32)(comp->max_output_ptr *
				  png_sizeof (png_charp)));
		 }

		 /* save the data */
		 comp->output_ptr[comp->num_output_ptr] = (png_charp)png_malloc(png_ptr,
			(png_uint_32)png_ptr->zbuf_size);
		 png_memcpy(comp->output_ptr[comp->num_output_ptr], png_ptr->zbuf,
			png_ptr->zbuf_size);
		 comp->num_output_ptr++;

		 /* and reset the buffer */
		 png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
		 png_ptr->zstream.next_out = png_ptr->zbuf;
	  }
   /* continue until we don't have any more to compress */
   } while (png_ptr->zstream.avail_in);

   /* finish the compression */
   do
   {
	  /* tell zlib we are finished */
	  ret = deflate(&png_ptr->zstream, Z_FINISH);

	  if (ret == Z_OK)
	  {
		 /* check to see if we need more room */
		 if (!(png_ptr->zstream.avail_out))
		 {
			/* check to make sure our output array has room */
			if (comp->num_output_ptr >= comp->max_output_ptr)
			{
			   int old_max;

			   old_max = comp->max_output_ptr;
			   comp->max_output_ptr = comp->num_output_ptr + 4;
			   if (comp->output_ptr != NULL)
			   {
				  png_charpp old_ptr;

				  old_ptr = comp->output_ptr;
				  /* This could be optimized to realloc() */
				  comp->output_ptr = (png_charpp)png_malloc(png_ptr,
					 (png_uint_32)(comp->max_output_ptr *
					 png_sizeof (png_charpp)));
				  png_memcpy(comp->output_ptr, old_ptr,
					 old_max * png_sizeof (png_charp));
				  png_free(png_ptr, old_ptr);
			   }
			   else
				  comp->output_ptr = (png_charpp)png_malloc(png_ptr,
					 (png_uint_32)(comp->max_output_ptr *
					 png_sizeof (png_charp)));
			}

			/* save off the data */
			comp->output_ptr[comp->num_output_ptr] =
			   (png_charp)png_malloc(png_ptr, (png_uint_32)png_ptr->zbuf_size);
			png_memcpy(comp->output_ptr[comp->num_output_ptr], png_ptr->zbuf,
			   png_ptr->zbuf_size);
			comp->num_output_ptr++;

			/* and reset the buffer pointers */
			png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
			png_ptr->zstream.next_out = png_ptr->zbuf;
		 }
	  }
	  else if (ret != Z_STREAM_END)
	  {
		 /* we got an error */
		 if (png_ptr->zstream.msg != NULL)
			png_error(png_ptr, png_ptr->zstream.msg);
		 else
			png_error(png_ptr, "zlib error");
	  }
   } while (ret != Z_STREAM_END);

   /* text length is number of buffers plus last buffer */
   text_len = png_ptr->zbuf_size * comp->num_output_ptr;
   if (png_ptr->zstream.avail_out < png_ptr->zbuf_size)
	  text_len += png_ptr->zbuf_size - (png_size_t)png_ptr->zstream.avail_out;

   return((int)text_len);
}

/* ship the compressed text out via chunk writes */
static void /* PRIVATE */
png_write_compressed_data_out(png_structp png_ptr, compression_state *comp)
{
   int i;

   /* handle the no-compression case */
   if (comp->input)
   {
	   png_write_chunk_data(png_ptr, (png_bytep)comp->input,
							(png_size_t)comp->input_len);
	   return;
   }

   /* write saved output buffers, if any */
   for (i = 0; i < comp->num_output_ptr; i++)
   {
	  png_write_chunk_data(png_ptr,(png_bytep)comp->output_ptr[i],
		 png_ptr->zbuf_size);
	  png_free(png_ptr, comp->output_ptr[i]);
	  comp->output_ptr[i]=NULL;
   }
   if (comp->max_output_ptr != 0)
	  png_free(png_ptr, comp->output_ptr);
	  comp->output_ptr=NULL;
   /* write anything left in zbuf */
   if (png_ptr->zstream.avail_out < (png_uint_32)png_ptr->zbuf_size)
	  png_write_chunk_data(png_ptr, png_ptr->zbuf,
		 png_ptr->zbuf_size - png_ptr->zstream.avail_out);

   /* reset zlib for another zTXt/iTXt or image data */
   deflateReset(&png_ptr->zstream);
   png_ptr->zstream.data_type = Z_BINARY;
}
#endif

/* Write the IHDR chunk, and update the png_struct with the necessary
 * information.  Note that the rest of this code depends upon this
 * information being correct.
 */
void /* PRIVATE */
png_write_IHDR(png_structp png_ptr, png_uint_32 width, png_uint_32 height,
   int bit_depth, int color_type, int compression_type, int filter_type,
   int interlace_type)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_IHDR;
#endif
   png_byte buf[13]; /* buffer to store the IHDR info */

   png_debug(1, "in png_write_IHDR\n");
   /* Check that we have valid input data from the application info */
   switch (color_type)
   {
	  case PNG_COLOR_TYPE_GRAY:
		 switch (bit_depth)
		 {
			case 1:
			case 2:
			case 4:
			case 8:
			case 16: png_ptr->channels = 1; break;
			default: png_error(png_ptr,"Invalid bit depth for grayscale image");
		 }
		 break;
	  case PNG_COLOR_TYPE_RGB:
		 if (bit_depth != 8 && bit_depth != 16)
			png_error(png_ptr, "Invalid bit depth for RGB image");
		 png_ptr->channels = 3;
		 break;
	  case PNG_COLOR_TYPE_PALETTE:
		 switch (bit_depth)
		 {
			case 1:
			case 2:
			case 4:
			case 8: png_ptr->channels = 1; break;
			default: png_error(png_ptr, "Invalid bit depth for paletted image");
		 }
		 break;
	  case PNG_COLOR_TYPE_GRAY_ALPHA:
		 if (bit_depth != 8 && bit_depth != 16)
			png_error(png_ptr, "Invalid bit depth for grayscale+alpha image");
		 png_ptr->channels = 2;
		 break;
	  case PNG_COLOR_TYPE_RGB_ALPHA:
		 if (bit_depth != 8 && bit_depth != 16)
			png_error(png_ptr, "Invalid bit depth for RGBA image");
		 png_ptr->channels = 4;
		 break;
	  default:
		 png_error(png_ptr, "Invalid image color type specified");
   }

   if (compression_type != PNG_COMPRESSION_TYPE_BASE)
   {
	  png_warning(png_ptr, "Invalid compression type specified");
	  compression_type = PNG_COMPRESSION_TYPE_BASE;
   }

   /* Write filter_method 64 (intrapixel differencing) only if
	* 1. Libpng was compiled with PNG_MNG_FEATURES_SUPPORTED and
	* 2. Libpng did not write a PNG signature (this filter_method is only
	*    used in PNG datastreams that are embedded in MNG datastreams) and
	* 3. The application called png_permit_mng_features with a mask that
	*    included PNG_FLAG_MNG_FILTER_64 and
	* 4. The filter_method is 64 and
	* 5. The color_type is RGB or RGBA
	*/
   if (
#if defined(PNG_MNG_FEATURES_SUPPORTED)
	  !((png_ptr->mng_features_permitted & PNG_FLAG_MNG_FILTER_64) &&
	  ((png_ptr->mode&PNG_HAVE_PNG_SIGNATURE) == 0) &&
	  (color_type == PNG_COLOR_TYPE_RGB ||
	   color_type == PNG_COLOR_TYPE_RGB_ALPHA) &&
	  (filter_type == PNG_INTRAPIXEL_DIFFERENCING)) &&
#endif
	  filter_type != PNG_FILTER_TYPE_BASE)
   {
	  png_warning(png_ptr, "Invalid filter type specified");
	  filter_type = PNG_FILTER_TYPE_BASE;
   }

#ifdef PNG_WRITE_INTERLACING_SUPPORTED
   if (interlace_type != PNG_INTERLACE_NONE &&
	  interlace_type != PNG_INTERLACE_ADAM7)
   {
	  png_warning(png_ptr, "Invalid interlace type specified");
	  interlace_type = PNG_INTERLACE_ADAM7;
   }
#else
   interlace_type=PNG_INTERLACE_NONE;
#endif

   /* save off the relevent information */
   png_ptr->bit_depth = (png_byte)bit_depth;
   png_ptr->color_type = (png_byte)color_type;
   png_ptr->interlaced = (png_byte)interlace_type;
#if defined(PNG_MNG_FEATURES_SUPPORTED)
   png_ptr->filter_type = (png_byte)filter_type;
#endif
   png_ptr->compression_type = (png_byte)compression_type;
   png_ptr->width = width;
   png_ptr->height = height;

   png_ptr->pixel_depth = (png_byte)(bit_depth * png_ptr->channels);
   png_ptr->rowbytes = PNG_ROWBYTES(png_ptr->pixel_depth, width);
   /* set the usr info, so any transformations can modify it */
   png_ptr->usr_width = png_ptr->width;
   png_ptr->usr_bit_depth = png_ptr->bit_depth;
   png_ptr->usr_channels = png_ptr->channels;

   /* pack the header information into the buffer */
   png_save_uint_32(buf, width);
   png_save_uint_32(buf + 4, height);
   buf[8] = (png_byte)bit_depth;
   buf[9] = (png_byte)color_type;
   buf[10] = (png_byte)compression_type;
   buf[11] = (png_byte)filter_type;
   buf[12] = (png_byte)interlace_type;

   /* write the chunk */
   png_write_chunk(png_ptr, png_IHDR, buf, (png_size_t)13);

   /* initialize zlib with PNG info */
   png_ptr->zstream.zalloc = png_zalloc;
   png_ptr->zstream.zfree = png_zfree;
   png_ptr->zstream.opaque = (voidpf)png_ptr;
   if (!(png_ptr->do_filter))
   {
	  if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE ||
		 png_ptr->bit_depth < 8)
		 png_ptr->do_filter = PNG_FILTER_NONE;
	  else
		 png_ptr->do_filter = PNG_ALL_FILTERS;
   }
   if (!(png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_STRATEGY))
   {
	  if (png_ptr->do_filter != PNG_FILTER_NONE)
		 png_ptr->zlib_strategy = Z_FILTERED;
	  else
		 png_ptr->zlib_strategy = Z_DEFAULT_STRATEGY;
   }
   if (!(png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_LEVEL))
	  png_ptr->zlib_level = Z_DEFAULT_COMPRESSION;
   if (!(png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_MEM_LEVEL))
	  png_ptr->zlib_mem_level = 8;
   if (!(png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_WINDOW_BITS))
	  png_ptr->zlib_window_bits = 15;
   if (!(png_ptr->flags & PNG_FLAG_ZLIB_CUSTOM_METHOD))
	  png_ptr->zlib_method = 8;
   if (deflateInit2(&png_ptr->zstream, png_ptr->zlib_level,
	  png_ptr->zlib_method, png_ptr->zlib_window_bits,
	  png_ptr->zlib_mem_level, png_ptr->zlib_strategy) != Z_OK)
	   png_error(png_ptr, "zlib failed to initialize compressor");
   png_ptr->zstream.next_out = png_ptr->zbuf;
   png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
   /* libpng is not interested in zstream.data_type */
   /* set it to a predefined value, to avoid its evaluation inside zlib */
   png_ptr->zstream.data_type = Z_BINARY;

   png_ptr->mode = PNG_HAVE_IHDR;
}

/* write the palette.  We are careful not to trust png_color to be in the
 * correct order for PNG, so people can redefine it to any convenient
 * structure.
 */
void /* PRIVATE */
png_write_PLTE(png_structp png_ptr, png_colorp palette, png_uint_32 num_pal)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_PLTE;
#endif
   png_uint_32 i;
   png_colorp pal_ptr;
   png_byte buf[3];

   png_debug(1, "in png_write_PLTE\n");
   if ((
#if defined(PNG_MNG_FEATURES_SUPPORTED)
		!(png_ptr->mng_features_permitted & PNG_FLAG_MNG_EMPTY_PLTE) &&
#endif
		num_pal == 0) || num_pal > 256)
   {
	 if (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE)
	 {
		png_error(png_ptr, "Invalid number of colors in palette");
	 }
	 else
	 {
		png_warning(png_ptr, "Invalid number of colors in palette");
		return;
	 }
   }

   if (!(png_ptr->color_type&PNG_COLOR_MASK_COLOR))
   {
	  png_warning(png_ptr,
		"Ignoring request to write a PLTE chunk in grayscale PNG");
	  return;
   }

   png_ptr->num_palette = (png_uint_16)num_pal;
   png_debug1(3, "num_palette = %d\n", png_ptr->num_palette);

   png_write_chunk_start(png_ptr, png_PLTE, num_pal * 3);
#ifndef PNG_NO_POINTER_INDEXING
   for (i = 0, pal_ptr = palette; i < num_pal; i++, pal_ptr++)
   {
	  buf[0] = pal_ptr->red;
	  buf[1] = pal_ptr->green;
	  buf[2] = pal_ptr->blue;
	  png_write_chunk_data(png_ptr, buf, (png_size_t)3);
   }
#else
   /* This is a little slower but some buggy compilers need to do this instead */
   pal_ptr=palette;
   for (i = 0; i < num_pal; i++)
   {
	  buf[0] = pal_ptr[i].red;
	  buf[1] = pal_ptr[i].green;
	  buf[2] = pal_ptr[i].blue;
	  png_write_chunk_data(png_ptr, buf, (png_size_t)3);
   }
#endif
   png_write_chunk_end(png_ptr);
   png_ptr->mode |= PNG_HAVE_PLTE;
}

/* write an IDAT chunk */
void /* PRIVATE */
png_write_IDAT(png_structp png_ptr, png_bytep data, png_size_t length)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_IDAT;
#endif
   png_debug(1, "in png_write_IDAT\n");

   /* Optimize the CMF field in the zlib stream. */
   /* This hack of the zlib stream is compliant to the stream specification. */
   if (!(png_ptr->mode & PNG_HAVE_IDAT) &&
	   png_ptr->compression_type == PNG_COMPRESSION_TYPE_BASE)
   {
	  unsigned int z_cmf = data[0];  /* zlib compression method and flags */
	  if ((z_cmf & 0x0f) == 8 && (z_cmf & 0xf0) <= 0x70)
	  {
		 /* Avoid memory underflows and multiplication overflows. */
		 /* The conditions below are practically always satisfied;
			however, they still must be checked. */
		 if (length >= 2 &&
			 png_ptr->height < 16384 && png_ptr->width < 16384)
		 {
			png_uint_32 uncompressed_idat_size = png_ptr->height *
			   ((png_ptr->width *
			   png_ptr->channels * png_ptr->bit_depth + 15) >> 3);
			unsigned int z_cinfo = z_cmf >> 4;
			unsigned int half_z_window_size = 1 << (z_cinfo + 7);
			while (uncompressed_idat_size <= half_z_window_size &&
				   half_z_window_size >= 256)
			{
			   z_cinfo--;
			   half_z_window_size >>= 1;
			}
			z_cmf = (z_cmf & 0x0f) | (z_cinfo << 4);
			if (data[0] != (png_byte)z_cmf)
			{
			   data[0] = (png_byte)z_cmf;
			   data[1] &= 0xe0;
			   data[1] += (png_byte)(0x1f - ((z_cmf << 8) + data[1]) % 0x1f);
			}
		 }
	  }
	  else
		 png_error(png_ptr,
			"Invalid zlib compression method or flags in IDAT");
   }

   png_write_chunk(png_ptr, png_IDAT, data, length);
   png_ptr->mode |= PNG_HAVE_IDAT;
}

/* write an IEND chunk */
void /* PRIVATE */
png_write_IEND(png_structp png_ptr)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_IEND;
#endif
   png_debug(1, "in png_write_IEND\n");
   png_write_chunk(png_ptr, png_IEND, png_bytep_NULL,
	 (png_size_t)0);
   png_ptr->mode |= PNG_HAVE_IEND;
}

#if defined(PNG_WRITE_gAMA_SUPPORTED)
/* write a gAMA chunk */
#ifdef PNG_FLOATING_POINT_SUPPORTED
void /* PRIVATE */
png_write_gAMA(png_structp png_ptr, double file_gamma)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_gAMA;
#endif
   png_uint_32 igamma;
   png_byte buf[4];

   png_debug(1, "in png_write_gAMA\n");
   /* file_gamma is saved in 1/100,000ths */
   igamma = (png_uint_32)(file_gamma * 100000.0 + 0.5);
   png_save_uint_32(buf, igamma);
   png_write_chunk(png_ptr, png_gAMA, buf, (png_size_t)4);
}
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
void /* PRIVATE */
png_write_gAMA_fixed(png_structp png_ptr, png_fixed_point file_gamma)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_gAMA;
#endif
   png_byte buf[4];

   png_debug(1, "in png_write_gAMA\n");
   /* file_gamma is saved in 1/100,000ths */
   png_save_uint_32(buf, (png_uint_32)file_gamma);
   png_write_chunk(png_ptr, png_gAMA, buf, (png_size_t)4);
}
#endif
#endif

#if defined(PNG_WRITE_sRGB_SUPPORTED)
/* write a sRGB chunk */
void /* PRIVATE */
png_write_sRGB(png_structp png_ptr, int srgb_intent)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_sRGB;
#endif
   png_byte buf[1];

   png_debug(1, "in png_write_sRGB\n");
   if(srgb_intent >= PNG_sRGB_INTENT_LAST)
		 png_warning(png_ptr,
			"Invalid sRGB rendering intent specified");
   buf[0]=(png_byte)srgb_intent;
   png_write_chunk(png_ptr, png_sRGB, buf, (png_size_t)1);
}
#endif

#if defined(PNG_WRITE_iCCP_SUPPORTED)
/* write an iCCP chunk */
void /* PRIVATE */
png_write_iCCP(png_structp png_ptr, png_charp name, int compression_type,
   png_charp profile, int profile_len)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_iCCP;
#endif
   png_size_t name_len;
   png_charp new_name;
   compression_state comp;
   int embedded_profile_len = 0;

   png_debug(1, "in png_write_iCCP\n");

   comp.num_output_ptr = 0;
   comp.max_output_ptr = 0;
   comp.output_ptr = NULL;
   comp.input = NULL;
   comp.input_len = 0;

   if (name == NULL || (name_len = png_check_keyword(png_ptr, name,
	  &new_name)) == 0)
   {
	  png_warning(png_ptr, "Empty keyword in iCCP chunk");
	  return;
   }

   if (compression_type != PNG_COMPRESSION_TYPE_BASE)
	  png_warning(png_ptr, "Unknown compression type in iCCP chunk");

   if (profile == NULL)
	  profile_len = 0;

   if (profile_len > 3)
	  embedded_profile_len =
		  ((*( (png_bytep)profile  ))<<24) |
		  ((*( (png_bytep)profile+1))<<16) |
		  ((*( (png_bytep)profile+2))<< 8) |
		  ((*( (png_bytep)profile+3))    );

   if (profile_len < embedded_profile_len)
	 {
		png_warning(png_ptr,
		  "Embedded profile length too large in iCCP chunk");
		return;
	 }

   if (profile_len > embedded_profile_len)
	 {
		png_warning(png_ptr,
		  "Truncating profile to actual length in iCCP chunk");
		profile_len = embedded_profile_len;
	 }

   if (profile_len)
	   profile_len = png_text_compress(png_ptr, profile, (png_size_t)profile_len,
		  PNG_COMPRESSION_TYPE_BASE, &comp);

   /* make sure we include the NULL after the name and the compression type */
   png_write_chunk_start(png_ptr, png_iCCP,
		  (png_uint_32)name_len+profile_len+2);
   new_name[name_len+1]=0x00;
   png_write_chunk_data(png_ptr, (png_bytep)new_name, name_len + 2);

   if (profile_len)
	  png_write_compressed_data_out(png_ptr, &comp);

   png_write_chunk_end(png_ptr);
   png_free(png_ptr, new_name);
}
#endif

#if defined(PNG_WRITE_sPLT_SUPPORTED)
/* write a sPLT chunk */
void /* PRIVATE */
png_write_sPLT(png_structp png_ptr, png_sPLT_tp spalette)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_sPLT;
#endif
   png_size_t name_len;
   png_charp new_name;
   png_byte entrybuf[10];
   int entry_size = (spalette->depth == 8 ? 6 : 10);
   int palette_size = entry_size * spalette->nentries;
   png_sPLT_entryp ep;
#ifdef PNG_NO_POINTER_INDEXING
   int i;
#endif

   png_debug(1, "in png_write_sPLT\n");
   if (spalette->name == NULL || (name_len = png_check_keyword(png_ptr,
	  spalette->name, &new_name))==0)
   {
	  png_warning(png_ptr, "Empty keyword in sPLT chunk");
	  return;
   }

   /* make sure we include the NULL after the name */
   png_write_chunk_start(png_ptr, png_sPLT,
		  (png_uint_32)(name_len + 2 + palette_size));
   png_write_chunk_data(png_ptr, (png_bytep)new_name, name_len + 1);
   png_write_chunk_data(png_ptr, (png_bytep)&spalette->depth, 1);

   /* loop through each palette entry, writing appropriately */
#ifndef PNG_NO_POINTER_INDEXING
   for (ep = spalette->entries; ep<spalette->entries+spalette->nentries; ep++)
   {
	   if (spalette->depth == 8)
	   {
		   entrybuf[0] = (png_byte)ep->red;
		   entrybuf[1] = (png_byte)ep->green;
		   entrybuf[2] = (png_byte)ep->blue;
		   entrybuf[3] = (png_byte)ep->alpha;
		   png_save_uint_16(entrybuf + 4, ep->frequency);
	   }
	   else
	   {
		   png_save_uint_16(entrybuf + 0, ep->red);
		   png_save_uint_16(entrybuf + 2, ep->green);
		   png_save_uint_16(entrybuf + 4, ep->blue);
		   png_save_uint_16(entrybuf + 6, ep->alpha);
		   png_save_uint_16(entrybuf + 8, ep->frequency);
	   }
	   png_write_chunk_data(png_ptr, entrybuf, (png_size_t)entry_size);
   }
#else
   ep=spalette->entries;
   for (i=0; i>spalette->nentries; i++)
   {
	   if (spalette->depth == 8)
	   {
		   entrybuf[0] = (png_byte)ep[i].red;
		   entrybuf[1] = (png_byte)ep[i].green;
		   entrybuf[2] = (png_byte)ep[i].blue;
		   entrybuf[3] = (png_byte)ep[i].alpha;
		   png_save_uint_16(entrybuf + 4, ep[i].frequency);
	   }
	   else
	   {
		   png_save_uint_16(entrybuf + 0, ep[i].red);
		   png_save_uint_16(entrybuf + 2, ep[i].green);
		   png_save_uint_16(entrybuf + 4, ep[i].blue);
		   png_save_uint_16(entrybuf + 6, ep[i].alpha);
		   png_save_uint_16(entrybuf + 8, ep[i].frequency);
	   }
	   png_write_chunk_data(png_ptr, entrybuf, entry_size);
   }
#endif

   png_write_chunk_end(png_ptr);
   png_free(png_ptr, new_name);
}
#endif

#if defined(PNG_WRITE_sBIT_SUPPORTED)
/* write the sBIT chunk */
void /* PRIVATE */
png_write_sBIT(png_structp png_ptr, png_color_8p sbit, int color_type)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_sBIT;
#endif
   png_byte buf[4];
   png_size_t size;

   png_debug(1, "in png_write_sBIT\n");
   /* make sure we don't depend upon the order of PNG_COLOR_8 */
   if (color_type & PNG_COLOR_MASK_COLOR)
   {
	  png_byte maxbits;

	  maxbits = (png_byte)(color_type==PNG_COLOR_TYPE_PALETTE ? 8 :
				png_ptr->usr_bit_depth);
	  if (sbit->red == 0 || sbit->red > maxbits ||
		  sbit->green == 0 || sbit->green > maxbits ||
		  sbit->blue == 0 || sbit->blue > maxbits)
	  {
		 png_warning(png_ptr, "Invalid sBIT depth specified");
		 return;
	  }
	  buf[0] = sbit->red;
	  buf[1] = sbit->green;
	  buf[2] = sbit->blue;
	  size = 3;
   }
   else
   {
	  if (sbit->gray == 0 || sbit->gray > png_ptr->usr_bit_depth)
	  {
		 png_warning(png_ptr, "Invalid sBIT depth specified");
		 return;
	  }
	  buf[0] = sbit->gray;
	  size = 1;
   }

   if (color_type & PNG_COLOR_MASK_ALPHA)
   {
	  if (sbit->alpha == 0 || sbit->alpha > png_ptr->usr_bit_depth)
	  {
		 png_warning(png_ptr, "Invalid sBIT depth specified");
		 return;
	  }
	  buf[size++] = sbit->alpha;
   }

   png_write_chunk(png_ptr, png_sBIT, buf, size);
}
#endif

#if defined(PNG_WRITE_cHRM_SUPPORTED)
/* write the cHRM chunk */
#ifdef PNG_FLOATING_POINT_SUPPORTED
void /* PRIVATE */
png_write_cHRM(png_structp png_ptr, double white_x, double white_y,
   double red_x, double red_y, double green_x, double green_y,
   double blue_x, double blue_y)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_cHRM;
#endif
   png_byte buf[32];
   png_uint_32 itemp;

   png_debug(1, "in png_write_cHRM\n");
   /* each value is saved in 1/100,000ths */
   if (white_x < 0 || white_x > 0.8 || white_y < 0 || white_y > 0.8 ||
	   white_x + white_y > 1.0)
   {
	  png_warning(png_ptr, "Invalid cHRM white point specified");
#if !defined(PNG_NO_CONSOLE_IO)
	  fprintf(stderr,"white_x=%f, white_y=%f\n",white_x, white_y);
#endif
	  return;
   }
   itemp = (png_uint_32)(white_x * 100000.0 + 0.5);
   png_save_uint_32(buf, itemp);
   itemp = (png_uint_32)(white_y * 100000.0 + 0.5);
   png_save_uint_32(buf + 4, itemp);

   if (red_x < 0 ||  red_y < 0 || red_x + red_y > 1.0)
   {
	  png_warning(png_ptr, "Invalid cHRM red point specified");
	  return;
   }
   itemp = (png_uint_32)(red_x * 100000.0 + 0.5);
   png_save_uint_32(buf + 8, itemp);
   itemp = (png_uint_32)(red_y * 100000.0 + 0.5);
   png_save_uint_32(buf + 12, itemp);

   if (green_x < 0 || green_y < 0 || green_x + green_y > 1.0)
   {
	  png_warning(png_ptr, "Invalid cHRM green point specified");
	  return;
   }
   itemp = (png_uint_32)(green_x * 100000.0 + 0.5);
   png_save_uint_32(buf + 16, itemp);
   itemp = (png_uint_32)(green_y * 100000.0 + 0.5);
   png_save_uint_32(buf + 20, itemp);

   if (blue_x < 0 || blue_y < 0 || blue_x + blue_y > 1.0)
   {
	  png_warning(png_ptr, "Invalid cHRM blue point specified");
	  return;
   }
   itemp = (png_uint_32)(blue_x * 100000.0 + 0.5);
   png_save_uint_32(buf + 24, itemp);
   itemp = (png_uint_32)(blue_y * 100000.0 + 0.5);
   png_save_uint_32(buf + 28, itemp);

   png_write_chunk(png_ptr, png_cHRM, buf, (png_size_t)32);
}
#endif
#ifdef PNG_FIXED_POINT_SUPPORTED
void /* PRIVATE */
png_write_cHRM_fixed(png_structp png_ptr, png_fixed_point white_x,
   png_fixed_point white_y, png_fixed_point red_x, png_fixed_point red_y,
   png_fixed_point green_x, png_fixed_point green_y, png_fixed_point blue_x,
   png_fixed_point blue_y)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_cHRM;
#endif
   png_byte buf[32];

   png_debug(1, "in png_write_cHRM\n");
   /* each value is saved in 1/100,000ths */
   if (white_x > 80000L || white_y > 80000L || white_x + white_y > 100000L)
   {
	  png_warning(png_ptr, "Invalid fixed cHRM white point specified");
#if !defined(PNG_NO_CONSOLE_IO)
	  fprintf(stderr,"white_x=%ld, white_y=%ld\n",white_x, white_y);
#endif
	  return;
   }
   png_save_uint_32(buf, (png_uint_32)white_x);
   png_save_uint_32(buf + 4, (png_uint_32)white_y);

   if (red_x + red_y > 100000L)
   {
	  png_warning(png_ptr, "Invalid cHRM fixed red point specified");
	  return;
   }
   png_save_uint_32(buf + 8, (png_uint_32)red_x);
   png_save_uint_32(buf + 12, (png_uint_32)red_y);

   if (green_x + green_y > 100000L)
   {
	  png_warning(png_ptr, "Invalid fixed cHRM green point specified");
	  return;
   }
   png_save_uint_32(buf + 16, (png_uint_32)green_x);
   png_save_uint_32(buf + 20, (png_uint_32)green_y);

   if (blue_x + blue_y > 100000L)
   {
	  png_warning(png_ptr, "Invalid fixed cHRM blue point specified");
	  return;
   }
   png_save_uint_32(buf + 24, (png_uint_32)blue_x);
   png_save_uint_32(buf + 28, (png_uint_32)blue_y);

   png_write_chunk(png_ptr, png_cHRM, buf, (png_size_t)32);
}
#endif
#endif

#if defined(PNG_WRITE_tRNS_SUPPORTED)
/* write the tRNS chunk */
void /* PRIVATE */
png_write_tRNS(png_structp png_ptr, png_bytep trans, png_color_16p tran,
   int num_trans, int color_type)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_tRNS;
#endif
   png_byte buf[6];

   png_debug(1, "in png_write_tRNS\n");
   if (color_type == PNG_COLOR_TYPE_PALETTE)
   {
	  if (num_trans <= 0 || num_trans > (int)png_ptr->num_palette)
	  {
		 png_warning(png_ptr,"Invalid number of transparent colors specified");
		 return;
	  }
	  /* write the chunk out as it is */
	  png_write_chunk(png_ptr, png_tRNS, trans, (png_size_t)num_trans);
   }
   else if (color_type == PNG_COLOR_TYPE_GRAY)
   {
	  /* one 16 bit value */
	  if(tran->gray >= (1 << png_ptr->bit_depth))
	  {
		 png_warning(png_ptr,
		   "Ignoring attempt to write tRNS chunk out-of-range for bit_depth");
		 return;
	  }
	  png_save_uint_16(buf, tran->gray);
	  png_write_chunk(png_ptr, png_tRNS, buf, (png_size_t)2);
   }
   else if (color_type == PNG_COLOR_TYPE_RGB)
   {
	  /* three 16 bit values */
	  png_save_uint_16(buf, tran->red);
	  png_save_uint_16(buf + 2, tran->green);
	  png_save_uint_16(buf + 4, tran->blue);
	  if(png_ptr->bit_depth == 8 && (buf[0] | buf[2] | buf[4]))
		 {
			png_warning(png_ptr,
			  "Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8");
			return;
		 }
	  png_write_chunk(png_ptr, png_tRNS, buf, (png_size_t)6);
   }
   else
   {
	  png_warning(png_ptr, "Can't write tRNS with an alpha channel");
   }
}
#endif

#if defined(PNG_WRITE_bKGD_SUPPORTED)
/* write the background chunk */
void /* PRIVATE */
png_write_bKGD(png_structp png_ptr, png_color_16p back, int color_type)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_bKGD;
#endif
   png_byte buf[6];

   png_debug(1, "in png_write_bKGD\n");
   if (color_type == PNG_COLOR_TYPE_PALETTE)
   {
	  if (
#if defined(PNG_MNG_FEATURES_SUPPORTED)
		  (png_ptr->num_palette ||
		  (!(png_ptr->mng_features_permitted & PNG_FLAG_MNG_EMPTY_PLTE))) &&
#endif
		 back->index > png_ptr->num_palette)
	  {
		 png_warning(png_ptr, "Invalid background palette index");
		 return;
	  }
	  buf[0] = back->index;
	  png_write_chunk(png_ptr, png_bKGD, buf, (png_size_t)1);
   }
   else if (color_type & PNG_COLOR_MASK_COLOR)
   {
	  png_save_uint_16(buf, back->red);
	  png_save_uint_16(buf + 2, back->green);
	  png_save_uint_16(buf + 4, back->blue);
	  if(png_ptr->bit_depth == 8 && (buf[0] | buf[2] | buf[4]))
		 {
			png_warning(png_ptr,
			  "Ignoring attempt to write 16-bit bKGD chunk when bit_depth is 8");
			return;
		 }
	  png_write_chunk(png_ptr, png_bKGD, buf, (png_size_t)6);
   }
   else
   {
	  if(back->gray >= (1 << png_ptr->bit_depth))
	  {
		 png_warning(png_ptr,
		   "Ignoring attempt to write bKGD chunk out-of-range for bit_depth");
		 return;
	  }
	  png_save_uint_16(buf, back->gray);
	  png_write_chunk(png_ptr, png_bKGD, buf, (png_size_t)2);
   }
}
#endif

#if defined(PNG_WRITE_hIST_SUPPORTED)
/* write the histogram */
void /* PRIVATE */
png_write_hIST(png_structp png_ptr, png_uint_16p hist, int num_hist)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_hIST;
#endif
   int i;
   png_byte buf[3];

   png_debug(1, "in png_write_hIST\n");
   if (num_hist > (int)png_ptr->num_palette)
   {
	  png_debug2(3, "num_hist = %d, num_palette = %d\n", num_hist,
		 png_ptr->num_palette);
	  png_warning(png_ptr, "Invalid number of histogram entries specified");
	  return;
   }

   png_write_chunk_start(png_ptr, png_hIST, (png_uint_32)(num_hist * 2));
   for (i = 0; i < num_hist; i++)
   {
	  png_save_uint_16(buf, hist[i]);
	  png_write_chunk_data(png_ptr, buf, (png_size_t)2);
   }
   png_write_chunk_end(png_ptr);
}
#endif

#if defined(PNG_WRITE_TEXT_SUPPORTED) || defined(PNG_WRITE_pCAL_SUPPORTED) || \
	defined(PNG_WRITE_iCCP_SUPPORTED) || defined(PNG_WRITE_sPLT_SUPPORTED)
/* Check that the tEXt or zTXt keyword is valid per PNG 1.0 specification,
 * and if invalid, correct the keyword rather than discarding the entire
 * chunk.  The PNG 1.0 specification requires keywords 1-79 characters in
 * length, forbids leading or trailing whitespace, multiple internal spaces,
 * and the non-break space (0x80) from ISO 8859-1.  Returns keyword length.
 *
 * The new_key is allocated to hold the corrected keyword and must be freed
 * by the calling routine.  This avoids problems with trying to write to
 * static keywords without having to have duplicate copies of the strings.
 */
png_size_t /* PRIVATE */
png_check_keyword(png_structp png_ptr, png_charp key, png_charpp new_key)
{
   png_size_t key_len;
   png_charp kp, dp;
   int kflag;
   int kwarn=0;

   png_debug(1, "in png_check_keyword\n");
   *new_key = NULL;

   if (key == NULL || (key_len = png_strlen(key)) == 0)
   {
	  png_warning(png_ptr, "zero length keyword");
	  return ((png_size_t)0);
   }

   png_debug1(2, "Keyword to be checked is '%s'\n", key);

   *new_key = (png_charp)png_malloc_warn(png_ptr, (png_uint_32)(key_len + 2));
   if (*new_key == NULL)
   {
	  png_warning(png_ptr, "Out of memory while procesing keyword");
	  return ((png_size_t)0);
   }

   /* Replace non-printing characters with a blank and print a warning */
   for (kp = key, dp = *new_key; *kp != '\0'; kp++, dp++)
   {
	  if ((png_byte)*kp < 0x20 ||
		 ((png_byte)*kp > 0x7E && (png_byte)*kp < 0xA1))
	  {
#if !defined(PNG_NO_STDIO) && !defined(_WIN32_WCE)
		 char msg[40];

		 png_snprintf(msg, 40,
		   "invalid keyword character 0x%02X", (png_byte)*kp);
		 png_warning(png_ptr, msg);
#else
		 png_warning(png_ptr, "invalid character in keyword");
#endif
		 *dp = ' ';
	  }
	  else
	  {
		 *dp = *kp;
	  }
   }
   *dp = '\0';

   /* Remove any trailing white space. */
   kp = *new_key + key_len - 1;
   if (*kp == ' ')
   {
	  png_warning(png_ptr, "trailing spaces removed from keyword");

	  while (*kp == ' ')
	  {
		*(kp--) = '\0';
		key_len--;
	  }
   }

   /* Remove any leading white space. */
   kp = *new_key;
   if (*kp == ' ')
   {
	  png_warning(png_ptr, "leading spaces removed from keyword");

	  while (*kp == ' ')
	  {
		kp++;
		key_len--;
	  }
   }

   png_debug1(2, "Checking for multiple internal spaces in '%s'\n", kp);

   /* Remove multiple internal spaces. */
   for (kflag = 0, dp = *new_key; *kp != '\0'; kp++)
   {
	  if (*kp == ' ' && kflag == 0)
	  {
		 *(dp++) = *kp;
		 kflag = 1;
	  }
	  else if (*kp == ' ')
	  {
		 key_len--;
		 kwarn=1;
	  }
	  else
	  {
		 *(dp++) = *kp;
		 kflag = 0;
	  }
   }
   *dp = '\0';
   if(kwarn)
	  png_warning(png_ptr, "extra interior spaces removed from keyword");

   if (key_len == 0)
   {
	  png_free(png_ptr, *new_key);
	  *new_key=NULL;
	  png_warning(png_ptr, "Zero length keyword");
   }

   if (key_len > 79)
   {
	  png_warning(png_ptr, "keyword length must be 1 - 79 characters");
	  new_key[79] = '\0';
	  key_len = 79;
   }

   return (key_len);
}
#endif

#if defined(PNG_WRITE_tEXt_SUPPORTED)
/* write a tEXt chunk */
void /* PRIVATE */
png_write_tEXt(png_structp png_ptr, png_charp key, png_charp text,
   png_size_t text_len)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_tEXt;
#endif
   png_size_t key_len;
   png_charp new_key;

   png_debug(1, "in png_write_tEXt\n");
   if (key == NULL || (key_len = png_check_keyword(png_ptr, key, &new_key))==0)
   {
	  png_warning(png_ptr, "Empty keyword in tEXt chunk");
	  return;
   }

   if (text == NULL || *text == '\0')
	  text_len = 0;
   else
	  text_len = png_strlen(text);

   /* make sure we include the 0 after the key */
   png_write_chunk_start(png_ptr, png_tEXt, (png_uint_32)key_len+text_len+1);
   /*
	* We leave it to the application to meet PNG-1.0 requirements on the
	* contents of the text.  PNG-1.0 through PNG-1.2 discourage the use of
	* any non-Latin-1 characters except for NEWLINE.  ISO PNG will forbid them.
	* The NUL character is forbidden by PNG-1.0 through PNG-1.2 and ISO PNG.
	*/
   png_write_chunk_data(png_ptr, (png_bytep)new_key, key_len + 1);
   if (text_len)
	  png_write_chunk_data(png_ptr, (png_bytep)text, text_len);

   png_write_chunk_end(png_ptr);
   png_free(png_ptr, new_key);
}
#endif

#if defined(PNG_WRITE_zTXt_SUPPORTED)
/* write a compressed text chunk */
void /* PRIVATE */
png_write_zTXt(png_structp png_ptr, png_charp key, png_charp text,
   png_size_t text_len, int compression)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_zTXt;
#endif
   png_size_t key_len;
   char buf[1];
   png_charp new_key;
   compression_state comp;

   png_debug(1, "in png_write_zTXt\n");

   comp.num_output_ptr = 0;
   comp.max_output_ptr = 0;
   comp.output_ptr = NULL;
   comp.input = NULL;
   comp.input_len = 0;

   if (key == NULL || (key_len = png_check_keyword(png_ptr, key, &new_key))==0)
   {
	  png_warning(png_ptr, "Empty keyword in zTXt chunk");
	  return;
   }

   if (text == NULL || *text == '\0' || compression==PNG_TEXT_COMPRESSION_NONE)
   {
	  png_write_tEXt(png_ptr, new_key, text, (png_size_t)0);
	  png_free(png_ptr, new_key);
	  return;
   }

   text_len = png_strlen(text);

   /* compute the compressed data; do it now for the length */
   text_len = png_text_compress(png_ptr, text, text_len, compression,
	   &comp);

   /* write start of chunk */
   png_write_chunk_start(png_ptr, png_zTXt, (png_uint_32)
	  (key_len+text_len+2));
   /* write key */
   png_write_chunk_data(png_ptr, (png_bytep)new_key, key_len + 1);
   png_free(png_ptr, new_key);

   buf[0] = (png_byte)compression;
   /* write compression */
   png_write_chunk_data(png_ptr, (png_bytep)buf, (png_size_t)1);
   /* write the compressed data */
   png_write_compressed_data_out(png_ptr, &comp);

   /* close the chunk */
   png_write_chunk_end(png_ptr);
}
#endif

#if defined(PNG_WRITE_iTXt_SUPPORTED)
/* write an iTXt chunk */
void /* PRIVATE */
png_write_iTXt(png_structp png_ptr, int compression, png_charp key,
	png_charp lang, png_charp lang_key, png_charp text)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_iTXt;
#endif
   png_size_t lang_len, key_len, lang_key_len, text_len;
   png_charp new_lang, new_key;
   png_byte cbuf[2];
   compression_state comp;

   png_debug(1, "in png_write_iTXt\n");

   comp.num_output_ptr = 0;
   comp.max_output_ptr = 0;
   comp.output_ptr = NULL;
   comp.input = NULL;

   if (key == NULL || (key_len = png_check_keyword(png_ptr, key, &new_key))==0)
   {
	  png_warning(png_ptr, "Empty keyword in iTXt chunk");
	  return;
   }
   if (lang == NULL || (lang_len = png_check_keyword(png_ptr, lang, &new_lang))==0)
   {
	  png_warning(png_ptr, "Empty language field in iTXt chunk");
	  new_lang = NULL;
	  lang_len = 0;
   }

   if (lang_key == NULL)
	 lang_key_len = 0;
   else
	 lang_key_len = png_strlen(lang_key);

   if (text == NULL)
	  text_len = 0;
   else
	 text_len = png_strlen(text);

   /* compute the compressed data; do it now for the length */
   text_len = png_text_compress(png_ptr, text, text_len, compression-2,
	  &comp);

   /* make sure we include the compression flag, the compression byte,
	* and the NULs after the key, lang, and lang_key parts */

   png_write_chunk_start(png_ptr, png_iTXt,
		  (png_uint_32)(
		5 /* comp byte, comp flag, terminators for key, lang and lang_key */
		+ key_len
		+ lang_len
		+ lang_key_len
		+ text_len));

   /*
	* We leave it to the application to meet PNG-1.0 requirements on the
	* contents of the text.  PNG-1.0 through PNG-1.2 discourage the use of
	* any non-Latin-1 characters except for NEWLINE.  ISO PNG will forbid them.
	* The NUL character is forbidden by PNG-1.0 through PNG-1.2 and ISO PNG.
	*/
   png_write_chunk_data(png_ptr, (png_bytep)new_key, key_len + 1);

   /* set the compression flag */
   if (compression == PNG_ITXT_COMPRESSION_NONE || \
	   compression == PNG_TEXT_COMPRESSION_NONE)
	   cbuf[0] = 0;
   else /* compression == PNG_ITXT_COMPRESSION_zTXt */
	   cbuf[0] = 1;
   /* set the compression method */
   cbuf[1] = 0;
   png_write_chunk_data(png_ptr, cbuf, 2);

   cbuf[0] = 0;
   png_write_chunk_data(png_ptr, (new_lang ? (png_bytep)new_lang : cbuf), lang_len + 1);
   png_write_chunk_data(png_ptr, (lang_key ? (png_bytep)lang_key : cbuf), lang_key_len + 1);
   png_write_compressed_data_out(png_ptr, &comp);

   png_write_chunk_end(png_ptr);
   png_free(png_ptr, new_key);
   if (new_lang)
	 png_free(png_ptr, new_lang);
}
#endif

#if defined(PNG_WRITE_oFFs_SUPPORTED)
/* write the oFFs chunk */
void /* PRIVATE */
png_write_oFFs(png_structp png_ptr, png_int_32 x_offset, png_int_32 y_offset,
   int unit_type)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_oFFs;
#endif
   png_byte buf[9];

   png_debug(1, "in png_write_oFFs\n");
   if (unit_type >= PNG_OFFSET_LAST)
	  png_warning(png_ptr, "Unrecognized unit type for oFFs chunk");

   png_save_int_32(buf, x_offset);
   png_save_int_32(buf + 4, y_offset);
   buf[8] = (png_byte)unit_type;

   png_write_chunk(png_ptr, png_oFFs, buf, (png_size_t)9);
}
#endif
#if defined(PNG_WRITE_pCAL_SUPPORTED)
/* write the pCAL chunk (described in the PNG extensions document) */
void /* PRIVATE */
png_write_pCAL(png_structp png_ptr, png_charp purpose, png_int_32 X0,
   png_int_32 X1, int type, int nparams, png_charp units, png_charpp params)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_pCAL;
#endif
   png_size_t purpose_len, units_len, total_len;
   png_uint_32p params_len;
   png_byte buf[10];
   png_charp new_purpose;
   int i;

   png_debug1(1, "in png_write_pCAL (%d parameters)\n", nparams);
   if (type >= PNG_EQUATION_LAST)
	  png_warning(png_ptr, "Unrecognized equation type for pCAL chunk");

   purpose_len = png_check_keyword(png_ptr, purpose, &new_purpose) + 1;
   png_debug1(3, "pCAL purpose length = %d\n", (int)purpose_len);
   units_len = png_strlen(units) + (nparams == 0 ? 0 : 1);
   png_debug1(3, "pCAL units length = %d\n", (int)units_len);
   total_len = purpose_len + units_len + 10;

   params_len = (png_uint_32p)png_malloc(png_ptr, (png_uint_32)(nparams
	  *png_sizeof(png_uint_32)));

   /* Find the length of each parameter, making sure we don't count the
	  null terminator for the last parameter. */
   for (i = 0; i < nparams; i++)
   {
	  params_len[i] = png_strlen(params[i]) + (i == nparams - 1 ? 0 : 1);
	  png_debug2(3, "pCAL parameter %d length = %lu\n", i, params_len[i]);
	  total_len += (png_size_t)params_len[i];
   }

   png_debug1(3, "pCAL total length = %d\n", (int)total_len);
   png_write_chunk_start(png_ptr, png_pCAL, (png_uint_32)total_len);
   png_write_chunk_data(png_ptr, (png_bytep)new_purpose, purpose_len);
   png_save_int_32(buf, X0);
   png_save_int_32(buf + 4, X1);
   buf[8] = (png_byte)type;
   buf[9] = (png_byte)nparams;
   png_write_chunk_data(png_ptr, buf, (png_size_t)10);
   png_write_chunk_data(png_ptr, (png_bytep)units, (png_size_t)units_len);

   png_free(png_ptr, new_purpose);

   for (i = 0; i < nparams; i++)
   {
	  png_write_chunk_data(png_ptr, (png_bytep)params[i],
		 (png_size_t)params_len[i]);
   }

   png_free(png_ptr, params_len);
   png_write_chunk_end(png_ptr);
}
#endif

#if defined(PNG_WRITE_sCAL_SUPPORTED)
/* write the sCAL chunk */
#if defined(PNG_FLOATING_POINT_SUPPORTED) && !defined(PNG_NO_STDIO)
void /* PRIVATE */
png_write_sCAL(png_structp png_ptr, int unit, double width, double height)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_sCAL;
#endif
   char buf[64];
   png_size_t total_len;

   png_debug(1, "in png_write_sCAL\n");

   buf[0] = (char)unit;
#if defined(_WIN32_WCE)
/* sprintf() function is not supported on WindowsCE */
   {
	  wchar_t wc_buf[32];
	  size_t wc_len;
	  swprintf(wc_buf, TEXT("%12.12e"), width);
	  wc_len = wcslen(wc_buf);
	  WideCharToMultiByte(CP_ACP, 0, wc_buf, -1, buf + 1, wc_len, NULL, NULL);
	  total_len = wc_len + 2;
	  swprintf(wc_buf, TEXT("%12.12e"), height);
	  wc_len = wcslen(wc_buf);
	  WideCharToMultiByte(CP_ACP, 0, wc_buf, -1, buf + total_len, wc_len,
		 NULL, NULL);
	  total_len += wc_len;
   }
#else
   png_snprintf(buf + 1, 63, "%12.12e", width);
   total_len = 1 + png_strlen(buf + 1) + 1;
   png_snprintf(buf + total_len, 64-total_len, "%12.12e", height);
   total_len += png_strlen(buf + total_len);
#endif

   png_debug1(3, "sCAL total length = %u\n", (unsigned int)total_len);
   png_write_chunk(png_ptr, png_sCAL, (png_bytep)buf, total_len);
}
#else
#ifdef PNG_FIXED_POINT_SUPPORTED
void /* PRIVATE */
png_write_sCAL_s(png_structp png_ptr, int unit, png_charp width,
   png_charp height)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_sCAL;
#endif
   png_byte buf[64];
   png_size_t wlen, hlen, total_len;

   png_debug(1, "in png_write_sCAL_s\n");

   wlen = png_strlen(width);
   hlen = png_strlen(height);
   total_len = wlen + hlen + 2;
   if (total_len > 64)
   {
	  png_warning(png_ptr, "Can't write sCAL (buffer too small)");
	  return;
   }

   buf[0] = (png_byte)unit;
   png_memcpy(buf + 1, width, wlen + 1);      /* append the '\0' here */
   png_memcpy(buf + wlen + 2, height, hlen);  /* do NOT append the '\0' here */

   png_debug1(3, "sCAL total length = %u\n", (unsigned int)total_len);
   png_write_chunk(png_ptr, png_sCAL, buf, total_len);
}
#endif
#endif
#endif

#if defined(PNG_WRITE_pHYs_SUPPORTED)
/* write the pHYs chunk */
void /* PRIVATE */
png_write_pHYs(png_structp png_ptr, png_uint_32 x_pixels_per_unit,
   png_uint_32 y_pixels_per_unit,
   int unit_type)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_pHYs;
#endif
   png_byte buf[9];

   png_debug(1, "in png_write_pHYs\n");
   if (unit_type >= PNG_RESOLUTION_LAST)
	  png_warning(png_ptr, "Unrecognized unit type for pHYs chunk");

   png_save_uint_32(buf, x_pixels_per_unit);
   png_save_uint_32(buf + 4, y_pixels_per_unit);
   buf[8] = (png_byte)unit_type;

   png_write_chunk(png_ptr, png_pHYs, buf, (png_size_t)9);
}
#endif

#if defined(PNG_WRITE_tIME_SUPPORTED)
/* Write the tIME chunk.  Use either png_convert_from_struct_tm()
 * or png_convert_from_time_t(), or fill in the structure yourself.
 */
void /* PRIVATE */
png_write_tIME(png_structp png_ptr, png_timep mod_time)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   PNG_tIME;
#endif
   png_byte buf[7];

   png_debug(1, "in png_write_tIME\n");
   if (mod_time->month  > 12 || mod_time->month  < 1 ||
	   mod_time->day    > 31 || mod_time->day    < 1 ||
	   mod_time->hour   > 23 || mod_time->second > 60)
   {
	  png_warning(png_ptr, "Invalid time specified for tIME chunk");
	  return;
   }

   png_save_uint_16(buf, mod_time->year);
   buf[2] = mod_time->month;
   buf[3] = mod_time->day;
   buf[4] = mod_time->hour;
   buf[5] = mod_time->minute;
   buf[6] = mod_time->second;

   png_write_chunk(png_ptr, png_tIME, buf, (png_size_t)7);
}
#endif

/* initializes the row writing capability of libpng */
void /* PRIVATE */
png_write_start_row(png_structp png_ptr)
{
#ifdef PNG_WRITE_INTERLACING_SUPPORTED
#ifdef PNG_USE_LOCAL_ARRAYS
   /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */

   /* start of interlace block */
   int png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};

   /* offset to next interlace block */
   int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};

   /* start of interlace block in the y direction */
   int png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};

   /* offset to next interlace block in the y direction */
   int png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
#endif
#endif

   png_size_t buf_size;

   png_debug(1, "in png_write_start_row\n");
   buf_size = (png_size_t)(PNG_ROWBYTES(
	  png_ptr->usr_channels*png_ptr->usr_bit_depth,png_ptr->width)+1);

   /* set up row buffer */
   png_ptr->row_buf = (png_bytep)png_malloc(png_ptr, (png_uint_32)buf_size);
   png_ptr->row_buf[0] = PNG_FILTER_VALUE_NONE;

#ifndef PNG_NO_WRITE_FILTERING
   /* set up filtering buffer, if using this filter */
   if (png_ptr->do_filter & PNG_FILTER_SUB)
   {
	  png_ptr->sub_row = (png_bytep)png_malloc(png_ptr,
		 (png_ptr->rowbytes + 1));
	  png_ptr->sub_row[0] = PNG_FILTER_VALUE_SUB;
   }

   /* We only need to keep the previous row if we are using one of these. */
   if (png_ptr->do_filter & (PNG_FILTER_AVG | PNG_FILTER_UP | PNG_FILTER_PAETH))
   {
	 /* set up previous row buffer */
	  png_ptr->prev_row = (png_bytep)png_malloc(png_ptr, (png_uint_32)buf_size);
	  png_memset(png_ptr->prev_row, 0, buf_size);

	  if (png_ptr->do_filter & PNG_FILTER_UP)
	  {
		 png_ptr->up_row = (png_bytep)png_malloc(png_ptr,
			(png_ptr->rowbytes + 1));
		 png_ptr->up_row[0] = PNG_FILTER_VALUE_UP;
	  }

	  if (png_ptr->do_filter & PNG_FILTER_AVG)
	  {
		 png_ptr->avg_row = (png_bytep)png_malloc(png_ptr,
			(png_ptr->rowbytes + 1));
		 png_ptr->avg_row[0] = PNG_FILTER_VALUE_AVG;
	  }

	  if (png_ptr->do_filter & PNG_FILTER_PAETH)
	  {
		 png_ptr->paeth_row = (png_bytep)png_malloc(png_ptr,
			(png_ptr->rowbytes + 1));
		 png_ptr->paeth_row[0] = PNG_FILTER_VALUE_PAETH;
	  }
#endif /* PNG_NO_WRITE_FILTERING */
   }

#ifdef PNG_WRITE_INTERLACING_SUPPORTED
   /* if interlaced, we need to set up width and height of pass */
   if (png_ptr->interlaced)
   {
	  if (!(png_ptr->transformations & PNG_INTERLACE))
	  {
		 png_ptr->num_rows = (png_ptr->height + png_pass_yinc[0] - 1 -
			png_pass_ystart[0]) / png_pass_yinc[0];
		 png_ptr->usr_width = (png_ptr->width + png_pass_inc[0] - 1 -
			png_pass_start[0]) / png_pass_inc[0];
	  }
	  else
	  {
		 png_ptr->num_rows = png_ptr->height;
		 png_ptr->usr_width = png_ptr->width;
	  }
   }
   else
#endif
   {
	  png_ptr->num_rows = png_ptr->height;
	  png_ptr->usr_width = png_ptr->width;
   }
   png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
   png_ptr->zstream.next_out = png_ptr->zbuf;
}

/* Internal use only.  Called when finished processing a row of data. */
void /* PRIVATE */
png_write_finish_row(png_structp png_ptr)
{
#ifdef PNG_WRITE_INTERLACING_SUPPORTED
#ifdef PNG_USE_LOCAL_ARRAYS
   /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */

   /* start of interlace block */
   int png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};

   /* offset to next interlace block */
   int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};

   /* start of interlace block in the y direction */
   int png_pass_ystart[7] = {0, 0, 4, 0, 2, 0, 1};

   /* offset to next interlace block in the y direction */
   int png_pass_yinc[7] = {8, 8, 8, 4, 4, 2, 2};
#endif
#endif

   int ret;

   png_debug(1, "in png_write_finish_row\n");
   /* next row */
   png_ptr->row_number++;

   /* see if we are done */
   if (png_ptr->row_number < png_ptr->num_rows)
	  return;

#ifdef PNG_WRITE_INTERLACING_SUPPORTED
   /* if interlaced, go to next pass */
   if (png_ptr->interlaced)
   {
	  png_ptr->row_number = 0;
	  if (png_ptr->transformations & PNG_INTERLACE)
	  {
		 png_ptr->pass++;
	  }
	  else
	  {
		 /* loop until we find a non-zero width or height pass */
		 do
		 {
			png_ptr->pass++;
			if (png_ptr->pass >= 7)
			   break;
			png_ptr->usr_width = (png_ptr->width +
			   png_pass_inc[png_ptr->pass] - 1 -
			   png_pass_start[png_ptr->pass]) /
			   png_pass_inc[png_ptr->pass];
			png_ptr->num_rows = (png_ptr->height +
			   png_pass_yinc[png_ptr->pass] - 1 -
			   png_pass_ystart[png_ptr->pass]) /
			   png_pass_yinc[png_ptr->pass];
			if (png_ptr->transformations & PNG_INTERLACE)
			   break;
		 } while (png_ptr->usr_width == 0 || png_ptr->num_rows == 0);

	  }

	  /* reset the row above the image for the next pass */
	  if (png_ptr->pass < 7)
	  {
		 if (png_ptr->prev_row != NULL)
			png_memset(png_ptr->prev_row, 0,
			   (png_size_t)(PNG_ROWBYTES(png_ptr->usr_channels*
			   png_ptr->usr_bit_depth,png_ptr->width))+1);
		 return;
	  }
   }
#endif

   /* if we get here, we've just written the last row, so we need
	  to flush the compressor */
   do
   {
	  /* tell the compressor we are done */
	  ret = deflate(&png_ptr->zstream, Z_FINISH);
	  /* check for an error */
	  if (ret == Z_OK)
	  {
		 /* check to see if we need more room */
		 if (!(png_ptr->zstream.avail_out))
		 {
			png_write_IDAT(png_ptr, png_ptr->zbuf, png_ptr->zbuf_size);
			png_ptr->zstream.next_out = png_ptr->zbuf;
			png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
		 }
	  }
	  else if (ret != Z_STREAM_END)
	  {
		 if (png_ptr->zstream.msg != NULL)
			png_error(png_ptr, png_ptr->zstream.msg);
		 else
			png_error(png_ptr, "zlib error");
	  }
   } while (ret != Z_STREAM_END);

   /* write any extra space */
   if (png_ptr->zstream.avail_out < png_ptr->zbuf_size)
   {
	  png_write_IDAT(png_ptr, png_ptr->zbuf, png_ptr->zbuf_size -
		 png_ptr->zstream.avail_out);
   }

   deflateReset(&png_ptr->zstream);
   png_ptr->zstream.data_type = Z_BINARY;
}

#if defined(PNG_WRITE_INTERLACING_SUPPORTED)
/* Pick out the correct pixels for the interlace pass.
 * The basic idea here is to go through the row with a source
 * pointer and a destination pointer (sp and dp), and copy the
 * correct pixels for the pass.  As the row gets compacted,
 * sp will always be >= dp, so we should never overwrite anything.
 * See the default: case for the easiest code to understand.
 */
void /* PRIVATE */
png_do_write_interlace(png_row_infop row_info, png_bytep row, int pass)
{
#ifdef PNG_USE_LOCAL_ARRAYS
   /* arrays to facilitate easy interlacing - use pass (0 - 6) as index */

   /* start of interlace block */
   int png_pass_start[7] = {0, 4, 0, 2, 0, 1, 0};

   /* offset to next interlace block */
   int png_pass_inc[7] = {8, 8, 4, 4, 2, 2, 1};
#endif

   png_debug(1, "in png_do_write_interlace\n");
   /* we don't have to do anything on the last pass (6) */
#if defined(PNG_USELESS_TESTS_SUPPORTED)
   if (row != NULL && row_info != NULL && pass < 6)
#else
   if (pass < 6)
#endif
   {
	  /* each pixel depth is handled separately */
	  switch (row_info->pixel_depth)
	  {
		 case 1:
		 {
			png_bytep sp;
			png_bytep dp;
			int shift;
			int d;
			int value;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			dp = row;
			d = 0;
			shift = 7;
			for (i = png_pass_start[pass]; i < row_width;
			   i += png_pass_inc[pass])
			{
			   sp = row + (png_size_t)(i >> 3);
			   value = (int)(*sp >> (7 - (int)(i & 0x07))) & 0x01;
			   d |= (value << shift);

			   if (shift == 0)
			   {
				  shift = 7;
				  *dp++ = (png_byte)d;
				  d = 0;
			   }
			   else
				  shift--;

			}
			if (shift != 7)
			   *dp = (png_byte)d;
			break;
		 }
		 case 2:
		 {
			png_bytep sp;
			png_bytep dp;
			int shift;
			int d;
			int value;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			dp = row;
			shift = 6;
			d = 0;
			for (i = png_pass_start[pass]; i < row_width;
			   i += png_pass_inc[pass])
			{
			   sp = row + (png_size_t)(i >> 2);
			   value = (*sp >> ((3 - (int)(i & 0x03)) << 1)) & 0x03;
			   d |= (value << shift);

			   if (shift == 0)
			   {
				  shift = 6;
				  *dp++ = (png_byte)d;
				  d = 0;
			   }
			   else
				  shift -= 2;
			}
			if (shift != 6)
				   *dp = (png_byte)d;
			break;
		 }
		 case 4:
		 {
			png_bytep sp;
			png_bytep dp;
			int shift;
			int d;
			int value;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;

			dp = row;
			shift = 4;
			d = 0;
			for (i = png_pass_start[pass]; i < row_width;
			   i += png_pass_inc[pass])
			{
			   sp = row + (png_size_t)(i >> 1);
			   value = (*sp >> ((1 - (int)(i & 0x01)) << 2)) & 0x0f;
			   d |= (value << shift);

			   if (shift == 0)
			   {
				  shift = 4;
				  *dp++ = (png_byte)d;
				  d = 0;
			   }
			   else
				  shift -= 4;
			}
			if (shift != 4)
			   *dp = (png_byte)d;
			break;
		 }
		 default:
		 {
			png_bytep sp;
			png_bytep dp;
			png_uint_32 i;
			png_uint_32 row_width = row_info->width;
			png_size_t pixel_bytes;

			/* start at the beginning */
			dp = row;
			/* find out how many bytes each pixel takes up */
			pixel_bytes = (row_info->pixel_depth >> 3);
			/* loop through the row, only looking at the pixels that
			   matter */
			for (i = png_pass_start[pass]; i < row_width;
			   i += png_pass_inc[pass])
			{
			   /* find out where the original pixel is */
			   sp = row + (png_size_t)i * pixel_bytes;
			   /* move the pixel */
			   if (dp != sp)
				  png_memcpy(dp, sp, pixel_bytes);
			   /* next pixel */
			   dp += pixel_bytes;
			}
			break;
		 }
	  }
	  /* set new row width */
	  row_info->width = (row_info->width +
		 png_pass_inc[pass] - 1 -
		 png_pass_start[pass]) /
		 png_pass_inc[pass];
		 row_info->rowbytes = PNG_ROWBYTES(row_info->pixel_depth,
			row_info->width);
   }
}
#endif

/* This filters the row, chooses which filter to use, if it has not already
 * been specified by the application, and then writes the row out with the
 * chosen filter.
 */
#define PNG_MAXSUM (((png_uint_32)(-1)) >> 1)
#define PNG_HISHIFT 10
#define PNG_LOMASK ((png_uint_32)0xffffL)
#define PNG_HIMASK ((png_uint_32)(~PNG_LOMASK >> PNG_HISHIFT))
void /* PRIVATE */
png_write_find_filter(png_structp png_ptr, png_row_infop row_info)
{
   png_bytep best_row;
#ifndef PNG_NO_WRITE_FILTER
   png_bytep prev_row, row_buf;
   png_uint_32 mins, bpp;
   png_byte filter_to_do = png_ptr->do_filter;
   png_uint_32 row_bytes = row_info->rowbytes;
#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
   int num_p_filters = (int)png_ptr->num_prev_filters;
#endif

   png_debug(1, "in png_write_find_filter\n");
   /* find out how many bytes offset each pixel is */
   bpp = (row_info->pixel_depth + 7) >> 3;

   prev_row = png_ptr->prev_row;
#endif
   best_row = png_ptr->row_buf;
#ifndef PNG_NO_WRITE_FILTER
   row_buf = best_row;
   mins = PNG_MAXSUM;

   /* The prediction method we use is to find which method provides the
	* smallest value when summing the absolute values of the distances
	* from zero, using anything >= 128 as negative numbers.  This is known
	* as the "minimum sum of absolute differences" heuristic.  Other
	* heuristics are the "weighted minimum sum of absolute differences"
	* (experimental and can in theory improve compression), and the "zlib
	* predictive" method (not implemented yet), which does test compressions
	* of lines using different filter methods, and then chooses the
	* (series of) filter(s) that give minimum compressed data size (VERY
	* computationally expensive).
	*
	* GRR 980525:  consider also
	*   (1) minimum sum of absolute differences from running average (i.e.,
	*       keep running sum of non-absolute differences & count of bytes)
	*       [track dispersion, too?  restart average if dispersion too large?]
	*  (1b) minimum sum of absolute differences from sliding average, probably
	*       with window size <= deflate window (usually 32K)
	*   (2) minimum sum of squared differences from zero or running average
	*       (i.e., ~ root-mean-square approach)
	*/

   /* We don't need to test the 'no filter' case if this is the only filter
	* that has been chosen, as it doesn't actually do anything to the data.
	*/
   if ((filter_to_do & PNG_FILTER_NONE) &&
	   filter_to_do != PNG_FILTER_NONE)
   {
	  png_bytep rp;
	  png_uint_32 sum = 0;
	  png_uint_32 i;
	  int v;

	  for (i = 0, rp = row_buf + 1; i < row_bytes; i++, rp++)
	  {
		 v = *rp;
		 sum += (v < 128) ? v : 256 - v;
	  }

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
	  if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
	  {
		 png_uint_32 sumhi, sumlo;
		 int j;
		 sumlo = sum & PNG_LOMASK;
		 sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK; /* Gives us some footroom */

		 /* Reduce the sum if we match any of the previous rows */
		 for (j = 0; j < num_p_filters; j++)
		 {
			if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_NONE)
			{
			   sumlo = (sumlo * png_ptr->filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			   sumhi = (sumhi * png_ptr->filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			}
		 }

		 /* Factor in the cost of this filter (this is here for completeness,
		  * but it makes no sense to have a "cost" for the NONE filter, as
		  * it has the minimum possible computational cost - none).
		  */
		 sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_NONE]) >>
			PNG_COST_SHIFT;
		 sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_NONE]) >>
			PNG_COST_SHIFT;

		 if (sumhi > PNG_HIMASK)
			sum = PNG_MAXSUM;
		 else
			sum = (sumhi << PNG_HISHIFT) + sumlo;
	  }
#endif
	  mins = sum;
   }

   /* sub filter */
   if (filter_to_do == PNG_FILTER_SUB)
   /* it's the only filter so no testing is needed */
   {
	  png_bytep rp, lp, dp;
	  png_uint_32 i;
	  for (i = 0, rp = row_buf + 1, dp = png_ptr->sub_row + 1; i < bpp;
		   i++, rp++, dp++)
	  {
		 *dp = *rp;
	  }
	  for (lp = row_buf + 1; i < row_bytes;
		 i++, rp++, lp++, dp++)
	  {
		 *dp = (png_byte)(((int)*rp - (int)*lp) & 0xff);
	  }
	  best_row = png_ptr->sub_row;
   }

   else if (filter_to_do & PNG_FILTER_SUB)
   {
	  png_bytep rp, dp, lp;
	  png_uint_32 sum = 0, lmins = mins;
	  png_uint_32 i;
	  int v;

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
	  /* We temporarily increase the "minimum sum" by the factor we
	   * would reduce the sum of this filter, so that we can do the
	   * early exit comparison without scaling the sum each time.
	   */
	  if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
	  {
		 int j;
		 png_uint_32 lmhi, lmlo;
		 lmlo = lmins & PNG_LOMASK;
		 lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;

		 for (j = 0; j < num_p_filters; j++)
		 {
			if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_SUB)
			{
			   lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			   lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			}
		 }

		 lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
			PNG_COST_SHIFT;
		 lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
			PNG_COST_SHIFT;

		 if (lmhi > PNG_HIMASK)
			lmins = PNG_MAXSUM;
		 else
			lmins = (lmhi << PNG_HISHIFT) + lmlo;
	  }
#endif

	  for (i = 0, rp = row_buf + 1, dp = png_ptr->sub_row + 1; i < bpp;
		   i++, rp++, dp++)
	  {
		 v = *dp = *rp;

		 sum += (v < 128) ? v : 256 - v;
	  }
	  for (lp = row_buf + 1; i < row_bytes;
		 i++, rp++, lp++, dp++)
	  {
		 v = *dp = (png_byte)(((int)*rp - (int)*lp) & 0xff);

		 sum += (v < 128) ? v : 256 - v;

		 if (sum > lmins)  /* We are already worse, don't continue. */
			break;
	  }

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
	  if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
	  {
		 int j;
		 png_uint_32 sumhi, sumlo;
		 sumlo = sum & PNG_LOMASK;
		 sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;

		 for (j = 0; j < num_p_filters; j++)
		 {
			if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_SUB)
			{
			   sumlo = (sumlo * png_ptr->inv_filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			   sumhi = (sumhi * png_ptr->inv_filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			}
		 }

		 sumlo = (sumlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
			PNG_COST_SHIFT;
		 sumhi = (sumhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>
			PNG_COST_SHIFT;

		 if (sumhi > PNG_HIMASK)
			sum = PNG_MAXSUM;
		 else
			sum = (sumhi << PNG_HISHIFT) + sumlo;
	  }
#endif

	  if (sum < mins)
	  {
		 mins = sum;
		 best_row = png_ptr->sub_row;
	  }
   }

   /* up filter */
   if (filter_to_do == PNG_FILTER_UP)
   {
	  png_bytep rp, dp, pp;
	  png_uint_32 i;

	  for (i = 0, rp = row_buf + 1, dp = png_ptr->up_row + 1,
		   pp = prev_row + 1; i < row_bytes;
		   i++, rp++, pp++, dp++)
	  {
		 *dp = (png_byte)(((int)*rp - (int)*pp) & 0xff);
	  }
	  best_row = png_ptr->up_row;
   }

   else if (filter_to_do & PNG_FILTER_UP)
   {
	  png_bytep rp, dp, pp;
	  png_uint_32 sum = 0, lmins = mins;
	  png_uint_32 i;
	  int v;

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
	  if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
	  {
		 int j;
		 png_uint_32 lmhi, lmlo;
		 lmlo = lmins & PNG_LOMASK;
		 lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;

		 for (j = 0; j < num_p_filters; j++)
		 {
			if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_UP)
			{
			   lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			   lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			}
		 }

		 lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_UP]) >>
			PNG_COST_SHIFT;
		 lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_UP]) >>
			PNG_COST_SHIFT;

		 if (lmhi > PNG_HIMASK)
			lmins = PNG_MAXSUM;
		 else
			lmins = (lmhi << PNG_HISHIFT) + lmlo;
	  }
#endif

	  for (i = 0, rp = row_buf + 1, dp = png_ptr->up_row + 1,
		   pp = prev_row + 1; i < row_bytes; i++)
	  {
		 v = *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);

		 sum += (v < 128) ? v : 256 - v;

		 if (sum > lmins)  /* We are already worse, don't continue. */
			break;
	  }

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
	  if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
	  {
		 int j;
		 png_uint_32 sumhi, sumlo;
		 sumlo = sum & PNG_LOMASK;
		 sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;

		 for (j = 0; j < num_p_filters; j++)
		 {
			if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_UP)
			{
			   sumlo = (sumlo * png_ptr->filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			   sumhi = (sumhi * png_ptr->filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			}
		 }

		 sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_UP]) >>
			PNG_COST_SHIFT;
		 sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_UP]) >>
			PNG_COST_SHIFT;

		 if (sumhi > PNG_HIMASK)
			sum = PNG_MAXSUM;
		 else
			sum = (sumhi << PNG_HISHIFT) + sumlo;
	  }
#endif

	  if (sum < mins)
	  {
		 mins = sum;
		 best_row = png_ptr->up_row;
	  }
   }

   /* avg filter */
   if (filter_to_do == PNG_FILTER_AVG)
   {
	  png_bytep rp, dp, pp, lp;
	  png_uint_32 i;
	  for (i = 0, rp = row_buf + 1, dp = png_ptr->avg_row + 1,
		   pp = prev_row + 1; i < bpp; i++)
	  {
		 *dp++ = (png_byte)(((int)*rp++ - ((int)*pp++ / 2)) & 0xff);
	  }
	  for (lp = row_buf + 1; i < row_bytes; i++)
	  {
		 *dp++ = (png_byte)(((int)*rp++ - (((int)*pp++ + (int)*lp++) / 2))
				 & 0xff);
	  }
	  best_row = png_ptr->avg_row;
   }

   else if (filter_to_do & PNG_FILTER_AVG)
   {
	  png_bytep rp, dp, pp, lp;
	  png_uint_32 sum = 0, lmins = mins;
	  png_uint_32 i;
	  int v;

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
	  if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
	  {
		 int j;
		 png_uint_32 lmhi, lmlo;
		 lmlo = lmins & PNG_LOMASK;
		 lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;

		 for (j = 0; j < num_p_filters; j++)
		 {
			if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_AVG)
			{
			   lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			   lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			}
		 }

		 lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_AVG]) >>
			PNG_COST_SHIFT;
		 lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_AVG]) >>
			PNG_COST_SHIFT;

		 if (lmhi > PNG_HIMASK)
			lmins = PNG_MAXSUM;
		 else
			lmins = (lmhi << PNG_HISHIFT) + lmlo;
	  }
#endif

	  for (i = 0, rp = row_buf + 1, dp = png_ptr->avg_row + 1,
		   pp = prev_row + 1; i < bpp; i++)
	  {
		 v = *dp++ = (png_byte)(((int)*rp++ - ((int)*pp++ / 2)) & 0xff);

		 sum += (v < 128) ? v : 256 - v;
	  }
	  for (lp = row_buf + 1; i < row_bytes; i++)
	  {
		 v = *dp++ =
		  (png_byte)(((int)*rp++ - (((int)*pp++ + (int)*lp++) / 2)) & 0xff);

		 sum += (v < 128) ? v : 256 - v;

		 if (sum > lmins)  /* We are already worse, don't continue. */
			break;
	  }

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
	  if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
	  {
		 int j;
		 png_uint_32 sumhi, sumlo;
		 sumlo = sum & PNG_LOMASK;
		 sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;

		 for (j = 0; j < num_p_filters; j++)
		 {
			if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_NONE)
			{
			   sumlo = (sumlo * png_ptr->filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			   sumhi = (sumhi * png_ptr->filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			}
		 }

		 sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_AVG]) >>
			PNG_COST_SHIFT;
		 sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_AVG]) >>
			PNG_COST_SHIFT;

		 if (sumhi > PNG_HIMASK)
			sum = PNG_MAXSUM;
		 else
			sum = (sumhi << PNG_HISHIFT) + sumlo;
	  }
#endif

	  if (sum < mins)
	  {
		 mins = sum;
		 best_row = png_ptr->avg_row;
	  }
   }

   /* Paeth filter */
   if (filter_to_do == PNG_FILTER_PAETH)
   {
	  png_bytep rp, dp, pp, cp, lp;
	  png_uint_32 i;
	  for (i = 0, rp = row_buf + 1, dp = png_ptr->paeth_row + 1,
		   pp = prev_row + 1; i < bpp; i++)
	  {
		 *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);
	  }

	  for (lp = row_buf + 1, cp = prev_row + 1; i < row_bytes; i++)
	  {
		 int a, b, c, pa, pb, pc, p;

		 b = *pp++;
		 c = *cp++;
		 a = *lp++;

		 p = b - c;
		 pc = a - c;

#ifdef PNG_USE_ABS
		 pa = abs(p);
		 pb = abs(pc);
		 pc = abs(p + pc);
#else
		 pa = p < 0 ? -p : p;
		 pb = pc < 0 ? -pc : pc;
		 pc = (p + pc) < 0 ? -(p + pc) : p + pc;
#endif

		 p = (pa <= pb && pa <=pc) ? a : (pb <= pc) ? b : c;

		 *dp++ = (png_byte)(((int)*rp++ - p) & 0xff);
	  }
	  best_row = png_ptr->paeth_row;
   }

   else if (filter_to_do & PNG_FILTER_PAETH)
   {
	  png_bytep rp, dp, pp, cp, lp;
	  png_uint_32 sum = 0, lmins = mins;
	  png_uint_32 i;
	  int v;

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
	  if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
	  {
		 int j;
		 png_uint_32 lmhi, lmlo;
		 lmlo = lmins & PNG_LOMASK;
		 lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK;

		 for (j = 0; j < num_p_filters; j++)
		 {
			if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_PAETH)
			{
			   lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			   lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			}
		 }

		 lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_PAETH]) >>
			PNG_COST_SHIFT;
		 lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_PAETH]) >>
			PNG_COST_SHIFT;

		 if (lmhi > PNG_HIMASK)
			lmins = PNG_MAXSUM;
		 else
			lmins = (lmhi << PNG_HISHIFT) + lmlo;
	  }
#endif

	  for (i = 0, rp = row_buf + 1, dp = png_ptr->paeth_row + 1,
		   pp = prev_row + 1; i < bpp; i++)
	  {
		 v = *dp++ = (png_byte)(((int)*rp++ - (int)*pp++) & 0xff);

		 sum += (v < 128) ? v : 256 - v;
	  }

	  for (lp = row_buf + 1, cp = prev_row + 1; i < row_bytes; i++)
	  {
		 int a, b, c, pa, pb, pc, p;

		 b = *pp++;
		 c = *cp++;
		 a = *lp++;

#ifndef PNG_SLOW_PAETH
		 p = b - c;
		 pc = a - c;
#ifdef PNG_USE_ABS
		 pa = abs(p);
		 pb = abs(pc);
		 pc = abs(p + pc);
#else
		 pa = p < 0 ? -p : p;
		 pb = pc < 0 ? -pc : pc;
		 pc = (p + pc) < 0 ? -(p + pc) : p + pc;
#endif
		 p = (pa <= pb && pa <=pc) ? a : (pb <= pc) ? b : c;
#else /* PNG_SLOW_PAETH */
		 p = a + b - c;
		 pa = abs(p - a);
		 pb = abs(p - b);
		 pc = abs(p - c);
		 if (pa <= pb && pa <= pc)
			p = a;
		 else if (pb <= pc)
			p = b;
		 else
			p = c;
#endif /* PNG_SLOW_PAETH */

		 v = *dp++ = (png_byte)(((int)*rp++ - p) & 0xff);

		 sum += (v < 128) ? v : 256 - v;

		 if (sum > lmins)  /* We are already worse, don't continue. */
			break;
	  }

#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
	  if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED)
	  {
		 int j;
		 png_uint_32 sumhi, sumlo;
		 sumlo = sum & PNG_LOMASK;
		 sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;

		 for (j = 0; j < num_p_filters; j++)
		 {
			if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_PAETH)
			{
			   sumlo = (sumlo * png_ptr->filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			   sumhi = (sumhi * png_ptr->filter_weights[j]) >>
				  PNG_WEIGHT_SHIFT;
			}
		 }

		 sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_PAETH]) >>
			PNG_COST_SHIFT;
		 sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_PAETH]) >>
			PNG_COST_SHIFT;

		 if (sumhi > PNG_HIMASK)
			sum = PNG_MAXSUM;
		 else
			sum = (sumhi << PNG_HISHIFT) + sumlo;
	  }
#endif

	  if (sum < mins)
	  {
		 best_row = png_ptr->paeth_row;
	  }
   }
#endif /* PNG_NO_WRITE_FILTER */
   /* Do the actual writing of the filtered row data from the chosen filter. */

   png_write_filtered_row(png_ptr, best_row);

#ifndef PNG_NO_WRITE_FILTER
#if defined(PNG_WRITE_WEIGHTED_FILTER_SUPPORTED)
   /* Save the type of filter we picked this time for future calculations */
   if (png_ptr->num_prev_filters > 0)
   {
	  int j;
	  for (j = 1; j < num_p_filters; j++)
	  {
		 png_ptr->prev_filters[j] = png_ptr->prev_filters[j - 1];
	  }
	  png_ptr->prev_filters[j] = best_row[0];
   }
#endif
#endif /* PNG_NO_WRITE_FILTER */
}

/* Do the actual writing of a previously filtered row. */
void /* PRIVATE */
png_write_filtered_row(png_structp png_ptr, png_bytep filtered_row)
{
   png_debug(1, "in png_write_filtered_row\n");
   png_debug1(2, "filter = %d\n", filtered_row[0]);
   /* set up the zlib input buffer */

   png_ptr->zstream.next_in = filtered_row;
   png_ptr->zstream.avail_in = (uInt)png_ptr->row_info.rowbytes + 1;
   /* repeat until we have compressed all the data */
   do
   {
	  int ret; /* return of zlib */

	  /* compress the data */
	  ret = deflate(&png_ptr->zstream, Z_NO_FLUSH);
	  /* check for compression errors */
	  if (ret != Z_OK)
	  {
		 if (png_ptr->zstream.msg != NULL)
			png_error(png_ptr, png_ptr->zstream.msg);
		 else
			png_error(png_ptr, "zlib error");
	  }

	  /* see if it is time to write another IDAT */
	  if (!(png_ptr->zstream.avail_out))
	  {
		 /* write the IDAT and reset the zlib output buffer */
		 png_write_IDAT(png_ptr, png_ptr->zbuf, png_ptr->zbuf_size);
		 png_ptr->zstream.next_out = png_ptr->zbuf;
		 png_ptr->zstream.avail_out = (uInt)png_ptr->zbuf_size;
	  }
   /* repeat until all data has been compressed */
   } while (png_ptr->zstream.avail_in);

   /* swap the current and previous rows */
   if (png_ptr->prev_row != NULL)
   {
	  png_bytep tptr;

	  tptr = png_ptr->prev_row;
	  png_ptr->prev_row = png_ptr->row_buf;
	  png_ptr->row_buf = tptr;
   }

   /* finish row - updates counters and flushes zlib if last row */
   png_write_finish_row(png_ptr);

#if defined(PNG_WRITE_FLUSH_SUPPORTED)
   png_ptr->flush_rows++;

   if (png_ptr->flush_dist > 0 &&
	   png_ptr->flush_rows >= png_ptr->flush_dist)
   {
	  png_write_flush(png_ptr);
   }
#endif
}
#endif /* PNG_WRITE_SUPPORTED */

/*** End of inlined file: pngwutil.c ***/

#else
  extern "C"
  {
	#include <png.h>
	#include <pngconf.h>
  }
#endif
}

#undef max
#undef min

#if JUCE_MSVC
 #pragma warning (pop)
#endif

using ::calloc;
using ::malloc;
using ::free;

namespace PNGHelpers
{
	using namespace pnglibNamespace;

	void JUCE_CDECL readCallback (png_structp png, png_bytep data, png_size_t length)
	{
		static_cast<InputStream*> (png_get_io_ptr (png))->read (data, (int) length);
	}

	void JUCE_CDECL writeDataCallback (png_structp png, png_bytep data, png_size_t length)
	{
		static_cast<OutputStream*> (png_get_io_ptr (png))->write (data, (int) length);
	}

	struct PNGErrorStruct {};

	void JUCE_CDECL errorCallback (png_structp, png_const_charp)
	{
		throw PNGErrorStruct();
	}
}

PNGImageFormat::PNGImageFormat()    {}
PNGImageFormat::~PNGImageFormat()   {}

String PNGImageFormat::getFormatName()  { return "PNG"; }

bool PNGImageFormat::canUnderstand (InputStream& in)
{
	const int bytesNeeded = 4;
	char header [bytesNeeded];

	return in.read (header, bytesNeeded) == bytesNeeded
			&& header[1] == 'P'
			&& header[2] == 'N'
			&& header[3] == 'G';
}

#if (JUCE_MAC || JUCE_IOS) && USE_COREGRAPHICS_RENDERING && JUCE_USE_COREIMAGE_LOADER
 Image juce_loadWithCoreImage (InputStream& input);
#endif

Image PNGImageFormat::decodeImage (InputStream& in)
{
#if (JUCE_MAC || JUCE_IOS) && USE_COREGRAPHICS_RENDERING && JUCE_USE_COREIMAGE_LOADER
	return juce_loadWithCoreImage (in);
#else
	using namespace pnglibNamespace;
	Image image;

	png_structp pngReadStruct;
	png_infop pngInfoStruct;

	pngReadStruct = png_create_read_struct (PNG_LIBPNG_VER_STRING, 0, 0, 0);

	if (pngReadStruct != 0)
	{
		try
		{
			pngInfoStruct = png_create_info_struct (pngReadStruct);

			if (pngInfoStruct == 0)
			{
				png_destroy_read_struct (&pngReadStruct, 0, 0);
				return Image::null;
			}

			png_set_error_fn (pngReadStruct, 0, PNGHelpers::errorCallback, PNGHelpers::errorCallback );

			// read the header..
			png_set_read_fn (pngReadStruct, &in, PNGHelpers::readCallback);

			png_uint_32 width, height;
			int bitDepth, colorType, interlaceType;

			png_read_info (pngReadStruct, pngInfoStruct);

			png_get_IHDR (pngReadStruct, pngInfoStruct,
						  &width, &height,
						  &bitDepth, &colorType,
						  &interlaceType, 0, 0);

			if (bitDepth == 16)
				png_set_strip_16 (pngReadStruct);

			if (colorType == PNG_COLOR_TYPE_PALETTE)
				png_set_expand (pngReadStruct);

			if (bitDepth < 8)
				png_set_expand (pngReadStruct);

			if (png_get_valid (pngReadStruct, pngInfoStruct, PNG_INFO_tRNS))
				png_set_expand (pngReadStruct);

			if (colorType == PNG_COLOR_TYPE_GRAY || colorType == PNG_COLOR_TYPE_GRAY_ALPHA)
				png_set_gray_to_rgb (pngReadStruct);

			png_set_add_alpha (pngReadStruct, 0xff, PNG_FILLER_AFTER);

			bool hasAlphaChan = (colorType & PNG_COLOR_MASK_ALPHA) != 0
								  || pngInfoStruct->num_trans > 0;

			// Load the image into a temp buffer in the pnglib format..
			HeapBlock <uint8> tempBuffer (height * (width << 2));

			{
				HeapBlock <png_bytep> rows (height);
				for (int y = (int) height; --y >= 0;)
					rows[y] = (png_bytep) (tempBuffer + (width << 2) * y);

				try
				{
					png_read_image (pngReadStruct, rows);
					png_read_end (pngReadStruct, pngInfoStruct);
				}
				catch (PNGHelpers::PNGErrorStruct&)
				{}
			}

			png_destroy_read_struct (&pngReadStruct, &pngInfoStruct, 0);

			// now convert the data to a juce image format..
			image = Image (hasAlphaChan ? Image::ARGB : Image::RGB,
						   (int) width, (int) height, hasAlphaChan);

			image.getProperties()->set ("originalImageHadAlpha", image.hasAlphaChannel());
			hasAlphaChan = image.hasAlphaChannel(); // (the native image creator may not give back what we expect)

			const Image::BitmapData destData (image, Image::BitmapData::writeOnly);
			uint8* srcRow = tempBuffer;
			uint8* destRow = destData.data;

			for (int y = 0; y < (int) height; ++y)
			{
				const uint8* src = srcRow;
				srcRow += (width << 2);
				uint8* dest = destRow;
				destRow += destData.lineStride;

				if (hasAlphaChan)
				{
					for (int i = (int) width; --i >= 0;)
					{
						((PixelARGB*) dest)->setARGB (src[3], src[0], src[1], src[2]);
						((PixelARGB*) dest)->premultiply();
						dest += destData.pixelStride;
						src += 4;
					}
				}
				else
				{
					for (int i = (int) width; --i >= 0;)
					{
						((PixelRGB*) dest)->setARGB (0, src[0], src[1], src[2]);
						dest += destData.pixelStride;
						src += 4;
					}
				}
			}
		}
		catch (PNGHelpers::PNGErrorStruct&)
		{}
	}

	return image;
#endif
}

bool PNGImageFormat::writeImageToStream (const Image& image, OutputStream& out)
{
	using namespace pnglibNamespace;
	const int width = image.getWidth();
	const int height = image.getHeight();

	png_structp pngWriteStruct = png_create_write_struct (PNG_LIBPNG_VER_STRING, 0, 0, 0);

	if (pngWriteStruct == 0)
		return false;

	png_infop pngInfoStruct = png_create_info_struct (pngWriteStruct);

	if (pngInfoStruct == 0)
	{
		png_destroy_write_struct (&pngWriteStruct, (png_infopp) 0);
		return false;
	}

	png_set_write_fn (pngWriteStruct, &out, PNGHelpers::writeDataCallback, 0);

	png_set_IHDR (pngWriteStruct, pngInfoStruct, (png_uint_32) width, (png_uint_32) height, 8,
				  image.hasAlphaChannel() ? PNG_COLOR_TYPE_RGB_ALPHA
										  : PNG_COLOR_TYPE_RGB,
				  PNG_INTERLACE_NONE,
				  PNG_COMPRESSION_TYPE_BASE,
				  PNG_FILTER_TYPE_BASE);

	HeapBlock <uint8> rowData ((size_t) width * 4);

	png_color_8 sig_bit;
	sig_bit.red = 8;
	sig_bit.green = 8;
	sig_bit.blue = 8;
	sig_bit.alpha = 8;
	png_set_sBIT (pngWriteStruct, pngInfoStruct, &sig_bit);

	png_write_info (pngWriteStruct, pngInfoStruct);

	png_set_shift (pngWriteStruct, &sig_bit);
	png_set_packing (pngWriteStruct);

	const Image::BitmapData srcData (image, Image::BitmapData::readOnly);

	for (int y = 0; y < height; ++y)
	{
		uint8* dst = rowData;
		const uint8* src = srcData.getLinePointer (y);

		if (image.hasAlphaChannel())
		{
			for (int i = width; --i >= 0;)
			{
				PixelARGB p (*(const PixelARGB*) src);
				p.unpremultiply();

				*dst++ = p.getRed();
				*dst++ = p.getGreen();
				*dst++ = p.getBlue();
				*dst++ = p.getAlpha();
				src += srcData.pixelStride;
			}
		}
		else
		{
			for (int i = width; --i >= 0;)
			{
				*dst++ = ((const PixelRGB*) src)->getRed();
				*dst++ = ((const PixelRGB*) src)->getGreen();
				*dst++ = ((const PixelRGB*) src)->getBlue();
				src += srcData.pixelStride;
			}
		}

		png_bytep rowPtr = rowData;
		png_write_rows (pngWriteStruct, &rowPtr, 1);
	}

	png_write_end (pngWriteStruct, pngInfoStruct);
	png_destroy_write_struct (&pngWriteStruct, &pngInfoStruct);

	return true;
}

/*** End of inlined file: juce_PNGLoader.cpp ***/


/*** Start of inlined file: juce_AttributedString.cpp ***/
AttributedString::Attribute::Attribute (const Range<int>& range_, const Colour& colour_)
	: range (range_), colour (new Colour (colour_))
{
}

AttributedString::Attribute::Attribute (const Range<int>& range_, const Font& font_)
	: range (range_), font (new Font (font_))
{
}

AttributedString::Attribute::Attribute (const Attribute& other)
	: range (other.range),
	  font (other.font.createCopy()),
	  colour (other.colour.createCopy())
{
}

AttributedString::Attribute::~Attribute() {}

AttributedString::AttributedString()
	: lineSpacing (0.0f),
	  justification (Justification::left),
	  wordWrap (AttributedString::byWord),
	  readingDirection (AttributedString::natural)
{
}

AttributedString::AttributedString (const String& newString)
	: text (newString),
	  lineSpacing (0.0f),
	  justification (Justification::left),
	  wordWrap (AttributedString::byWord),
	  readingDirection (AttributedString::natural)
{
}

AttributedString::AttributedString (const AttributedString& other)
	: text (other.text),
	  lineSpacing (other.lineSpacing),
	  justification (other.justification),
	  wordWrap (other.wordWrap),
	  readingDirection (other.readingDirection)
{
	attributes.addCopiesOf (other.attributes);
}

AttributedString& AttributedString::operator= (const AttributedString& other)
{
	if (this != &other)
	{
		text = other.text;
		lineSpacing = other.lineSpacing;
		justification = other.justification;
		wordWrap = other.wordWrap;
		readingDirection = other.readingDirection;
		attributes.clear();
		attributes.addCopiesOf (other.attributes);
	}

	return *this;
}

#if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
AttributedString::AttributedString (AttributedString&& other) noexcept
	: text (static_cast <String&&> (other.text)),
	  lineSpacing (other.lineSpacing),
	  justification (other.justification),
	  wordWrap (other.wordWrap),
	  readingDirection (other.readingDirection),
	  attributes (static_cast <OwnedArray<Attribute>&&> (other.attributes))
{
}

AttributedString& AttributedString::operator= (AttributedString&& other) noexcept
{
	text = static_cast <String&&> (other.text);
	lineSpacing = other.lineSpacing;
	justification = other.justification;
	wordWrap = other.wordWrap;
	readingDirection = other.readingDirection;
	attributes = static_cast <OwnedArray<Attribute>&&> (other.attributes);
	return *this;
}
#endif

AttributedString::~AttributedString() {}

void AttributedString::setText (const String& other)
{
	text = other;
}

void AttributedString::append (const String& textToAppend)
{
	text += textToAppend;
}

void AttributedString::append (const String& textToAppend, const Font& font)
{
	const int oldLength = text.length();
	const int newLength = textToAppend.length();

	text += textToAppend;
	setFont (Range<int> (oldLength, oldLength + newLength), font);
}

void AttributedString::append (const String& textToAppend, const Colour& colour)
{
	const int oldLength = text.length();
	const int newLength = textToAppend.length();

	text += textToAppend;
	setColour (Range<int> (oldLength, oldLength + newLength), colour);
}

void AttributedString::append (const String& textToAppend, const Font& font, const Colour& colour)
{
	const int oldLength = text.length();
	const int newLength = textToAppend.length();

	text += textToAppend;
	setFont (Range<int> (oldLength, oldLength + newLength), font);
	setColour (Range<int> (oldLength, oldLength + newLength), colour);
}

void AttributedString::clear()
{
	text = String::empty;
	attributes.clear();
}

void AttributedString::setJustification (const Justification& newJustification) noexcept
{
	justification = newJustification;
}

void AttributedString::setWordWrap (WordWrap newWordWrap) noexcept
{
	wordWrap = newWordWrap;
}

void AttributedString::setReadingDirection (ReadingDirection newReadingDirection) noexcept
{
	readingDirection = newReadingDirection;
}

void AttributedString::setLineSpacing (const float newLineSpacing) noexcept
{
	lineSpacing = newLineSpacing;
}

void AttributedString::setColour (const Range<int>& range, const Colour& colour)
{
	attributes.add (new Attribute (range, colour));
}

void AttributedString::setColour (const Colour& colour)
{
	for (int i = attributes.size(); --i >= 0;)
		if (attributes.getUnchecked(i)->getColour() != nullptr)
			attributes.remove (i);

	setColour (Range<int> (0, text.length()), colour);
}

void AttributedString::setFont (const Range<int>& range, const Font& font)
{
	attributes.add (new Attribute (range, font));
}

void AttributedString::setFont (const Font& font)
{
	for (int i = attributes.size(); --i >= 0;)
		if (attributes.getUnchecked(i)->getFont() != nullptr)
			attributes.remove (i);

	setFont (Range<int> (0, text.length()), font);
}

void AttributedString::draw (Graphics& g, const Rectangle<float>& area) const
{
	if (text.isNotEmpty() && g.clipRegionIntersects (area.getSmallestIntegerContainer()))
	{
		if (! g.getInternalContext()->drawTextLayout (*this, area))
		{
			TextLayout layout;
			layout.createLayout (*this, area.getWidth());
			layout.draw (g, area);
		}
	}
}

/*** End of inlined file: juce_AttributedString.cpp ***/


/*** Start of inlined file: juce_CustomTypeface.cpp ***/
class CustomTypeface::GlyphInfo
{
public:
	GlyphInfo (const juce_wchar character_, const Path& path_, const float width_) noexcept
		: character (character_), path (path_), width (width_)
	{
	}

	struct KerningPair
	{
		juce_wchar character2;
		float kerningAmount;
	};

	void addKerningPair (const juce_wchar subsequentCharacter,
						 const float extraKerningAmount) noexcept
	{
		KerningPair kp;
		kp.character2 = subsequentCharacter;
		kp.kerningAmount = extraKerningAmount;
		kerningPairs.add (kp);
	}

	float getHorizontalSpacing (const juce_wchar subsequentCharacter) const noexcept
	{
		if (subsequentCharacter != 0)
		{
			for (int i = kerningPairs.size(); --i >= 0;)
				if (kerningPairs.getReference(i).character2 == subsequentCharacter)
					return width + kerningPairs.getReference(i).kerningAmount;
		}

		return width;
	}

	const juce_wchar character;
	const Path path;
	float width;
	Array <KerningPair> kerningPairs;

private:
	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (GlyphInfo);
};

namespace CustomTypefaceHelpers
{
	juce_wchar readChar (InputStream& in)
	{
		uint32 n = (uint32) (uint16) in.readShort();

		if (n >= 0xd800 && n <= 0xdfff)
		{
			const uint32 nextWord = (uint32) (uint16) in.readShort();
			jassert (nextWord >= 0xdc00); // illegal unicode character!

			n = 0x10000 + (((n - 0xd800) << 10) | (nextWord - 0xdc00));
		}

		return (juce_wchar) n;
	}

	void writeChar (OutputStream& out, juce_wchar charToWrite)
	{
		if (charToWrite >= 0x10000)
		{
			charToWrite -= 0x10000;
			out.writeShort ((short) (uint16) (0xd800 + (charToWrite >> 10)));
			out.writeShort ((short) (uint16) (0xdc00 + (charToWrite & 0x3ff)));
		}
		else
		{
			out.writeShort ((short) (uint16) charToWrite);
		}
	}
}

CustomTypeface::CustomTypeface()
	: Typeface (String::empty)
{
	clear();
}

CustomTypeface::CustomTypeface (InputStream& serialisedTypefaceStream)
	: Typeface (String::empty)
{
	clear();

	GZIPDecompressorInputStream gzin (serialisedTypefaceStream);
	BufferedInputStream in (gzin, 32768);

	name = in.readString();
	isBold = in.readBool();
	isItalic = in.readBool();
	ascent = in.readFloat();
	defaultCharacter = CustomTypefaceHelpers::readChar (in);

	int i, numChars = in.readInt();

	for (i = 0; i < numChars; ++i)
	{
		const juce_wchar c = CustomTypefaceHelpers::readChar (in);
		const float width = in.readFloat();

		Path p;
		p.loadPathFromStream (in);
		addGlyph (c, p, width);
	}

	const int numKerningPairs = in.readInt();

	for (i = 0; i < numKerningPairs; ++i)
	{
		const juce_wchar char1 = CustomTypefaceHelpers::readChar (in);
		const juce_wchar char2 = CustomTypefaceHelpers::readChar (in);

		addKerningPair (char1, char2, in.readFloat());
	}
}

CustomTypeface::~CustomTypeface()
{
}

void CustomTypeface::clear()
{
	defaultCharacter = 0;
	ascent = 1.0f;
	isBold = isItalic = false;
	zeromem (lookupTable, sizeof (lookupTable));
	glyphs.clear();
}

void CustomTypeface::setCharacteristics (const String& name_, const float ascent_, const bool isBold_,
										 const bool isItalic_, const juce_wchar defaultCharacter_) noexcept
{
	name = name_;
	defaultCharacter = defaultCharacter_;
	ascent = ascent_;
	isBold = isBold_;
	isItalic = isItalic_;
}

void CustomTypeface::addGlyph (const juce_wchar character, const Path& path, const float width) noexcept
{
	// Check that you're not trying to add the same character twice..
	jassert (findGlyph (character, false) == nullptr);

	if (isPositiveAndBelow ((int) character, (int) numElementsInArray (lookupTable)))
		lookupTable [character] = (short) glyphs.size();

	glyphs.add (new GlyphInfo (character, path, width));
}

void CustomTypeface::addKerningPair (const juce_wchar char1, const juce_wchar char2, const float extraAmount) noexcept
{
	if (extraAmount != 0)
	{
		GlyphInfo* const g = findGlyph (char1, true);
		jassert (g != nullptr); // can only add kerning pairs for characters that exist!

		if (g != nullptr)
			g->addKerningPair (char2, extraAmount);
	}
}

CustomTypeface::GlyphInfo* CustomTypeface::findGlyph (const juce_wchar character, const bool loadIfNeeded) noexcept
{
	if (isPositiveAndBelow ((int) character, (int) numElementsInArray (lookupTable)) && lookupTable [character] > 0)
		return glyphs [(int) lookupTable [(int) character]];

	for (int i = 0; i < glyphs.size(); ++i)
	{
		GlyphInfo* const g = glyphs.getUnchecked(i);
		if (g->character == character)
			return g;
	}

	if (loadIfNeeded && loadGlyphIfPossible (character))
		return findGlyph (character, false);

	return nullptr;
}

bool CustomTypeface::loadGlyphIfPossible (const juce_wchar /*characterNeeded*/)
{
	return false;
}

void CustomTypeface::addGlyphsFromOtherTypeface (Typeface& typefaceToCopy, juce_wchar characterStartIndex, int numCharacters) noexcept
{
	setCharacteristics (name, typefaceToCopy.getAscent(), isBold, isItalic, defaultCharacter);

	for (int i = 0; i < numCharacters; ++i)
	{
		const juce_wchar c = (juce_wchar) (characterStartIndex + i);

		Array <int> glyphIndexes;
		Array <float> offsets;
		typefaceToCopy.getGlyphPositions (String::charToString (c), glyphIndexes, offsets);

		const int glyphIndex = glyphIndexes.getFirst();

		if (glyphIndex >= 0 && glyphIndexes.size() > 0)
		{
			const float glyphWidth = offsets[1];

			Path p;
			typefaceToCopy.getOutlineForGlyph (glyphIndex, p);

			addGlyph (c, p, glyphWidth);

			for (int j = glyphs.size() - 1; --j >= 0;)
			{
				const juce_wchar char2 = glyphs.getUnchecked (j)->character;
				glyphIndexes.clearQuick();
				offsets.clearQuick();
				typefaceToCopy.getGlyphPositions (String::charToString (c) + String::charToString (char2), glyphIndexes, offsets);

				if (offsets.size() > 1)
					addKerningPair (c, char2, offsets[1] - glyphWidth);
			}
		}
	}
}

bool CustomTypeface::writeToStream (OutputStream& outputStream)
{
	GZIPCompressorOutputStream out (&outputStream);

	out.writeString (name);
	out.writeBool (isBold);
	out.writeBool (isItalic);
	out.writeFloat (ascent);
	CustomTypefaceHelpers::writeChar (out, defaultCharacter);
	out.writeInt (glyphs.size());

	int i, numKerningPairs = 0;

	for (i = 0; i < glyphs.size(); ++i)
	{
		const GlyphInfo* const g = glyphs.getUnchecked (i);
		CustomTypefaceHelpers::writeChar (out, g->character);
		out.writeFloat (g->width);
		g->path.writePathToStream (out);

		numKerningPairs += g->kerningPairs.size();
	}

	out.writeInt (numKerningPairs);

	for (i = 0; i < glyphs.size(); ++i)
	{
		const GlyphInfo* const g = glyphs.getUnchecked (i);

		for (int j = 0; j < g->kerningPairs.size(); ++j)
		{
			const GlyphInfo::KerningPair& p = g->kerningPairs.getReference (j);
			CustomTypefaceHelpers::writeChar (out, g->character);
			CustomTypefaceHelpers::writeChar (out, p.character2);
			out.writeFloat (p.kerningAmount);
		}
	}

	return true;
}

float CustomTypeface::getAscent() const
{
	return ascent;
}

float CustomTypeface::getDescent() const
{
	return 1.0f - ascent;
}

float CustomTypeface::getStringWidth (const String& text)
{
	float x = 0;
	String::CharPointerType t (text.getCharPointer());

	while (! t.isEmpty())
	{
		const juce_wchar c = t.getAndAdvance();
		const GlyphInfo* const glyph = findGlyph (c, true);

		if (glyph == nullptr)
		{
			const Typeface::Ptr fallbackTypeface (Typeface::getFallbackTypeface());

			if (fallbackTypeface != nullptr && fallbackTypeface != this)
				x += fallbackTypeface->getStringWidth (String::charToString (c));
		}

		if (glyph != nullptr)
			x += glyph->getHorizontalSpacing (*t);
	}

	return x;
}

void CustomTypeface::getGlyphPositions (const String& text, Array <int>& resultGlyphs, Array<float>& xOffsets)
{
	xOffsets.add (0);
	float x = 0;
	String::CharPointerType t (text.getCharPointer());

	while (! t.isEmpty())
	{
		const juce_wchar c = t.getAndAdvance();
		const GlyphInfo* const glyph = findGlyph (c, true);

		if (glyph == nullptr)
		{
			const Typeface::Ptr fallbackTypeface (Typeface::getFallbackTypeface());

			if (fallbackTypeface != nullptr && fallbackTypeface != this)
			{
				Array <int> subGlyphs;
				Array <float> subOffsets;
				fallbackTypeface->getGlyphPositions (String::charToString (c), subGlyphs, subOffsets);

				if (subGlyphs.size() > 0)
				{
					resultGlyphs.add (subGlyphs.getFirst());
					x += subOffsets[1];
					xOffsets.add (x);
				}
			}
		}

		if (glyph != nullptr)
		{
			x += glyph->getHorizontalSpacing (*t);
			resultGlyphs.add ((int) glyph->character);
			xOffsets.add (x);
		}
	}
}

bool CustomTypeface::getOutlineForGlyph (int glyphNumber, Path& path)
{
	const GlyphInfo* const glyph = findGlyph ((juce_wchar) glyphNumber, true);

	if (glyph == nullptr)
	{
		const Typeface::Ptr fallbackTypeface (Typeface::getFallbackTypeface());

		if (fallbackTypeface != nullptr && fallbackTypeface != this)
			fallbackTypeface->getOutlineForGlyph (glyphNumber, path);
	}

	if (glyph != nullptr)
	{
		path = glyph->path;
		return true;
	}

	return false;
}

EdgeTable* CustomTypeface::getEdgeTableForGlyph (int glyphNumber, const AffineTransform& transform)
{
	const GlyphInfo* const glyph = findGlyph ((juce_wchar) glyphNumber, true);

	if (glyph == nullptr)
	{
		const Typeface::Ptr fallbackTypeface (Typeface::getFallbackTypeface());

		if (fallbackTypeface != nullptr && fallbackTypeface != this)
			return fallbackTypeface->getEdgeTableForGlyph (glyphNumber, transform);
	}

	if (glyph != nullptr && ! glyph->path.isEmpty())
		return new EdgeTable (glyph->path.getBoundsTransformed (transform).getSmallestIntegerContainer().expanded (1, 0),
							  glyph->path, transform);

	return nullptr;
}

/*** End of inlined file: juce_CustomTypeface.cpp ***/


/*** Start of inlined file: juce_Font.cpp ***/
namespace FontValues
{
	float limitFontHeight (const float height) noexcept
	{
		return jlimit (0.1f, 10000.0f, height);
	}

	const float defaultFontHeight = 14.0f;
	String fallbackFont;
}

typedef Typeface::Ptr (*GetTypefaceForFont) (const Font&);
GetTypefaceForFont juce_getTypefaceForFont = nullptr;

class TypefaceCache  : public DeletedAtShutdown
{
public:
	TypefaceCache()
		: counter (0)
	{
		setSize (10);
	}

	~TypefaceCache()
	{
		clearSingletonInstance();
	}

	juce_DeclareSingleton_SingleThreaded_Minimal (TypefaceCache);

	void setSize (const int numToCache)
	{
		faces.clear();
		faces.insertMultiple (-1, CachedFace(), numToCache);
	}

	Typeface::Ptr findTypefaceFor (const Font& font)
	{
		const int flags = font.getStyleFlags() & (Font::bold | Font::italic);
		const String faceName (font.getTypefaceName());

		int i;
		for (i = faces.size(); --i >= 0;)
		{
			CachedFace& face = faces.getReference(i);

			if (face.flags == flags
				 && face.typefaceName == faceName
				 && face.typeface->isSuitableForFont (font))
			{
				face.lastUsageCount = ++counter;
				return face.typeface;
			}
		}

		int replaceIndex = 0;
		size_t bestLastUsageCount = std::numeric_limits<int>::max();

		for (i = faces.size(); --i >= 0;)
		{
			const size_t lu = faces.getReference(i).lastUsageCount;

			if (bestLastUsageCount > lu)
			{
				bestLastUsageCount = lu;
				replaceIndex = i;
			}
		}

		CachedFace& face = faces.getReference (replaceIndex);
		face.typefaceName = faceName;
		face.flags = flags;
		face.lastUsageCount = ++counter;

		if (juce_getTypefaceForFont == nullptr)
			face.typeface = Font::getDefaultTypefaceForFont (font);
		else
			face.typeface = juce_getTypefaceForFont (font);

		jassert (face.typeface != nullptr); // the look and feel must return a typeface!

		if (defaultFace == nullptr && font == Font())
			defaultFace = face.typeface;

		return face.typeface;
	}

	Typeface::Ptr getDefaultTypeface() const noexcept
	{
		return defaultFace;
	}

private:
	struct CachedFace
	{
		CachedFace() noexcept
			: lastUsageCount (0), flags (-1)
		{
		}

		// Although it seems a bit wacky to store the name here, it's because it may be a
		// placeholder rather than a real one, e.g. "<Sans-Serif>" vs the actual typeface name.
		// Since the typeface itself doesn't know that it may have this alias, the name under
		// which it was fetched needs to be stored separately.
		String typefaceName;
		size_t lastUsageCount;
		int flags;
		Typeface::Ptr typeface;
	};

	Array <CachedFace> faces;
	Typeface::Ptr defaultFace;
	size_t counter;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (TypefaceCache);
};

juce_ImplementSingleton_SingleThreaded (TypefaceCache)

void Typeface::setTypefaceCacheSize (int numFontsToCache)
{
	TypefaceCache::getInstance()->setSize (numFontsToCache);
}

class Font::SharedFontInternal  : public SingleThreadedReferenceCountedObject
{
public:
	SharedFontInternal (const float height_, const int styleFlags_) noexcept
		: typefaceName (Font::getDefaultSansSerifFontName()),
		  height (height_),
		  horizontalScale (1.0f),
		  kerning (0),
		  ascent (0),
		  styleFlags (styleFlags_),
		  typeface ((styleFlags_ & (Font::bold | Font::italic)) == 0
						? TypefaceCache::getInstance()->getDefaultTypeface() : nullptr)
	{
	}

	SharedFontInternal (const String& typefaceName_, const float height_, const int styleFlags_) noexcept
		: typefaceName (typefaceName_),
		  height (height_),
		  horizontalScale (1.0f),
		  kerning (0),
		  ascent (0),
		  styleFlags (styleFlags_),
		  typeface (nullptr)
	{
	}

	SharedFontInternal (const Typeface::Ptr& typeface_) noexcept
		: typefaceName (typeface_->getName()),
		  height (FontValues::defaultFontHeight),
		  horizontalScale (1.0f),
		  kerning (0),
		  ascent (0),
		  styleFlags (Font::plain),
		  typeface (typeface_)
	{
	}

	SharedFontInternal (const SharedFontInternal& other) noexcept
		: typefaceName (other.typefaceName),
		  height (other.height),
		  horizontalScale (other.horizontalScale),
		  kerning (other.kerning),
		  ascent (other.ascent),
		  styleFlags (other.styleFlags),
		  typeface (other.typeface)
	{
	}

	bool operator== (const SharedFontInternal& other) const noexcept
	{
		return height == other.height
				&& styleFlags == other.styleFlags
				&& horizontalScale == other.horizontalScale
				&& kerning == other.kerning
				&& typefaceName == other.typefaceName;
	}

	String typefaceName;
	float height, horizontalScale, kerning, ascent;
	int styleFlags;
	Typeface::Ptr typeface;
};

Font::Font()
	: font (new SharedFontInternal (FontValues::defaultFontHeight, Font::plain))
{
}

Font::Font (const float fontHeight, const int styleFlags)
	: font (new SharedFontInternal (FontValues::limitFontHeight (fontHeight), styleFlags))
{
}

Font::Font (const String& typefaceName, const float fontHeight, const int styleFlags)
	: font (new SharedFontInternal (typefaceName, FontValues::limitFontHeight (fontHeight), styleFlags))
{
}

Font::Font (const Typeface::Ptr& typeface)
	: font (new SharedFontInternal (typeface))
{
}

Font::Font (const Font& other) noexcept
	: font (other.font)
{
}

Font& Font::operator= (const Font& other) noexcept
{
	font = other.font;
	return *this;
}

#if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
Font::Font (Font&& other) noexcept
	: font (static_cast <ReferenceCountedObjectPtr <SharedFontInternal>&&> (other.font))
{
}

Font& Font::operator= (Font&& other) noexcept
{
	font = static_cast <ReferenceCountedObjectPtr <SharedFontInternal>&&> (other.font);
	return *this;
}
#endif

Font::~Font() noexcept
{
}

bool Font::operator== (const Font& other) const noexcept
{
	return font == other.font
			|| *font == *other.font;
}

bool Font::operator!= (const Font& other) const noexcept
{
	return ! operator== (other);
}

void Font::dupeInternalIfShared()
{
	if (font->getReferenceCount() > 1)
		font = new SharedFontInternal (*font);
}

const String& Font::getDefaultSansSerifFontName()
{
	static const String name ("<Sans-Serif>");
	return name;
}

const String& Font::getDefaultSerifFontName()
{
	static const String name ("<Serif>");
	return name;
}

const String& Font::getDefaultMonospacedFontName()
{
	static const String name ("<Monospaced>");
	return name;
}

const String& Font::getTypefaceName() const noexcept
{
	return font->typefaceName;
}

void Font::setTypefaceName (const String& faceName)
{
	if (faceName != font->typefaceName)
	{
		dupeInternalIfShared();
		font->typefaceName = faceName;
		font->typeface = nullptr;
		font->ascent = 0;
	}
}

Typeface* Font::getTypeface() const
{
	if (font->typeface == nullptr)
		font->typeface = TypefaceCache::getInstance()->findTypefaceFor (*this);

	return font->typeface;
}

const String& Font::getFallbackFontName()
{
	return FontValues::fallbackFont;
}

void Font::setFallbackFontName (const String& name)
{
	FontValues::fallbackFont = name;

   #if JUCE_MAC || JUCE_IOS
	jassertfalse; // Note that use of a fallback font isn't currently implemented in OSX..
   #endif
}

float Font::getHeight() const noexcept
{
	return font->height;
}

Font Font::withHeight (const float newHeight) const
{
	Font f (*this);
	f.setHeight (newHeight);
	return f;
}

void Font::setHeight (float newHeight)
{
	newHeight = FontValues::limitFontHeight (newHeight);

	if (font->height != newHeight)
	{
		dupeInternalIfShared();
		font->height = newHeight;
	}
}

void Font::setHeightWithoutChangingWidth (float newHeight)
{
	newHeight = FontValues::limitFontHeight (newHeight);

	if (font->height != newHeight)
	{
		dupeInternalIfShared();
		font->horizontalScale *= (font->height / newHeight);
		font->height = newHeight;
	}
}

int Font::getStyleFlags() const noexcept
{
	return font->styleFlags;
}

Font Font::withStyle (const int newFlags) const
{
	Font f (*this);
	f.setStyleFlags (newFlags);
	return f;
}

void Font::setStyleFlags (const int newFlags)
{
	if (font->styleFlags != newFlags)
	{
		dupeInternalIfShared();
		font->styleFlags = newFlags;
		font->typeface = nullptr;
		font->ascent = 0;
	}
}

void Font::setSizeAndStyle (float newHeight,
							const int newStyleFlags,
							const float newHorizontalScale,
							const float newKerningAmount)
{
	newHeight = FontValues::limitFontHeight (newHeight);

	if (font->height != newHeight
		 || font->horizontalScale != newHorizontalScale
		 || font->kerning != newKerningAmount)
	{
		dupeInternalIfShared();
		font->height = newHeight;
		font->horizontalScale = newHorizontalScale;
		font->kerning = newKerningAmount;
	}

	setStyleFlags (newStyleFlags);
}

float Font::getHorizontalScale() const noexcept
{
	return font->horizontalScale;
}

Font Font::withHorizontalScale (const float newHorizontalScale) const
{
	Font f (*this);
	f.setHorizontalScale (newHorizontalScale);
	return f;
}

void Font::setHorizontalScale (const float scaleFactor)
{
	dupeInternalIfShared();
	font->horizontalScale = scaleFactor;
}

float Font::getExtraKerningFactor() const noexcept
{
	return font->kerning;
}

Font Font::withExtraKerningFactor (const float extraKerning) const
{
	Font f (*this);
	f.setExtraKerningFactor (extraKerning);
	return f;
}

void Font::setExtraKerningFactor (const float extraKerning)
{
	dupeInternalIfShared();
	font->kerning = extraKerning;
}

Font Font::boldened() const             { return withStyle (font->styleFlags | bold); }
Font Font::italicised() const           { return withStyle (font->styleFlags | italic); }

bool Font::isBold() const noexcept      { return (font->styleFlags & bold) != 0; }
bool Font::isItalic() const noexcept    { return (font->styleFlags & italic) != 0; }

void Font::setBold (const bool shouldBeBold)
{
	setStyleFlags (shouldBeBold ? (font->styleFlags | bold)
								: (font->styleFlags & ~bold));
}

void Font::setItalic (const bool shouldBeItalic)
{
	setStyleFlags (shouldBeItalic ? (font->styleFlags | italic)
								  : (font->styleFlags & ~italic));
}

void Font::setUnderline (const bool shouldBeUnderlined)
{
	setStyleFlags (shouldBeUnderlined ? (font->styleFlags | underlined)
									  : (font->styleFlags & ~underlined));
}

bool Font::isUnderlined() const noexcept
{
	return (font->styleFlags & underlined) != 0;
}

float Font::getAscent() const
{
	if (font->ascent == 0)
		font->ascent = getTypeface()->getAscent();

	return font->height * font->ascent;
}

float Font::getDescent() const
{
	return font->height - getAscent();
}

int Font::getStringWidth (const String& text) const
{
	return roundToInt (getStringWidthFloat (text));
}

float Font::getStringWidthFloat (const String& text) const
{
	float w = getTypeface()->getStringWidth (text);

	if (font->kerning != 0)
		w += font->kerning * text.length();

	return w * font->height * font->horizontalScale;
}

void Font::getGlyphPositions (const String& text, Array <int>& glyphs, Array <float>& xOffsets) const
{
	getTypeface()->getGlyphPositions (text, glyphs, xOffsets);

	const int num = xOffsets.size();

	if (num > 0)
	{
		const float scale = font->height * font->horizontalScale;
		float* const x = xOffsets.getRawDataPointer();

		if (font->kerning != 0)
		{
			for (int i = 0; i < num; ++i)
				x[i] = (x[i] + i * font->kerning) * scale;
		}
		else
		{
			for (int i = 0; i < num; ++i)
				x[i] *= scale;
		}
	}
}

void Font::findFonts (Array<Font>& destArray)
{
	const StringArray names (findAllTypefaceNames());

	for (int i = 0; i < names.size(); ++i)
		destArray.add (Font (names[i], FontValues::defaultFontHeight, Font::plain));
}

String Font::toString() const
{
	String s (getTypefaceName());

	if (s == getDefaultSansSerifFontName())
		s = String::empty;
	else
		s += "; ";

	s += String (getHeight(), 1);

	if (isBold())      s += " bold";
	if (isItalic())    s += " italic";

	return s;
}

Font Font::fromString (const String& fontDescription)
{
	const int separator = fontDescription.indexOfChar (';');
	String name;

	if (separator > 0)
		name = fontDescription.substring (0, separator).trim();

	if (name.isEmpty())
		name = getDefaultSansSerifFontName();

	String sizeAndStyle (fontDescription.substring (separator + 1));

	float height = sizeAndStyle.getFloatValue();
	if (height <= 0)
		height = 10.0f;

	int flags = Font::plain;
	if (sizeAndStyle.containsIgnoreCase ("bold"))       flags |= Font::bold;
	if (sizeAndStyle.containsIgnoreCase ("italic"))     flags |= Font::italic;

	return Font (name, height, flags);
}

/*** End of inlined file: juce_Font.cpp ***/


/*** Start of inlined file: juce_GlyphArrangement.cpp ***/
PositionedGlyph::PositionedGlyph (const Font& font_, const juce_wchar character_, const int glyph_,
								  const float x_, const float y_, const float w_, const bool whitespace_)
	: font (font_), character (character_), glyph (glyph_),
	  x (x_), y (y_), w (w_), whitespace (whitespace_)
{
}

PositionedGlyph::PositionedGlyph (const PositionedGlyph& other)
	: font (other.font), character (other.character), glyph (other.glyph),
	  x (other.x), y (other.y), w (other.w), whitespace (other.whitespace)
{
}

PositionedGlyph::~PositionedGlyph() {}

PositionedGlyph& PositionedGlyph::operator= (const PositionedGlyph& other)
{
	font = other.font;
	character = other.character;
	glyph = other.glyph;
	x = other.x;
	y = other.y;
	w = other.w;
	whitespace = other.whitespace;
	return *this;
}

void PositionedGlyph::draw (const Graphics& g) const
{
	if (! isWhitespace())
	{
		LowLevelGraphicsContext* const context = g.getInternalContext();
		context->setFont (font);
		context->drawGlyph (glyph, AffineTransform::translation (x, y));
	}
}

void PositionedGlyph::draw (const Graphics& g,
							const AffineTransform& transform) const
{
	if (! isWhitespace())
	{
		LowLevelGraphicsContext* const context = g.getInternalContext();
		context->setFont (font);
		context->drawGlyph (glyph, AffineTransform::translation (x, y)
												   .followedBy (transform));
	}
}

void PositionedGlyph::createPath (Path& path) const
{
	if (! isWhitespace())
	{
		Typeface* const t = font.getTypeface();

		if (t != nullptr)
		{
			Path p;
			t->getOutlineForGlyph (glyph, p);

			path.addPath (p, AffineTransform::scale (font.getHeight() * font.getHorizontalScale(), font.getHeight())
											 .translated (x, y));
		}
	}
}

bool PositionedGlyph::hitTest (float px, float py) const
{
	if (getBounds().contains (px, py) && ! isWhitespace())
	{
		Typeface* const t = font.getTypeface();

		if (t != nullptr)
		{
			Path p;
			t->getOutlineForGlyph (glyph, p);

			AffineTransform::translation (-x, -y)
							.scaled (1.0f / (font.getHeight() * font.getHorizontalScale()), 1.0f / font.getHeight())
							.transformPoint (px, py);

			return p.contains (px, py);
		}
	}

	return false;
}

void PositionedGlyph::moveBy (const float deltaX,
							  const float deltaY)
{
	x += deltaX;
	y += deltaY;
}

GlyphArrangement::GlyphArrangement()
{
	glyphs.ensureStorageAllocated (128);
}

GlyphArrangement::GlyphArrangement (const GlyphArrangement& other)
{
	addGlyphArrangement (other);
}

GlyphArrangement& GlyphArrangement::operator= (const GlyphArrangement& other)
{
	if (this != &other)
	{
		clear();
		addGlyphArrangement (other);
	}

	return *this;
}

GlyphArrangement::~GlyphArrangement()
{
}

void GlyphArrangement::clear()
{
	glyphs.clear();
}

PositionedGlyph& GlyphArrangement::getGlyph (const int index) const
{
	jassert (isPositiveAndBelow (index, glyphs.size()));

	return *glyphs [index];
}

void GlyphArrangement::addGlyphArrangement (const GlyphArrangement& other)
{
	glyphs.ensureStorageAllocated (glyphs.size() + other.glyphs.size());
	glyphs.addCopiesOf (other.glyphs);
}

void GlyphArrangement::addGlyph (const PositionedGlyph& glyph)
{
	glyphs.add (new PositionedGlyph (glyph));
}

void GlyphArrangement::removeRangeOfGlyphs (int startIndex, const int num)
{
	glyphs.removeRange (startIndex, num < 0 ? glyphs.size() : num);
}

void GlyphArrangement::addLineOfText (const Font& font,
									  const String& text,
									  const float xOffset,
									  const float yOffset)
{
	addCurtailedLineOfText (font, text,
							xOffset, yOffset,
							1.0e10f, false);
}

void GlyphArrangement::addCurtailedLineOfText (const Font& font,
											   const String& text,
											   const float xOffset,
											   const float yOffset,
											   const float maxWidthPixels,
											   const bool useEllipsis)
{
	if (text.isNotEmpty())
	{
		Array <int> newGlyphs;
		Array <float> xOffsets;
		font.getGlyphPositions (text, newGlyphs, xOffsets);
		const int textLen = newGlyphs.size();
		glyphs.ensureStorageAllocated (glyphs.size() + textLen);

		String::CharPointerType t (text.getCharPointer());

		for (int i = 0; i < textLen; ++i)
		{
			const float thisX = xOffsets.getUnchecked (i);
			const float nextX = xOffsets.getUnchecked (i + 1);

			if (nextX > maxWidthPixels + 1.0f)
			{
				// curtail the string if it's too wide..
				if (useEllipsis && textLen > 3 && glyphs.size() >= 3)
					insertEllipsis (font, xOffset + maxWidthPixels, 0, glyphs.size());

				break;
			}
			else
			{
				const bool isWhitespace = t.isWhitespace();

				glyphs.add (new PositionedGlyph (font, t.getAndAdvance(),
												 newGlyphs.getUnchecked(i),
												 xOffset + thisX, yOffset,
												 nextX - thisX, isWhitespace));
			}
		}
	}
}

int GlyphArrangement::insertEllipsis (const Font& font, const float maxXPos,
									  const int startIndex, int endIndex)
{
	int numDeleted = 0;

	if (glyphs.size() > 0)
	{
		Array<int> dotGlyphs;
		Array<float> dotXs;
		font.getGlyphPositions ("..", dotGlyphs, dotXs);

		const float dx = dotXs[1];
		float xOffset = 0.0f, yOffset = 0.0f;

		while (endIndex > startIndex)
		{
			const PositionedGlyph* pg = glyphs.getUnchecked (--endIndex);
			xOffset = pg->x;
			yOffset = pg->y;

			glyphs.remove (endIndex);
			++numDeleted;

			if (xOffset + dx * 3 <= maxXPos)
				break;
		}

		for (int i = 3; --i >= 0;)
		{
			glyphs.insert (endIndex++, new PositionedGlyph (font, '.', dotGlyphs.getFirst(),
															xOffset, yOffset, dx, false));
			--numDeleted;
			xOffset += dx;

			if (xOffset > maxXPos)
				break;
		}
	}

	return numDeleted;
}

void GlyphArrangement::addJustifiedText (const Font& font,
										 const String& text,
										 float x, float y,
										 const float maxLineWidth,
										 const Justification& horizontalLayout)
{
	int lineStartIndex = glyphs.size();
	addLineOfText (font, text, x, y);

	const float originalY = y;

	while (lineStartIndex < glyphs.size())
	{
		int i = lineStartIndex;

		if (glyphs.getUnchecked(i)->getCharacter() != '\n'
			  && glyphs.getUnchecked(i)->getCharacter() != '\r')
			++i;

		const float lineMaxX = glyphs.getUnchecked (lineStartIndex)->getLeft() + maxLineWidth;
		int lastWordBreakIndex = -1;

		while (i < glyphs.size())
		{
			const PositionedGlyph* pg = glyphs.getUnchecked (i);
			const juce_wchar c = pg->getCharacter();

			if (c == '\r' || c == '\n')
			{
				++i;

				if (c == '\r' && i < glyphs.size()
					 && glyphs.getUnchecked(i)->getCharacter() == '\n')
					++i;

				break;
			}
			else if (pg->isWhitespace())
			{
				lastWordBreakIndex = i + 1;
			}
			else if (pg->getRight() - 0.0001f >= lineMaxX)
			{
				if (lastWordBreakIndex >= 0)
					i = lastWordBreakIndex;

				break;
			}

			++i;
		}

		const float currentLineStartX = glyphs.getUnchecked (lineStartIndex)->getLeft();
		float currentLineEndX = currentLineStartX;

		for (int j = i; --j >= lineStartIndex;)
		{
			if (! glyphs.getUnchecked (j)->isWhitespace())
			{
				currentLineEndX = glyphs.getUnchecked (j)->getRight();
				break;
			}
		}

		float deltaX = 0.0f;

		if (horizontalLayout.testFlags (Justification::horizontallyJustified))
			spreadOutLine (lineStartIndex, i - lineStartIndex, maxLineWidth);
		else if (horizontalLayout.testFlags (Justification::horizontallyCentred))
			deltaX = (maxLineWidth - (currentLineEndX - currentLineStartX)) * 0.5f;
		else if (horizontalLayout.testFlags (Justification::right))
			deltaX = maxLineWidth - (currentLineEndX - currentLineStartX);

		moveRangeOfGlyphs (lineStartIndex, i - lineStartIndex,
						   x + deltaX - currentLineStartX, y - originalY);

		lineStartIndex = i;

		y += font.getHeight();
	}
}

void GlyphArrangement::addFittedText (const Font& f,
									  const String& text,
									  const float x, const float y,
									  const float width, const float height,
									  const Justification& layout,
									  int maximumLines,
									  const float minimumHorizontalScale)
{
	// doesn't make much sense if this is outside a sensible range of 0.5 to 1.0
	jassert (minimumHorizontalScale > 0 && minimumHorizontalScale <= 1.0f);

	if (text.containsAnyOf ("\r\n"))
	{
		GlyphArrangement ga;
		ga.addJustifiedText (f, text, x, y, width, layout);

		const Rectangle<float> bb (ga.getBoundingBox (0, -1, false));

		float dy = y - bb.getY();

		if (layout.testFlags (Justification::verticallyCentred))
			dy += (height - bb.getHeight()) * 0.5f;
		else if (layout.testFlags (Justification::bottom))
			dy += height - bb.getHeight();

		ga.moveRangeOfGlyphs (0, -1, 0.0f, dy);

		glyphs.ensureStorageAllocated (glyphs.size() + ga.glyphs.size());

		for (int i = 0; i < ga.glyphs.size(); ++i)
			glyphs.add (ga.glyphs.getUnchecked (i));

		ga.glyphs.clear (false);
		return;
	}

	int startIndex = glyphs.size();
	addLineOfText (f, text.trim(), x, y);

	if (glyphs.size() > startIndex)
	{
		float lineWidth = glyphs.getUnchecked (glyphs.size() - 1)->getRight()
							- glyphs.getUnchecked (startIndex)->getLeft();

		if (lineWidth <= 0)
			return;

		if (lineWidth * minimumHorizontalScale < width)
		{
			if (lineWidth > width)
				stretchRangeOfGlyphs (startIndex, glyphs.size() - startIndex,
									  width / lineWidth);

			justifyGlyphs (startIndex, glyphs.size() - startIndex,
						   x, y, width, height, layout);
		}
		else if (maximumLines <= 1)
		{
			fitLineIntoSpace (startIndex, glyphs.size() - startIndex,
							  x, y, width, height, f, layout, minimumHorizontalScale);
		}
		else
		{
			Font font (f);
			String txt (text.trim());
			const int length = txt.length();
			const int originalStartIndex = startIndex;
			int numLines = 1;

			if (length <= 12 && ! txt.containsAnyOf (" -\t\r\n"))
				maximumLines = 1;

			maximumLines = jmin (maximumLines, length);

			while (numLines < maximumLines)
			{
				++numLines;

				const float newFontHeight = height / (float) numLines;

				if (newFontHeight < font.getHeight())
				{
					font.setHeight (jmax (8.0f, newFontHeight));

					removeRangeOfGlyphs (startIndex, -1);
					addLineOfText (font, txt, x, y);

					lineWidth = glyphs.getUnchecked (glyphs.size() - 1)->getRight()
									- glyphs.getUnchecked (startIndex)->getLeft();
				}

				if (numLines > lineWidth / width || newFontHeight < 8.0f)
					break;
			}

			if (numLines < 1)
				numLines = 1;

			float lineY = y;
			float widthPerLine = lineWidth / numLines;
			int lastLineStartIndex = 0;

			for (int line = 0; line < numLines; ++line)
			{
				int i = startIndex;
				lastLineStartIndex = i;
				float lineStartX = glyphs.getUnchecked (startIndex)->getLeft();

				if (line == numLines - 1)
				{
					widthPerLine = width;
					i = glyphs.size();
				}
				else
				{
					while (i < glyphs.size())
					{
						lineWidth = (glyphs.getUnchecked (i)->getRight() - lineStartX);

						if (lineWidth > widthPerLine)
						{
							// got to a point where the line's too long, so skip forward to find a
							// good place to break it..
							const int searchStartIndex = i;

							while (i < glyphs.size())
							{
								if ((glyphs.getUnchecked (i)->getRight() - lineStartX) * minimumHorizontalScale < width)
								{
									if (glyphs.getUnchecked (i)->isWhitespace()
										 || glyphs.getUnchecked (i)->getCharacter() == '-')
									{
										++i;
										break;
									}
								}
								else
								{
									// can't find a suitable break, so try looking backwards..
									i = searchStartIndex;

									for (int back = 1; back < jmin (5, i - startIndex - 1); ++back)
									{
										if (glyphs.getUnchecked (i - back)->isWhitespace()
											 || glyphs.getUnchecked (i - back)->getCharacter() == '-')
										{
											i -= back - 1;
											break;
										}
									}

									break;
								}

								++i;
							}

							break;
						}

						++i;
					}

					int wsStart = i;
					while (wsStart > 0 && glyphs.getUnchecked (wsStart - 1)->isWhitespace())
						--wsStart;

					int wsEnd = i;

					while (wsEnd < glyphs.size() && glyphs.getUnchecked (wsEnd)->isWhitespace())
						++wsEnd;

					removeRangeOfGlyphs (wsStart, wsEnd - wsStart);
					i = jmax (wsStart, startIndex + 1);
				}

				i -= fitLineIntoSpace (startIndex, i - startIndex,
									   x, lineY, width, font.getHeight(), font,
									   layout.getOnlyHorizontalFlags() | Justification::verticallyCentred,
									   minimumHorizontalScale);

				startIndex = i;
				lineY += font.getHeight();

				if (startIndex >= glyphs.size())
					break;
			}

			justifyGlyphs (originalStartIndex, glyphs.size() - originalStartIndex,
						   x, y, width, height, layout.getFlags() & ~Justification::horizontallyJustified);
		}
	}
}

void GlyphArrangement::moveRangeOfGlyphs (int startIndex, int num,
										  const float dx, const float dy)
{
	jassert (startIndex >= 0);

	if (dx != 0.0f || dy != 0.0f)
	{
		if (num < 0 || startIndex + num > glyphs.size())
			num = glyphs.size() - startIndex;

		while (--num >= 0)
			glyphs.getUnchecked (startIndex++)->moveBy (dx, dy);
	}
}

int GlyphArrangement::fitLineIntoSpace (int start, int numGlyphs, float x, float y, float w, float h, const Font& font,
										const Justification& justification, float minimumHorizontalScale)
{
	int numDeleted = 0;
	const float lineStartX = glyphs.getUnchecked (start)->getLeft();
	float lineWidth = glyphs.getUnchecked (start + numGlyphs - 1)->getRight() - lineStartX;

	if (lineWidth > w)
	{
		if (minimumHorizontalScale < 1.0f)
		{
			stretchRangeOfGlyphs (start, numGlyphs, jmax (minimumHorizontalScale, w / lineWidth));
			lineWidth = glyphs.getUnchecked (start + numGlyphs - 1)->getRight() - lineStartX - 0.5f;
		}

		if (lineWidth > w)
		{
			numDeleted = insertEllipsis (font, lineStartX + w, start, start + numGlyphs);
			numGlyphs -= numDeleted;
		}
	}

	justifyGlyphs (start, numGlyphs, x, y, w, h, justification);
	return numDeleted;
}

void GlyphArrangement::stretchRangeOfGlyphs (int startIndex, int num,
											 const float horizontalScaleFactor)
{
	jassert (startIndex >= 0);

	if (num < 0 || startIndex + num > glyphs.size())
		num = glyphs.size() - startIndex;

	if (num > 0)
	{
		const float xAnchor = glyphs.getUnchecked (startIndex)->getLeft();

		while (--num >= 0)
		{
			PositionedGlyph* const pg = glyphs.getUnchecked (startIndex++);

			pg->x = xAnchor + (pg->x - xAnchor) * horizontalScaleFactor;
			pg->font.setHorizontalScale (pg->font.getHorizontalScale() * horizontalScaleFactor);
			pg->w *= horizontalScaleFactor;
		}
	}
}

Rectangle<float> GlyphArrangement::getBoundingBox (int startIndex, int num, const bool includeWhitespace) const
{
	jassert (startIndex >= 0);

	if (num < 0 || startIndex + num > glyphs.size())
		num = glyphs.size() - startIndex;

	Rectangle<float> result;

	while (--num >= 0)
	{
		const PositionedGlyph* const pg = glyphs.getUnchecked (startIndex++);

		if (includeWhitespace || ! pg->isWhitespace())
			result = result.getUnion (pg->getBounds());
	}

	return result;
}

void GlyphArrangement::justifyGlyphs (const int startIndex, const int num,
									  const float x, const float y, const float width, const float height,
									  const Justification& justification)
{
	jassert (num >= 0 && startIndex >= 0);

	if (glyphs.size() > 0 && num > 0)
	{
		const Rectangle<float> bb (getBoundingBox (startIndex, num, ! justification.testFlags (Justification::horizontallyJustified
																								| Justification::horizontallyCentred)));
		float deltaX = 0.0f;

		if (justification.testFlags (Justification::horizontallyJustified))
			deltaX = x - bb.getX();
		else if (justification.testFlags (Justification::horizontallyCentred))
			deltaX = x + (width - bb.getWidth()) * 0.5f - bb.getX();
		else if (justification.testFlags (Justification::right))
			deltaX = (x + width) - bb.getRight();
		else
			deltaX = x - bb.getX();

		float deltaY = 0.0f;

		if (justification.testFlags (Justification::top))
			deltaY = y - bb.getY();
		else if (justification.testFlags (Justification::bottom))
			deltaY = (y + height) - bb.getBottom();
		else
			deltaY = y + (height - bb.getHeight()) * 0.5f - bb.getY();

		moveRangeOfGlyphs (startIndex, num, deltaX, deltaY);

		if (justification.testFlags (Justification::horizontallyJustified))
		{
			int lineStart = 0;
			float baseY = glyphs.getUnchecked (startIndex)->getBaselineY();

			int i;
			for (i = 0; i < num; ++i)
			{
				const float glyphY = glyphs.getUnchecked (startIndex + i)->getBaselineY();

				if (glyphY != baseY)
				{
					spreadOutLine (startIndex + lineStart, i - lineStart, width);

					lineStart = i;
					baseY = glyphY;
				}
			}

			if (i > lineStart)
				spreadOutLine (startIndex + lineStart, i - lineStart, width);
		}
	}
}

void GlyphArrangement::spreadOutLine (const int start, const int num, const float targetWidth)
{
	if (start + num < glyphs.size()
		 && glyphs.getUnchecked (start + num - 1)->getCharacter() != '\r'
		 && glyphs.getUnchecked (start + num - 1)->getCharacter() != '\n')
	{
		int numSpaces = 0;
		int spacesAtEnd = 0;

		for (int i = 0; i < num; ++i)
		{
			if (glyphs.getUnchecked (start + i)->isWhitespace())
			{
				++spacesAtEnd;
				++numSpaces;
			}
			else
			{
				spacesAtEnd = 0;
			}
		}

		numSpaces -= spacesAtEnd;

		if (numSpaces > 0)
		{
			const float startX = glyphs.getUnchecked (start)->getLeft();
			const float endX = glyphs.getUnchecked (start + num - 1 - spacesAtEnd)->getRight();

			const float extraPaddingBetweenWords
				= (targetWidth - (endX - startX)) / (float) numSpaces;

			float deltaX = 0.0f;

			for (int i = 0; i < num; ++i)
			{
				glyphs.getUnchecked (start + i)->moveBy (deltaX, 0.0f);

				if (glyphs.getUnchecked (start + i)->isWhitespace())
					deltaX += extraPaddingBetweenWords;
			}
		}
	}
}

void GlyphArrangement::draw (const Graphics& g) const
{
	for (int i = 0; i < glyphs.size(); ++i)
	{
		const PositionedGlyph* const pg = glyphs.getUnchecked(i);

		if (pg->font.isUnderlined())
		{
			const float lineThickness = (pg->font.getDescent()) * 0.3f;

			float nextX = pg->x + pg->w;

			if (i < glyphs.size() - 1 && glyphs.getUnchecked (i + 1)->y == pg->y)
				nextX = glyphs.getUnchecked (i + 1)->x;

			g.fillRect (pg->x, pg->y + lineThickness * 2.0f,
						nextX - pg->x, lineThickness);
		}

		pg->draw (g);
	}
}

void GlyphArrangement::draw (const Graphics& g, const AffineTransform& transform) const
{
	for (int i = 0; i < glyphs.size(); ++i)
	{
		const PositionedGlyph* const pg = glyphs.getUnchecked(i);

		if (pg->font.isUnderlined())
		{
			const float lineThickness = (pg->font.getDescent()) * 0.3f;

			float nextX = pg->x + pg->w;

			if (i < glyphs.size() - 1 && glyphs.getUnchecked (i + 1)->y == pg->y)
				nextX = glyphs.getUnchecked (i + 1)->x;

			Path p;
			p.addLineSegment (Line<float> (pg->x, pg->y + lineThickness * 2.0f,
										   nextX, pg->y + lineThickness * 2.0f),
							  lineThickness);

			g.fillPath (p, transform);
		}

		pg->draw (g, transform);
	}
}

void GlyphArrangement::createPath (Path& path) const
{
	for (int i = 0; i < glyphs.size(); ++i)
		glyphs.getUnchecked (i)->createPath (path);
}

int GlyphArrangement::findGlyphIndexAt (float x, float y) const
{
	for (int i = 0; i < glyphs.size(); ++i)
		if (glyphs.getUnchecked (i)->hitTest (x, y))
			return i;

	return -1;
}

/*** End of inlined file: juce_GlyphArrangement.cpp ***/


/*** Start of inlined file: juce_TextLayout.cpp ***/
TextLayout::Glyph::Glyph (const int glyphCode_, const Point<float>& anchor_, float width_) noexcept
	: glyphCode (glyphCode_), anchor (anchor_), width (width_)
{
}

TextLayout::Glyph::Glyph (const Glyph& other) noexcept
	: glyphCode (other.glyphCode), anchor (other.anchor), width (other.width)
{
}

TextLayout::Glyph& TextLayout::Glyph::operator= (const Glyph& other) noexcept
{
	glyphCode = other.glyphCode;
	anchor = other.anchor;
	width = other.width;
	return *this;
}

TextLayout::Glyph::~Glyph() noexcept {}

TextLayout::Run::Run() noexcept
	: colour (0xff000000)
{
}

TextLayout::Run::Run (const Range<int>& range, const int numGlyphsToPreallocate)
	: colour (0xff000000), stringRange (range)
{
	glyphs.ensureStorageAllocated (numGlyphsToPreallocate);
}

TextLayout::Run::Run (const Run& other)
	: font (other.font),
	  colour (other.colour),
	  glyphs (other.glyphs),
	  stringRange (other.stringRange)
{
}

TextLayout::Run::~Run() noexcept {}

TextLayout::Line::Line() noexcept
	: ascent (0.0f), descent (0.0f), leading (0.0f)
{
}

TextLayout::Line::Line (const Range<int>& stringRange_, const Point<float>& lineOrigin_,
						const float ascent_, const float descent_, const float leading_,
						const int numRunsToPreallocate)
	: stringRange (stringRange_), lineOrigin (lineOrigin_),
	  ascent (ascent_), descent (descent_), leading (leading_)
{
	runs.ensureStorageAllocated (numRunsToPreallocate);
}

TextLayout::Line::Line (const Line& other)
	: stringRange (other.stringRange), lineOrigin (other.lineOrigin),
	  ascent (other.ascent), descent (other.descent), leading (other.leading)
{
	runs.addCopiesOf (other.runs);
}

TextLayout::Line::~Line() noexcept
{
}

Range<float> TextLayout::Line::getLineBoundsX() const noexcept
{
	Range<float> range;
	bool isFirst = true;

	for (int i = runs.size(); --i >= 0;)
	{
		const Run* run = runs.getUnchecked(i);
		jassert (run != nullptr);

		if (run->glyphs.size() > 0)
		{
			float minX = run->glyphs.getReference(0).anchor.x;
			float maxX = minX;

			for (int j = run->glyphs.size(); --j > 0;)
			{
				const Glyph& glyph = run->glyphs.getReference (j);
				const float x = glyph.anchor.x;
				minX = jmin (minX, x);
				maxX = jmax (maxX, x + glyph.width);
			}

			if (isFirst)
			{
				isFirst = false;
				range = Range<float> (minX, maxX);
			}
			else
			{
				range = range.getUnionWith (Range<float> (minX, maxX));
			}
		}
	}

	return range + lineOrigin.x;
}

TextLayout::TextLayout()
	: width (0), justification (Justification::topLeft)
{
}

TextLayout::TextLayout (const TextLayout& other)
	: width (other.width),
	  justification (other.justification)
{
	lines.addCopiesOf (other.lines);
}

#if JUCE_COMPILER_SUPPORTS_MOVE_SEMANTICS
TextLayout::TextLayout (TextLayout&& other) noexcept
	: lines (static_cast <OwnedArray<Line>&&> (other.lines)),
	  width (other.width),
	  justification (other.justification)
{
}

TextLayout& TextLayout::operator= (TextLayout&& other) noexcept
{
	lines = static_cast <OwnedArray<Line>&&> (other.lines);
	width = other.width;
	justification = other.justification;
	return *this;
}
#endif

TextLayout& TextLayout::operator= (const TextLayout& other)
{
	width = other.width;
	justification = other.justification;
	lines.clear();
	lines.addCopiesOf (other.lines);
	return *this;
}

TextLayout::~TextLayout()
{
}

float TextLayout::getHeight() const noexcept
{
	const Line* const lastLine = lines.getLast();

	return lastLine != nullptr ? lastLine->lineOrigin.y + lastLine->descent
							   : 0;
}

TextLayout::Line& TextLayout::getLine (const int index) const
{
	return *lines[index];
}

void TextLayout::ensureStorageAllocated (int numLinesNeeded)
{
	lines.ensureStorageAllocated (numLinesNeeded);
}

void TextLayout::addLine (Line* line)
{
	lines.add (line);
}

void TextLayout::draw (Graphics& g, const Rectangle<float>& area) const
{
	const Point<float> origin (justification.appliedToRectangle (Rectangle<float> (0, 0, width, getHeight()), area).getPosition());

	LowLevelGraphicsContext& context = *g.getInternalContext();

	for (int i = 0; i < getNumLines(); ++i)
	{
		const Line& line = getLine (i);
		const Point<float> lineOrigin (origin + line.lineOrigin);

		for (int j = 0; j < line.runs.size(); ++j)
		{
			const Run* const run = line.runs.getUnchecked (j);
			jassert (run != nullptr);
			context.setFont (run->font);
			context.setFill (run->colour);

			for (int k = 0; k < run->glyphs.size(); ++k)
			{
				const Glyph& glyph = run->glyphs.getReference (k);
				context.drawGlyph (glyph.glyphCode, AffineTransform::translation (lineOrigin.x + glyph.anchor.x,
																				  lineOrigin.y + glyph.anchor.y));
			}
		}
	}
}

void TextLayout::createLayout (const AttributedString& text, float maxWidth)
{
	lines.clear();
	width = maxWidth;
	justification = text.getJustification();

	if (! createNativeLayout (text))
		createStandardLayout (text);

	recalculateWidth();
}

namespace TextLayoutHelpers
{
	struct FontAndColour
	{
		FontAndColour (const Font* font_) noexcept   : font (font_), colour (0xff000000) {}

		const Font* font;
		Colour colour;

		bool operator!= (const FontAndColour& other) const noexcept
		{
			return (font != other.font && *font != *other.font) || colour != other.colour;
		}
	};

	struct RunAttribute
	{
		RunAttribute (const FontAndColour& fontAndColour_, const Range<int>& range_) noexcept
			: fontAndColour (fontAndColour_), range (range_)
		{}

		FontAndColour fontAndColour;
		Range<int> range;
	};

	struct Token
	{
		Token (const String& t, const Font& f, const Colour& c, const bool isWhitespace_)
			: text (t), font (f), colour (c),
			  area (font.getStringWidth (t), roundToInt (f.getHeight())),
			  isWhitespace (isWhitespace_),
			  isNewLine (t.containsChar ('\n') || t.containsChar ('\r'))
		{}

		const String text;
		const Font font;
		const Colour colour;
		Rectangle<int> area;
		int line, lineHeight;
		const bool isWhitespace, isNewLine;

	private:
		Token& operator= (const Token&);
	};

	class TokenList
	{
	public:
		TokenList() noexcept  : totalLines (0) {}

		void createLayout (const AttributedString& text, TextLayout& layout)
		{
			tokens.ensureStorageAllocated (64);
			layout.ensureStorageAllocated (totalLines);

			addTextRuns (text);

			layoutRuns ((int) layout.getWidth());

			int charPosition = 0;
			int lineStartPosition = 0;
			int runStartPosition = 0;

			ScopedPointer<TextLayout::Line> currentLine;
			ScopedPointer<TextLayout::Run> currentRun;

			bool needToSetLineOrigin = true;

			for (int i = 0; i < tokens.size(); ++i)
			{
				const Token* const t = tokens.getUnchecked (i);
				const Point<float> tokenPos (t->area.getPosition().toFloat());

				Array <int> newGlyphs;
				Array <float> xOffsets;
				t->font.getGlyphPositions (t->text.trimEnd(), newGlyphs, xOffsets);

				if (currentRun == nullptr)  currentRun  = new TextLayout::Run();
				if (currentLine == nullptr) currentLine = new TextLayout::Line();

				currentRun->glyphs.ensureStorageAllocated (currentRun->glyphs.size() + newGlyphs.size());

				for (int j = 0; j < newGlyphs.size(); ++j)
				{
					if (needToSetLineOrigin)
					{
						needToSetLineOrigin = false;
						currentLine->lineOrigin = tokenPos.translated (0, t->font.getAscent());
					}

					const float x = xOffsets.getUnchecked (j);
					currentRun->glyphs.add (TextLayout::Glyph (newGlyphs.getUnchecked(j),
															   Point<float> (tokenPos.getX() + x, 0),
															   xOffsets.getUnchecked (j + 1) - x));
					++charPosition;
				}

				if (t->isWhitespace || t->isNewLine)
					++charPosition;

				const Token* const nextToken = tokens [i + 1];

				if (nextToken == nullptr) // this is the last token
				{
					addRun (currentLine, currentRun.release(), t, runStartPosition, charPosition);
					currentLine->stringRange = Range<int> (lineStartPosition, charPosition);
					layout.addLine (currentLine.release());
				}
				else
				{
					if (t->font != nextToken->font || t->colour != nextToken->colour)
					{
						addRun (currentLine, currentRun.release(), t, runStartPosition, charPosition);
						runStartPosition = charPosition;
					}

					if (t->line != nextToken->line)
					{
						if (currentRun == nullptr)
							currentRun = new TextLayout::Run();

						addRun (currentLine, currentRun.release(), t, runStartPosition, charPosition);
						currentLine->stringRange = Range<int> (lineStartPosition, charPosition);
						layout.addLine (currentLine.release());

						runStartPosition = charPosition;
						lineStartPosition = charPosition;
						needToSetLineOrigin = true;
					}
				}
			}

			if ((text.getJustification().getFlags() & (Justification::right | Justification::horizontallyCentred)) != 0)
			{
				const int totalW = (int) layout.getWidth();
				const bool isCentred = (text.getJustification().getFlags() & Justification::horizontallyCentred) != 0;

				for (int i = 0; i < layout.getNumLines(); ++i)
				{
					float dx = (float) (totalW - getLineWidth (i));

					if (isCentred)
						dx /= 2.0f;

					layout.getLine(i).lineOrigin.x += dx;
				}
			}
		}

	private:
		static void addRun (TextLayout::Line* glyphLine, TextLayout::Run* glyphRun,
							const Token* const t, const int start, const int end)
		{
			glyphRun->stringRange = Range<int> (start, end);
			glyphRun->font = t->font;
			glyphRun->colour = t->colour;
			glyphLine->ascent = jmax (glyphLine->ascent, t->font.getAscent());
			glyphLine->descent = jmax (glyphLine->descent, t->font.getDescent());
			glyphLine->runs.add (glyphRun);
		}

		static int getCharacterType (const juce_wchar c) noexcept
		{
			if (c == '\r' || c == '\n')
				return 0;

			return CharacterFunctions::isWhitespace (c) ? 2 : 1;
		}

		void appendText (const AttributedString& text, const Range<int>& stringRange,
						 const Font& font, const Colour& colour)
		{
			const String stringText (text.getText().substring (stringRange.getStart(), stringRange.getEnd()));
			String::CharPointerType t (stringText.getCharPointer());
			String currentString;
			int lastCharType = 0;

			for (;;)
			{
				const juce_wchar c = t.getAndAdvance();
				if (c == 0)
					break;

				const int charType = getCharacterType (c);

				if (charType == 0 || charType != lastCharType)
				{
					if (currentString.isNotEmpty())
						tokens.add (new Token (currentString, font, colour,
											   lastCharType == 2 || lastCharType == 0));

					currentString = String::charToString (c);

					if (c == '\r' && *t == '\n')
						currentString += t.getAndAdvance();
				}
				else
				{
					currentString += c;
				}

				lastCharType = charType;
			}

			if (currentString.isNotEmpty())
				tokens.add (new Token (currentString, font, colour, lastCharType == 2));
		}

		void layoutRuns (const int maxWidth)
		{
			int x = 0, y = 0, h = 0;
			int i;

			for (i = 0; i < tokens.size(); ++i)
			{
				Token* const t = tokens.getUnchecked(i);
				t->area.setPosition (x, y);
				t->line = totalLines;
				x += t->area.getWidth();
				h = jmax (h, t->area.getHeight());

				const Token* const nextTok = tokens[i + 1];

				if (nextTok == nullptr)
					break;

				if (t->isNewLine || ((! nextTok->isWhitespace) && x + nextTok->area.getWidth() > maxWidth))
				{
					setLastLineHeight (i + 1, h);
					x = 0;
					y += h;
					h = 0;
					++totalLines;
				}
			}

			setLastLineHeight (jmin (i + 1, tokens.size()), h);
			++totalLines;
		}

		void setLastLineHeight (int i, const int height) noexcept
		{
			while (--i >= 0)
			{
				Token* const tok = tokens.getUnchecked (i);

				if (tok->line == totalLines)
					tok->lineHeight = height;
				else
					break;
			}
		}

		int getLineWidth (const int lineNumber) const noexcept
		{
			int maxW = 0;

			for (int i = tokens.size(); --i >= 0;)
			{
				const Token* const t = tokens.getUnchecked (i);

				if (t->line == lineNumber && ! t->isWhitespace)
					maxW = jmax (maxW, t->area.getRight());
			}

			return maxW;
		}

		void addTextRuns (const AttributedString& text)
		{
			Font defaultFont;
			Array<RunAttribute> runAttributes;

			{
				const int stringLength = text.getText().length();
				int rangeStart = 0;
				FontAndColour lastFontAndColour (nullptr);

				// Iterate through every character in the string
				for (int i = 0; i < stringLength; ++i)
				{
					FontAndColour newFontAndColour (&defaultFont);
					const int numCharacterAttributes = text.getNumAttributes();

					for (int j = 0; j < numCharacterAttributes; ++j)
					{
						const AttributedString::Attribute* const attr = text.getAttribute (j);

						// Check if the current character falls within the range of a font attribute
						if (attr->getFont() != nullptr && (i >= attr->range.getStart()) && (i < attr->range.getEnd()))
							newFontAndColour.font = attr->getFont();

						// Check if the current character falls within the range of a foreground colour attribute
						if (attr->getColour() != nullptr && (i >= attr->range.getStart()) && (i < attr->range.getEnd()))
							newFontAndColour.colour = *attr->getColour();
					}

					if (i > 0 && (newFontAndColour != lastFontAndColour || i == stringLength - 1))
					{
						runAttributes.add (RunAttribute (lastFontAndColour,
														 Range<int> (rangeStart, (i < stringLength - 1) ? i : (i + 1))));
						rangeStart = i;
					}

					lastFontAndColour = newFontAndColour;
				}
			}

			for (int i = 0; i < runAttributes.size(); ++i)
			{
				const RunAttribute& r = runAttributes.getReference(i);
				appendText (text, r.range, *(r.fontAndColour.font), r.fontAndColour.colour);
			}
		}

		OwnedArray<Token> tokens;
		int totalLines;

		JUCE_DECLARE_NON_COPYABLE (TokenList);
	};
}

void TextLayout::createLayoutWithBalancedLineLengths (const AttributedString& text, float maxWidth)
{
	const float minimumWidth = maxWidth / 2.0f;
	float bestWidth = maxWidth;
	float bestLineProportion = 0.0f;

	while (maxWidth > minimumWidth)
	{
		createLayout (text, maxWidth);

		if (getNumLines() < 2)
			return;

		const float line1 = lines.getUnchecked (lines.size() - 1)->getLineBoundsX().getLength();
		const float line2 = lines.getUnchecked (lines.size() - 2)->getLineBoundsX().getLength();
		const float shortestLine = jmin (line1, line2);
		const float prop = (shortestLine > 0) ? jmax (line1, line2) / shortestLine : 1.0f;

		if (prop > 0.9f)
			return;

		if (prop > bestLineProportion)
		{
			bestLineProportion = prop;
			bestWidth = maxWidth;
		}

		maxWidth -= 10.0f;
	}

	if (bestWidth != maxWidth)
		createLayout (text, bestWidth);
}

void TextLayout::createStandardLayout (const AttributedString& text)
{
	TextLayoutHelpers::TokenList l;
	l.createLayout (text, *this);
}

void TextLayout::recalculateWidth()
{
	if (lines.size() > 0)
	{
		Range<float> range (lines.getFirst()->getLineBoundsX());

		int i;
		for (i = lines.size(); --i > 0;)
			range = range.getUnionWith (lines.getUnchecked(i)->getLineBoundsX());

		for (i = lines.size(); --i >= 0;)
			lines.getUnchecked(i)->lineOrigin.x -= range.getStart();

		width = range.getLength();
	}
}

/*** End of inlined file: juce_TextLayout.cpp ***/


/*** Start of inlined file: juce_Typeface.cpp ***/
Typeface::Typeface (const String& name_) noexcept
	: name (name_)
{
}

Typeface::~Typeface()
{
}

Typeface::Ptr Typeface::getFallbackTypeface()
{
	const Font fallbackFont (Font::getFallbackFontName(), 10, 0);
	return fallbackFont.getTypeface();
}

EdgeTable* Typeface::getEdgeTableForGlyph (int glyphNumber, const AffineTransform& transform)
{
	Path path;

	if (getOutlineForGlyph (glyphNumber, path) && ! path.isEmpty())
		return new EdgeTable (path.getBoundsTransformed (transform).getSmallestIntegerContainer().expanded (1, 0),
							  path, transform);

	return nullptr;
}

/*** End of inlined file: juce_Typeface.cpp ***/


/*** Start of inlined file: juce_DropShadowEffect.cpp ***/
#if JUCE_MSVC && JUCE_DEBUG
 #pragma optimize ("t", on)
#endif

DropShadowEffect::DropShadowEffect()
  : offsetX (0),
	offsetY (0),
	radius (4),
	opacity (0.6f)
{
}

DropShadowEffect::~DropShadowEffect()
{
}

void DropShadowEffect::setShadowProperties (const float newRadius,
											const float newOpacity,
											const int newShadowOffsetX,
											const int newShadowOffsetY)
{
	radius = jmax (1.1f, newRadius);
	offsetX = newShadowOffsetX;
	offsetY = newShadowOffsetY;
	opacity = newOpacity;
}

void DropShadowEffect::applyEffect (Image& image, Graphics& g, float alpha)
{
	const int w = image.getWidth();
	const int h = image.getHeight();

	Image shadowImage (Image::SingleChannel, w, h, false);

	{
		const Image::BitmapData srcData (image, Image::BitmapData::readOnly);
		const Image::BitmapData destData (shadowImage, Image::BitmapData::readWrite);

		const int filter = roundToInt (63.0f / radius);
		const int radiusMinus1 = roundToInt ((radius - 1.0f) * 63.0f);

		for (int x = w; --x >= 0;)
		{
			int shadowAlpha = 0;

			const PixelARGB* src = ((const PixelARGB*) srcData.data) + x;
			uint8* shadowPix = destData.data + x;

			for (int y = h; --y >= 0;)
			{
				shadowAlpha = ((shadowAlpha * radiusMinus1 + (src->getAlpha() << 6)) * filter) >> 12;

				*shadowPix = (uint8) shadowAlpha;
				src = addBytesToPointer (src, srcData.lineStride);
				shadowPix += destData.lineStride;
			}
		}

		for (int y = h; --y >= 0;)
		{
			int shadowAlpha = 0;
			uint8* shadowPix = destData.getLinePointer (y);

			for (int x = w; --x >= 0;)
			{
				shadowAlpha = ((shadowAlpha * radiusMinus1 + (*shadowPix << 6)) * filter) >> 12;
				*shadowPix++ = (uint8) shadowAlpha;
			}
		}
	}

	g.setColour (Colours::black.withAlpha (opacity * alpha));
	g.drawImageAt (shadowImage, offsetX, offsetY, true);

	g.setOpacity (alpha);
	g.drawImageAt (image, 0, 0);
}

#if JUCE_MSVC && JUCE_DEBUG
  #pragma optimize ("", on)  // resets optimisations to the project defaults
#endif

/*** End of inlined file: juce_DropShadowEffect.cpp ***/


/*** Start of inlined file: juce_GlowEffect.cpp ***/
GlowEffect::GlowEffect()
  : radius (2.0f),
	colour (Colours::white)
{
}

GlowEffect::~GlowEffect()
{
}

void GlowEffect::setGlowProperties (const float newRadius,
									const Colour& newColour)
{
	radius = newRadius;
	colour = newColour;
}

void GlowEffect::applyEffect (Image& image, Graphics& g, float alpha)
{
	Image temp (image.getFormat(), image.getWidth(), image.getHeight(), true);

	ImageConvolutionKernel blurKernel (roundToInt (radius * 2.0f));

	blurKernel.createGaussianBlur (radius);
	blurKernel.rescaleAllValues (radius);

	blurKernel.applyToImage (temp, image, image.getBounds());

	g.setColour (colour.withMultipliedAlpha (alpha));
	g.drawImageAt (temp, 0, 0, true);

	g.setOpacity (alpha);
	g.drawImageAt (image, 0, 0, false);
}

/*** End of inlined file: juce_GlowEffect.cpp ***/

// END_AUTOINCLUDE

#if JUCE_MAC || JUCE_IOS

/*** Start of inlined file: juce_osx_ObjCHelpers.h ***/
#ifndef __JUCE_OSX_OBJCHELPERS_JUCEHEADER__
#define __JUCE_OSX_OBJCHELPERS_JUCEHEADER__

/* This file contains a few helper functions that are used internally but which
   need to be kept away from the public headers because they use obj-C symbols.
*/
namespace
{

	String nsStringToJuce (NSString* s)
	{
		return CharPointer_UTF8 ([s UTF8String]);
	}

	NSString* juceStringToNS (const String& s)
	{
		return [NSString stringWithUTF8String: s.toUTF8()];
	}

	NSString* nsStringLiteral (const char* const s) noexcept
	{
		return [NSString stringWithUTF8String: s];
	}

	NSString* nsEmptyString() noexcept
	{
		return [NSString string];
	}
}

#endif   // __JUCE_OSX_OBJCHELPERS_JUCEHEADER__

/*** End of inlined file: juce_osx_ObjCHelpers.h ***/



/*** Start of inlined file: juce_mac_ObjCSuffix.h ***/
#ifndef __JUCE_MAC_OBJCSUFFIX_JUCEHEADER__
#define __JUCE_MAC_OBJCSUFFIX_JUCEHEADER__

/** This suffix is used for naming all Obj-C classes that are used inside juce.

	Because of the flat naming structure used by Obj-C, you can get horrible situations where
	two DLLs are loaded into a host, each of which uses classes with the same names, and these get
	cross-linked so that when you make a call to a class that you thought was private, it ends up
	actually calling into a similarly named class in the other module's address space.

	By changing this macro to a unique value, you ensure that all the obj-C classes in your app
	have unique names, and should avoid this problem.

	If you're using the amalgamated version, you can just set this macro to something unique before
	you include juce_amalgamated.cpp.
*/
#ifndef JUCE_ObjCExtraSuffix
 #define JUCE_ObjCExtraSuffix 3
#endif

#ifndef DOXYGEN
 #define appendMacro1(a, b, c, d, e) a ## _ ## b ## _ ## c ## _ ## d ## _ ## e
 #define appendMacro2(a, b, c, d, e) appendMacro1(a, b, c, d, e)
 #define MakeObjCClassName(rootName) appendMacro2 (rootName, JUCE_MAJOR_VERSION, JUCE_MINOR_VERSION, JUCE_BUILDNUMBER, JUCE_ObjCExtraSuffix)
#endif

#endif   // __JUCE_MAC_OBJCSUFFIX_JUCEHEADER__

/*** End of inlined file: juce_mac_ObjCSuffix.h ***/


/*** Start of inlined file: juce_mac_CoreGraphicsHelpers.h ***/
#ifndef __JUCE_MAC_COREGRAPHICSHELPERS_JUCEHEADER__
#define __JUCE_MAC_COREGRAPHICSHELPERS_JUCEHEADER__

namespace
{
	template <class RectType>
	Rectangle<int> convertToRectInt (const RectType& r)
	{
		return Rectangle<int> ((int) r.origin.x, (int) r.origin.y, (int) r.size.width, (int) r.size.height);
	}

	template <class RectType>
	Rectangle<float> convertToRectFloat (const RectType& r)
	{
		return Rectangle<float> (r.origin.x, r.origin.y, r.size.width, r.size.height);
	}

	template <class RectType>
	CGRect convertToCGRect (const RectType& r)
	{
		return CGRectMake ((CGFloat) r.getX(), (CGFloat) r.getY(), (CGFloat) r.getWidth(), (CGFloat) r.getHeight());
	}
}

extern CGImageRef juce_createCoreGraphicsImage (const Image&, const bool forAlpha, CGColorSpaceRef, const bool mustOutliveSource);

extern CGContextRef juce_getImageContext (const Image&);

#endif   // __JUCE_MAC_COREGRAPHICSHELPERS_JUCEHEADER__

/*** End of inlined file: juce_mac_CoreGraphicsHelpers.h ***/


/*** Start of inlined file: juce_mac_Fonts.mm ***/
#if (JUCE_MAC && defined (MAC_OS_X_VERSION_10_5) && MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_5 \
		&& MAC_OS_X_VERSION_MAX_ALLOWED > MAC_OS_X_VERSION_10_5) \
	 || (JUCE_IOS && defined (__IPHONE_3_0) && __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_3_2)
 #define JUCE_CORETEXT_AVAILABLE 1
#endif

#if JUCE_CORETEXT_AVAILABLE

namespace CoreTextTypeLayout
{
	CTFontRef createCTFont (const Font& font, const float fontSize,
							const bool applyScaleFactor, bool& needsItalicTransform)
	{
		CFStringRef cfName = font.getTypefaceName().toCFString();
		CTFontRef ctFontRef = CTFontCreateWithName (cfName, fontSize, nullptr);
		CFRelease (cfName);

		if (ctFontRef != nullptr)
		{
			if (font.isItalic())
			{
				CTFontRef newFont = CTFontCreateCopyWithSymbolicTraits (ctFontRef, 0.0f, nullptr,
																		kCTFontItalicTrait, kCTFontItalicTrait);

				if (newFont != nullptr)
				{
					CFRelease (ctFontRef);
					ctFontRef = newFont;
				}
				else
				{
					needsItalicTransform = true; // couldn't find a proper italic version, so fake it with a transform..
				}
			}

			if (font.isBold())
			{
				CTFontRef newFont = CTFontCreateCopyWithSymbolicTraits (ctFontRef, 0.0f, nullptr,
																		kCTFontBoldTrait, kCTFontBoldTrait);
				if (newFont != nullptr)
				{
					CFRelease (ctFontRef);
					ctFontRef = newFont;
				}
			}

			if (applyScaleFactor)
			{
				CGFontRef cgFontRef = CTFontCopyGraphicsFont (ctFontRef, nullptr);
				const int totalHeight = std::abs (CGFontGetAscent (cgFontRef)) + std::abs (CGFontGetDescent (cgFontRef));
				const float factor = CGFontGetUnitsPerEm (cgFontRef) / (float) totalHeight;
				CGFontRelease (cgFontRef);

				CTFontRef newFont = CTFontCreateCopyWithAttributes (ctFontRef, fontSize * factor, nullptr, nullptr);
				CFRelease (ctFontRef);
				ctFontRef = newFont;
			}
		}

		return ctFontRef;
	}

	struct Advances
	{
		Advances (CTRunRef run, const CFIndex numGlyphs)
			: advances (CTRunGetAdvancesPtr (run))
		{
			if (advances == nullptr)
			{
				local.malloc (numGlyphs);
				CTRunGetAdvances (run, CFRangeMake (0, 0), local);
				advances = local;
			}
		}

		const CGSize* advances;
		HeapBlock<CGSize> local;
	};

	struct Glyphs
	{
		Glyphs (CTRunRef run, const int numGlyphs)
			: glyphs (CTRunGetGlyphsPtr (run))
		{
			if (glyphs == nullptr)
			{
				local.malloc (numGlyphs);
				CTRunGetGlyphs (run, CFRangeMake (0, 0), local);
				glyphs = local;
			}
		}

		const CGGlyph* glyphs;
		HeapBlock<CGGlyph> local;
	};

	struct Positions
	{
		Positions (CTRunRef run, const int numGlyphs)
			: points (CTRunGetPositionsPtr (run))
		{
			if (points == nullptr)
			{
				local.malloc (numGlyphs);
				CTRunGetPositions (run, CFRangeMake (0, 0), local);
				points = local;
			}
		}

		const CGPoint* points;
		HeapBlock<CGPoint> local;
	};

	CFAttributedStringRef createCFAttributedString (const AttributedString& text)
	{
	   #if JUCE_IOS
		CGColorSpaceRef rgbColourSpace = CGColorSpaceCreateDeviceRGB();
	   #endif

		CFStringRef cfText = text.getText().toCFString();
		CFMutableAttributedStringRef attribString = CFAttributedStringCreateMutable (kCFAllocatorDefault, 0);
		CFAttributedStringReplaceString (attribString, CFRangeMake(0, 0), cfText);
		CFRelease (cfText);

		const int numCharacterAttributes = text.getNumAttributes();

		for (int i = 0; i < numCharacterAttributes; ++i)
		{
			const AttributedString::Attribute* const attr = text.getAttribute (i);

			if (attr->range.getStart() > CFAttributedStringGetLength (attribString))
				continue;

			Range<int> range (attr->range);
			range.setEnd (jmin (range.getEnd(), (int) CFAttributedStringGetLength (attribString)));

			if (attr->getFont() != nullptr)
			{
				const Font& f = *attr->getFont();
				bool needsItalicTransform = false;
				CTFontRef ctFontRef = createCTFont (f, f.getHeight(), true, needsItalicTransform);

				CFAttributedStringSetAttribute (attribString, CFRangeMake (range.getStart(), range.getLength()),
												kCTFontAttributeName, ctFontRef);
				CFRelease (ctFontRef);
			}

			if (attr->getColour() != nullptr)
			{
			   #if JUCE_IOS
				const CGFloat components[] = { attr->getColour()->getFloatRed(),
											   attr->getColour()->getFloatGreen(),
											   attr->getColour()->getFloatBlue(),
											   attr->getColour()->getFloatAlpha() };
				CGColorRef colour = CGColorCreate (rgbColourSpace, components);
			   #else
				CGColorRef colour = CGColorCreateGenericRGB (attr->getColour()->getFloatRed(),
															 attr->getColour()->getFloatGreen(),
															 attr->getColour()->getFloatBlue(),
															 attr->getColour()->getFloatAlpha());
			   #endif

				CFAttributedStringSetAttribute (attribString,
												CFRangeMake (range.getStart(), range.getLength()),
												kCTForegroundColorAttributeName, colour);
				CGColorRelease (colour);
			}
		}

		// Paragraph Attributes
		CTTextAlignment ctTextAlignment = kCTLeftTextAlignment;
		CTLineBreakMode ctLineBreakMode = kCTLineBreakByWordWrapping;
		const CGFloat ctLineSpacing = text.getLineSpacing();

		switch (text.getJustification().getOnlyHorizontalFlags())
		{
			case Justification::left:                   break;
			case Justification::right:                  ctTextAlignment = kCTRightTextAlignment; break;
			case Justification::horizontallyCentred:    ctTextAlignment = kCTCenterTextAlignment; break;
			case Justification::horizontallyJustified:  ctTextAlignment = kCTJustifiedTextAlignment; break;
			default:                                    jassertfalse; break; // Illegal justification flags
		}

		switch (text.getWordWrap())
		{
			case AttributedString::byWord:      break;
			case AttributedString::none:        ctLineBreakMode = kCTLineBreakByClipping; break;
			case AttributedString::byChar:      ctLineBreakMode = kCTLineBreakByCharWrapping; break;
			default: break;
		}

		CTParagraphStyleSetting settings[] =
		{
			{ kCTParagraphStyleSpecifierAlignment,              sizeof (CTTextAlignment), &ctTextAlignment },
			{ kCTParagraphStyleSpecifierLineBreakMode,          sizeof (CTLineBreakMode), &ctLineBreakMode },

		   #if defined (MAC_OS_X_VERSION_10_7) && MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
			{ kCTParagraphStyleSpecifierLineSpacingAdjustment,  sizeof (CGFloat),         &ctLineSpacing }
		   #else
			{ kCTParagraphStyleSpecifierLineSpacing,            sizeof (CGFloat),         &ctLineSpacing }
		   #endif
		};

		CTParagraphStyleRef ctParagraphStyleRef = CTParagraphStyleCreate (settings, numElementsInArray (settings));
		CFAttributedStringSetAttribute (attribString, CFRangeMake (0, CFAttributedStringGetLength (attribString)),
										kCTParagraphStyleAttributeName, ctParagraphStyleRef);
		CFRelease (ctParagraphStyleRef);
	   #if JUCE_IOS
		CGColorSpaceRelease (rgbColourSpace);
	   #endif
		return attribString;
	}

	void drawToCGContext (const AttributedString& text, const Rectangle<float>& area,
						  const CGContextRef& context, const float flipHeight)
	{
		CFAttributedStringRef attribString = CoreTextTypeLayout::createCFAttributedString (text);
		CTFramesetterRef framesetter = CTFramesetterCreateWithAttributedString (attribString);
		CFRelease (attribString);

		CGMutablePathRef path = CGPathCreateMutable();
		CGRect bounds = CGRectMake ((CGFloat) area.getX(), flipHeight - (CGFloat) area.getBottom(),
									(CGFloat) area.getWidth(), (CGFloat) area.getHeight());
		CGPathAddRect (path, nullptr, bounds);

		CTFrameRef frame = CTFramesetterCreateFrame (framesetter, CFRangeMake (0, 0), path, nullptr);
		CFRelease (framesetter);
		CGPathRelease (path);

		CTFrameDraw (frame, context);
		CFRelease (frame);
	}

	void createLayout (TextLayout& glyphLayout, const AttributedString& text)
	{
		CFAttributedStringRef attribString = CoreTextTypeLayout::createCFAttributedString (text);
		CTFramesetterRef framesetter = CTFramesetterCreateWithAttributedString (attribString);
		CFRelease (attribString);

		CGMutablePathRef path = CGPathCreateMutable();
		const CGRect bounds = CGRectMake (0, 0, glyphLayout.getWidth(), 1.0e6f);
		CGPathAddRect (path, nullptr, bounds);

		CTFrameRef frame = CTFramesetterCreateFrame (framesetter, CFRangeMake(0, 0), path, nullptr);
		CFRelease (framesetter);
		CGPathRelease (path);

		CFArrayRef lines = CTFrameGetLines (frame);
		const CFIndex numLines = CFArrayGetCount (lines);

		glyphLayout.ensureStorageAllocated (numLines);

		for (CFIndex i = 0; i < numLines; ++i)
		{
			CTLineRef line = (CTLineRef) CFArrayGetValueAtIndex (lines, i);

			CFArrayRef runs = CTLineGetGlyphRuns (line);
			const CFIndex numRuns = CFArrayGetCount (runs);

			const CFRange cfrlineStringRange = CTLineGetStringRange (line);
			const CFIndex lineStringEnd = cfrlineStringRange.location + cfrlineStringRange.length - 1;
			const Range<int> lineStringRange ((int) cfrlineStringRange.location, (int) lineStringEnd);

			CGPoint cgpLineOrigin;
			CTFrameGetLineOrigins (frame, CFRangeMake(i, 1), &cgpLineOrigin);

			Point<float> lineOrigin ((float) cgpLineOrigin.x, bounds.size.height - (float) cgpLineOrigin.y);

			CGFloat ascent, descent, leading;
			CTLineGetTypographicBounds (line, &ascent,  &descent, &leading);

			TextLayout::Line* const glyphLine = new TextLayout::Line (lineStringRange, lineOrigin,
																	  (float) ascent, (float) descent, (float) leading,
																	  (int) numRuns);
			glyphLayout.addLine (glyphLine);

			for (CFIndex j = 0; j < numRuns; ++j)
			{
				CTRunRef run = (CTRunRef) CFArrayGetValueAtIndex (runs, j);
				const CFIndex numGlyphs = CTRunGetGlyphCount (run);
				const CFRange runStringRange = CTRunGetStringRange (run);

				TextLayout::Run* const glyphRun = new TextLayout::Run (Range<int> ((int) runStringRange.location,
																				   (int) (runStringRange.location + runStringRange.length - 1)),
																	   (int) numGlyphs);
				glyphLine->runs.add (glyphRun);

				CFDictionaryRef runAttributes = CTRunGetAttributes (run);

				CTFontRef ctRunFont;
				if (CFDictionaryGetValueIfPresent (runAttributes, kCTFontAttributeName, (const void **) &ctRunFont))
				{
					CFStringRef cfsFontName = CTFontCopyPostScriptName (ctRunFont);
					CTFontRef ctFontRef = CTFontCreateWithName (cfsFontName, 1024, nullptr);
					CGFontRef cgFontRef = CTFontCopyGraphicsFont (ctFontRef, nullptr);
					CFRelease (ctFontRef);
					const int totalHeight = std::abs (CGFontGetAscent (cgFontRef)) + std::abs (CGFontGetDescent (cgFontRef));
					const float fontHeightToCGSizeFactor = CGFontGetUnitsPerEm (cgFontRef) / (float) totalHeight;
					CGFontRelease (cgFontRef);

					glyphRun->font = Font (String::fromCFString (cfsFontName),
										   CTFontGetSize (ctRunFont) / fontHeightToCGSizeFactor, 0); // XXX bold/italic flags?
					CFRelease (cfsFontName);
				}

				CGColorRef cgRunColor;
				if (CFDictionaryGetValueIfPresent (runAttributes, kCTForegroundColorAttributeName, (const void**) &cgRunColor)
					 && CGColorGetNumberOfComponents (cgRunColor) == 4)
				{
					const CGFloat* const components = CGColorGetComponents (cgRunColor);

					glyphRun->colour = Colour::fromFloatRGBA (components[0], components[1], components[2], components[3]);
				}

				const CoreTextTypeLayout::Glyphs glyphs (run, numGlyphs);
				const CoreTextTypeLayout::Advances advances (run, numGlyphs);
				const CoreTextTypeLayout::Positions positions (run, numGlyphs);

				for (CFIndex k = 0; k < numGlyphs; ++k)
					glyphRun->glyphs.add (TextLayout::Glyph (glyphs.glyphs[k], Point<float> (positions.points[k].x,
																							 positions.points[k].y),
															 advances.advances[k].width));
			}
		}

		CFRelease (frame);
	}
}

class OSXTypeface  : public Typeface
{
public:
	OSXTypeface (const Font& font)
		: Typeface (font.getTypefaceName()),
		  fontRef (nullptr),
		  fontHeightToCGSizeFactor (1.0f),
		  renderingTransform (CGAffineTransformIdentity),
		  ctFontRef (nullptr),
		  attributedStringAtts (nullptr),
		  ascent (0.0f),
		  unitsToHeightScaleFactor (0.0f)
	{
		bool needsItalicTransform = false;
		ctFontRef = CoreTextTypeLayout::createCTFont (font, 1024.0f, false, needsItalicTransform);

		if (ctFontRef != nullptr)
		{
			ascent = std::abs ((float) CTFontGetAscent (ctFontRef));
			const float totalSize = ascent + std::abs ((float) CTFontGetDescent (ctFontRef));
			ascent /= totalSize;

			pathTransform = AffineTransform::identity.scale (1.0f / totalSize, 1.0f / totalSize);

			if (needsItalicTransform)
			{
				pathTransform = pathTransform.sheared (-0.15f, 0.0f);
				renderingTransform.c = 0.15f;
			}

			fontRef = CTFontCopyGraphicsFont (ctFontRef, nullptr);

			const int totalHeight = abs (CGFontGetAscent (fontRef)) + abs (CGFontGetDescent (fontRef));
			const float ctTotalHeight = abs (CTFontGetAscent (ctFontRef)) + abs (CTFontGetDescent (ctFontRef));
			unitsToHeightScaleFactor = 1.0f / ctTotalHeight;
			fontHeightToCGSizeFactor = CGFontGetUnitsPerEm (fontRef) / (float) totalHeight;

			const short zero = 0;
			CFNumberRef numberRef = CFNumberCreate (0, kCFNumberShortType, &zero);

			CFStringRef keys[] = { kCTFontAttributeName, kCTLigatureAttributeName };
			CFTypeRef values[] = { ctFontRef, numberRef };
			attributedStringAtts = CFDictionaryCreate (nullptr, (const void**) &keys, (const void**) &values, numElementsInArray (keys),
													   &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
			CFRelease (numberRef);
		}
	}

	~OSXTypeface()
	{
		if (attributedStringAtts != nullptr)
			CFRelease (attributedStringAtts);

		if (fontRef != nullptr)
			CGFontRelease (fontRef);

		if (ctFontRef != nullptr)
			CFRelease (ctFontRef);
	}

	float getAscent() const     { return ascent; }
	float getDescent() const    { return 1.0f - ascent; }

	float getStringWidth (const String& text)
	{
		float x = 0;

		if (ctFontRef != nullptr && text.isNotEmpty())
		{
			CFStringRef cfText = text.toCFString();
			CFAttributedStringRef attribString = CFAttributedStringCreate (kCFAllocatorDefault, cfText, attributedStringAtts);
			CFRelease (cfText);

			CTLineRef line = CTLineCreateWithAttributedString (attribString);
			CFArrayRef runArray = CTLineGetGlyphRuns (line);

			for (CFIndex i = 0; i < CFArrayGetCount (runArray); ++i)
			{
				CTRunRef run = (CTRunRef) CFArrayGetValueAtIndex (runArray, i);
				CFIndex length = CTRunGetGlyphCount (run);

				const CoreTextTypeLayout::Advances advances (run, length);

				for (int j = 0; j < length; ++j)
					x += (float) advances.advances[j].width;
			}

			CFRelease (line);
			CFRelease (attribString);

			x *= unitsToHeightScaleFactor;
		}

		return x;
	}

	void getGlyphPositions (const String& text, Array <int>& resultGlyphs, Array <float>& xOffsets)
	{
		xOffsets.add (0);

		if (ctFontRef != nullptr && text.isNotEmpty())
		{
			float x = 0;

			CFStringRef cfText = text.toCFString();
			CFAttributedStringRef attribString = CFAttributedStringCreate (kCFAllocatorDefault, cfText, attributedStringAtts);
			CFRelease (cfText);

			CTLineRef line = CTLineCreateWithAttributedString (attribString);
			CFArrayRef runArray = CTLineGetGlyphRuns (line);

			for (CFIndex i = 0; i < CFArrayGetCount (runArray); ++i)
			{
				CTRunRef run = (CTRunRef) CFArrayGetValueAtIndex (runArray, i);
				CFIndex length = CTRunGetGlyphCount (run);

				const CoreTextTypeLayout::Advances advances (run, length);
				const CoreTextTypeLayout::Glyphs glyphs (run, length);

				for (int j = 0; j < length; ++j)
				{
					x += (float) advances.advances[j].width;
					xOffsets.add (x * unitsToHeightScaleFactor);
					resultGlyphs.add (glyphs.glyphs[j]);
				}
			}

			CFRelease (line);
			CFRelease (attribString);
		}
	}

	EdgeTable* getEdgeTableForGlyph (int glyphNumber, const AffineTransform& transform)
	{
		Path path;

		if (getOutlineForGlyph (glyphNumber, path) && ! path.isEmpty())
			return new EdgeTable (path.getBoundsTransformed (transform).getSmallestIntegerContainer().expanded (1, 0),
								  path, transform);

		return nullptr;
	}

	bool getOutlineForGlyph (int glyphNumber, Path& path)
	{
		jassert (path.isEmpty());  // we might need to apply a transform to the path, so this must be empty

		CGPathRef pathRef = CTFontCreatePathForGlyph (ctFontRef, (CGGlyph) glyphNumber, &renderingTransform);
		if (pathRef == 0)
			return false;

		CGPathApply (pathRef, &path, pathApplier);
		CFRelease (pathRef);

		if (! pathTransform.isIdentity())
			path.applyTransform (pathTransform);

		return true;
	}

	CGFontRef fontRef;

	float fontHeightToCGSizeFactor;
	CGAffineTransform renderingTransform;

private:
	CTFontRef ctFontRef;
	CFDictionaryRef attributedStringAtts;
	float ascent, unitsToHeightScaleFactor;
	AffineTransform pathTransform;

	static void pathApplier (void* info, const CGPathElement* const element)
	{
		Path& path = *static_cast<Path*> (info);
		const CGPoint* const p = element->points;

		switch (element->type)
		{
			case kCGPathElementMoveToPoint:         path.startNewSubPath ((float) p[0].x, (float) -p[0].y); break;
			case kCGPathElementAddLineToPoint:      path.lineTo          ((float) p[0].x, (float) -p[0].y); break;
			case kCGPathElementAddQuadCurveToPoint: path.quadraticTo     ((float) p[0].x, (float) -p[0].y,
																		  (float) p[1].x, (float) -p[1].y); break;
			case kCGPathElementAddCurveToPoint:     path.cubicTo         ((float) p[0].x, (float) -p[0].y,
																		  (float) p[1].x, (float) -p[1].y,
																		  (float) p[2].x, (float) -p[2].y); break;
			case kCGPathElementCloseSubpath:        path.closeSubPath(); break;
			default:                                jassertfalse; break;
		}
	}

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (OSXTypeface);
};

#else

// The stuff that follows is a mash-up that supports pre-OSX 10.5 and pre-iOS 3.2 APIs.
// (Hopefully all of this can be ditched at some point in the future).

#if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_5
  #define SUPPORT_10_4_FONTS 1
  #define NEW_CGFONT_FUNCTIONS_UNAVAILABLE (CGFontCreateWithFontName == 0)

  #if MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_5
	#define SUPPORT_ONLY_10_4_FONTS 1
  #endif

  } // (juce namespace)

  @interface NSFont (PrivateHack)
	- (NSGlyph) _defaultGlyphForChar: (unichar) theChar;
  @end

  namespace juce
  {
#endif

class OSXTypeface  : public Typeface
{
public:
	OSXTypeface (const Font& font)
		: Typeface (font.getTypefaceName())
	{
		JUCE_AUTORELEASEPOOL
		renderingTransform = CGAffineTransformIdentity;

		bool needsItalicTransform = false;

#if JUCE_IOS
		NSString* fontName = juceStringToNS (font.getTypefaceName());

		if (font.isItalic() || font.isBold())
		{
			NSArray* familyFonts = [UIFont fontNamesForFamilyName: juceStringToNS (font.getTypefaceName())];

			for (NSString* i in familyFonts)
			{
				const String fn (nsStringToJuce (i));
				const String afterDash (fn.fromFirstOccurrenceOf ("-", false, false));

				const bool probablyBold = afterDash.containsIgnoreCase ("bold") || fn.endsWithIgnoreCase ("bold");
				const bool probablyItalic = afterDash.containsIgnoreCase ("oblique")
											 || afterDash.containsIgnoreCase ("italic")
											 || fn.endsWithIgnoreCase ("oblique")
											 || fn.endsWithIgnoreCase ("italic");

				if (probablyBold == font.isBold()
					 && probablyItalic == font.isItalic())
				{
					fontName = i;
					needsItalicTransform = false;
					break;
				}
				else if (probablyBold && (! probablyItalic) && probablyBold == font.isBold())
				{
					fontName = i;
					needsItalicTransform = true; // not ideal, so carry on in case we find a better one
				}
			}

			if (needsItalicTransform)
				renderingTransform.c = 0.15f;
		}

		fontRef = CGFontCreateWithFontName ((CFStringRef) fontName);

		if (fontRef == 0)
		{
			// Sometimes, UIFont manages to handle names that CGFontCreateWithFontName fails on...
			UIFont* uiFont = [UIFont fontWithName: fontName size: 12];
			fontRef = CGFontCreateWithFontName ((CFStringRef) uiFont.fontName);
		}

		const int ascender = abs (CGFontGetAscent (fontRef));
		const float totalHeight = ascender + abs (CGFontGetDescent (fontRef));
		ascent = ascender / totalHeight;
		unitsToHeightScaleFactor = 1.0f / totalHeight;
		fontHeightToCGSizeFactor = CGFontGetUnitsPerEm (fontRef) / totalHeight;
#else
		nsFont = [NSFont fontWithName: juceStringToNS (font.getTypefaceName()) size: 1024];

		if (font.isItalic())
		{
			NSFont* newFont = [[NSFontManager sharedFontManager] convertFont: nsFont
																 toHaveTrait: NSItalicFontMask];

			if (newFont == nsFont)
				needsItalicTransform = true; // couldn't find a proper italic version, so fake it with a transform..

			nsFont = newFont;
		}

		if (font.isBold())
			nsFont = [[NSFontManager sharedFontManager] convertFont: nsFont toHaveTrait: NSBoldFontMask];

		[nsFont retain];

		ascent = std::abs ((float) [nsFont ascender]);
		float totalSize = ascent + std::abs ((float) [nsFont descender]);
		ascent /= totalSize;

		pathTransform = AffineTransform::identity.scale (1.0f / totalSize, 1.0f / totalSize);

		if (needsItalicTransform)
		{
			pathTransform = pathTransform.sheared (-0.15f, 0.0f);
			renderingTransform.c = 0.15f;
		}

	  #if SUPPORT_ONLY_10_4_FONTS
		ATSFontRef atsFont = ATSFontFindFromName ((CFStringRef) [nsFont fontName], kATSOptionFlagsDefault);

		if (atsFont == 0)
			atsFont = ATSFontFindFromPostScriptName ((CFStringRef) [nsFont fontName], kATSOptionFlagsDefault);

		fontRef = CGFontCreateWithPlatformFont (&atsFont);

		const float totalHeight = std::abs ([nsFont ascender]) + std::abs ([nsFont descender]);
		unitsToHeightScaleFactor = 1.0f / totalHeight;
		fontHeightToCGSizeFactor = 1024.0f / totalHeight;
	  #else
	   #if SUPPORT_10_4_FONTS
		if (NEW_CGFONT_FUNCTIONS_UNAVAILABLE)
		{
			ATSFontRef atsFont = ATSFontFindFromName ((CFStringRef) [nsFont fontName], kATSOptionFlagsDefault);

			if (atsFont == 0)
				atsFont = ATSFontFindFromPostScriptName ((CFStringRef) [nsFont fontName], kATSOptionFlagsDefault);

			fontRef = CGFontCreateWithPlatformFont (&atsFont);

			const float totalHeight = std::abs ([nsFont ascender]) + std::abs ([nsFont descender]);
			unitsToHeightScaleFactor = 1.0f / totalHeight;
			fontHeightToCGSizeFactor = 1024.0f / totalHeight;
		}
		else
	   #endif
		{
			fontRef = CGFontCreateWithFontName ((CFStringRef) [nsFont fontName]);

			const int totalHeight = abs (CGFontGetAscent (fontRef)) + abs (CGFontGetDescent (fontRef));
			unitsToHeightScaleFactor = 1.0f / totalHeight;
			fontHeightToCGSizeFactor = CGFontGetUnitsPerEm (fontRef) / (float) totalHeight;
		}
	  #endif

#endif
	}

	~OSXTypeface()
	{
	   #if ! JUCE_IOS
		[nsFont release];
	   #endif

		if (fontRef != 0)
			CGFontRelease (fontRef);
	}

	float getAscent() const    { return ascent; }
	float getDescent() const   { return 1.0f - ascent; }

	float getStringWidth (const String& text)
	{
		if (fontRef == 0 || text.isEmpty())
			return 0;

		const int length = text.length();
		HeapBlock <CGGlyph> glyphs;
		createGlyphsForString (text.getCharPointer(), length, glyphs);

		float x = 0;

#if SUPPORT_ONLY_10_4_FONTS
		HeapBlock <NSSize> advances (length);
		[nsFont getAdvancements: advances forGlyphs: reinterpret_cast <NSGlyph*> (glyphs.getData()) count: length];

		for (int i = 0; i < length; ++i)
			x += advances[i].width;
#else
	   #if SUPPORT_10_4_FONTS
		if (NEW_CGFONT_FUNCTIONS_UNAVAILABLE)
		{
			HeapBlock <NSSize> advances (length);
			[nsFont getAdvancements: advances forGlyphs: reinterpret_cast<NSGlyph*> (glyphs.getData()) count: length];

			for (int i = 0; i < length; ++i)
				x += advances[i].width;
		}
		else
	   #endif
		{
			HeapBlock <int> advances (length);

			if (CGFontGetGlyphAdvances (fontRef, glyphs, length, advances))
				for (int i = 0; i < length; ++i)
					x += advances[i];
		}
#endif

		return x * unitsToHeightScaleFactor;
	}

	void getGlyphPositions (const String& text, Array <int>& resultGlyphs, Array <float>& xOffsets)
	{
		xOffsets.add (0);

		if (fontRef == 0 || text.isEmpty())
			return;

		const int length = text.length();
		HeapBlock <CGGlyph> glyphs;
		createGlyphsForString (text.getCharPointer(), length, glyphs);

#if SUPPORT_ONLY_10_4_FONTS
		HeapBlock <NSSize> advances (length);
		[nsFont getAdvancements: advances forGlyphs: reinterpret_cast <NSGlyph*> (glyphs.getData()) count: length];

		int x = 0;
		for (int i = 0; i < length; ++i)
		{
			x += advances[i].width;
			xOffsets.add (x * unitsToHeightScaleFactor);
			resultGlyphs.add (reinterpret_cast <NSGlyph*> (glyphs.getData())[i]);
		}

#else
	   #if SUPPORT_10_4_FONTS
		if (NEW_CGFONT_FUNCTIONS_UNAVAILABLE)
		{
			HeapBlock <NSSize> advances (length);
			NSGlyph* const nsGlyphs = reinterpret_cast<NSGlyph*> (glyphs.getData());
			[nsFont getAdvancements: advances forGlyphs: nsGlyphs count: length];

			float x = 0;
			for (int i = 0; i < length; ++i)
			{
				x += advances[i].width;
				xOffsets.add (x * unitsToHeightScaleFactor);
				resultGlyphs.add (nsGlyphs[i]);
			}
		}
		else
	   #endif
		{
			HeapBlock <int> advances (length);

			if (CGFontGetGlyphAdvances (fontRef, glyphs, length, advances))
			{
				int x = 0;
				for (int i = 0; i < length; ++i)
				{
					x += advances [i];
					xOffsets.add (x * unitsToHeightScaleFactor);
					resultGlyphs.add (glyphs[i]);
				}
			}
		}
#endif
	}

	EdgeTable* getEdgeTableForGlyph (int glyphNumber, const AffineTransform& transform)
	{
		Path path;

		if (getOutlineForGlyph (glyphNumber, path) && ! path.isEmpty())
			return new EdgeTable (path.getBoundsTransformed (transform).getSmallestIntegerContainer().expanded (1, 0),
								  path, transform);

		return nullptr;
	}

	bool getOutlineForGlyph (int glyphNumber, Path& path)
	{
	   #if JUCE_IOS
		return false;
	   #else
		if (nsFont == nil)
			return false;

		// we might need to apply a transform to the path, so it mustn't have anything else in it
		jassert (path.isEmpty());

		JUCE_AUTORELEASEPOOL

		NSBezierPath* bez = [NSBezierPath bezierPath];
		[bez moveToPoint: NSMakePoint (0, 0)];
		[bez appendBezierPathWithGlyph: (NSGlyph) glyphNumber
								inFont: nsFont];

		for (int i = 0; i < [bez elementCount]; ++i)
		{
			NSPoint p[3];
			switch ([bez elementAtIndex: i associatedPoints: p])
			{
				case NSMoveToBezierPathElement:     path.startNewSubPath ((float) p[0].x, (float) -p[0].y); break;
				case NSLineToBezierPathElement:     path.lineTo  ((float) p[0].x, (float) -p[0].y); break;
				case NSCurveToBezierPathElement:    path.cubicTo ((float) p[0].x, (float) -p[0].y,
																  (float) p[1].x, (float) -p[1].y,
																  (float) p[2].x, (float) -p[2].y); break;
				case NSClosePathBezierPathElement:  path.closeSubPath(); break;
				default:                            jassertfalse; break;
			}
		}

		path.applyTransform (pathTransform);
		return true;
	   #endif
	}

	CGFontRef fontRef;
	float fontHeightToCGSizeFactor;
	CGAffineTransform renderingTransform;

private:
	float ascent, unitsToHeightScaleFactor;

   #if ! JUCE_IOS
	NSFont* nsFont;
	AffineTransform pathTransform;
   #endif

	void createGlyphsForString (String::CharPointerType text, const int length, HeapBlock <CGGlyph>& glyphs)
	{
	  #if SUPPORT_10_4_FONTS
	   #if ! SUPPORT_ONLY_10_4_FONTS
		if (NEW_CGFONT_FUNCTIONS_UNAVAILABLE)
	   #endif
		{
			glyphs.malloc (sizeof (NSGlyph) * length, 1);
			NSGlyph* const nsGlyphs = reinterpret_cast<NSGlyph*> (glyphs.getData());

			for (int i = 0; i < length; ++i)
				nsGlyphs[i] = (NSGlyph) [nsFont _defaultGlyphForChar: text.getAndAdvance()];

			return;
		}
	  #endif

	   #if ! SUPPORT_ONLY_10_4_FONTS
		if (charToGlyphMapper == nullptr)
			charToGlyphMapper = new CharToGlyphMapper (fontRef);

		glyphs.malloc (length);

		for (int i = 0; i < length; ++i)
			glyphs[i] = (CGGlyph) charToGlyphMapper->getGlyphForCharacter (text.getAndAdvance());
	   #endif
	}

#if ! SUPPORT_ONLY_10_4_FONTS
	// Reads a CGFontRef's character map table to convert unicode into glyph numbers
	class CharToGlyphMapper
	{
	public:
		CharToGlyphMapper (CGFontRef fontRef)
			: segCount (0), endCode (0), startCode (0), idDelta (0),
			  idRangeOffset (0), glyphIndexes (0)
		{
			CFDataRef cmapTable = CGFontCopyTableForTag (fontRef, 'cmap');

			if (cmapTable != 0)
			{
				const int numSubtables = getValue16 (cmapTable, 2);

				for (int i = 0; i < numSubtables; ++i)
				{
					if (getValue16 (cmapTable, i * 8 + 4) == 0) // check for platform ID of 0
					{
						const int offset = getValue32 (cmapTable, i * 8 + 8);

						if (getValue16 (cmapTable, offset) == 4) // check that it's format 4..
						{
							const int length = getValue16 (cmapTable, offset + 2);
							const int segCountX2 =  getValue16 (cmapTable, offset + 6);
							segCount = segCountX2 / 2;
							const int endCodeOffset = offset + 14;
							const int startCodeOffset = endCodeOffset + 2 + segCountX2;
							const int idDeltaOffset = startCodeOffset + segCountX2;
							const int idRangeOffsetOffset = idDeltaOffset + segCountX2;
							const int glyphIndexesOffset = idRangeOffsetOffset + segCountX2;

							endCode       = CFDataCreate (kCFAllocatorDefault, CFDataGetBytePtr (cmapTable) + endCodeOffset, segCountX2);
							startCode     = CFDataCreate (kCFAllocatorDefault, CFDataGetBytePtr (cmapTable) + startCodeOffset, segCountX2);
							idDelta       = CFDataCreate (kCFAllocatorDefault, CFDataGetBytePtr (cmapTable) + idDeltaOffset, segCountX2);
							idRangeOffset = CFDataCreate (kCFAllocatorDefault, CFDataGetBytePtr (cmapTable) + idRangeOffsetOffset, segCountX2);
							glyphIndexes  = CFDataCreate (kCFAllocatorDefault, CFDataGetBytePtr (cmapTable) + glyphIndexesOffset, offset + length - glyphIndexesOffset);
						}

						break;
					}
				}

				CFRelease (cmapTable);
			}
		}

		~CharToGlyphMapper()
		{
			if (endCode != 0)
			{
				CFRelease (endCode);
				CFRelease (startCode);
				CFRelease (idDelta);
				CFRelease (idRangeOffset);
				CFRelease (glyphIndexes);
			}
		}

		int getGlyphForCharacter (const juce_wchar c) const
		{
			for (int i = 0; i < segCount; ++i)
			{
				if (getValue16 (endCode, i * 2) >= c)
				{
					const int start = getValue16 (startCode, i * 2);
					if (start > c)
						break;

					const int delta = getValue16 (idDelta, i * 2);
					const int rangeOffset = getValue16 (idRangeOffset, i * 2);

					if (rangeOffset == 0)
						return delta + c;
					else
						return getValue16 (glyphIndexes, 2 * ((rangeOffset / 2) + (c - start) - (segCount - i)));
				}
			}

			// If we failed to find it "properly", this dodgy fall-back seems to do the trick for most fonts!
			return jmax (-1, (int) c - 29);
		}

	private:
		int segCount;
		CFDataRef endCode, startCode, idDelta, idRangeOffset, glyphIndexes;

		static uint16 getValue16 (CFDataRef data, const int index)
		{
			return CFSwapInt16BigToHost (*(UInt16*) (CFDataGetBytePtr (data) + index));
		}

		static uint32 getValue32 (CFDataRef data, const int index)
		{
			return CFSwapInt32BigToHost (*(UInt32*) (CFDataGetBytePtr (data) + index));
		}
	};

	ScopedPointer <CharToGlyphMapper> charToGlyphMapper;
#endif

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (OSXTypeface);
};

#endif

Typeface::Ptr Typeface::createSystemTypefaceFor (const Font& font)
{
	return new OSXTypeface (font);
}

StringArray Font::findAllTypefaceNames()
{
	StringArray names;

	JUCE_AUTORELEASEPOOL

   #if JUCE_IOS
	NSArray* fonts = [UIFont familyNames];
   #else
	NSArray* fonts = [[NSFontManager sharedFontManager] availableFontFamilies];
   #endif

	for (unsigned int i = 0; i < [fonts count]; ++i)
		names.add (nsStringToJuce ((NSString*) [fonts objectAtIndex: i]));

	names.sort (true);
	return names;
}

struct DefaultFontNames
{
	DefaultFontNames()
	   #if JUCE_IOS
		: defaultSans  ("Helvetica"),
		  defaultSerif ("Times New Roman"),
		  defaultFixed ("Courier New"),
	   #else
		: defaultSans  ("Lucida Grande"),
		  defaultSerif ("Times New Roman"),
		  defaultFixed ("Monaco"),
	   #endif
		  defaultFallback ("Arial Unicode MS")
	{
	}

	String defaultSans, defaultSerif, defaultFixed, defaultFallback;
};

Typeface::Ptr Font::getDefaultTypefaceForFont (const Font& font)
{
	static DefaultFontNames defaultNames;

	String faceName (font.getTypefaceName());

	if (faceName == Font::getDefaultSansSerifFontName())       faceName = defaultNames.defaultSans;
	else if (faceName == Font::getDefaultSerifFontName())      faceName = defaultNames.defaultSerif;
	else if (faceName == Font::getDefaultMonospacedFontName()) faceName = defaultNames.defaultFixed;

	Font f (font);
	f.setTypefaceName (faceName);
	return Typeface::createSystemTypefaceFor (f);
}

bool TextLayout::createNativeLayout (const AttributedString& text)
{
   #if JUCE_CORETEXT_AVAILABLE
	CoreTextTypeLayout::createLayout (*this, text);
	return true;
   #else
	(void) text;
	return false;
   #endif
}

/*** End of inlined file: juce_mac_Fonts.mm ***/


/*** Start of inlined file: juce_mac_CoreGraphicsContext.mm ***/

/*** Start of inlined file: juce_mac_CoreGraphicsContext.h ***/
#ifndef __JUCE_MAC_COREGRAPHICSCONTEXT_JUCEHEADER__
#define __JUCE_MAC_COREGRAPHICSCONTEXT_JUCEHEADER__

class CoreGraphicsContext   : public LowLevelGraphicsContext
{
public:
	CoreGraphicsContext (CGContextRef context_, const float flipHeight_);
	~CoreGraphicsContext();

	bool isVectorDevice() const         { return false; }

	void setOrigin (int x, int y);
	void addTransform (const AffineTransform& transform);
	float getScaleFactor();
	bool clipToRectangle (const Rectangle<int>& r);
	bool clipToRectangleList (const RectangleList& clipRegion);
	void excludeClipRectangle (const Rectangle<int>& r);
	void clipToPath (const Path& path, const AffineTransform& transform);
	void clipToImageAlpha (const Image& sourceImage, const AffineTransform& transform);
	bool clipRegionIntersects (const Rectangle<int>& r);
	Rectangle<int> getClipBounds() const;
	bool isClipEmpty() const;

	void saveState();
	void restoreState();
	void beginTransparencyLayer (float opacity);
	void endTransparencyLayer();

	void setFill (const FillType& fillType);
	void setOpacity (float newOpacity);
	void setInterpolationQuality (Graphics::ResamplingQuality quality);

	void fillRect (const Rectangle<int>& r, const bool replaceExistingContents);
	void fillCGRect (const CGRect& cgRect, const bool replaceExistingContents);
	void fillPath (const Path& path, const AffineTransform& transform);
	void drawImage (const Image& sourceImage, const AffineTransform& transform);

	void drawLine (const Line<float>& line);
	void drawVerticalLine (const int x, float top, float bottom);
	void drawHorizontalLine (const int y, float left, float right);
	void setFont (const Font& newFont);
	const Font& getFont();
	void drawGlyph (int glyphNumber, const AffineTransform& transform);
	bool drawTextLayout (const AttributedString& text, const Rectangle<float>&);

private:
	CGContextRef context;
	const CGFloat flipHeight;
	CGColorSpaceRef rgbColourSpace, greyColourSpace;
	CGFunctionCallbacks gradientCallbacks;
	mutable Rectangle<int> lastClipRect;
	mutable bool lastClipRectIsValid;

	struct SavedState
	{
		SavedState();
		SavedState (const SavedState& other);
		~SavedState();

		void setFill (const FillType& newFill);
		CGShadingRef getShading (CoreGraphicsContext& owner);

		static void gradientCallback (void* info, const CGFloat* inData, CGFloat* outData);

		FillType fillType;
		Font font;
		CGFontRef fontRef;
		CGAffineTransform fontTransform;

	private:
		CGShadingRef shading;
		HeapBlock <PixelARGB> gradientLookupTable;
		int numGradientLookupEntries;
	};

	ScopedPointer <SavedState> state;
	OwnedArray <SavedState> stateStack;

	void drawGradient();
	void createPath (const Path& path) const;
	void createPath (const Path& path, const AffineTransform& transform) const;
	void flip() const;
	void applyTransform (const AffineTransform& transform) const;
	void drawImage (const Image& sourceImage, const AffineTransform& transform, bool fillEntireClipAsTiles);

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (CoreGraphicsContext);
};

#endif   // __JUCE_MAC_COREGRAPHICSCONTEXT_JUCEHEADER__

/*** End of inlined file: juce_mac_CoreGraphicsContext.h ***/

class CoreGraphicsImage : public ImagePixelData
{
public:
	CoreGraphicsImage (const Image::PixelFormat format, const int width_, const int height_, const bool clearImage)
		: ImagePixelData (format, width_, height_)
	{
		pixelStride = format == Image::RGB ? 3 : ((format == Image::ARGB) ? 4 : 1);
		lineStride = (pixelStride * jmax (1, width) + 3) & ~3;

		imageData.allocate (lineStride * jmax (1, height), clearImage);

		CGColorSpaceRef colourSpace = (format == Image::SingleChannel) ? CGColorSpaceCreateDeviceGray()
																	   : CGColorSpaceCreateDeviceRGB();

		context = CGBitmapContextCreate (imageData, width, height, 8, lineStride,
										 colourSpace, getCGImageFlags (format));

		CGColorSpaceRelease (colourSpace);
	}

	~CoreGraphicsImage()
	{
		CGContextRelease (context);
	}

	LowLevelGraphicsContext* createLowLevelContext()
	{
		return new CoreGraphicsContext (context, height);
	}

	void initialiseBitmapData (Image::BitmapData& bitmap, int x, int y, Image::BitmapData::ReadWriteMode)
	{
		bitmap.data = imageData + x * pixelStride + y * lineStride;
		bitmap.pixelFormat = pixelFormat;
		bitmap.lineStride = lineStride;
		bitmap.pixelStride = pixelStride;
	}

	ImagePixelData* clone()
	{
		CoreGraphicsImage* im = new CoreGraphicsImage (pixelFormat, width, height, false);
		memcpy (im->imageData, imageData, lineStride * height);
		return im;
	}

	ImageType* createType() const    { return new NativeImageType(); }

	static CGImageRef createImage (const Image& juceImage, const bool forAlpha,
								   CGColorSpaceRef colourSpace, const bool mustOutliveSource)
	{
		const Image::BitmapData srcData (juceImage, Image::BitmapData::readOnly);
		CGDataProviderRef provider;

		if (mustOutliveSource)
		{
			CFDataRef data = CFDataCreate (0, (const UInt8*) srcData.data, (CFIndex) (srcData.lineStride * srcData.height));
			provider = CGDataProviderCreateWithCFData (data);
			CFRelease (data);
		}
		else
		{
			provider = CGDataProviderCreateWithData (0, srcData.data, srcData.lineStride * srcData.height, 0);
		}

		CGImageRef imageRef = CGImageCreate (srcData.width, srcData.height,
											 8, srcData.pixelStride * 8, srcData.lineStride,
											 colourSpace, getCGImageFlags (juceImage.getFormat()), provider,
											 0, true, kCGRenderingIntentDefault);

		CGDataProviderRelease (provider);
		return imageRef;
	}

	CGContextRef context;
	HeapBlock<uint8> imageData;
	int pixelStride, lineStride;

private:
	static CGBitmapInfo getCGImageFlags (const Image::PixelFormat& format)
	{
	   #if JUCE_BIG_ENDIAN
		return format == Image::ARGB ? (kCGImageAlphaPremultipliedFirst | kCGBitmapByteOrder32Big) : kCGBitmapByteOrderDefault;
	   #else
		return format == Image::ARGB ? (kCGImageAlphaPremultipliedFirst | kCGBitmapByteOrder32Little) : kCGBitmapByteOrderDefault;
	   #endif
	}

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (CoreGraphicsImage);
};

ImagePixelData* NativeImageType::create (Image::PixelFormat format, int width, int height, bool clearImage) const
{
	return new CoreGraphicsImage (format == Image::RGB ? Image::ARGB : format, width, height, clearImage);
}

CoreGraphicsContext::CoreGraphicsContext (CGContextRef context_, const float flipHeight_)
	: context (context_),
	  flipHeight (flipHeight_),
	  lastClipRectIsValid (false),
	  state (new SavedState())
{
	CGContextRetain (context);
	CGContextSaveGState(context);
	CGContextSetShouldSmoothFonts (context, true);
	CGContextSetShouldAntialias (context, true);
	CGContextSetBlendMode (context, kCGBlendModeNormal);
	rgbColourSpace = CGColorSpaceCreateDeviceRGB();
	greyColourSpace = CGColorSpaceCreateDeviceGray();
	gradientCallbacks.version = 0;
	gradientCallbacks.evaluate = SavedState::gradientCallback;
	gradientCallbacks.releaseInfo = 0;
	setFont (Font());
}

CoreGraphicsContext::~CoreGraphicsContext()
{
	CGContextRestoreGState (context);
	CGContextRelease (context);
	CGColorSpaceRelease (rgbColourSpace);
	CGColorSpaceRelease (greyColourSpace);
}

void CoreGraphicsContext::setOrigin (int x, int y)
{
	CGContextTranslateCTM (context, x, -y);

	if (lastClipRectIsValid)
		lastClipRect.translate (-x, -y);
}

void CoreGraphicsContext::addTransform (const AffineTransform& transform)
{
	applyTransform (AffineTransform::verticalFlip (flipHeight)
									.followedBy (transform)
									.translated (0, -flipHeight)
									.scaled (1.0f, -1.0f));
	lastClipRectIsValid = false;
}

float CoreGraphicsContext::getScaleFactor()
{
	CGAffineTransform t = CGContextGetCTM (context);
	return (float) juce_hypot (t.a + t.c, t.b + t.d);
}

bool CoreGraphicsContext::clipToRectangle (const Rectangle<int>& r)
{
	CGContextClipToRect (context, CGRectMake (r.getX(), flipHeight - r.getBottom(), r.getWidth(), r.getHeight()));

	if (lastClipRectIsValid)
	{
		// This is actually incorrect, because the actual clip region may be complex, and
		// clipping its bounds to a rect may not be right... But, removing this shortcut
		// doesn't actually fix anything because CoreGraphics also ignores complex regions
		// when calculating the resultant clip bounds, and makes the same mistake!
		lastClipRect = lastClipRect.getIntersection (r);
		return ! lastClipRect.isEmpty();
	}

	return ! isClipEmpty();
}

bool CoreGraphicsContext::clipToRectangleList (const RectangleList& clipRegion)
{
	if (clipRegion.isEmpty())
	{
		CGContextClipToRect (context, CGRectMake (0, 0, 0, 0));
		lastClipRectIsValid = true;
		lastClipRect = Rectangle<int>();
		return false;
	}
	else
	{
		const int numRects = clipRegion.getNumRectangles();

		HeapBlock <CGRect> rects (numRects);
		for (int i = 0; i < numRects; ++i)
		{
			const Rectangle<int>& r = clipRegion.getRectangle(i);
			rects[i] = CGRectMake (r.getX(), flipHeight - r.getBottom(), r.getWidth(), r.getHeight());
		}

		CGContextClipToRects (context, rects, numRects);
		lastClipRectIsValid = false;
		return ! isClipEmpty();
	}
}

void CoreGraphicsContext::excludeClipRectangle (const Rectangle<int>& r)
{
	RectangleList remaining (getClipBounds());
	remaining.subtract (r);
	clipToRectangleList (remaining);
	lastClipRectIsValid = false;
}

void CoreGraphicsContext::clipToPath (const Path& path, const AffineTransform& transform)
{
	createPath (path, transform);
	CGContextClip (context);
	lastClipRectIsValid = false;
}

void CoreGraphicsContext::clipToImageAlpha (const Image& sourceImage, const AffineTransform& transform)
{
	if (! transform.isSingularity())
	{
		Image singleChannelImage (sourceImage);

		if (sourceImage.getFormat() != Image::SingleChannel)
			singleChannelImage = sourceImage.convertedToFormat (Image::SingleChannel);

		CGImageRef image = CoreGraphicsImage::createImage (singleChannelImage, true, greyColourSpace, true);

		flip();
		AffineTransform t (AffineTransform::verticalFlip (sourceImage.getHeight()).followedBy (transform));
		applyTransform (t);

		CGRect r = CGRectMake (0, 0, sourceImage.getWidth(), sourceImage.getHeight());
		CGContextClipToMask (context, r, image);

		applyTransform (t.inverted());
		flip();

		CGImageRelease (image);
		lastClipRectIsValid = false;
	}
}

bool CoreGraphicsContext::clipRegionIntersects (const Rectangle<int>& r)
{
	return getClipBounds().intersects (r);
}

Rectangle<int> CoreGraphicsContext::getClipBounds() const
{
	if (! lastClipRectIsValid)
	{
		CGRect bounds = CGRectIntegral (CGContextGetClipBoundingBox (context));

		lastClipRectIsValid = true;
		lastClipRect.setBounds (roundToInt (bounds.origin.x),
								roundToInt (flipHeight - (bounds.origin.y + bounds.size.height)),
								roundToInt (bounds.size.width),
								roundToInt (bounds.size.height));
	}

	return lastClipRect;
}

bool CoreGraphicsContext::isClipEmpty() const
{
	return getClipBounds().isEmpty();
}

void CoreGraphicsContext::saveState()
{
	CGContextSaveGState (context);
	stateStack.add (new SavedState (*state));
}

void CoreGraphicsContext::restoreState()
{
	CGContextRestoreGState (context);

	SavedState* const top = stateStack.getLast();

	if (top != nullptr)
	{
		state = top;
		stateStack.removeLast (1, false);
		lastClipRectIsValid = false;
	}
	else
	{
		jassertfalse; // trying to pop with an empty stack!
	}
}

void CoreGraphicsContext::beginTransparencyLayer (float opacity)
{
	saveState();
	CGContextSetAlpha (context, opacity);
	CGContextBeginTransparencyLayer (context, 0);
}

void CoreGraphicsContext::endTransparencyLayer()
{
	CGContextEndTransparencyLayer (context);
	restoreState();
}

void CoreGraphicsContext::setFill (const FillType& fillType)
{
	state->setFill (fillType);

	if (fillType.isColour())
	{
		CGContextSetRGBFillColor (context, fillType.colour.getFloatRed(), fillType.colour.getFloatGreen(),
								  fillType.colour.getFloatBlue(), fillType.colour.getFloatAlpha());
		CGContextSetAlpha (context, 1.0f);
	}
}

void CoreGraphicsContext::setOpacity (float newOpacity)
{
	state->fillType.setOpacity (newOpacity);
	setFill (state->fillType);
}

void CoreGraphicsContext::setInterpolationQuality (Graphics::ResamplingQuality quality)
{
	CGContextSetInterpolationQuality (context, quality == Graphics::lowResamplingQuality
												? kCGInterpolationLow
												: kCGInterpolationHigh);
}

void CoreGraphicsContext::fillRect (const Rectangle<int>& r, const bool replaceExistingContents)
{
	fillCGRect (CGRectMake (r.getX(), flipHeight - r.getBottom(), r.getWidth(), r.getHeight()), replaceExistingContents);
}

void CoreGraphicsContext::fillCGRect (const CGRect& cgRect, const bool replaceExistingContents)
{
	if (replaceExistingContents)
	{
	  #if MAC_OS_X_VERSION_MAX_ALLOWED < MAC_OS_X_VERSION_10_5
		CGContextClearRect (context, cgRect);
	  #else
	   #if MAC_OS_X_VERSION_MIN_REQUIRED < MAC_OS_X_VERSION_10_5
		if (CGContextDrawLinearGradient == 0) // (just a way of checking whether we're running in 10.5 or later)
			CGContextClearRect (context, cgRect);
		else
	   #endif
			CGContextSetBlendMode (context, kCGBlendModeCopy);
	  #endif

		fillCGRect (cgRect, false);
		CGContextSetBlendMode (context, kCGBlendModeNormal);
	}
	else
	{
		if (state->fillType.isColour())
		{
			CGContextFillRect (context, cgRect);
		}
		else if (state->fillType.isGradient())
		{
			CGContextSaveGState (context);
			CGContextClipToRect (context, cgRect);
			drawGradient();
			CGContextRestoreGState (context);
		}
		else
		{
			CGContextSaveGState (context);
			CGContextClipToRect (context, cgRect);
			drawImage (state->fillType.image, state->fillType.transform, true);
			CGContextRestoreGState (context);
		}
	}
}

void CoreGraphicsContext::fillPath (const Path& path, const AffineTransform& transform)
{
	CGContextSaveGState (context);

	if (state->fillType.isColour())
	{
		flip();
		applyTransform (transform);
		createPath (path);

		if (path.isUsingNonZeroWinding())
			CGContextFillPath (context);
		else
			CGContextEOFillPath (context);
	}
	else
	{
		createPath (path, transform);

		if (path.isUsingNonZeroWinding())
			CGContextClip (context);
		else
			CGContextEOClip (context);

		if (state->fillType.isGradient())
			drawGradient();
		else
			drawImage (state->fillType.image, state->fillType.transform, true);
	}

	CGContextRestoreGState (context);
}

void CoreGraphicsContext::drawImage (const Image& sourceImage, const AffineTransform& transform)
{
	drawImage (sourceImage, transform, false);
}

void CoreGraphicsContext::drawImage (const Image& sourceImage, const AffineTransform& transform, const bool fillEntireClipAsTiles)
{
	const int iw = sourceImage.getWidth();
	const int ih = sourceImage.getHeight();
	CGImageRef image = CoreGraphicsImage::createImage (sourceImage, false, rgbColourSpace, false);

	CGContextSaveGState (context);
	CGContextSetAlpha (context, state->fillType.getOpacity());

	flip();
	applyTransform (AffineTransform::verticalFlip (ih).followedBy (transform));
	CGRect imageRect = CGRectMake (0, 0, iw, ih);

	if (fillEntireClipAsTiles)
	{
	  #if JUCE_IOS
		CGContextDrawTiledImage (context, imageRect, image);
	  #else
	   #if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5
		// There's a bug in CGContextDrawTiledImage that makes it incredibly slow
		// if it's doing a transformation - it's quicker to just draw lots of images manually
		if (CGContextDrawTiledImage != 0 && transform.isOnlyTranslation())
			CGContextDrawTiledImage (context, imageRect, image);
		else
	   #endif
		{
			// Fallback to manually doing a tiled fill on 10.4
			CGRect clip = CGRectIntegral (CGContextGetClipBoundingBox (context));

			int x = 0, y = 0;
			while (x > clip.origin.x)   x -= iw;
			while (y > clip.origin.y)   y -= ih;

			const int right = (int) (clip.origin.x + clip.size.width);
			const int bottom = (int) (clip.origin.y + clip.size.height);

			while (y < bottom)
			{
				for (int x2 = x; x2 < right; x2 += iw)
					CGContextDrawImage (context, CGRectMake (x2, y, iw, ih), image);

				y += ih;
			}
		}
	  #endif
	}
	else
	{
		CGContextDrawImage (context, imageRect, image);
	}

	CGImageRelease (image); // (This causes a memory bug in iPhone sim 3.0 - try upgrading to a later version if you hit this)
	CGContextRestoreGState (context);
}

void CoreGraphicsContext::drawLine (const Line<float>& line)
{
	if (state->fillType.isColour())
	{
		CGContextSetLineCap (context, kCGLineCapSquare);
		CGContextSetLineWidth (context, 1.0f);
		CGContextSetRGBStrokeColor (context,
									state->fillType.colour.getFloatRed(), state->fillType.colour.getFloatGreen(),
									state->fillType.colour.getFloatBlue(), state->fillType.colour.getFloatAlpha());

		CGPoint cgLine[] = { { (CGFloat) line.getStartX(), flipHeight - (CGFloat) line.getStartY() },
							 { (CGFloat) line.getEndX(),   flipHeight - (CGFloat) line.getEndY()   } };

		CGContextStrokeLineSegments (context, cgLine, 1);
	}
	else
	{
		Path p;
		p.addLineSegment (line, 1.0f);
		fillPath (p, AffineTransform::identity);
	}
}

void CoreGraphicsContext::drawVerticalLine (const int x, float top, float bottom)
{
	if (state->fillType.isColour())
	{
	   #if MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_5
		CGContextFillRect (context, CGRectMake (x, flipHeight - bottom, 1.0f, bottom - top));
	   #else
		// On Leopard, unless both co-ordinates are non-integer, it disables anti-aliasing, so nudge
		// the x co-ord slightly to trick it..
		CGContextFillRect (context, CGRectMake (x + 1.0f / 256.0f, flipHeight - bottom, 1.0f + 1.0f / 256.0f, bottom - top));
	   #endif
	}
	else
	{
		fillCGRect (CGRectMake ((float) x, flipHeight - bottom, 1.0f, bottom - top), false);
	}
}

void CoreGraphicsContext::drawHorizontalLine (const int y, float left, float right)
{
	if (state->fillType.isColour())
	{
	   #if MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_5
		CGContextFillRect (context, CGRectMake (left, flipHeight - (y + 1.0f), right - left, 1.0f));
	   #else
		// On Leopard, unless both co-ordinates are non-integer, it disables anti-aliasing, so nudge
		// the x co-ord slightly to trick it..
		CGContextFillRect (context, CGRectMake (left, flipHeight - (y + (1.0f + 1.0f / 256.0f)), right - left, 1.0f + 1.0f / 256.0f));
	   #endif
	}
	else
	{
		fillCGRect (CGRectMake (left, flipHeight - (y + 1), right - left, 1.0f), false);
	}
}

void CoreGraphicsContext::setFont (const Font& newFont)
{
	if (state->font != newFont)
	{
		state->fontRef = 0;
		state->font = newFont;

		OSXTypeface* osxTypeface = dynamic_cast <OSXTypeface*> (state->font.getTypeface());

		if (osxTypeface != nullptr)
		{
			state->fontRef = osxTypeface->fontRef;
			CGContextSetFont (context, state->fontRef);
			CGContextSetFontSize (context, state->font.getHeight() * osxTypeface->fontHeightToCGSizeFactor);

			state->fontTransform = osxTypeface->renderingTransform;
			state->fontTransform.a *= state->font.getHorizontalScale();
			CGContextSetTextMatrix (context, state->fontTransform);
		}
	}
}

const Font& CoreGraphicsContext::getFont()
{
	return state->font;
}

void CoreGraphicsContext::drawGlyph (int glyphNumber, const AffineTransform& transform)
{
	if (state->fontRef != 0 && state->fillType.isColour())
	{
		if (transform.isOnlyTranslation())
		{
			CGContextSetTextMatrix (context, state->fontTransform); // have to set this each time, as it's not saved as part of the state

			CGGlyph g = glyphNumber;
			CGContextShowGlyphsAtPoint (context, transform.getTranslationX(),
										flipHeight - roundToInt (transform.getTranslationY()), &g, 1);
		}
		else
		{
			CGContextSaveGState (context);
			flip();
			applyTransform (transform);

			CGAffineTransform t = state->fontTransform;
			t.d = -t.d;
			CGContextSetTextMatrix (context, t);

			CGGlyph g = glyphNumber;
			CGContextShowGlyphsAtPoint (context, 0, 0, &g, 1);

			CGContextRestoreGState (context);
		}
	}
	else
	{
		Path p;
		Font& f = state->font;
		f.getTypeface()->getOutlineForGlyph (glyphNumber, p);

		fillPath (p, AffineTransform::scale (f.getHeight() * f.getHorizontalScale(), f.getHeight())
									 .followedBy (transform));
	}
}

bool CoreGraphicsContext::drawTextLayout (const AttributedString& text, const Rectangle<float>& area)
{
   #if JUCE_CORETEXT_AVAILABLE
	CoreTextTypeLayout::drawToCGContext (text, area, context, flipHeight);
	return true;
   #else
	return false;
   #endif
}

CoreGraphicsContext::SavedState::SavedState()
	: font (1.0f), fontRef (0), fontTransform (CGAffineTransformIdentity),
	  shading (0), numGradientLookupEntries (0)
{
}

CoreGraphicsContext::SavedState::SavedState (const SavedState& other)
	: fillType (other.fillType), font (other.font), fontRef (other.fontRef),
	  fontTransform (other.fontTransform), shading (0),
	  gradientLookupTable (other.numGradientLookupEntries),
	  numGradientLookupEntries (other.numGradientLookupEntries)
{
	memcpy (gradientLookupTable, other.gradientLookupTable, sizeof (PixelARGB) * numGradientLookupEntries);
}

CoreGraphicsContext::SavedState::~SavedState()
{
	if (shading != 0)
		CGShadingRelease (shading);
}

void CoreGraphicsContext::SavedState::setFill (const FillType& newFill)
{
	fillType = newFill;

	if (fillType.isGradient() && shading != 0)
	{
		CGShadingRelease (shading);
		shading = 0;
	}
}

CGShadingRef CoreGraphicsContext::SavedState::getShading (CoreGraphicsContext& owner)
{
	if (shading == 0)
	{
		ColourGradient& g = *(fillType.gradient);
		numGradientLookupEntries = g.createLookupTable (fillType.transform, gradientLookupTable) - 1;

		CGFunctionRef function = CGFunctionCreate (this, 1, 0, 4, 0, &(owner.gradientCallbacks));
		CGPoint p1 (CGPointMake (g.point1.x, g.point1.y));

		if (g.isRadial)
		{
			shading = CGShadingCreateRadial (owner.rgbColourSpace, p1, 0,
											 p1, g.point1.getDistanceFrom (g.point2),
											 function, true, true);
		}
		else
		{
			shading = CGShadingCreateAxial (owner.rgbColourSpace, p1,
											CGPointMake (g.point2.x, g.point2.y),
											function, true, true);
		}

		CGFunctionRelease (function);
	}

	return shading;
}

void CoreGraphicsContext::SavedState::gradientCallback (void* info, const CGFloat* inData, CGFloat* outData)
{
	const SavedState* const s = static_cast <const SavedState*> (info);

	const int index = roundToInt (s->numGradientLookupEntries * inData[0]);
	PixelARGB colour (s->gradientLookupTable [jlimit (0, s->numGradientLookupEntries, index)]);
	colour.unpremultiply();

	outData[0] = colour.getRed()   / 255.0f;
	outData[1] = colour.getGreen() / 255.0f;
	outData[2] = colour.getBlue()  / 255.0f;
	outData[3] = colour.getAlpha() / 255.0f;
}

void CoreGraphicsContext::drawGradient()
{
	flip();
	applyTransform (state->fillType.transform);

	CGContextSetInterpolationQuality (context, kCGInterpolationDefault); // (This is required for 10.4, where there's a crash if
																		 // you draw a gradient with high quality interp enabled).
	CGContextSetAlpha (context, state->fillType.getOpacity());
	CGContextDrawShading (context, state->getShading (*this));
}

void CoreGraphicsContext::createPath (const Path& path) const
{
	CGContextBeginPath (context);
	Path::Iterator i (path);

	while (i.next())
	{
		switch (i.elementType)
		{
			case Path::Iterator::startNewSubPath:  CGContextMoveToPoint (context, i.x1, i.y1); break;
			case Path::Iterator::lineTo:           CGContextAddLineToPoint (context, i.x1, i.y1); break;
			case Path::Iterator::quadraticTo:      CGContextAddQuadCurveToPoint (context, i.x1, i.y1, i.x2, i.y2); break;
			case Path::Iterator::cubicTo:          CGContextAddCurveToPoint (context, i.x1, i.y1, i.x2, i.y2, i.x3, i.y3); break;
			case Path::Iterator::closePath:        CGContextClosePath (context); break;
			default:                               jassertfalse; break;
		}
	}
}

void CoreGraphicsContext::createPath (const Path& path, const AffineTransform& transform) const
{
	CGContextBeginPath (context);
	Path::Iterator i (path);

	while (i.next())
	{
		switch (i.elementType)
		{
		case Path::Iterator::startNewSubPath:
			transform.transformPoint (i.x1, i.y1);
			CGContextMoveToPoint (context, i.x1, flipHeight - i.y1);
			break;
		case Path::Iterator::lineTo:
			transform.transformPoint (i.x1, i.y1);
			CGContextAddLineToPoint (context, i.x1, flipHeight - i.y1);
			break;
		case Path::Iterator::quadraticTo:
			transform.transformPoints (i.x1, i.y1, i.x2, i.y2);
			CGContextAddQuadCurveToPoint (context, i.x1, flipHeight - i.y1, i.x2, flipHeight - i.y2);
			break;
		case Path::Iterator::cubicTo:
			transform.transformPoints (i.x1, i.y1, i.x2, i.y2, i.x3, i.y3);
			CGContextAddCurveToPoint (context, i.x1, flipHeight - i.y1, i.x2, flipHeight - i.y2, i.x3, flipHeight - i.y3);
			break;
		case Path::Iterator::closePath:
			CGContextClosePath (context); break;
		default:
			jassertfalse;
			break;
		}
	}
}

void CoreGraphicsContext::flip() const
{
	CGContextConcatCTM (context, CGAffineTransformMake (1, 0, 0, -1, 0, flipHeight));
}

void CoreGraphicsContext::applyTransform (const AffineTransform& transform) const
{
	CGAffineTransform t;
	t.a  = transform.mat00;
	t.b  = transform.mat10;
	t.c  = transform.mat01;
	t.d  = transform.mat11;
	t.tx = transform.mat02;
	t.ty = transform.mat12;
	CGContextConcatCTM (context, t);
}

#if USE_COREGRAPHICS_RENDERING && JUCE_USE_COREIMAGE_LOADER
Image juce_loadWithCoreImage (InputStream& input)
{
	MemoryBlock data;
	input.readIntoMemoryBlock (data, -1);

  #if JUCE_IOS
	JUCE_AUTORELEASEPOOL
	UIImage* uiImage = [UIImage imageWithData: [NSData dataWithBytesNoCopy: data.getData()
																	length: data.getSize()
															  freeWhenDone: NO]];

	if (uiImage != nil)
	{
		CGImageRef loadedImage = uiImage.CGImage;

  #else
	CGDataProviderRef provider = CGDataProviderCreateWithData (0, data.getData(), data.getSize(), 0);
	CGImageSourceRef imageSource = CGImageSourceCreateWithDataProvider (provider, 0);
	CGDataProviderRelease (provider);

	if (imageSource != 0)
	{
		CGImageRef loadedImage = CGImageSourceCreateImageAtIndex (imageSource, 0, 0);
		CFRelease (imageSource);
  #endif

		if (loadedImage != 0)
		{
			CGImageAlphaInfo alphaInfo = CGImageGetAlphaInfo (loadedImage);
			const bool hasAlphaChan = (alphaInfo != kCGImageAlphaNone
										 && alphaInfo != kCGImageAlphaNoneSkipLast
										 && alphaInfo != kCGImageAlphaNoneSkipFirst);

			Image image (NativeImageType().create (Image::ARGB, // (CoreImage doesn't work with 24-bit images)
												   (int) CGImageGetWidth (loadedImage),
												   (int) CGImageGetHeight (loadedImage),
												   hasAlphaChan));

			CoreGraphicsImage* const cgImage = dynamic_cast<CoreGraphicsImage*> (image.getPixelData());
			jassert (cgImage != nullptr); // if USE_COREGRAPHICS_RENDERING is set, the CoreGraphicsImage class should have been used.

			CGContextDrawImage (cgImage->context, CGRectMake (0, 0, image.getWidth(), image.getHeight()), loadedImage);
			CGContextFlush (cgImage->context);

		   #if ! JUCE_IOS
			CFRelease (loadedImage);
		   #endif

			// Because it's impossible to create a truly 24-bit CG image, this flag allows a user
			// to find out whether the file they just loaded the image from had an alpha channel or not.
			image.getProperties()->set ("originalImageHadAlpha", hasAlphaChan);
			return image;
		}
	}

	return Image::null;
}
#endif

#if JUCE_MAC
Image juce_createImageFromCIImage (CIImage* im, int w, int h)
{
	CoreGraphicsImage* cgImage = new CoreGraphicsImage (Image::ARGB, w, h, false);

	CIContext* cic = [CIContext contextWithCGContext: cgImage->context options: nil];
	[cic drawImage: im inRect: CGRectMake (0, 0, w, h) fromRect: CGRectMake (0, 0, w, h)];
	CGContextFlush (cgImage->context);

	return Image (cgImage);
}

CGImageRef juce_createCoreGraphicsImage (const Image& juceImage, const bool forAlpha,
										 CGColorSpaceRef colourSpace, const bool mustOutliveSource)
{
	return CoreGraphicsImage::createImage (juceImage, forAlpha, colourSpace, mustOutliveSource);
}

CGContextRef juce_getImageContext (const Image& image)
{
	CoreGraphicsImage* const cgi = dynamic_cast <CoreGraphicsImage*> (image.getPixelData());
	jassert (cgi != nullptr);
	return cgi != nullptr ? cgi->context : 0;
}

#endif

/*** End of inlined file: juce_mac_CoreGraphicsContext.mm ***/

#elif JUCE_WINDOWS

/*** Start of inlined file: juce_win32_ComSmartPtr.h ***/
#ifndef __JUCE_WIN32_COMSMARTPTR_JUCEHEADER__
#define __JUCE_WIN32_COMSMARTPTR_JUCEHEADER__

/** A simple COM smart pointer.
*/
template <class ComClass>
class ComSmartPtr
{
public:
	ComSmartPtr() throw() : p (0)                               {}
	ComSmartPtr (ComClass* const p_) : p (p_)                   { if (p_ != 0) p_->AddRef(); }
	ComSmartPtr (const ComSmartPtr<ComClass>& p_) : p (p_.p)    { if (p  != 0) p ->AddRef(); }
	~ComSmartPtr()                                              { release(); }

	operator ComClass*() const throw()     { return p; }
	ComClass& operator*() const throw()    { return *p; }
	ComClass* operator->() const throw()   { return p; }

	ComSmartPtr& operator= (ComClass* const newP)
	{
		if (newP != 0)  newP->AddRef();
		release();
		p = newP;
		return *this;
	}

	ComSmartPtr& operator= (const ComSmartPtr<ComClass>& newP)  { return operator= (newP.p); }

	// Releases and nullifies this pointer and returns its address
	ComClass** resetAndGetPointerAddress()
	{
		release();
		p = 0;
		return &p;
	}

	HRESULT CoCreateInstance (REFCLSID classUUID, DWORD dwClsContext = CLSCTX_INPROC_SERVER)
	{
	   #if ! JUCE_MINGW
		return ::CoCreateInstance (classUUID, 0, dwClsContext, __uuidof (ComClass), (void**) resetAndGetPointerAddress());
	   #else
		jassertfalse; // need to find a mingw equivalent of __uuidof to make this possible
		return E_NOTIMPL;
	   #endif
	}

	template <class OtherComClass>
	HRESULT QueryInterface (REFCLSID classUUID, ComSmartPtr<OtherComClass>& destObject) const
	{
		if (p == 0)
			return E_POINTER;

		return p->QueryInterface (classUUID, (void**) destObject.resetAndGetPointerAddress());
	}

	template <class OtherComClass>
	HRESULT QueryInterface (ComSmartPtr<OtherComClass>& destObject) const
	{
	   #if ! JUCE_MINGW
		return this->QueryInterface (__uuidof (OtherComClass), destObject);
	   #else
		jassertfalse; // need to find a mingw equivalent of __uuidof to make this possible
		return E_NOTIMPL;
	   #endif
	}

private:
	ComClass* p;

	void release()  { if (p != 0) p->Release(); }

	ComClass** operator&() throw(); // private to avoid it being used accidentally
};

#define JUCE_COMRESULT  HRESULT __stdcall

/** Handy base class for writing COM objects, providing ref-counting and a basic QueryInterface method.
*/
template <class ComClass>
class ComBaseClassHelper   : public ComClass
{
public:
	ComBaseClassHelper()  : refCount (1) {}
	virtual ~ComBaseClassHelper() {}

	JUCE_COMRESULT QueryInterface (REFIID refId, void** result)
	{
	   #if ! JUCE_MINGW
		if (refId == __uuidof (ComClass))   { AddRef(); *result = dynamic_cast <ComClass*> (this); return S_OK; }
	   #else
		jassertfalse; // need to find a mingw equivalent of __uuidof to make this possible
	   #endif

		if (refId == IID_IUnknown)          { AddRef(); *result = dynamic_cast <IUnknown*> (this); return S_OK; }

		*result = 0;
		return E_NOINTERFACE;
	}

	ULONG __stdcall AddRef()    { return ++refCount; }
	ULONG __stdcall Release()   { const ULONG r = --refCount; if (r == 0) delete this; return r; }

	void resetReferenceCount() noexcept     { refCount = 0; }

protected:
	ULONG refCount;
};

#endif   // __JUCE_WIN32_COMSMARTPTR_JUCEHEADER__

/*** End of inlined file: juce_win32_ComSmartPtr.h ***/


 #if JUCE_DIRECT2D

/*** Start of inlined file: juce_win32_Direct2DGraphicsContext.cpp ***/
class SharedD2DFactory  : public DeletedAtShutdown
{
public:
	SharedD2DFactory()
	{
		jassertfalse; //xxx Direct2D support isn't ready for use yet!

		D2D1CreateFactory (D2D1_FACTORY_TYPE_SINGLE_THREADED, d2dFactory.resetAndGetPointerAddress());
		DWriteCreateFactory (DWRITE_FACTORY_TYPE_SHARED, __uuidof (IDWriteFactory), (IUnknown**) directWriteFactory.resetAndGetPointerAddress());

		if (directWriteFactory != nullptr)
			directWriteFactory->GetSystemFontCollection (systemFonts.resetAndGetPointerAddress());
	}

	~SharedD2DFactory()
	{
		clearSingletonInstance();
	}

	juce_DeclareSingleton (SharedD2DFactory, false);

	ComSmartPtr <ID2D1Factory> d2dFactory;
	ComSmartPtr <IDWriteFactory> directWriteFactory;
	ComSmartPtr <IDWriteFontCollection> systemFonts;
};

juce_ImplementSingleton (SharedD2DFactory)

class Direct2DLowLevelGraphicsContext   : public LowLevelGraphicsContext
{
public:
	Direct2DLowLevelGraphicsContext (HWND hwnd_)
		: hwnd (hwnd_),
		  currentState (nullptr)
	{
		RECT windowRect;
		GetClientRect (hwnd, &windowRect);
		D2D1_SIZE_U size = { windowRect.right - windowRect.left, windowRect.bottom - windowRect.top };
		bounds.setSize (size.width, size.height);

		D2D1_RENDER_TARGET_PROPERTIES props = D2D1::RenderTargetProperties();
		D2D1_HWND_RENDER_TARGET_PROPERTIES propsHwnd = D2D1::HwndRenderTargetProperties (hwnd, size);

		HRESULT hr = SharedD2DFactory::getInstance()->d2dFactory->CreateHwndRenderTarget (props, propsHwnd, renderingTarget.resetAndGetPointerAddress());
		// xxx check for error

		hr = renderingTarget->CreateSolidColorBrush (D2D1::ColorF::ColorF (0.0f, 0.0f, 0.0f, 1.0f), colourBrush.resetAndGetPointerAddress());
	}

	~Direct2DLowLevelGraphicsContext()
	{
		states.clear();
	}

	void resized()
	{
		RECT windowRect;
		GetClientRect (hwnd, &windowRect);
		D2D1_SIZE_U size = { windowRect.right - windowRect.left, windowRect.bottom - windowRect.top };

		renderingTarget->Resize (size);
		bounds.setSize (size.width, size.height);
	}

	void clear()
	{
		renderingTarget->Clear (D2D1::ColorF (D2D1::ColorF::White, 0.0f)); // xxx why white and not black?
	}

	void start()
	{
		renderingTarget->BeginDraw();
		saveState();
	}

	void end()
	{
		states.clear();
		currentState = 0;
		renderingTarget->EndDraw();
		renderingTarget->CheckWindowState();
	}

	bool isVectorDevice() const { return false; }

	void setOrigin (int x, int y)
	{
		currentState->origin.addXY (x, y);
	}

	void addTransform (const AffineTransform& transform)
	{
		//xxx todo
		jassertfalse;
	}

	float getScaleFactor()
	{
		jassertfalse; //xxx
		return 1.0f;
	}

	bool clipToRectangle (const Rectangle<int>& r)
	{
		currentState->clipToRectangle (r);
		return ! isClipEmpty();
	}

	bool clipToRectangleList (const RectangleList& clipRegion)
	{
		currentState->clipToRectList (rectListToPathGeometry (clipRegion));
		return ! isClipEmpty();
	}

	void excludeClipRectangle (const Rectangle<int>&)
	{
		//xxx
	}

	void clipToPath (const Path& path, const AffineTransform& transform)
	{
		currentState->clipToPath (pathToPathGeometry (path, transform, currentState->origin));
	}

	void clipToImageAlpha (const Image& sourceImage, const AffineTransform& transform)
	{
		currentState->clipToImage (sourceImage,transform);
	}

	bool clipRegionIntersects (const Rectangle<int>& r)
	{
		const Rectangle<int> r2 (r + currentState->origin);
		return currentState->clipRect.intersects (r2);
	}

	Rectangle<int> getClipBounds() const
	{
		// xxx could this take into account complex clip regions?
		return currentState->clipRect - currentState->origin;
	}

	bool isClipEmpty() const
	{
		return currentState->clipRect.isEmpty();
	}

	void saveState()
	{
		states.add (new SavedState (*this));
		currentState = states.getLast();
	}

	void restoreState()
	{
		jassert (states.size() > 1) //you should never pop the last state!
		states.removeLast (1);
		currentState = states.getLast();
	}

	void beginTransparencyLayer (float opacity)
	{
		jassertfalse; //xxx todo
	}

	void endTransparencyLayer()
	{
		jassertfalse; //xxx todo
	}

	void setFill (const FillType& fillType)
	{
		currentState->setFill (fillType);
	}

	void setOpacity (float newOpacity)
	{
		currentState->setOpacity (newOpacity);
	}

	void setInterpolationQuality (Graphics::ResamplingQuality /*quality*/)
	{
	}

	void fillRect (const Rectangle<int>& r, bool replaceExistingContents)
	{
		currentState->createBrush();
		renderingTarget->FillRectangle (rectangleToRectF (r + currentState->origin), currentState->currentBrush);
	}

	void fillPath (const Path& p, const AffineTransform& transform)
	{
		currentState->createBrush();
		ComSmartPtr <ID2D1Geometry> geometry (pathToPathGeometry (p, transform, currentState->origin));

		if (renderingTarget != nullptr)
			renderingTarget->FillGeometry (geometry, currentState->currentBrush);
	}

	void drawImage (const Image& image, const AffineTransform& transform)
	{
		const int x = currentState->origin.getX();
		const int y = currentState->origin.getY();

		renderingTarget->SetTransform (transformToMatrix (transform) * D2D1::Matrix3x2F::Translation (x, y));

		D2D1_SIZE_U size;
		size.width = image.getWidth();
		size.height = image.getHeight();

		D2D1_BITMAP_PROPERTIES bp = D2D1::BitmapProperties();

		Image img (image.convertedToFormat (Image::ARGB));
		Image::BitmapData bd (img, Image::BitmapData::readOnly);
		bp.pixelFormat = renderingTarget->GetPixelFormat();
		bp.pixelFormat.alphaMode = D2D1_ALPHA_MODE_PREMULTIPLIED;

		{
			ComSmartPtr <ID2D1Bitmap> tempBitmap;
			renderingTarget->CreateBitmap (size, bd.data, bd.lineStride, bp, tempBitmap.resetAndGetPointerAddress());
			if (tempBitmap != nullptr)
				renderingTarget->DrawBitmap (tempBitmap);
		}

		renderingTarget->SetTransform (D2D1::IdentityMatrix());
	}

	void drawLine (const Line <float>& line)
	{
		// xxx doesn't seem to be correctly aligned, may need nudging by 0.5 to match the software renderer's behaviour
		const Line<float> l (line.getStart() + currentState->origin.toFloat(),
							 line.getEnd() + currentState->origin.toFloat());

		currentState->createBrush();

		renderingTarget->DrawLine (D2D1::Point2F (l.getStartX(), l.getStartY()),
								   D2D1::Point2F (l.getEndX(), l.getEndY()),
								   currentState->currentBrush);
	}

	void drawVerticalLine (int x, float top, float bottom)
	{
		// xxx doesn't seem to be correctly aligned, may need nudging by 0.5 to match the software renderer's behaviour
		currentState->createBrush();

		x += currentState->origin.getX();
		const int y = currentState->origin.getY();

		renderingTarget->DrawLine (D2D1::Point2F (x, y + top),
								   D2D1::Point2F (x, y + bottom),
								   currentState->currentBrush);
	}

	void drawHorizontalLine (int y, float left, float right)
	{
		// xxx doesn't seem to be correctly aligned, may need nudging by 0.5 to match the software renderer's behaviour
		currentState->createBrush();

		y += currentState->origin.getY();
		const int x = currentState->origin.getX();

		renderingTarget->DrawLine (D2D1::Point2F (x + left, y),
								   D2D1::Point2F (x + right, y),
								   currentState->currentBrush);
	}

	void setFont (const Font& newFont)
	{
		currentState->setFont (newFont);
	}

	const Font& getFont()
	{
		return currentState->font;
	}

	void drawGlyph (int glyphNumber, const AffineTransform& transform)
	{
		const float x = currentState->origin.getX();
		const float y = currentState->origin.getY();

		currentState->createBrush();
		currentState->createFont();

		float kerning = currentState->font.getExtraKerningFactor(); // xxx why does removing this line mess up the kerning??
		float hScale = currentState->font.getHorizontalScale();

		renderingTarget->SetTransform (D2D1::Matrix3x2F::Scale (hScale, 1) * transformToMatrix (transform) * D2D1::Matrix3x2F::Translation (x, y));

		float dpiX = 0, dpiY = 0;
		SharedD2DFactory::getInstance()->d2dFactory->GetDesktopDpi (&dpiX, &dpiY);

		UINT32 glyphNum = glyphNumber;
		UINT16 glyphNum1 = 0; // xxx needs a better name - what is this for?
		currentState->currentFontFace->GetGlyphIndices (&glyphNum, 1, &glyphNum1);

		DWRITE_GLYPH_OFFSET offset;
		offset.advanceOffset = 0;
		offset.ascenderOffset = 0;
		float glyphAdvances = 0;

		DWRITE_GLYPH_RUN glyph;
		glyph.fontFace = currentState->currentFontFace;
		glyph.glyphCount = 1;
		glyph.glyphIndices = &glyphNum1;
		glyph.isSideways = FALSE;
		glyph.glyphAdvances = &glyphAdvances;
		glyph.glyphOffsets = &offset;
		glyph.fontEmSize = (float) currentState->font.getHeight() * dpiX / 96.0f  * (1 + currentState->fontScaling) / 2;

		renderingTarget->DrawGlyphRun (D2D1::Point2F (0, 0), &glyph, currentState->currentBrush);
		renderingTarget->SetTransform (D2D1::IdentityMatrix());
	}

	class SavedState
	{
	public:
		SavedState (Direct2DLowLevelGraphicsContext& owner_)
		  : owner (owner_), currentBrush (0),
			fontScaling (1.0f), currentFontFace (0),
			clipsRect (false), shouldClipRect (false),
			clipsRectList (false), shouldClipRectList (false),
			clipsComplex (false), shouldClipComplex (false),
			clipsBitmap (false), shouldClipBitmap (false)
		{
			if (owner.currentState != nullptr)
			{
				// xxx seems like a very slow way to create one of these, and this is a performance
				// bottleneck.. Can the same internal objects be shared by multiple state objects, maybe using copy-on-write?
				setFill (owner.currentState->fillType);
				currentBrush = owner.currentState->currentBrush;
				origin = owner.currentState->origin;
				clipRect = owner.currentState->clipRect;

				font = owner.currentState->font;
				currentFontFace = owner.currentState->currentFontFace;
			}
			else
			{
				const D2D1_SIZE_U size (owner.renderingTarget->GetPixelSize());
				clipRect.setSize (size.width, size.height);
				setFill (FillType (Colours::black));
			}
		}

		~SavedState()
		{
			clearClip();
			clearFont();
			clearFill();
			clearPathClip();
			clearImageClip();
			complexClipLayer = 0;
			bitmapMaskLayer = 0;
		}

		void clearClip()
		{
			popClips();
			shouldClipRect = false;
		}

		void clipToRectangle (const Rectangle<int>& r)
		{
			clearClip();
			clipRect = r + origin;
			shouldClipRect = true;
			pushClips();
		}

		void clearPathClip()
		{
			popClips();

			if (shouldClipComplex)
			{
				complexClipGeometry = 0;
				shouldClipComplex = false;
			}
		}

		void clipToPath (ID2D1Geometry* geometry)
		{
			clearPathClip();

			if (complexClipLayer == 0)
				owner.renderingTarget->CreateLayer (complexClipLayer.resetAndGetPointerAddress());

			complexClipGeometry = geometry;
			shouldClipComplex = true;
			pushClips();
		}

		void clearRectListClip()
		{
			popClips();

			if (shouldClipRectList)
			{
				rectListGeometry = 0;
				shouldClipRectList = false;
			}
		}

		void clipToRectList (ID2D1Geometry* geometry)
		{
			clearRectListClip();

			if (rectListLayer == 0)
				owner.renderingTarget->CreateLayer (rectListLayer.resetAndGetPointerAddress());

			rectListGeometry = geometry;
			shouldClipRectList = true;
			pushClips();
		}

		void clearImageClip()
		{
			popClips();

			if (shouldClipBitmap)
			{
				maskBitmap = 0;
				bitmapMaskBrush = 0;
				shouldClipBitmap = false;
			}
		}

		void clipToImage (const Image& image, const AffineTransform& transform)
		{
			clearImageClip();

			if (bitmapMaskLayer == 0)
				owner.renderingTarget->CreateLayer (bitmapMaskLayer.resetAndGetPointerAddress());

			D2D1_BRUSH_PROPERTIES brushProps;
			brushProps.opacity = 1;
			brushProps.transform = transformToMatrix (transform);

			D2D1_BITMAP_BRUSH_PROPERTIES bmProps = D2D1::BitmapBrushProperties (D2D1_EXTEND_MODE_WRAP, D2D1_EXTEND_MODE_WRAP);

			D2D1_SIZE_U size;
			size.width = image.getWidth();
			size.height = image.getHeight();

			D2D1_BITMAP_PROPERTIES bp = D2D1::BitmapProperties();

			maskImage = image.convertedToFormat (Image::ARGB);
			Image::BitmapData bd (this->image, Image::BitmapData::readOnly); // xxx should be maskImage?
			bp.pixelFormat = owner.renderingTarget->GetPixelFormat();
			bp.pixelFormat.alphaMode = D2D1_ALPHA_MODE_PREMULTIPLIED;

			HRESULT hr = owner.renderingTarget->CreateBitmap (size, bd.data, bd.lineStride, bp, maskBitmap.resetAndGetPointerAddress());
			hr = owner.renderingTarget->CreateBitmapBrush (maskBitmap, bmProps, brushProps, bitmapMaskBrush.resetAndGetPointerAddress());

			imageMaskLayerParams = D2D1::LayerParameters();
			imageMaskLayerParams.opacityBrush = bitmapMaskBrush;

			shouldClipBitmap = true;
			pushClips();
		}

		void popClips()
		{
			if (clipsBitmap)
			{
				owner.renderingTarget->PopLayer();
				clipsBitmap = false;
			}

			if (clipsComplex)
			{
				owner.renderingTarget->PopLayer();
				clipsComplex = false;
			}

			if (clipsRectList)
			{
				owner.renderingTarget->PopLayer();
				clipsRectList = false;
			}

			if (clipsRect)
			{
				owner.renderingTarget->PopAxisAlignedClip();
				clipsRect = false;
			}
		}

		void pushClips()
		{
			if (shouldClipRect && ! clipsRect)
			{
				owner.renderingTarget->PushAxisAlignedClip (rectangleToRectF (clipRect), D2D1_ANTIALIAS_MODE_PER_PRIMITIVE);
				clipsRect = true;
			}

			if (shouldClipRectList && ! clipsRectList)
			{
				D2D1_LAYER_PARAMETERS layerParams = D2D1::LayerParameters();
				rectListGeometry->GetBounds (D2D1::IdentityMatrix(), &layerParams.contentBounds);
				layerParams.geometricMask = rectListGeometry;
				owner.renderingTarget->PushLayer (layerParams, rectListLayer);
				clipsRectList = true;
			}

			if (shouldClipComplex && ! clipsComplex)
			{
				D2D1_LAYER_PARAMETERS layerParams = D2D1::LayerParameters();
				complexClipGeometry->GetBounds (D2D1::IdentityMatrix(), &layerParams.contentBounds);
				layerParams.geometricMask = complexClipGeometry;
				owner.renderingTarget->PushLayer (layerParams, complexClipLayer);
				clipsComplex = true;
			}

			if (shouldClipBitmap && ! clipsBitmap)
			{
				owner.renderingTarget->PushLayer (imageMaskLayerParams, bitmapMaskLayer);
				clipsBitmap = true;
			}
		}

		void setFill (const FillType& newFillType)
		{
			if (fillType != newFillType)
			{
				fillType = newFillType;
				clearFill();
			}
		}

		void clearFont()
		{
			currentFontFace = localFontFace = 0;
		}

		void setFont (const Font& newFont)
		{
			if (font != newFont)
			{
				font = newFont;
				clearFont();
			}
		}

		void createFont()
		{
			// xxx The font shouldn't be managed by the graphics context.
			// The correct way to handle font lifetimes is to use a subclass of Typeface - see
			// OSXTypeface and WindowsTypeface classes. D2D support could probably just be added to the
			// WindowsTypeface class.

			if (currentFontFace == 0)
			{
				WindowsTypeface* systemType = dynamic_cast<WindowsTypeface*> (font.getTypeface());
				fontScaling = systemType->getAscent();

				BOOL fontFound;
				uint32 fontIndex;

				IDWriteFontCollection* fonts = SharedD2DFactory::getInstance()->systemFonts;

				fonts->FindFamilyName (systemType->getName(), &fontIndex, &fontFound);
				if (! fontFound)
					fontIndex = 0;

				ComSmartPtr <IDWriteFontFamily> fontFam;
				fonts->GetFontFamily (fontIndex, fontFam.resetAndGetPointerAddress());

				ComSmartPtr <IDWriteFont> font;
				DWRITE_FONT_WEIGHT weight = this->font.isBold() ? DWRITE_FONT_WEIGHT_BOLD  : DWRITE_FONT_WEIGHT_NORMAL;
				DWRITE_FONT_STYLE style = this->font.isItalic() ? DWRITE_FONT_STYLE_ITALIC : DWRITE_FONT_STYLE_NORMAL;
				fontFam->GetFirstMatchingFont (weight, DWRITE_FONT_STRETCH_NORMAL, style, font.resetAndGetPointerAddress());

				font->CreateFontFace (localFontFace.resetAndGetPointerAddress());
				currentFontFace = localFontFace;
			}
		}

		void setOpacity (float newOpacity)
		{
			fillType.setOpacity (newOpacity);

			if (currentBrush != nullptr)
				currentBrush->SetOpacity (newOpacity);
		}

		void clearFill()
		{
			gradientStops = 0;
			linearGradient = 0;
			radialGradient = 0;
			bitmap = 0;
			bitmapBrush = 0;
			currentBrush = 0;
		}

		void createBrush()
		{
			if (currentBrush == 0)
			{
				const int x = origin.getX();
				const int y = origin.getY();

				if (fillType.isColour())
				{
					D2D1_COLOR_F colour = colourToD2D (fillType.colour);
					owner.colourBrush->SetColor (colour);
					currentBrush = owner.colourBrush;
				}
				else if (fillType.isTiledImage())
				{
					D2D1_BRUSH_PROPERTIES brushProps;
					brushProps.opacity = fillType.getOpacity();
					brushProps.transform = transformToMatrix (fillType.transform);

					D2D1_BITMAP_BRUSH_PROPERTIES bmProps = D2D1::BitmapBrushProperties (D2D1_EXTEND_MODE_WRAP,D2D1_EXTEND_MODE_WRAP);

					image = fillType.image;

					D2D1_SIZE_U size;
					size.width = image.getWidth();
					size.height = image.getHeight();

					D2D1_BITMAP_PROPERTIES bp = D2D1::BitmapProperties();

					this->image = image.convertedToFormat (Image::ARGB);
					Image::BitmapData bd (this->image, Image::BitmapData::readOnly);
					bp.pixelFormat = owner.renderingTarget->GetPixelFormat();
					bp.pixelFormat.alphaMode = D2D1_ALPHA_MODE_PREMULTIPLIED;

					HRESULT hr = owner.renderingTarget->CreateBitmap (size, bd.data, bd.lineStride, bp, bitmap.resetAndGetPointerAddress());
					hr = owner.renderingTarget->CreateBitmapBrush (bitmap, bmProps, brushProps, bitmapBrush.resetAndGetPointerAddress());

					currentBrush = bitmapBrush;
				}
				else if (fillType.isGradient())
				{
					gradientStops = 0;

					D2D1_BRUSH_PROPERTIES brushProps;
					brushProps.opacity = fillType.getOpacity();
					brushProps.transform = transformToMatrix (fillType.transform);

					const int numColors = fillType.gradient->getNumColours();

					HeapBlock<D2D1_GRADIENT_STOP> stops (numColors);

					for (int i = fillType.gradient->getNumColours(); --i >= 0;)
					{
						stops[i].color = colourToD2D (fillType.gradient->getColour(i));
						stops[i].position = fillType.gradient->getColourPosition(i);
					}

					owner.renderingTarget->CreateGradientStopCollection (stops.getData(), numColors, gradientStops.resetAndGetPointerAddress());

					if (fillType.gradient->isRadial)
					{
						radialGradient = 0;

						const Point<float>& p1 = fillType.gradient->point1;
						const Point<float>& p2 = fillType.gradient->point2;
						float r = p1.getDistanceFrom (p2);

						D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES props =
							D2D1::RadialGradientBrushProperties (D2D1::Point2F (p1.getX() + x, p1.getY() + y),
																 D2D1::Point2F (0, 0),
																 r, r);

						owner.renderingTarget->CreateRadialGradientBrush (props, brushProps, gradientStops, radialGradient.resetAndGetPointerAddress());
						currentBrush = radialGradient;
					}
					else
					{
						linearGradient = 0;

						const Point<float>& p1 = fillType.gradient->point1;
						const Point<float>& p2 = fillType.gradient->point2;

						D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES props =
							D2D1::LinearGradientBrushProperties (D2D1::Point2F (p1.getX() + x, p1.getY() + y),
																 D2D1::Point2F (p2.getX() + x, p2.getY() + y));

						owner.renderingTarget->CreateLinearGradientBrush (props, brushProps, gradientStops, linearGradient.resetAndGetPointerAddress());

						currentBrush = linearGradient;
					}
				}
			}
		}

		//xxx most of these members should probably be private...

		Direct2DLowLevelGraphicsContext& owner;

		Point<int> origin;

		Font font;
		float fontScaling;
		IDWriteFontFace* currentFontFace;
		ComSmartPtr <IDWriteFontFace> localFontFace;

		FillType fillType;

		Image image;
		ComSmartPtr <ID2D1Bitmap> bitmap; // xxx needs a better name - what is this for??

		Rectangle<int> clipRect;
		bool clipsRect, shouldClipRect;

		ComSmartPtr <ID2D1Geometry> complexClipGeometry;
		D2D1_LAYER_PARAMETERS complexClipLayerParams;
		ComSmartPtr <ID2D1Layer> complexClipLayer;
		bool clipsComplex, shouldClipComplex;

		ComSmartPtr <ID2D1Geometry> rectListGeometry;
		D2D1_LAYER_PARAMETERS rectListLayerParams;
		ComSmartPtr <ID2D1Layer> rectListLayer;
		bool clipsRectList, shouldClipRectList;

		Image maskImage;
		D2D1_LAYER_PARAMETERS imageMaskLayerParams;
		ComSmartPtr <ID2D1Layer> bitmapMaskLayer;
		ComSmartPtr <ID2D1Bitmap> maskBitmap;
		ComSmartPtr <ID2D1BitmapBrush> bitmapMaskBrush;
		bool clipsBitmap, shouldClipBitmap;

		ID2D1Brush* currentBrush;
		ComSmartPtr <ID2D1BitmapBrush> bitmapBrush;
		ComSmartPtr <ID2D1LinearGradientBrush> linearGradient;
		ComSmartPtr <ID2D1RadialGradientBrush> radialGradient;
		ComSmartPtr <ID2D1GradientStopCollection> gradientStops;

	private:
		JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SavedState);
	};

private:
	HWND hwnd;
	ComSmartPtr <ID2D1HwndRenderTarget> renderingTarget;
	ComSmartPtr <ID2D1SolidColorBrush> colourBrush;
	Rectangle<int> bounds;

	SavedState* currentState;
	OwnedArray<SavedState> states;

	static D2D1_RECT_F rectangleToRectF (const Rectangle<int>& r)
	{
		return D2D1::RectF ((float) r.getX(), (float) r.getY(), (float) r.getRight(), (float) r.getBottom());
	}

	static const D2D1_COLOR_F colourToD2D (const Colour& c)
	{
		return D2D1::ColorF::ColorF (c.getFloatRed(), c.getFloatGreen(), c.getFloatBlue(), c.getFloatAlpha());
	}

	static const D2D1_POINT_2F pointTransformed (int x, int y, const AffineTransform& transform = AffineTransform::identity)
	{
		transform.transformPoint (x, y);
		return D2D1::Point2F (x, y);
	}

	static void rectToGeometrySink (const Rectangle<int>& rect, ID2D1GeometrySink* sink)
	{
		sink->BeginFigure (pointTransformed (rect.getX(), rect.getY()), D2D1_FIGURE_BEGIN_FILLED);
		sink->AddLine (pointTransformed (rect.getRight(), rect.getY()));
		sink->AddLine (pointTransformed (rect.getRight(), rect.getBottom()));
		sink->AddLine (pointTransformed (rect.getX(), rect.getBottom()));
		sink->EndFigure (D2D1_FIGURE_END_CLOSED);
	}

	static ID2D1PathGeometry* rectListToPathGeometry (const RectangleList& clipRegion)
	{
		ID2D1PathGeometry* p = nullptr;
		SharedD2DFactory::getInstance()->d2dFactory->CreatePathGeometry (&p);

		ComSmartPtr <ID2D1GeometrySink> sink;
		HRESULT hr = p->Open (sink.resetAndGetPointerAddress()); // xxx handle error
		sink->SetFillMode (D2D1_FILL_MODE_WINDING);

		for (int i = clipRegion.getNumRectangles(); --i >= 0;)
			rectToGeometrySink (clipRegion.getRectangle(i), sink);

		hr = sink->Close();
		return p;
	}

	static void pathToGeometrySink (const Path& path, ID2D1GeometrySink* sink, const AffineTransform& transform, int x, int y)
	{
		Path::Iterator it (path);

		while (it.next())
		{
			switch (it.elementType)
			{
				case Path::Iterator::cubicTo:
				{
					D2D1_BEZIER_SEGMENT seg;

					transform.transformPoint (it.x1, it.y1);
					seg.point1 = D2D1::Point2F (it.x1 + x, it.y1 + y);

					transform.transformPoint (it.x2, it.y2);
					seg.point2 = D2D1::Point2F (it.x2 + x, it.y2 + y);

					transform.transformPoint(it.x3, it.y3);
					seg.point3 = D2D1::Point2F (it.x3 + x, it.y3 + y);

					sink->AddBezier (seg);
					break;
				}

				case Path::Iterator::lineTo:
				{
					transform.transformPoint (it.x1, it.y1);
					sink->AddLine (D2D1::Point2F (it.x1 + x, it.y1 + y));
					break;
				}

				case Path::Iterator::quadraticTo:
				{
					D2D1_QUADRATIC_BEZIER_SEGMENT seg;

					transform.transformPoint (it.x1, it.y1);
					seg.point1 = D2D1::Point2F (it.x1 + x, it.y1 + y);

					transform.transformPoint (it.x2, it.y2);
					seg.point2 = D2D1::Point2F (it.x2 + x, it.y2 + y);

					sink->AddQuadraticBezier (seg);
					break;
				}

				case Path::Iterator::closePath:
				{
					sink->EndFigure (D2D1_FIGURE_END_CLOSED);
					break;
				}

				case Path::Iterator::startNewSubPath:
				{
					transform.transformPoint (it.x1, it.y1);
					sink->BeginFigure (D2D1::Point2F (it.x1 + x, it.y1 + y), D2D1_FIGURE_BEGIN_FILLED);
					break;
				}
			}
		}
	}

	static ID2D1PathGeometry* pathToPathGeometry (const Path& path, const AffineTransform& transform, const Point<int>& point)
	{
		ID2D1PathGeometry* p = nullptr;
		SharedD2DFactory::getInstance()->d2dFactory->CreatePathGeometry (&p);

		ComSmartPtr <ID2D1GeometrySink> sink;
		HRESULT hr = p->Open (sink.resetAndGetPointerAddress());
		sink->SetFillMode (D2D1_FILL_MODE_WINDING); // xxx need to check Path::isUsingNonZeroWinding()

		pathToGeometrySink (path, sink, transform, point.getX(), point.getY());

		hr = sink->Close();
		return p;
	}

	static const D2D1::Matrix3x2F transformToMatrix (const AffineTransform& transform)
	{
		D2D1::Matrix3x2F matrix;
		matrix._11 = transform.mat00;
		matrix._12 = transform.mat10;
		matrix._21 = transform.mat01;
		matrix._22 = transform.mat11;
		matrix._31 = transform.mat02;
		matrix._32 = transform.mat12;
		return matrix;
	}

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Direct2DLowLevelGraphicsContext);
};

/*** End of inlined file: juce_win32_Direct2DGraphicsContext.cpp ***/


 #endif

/*** Start of inlined file: juce_win32_DirectWriteTypeface.cpp ***/
#if JUCE_USE_DIRECTWRITE
class Direct2DFactories
{
public:
	Direct2DFactories()
	{
		if (direct2dDll.open ("d2d1.dll"))
		{
			JUCE_DLL_FUNCTION (D2D1CreateFactory, d2d1CreateFactory, HRESULT, direct2dDll, (D2D1_FACTORY_TYPE, REFIID, D2D1_FACTORY_OPTIONS*, void**))

			if (d2d1CreateFactory != nullptr)
			{
				D2D1_FACTORY_OPTIONS options;
				options.debugLevel = D2D1_DEBUG_LEVEL_NONE;

				d2d1CreateFactory (D2D1_FACTORY_TYPE_SINGLE_THREADED, __uuidof (ID2D1Factory), &options,
								   (void**) d2dFactory.resetAndGetPointerAddress());
			}
		}

		if (directWriteDll.open ("DWrite.dll"))
		{
			JUCE_DLL_FUNCTION (DWriteCreateFactory, dWriteCreateFactory, HRESULT, directWriteDll, (DWRITE_FACTORY_TYPE, REFIID, IUnknown**))

			if (dWriteCreateFactory != nullptr)
			{
				dWriteCreateFactory (DWRITE_FACTORY_TYPE_SHARED, __uuidof (IDWriteFactory),
									 (IUnknown**) directWriteFactory.resetAndGetPointerAddress());

				if (directWriteFactory != nullptr)
					directWriteFactory->GetSystemFontCollection (systemFonts.resetAndGetPointerAddress());
			}
		}
	}

	~Direct2DFactories()
	{
		d2dFactory = nullptr;  // (need to make sure these are released before deleting the DynamicLibrary objects)
		directWriteFactory = nullptr;
		systemFonts = nullptr;
	}

	static const Direct2DFactories& getInstance()
	{
		static Direct2DFactories instance;
		return instance;
	}

	ComSmartPtr <ID2D1Factory> d2dFactory;
	ComSmartPtr <IDWriteFactory> directWriteFactory;
	ComSmartPtr <IDWriteFontCollection> systemFonts;

private:
	DynamicLibrary direct2dDll, directWriteDll;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (Direct2DFactories);
};

class WindowsDirectWriteTypeface  : public Typeface
{
public:
	WindowsDirectWriteTypeface (const Font& font, IDWriteFontCollection* fontCollection)
		: Typeface (font.getTypefaceName()),
		  ascent (0.0f)
	{
		jassert (fontCollection != nullptr);

		BOOL fontFound = false;
		uint32 fontIndex = 0;
		HRESULT hr = fontCollection->FindFamilyName (font.getTypefaceName().toWideCharPointer(), &fontIndex, &fontFound);
		if (! fontFound)
			fontIndex = 0;

		// Get the font family using the search results
		// Fonts like: Times New Roman, Times New Roman Bold, Times New Roman Italic are all in the same font family
		ComSmartPtr<IDWriteFontFamily> dwFontFamily;
		hr = fontCollection->GetFontFamily (fontIndex, dwFontFamily.resetAndGetPointerAddress());

		// Get a specific font in the font family using certain weight and style flags
		ComSmartPtr<IDWriteFont> dwFont;
		DWRITE_FONT_WEIGHT dwWeight = font.isBold() ? DWRITE_FONT_WEIGHT_BOLD  : DWRITE_FONT_WEIGHT_NORMAL;
		DWRITE_FONT_STYLE dwStyle = font.isItalic() ? DWRITE_FONT_STYLE_ITALIC : DWRITE_FONT_STYLE_NORMAL;

		hr = dwFontFamily->GetFirstMatchingFont (dwWeight, DWRITE_FONT_STRETCH_NORMAL, dwStyle, dwFont.resetAndGetPointerAddress());
		hr = dwFont->CreateFontFace (dwFontFace.resetAndGetPointerAddress());

		DWRITE_FONT_METRICS dwFontMetrics;
		dwFontFace->GetMetrics (&dwFontMetrics);

		// All Font Metrics are in design units so we need to get designUnitsPerEm value to get the metrics
		// into Em/Design Independent Pixels
		designUnitsPerEm = dwFontMetrics.designUnitsPerEm;

		ascent = std::abs ((float) dwFontMetrics.ascent);
		const float totalSize = ascent + std::abs ((float) dwFontMetrics.descent);
		ascent /= totalSize;
		unitsToHeightScaleFactor = 1.0f / (totalSize / designUnitsPerEm);
		const float pathAscent = (((float) dwFontMetrics.ascent) / ((float) designUnitsPerEm)) * 1024.0f;
		const float pathDescent = (((float) dwFontMetrics.descent) / ((float) designUnitsPerEm)) * 1024.0f;
		const float pathTotalSize = std::abs (pathAscent) + std::abs (pathDescent);
		pathTransform = AffineTransform::identity.scale (1.0f / pathTotalSize, 1.0f / pathTotalSize);
	}

	float getAscent() const     { return ascent; }
	float getDescent() const    { return 1.0f - ascent; }

	float getStringWidth (const String& text)
	{
		const CharPointer_UTF32 textUTF32 (text.toUTF32());
		const size_t len = textUTF32.length();

		HeapBlock <UINT16> glyphIndices (len);
		dwFontFace->GetGlyphIndices (textUTF32, (UINT32) len, glyphIndices);

		HeapBlock <DWRITE_GLYPH_METRICS> dwGlyphMetrics (len);
		dwFontFace->GetDesignGlyphMetrics (glyphIndices, (UINT32) len, dwGlyphMetrics, false);

		float x = 0;
		for (size_t i = 0; i < len; ++i)
			x += (float) dwGlyphMetrics[i].advanceWidth / designUnitsPerEm;

		return x * unitsToHeightScaleFactor;
	}

	void getGlyphPositions (const String& text, Array <int>& resultGlyphs, Array <float>& xOffsets)
	{
		xOffsets.add (0);

		const CharPointer_UTF32 textUTF32 (text.toUTF32());
		const size_t len = textUTF32.length();

		HeapBlock <UINT16> glyphIndices (len);
		dwFontFace->GetGlyphIndices (textUTF32, (UINT32) len, glyphIndices);
		HeapBlock <DWRITE_GLYPH_METRICS> dwGlyphMetrics (len);
		dwFontFace->GetDesignGlyphMetrics (glyphIndices, (UINT32) len, dwGlyphMetrics, false);

		float x = 0;
		for (size_t i = 0; i < len; ++i)
		{
			x += (float) dwGlyphMetrics[i].advanceWidth / designUnitsPerEm;
			xOffsets.add (x * unitsToHeightScaleFactor);
			resultGlyphs.add (glyphIndices[i]);
		}
	}

	EdgeTable* getEdgeTableForGlyph (int glyphNumber, const AffineTransform& transform)
	{
		Path path;

		if (getOutlineForGlyph (glyphNumber, path) && ! path.isEmpty())
			return new EdgeTable (path.getBoundsTransformed (transform).getSmallestIntegerContainer().expanded (1, 0),
								  path, transform);

		return nullptr;
	}

	bool getOutlineForGlyph (int glyphNumber, Path& path)
	{
		jassert (path.isEmpty());  // we might need to apply a transform to the path, so this must be empty
		UINT16 glyphIndex = (UINT16) glyphNumber;
		ComSmartPtr<PathGeometrySink> pathGeometrySink (new PathGeometrySink());

		dwFontFace->GetGlyphRunOutline (1024.0f, &glyphIndex, nullptr, nullptr, 1, false, false, pathGeometrySink);
		path = pathGeometrySink->path;

		if (! pathTransform.isIdentity())
			path.applyTransform (pathTransform);

		return true;
	}

private:
	ComSmartPtr<IDWriteFontFace> dwFontFace;
	float unitsToHeightScaleFactor, ascent;
	int designUnitsPerEm;
	AffineTransform pathTransform;

	class PathGeometrySink  : public ComBaseClassHelper<IDWriteGeometrySink>
	{
	public:
		PathGeometrySink()   { resetReferenceCount(); }

		void __stdcall AddBeziers (const D2D1_BEZIER_SEGMENT *beziers, UINT beziersCount)
		{
			for (UINT i = 0; i < beziersCount; ++i)
				path.cubicTo ((float) beziers[i].point1.x, (float) beziers[i].point1.y,
							  (float) beziers[i].point2.x, (float) beziers[i].point2.y,
							  (float) beziers[i].point3.x, (float) beziers[i].point3.y);
		}

		void __stdcall AddLines (const D2D1_POINT_2F* points, UINT pointsCount)
		{
			for (UINT i = 0; i < pointsCount; ++i)
				path.lineTo ((float) points[i].x,
							 (float) points[i].y);
		}

		void __stdcall BeginFigure (D2D1_POINT_2F startPoint, D2D1_FIGURE_BEGIN)
		{
			path.startNewSubPath ((float) startPoint.x,
								  (float) startPoint.y);
		}

		void __stdcall EndFigure (D2D1_FIGURE_END figureEnd)
		{
			if (figureEnd == D2D1_FIGURE_END_CLOSED)
				path.closeSubPath();
		}

		void __stdcall SetFillMode (D2D1_FILL_MODE fillMode)
		{
			path.setUsingNonZeroWinding (fillMode == D2D1_FILL_MODE_WINDING);
		}

		void __stdcall SetSegmentFlags (D2D1_PATH_SEGMENT) {}
		JUCE_COMRESULT Close()  { return S_OK; }

		Path path;

	private:
		JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (PathGeometrySink);
	};

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (WindowsDirectWriteTypeface);
};

#endif

/*** End of inlined file: juce_win32_DirectWriteTypeface.cpp ***/



/*** Start of inlined file: juce_win32_DirectWriteTypeLayout.cpp ***/
#if JUCE_USE_DIRECTWRITE
namespace DirectWriteTypeLayout
{
	class CustomDirectWriteTextRenderer   : public ComBaseClassHelper <IDWriteTextRenderer>
	{
	public:
		CustomDirectWriteTextRenderer (IDWriteFontCollection* const fontCollection_)
			: fontCollection (fontCollection_),
			  currentLine (-1),
			  lastOriginY (-10000.0f)
		{
			resetReferenceCount();
		}

		JUCE_COMRESULT QueryInterface (REFIID refId, void** result)
		{
		   #if ! JUCE_MINGW
			if (refId == __uuidof (IDWritePixelSnapping))   { AddRef(); *result = dynamic_cast <IDWritePixelSnapping*> (this); return S_OK; }
		   #else
			jassertfalse; // need to find a mingw equivalent of __uuidof to make this possible
		   #endif

			return ComBaseClassHelper<IDWriteTextRenderer>::QueryInterface (refId, result);
		}

		JUCE_COMRESULT IsPixelSnappingDisabled (void* /*clientDrawingContext*/, BOOL* isDisabled)
		{
			*isDisabled = FALSE;
			return S_OK;
		}

		JUCE_COMRESULT GetCurrentTransform (void*, DWRITE_MATRIX*)                                          { return S_OK; }
		JUCE_COMRESULT GetPixelsPerDip (void*, FLOAT*)                                                      { return S_OK; }
		JUCE_COMRESULT DrawUnderline (void*, FLOAT, FLOAT, DWRITE_UNDERLINE const*, IUnknown*)              { return S_OK; }
		JUCE_COMRESULT DrawStrikethrough (void*, FLOAT, FLOAT, DWRITE_STRIKETHROUGH const*, IUnknown*)      { return S_OK; }
		JUCE_COMRESULT DrawInlineObject (void*, FLOAT, FLOAT, IDWriteInlineObject*, BOOL, BOOL, IUnknown*)  { return E_NOTIMPL; }

		JUCE_COMRESULT DrawGlyphRun (void* clientDrawingContext, FLOAT baselineOriginX, FLOAT baselineOriginY, DWRITE_MEASURING_MODE,
									 DWRITE_GLYPH_RUN const* glyphRun, DWRITE_GLYPH_RUN_DESCRIPTION const* runDescription,
									 IUnknown* clientDrawingEffect)
		{
			TextLayout* const layout = static_cast<TextLayout*> (clientDrawingContext);

			if (baselineOriginY != lastOriginY)
			{
				lastOriginY = baselineOriginY;
				++currentLine;

				if (currentLine >= layout->getNumLines())
				{
					jassert (currentLine == layout->getNumLines());
					TextLayout::Line* const newLine = new TextLayout::Line();
					layout->addLine (newLine);
					newLine->lineOrigin = Point<float> (baselineOriginX, baselineOriginY); // The x value is only correct when dealing with LTR text
				}
			}

			TextLayout::Line& glyphLine = layout->getLine (currentLine);

			DWRITE_FONT_METRICS dwFontMetrics;
			glyphRun->fontFace->GetMetrics (&dwFontMetrics);

			glyphLine.ascent  = jmax (glyphLine.ascent,  scaledFontSize (dwFontMetrics.ascent,  dwFontMetrics, glyphRun));
			glyphLine.descent = jmax (glyphLine.descent, scaledFontSize (dwFontMetrics.descent, dwFontMetrics, glyphRun));

			int styleFlags = 0;
			const String fontName (getFontName (glyphRun, styleFlags));

			TextLayout::Run* const glyphRunLayout = new TextLayout::Run (Range<int> (runDescription->textPosition,
																					 runDescription->textPosition + runDescription->stringLength),
																		 glyphRun->glyphCount);
			glyphLine.runs.add (glyphRunLayout);

			glyphRun->fontFace->GetMetrics (&dwFontMetrics);

			const float totalHeight = std::abs ((float) dwFontMetrics.ascent) + std::abs ((float) dwFontMetrics.descent);
			const float fontHeightToEmSizeFactor = (float) dwFontMetrics.designUnitsPerEm / totalHeight;

			glyphRunLayout->font = Font (fontName, glyphRun->fontEmSize / fontHeightToEmSizeFactor, styleFlags);
			glyphRunLayout->colour = getColourOf (static_cast<ID2D1SolidColorBrush*> (clientDrawingEffect));

			const Point<float> lineOrigin (layout->getLine (currentLine).lineOrigin);
			float x = baselineOriginX - lineOrigin.x;

			for (UINT32 i = 0; i < glyphRun->glyphCount; ++i)
			{
				const float advance = glyphRun->glyphAdvances[i];

				if ((glyphRun->bidiLevel & 1) != 0)
					x -= advance;  // RTL text

				glyphRunLayout->glyphs.add (TextLayout::Glyph (glyphRun->glyphIndices[i],
															   Point<float> (x, baselineOriginY - lineOrigin.y),
															   advance));

				if ((glyphRun->bidiLevel & 1) == 0)
					x += advance;  // LTR text
			}

			return S_OK;
		}

	private:
		IDWriteFontCollection* const fontCollection;
		int currentLine;
		float lastOriginY;

		static float scaledFontSize (int n, const DWRITE_FONT_METRICS& metrics, const DWRITE_GLYPH_RUN* glyphRun) noexcept
		{
			return (std::abs ((float) n) / (float) metrics.designUnitsPerEm) * glyphRun->fontEmSize;
		}

		static Colour getColourOf (ID2D1SolidColorBrush* d2dBrush)
		{
			if (d2dBrush == nullptr)
				return Colours::black;

			const D2D1_COLOR_F colour (d2dBrush->GetColor());
			return Colour::fromFloatRGBA (colour.r, colour.g, colour.b, colour.a);
		}

		String getFontName (DWRITE_GLYPH_RUN const* glyphRun, int& styleFlags) const
		{
			ComSmartPtr<IDWriteFont> dwFont;

			HRESULT hr = fontCollection->GetFontFromFontFace (glyphRun->fontFace, dwFont.resetAndGetPointerAddress());
			jassert (dwFont != nullptr);

			if (dwFont->GetWeight() == DWRITE_FONT_WEIGHT_BOLD) styleFlags |= Font::bold;
			if (dwFont->GetStyle() == DWRITE_FONT_STYLE_ITALIC) styleFlags |= Font::italic;

			ComSmartPtr<IDWriteFontFamily> dwFontFamily;
			hr = dwFont->GetFontFamily (dwFontFamily.resetAndGetPointerAddress());
			jassert (dwFontFamily != nullptr);

			// Get the Font Family Names
			ComSmartPtr<IDWriteLocalizedStrings> dwFamilyNames;
			hr = dwFontFamily->GetFamilyNames (dwFamilyNames.resetAndGetPointerAddress());
			jassert (dwFamilyNames != nullptr);

			UINT32 index = 0;
			BOOL exists = false;
			hr = dwFamilyNames->FindLocaleName (L"en-us", &index, &exists);
			if (! exists)
				index = 0;

			UINT32 length = 0;
			hr = dwFamilyNames->GetStringLength (index, &length);

			HeapBlock <wchar_t> name (length + 1);
			hr = dwFamilyNames->GetString (index, name, length + 1);

			return String (name);
		}

		JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (CustomDirectWriteTextRenderer);
	};

	float getFontHeightToEmSizeFactor (const Font& font, IDWriteFontCollection& dwFontCollection)
	{
		BOOL fontFound = false;
		uint32 fontIndex;
		dwFontCollection.FindFamilyName (font.getTypefaceName().toWideCharPointer(), &fontIndex, &fontFound);

		if (! fontFound)
			fontIndex = 0;

		ComSmartPtr<IDWriteFontFamily> dwFontFamily;
		HRESULT hr = dwFontCollection.GetFontFamily (fontIndex, dwFontFamily.resetAndGetPointerAddress());

		ComSmartPtr<IDWriteFont> dwFont;
		hr = dwFontFamily->GetFirstMatchingFont (DWRITE_FONT_WEIGHT_NORMAL, DWRITE_FONT_STRETCH_NORMAL, DWRITE_FONT_STYLE_NORMAL,
												 dwFont.resetAndGetPointerAddress());

		ComSmartPtr<IDWriteFontFace> dwFontFace;
		hr = dwFont->CreateFontFace (dwFontFace.resetAndGetPointerAddress());

		DWRITE_FONT_METRICS dwFontMetrics;
		dwFontFace->GetMetrics (&dwFontMetrics);

		const float totalHeight = (float) (std::abs (dwFontMetrics.ascent) + std::abs (dwFontMetrics.descent));
		return dwFontMetrics.designUnitsPerEm / totalHeight;
	}

	void setTextFormatProperties (const AttributedString& text, IDWriteTextFormat* const format)
	{
		DWRITE_TEXT_ALIGNMENT alignment = DWRITE_TEXT_ALIGNMENT_LEADING;
		DWRITE_WORD_WRAPPING wrapType = DWRITE_WORD_WRAPPING_WRAP;

		switch (text.getJustification().getOnlyHorizontalFlags())
		{
			case Justification::left:                   break;
			case Justification::right:                  alignment = DWRITE_TEXT_ALIGNMENT_TRAILING; break;
			case Justification::horizontallyCentred:    alignment = DWRITE_TEXT_ALIGNMENT_CENTER; break;
			case Justification::horizontallyJustified:  break; // DirectWrite cannot justify text, default to left alignment
			default:                                    jassertfalse; break; // Illegal justification flags
		}

		switch (text.getWordWrap())
		{
			case AttributedString::none:      wrapType = DWRITE_WORD_WRAPPING_NO_WRAP; break;
			case AttributedString::byWord:    break;
			case AttributedString::byChar:    break; // DirectWrite doesn't support wrapping by character, default to word-wrap
			default:                          jassertfalse; break; // Illegal flags!
		}

		format->SetTextAlignment (alignment);
		format->SetWordWrapping (wrapType);

		// DirectWrite does not automatically set reading direction
		// This must be set correctly and manually when using RTL Scripts (Hebrew, Arabic)
		if (text.getReadingDirection() == AttributedString::rightToLeft)
			format->SetReadingDirection (DWRITE_READING_DIRECTION_RIGHT_TO_LEFT);
	}

	void addAttributedRange (const AttributedString::Attribute& attr, IDWriteTextLayout* textLayout,
							 const int textLen, ID2D1DCRenderTarget* const renderTarget, IDWriteFontCollection* const fontCollection)
	{
		DWRITE_TEXT_RANGE range;
		range.startPosition = attr.range.getStart();
		range.length = jmin (attr.range.getLength(), textLen - attr.range.getStart());

		const Font* const font = attr.getFont();

		if (font != nullptr)
		{
			textLayout->SetFontFamilyName (font->getTypefaceName().toWideCharPointer(), range);

			const float fontHeightToEmSizeFactor = getFontHeightToEmSizeFactor (*font, *fontCollection);
			textLayout->SetFontSize (font->getHeight() * fontHeightToEmSizeFactor, range);

			if (font->isBold())     textLayout->SetFontWeight (DWRITE_FONT_WEIGHT_BOLD, range);
			if (font->isItalic())   textLayout->SetFontStyle (DWRITE_FONT_STYLE_ITALIC, range);
		}

		if (attr.getColour() != nullptr)
		{
			ComSmartPtr<ID2D1SolidColorBrush> d2dBrush;
			renderTarget->CreateSolidColorBrush (D2D1::ColorF (D2D1::ColorF (attr.getColour()->getFloatRed(),
																			 attr.getColour()->getFloatGreen(),
																			 attr.getColour()->getFloatBlue(),
																			 attr.getColour()->getFloatAlpha())),
												 d2dBrush.resetAndGetPointerAddress());

			// We need to call SetDrawingEffect with a legimate brush to get DirectWrite to break text based on colours
			textLayout->SetDrawingEffect (d2dBrush, range);
		}
	}

	void createLayout (TextLayout& layout, const AttributedString& text, IDWriteFactory* const directWriteFactory,
					   ID2D1Factory* const direct2dFactory, IDWriteFontCollection* const fontCollection)
	{
		// To add color to text, we need to create a D2D render target
		// Since we are not actually rendering to a D2D context we create a temporary GDI render target

		D2D1_RENDER_TARGET_PROPERTIES d2dRTProp = D2D1::RenderTargetProperties (D2D1_RENDER_TARGET_TYPE_SOFTWARE,
																				D2D1::PixelFormat (DXGI_FORMAT_B8G8R8A8_UNORM,
																								   D2D1_ALPHA_MODE_IGNORE),
																				0, 0,
																				D2D1_RENDER_TARGET_USAGE_GDI_COMPATIBLE,
																				D2D1_FEATURE_LEVEL_DEFAULT);
		ComSmartPtr<ID2D1DCRenderTarget> renderTarget;
		HRESULT hr = direct2dFactory->CreateDCRenderTarget (&d2dRTProp, renderTarget.resetAndGetPointerAddress());

		Font defaultFont;
		const float defaultFontHeightToEmSizeFactor = getFontHeightToEmSizeFactor (defaultFont, *fontCollection);

		jassert (directWriteFactory != nullptr);

		ComSmartPtr<IDWriteTextFormat> dwTextFormat;
		hr = directWriteFactory->CreateTextFormat (defaultFont.getTypefaceName().toWideCharPointer(), fontCollection,
												   DWRITE_FONT_WEIGHT_REGULAR, DWRITE_FONT_STYLE_NORMAL, DWRITE_FONT_STRETCH_NORMAL,
												   defaultFont.getHeight() * defaultFontHeightToEmSizeFactor,
												   L"en-us", dwTextFormat.resetAndGetPointerAddress());

		setTextFormatProperties (text, dwTextFormat);

		const int textLen = text.getText().length();

		ComSmartPtr<IDWriteTextLayout> dwTextLayout;
		hr = directWriteFactory->CreateTextLayout (text.getText().toWideCharPointer(), textLen,
												   dwTextFormat, layout.getWidth(),
												   1.0e7f, dwTextLayout.resetAndGetPointerAddress());

		const int numAttributes = text.getNumAttributes();

		for (int i = 0; i < numAttributes; ++i)
			addAttributedRange (*text.getAttribute (i), dwTextLayout, textLen, renderTarget, fontCollection);

		UINT32 actualLineCount = 0;
		hr = dwTextLayout->GetLineMetrics (nullptr, 0, &actualLineCount);

		layout.ensureStorageAllocated (actualLineCount);

		{
			ComSmartPtr<CustomDirectWriteTextRenderer> textRenderer (new CustomDirectWriteTextRenderer (fontCollection));
			hr = dwTextLayout->Draw (&layout, textRenderer, 0, 0);
		}

		HeapBlock <DWRITE_LINE_METRICS> dwLineMetrics (actualLineCount);
		hr = dwTextLayout->GetLineMetrics (dwLineMetrics, actualLineCount, &actualLineCount);
		int lastLocation = 0;
		const int numLines = jmin ((int) actualLineCount, layout.getNumLines());

		for (int i = 0; i < numLines; ++i)
		{
			lastLocation = dwLineMetrics[i].length;
			layout.getLine(i).stringRange = Range<int> (lastLocation, (int) lastLocation + dwLineMetrics[i].length);
		}
	}
}
#endif

bool TextLayout::createNativeLayout (const AttributedString& text)
{
   #if JUCE_USE_DIRECTWRITE
	const Direct2DFactories& factories = Direct2DFactories::getInstance();

	if (factories.d2dFactory != nullptr && factories.systemFonts != nullptr)
	{
		DirectWriteTypeLayout::createLayout (*this, text, factories.directWriteFactory,
											 factories.d2dFactory, factories.systemFonts);
		return true;
	}
   #else
	(void) text;
   #endif

	return false;
}

/*** End of inlined file: juce_win32_DirectWriteTypeLayout.cpp ***/


/*** Start of inlined file: juce_win32_Fonts.cpp ***/
namespace FontEnumerators
{
	int CALLBACK fontEnum2 (ENUMLOGFONTEXW* lpelfe, NEWTEXTMETRICEXW*, int type, LPARAM lParam)
	{
		if (lpelfe != nullptr && (type & RASTER_FONTTYPE) == 0)
		{
			const String fontName (lpelfe->elfLogFont.lfFaceName);
			((StringArray*) lParam)->addIfNotAlreadyThere (fontName.removeCharacters ("@"));
		}

		return 1;
	}

	int CALLBACK fontEnum1 (ENUMLOGFONTEXW* lpelfe, NEWTEXTMETRICEXW*, int type, LPARAM lParam)
	{
		if (lpelfe != nullptr && (type & RASTER_FONTTYPE) == 0)
		{
			LOGFONTW lf = { 0 };
			lf.lfWeight = FW_DONTCARE;
			lf.lfOutPrecision = OUT_OUTLINE_PRECIS;
			lf.lfQuality = DEFAULT_QUALITY;
			lf.lfCharSet = DEFAULT_CHARSET;
			lf.lfClipPrecision = CLIP_DEFAULT_PRECIS;
			lf.lfPitchAndFamily = FF_DONTCARE;

			const String fontName (lpelfe->elfLogFont.lfFaceName);
			fontName.copyToUTF16 (lf.lfFaceName, sizeof (lf.lfFaceName));

			HDC dc = CreateCompatibleDC (0);
			EnumFontFamiliesEx (dc, &lf,
								(FONTENUMPROCW) &fontEnum2,
								lParam, 0);
			DeleteDC (dc);
		}

		return 1;
	}
}

StringArray Font::findAllTypefaceNames()
{
	StringArray results;
	HDC dc = CreateCompatibleDC (0);

	{
		LOGFONTW lf = { 0 };
		lf.lfWeight = FW_DONTCARE;
		lf.lfOutPrecision = OUT_OUTLINE_PRECIS;
		lf.lfQuality = DEFAULT_QUALITY;
		lf.lfCharSet = DEFAULT_CHARSET;
		lf.lfClipPrecision = CLIP_DEFAULT_PRECIS;
		lf.lfPitchAndFamily = FF_DONTCARE;

		EnumFontFamiliesEx (dc, &lf,
							(FONTENUMPROCW) &FontEnumerators::fontEnum1,
							(LPARAM) &results, 0);
	}

	DeleteDC (dc);

	results.sort (true);
	return results;
}

extern bool juce_IsRunningInWine();

struct DefaultFontNames
{
	DefaultFontNames()
	{
		if (juce_IsRunningInWine())
		{
			// If we're running in Wine, then use fonts that might be available on Linux..
			defaultSans     = "Bitstream Vera Sans";
			defaultSerif    = "Bitstream Vera Serif";
			defaultFixed    = "Bitstream Vera Sans Mono";
		}
		else
		{
			defaultSans     = "Verdana";
			defaultSerif    = "Times";
			defaultFixed    = "Lucida Console";
			defaultFallback = "Tahoma";  // (contains plenty of unicode characters)
		}
	}

	String defaultSans, defaultSerif, defaultFixed, defaultFallback;
};

Typeface::Ptr Font::getDefaultTypefaceForFont (const Font& font)
{
	static DefaultFontNames defaultNames;

	String faceName (font.getTypefaceName());

	if (faceName == Font::getDefaultSansSerifFontName())       faceName = defaultNames.defaultSans;
	else if (faceName == Font::getDefaultSerifFontName())      faceName = defaultNames.defaultSerif;
	else if (faceName == Font::getDefaultMonospacedFontName()) faceName = defaultNames.defaultFixed;

	Font f (font);
	f.setTypefaceName (faceName);
	return Typeface::createSystemTypefaceFor (f);
}

class WindowsTypeface   : public Typeface
{
public:
	WindowsTypeface (const Font& font)
		: Typeface (font.getTypefaceName()),
		  fontH (0),
		  previousFontH (0),
		  dc (CreateCompatibleDC (0)),
		  ascent (1.0f),
		  defaultGlyph (-1),
		  bold (font.isBold()),
		  italic (font.isItalic())
	{
		loadFont();

		if (GetTextMetrics (dc, &tm))
		{
			ascent = tm.tmAscent / (float) tm.tmHeight;
			defaultGlyph = getGlyphForChar (dc, tm.tmDefaultChar);
			createKerningPairs (dc, (float) tm.tmHeight);
		}
	}

	~WindowsTypeface()
	{
		SelectObject (dc, previousFontH); // Replacing the previous font before deleting the DC avoids a warning in BoundsChecker
		DeleteDC (dc);

		if (fontH != 0)
			DeleteObject (fontH);
	}

	float getAscent() const     { return ascent; }
	float getDescent() const    { return 1.0f - ascent; }

	float getStringWidth (const String& text)
	{
		const CharPointer_UTF16 utf16 (text.toUTF16());
		const size_t numChars = utf16.length();
		HeapBlock<int16> results (numChars + 1);
		results[numChars] = -1;
		float x = 0;

		if (GetGlyphIndices (dc, utf16, (int) numChars, reinterpret_cast <WORD*> (results.getData()),
							 GGI_MARK_NONEXISTING_GLYPHS) != GDI_ERROR)
		{
			for (size_t i = 0; i < numChars; ++i)
				x += getKerning (dc, results[i], results[i + 1]);
		}

		return x;
	}

	void getGlyphPositions (const String& text, Array <int>& resultGlyphs, Array <float>& xOffsets)
	{
		const CharPointer_UTF16 utf16 (text.toUTF16());
		const size_t numChars = utf16.length();
		HeapBlock<int16> results (numChars + 1);
		results[numChars] = -1;
		float x = 0;

		if (GetGlyphIndices (dc, utf16, (int) numChars, reinterpret_cast <WORD*> (results.getData()),
							 GGI_MARK_NONEXISTING_GLYPHS) != GDI_ERROR)
		{
			resultGlyphs.ensureStorageAllocated ((int) numChars);
			xOffsets.ensureStorageAllocated ((int) numChars + 1);

			for (size_t i = 0; i < numChars; ++i)
			{
				resultGlyphs.add (results[i]);
				xOffsets.add (x);
				x += getKerning (dc, results[i], results[i + 1]);
			}
		}

		xOffsets.add (x);
	}

	bool getOutlineForGlyph (int glyphNumber, Path& glyphPath)
	{
		if (glyphNumber < 0)
			glyphNumber = defaultGlyph;

		GLYPHMETRICS gm;
		// (although GetGlyphOutline returns a DWORD, it may be -1 on failure, so treat it as signed int..)
		const int bufSize = (int) GetGlyphOutline (dc, (UINT) glyphNumber, GGO_NATIVE | GGO_GLYPH_INDEX,
												   &gm, 0, 0, &identityMatrix);

		if (bufSize > 0)
		{
			HeapBlock<char> data (bufSize);
			GetGlyphOutline (dc, (UINT) glyphNumber, GGO_NATIVE | GGO_GLYPH_INDEX, &gm,
							 bufSize, data, &identityMatrix);

			const TTPOLYGONHEADER* pheader = reinterpret_cast<TTPOLYGONHEADER*> (data.getData());

			const float scaleX = 1.0f / tm.tmHeight;
			const float scaleY = -scaleX;

			while ((char*) pheader < data + bufSize)
			{
				glyphPath.startNewSubPath (scaleX * pheader->pfxStart.x.value,
										   scaleY * pheader->pfxStart.y.value);

				const TTPOLYCURVE* curve = (const TTPOLYCURVE*) ((const char*) pheader + sizeof (TTPOLYGONHEADER));
				const char* const curveEnd = ((const char*) pheader) + pheader->cb;

				while ((const char*) curve < curveEnd)
				{
					if (curve->wType == TT_PRIM_LINE)
					{
						for (int i = 0; i < curve->cpfx; ++i)
							glyphPath.lineTo (scaleX * curve->apfx[i].x.value,
											  scaleY * curve->apfx[i].y.value);
					}
					else if (curve->wType == TT_PRIM_QSPLINE)
					{
						for (int i = 0; i < curve->cpfx - 1; ++i)
						{
							const float x2 = scaleX * curve->apfx[i].x.value;
							const float y2 = scaleY * curve->apfx[i].y.value;
							float x3       = scaleX * curve->apfx[i + 1].x.value;
							float y3       = scaleY * curve->apfx[i + 1].y.value;

							if (i < curve->cpfx - 2)
							{
								x3 = 0.5f * (x2 + x3);
								y3 = 0.5f * (y2 + y3);
							}

							glyphPath.quadraticTo (x2, y2, x3, y3);
						}
					}

					curve = (const TTPOLYCURVE*) &(curve->apfx [curve->cpfx]);
				}

				pheader = (const TTPOLYGONHEADER*) curve;

				glyphPath.closeSubPath();
			}
		}

		return true;
	}

private:
	static const MAT2 identityMatrix;
	HFONT fontH;
	HGDIOBJ previousFontH;
	HDC dc;
	TEXTMETRIC tm;
	float ascent;
	int defaultGlyph;
	bool bold, italic;

	struct KerningPair
	{
		int glyph1, glyph2;
		float kerning;

		bool operator== (const KerningPair& other) const noexcept
		{
			return glyph1 == other.glyph1 && glyph2 == other.glyph2;
		}

		bool operator< (const KerningPair& other) const noexcept
		{
			return glyph1 < other.glyph1
					|| (glyph1 == other.glyph1 && glyph2 < other.glyph2);
		}
	};

	SortedSet<KerningPair> kerningPairs;

	void loadFont()
	{
		SetMapperFlags (dc, 0);
		SetMapMode (dc, MM_TEXT);

		LOGFONTW lf = { 0 };
		lf.lfCharSet = DEFAULT_CHARSET;
		lf.lfClipPrecision = CLIP_DEFAULT_PRECIS;
		lf.lfOutPrecision = OUT_OUTLINE_PRECIS;
		lf.lfPitchAndFamily = DEFAULT_PITCH | FF_DONTCARE;
		lf.lfQuality = PROOF_QUALITY;
		lf.lfItalic = (BYTE) (italic ? TRUE : FALSE);
		lf.lfWeight = bold ? FW_BOLD : FW_NORMAL;
		lf.lfHeight = -256;
		name.copyToUTF16 (lf.lfFaceName, sizeof (lf.lfFaceName));

		HFONT standardSizedFont = CreateFontIndirect (&lf);

		if (standardSizedFont != 0)
		{
			if ((previousFontH = SelectObject (dc, standardSizedFont)) != 0)
			{
				fontH = standardSizedFont;

				OUTLINETEXTMETRIC otm;
				if (GetOutlineTextMetrics (dc, sizeof (otm), &otm) != 0)
				{
					lf.lfHeight = -(int) otm.otmEMSquare;
					fontH = CreateFontIndirect (&lf);

					SelectObject (dc, fontH);
					DeleteObject (standardSizedFont);
				}
			}
		}
	}

	void createKerningPairs (HDC dc, const float height)
	{
		HeapBlock<KERNINGPAIR> rawKerning;
		const DWORD numKPs = GetKerningPairs (dc, 0, 0);
		rawKerning.calloc (numKPs);
		GetKerningPairs (dc, numKPs, rawKerning);

		kerningPairs.ensureStorageAllocated ((int) numKPs);

		for (DWORD i = 0; i < numKPs; ++i)
		{
			KerningPair kp;
			kp.glyph1 = getGlyphForChar (dc, rawKerning[i].wFirst);
			kp.glyph2 = getGlyphForChar (dc, rawKerning[i].wSecond);

			const int standardWidth = getGlyphWidth (dc, kp.glyph1);
			kp.kerning = (standardWidth + rawKerning[i].iKernAmount) / height;
			kerningPairs.add (kp);

			kp.glyph2 = -1;  // add another entry for the standard width version..
			kp.kerning = standardWidth / height;
			kerningPairs.add (kp);
		}
	}

	static int getGlyphForChar (HDC dc, juce_wchar character)
	{
		const WCHAR charToTest[] = { (WCHAR) character, 0 };
		WORD index = 0;

		if (GetGlyphIndices (dc, charToTest, 1, &index, GGI_MARK_NONEXISTING_GLYPHS) == GDI_ERROR
			  || index == 0xffff)
			return -1;

		return index;
	}

	static int getGlyphWidth (HDC dc, int glyphNumber)
	{
		GLYPHMETRICS gm;
		gm.gmCellIncX = 0;
		GetGlyphOutline (dc, (UINT) glyphNumber, GGO_NATIVE | GGO_GLYPH_INDEX, &gm, 0, 0, &identityMatrix);
		return gm.gmCellIncX;
	}

	float getKerning (HDC dc, const int glyph1, const int glyph2)
	{
		KerningPair kp;
		kp.glyph1 = glyph1;
		kp.glyph2 = glyph2;
		int index = kerningPairs.indexOf (kp);

		if (index < 0)
		{
			kp.glyph2 = -1;
			index = kerningPairs.indexOf (kp);

			if (index < 0)
			{
				kp.glyph2 = -1;
				kp.kerning = getGlyphWidth (dc, kp.glyph1) / (float) tm.tmHeight;
				kerningPairs.add (kp);
				return kp.kerning;
			}
		}

		return kerningPairs.getReference (index).kerning;
	}

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (WindowsTypeface);
};

const MAT2 WindowsTypeface::identityMatrix = { { 0, 1 }, { 0, 0 }, { 0, 0 }, { 0, 1 } };

Typeface::Ptr Typeface::createSystemTypefaceFor (const Font& font)
{
   #if JUCE_USE_DIRECTWRITE
	const Direct2DFactories& factories = Direct2DFactories::getInstance();

	if (factories.systemFonts != nullptr)
		return new WindowsDirectWriteTypeface (font, factories.systemFonts);
	else
   #endif
		return new WindowsTypeface (font);
}

/*** End of inlined file: juce_win32_Fonts.cpp ***/

#elif JUCE_LINUX

/*** Start of inlined file: juce_linux_Fonts.cpp ***/
struct FTLibWrapper     : public ReferenceCountedObject
{
	FTLibWrapper() : library (0)
	{
		if (FT_Init_FreeType (&library) != 0)
		{
			library = 0;
			DBG ("Failed to initialize FreeType");
		}
	}

	~FTLibWrapper()
	{
		if (library != 0)
			FT_Done_FreeType (library);
	}

	FT_Library library;

	typedef ReferenceCountedObjectPtr <FTLibWrapper> Ptr;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FTLibWrapper);
};

struct FTFaceWrapper     : public ReferenceCountedObject
{
	FTFaceWrapper (const FTLibWrapper::Ptr& ftLib, const File& file, int faceIndex)
		: face (0), library (ftLib)
	{
		if (FT_New_Face (ftLib->library, file.getFullPathName().toUTF8(), faceIndex, &face) != 0)
			face = 0;
	}

	~FTFaceWrapper()
	{
		if (face != 0)
			FT_Done_Face (face);
	}

	FT_Face face;
	FTLibWrapper::Ptr library;

	typedef ReferenceCountedObjectPtr <FTFaceWrapper> Ptr;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FTFaceWrapper);
};

class LinuxFontFileIterator
{
public:
	LinuxFontFileIterator()
		: index (0)
	{
		fontDirs.addTokens (CharPointer_UTF8 (getenv ("JUCE_FONT_PATH")), ";,", String::empty);
		fontDirs.removeEmptyStrings (true);

		if (fontDirs.size() == 0)
		{
			const ScopedPointer<XmlElement> fontsInfo (XmlDocument::parse (File ("/etc/fonts/fonts.conf")));

			if (fontsInfo != nullptr)
			{
				forEachXmlChildElementWithTagName (*fontsInfo, e, "dir")
				{
					fontDirs.add (e->getAllSubText().trim());
				}
			}
		}

		if (fontDirs.size() == 0)
			fontDirs.add ("/usr/X11R6/lib/X11/fonts");

		fontDirs.removeEmptyStrings (true);
	}

	bool next()
	{
		if (iter != nullptr)
		{
			while (iter->next())
				if (getFile().hasFileExtension ("ttf;pfb;pcf"))
					return true;
		}

		if (index >= fontDirs.size())
			return false;

		iter = new DirectoryIterator (fontDirs [index++], true);
		return next();
	}

	File getFile() const    { jassert (iter != nullptr); return iter->getFile(); }

private:
	StringArray fontDirs;
	int index;
	ScopedPointer<DirectoryIterator> iter;

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (LinuxFontFileIterator);
};

class FTTypefaceList  : public DeletedAtShutdown
{
public:
	FTTypefaceList()
		: library (new FTLibWrapper())
	{
		LinuxFontFileIterator fontFileIterator;

		while (fontFileIterator.next())
		{
			int faceIndex = 0;
			int numFaces = 0;

			do
			{
				FTFaceWrapper face (library, fontFileIterator.getFile(), faceIndex);

				if (face.face != 0)
				{
					if (faceIndex == 0)
						numFaces = face.face->num_faces;

					if ((face.face->face_flags & FT_FACE_FLAG_SCALABLE) != 0)
						faces.add (new KnownTypeface (fontFileIterator.getFile(), faceIndex, face));
				}

				++faceIndex;
			}
			while (faceIndex < numFaces);
		}
	}

	~FTTypefaceList()
	{
		clearSingletonInstance();
	}

	struct KnownTypeface
	{
		KnownTypeface (const File& file_, const int faceIndex_, const FTFaceWrapper& face)
		   : file (file_),
			 family (face.face->family_name),
			 faceIndex (faceIndex_),
			 isBold   ((face.face->style_flags & FT_STYLE_FLAG_BOLD) != 0),
			 isItalic ((face.face->style_flags & FT_STYLE_FLAG_ITALIC) != 0),
			 isMonospaced ((face.face->face_flags & FT_FACE_FLAG_FIXED_WIDTH) != 0),
			 isSansSerif (isFaceSansSerif (family))
		{
		}

		const File file;
		const String family;
		const int faceIndex;
		const bool isBold, isItalic, isMonospaced, isSansSerif;

		JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (KnownTypeface);
	};

	FTFaceWrapper::Ptr createFace (const String& fontName, const bool bold, const bool italic)
	{
		const KnownTypeface* ftFace = matchTypeface (fontName, bold, italic);

		if (ftFace == nullptr)
		{
			ftFace = matchTypeface (fontName, ! bold, italic);

			if (ftFace == nullptr)
			{
				ftFace = matchTypeface (fontName, bold, ! italic);

				if (ftFace == nullptr)
					ftFace = matchTypeface (fontName, ! bold, ! italic);
			}
		}

		if (ftFace != nullptr)
		{
			FTFaceWrapper::Ptr face (new FTFaceWrapper (library, ftFace->file, ftFace->faceIndex));

			if (face->face != 0)
			{
				// If there isn't a unicode charmap then select the first one.
				if (FT_Select_Charmap (face->face, ft_encoding_unicode) != 0)
					FT_Set_Charmap (face->face, face->face->charmaps[0]);

				return face;
			}
		}

		return nullptr;
	}

	void getFamilyNames (StringArray& familyNames) const
	{
		for (int i = 0; i < faces.size(); i++)
			familyNames.addIfNotAlreadyThere (faces.getUnchecked(i)->family);
	}

	void getMonospacedNames (StringArray& monoSpaced) const
	{
		for (int i = 0; i < faces.size(); i++)
			if (faces.getUnchecked(i)->isMonospaced)
				monoSpaced.addIfNotAlreadyThere (faces.getUnchecked(i)->family);
	}

	void getSerifNames (StringArray& serif) const
	{
		for (int i = 0; i < faces.size(); i++)
			if (! faces.getUnchecked(i)->isSansSerif)
				serif.addIfNotAlreadyThere (faces.getUnchecked(i)->family);
	}

	void getSansSerifNames (StringArray& sansSerif) const
	{
		for (int i = 0; i < faces.size(); i++)
			if (faces.getUnchecked(i)->isSansSerif)
				sansSerif.addIfNotAlreadyThere (faces.getUnchecked(i)->family);
	}

	juce_DeclareSingleton_SingleThreaded_Minimal (FTTypefaceList);

private:
	FTLibWrapper::Ptr library;
	OwnedArray<KnownTypeface> faces;

	const KnownTypeface* matchTypeface (const String& familyName, const bool wantBold, const bool wantItalic) const noexcept
	{
		for (int i = 0; i < faces.size(); ++i)
		{
			const KnownTypeface* const face = faces.getUnchecked(i);

			if (face->family == familyName
				  && face->isBold == wantBold
				  && face->isItalic == wantItalic)
				return face;
		}

		return nullptr;
	}

	static bool isFaceSansSerif (const String& family)
	{
		const char* sansNames[] = { "Sans", "Verdana", "Arial", "Ubuntu" };

		for (int i = 0; i < numElementsInArray (sansNames); ++i)
			if (family.containsIgnoreCase (sansNames[i]))
				return true;

		return false;
	}

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (FTTypefaceList);
};

juce_ImplementSingleton_SingleThreaded (FTTypefaceList)

class FreeTypeTypeface   : public CustomTypeface
{
public:
	FreeTypeTypeface (const Font& font)
		: faceWrapper (FTTypefaceList::getInstance()
						   ->createFace (font.getTypefaceName(), font.isBold(), font.isItalic()))
	{
		if (faceWrapper != nullptr)
		{
			setCharacteristics (font.getTypefaceName(),
								faceWrapper->face->ascender / (float) (faceWrapper->face->ascender - faceWrapper->face->descender),
								font.isBold(), font.isItalic(),
								L' ');
		}
		else
		{
			DBG ("Failed to create typeface: " << font.getTypefaceName() << " "
				  << (font.isBold() ? 'B' : ' ') << (font.isItalic() ? 'I' : ' '));
		}
	}

	bool loadGlyphIfPossible (const juce_wchar character)
	{
		if (faceWrapper != nullptr)
		{
			FT_Face face = faceWrapper->face;
			const unsigned int glyphIndex = FT_Get_Char_Index (face, character);

			if (FT_Load_Glyph (face, glyphIndex, FT_LOAD_NO_SCALE | FT_LOAD_NO_BITMAP | FT_LOAD_IGNORE_TRANSFORM) == 0
				  && face->glyph->format == ft_glyph_format_outline)
			{
				const float scale = 1.0f / (float) (face->ascender - face->descender);
				Path destShape;

				if (getGlyphShape (destShape, face->glyph->outline, scale))
				{
					addGlyph (character, destShape, face->glyph->metrics.horiAdvance * scale);

					if ((face->face_flags & FT_FACE_FLAG_KERNING) != 0)
						addKerning (face, character, glyphIndex);

					return true;
				}
			}
		}

		return false;
	}

private:
	FTFaceWrapper::Ptr faceWrapper;

	bool getGlyphShape (Path& destShape, const FT_Outline& outline, const float scaleX)
	{
		const float scaleY = -scaleX;
		const short* const contours = outline.contours;
		const char* const tags = outline.tags;
		const FT_Vector* const points = outline.points;

		for (int c = 0; c < outline.n_contours; ++c)
		{
			const int startPoint = (c == 0) ? 0 : contours [c - 1] + 1;
			const int endPoint = contours[c];

			for (int p = startPoint; p <= endPoint; ++p)
			{
				const float x = scaleX * points[p].x;
				const float y = scaleY * points[p].y;

				if (p == startPoint)
				{
					if (FT_CURVE_TAG (tags[p]) == FT_Curve_Tag_Conic)
					{
						float x2 = scaleX * points [endPoint].x;
						float y2 = scaleY * points [endPoint].y;

						if (FT_CURVE_TAG (tags[endPoint]) != FT_Curve_Tag_On)
						{
							x2 = (x + x2) * 0.5f;
							y2 = (y + y2) * 0.5f;
						}

						destShape.startNewSubPath (x2, y2);
					}
					else
					{
						destShape.startNewSubPath (x, y);
					}
				}

				if (FT_CURVE_TAG (tags[p]) == FT_Curve_Tag_On)
				{
					if (p != startPoint)
						destShape.lineTo (x, y);
				}
				else if (FT_CURVE_TAG (tags[p]) == FT_Curve_Tag_Conic)
				{
					const int nextIndex = (p == endPoint) ? startPoint : p + 1;
					float x2 = scaleX * points [nextIndex].x;
					float y2 = scaleY * points [nextIndex].y;

					if (FT_CURVE_TAG (tags [nextIndex]) == FT_Curve_Tag_Conic)
					{
						x2 = (x + x2) * 0.5f;
						y2 = (y + y2) * 0.5f;
					}
					else
					{
						++p;
					}

					destShape.quadraticTo (x, y, x2, y2);
				}
				else if (FT_CURVE_TAG (tags[p]) == FT_Curve_Tag_Cubic)
				{
					const int next1 = p + 1;
					const int next2 = (p == (endPoint - 1)) ? startPoint : (p + 2);

					if (p >= endPoint
						 || FT_CURVE_TAG (tags[next1]) != FT_Curve_Tag_Cubic
						 || FT_CURVE_TAG (tags[next2]) != FT_Curve_Tag_On)
						return false;

					const float x2 = scaleX * points [next1].x;
					const float y2 = scaleY * points [next1].y;
					const float x3 = scaleX * points [next2].x;
					const float y3 = scaleY * points [next2].y;

					destShape.cubicTo (x, y, x2, y2, x3, y3);
					p += 2;
				}
			}

			destShape.closeSubPath();
		}

		return true;
	}

	void addKerning (FT_Face face, const uint32 character, const uint32 glyphIndex)
	{
		const float height = (float) (face->ascender - face->descender);

		uint32 rightGlyphIndex;
		uint32 rightCharCode = FT_Get_First_Char (face, &rightGlyphIndex);

		while (rightGlyphIndex != 0)
		{
			FT_Vector kerning;

			if (FT_Get_Kerning (face, glyphIndex, rightGlyphIndex, ft_kerning_unscaled, &kerning) == 0
				   && kerning.x != 0)
				addKerningPair (character, rightCharCode, kerning.x / height);

			rightCharCode = FT_Get_Next_Char (face, rightCharCode, &rightGlyphIndex);
		}
	}

	JUCE_DECLARE_NON_COPYABLE (FreeTypeTypeface);
};

Typeface::Ptr Typeface::createSystemTypefaceFor (const Font& font)
{
	return new FreeTypeTypeface (font);
}

StringArray Font::findAllTypefaceNames()
{
	StringArray s;
	FTTypefaceList::getInstance()->getFamilyNames (s);
	s.sort (true);
	return s;
}

struct DefaultFontNames
{
	DefaultFontNames()
		: defaultSans  (getDefaultSansSerifFontName()),
		  defaultSerif (getDefaultSerifFontName()),
		  defaultFixed (getDefaultMonospacedFontName())
	{
	}

	String defaultSans, defaultSerif, defaultFixed;

private:
	static String pickBestFont (const StringArray& names, const char* const* choicesArray)
	{
		const StringArray choices (choicesArray);

		int j;
		for (j = 0; j < choices.size(); ++j)
			if (names.contains (choices[j], true))
				return choices[j];

		for (j = 0; j < choices.size(); ++j)
			for (int i = 0; i < names.size(); ++i)
				if (names[i].startsWithIgnoreCase (choices[j]))
					return names[i];

		for (j = 0; j < choices.size(); ++j)
			for (int i = 0; i < names.size(); ++i)
				if (names[i].containsIgnoreCase (choices[j]))
					return names[i];

		return names[0];
	}

	static String getDefaultSansSerifFontName()
	{
		StringArray allFonts;
		FTTypefaceList::getInstance()->getSansSerifNames (allFonts);

		const char* targets[] = { "Verdana", "Bitstream Vera Sans", "Luxi Sans", "Sans", 0 };
		return pickBestFont (allFonts, targets);
	}

	static String getDefaultSerifFontName()
	{
		StringArray allFonts;
		FTTypefaceList::getInstance()->getSerifNames (allFonts);

		const char* targets[] = { "Bitstream Vera Serif", "Times", "Nimbus Roman", "Serif", 0 };
		return pickBestFont (allFonts, targets);
	}

	static String getDefaultMonospacedFontName()
	{
		StringArray allFonts;
		FTTypefaceList::getInstance()->getMonospacedNames (allFonts);

		const char* targets[] = { "Bitstream Vera Sans Mono", "Courier", "Sans Mono", "Mono", 0 };
		return pickBestFont (allFonts, targets);
	}

	JUCE_DECLARE_NON_COPYABLE (DefaultFontNames);
};

Typeface::Ptr Font::getDefaultTypefaceForFont (const Font& font)
{
	static DefaultFontNames defaultNames;

	String faceName (font.getTypefaceName());

	if (faceName == getDefaultSansSerifFontName())       faceName = defaultNames.defaultSans;
	else if (faceName == getDefaultSerifFontName())      faceName = defaultNames.defaultSerif;
	else if (faceName == getDefaultMonospacedFontName()) faceName = defaultNames.defaultFixed;

	Font f (font);
	f.setTypefaceName (faceName);
	return Typeface::createSystemTypefaceFor (f);
}

bool TextLayout::createNativeLayout (const AttributedString&)
{
	return false;
}

/*** End of inlined file: juce_linux_Fonts.cpp ***/


#elif JUCE_ANDROID

/*** Start of inlined file: juce_android_JNIHelpers.h ***/
#ifndef __JUCE_ANDROID_JNIHELPERS_JUCEHEADER__
#define __JUCE_ANDROID_JNIHELPERS_JUCEHEADER__

#ifndef USE_ANDROID_CANVAS
 #define USE_ANDROID_CANVAS 0
#endif

#if ! (defined (JUCE_ANDROID_ACTIVITY_CLASSNAME) && defined (JUCE_ANDROID_ACTIVITY_CLASSPATH))
 #error "The JUCE_ANDROID_ACTIVITY_CLASSNAME and JUCE_ANDROID_ACTIVITY_CLASSPATH macros must be set!"
#endif

extern JNIEnv* getEnv() noexcept;

class GlobalRef
{
public:
	inline GlobalRef() noexcept                 : obj (0) {}
	inline explicit GlobalRef (jobject obj_)    : obj (retain (obj_)) {}
	inline GlobalRef (const GlobalRef& other)   : obj (retain (other.obj)) {}
	~GlobalRef()                                { clear(); }

	inline void clear()
	{
		if (obj != 0)
		{
			getEnv()->DeleteGlobalRef (obj);
			obj = 0;
		}
	}

	inline GlobalRef& operator= (const GlobalRef& other)
	{
		jobject newObj = retain (other.obj);
		clear();
		obj = newObj;
		return *this;
	}

	inline operator jobject() const noexcept    { return obj; }
	inline jobject get() const noexcept         { return obj; }

	#define DECLARE_CALL_TYPE_METHOD(returnType, typeName) \
		returnType call##typeName##Method (jmethodID methodID, ... ) const \
		{ \
			va_list args; \
			va_start (args, methodID); \
			returnType result = getEnv()->Call##typeName##MethodV (obj, methodID, args); \
			va_end (args); \
			return result; \
		}

	DECLARE_CALL_TYPE_METHOD (jobject, Object)
	DECLARE_CALL_TYPE_METHOD (jboolean, Boolean)
	DECLARE_CALL_TYPE_METHOD (jbyte, Byte)
	DECLARE_CALL_TYPE_METHOD (jchar, Char)
	DECLARE_CALL_TYPE_METHOD (jshort, Short)
	DECLARE_CALL_TYPE_METHOD (jint, Int)
	DECLARE_CALL_TYPE_METHOD (jlong, Long)
	DECLARE_CALL_TYPE_METHOD (jfloat, Float)
	DECLARE_CALL_TYPE_METHOD (jdouble, Double)
	#undef DECLARE_CALL_TYPE_METHOD

	void callVoidMethod (jmethodID methodID, ... ) const
	{
		va_list args;
		va_start (args, methodID);
		getEnv()->CallVoidMethodV (obj, methodID, args);
		va_end (args);
	}

private:

	jobject obj;

	static inline jobject retain (jobject obj_)
	{
		return obj_ == 0 ? 0 : getEnv()->NewGlobalRef (obj_);
	}
};

template <typename JavaType>
class LocalRef
{
public:
	explicit inline LocalRef (JavaType obj_) noexcept   : obj (obj_){}
	inline LocalRef (const LocalRef& other) noexcept    : obj (retain (other.obj)) {}
	~LocalRef()                                         { clear(); }

	void clear()
	{
		if (obj != 0)
			getEnv()->DeleteLocalRef (obj);
	}

	LocalRef& operator= (const LocalRef& other)
	{
		jobject newObj = retain (other.obj);
		clear();
		obj = newObj;
		return *this;
	}

	inline operator JavaType() const noexcept   { return obj; }
	inline JavaType get() const noexcept        { return obj; }

private:
	JavaType obj;

	static JavaType retain (JavaType obj_)
	{
		return obj_ == 0 ? 0 : (JavaType) getEnv()->NewLocalRef (obj_);
	}
};

namespace
{
	String juceString (JNIEnv* env, jstring s)
	{
		jboolean isCopy;
		const char* const utf8 = env->GetStringUTFChars (s, &isCopy);
		CharPointer_UTF8 utf8CP (utf8);
		const String result (utf8CP);
		env->ReleaseStringUTFChars (s, utf8);
		return result;
	}

	String juceString (jstring s)
	{
		return juceString (getEnv(), s);
	}

	LocalRef<jstring> javaString (const String& s)
	{
		return LocalRef<jstring> (getEnv()->NewStringUTF (s.toUTF8()));
	}

	LocalRef<jstring> javaStringFromChar (const juce_wchar c)
	{
		char utf8[8] = { 0 };
		CharPointer_UTF8 (utf8).write (c);
		return LocalRef<jstring> (getEnv()->NewStringUTF (utf8));
	}
}

class JNIClassBase
{
public:
	explicit JNIClassBase (const char* classPath_);
	virtual ~JNIClassBase();

	inline operator jclass() const noexcept { return classRef; }

	static void initialiseAllClasses (JNIEnv*);
	static void releaseAllClasses (JNIEnv*);

protected:
	virtual void initialiseFields (JNIEnv*) = 0;

	jmethodID resolveMethod (JNIEnv*, const char* methodName, const char* params);
	jmethodID resolveStaticMethod (JNIEnv*, const char* methodName, const char* params);
	jfieldID resolveField (JNIEnv*, const char* fieldName, const char* signature);
	jfieldID resolveStaticField (JNIEnv*, const char* fieldName, const char* signature);

private:
	const char* const classPath;
	jclass classRef;

	static Array<JNIClassBase*>& getClasses();
	void initialise (JNIEnv*);
	void release (JNIEnv*);

	JUCE_DECLARE_NON_COPYABLE (JNIClassBase);
};

#define CREATE_JNI_METHOD(methodID, stringName, params)         methodID = resolveMethod (env, stringName, params);
#define CREATE_JNI_STATICMETHOD(methodID, stringName, params)   methodID = resolveStaticMethod (env, stringName, params);
#define CREATE_JNI_FIELD(fieldID, stringName, signature)        fieldID  = resolveField (env, stringName, signature);
#define CREATE_JNI_STATICFIELD(fieldID, stringName, signature)  fieldID  = resolveStaticField (env, stringName, signature);
#define DECLARE_JNI_METHOD(methodID, stringName, params)        jmethodID methodID;
#define DECLARE_JNI_FIELD(fieldID, stringName, signature)       jfieldID  fieldID;

#define DECLARE_JNI_CLASS(CppClassName, javaPath) \
	class CppClassName ## _Class   : public JNIClassBase \
	{ \
	public: \
		CppClassName ## _Class() : JNIClassBase (javaPath) {} \
	\
		void initialiseFields (JNIEnv* env) \
		{ \
			JNI_CLASS_MEMBERS (CREATE_JNI_METHOD, CREATE_JNI_STATICMETHOD, CREATE_JNI_FIELD, CREATE_JNI_STATICFIELD); \
		} \
	\
		JNI_CLASS_MEMBERS (DECLARE_JNI_METHOD, DECLARE_JNI_METHOD, DECLARE_JNI_FIELD, DECLARE_JNI_FIELD); \
	}; \
	static CppClassName ## _Class CppClassName;

#define JUCE_JNI_CALLBACK(className, methodName, returnType, params) \
  extern "C" __attribute__ ((visibility("default"))) returnType JUCE_JOIN_MACRO (JUCE_JOIN_MACRO (Java_, className), _ ## methodName) params

class AndroidSystem
{
public:
	AndroidSystem();

	void initialise (JNIEnv*, jobject activity, jstring appFile, jstring appDataDir);
	void shutdown (JNIEnv*);

	GlobalRef activity;
	String appFile, appDataDir;
	int screenWidth, screenHeight;
};

extern AndroidSystem android;

class ThreadLocalJNIEnvHolder
{
public:
	ThreadLocalJNIEnvHolder()
		: jvm (nullptr)
	{
		zeromem (threads, sizeof (threads));
		zeromem (envs, sizeof (envs));
	}

	void initialise (JNIEnv* env)
	{
		env->GetJavaVM (&jvm);
		addEnv (env);
	}

	void attach()
	{
		JNIEnv* env = nullptr;
		jvm->AttachCurrentThread (&env, 0);

		if (env != 0)
			addEnv (env);
	}

	void detach()
	{
		jvm->DetachCurrentThread();

		const pthread_t thisThread = pthread_self();

		SpinLock::ScopedLockType sl (addRemoveLock);
		for (int i = 0; i < maxThreads; ++i)
			if (threads[i] == thisThread)
				threads[i] = 0;
	}

	JNIEnv* get() const noexcept
	{
		const pthread_t thisThread = pthread_self();

		for (int i = 0; i < maxThreads; ++i)
			if (threads[i] == thisThread)
				return envs[i];

		return nullptr;
	}

	enum { maxThreads = 16 };

private:
	JavaVM* jvm;
	pthread_t threads [maxThreads];
	JNIEnv* envs [maxThreads];
	SpinLock addRemoveLock;

	void addEnv (JNIEnv* env)
	{
		SpinLock::ScopedLockType sl (addRemoveLock);

		if (get() == nullptr)
		{
			const pthread_t thisThread = pthread_self();

			for (int i = 0; i < maxThreads; ++i)
			{
				if (threads[i] == 0)
				{
					envs[i] = env;
					threads[i] = thisThread;
					return;
				}
			}
		}

		jassertfalse; // too many threads!
	}
};

extern ThreadLocalJNIEnvHolder threadLocalJNIEnvHolder;

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (createNewView,          "createNewView",        "(Z)L" JUCE_ANDROID_ACTIVITY_CLASSPATH "$ComponentPeerView;") \
 METHOD (deleteView,             "deleteView",           "(L" JUCE_ANDROID_ACTIVITY_CLASSPATH "$ComponentPeerView;)V") \
 METHOD (postMessage,            "postMessage",          "(J)V") \
 METHOD (finish,                 "finish",               "()V") \
 METHOD (getClipboardContent,    "getClipboardContent",  "()Ljava/lang/String;") \
 METHOD (setClipboardContent,    "setClipboardContent",  "(Ljava/lang/String;)V") \
 METHOD (excludeClipRegion,      "excludeClipRegion",    "(Landroid/graphics/Canvas;FFFF)V") \
 METHOD (renderGlyph,            "renderGlyph",          "(CLandroid/graphics/Paint;Landroid/graphics/Matrix;Landroid/graphics/Rect;)[I") \
 STATICMETHOD (createHTTPStream, "createHTTPStream",     "(Ljava/lang/String;Z[BLjava/lang/String;ILjava/lang/StringBuffer;)L" JUCE_ANDROID_ACTIVITY_CLASSPATH "$HTTPStream;") \
 METHOD (launchURL,              "launchURL",            "(Ljava/lang/String;)V") \
 METHOD (showMessageBox,         "showMessageBox",       "(Ljava/lang/String;Ljava/lang/String;J)V") \
 METHOD (showOkCancelBox,        "showOkCancelBox",      "(Ljava/lang/String;Ljava/lang/String;J)V") \
 METHOD (showYesNoCancelBox,     "showYesNoCancelBox",   "(Ljava/lang/String;Ljava/lang/String;J)V") \

DECLARE_JNI_CLASS (JuceAppActivity, JUCE_ANDROID_ACTIVITY_CLASSPATH);
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (constructor,   "<init>",           "(I)V") \
 METHOD (setColor,      "setColor",         "(I)V") \
 METHOD (setAlpha,      "setAlpha",         "(I)V") \
 METHOD (setTypeface,   "setTypeface",      "(Landroid/graphics/Typeface;)Landroid/graphics/Typeface;") \
 METHOD (ascent,        "ascent",           "()F") \
 METHOD (descent,       "descent",          "()F") \
 METHOD (setTextSize,   "setTextSize",      "(F)V") \
 METHOD (getTextWidths, "getTextWidths",    "(Ljava/lang/String;[F)I") \
 METHOD (setTextScaleX, "setTextScaleX",    "(F)V") \
 METHOD (getTextPath,   "getTextPath",      "(Ljava/lang/String;IIFFLandroid/graphics/Path;)V") \
 METHOD (setShader,     "setShader",        "(Landroid/graphics/Shader;)Landroid/graphics/Shader;") \

DECLARE_JNI_CLASS (Paint, "android/graphics/Paint");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (constructor,   "<init>",    "()V") \
 METHOD (setValues,     "setValues", "([F)V") \

DECLARE_JNI_CLASS (Matrix, "android/graphics/Matrix");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (constructor,   "<init>",   "(IIII)V") \
 FIELD (left,           "left",     "I") \
 FIELD (right,          "right",    "I") \
 FIELD (top,            "top",      "I") \
 FIELD (bottom,         "bottom",   "I") \

DECLARE_JNI_CLASS (RectClass, "android/graphics/Rect");
#undef JNI_CLASS_MEMBERS

#endif   // __JUCE_ANDROID_JNIHELPERS_JUCEHEADER__

/*** End of inlined file: juce_android_JNIHelpers.h ***/



/*** Start of inlined file: juce_android_GraphicsContext.cpp ***/
namespace GraphicsHelpers
{
	jobject createPaint (Graphics::ResamplingQuality quality)
	{
		jint constructorFlags = 1 /*ANTI_ALIAS_FLAG*/
								| 4 /*DITHER_FLAG*/
								| 128 /*SUBPIXEL_TEXT_FLAG*/;

		if (quality > Graphics::lowResamplingQuality)
			constructorFlags |= 2; /*FILTER_BITMAP_FLAG*/

		return getEnv()->NewObject (Paint, Paint.constructor, constructorFlags);
	}

	const jobject createMatrix (JNIEnv* env, const AffineTransform& t)
	{
		jobject m = env->NewObject (Matrix, Matrix.constructor);

		jfloat values[9] = { t.mat00, t.mat01, t.mat02,
							 t.mat10, t.mat11, t.mat12,
							 0.0f, 0.0f, 1.0f };

		jfloatArray javaArray = env->NewFloatArray (9);
		env->SetFloatArrayRegion (javaArray, 0, 9, values);

		env->CallVoidMethod (m, Matrix.setValues, javaArray);
		env->DeleteLocalRef (javaArray);

		return m;
	}
}

#if USE_ANDROID_CANVAS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (constructor,    "<init>",          "(Landroid/graphics/Bitmap;)V") \
 METHOD (drawRect,       "drawRect",        "(FFFFLandroid/graphics/Paint;)V") \
 METHOD (translate,      "translate",       "(FF)V") \
 METHOD (clipPath,       "clipPath",        "(Landroid/graphics/Path;)Z") \
 METHOD (clipRect,       "clipRect",        "(FFFF)Z") \
 METHOD (clipRegion,     "clipRegion",      "(Landroid/graphics/Region;)Z") \
 METHOD (concat,         "concat",          "(Landroid/graphics/Matrix;)V") \
 METHOD (drawBitmap,     "drawBitmap",      "(Landroid/graphics/Bitmap;Landroid/graphics/Matrix;Landroid/graphics/Paint;)V") \
 METHOD (drawBitmapAt,   "drawBitmap",      "(Landroid/graphics/Bitmap;FFLandroid/graphics/Paint;)V") \
 METHOD (drawMemoryBitmap, "drawBitmap",    "([IIIFFIIZLandroid/graphics/Paint;)V") \
 METHOD (drawLine,       "drawLine",        "(FFFFLandroid/graphics/Paint;)V") \
 METHOD (drawPath,       "drawPath",        "(Landroid/graphics/Path;Landroid/graphics/Paint;)V") \
 METHOD (drawText,       "drawText",        "(Ljava/lang/String;FFLandroid/graphics/Paint;)V") \
 METHOD (getClipBounds,  "getClipBounds",   "(Landroid/graphics/Rect;)Z") \
 METHOD (getClipBounds2, "getClipBounds",   "()Landroid/graphics/Rect;") \
 METHOD (getMatrix,      "getMatrix",       "()Landroid/graphics/Matrix;") \
 METHOD (save,           "save",            "()I") \
 METHOD (restore,        "restore",         "()V") \
 METHOD (saveLayerAlpha, "saveLayerAlpha",  "(FFFFII)I")

DECLARE_JNI_CLASS (Canvas, "android/graphics/Canvas");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (constructor,   "<init>",        "()V") \
 METHOD (moveTo,        "moveTo",        "(FF)V") \
 METHOD (lineTo,        "lineTo",        "(FF)V") \
 METHOD (quadTo,        "quadTo",        "(FFFF)V") \
 METHOD (cubicTo,       "cubicTo",       "(FFFFFF)V") \
 METHOD (closePath,     "close",         "()V") \
 METHOD (computeBounds, "computeBounds", "(Landroid/graphics/RectF;Z)V") \

DECLARE_JNI_CLASS (PathClass, "android/graphics/Path");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (constructor, "<init>", "()V"); \
 METHOD (regionUnion, "union",  "(Landroid/graphics/Rect;)Z"); \

DECLARE_JNI_CLASS (RegionClass, "android/graphics/Region");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 STATICMETHOD (createBitmap, "createBitmap", "(IILandroid/graphics/Bitmap$Config;)Landroid/graphics/Bitmap;") \
 METHOD (bitmapCopy, "copy",      "(Landroid/graphics/Bitmap$Config;Z)Landroid/graphics/Bitmap;") \
 METHOD (getPixels, "getPixels",  "([IIIIIII)V") \
 METHOD (setPixels, "setPixels",  "([IIIIIII)V") \
 METHOD (recycle, "recycle",      "()V") \

DECLARE_JNI_CLASS (BitmapClass, "android/graphics/Bitmap");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 STATICFIELD (ARGB_8888, "ARGB_8888", "Landroid/graphics/Bitmap$Config;") \
 STATICFIELD (ALPHA_8,   "ALPHA_8",   "Landroid/graphics/Bitmap$Config;") \

DECLARE_JNI_CLASS (BitmapConfig, "android/graphics/Bitmap$Config");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (constructor, "<init>", "(Landroid/graphics/Bitmap;Landroid/graphics/Shader$TileMode;Landroid/graphics/Shader$TileMode;)V")

DECLARE_JNI_CLASS (BitmapShader, "android/graphics/BitmapShader");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (setLocalMatrix, "setLocalMatrix", "(Landroid/graphics/Matrix;)V")

DECLARE_JNI_CLASS (ShaderClass, "android/graphics/Shader");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 STATICFIELD (CLAMP, "CLAMP", "Landroid/graphics/Shader$TileMode;")

DECLARE_JNI_CLASS (ShaderTileMode, "android/graphics/Shader$TileMode");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (constructor, "<init>", "(FFFF[I[FLandroid/graphics/Shader$TileMode;)V") \

DECLARE_JNI_CLASS (LinearGradientClass, "android/graphics/LinearGradient");
#undef JNI_CLASS_MEMBERS

#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 METHOD (constructor, "<init>", "(FFF[I[FLandroid/graphics/Shader$TileMode;)V") \

DECLARE_JNI_CLASS (RadialGradientClass, "android/graphics/RadialGradient");
#undef JNI_CLASS_MEMBERS

class AndroidImage  : public ImagePixelData
{
public:
	AndroidImage (const int width_, const int height_, const bool clearImage)
		: ImagePixelData (Image::ARGB, width_, height_),
		  bitmap (createBitmap (width_, height_, false))
	{
	}

	AndroidImage (const int width_, const int height_, const GlobalRef& bitmap_)
		: ImagePixelData (Image::ARGB, width_, height_),
		  bitmap (bitmap_)
	{
	}

	~AndroidImage()
	{
		if (bitmap != 0)
			bitmap.callVoidMethod (BitmapClass.recycle);
	}

	LowLevelGraphicsContext* createLowLevelContext();

	void initialiseBitmapData (Image::BitmapData& bm, int x, int y, Image::BitmapData::ReadWriteMode mode)
	{
		bm.lineStride = width * sizeof (jint);
		bm.pixelStride = sizeof (jint);
		bm.pixelFormat = Image::ARGB;
		bm.dataReleaser = new CopyHandler (*this, bm, x, y, mode);
	}

	ImagePixelData* clone()
	{
		JNIEnv* env = getEnv();
		jobject mode = env->GetStaticObjectField (BitmapConfig, BitmapConfig.ARGB_8888);
		GlobalRef newCopy (bitmap.callObjectMethod (BitmapClass.bitmapCopy, mode, true));
		env->DeleteLocalRef (mode);

		return new AndroidImage (width, height, newCopy);
	}

	ImageType* createType() const    { return new NativeImageType(); }

	static jobject createBitmap (int width, int height, bool asSingleChannel)
	{
		JNIEnv* env = getEnv();
		jobject mode = env->GetStaticObjectField (BitmapConfig, asSingleChannel ? BitmapConfig.ALPHA_8
																				: BitmapConfig.ARGB_8888);
		jobject result = env->CallStaticObjectMethod (BitmapClass, BitmapClass.createBitmap, width, height, mode);
		env->DeleteLocalRef (mode);
		return result;
	}

	GlobalRef bitmap;

private:
	class CopyHandler  : public Image::BitmapData::BitmapDataReleaser
	{
	public:
		CopyHandler (AndroidImage& owner_, Image::BitmapData& bitmapData_,
					 const int x_, const int y_, const Image::BitmapData::ReadWriteMode mode_)
			: owner (owner_), bitmapData (bitmapData_), mode (mode_), x (x_), y (y_)
		{
			JNIEnv* env = getEnv();

			intArray = env->NewIntArray (bitmapData.width * bitmapData.height);

			if (mode != Image::BitmapData::writeOnly)
				owner_.bitmap.callVoidMethod (BitmapClass.getPixels, intArray, 0, bitmapData.width, x_, y_,
											  bitmapData.width, bitmapData.height);

			bitmapData.data = (uint8*) env->GetIntArrayElements (intArray, 0);

			if (mode != Image::BitmapData::writeOnly)
			{
				for (int yy = 0; yy < bitmapData.height; ++yy)
				{
					PixelARGB* p = (PixelARGB*) bitmapData.getLinePointer (yy);

					for (int xx = 0; xx < bitmapData.width; ++xx)
						p[xx].premultiply();
				}
			}
		}

		~CopyHandler()
		{
			JNIEnv* env = getEnv();

			if (mode != Image::BitmapData::readOnly)
			{
				for (int yy = 0; yy < bitmapData.height; ++yy)
				{
					PixelARGB* p = (PixelARGB*) bitmapData.getLinePointer (yy);

					for (int xx = 0; xx < bitmapData.width; ++xx)
						p[xx].unpremultiply();
				}
			}

			env->ReleaseIntArrayElements (intArray, (jint*) bitmapData.data, 0);

			if (mode != Image::BitmapData::readOnly)
				owner.bitmap.callVoidMethod (BitmapClass.setPixels, intArray, 0, bitmapData.width, x, y,
											 bitmapData.width, bitmapData.height);

			env->DeleteLocalRef (intArray);
		}

	private:
		AndroidImage& owner;
		Image::BitmapData& bitmapData;
		jintArray intArray;
		const Image::BitmapData::ReadWriteMode mode;
		const int x, y;

		JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (CopyHandler);
	};

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AndroidImage);
};
#endif

ImagePixelData* NativeImageType::create (Image::PixelFormat format, int width, int height, bool clearImage) const
{
   #if USE_ANDROID_CANVAS
	if (pixelFormat != Image::SingleChannel)
		return new AndroidImage (width, height, clearImage);
   #endif

	return SoftwareImageType().create (format, width, height, clearImage);
}

#if USE_ANDROID_CANVAS

class AndroidLowLevelGraphicsContext   : public LowLevelGraphicsContext
{
public:
	AndroidLowLevelGraphicsContext (jobject canvas_)
		: originalCanvas (canvas_),
		  currentState (new SavedState (canvas_))
	{
		setFill (Colours::black);
	}

	~AndroidLowLevelGraphicsContext()
	{
		while (stateStack.size() > 0)
			restoreState();

		currentState->flattenImageClippingLayer (originalCanvas);
	}

	bool isVectorDevice() const { return false; }

	void setOrigin (int x, int y)
	{
		getCanvas().callVoidMethod (Canvas.translate, (float) x, (float) y);
	}

	void addTransform (const AffineTransform& transform)
	{
		getCanvas().callVoidMethod (Canvas.concat, createMatrixRef (getEnv(), transform).get());
	}

	float getScaleFactor()
	{
		return 1.0f;
	}

	bool clipToRectangle (const Rectangle<int>& r)
	{
		return getCanvas().callBooleanMethod (Canvas.clipRect, (float) r.getX(), (float) r.getY(), (float) r.getRight(), (float) r.getBottom());
	}

	bool clipToRectangleList (const RectangleList& clipRegion)
	{
		RectangleList excluded (getClipBounds());
		excluded.subtract (clipRegion);

		const int numRects = excluded.getNumRectangles();

		for (int i = 0; i < numRects; ++i)
			excludeClipRectangle (excluded.getRectangle(i));
	}

	void excludeClipRectangle (const Rectangle<int>& r)
	{
		android.activity.callVoidMethod (JuceAppActivity.excludeClipRegion, getCanvas().get(),
										 (float) r.getX(), (float) r.getY(), (float) r.getRight(), (float) r.getBottom());
	}

	void clipToPath (const Path& path, const AffineTransform& transform)
	{
		(void) getCanvas().callBooleanMethod (Canvas.clipPath, createPath (getEnv(), path, transform).get());
	}

	void clipToImageAlpha (const Image& sourceImage, const AffineTransform& transform)
	{
		// XXX couldn't get image clipping to work...
		JNIEnv* env = getEnv();

		{
			Path p;
			p.addRectangle (sourceImage.getBounds().toFloat());
			clipToPath (p, transform);
		}

		Rectangle<int> bounds (getClipBounds());

		jobject temporaryLayerBitmap = AndroidImage::createBitmap (bounds.getWidth(), bounds.getHeight(), false);
		jobject temporaryCanvas = env->NewObject (Canvas, Canvas.constructor, temporaryLayerBitmap);

		setFill (Colours::red);
		env->CallVoidMethod (temporaryCanvas, Canvas.drawRect,
							 (jfloat) 20, (jfloat) 20, (jfloat) 300, (jfloat) 200,
									getCurrentPaint());

		env->CallVoidMethod (temporaryCanvas, Canvas.translate,
							 (jfloat) -bounds.getX(), (jfloat) -bounds.getY());

		Image maskImage (Image::SingleChannel, bounds.getWidth(), bounds.getHeight(), true);

		{
			Graphics g (maskImage);
			g.setOrigin (-bounds.getWidth(), -bounds.getHeight());
			g.drawImageTransformed (sourceImage, transform);
		}

		SavedState* const top = stateStack.getLast();
		currentState->clipToImage (top != nullptr ? top->canvas.get() : originalCanvas,
								   temporaryCanvas, temporaryLayerBitmap, maskImage,
								   bounds.getX(), bounds.getY());
	}

	bool clipRegionIntersects (const Rectangle<int>& r)
	{
		return getClipBounds().intersects (r);
	}

	Rectangle<int> getClipBounds() const
	{
		JNIEnv* env = getEnv();
		jobject rect = getCanvas().callObjectMethod (Canvas.getClipBounds2);

		const int left   = env->GetIntField (rect, RectClass.left);
		const int top    = env->GetIntField (rect, RectClass.top);
		const int right  = env->GetIntField (rect, RectClass.right);
		const int bottom = env->GetIntField (rect, RectClass.bottom);
		env->DeleteLocalRef (rect);

		return Rectangle<int> (left, top, right - left, bottom - top);
	}

	bool isClipEmpty() const
	{
		LocalRef<jobject> tempRect (getEnv()->NewObject (RectClass, RectClass.constructor, 0, 0, 0, 0));
		return ! getCanvas().callBooleanMethod (Canvas.getClipBounds, tempRect.get());
	}

	void setFill (const FillType& fillType)
	{
		currentState->setFillType (fillType);
	}

	void setOpacity (float newOpacity)
	{
		currentState->setAlpha (newOpacity);
	}

	void setInterpolationQuality (Graphics::ResamplingQuality quality)
	{
		currentState->setInterpolationQuality (quality);
	}

	void fillRect (const Rectangle<int>& r, bool replaceExistingContents)
	{
		getCanvas().callVoidMethod (Canvas.drawRect,
									(float) r.getX(), (float) r.getY(), (float) r.getRight(), (float) r.getBottom(),
									getCurrentPaint());
	}

	void fillPath (const Path& path, const AffineTransform& transform)
	{
		getCanvas().callVoidMethod (Canvas.drawPath, createPath (getEnv(), path, transform).get(),
									getCurrentPaint());
	}

	void drawImage (const Image& sourceImage, const AffineTransform& transform)
	{
		AndroidImage* androidImage = dynamic_cast <AndroidImage*> (sourceImage.getPixelData());

		if (androidImage != 0)
		{
			JNIEnv* env = getEnv();
			getCanvas().callVoidMethod (Canvas.drawBitmap, androidImage->bitmap.get(),
										createMatrixRef (env, transform).get(), getImagePaint());
		}
		else
		{
			if (transform.isOnlyTranslation())
			{
				JNIEnv* env = getEnv();

				Image::BitmapData bm (sourceImage, Image::BitmapData::readOnly);

				jintArray imageData = env->NewIntArray (bm.width * bm.height);
				jint* dest = env->GetIntArrayElements (imageData, 0);

				if (dest != 0)
				{
					const uint8* srcLine = bm.getLinePointer (0);
					jint* dstLine = dest;

					for (int y = 0; y < bm.height; ++y)
					{
						switch (bm.pixelFormat)
						{
							case Image::ARGB:           copyPixels (dstLine, (PixelARGB*) srcLine, bm.width, bm.pixelStride); break;
							case Image::RGB:            copyPixels (dstLine, (PixelRGB*) srcLine, bm.width, bm.pixelStride); break;
							case Image::SingleChannel:  copyPixels (dstLine, (PixelAlpha*) srcLine, bm.width, bm.pixelStride); break;
							default:                    jassertfalse; break;
						}

						srcLine += bm.lineStride;
						dstLine += bm.width;
					}

					env->ReleaseIntArrayElements (imageData, dest, 0);

					getCanvas().callVoidMethod (Canvas.drawMemoryBitmap, imageData, 0, bm.width,
												transform.getTranslationX(), transform.getTranslationY(),
												bm.width, bm.height, true, getImagePaint());
					env->DeleteLocalRef (imageData);
				}
			}
			else
			{
				saveState();
				addTransform (transform);
				drawImage (sourceImage, AffineTransform::identity);
				restoreState();
			}
		}
	}

	void drawLine (const Line <float>& line)
	{
		getCanvas().callVoidMethod (Canvas.drawLine, line.getStartX(), line.getStartY(),
									line.getEndX(), line.getEndY(), getCurrentPaint());
	}

	void drawVerticalLine (int x, float top, float bottom)
	{
		getCanvas().callVoidMethod (Canvas.drawRect, (float) x, top, x + 1.0f, bottom, getCurrentPaint());
	}

	void drawHorizontalLine (int y, float left, float right)
	{
		getCanvas().callVoidMethod (Canvas.drawRect, left, (float) y, right, y + 1.0f, getCurrentPaint());
	}

	void setFont (const Font& newFont)
	{
		if (currentState->font != newFont)
		{
			currentState->font = newFont;
			currentState->typefaceNeedsUpdate = true;
		}
	}

	const Font& getFont()
	{
		return currentState->font;
	}

	void drawGlyph (int glyphNumber, const AffineTransform& transform)
	{
		if (transform.isOnlyTranslation())
		{
			getCanvas().callVoidMethod (Canvas.drawText, javaStringFromChar ((juce_wchar) glyphNumber).get(),
										transform.getTranslationX(), transform.getTranslationY(),
										currentState->getPaintForTypeface());
		}
		else
		{
			saveState();
			addTransform (transform);
			drawGlyph (glyphNumber, AffineTransform::identity);
			restoreState();
		}
	}

	void saveState()
	{
		(void) getCanvas().callIntMethod (Canvas.save);
		stateStack.add (new SavedState (*currentState));
	}

	void restoreState()
	{
		SavedState* const top = stateStack.getLast();

		if (top != 0)
		{
			currentState->flattenImageClippingLayer (top->canvas);

			currentState = top;
			stateStack.removeLast (1, false);
		}
		else
		{
			jassertfalse; // trying to pop with an empty stack!
		}

		getCanvas().callVoidMethod (Canvas.restore);
	}

	void beginTransparencyLayer (float opacity)
	{
		Rectangle<int> clip (getClipBounds());

		(void) getCanvas().callIntMethod (Canvas.saveLayerAlpha,
										  (float) clip.getX(),
										  (float) clip.getY(),
										  (float) clip.getRight(),
										  (float) clip.getBottom(),
										  jlimit (0, 255, roundToInt (opacity * 255.0f)),
										  31 /*ALL_SAVE_FLAG*/);

		stateStack.add (new SavedState (*currentState));
	}

	void endTransparencyLayer()
	{
		restoreState();
	}

	class SavedState
	{
	public:
		SavedState (jobject canvas_)
			: canvas (canvas_), font (1.0f), quality (Graphics::highResamplingQuality),
			  fillNeedsUpdate (true), typefaceNeedsUpdate (true)
		{
		}

		SavedState (const SavedState& other)
			: canvas (other.canvas), fillType (other.fillType), font (other.font),
			  quality (other.quality), fillNeedsUpdate (true), typefaceNeedsUpdate (true)
		{
		}

		void setFillType (const FillType& newType)
		{
			fillNeedsUpdate = true;
			fillType = newType;
		}

		void setAlpha (float alpha)
		{
			fillNeedsUpdate = true;
			fillType.colour = fillType.colour.withAlpha (alpha);
		}

		void setInterpolationQuality (Graphics::ResamplingQuality quality_)
		{
			if (quality != quality_)
			{
				quality = quality_;
				fillNeedsUpdate = true;
				paint.clear();
			}
		}

		jobject getPaint()
		{
			if (fillNeedsUpdate)
			{
				JNIEnv* env = getEnv();

				if (paint.get() == 0)
					paint = GlobalRef (GraphicsHelpers::createPaint (quality));

				if (fillType.isColour())
				{
					env->DeleteLocalRef (paint.callObjectMethod (Paint.setShader, (jobject) 0));
					paint.callVoidMethod (Paint.setColor, colourToInt (fillType.colour));
				}
				else if (fillType.isGradient())
				{
					const ColourGradient& g = *fillType.gradient;
					const Point<float> p1 (g.point1);
					const Point<float> p2 (g.point2);

					const int numColours = g.getNumColours();
					jintArray coloursArray = env->NewIntArray (numColours);
					jfloatArray positionsArray = env->NewFloatArray (numColours);

					{
						HeapBlock<int> colours (numColours);
						HeapBlock<float> positions (numColours);

						for (int i = 0; i < numColours; ++i)
						{
							colours[i] = colourToInt (g.getColour (i));
							positions[i] = (float) g.getColourPosition(i);
						}

						env->SetIntArrayRegion (coloursArray, 0, numColours, colours.getData());
						env->SetFloatArrayRegion (positionsArray, 0, numColours, positions.getData());
					}

					jobject tileMode = env->GetStaticObjectField (ShaderTileMode, ShaderTileMode.CLAMP);

					jobject shader;
					if (fillType.gradient->isRadial)
					{
						shader = env->NewObject (RadialGradientClass,
												 RadialGradientClass.constructor,
												 p1.getX(), p1.getY(),
												 p1.getDistanceFrom (p2),
												 coloursArray, positionsArray,
												 tileMode);
					}
					else
					{
						shader = env->NewObject (LinearGradientClass,
												 LinearGradientClass.constructor,
												 p1.getX(), p1.getY(), p2.getX(), p2.getY(),
												 coloursArray, positionsArray,
												 tileMode);
					}

					env->DeleteLocalRef (tileMode);
					env->DeleteLocalRef (coloursArray);
					env->DeleteLocalRef (positionsArray);

					env->CallVoidMethod (shader, ShaderClass.setLocalMatrix, createMatrixRef (env, fillType.transform).get());
					env->DeleteLocalRef (paint.callObjectMethod (Paint.setShader, shader));

					env->DeleteLocalRef (shader);
				}
				else
				{
					// TODO xxx
				}
			}

			return paint.get();
		}

		jobject getPaintForTypeface()
		{
			jobject p = getPaint();

			if (typefaceNeedsUpdate)
			{
				typefaceNeedsUpdate = false;
				const Typeface::Ptr t (font.getTypeface());
				AndroidTypeface* atf = dynamic_cast <AndroidTypeface*> (t.getObject());

				if (atf != 0)
				{
					paint.callObjectMethod (Paint.setTypeface, atf->typeface.get());
					paint.callVoidMethod (Paint.setTextSize, font.getHeight());

					const float hScale = font.getHorizontalScale();

					if (hScale < 0.99f || hScale > 1.01f)
						paint.callVoidMethod (Paint.setTextScaleX, hScale);
				}

				fillNeedsUpdate = true;
				paint.callVoidMethod (Paint.setAlpha, (jint) fillType.colour.getAlpha());
			}

			return p;
		}

		jobject getImagePaint()
		{
			jobject p = getPaint();
			paint.callVoidMethod (Paint.setAlpha, (jint) fillType.colour.getAlpha());
			fillNeedsUpdate = true;
			return p;
		}

		void flattenImageClippingLayer (jobject previousCanvas)
		{
			// XXX couldn't get image clipping to work...

			if (temporaryLayerBitmap != 0)
			{
				JNIEnv* env = getEnv();

				jobject tileMode = env->GetStaticObjectField (ShaderTileMode, ShaderTileMode.CLAMP);
				jobject shader = env->NewObject (BitmapShader, BitmapShader.constructor,
												 temporaryLayerBitmap.get(), tileMode, tileMode);
				env->DeleteLocalRef (tileMode);

				jobject compositingPaint = GraphicsHelpers::createPaint (quality);
				env->CallObjectMethod (compositingPaint, Paint.setShader, shader);
				env->DeleteLocalRef (shader);

				LocalRef<jobject> maskBitmap (createAlphaBitmap (env, maskImage));
				maskImage = Image::null;

				env->CallVoidMethod (previousCanvas, Canvas.drawBitmapAt,
									 maskBitmap.get(), (jfloat) maskLayerX, (jfloat) maskLayerY, compositingPaint);

				env->DeleteLocalRef (compositingPaint);

				canvas = GlobalRef (previousCanvas);

				env->CallVoidMethod (temporaryLayerBitmap.get(), BitmapClass.recycle);
				env->CallVoidMethod (maskBitmap.get(), BitmapClass.recycle);

				temporaryLayerBitmap.clear();
			}
		}

		void clipToImage (jobject previousCanvas,
						  jobject temporaryCanvas, jobject temporaryLayerBitmap_,
						  const Image& maskImage_,
						  int maskLayerX_, int maskLayerY_)
		{
			// XXX couldn't get image clipping to work...
			flattenImageClippingLayer (previousCanvas);

			maskLayerX = maskLayerX_;
			maskLayerY = maskLayerY_;
			canvas = GlobalRef (temporaryCanvas);
			temporaryLayerBitmap = GlobalRef (temporaryLayerBitmap_);
			maskImage = maskImage_;
		}

		static jobject createAlphaBitmap (JNIEnv* env, const Image& image)
		{
			Image::BitmapData bm (image, Image::BitmapData::readOnly);

			jobject bitmap = AndroidImage::createBitmap (bm.width, bm.height, true);

			jintArray intArray = env->NewIntArray (bm.width * bm.height);
			jint* const dest = env->GetIntArrayElements (intArray, 0);

			for (int yy = 0; yy < bm.height; ++yy)
			{
				PixelAlpha* src = (PixelAlpha*) bm.getLinePointer (yy);
				jint* destLine = dest + yy * bm.width;

				for (int xx = 0; xx < bm.width; ++xx)
				{
					destLine[xx] = src->getAlpha();
					src = addBytesToPointer (src, bm.pixelStride);
				}
			}

			env->ReleaseIntArrayElements (intArray, (jint*) dest, 0);
			env->CallVoidMethod (bitmap, BitmapClass.setPixels, intArray, 0, bm.width, 0, 0, bm.width, bm.height);
			env->DeleteLocalRef (intArray);
			return bitmap;
		}

		GlobalRef canvas, temporaryLayerBitmap;
		FillType fillType;
		Font font;
		GlobalRef paint;
		bool fillNeedsUpdate, typefaceNeedsUpdate;
		Graphics::ResamplingQuality quality;
		Image maskImage;
		int maskLayerX, maskLayerY;
	};

private:

	GlobalRef originalCanvas;

	ScopedPointer <SavedState> currentState;
	OwnedArray <SavedState> stateStack;

	GlobalRef& getCanvas() const noexcept     { return currentState->canvas; }

	jobject getCurrentPaint() const     { return currentState->getPaint(); }
	jobject getImagePaint() const       { return currentState->getImagePaint(); }

	static LocalRef<jobject> createPath (JNIEnv* env, const Path& path)
	{
		jobject p = env->NewObject (PathClass, PathClass.constructor);

		Path::Iterator i (path);

		while (i.next())
		{
			switch (i.elementType)
			{
				case Path::Iterator::startNewSubPath:  env->CallVoidMethod (p, PathClass.moveTo, i.x1, i.y1); break;
				case Path::Iterator::lineTo:           env->CallVoidMethod (p, PathClass.lineTo, i.x1, i.y1); break;
				case Path::Iterator::quadraticTo:      env->CallVoidMethod (p, PathClass.quadTo, i.x1, i.y1, i.x2, i.y2); break;
				case Path::Iterator::cubicTo:          env->CallVoidMethod (p, PathClass.cubicTo, i.x1, i.y1, i.x2, i.y2, i.x3, i.y3); break;
				case Path::Iterator::closePath:        env->CallVoidMethod (p, PathClass.closePath); break;
				default:                               jassertfalse; break;
			}
		}

		return LocalRef<jobject> (p);
	}

	static LocalRef<jobject> createPath (JNIEnv* env, const Path& path, const AffineTransform& transform)
	{
		if (transform.isIdentity())
			return createPath (env, path);

		Path tempPath (path);
		tempPath.applyTransform (transform);
		return createPath (env, tempPath);
	}

	static LocalRef<jobject> createMatrixRef (JNIEnv* env, const AffineTransform& t)
	{
		return LocalRef<jobject> (GraphicsHelpers::createMatrix (env, t));
	}

	static LocalRef<jobject> createRect (JNIEnv* env, const Rectangle<int>& r)
	{
		return LocalRef<jobject> (env->NewObject (RectClass, RectClass.constructor,
												  r.getX(), r.getY(), r.getRight(), r.getBottom()));
	}

	static LocalRef<jobject> createRegion (JNIEnv* env, const RectangleList& list)
	{
		jobject region = env->NewObject (RegionClass, RegionClass.constructor);

		const int numRects = list.getNumRectangles();

		for (int i = 0; i < numRects; ++i)
			env->CallBooleanMethod (region, RegionClass.regionUnion, createRect (env, list.getRectangle(i)).get());

		return LocalRef<jobject> (region);
	}

	static int colourToInt (const Colour& col) noexcept
	{
		return col.getARGB();
	}

	template <class PixelType>
	static void copyPixels (jint* const dest, const PixelType* src, const int width, const int pixelStride) noexcept
	{
		for (int x = 0; x < width; ++x)
		{
			dest[x] = src->getUnpremultipliedARGB();
			src = addBytesToPointer (src, pixelStride);
		}
	}

	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AndroidLowLevelGraphicsContext);
};

LowLevelGraphicsContext* AndroidImage::createLowLevelContext()
{
	jobject canvas = getEnv()->NewObject (Canvas, Canvas.constructor, bitmap.get());
	return new AndroidLowLevelGraphicsContext (canvas);
}
#endif

/*** End of inlined file: juce_android_GraphicsContext.cpp ***/


/*** Start of inlined file: juce_android_Fonts.cpp ***/
#define JNI_CLASS_MEMBERS(METHOD, STATICMETHOD, FIELD, STATICFIELD) \
 STATICMETHOD (create,          "create",           "(Ljava/lang/String;I)Landroid/graphics/Typeface;") \
 STATICMETHOD (createFromFile,  "createFromFile",   "(Ljava/lang/String;)Landroid/graphics/Typeface;") \

DECLARE_JNI_CLASS (TypefaceClass, "android/graphics/Typeface");
#undef JNI_CLASS_MEMBERS

StringArray Font::findAllTypefaceNames()
{
	StringArray results;

	Array<File> fonts;
	File ("/system/fonts").findChildFiles (fonts, File::findFiles, false, "*.ttf");

	for (int i = 0; i < fonts.size(); ++i)
		results.add (fonts.getReference(i).getFileNameWithoutExtension());

	return results;
}

struct DefaultFontNames
{
	DefaultFontNames()
		: defaultSans  ("sans"),
		  defaultSerif ("serif"),
		  defaultFixed ("monospace"),
		  defaultFallback ("sans")
	{
	}

	String defaultSans, defaultSerif, defaultFixed, defaultFallback;
};

Typeface::Ptr Font::getDefaultTypefaceForFont (const Font& font)
{
	static DefaultFontNames defaultNames;

	String faceName (font.getTypefaceName());

	if (faceName == Font::getDefaultSansSerifFontName())       faceName = defaultNames.defaultSans;
	else if (faceName == Font::getDefaultSerifFontName())      faceName = defaultNames.defaultSerif;
	else if (faceName == Font::getDefaultMonospacedFontName()) faceName = defaultNames.defaultFixed;

	Font f (font);
	f.setTypefaceName (faceName);
	return Typeface::createSystemTypefaceFor (f);
}

class AndroidTypeface   : public Typeface
{
public:
	AndroidTypeface (const Font& font)
		: Typeface (font.getTypefaceName()),
		  ascent (0),
		  descent (0)
	{
		jint flags = 0;
		if (font.isBold()) flags = 1;
		if (font.isItalic()) flags += 2;

		JNIEnv* env = getEnv();

		File fontFile (File ("/system/fonts").getChildFile (name).withFileExtension (".ttf"));

		if (fontFile.exists())
			typeface = GlobalRef (env->CallStaticObjectMethod (TypefaceClass, TypefaceClass.createFromFile,
															   javaString (fontFile.getFullPathName()).get()));
		else
			typeface = GlobalRef (env->CallStaticObjectMethod (TypefaceClass, TypefaceClass.create,
															   javaString (getName()).get(), flags));

		rect = GlobalRef (env->NewObject (RectClass, RectClass.constructor, 0, 0, 0, 0));

		paint = GlobalRef (GraphicsHelpers::createPaint (Graphics::highResamplingQuality));
		const LocalRef<jobject> ignored (paint.callObjectMethod (Paint.setTypeface, typeface.get()));

		const float standardSize = 256.0f;
		paint.callVoidMethod (Paint.setTextSize, standardSize);
		ascent = std::abs (paint.callFloatMethod (Paint.ascent)) / standardSize;
		descent = paint.callFloatMethod (Paint.descent) / standardSize;

		const float height = ascent + descent;
		unitsToHeightScaleFactor = 1.0f / 256.0f;//(height * standardSize);
	}

	float getAscent() const    { return ascent; }
	float getDescent() const   { return descent; }

	float getStringWidth (const String& text)
	{
		JNIEnv* env = getEnv();
		const int numChars = text.length();
		jfloatArray widths = env->NewFloatArray (numChars);

		const int numDone = paint.callIntMethod (Paint.getTextWidths, javaString (text).get(), widths);

		HeapBlock<jfloat> localWidths (numDone);
		env->GetFloatArrayRegion (widths, 0, numDone, localWidths);
		env->DeleteLocalRef (widths);

		float x = 0;
		for (int i = 0; i < numDone; ++i)
			x += localWidths[i];

		return x * unitsToHeightScaleFactor;
	}

	void getGlyphPositions (const String& text, Array<int>& glyphs, Array<float>& xOffsets)
	{
		JNIEnv* env = getEnv();
		const int numChars = text.length();
		jfloatArray widths = env->NewFloatArray (numChars);

		const int numDone = paint.callIntMethod (Paint.getTextWidths, javaString (text).get(), widths);

		HeapBlock<jfloat> localWidths (numDone);
		env->GetFloatArrayRegion (widths, 0, numDone, localWidths);
		env->DeleteLocalRef (widths);

		String::CharPointerType s (text.getCharPointer());

		xOffsets.add (0);

		float x = 0;
		for (int i = 0; i < numDone; ++i)
		{
			glyphs.add ((int) s.getAndAdvance());
			x += localWidths[i];
			xOffsets.add (x * unitsToHeightScaleFactor);
		}
	}

	bool getOutlineForGlyph (int /*glyphNumber*/, Path& /*destPath*/)
	{
		return false;
	}

	EdgeTable* getEdgeTableForGlyph (int glyphNumber, const AffineTransform& t)
	{
		JNIEnv* env = getEnv();

		jobject matrix = GraphicsHelpers::createMatrix (env, AffineTransform::scale (unitsToHeightScaleFactor, unitsToHeightScaleFactor).followedBy (t));
		jintArray maskData = (jintArray) android.activity.callObjectMethod (JuceAppActivity.renderGlyph, (jchar) glyphNumber, paint.get(), matrix, rect.get());

		env->DeleteLocalRef (matrix);

		const int left   = env->GetIntField (rect.get(), RectClass.left);
		const int top    = env->GetIntField (rect.get(), RectClass.top);
		const int right  = env->GetIntField (rect.get(), RectClass.right);
		const int bottom = env->GetIntField (rect.get(), RectClass.bottom);

		const Rectangle<int> bounds (left, top, right - left, bottom - top);

		if (bounds.isEmpty())
			return nullptr;

		jint* const maskDataElements = env->GetIntArrayElements (maskData, 0);

		EdgeTable* et = new EdgeTable (bounds);

		const jint* mask = maskDataElements;

		for (int y = top; y < bottom; ++y)
		{
		   #if JUCE_LITTLE_ENDIAN
			const uint8* const lineBytes = ((const uint8*) mask) + 3;
		   #else
			const uint8* const lineBytes = (const uint8*) mask;
		   #endif

			et->clipLineToMask (left, y, lineBytes, 4, bounds.getWidth());
			mask += bounds.getWidth();
		}

		env->ReleaseIntArrayElements (maskData, maskDataElements, 0);
		env->DeleteLocalRef (maskData);
		return et;
	}

	GlobalRef typeface, paint, rect;
	float ascent, descent, unitsToHeightScaleFactor;

private:
	JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AndroidTypeface);
};

Typeface::Ptr Typeface::createSystemTypefaceFor (const Font& font)
{
	return new AndroidTypeface (font);
}

bool TextLayout::createNativeLayout (const AttributedString&)
{
	return false;
}

/*** End of inlined file: juce_android_Fonts.cpp ***/

#endif

}

/*** End of inlined file: juce_graphics.cpp ***/

